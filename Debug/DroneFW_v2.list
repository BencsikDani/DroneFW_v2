
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015098  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  08015278  08015278  00025278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b98  08015b98  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08015b98  08015b98  00025b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ba0  08015ba0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ba0  08015ba0  00025ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ba4  08015ba4  00025ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08015ba8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048f4  200001f0  08015d98  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ae4  08015d98  00034ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027b30  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055fb  00000000  00000000  00057d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c98  00000000  00000000  0005d390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001605  00000000  00000000  0005f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d99  00000000  00000000  0006062d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000288df  00000000  00000000  0008a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed3a2  00000000  00000000  000b2ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008fbc  00000000  00000000  001a0048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001a9004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015260 	.word	0x08015260

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08015260 	.word	0x08015260

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

	// Clear controller variables
	pid->prevError  = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->integrator = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c

	// Clear output
	pid->out = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	; 0x30

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edd3 7a03 	vldr	s15, [r3, #12]
 8001116:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edd3 7a03 	vldr	s15, [r3, #12]
 800112a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edd3 7a04 	vldr	s15, [r3, #16]
 8001134:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	edd3 7a03 	vldr	s15, [r3, #12]
 800113e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float reference, float measurement)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	ed87 0a02 	vstr	s0, [r7, #8]
 8001164:	edc7 0a01 	vstr	s1, [r7, #4]
	//Error signal
	float error = reference - measurement;
 8001168:	ed97 7a02 	vldr	s14, [r7, #8]
 800116c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001174:	edc7 7a07 	vstr	s15, [r7, #28]

	// Proportional
    float proportional = pid->Kp * error;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001186:	edc7 7a06 	vstr	s15, [r7, #24]

	// Integral with Anti-windup
    pid->integrator = pid->integrator + (pid->antiWindup ? 0 : ( pid->Ki * (pid->T / 2) * (error + pid->prevError) ));
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <PIDController_Update+0x48>
 800119a:	eddf 7a59 	vldr	s15, [pc, #356]	; 8001300 <PIDController_Update+0x1a8>
 800119e:	e014      	b.n	80011ca <PIDController_Update+0x72>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	ed93 6a03 	vldr	s12, [r3, #12]
 80011ac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80011b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80011b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 80011be:	edd7 7a07 	vldr	s15, [r7, #28]
 80011c2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80011c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Derivative with low-pass filter
    pid->differentiator = (1 - pid->alpha) * pid->differentiator
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011e8:	ee27 7a27 	vmul.f32	s14, s14, s15
    		+ pid->alpha *  (pid->Kd * (error - pid->prevError) / pid->T);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	ed93 6a02 	vldr	s12, [r3, #8]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011fe:	edd7 5a07 	vldr	s11, [r7, #28]
 8001202:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001206:	ee66 5a27 	vmul.f32	s11, s12, s15
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	ed93 6a03 	vldr	s12, [r3, #12]
 8001210:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = (1 - pid->alpha) * pid->differentiator
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// Compute output
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001228:	edd7 7a06 	vldr	s15, [r7, #24]
 800122c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    float preSaturationOutput = pid->out;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	617b      	str	r3, [r7, #20]

    // Saturating (clamping) the output
    if (pid->out > pid->limMax)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd04      	ble.n	8001266 <PIDController_Update+0x10e>
        pid->out = pid->limMax;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	69da      	ldr	r2, [r3, #28]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	631a      	str	r2, [r3, #48]	; 0x30
 8001264:	e00e      	b.n	8001284 <PIDController_Update+0x12c>
    else if (pid->out < pid->limMin)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d503      	bpl.n	8001284 <PIDController_Update+0x12c>
        pid->out = pid->limMin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	699a      	ldr	r2, [r3, #24]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	631a      	str	r2, [r3, #48]	; 0x30

    // Anti-windup check
    // If clamping had an effect...
    if (preSaturationOutput != pid->out)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800128a:	ed97 7a05 	vldr	s14, [r7, #20]
 800128e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	d020      	beq.n	80012da <PIDController_Update+0x182>
    {
    	// ...and if the integrator is trying to make saturation worse
    	if ((preSaturationOutput > 0 && error > 0)
 8001298:	edd7 7a05 	vldr	s15, [r7, #20]
 800129c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	dd06      	ble.n	80012b4 <PIDController_Update+0x15c>
 80012a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	dc0d      	bgt.n	80012d0 <PIDController_Update+0x178>
    			|| (preSaturationOutput < 0 && error < 0))
 80012b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d50f      	bpl.n	80012e2 <PIDController_Update+0x18a>
 80012c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d508      	bpl.n	80012e2 <PIDController_Update+0x18a>
    		pid->antiWindup = true;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]
 80012d8:	e003      	b.n	80012e2 <PIDController_Update+0x18a>
    }
    else
    	pid->antiWindup = false;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

	// Store error for later use
    pid->prevError = error;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

	// Return controller output
    return pid->out;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	ee07 3a90 	vmov	s15, r3
}
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	00000000 	.word	0x00000000

08001304 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09c      	sub	sp, #112	; 0x70
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <Log+0x44>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d014      	beq.n	800133e <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	490c      	ldr	r1, [pc, #48]	; (800134c <Log+0x48>)
 800131c:	4618      	mov	r0, r3
 800131e:	f00e fdbd 	bl	800fe9c <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ffca 	bl	80002c0 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	f107 010c 	add.w	r1, r7, #12
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <Log+0x4c>)
 800133a:	f009 fd3b 	bl	800adb4 <HAL_UART_Transmit>
	}
}
 800133e:	bf00      	nop
 8001340:	3770      	adds	r7, #112	; 0x70
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000020c 	.word	0x2000020c
 800134c:	08015278 	.word	0x08015278
 8001350:	20000ad4 	.word	0x20000ad4

08001354 <TaskController>:
#include "Controller/PID.h"

extern osMutexId DistMutexHandle;

void TaskController(void const *argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0b6      	sub	sp, #216	; 0xd8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	// Inner loop controllers
	PIDController PID_Thrust;
	PID_Thrust.Kd = 10;
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <TaskController+0x118>)
 800135e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PID_Thrust.Ki = 10;
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <TaskController+0x118>)
 8001364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	PID_Thrust.Kd = 10;
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <TaskController+0x118>)
 800136a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PID_Thrust.T = 0.01f;
 800136e:	4b40      	ldr	r3, [pc, #256]	; (8001470 <TaskController+0x11c>)
 8001370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	PID_Thrust.limMin = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	PID_Thrust.limMax = 30;
 800137c:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <TaskController+0x120>)
 800137e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	PIDController_Init(&PID_Thrust);
 8001382:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff feaa 	bl	80010e0 <PIDController_Init>

	PIDController PID_Yaw;
	PID_Yaw.Kd = 0;
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	67bb      	str	r3, [r7, #120]	; 0x78
	PID_Yaw.Ki = 0;
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	677b      	str	r3, [r7, #116]	; 0x74
	PID_Yaw.Kd = 0;
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	67bb      	str	r3, [r7, #120]	; 0x78
	PID_Yaw.T = 0;
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	67fb      	str	r3, [r7, #124]	; 0x7c
	PID_Yaw.limMin = 0;
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	PID_Yaw.limMax = 50;
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <TaskController+0x124>)
 80013ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	PIDController_Init(&PID_Yaw);
 80013b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe92 	bl	80010e0 <PIDController_Init>

	PIDController PID_Pitch;
	PID_Pitch.Kd = 0;
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
	PID_Pitch.Ki = 0;
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	643b      	str	r3, [r7, #64]	; 0x40
	PID_Pitch.Kd = 0;
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	647b      	str	r3, [r7, #68]	; 0x44
	PID_Pitch.T = 0;
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
	PID_Pitch.limMin = 0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	657b      	str	r3, [r7, #84]	; 0x54
	PID_Pitch.limMax = 50;
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <TaskController+0x124>)
 80013dc:	65bb      	str	r3, [r7, #88]	; 0x58
	PIDController_Init(&PID_Pitch);
 80013de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe7c 	bl	80010e0 <PIDController_Init>

	PIDController PID_Roll;
	PID_Roll.Kd = 0;
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
	PID_Roll.Ki = 0;
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
	PID_Roll.Kd = 0;
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
	PID_Roll.T = 0;
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
	PID_Roll.limMin = 0;
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
	PID_Roll.limMax = 50;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <TaskController+0x124>)
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
	PIDController_Init(&PID_Roll);
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fe66 	bl	80010e0 <PIDController_Init>

	// Infinite loop
	while (1)
	{

		if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <TaskController+0x128>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	4618      	mov	r0, r3
 800141e:	f00b f9fd 	bl	800c81c <osMutexWait>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d118      	bne.n	800145a <TaskController+0x106>
		{
			Throttle_controlled = PIDController_Update(&PID_Thrust, 0.2f, Distance/1000.0f);
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <TaskController+0x12c>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001484 <TaskController+0x130>
 8001432:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001436:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800143a:	eef0 0a47 	vmov.f32	s1, s14
 800143e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001488 <TaskController+0x134>
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fe88 	bl	8001158 <PIDController_Update>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001450:	ee17 3a90 	vmov	r3, s15
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <TaskController+0x138>)
 8001458:	801a      	strh	r2, [r3, #0]
		}
		osMutexRelease(DistMutexHandle);
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <TaskController+0x128>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f00b fa2a 	bl	800c8b8 <osMutexRelease>


		osDelay(10);
 8001464:	200a      	movs	r0, #10
 8001466:	f00b f9ac 	bl	800c7c2 <osDelay>
		if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 800146a:	e7d3      	b.n	8001414 <TaskController+0xc0>
 800146c:	41200000 	.word	0x41200000
 8001470:	3c23d70a 	.word	0x3c23d70a
 8001474:	41f00000 	.word	0x41f00000
 8001478:	42480000 	.word	0x42480000
 800147c:	20000be4 	.word	0x20000be4
 8001480:	20000358 	.word	0x20000358
 8001484:	447a0000 	.word	0x447a0000
 8001488:	3e4ccccd 	.word	0x3e4ccccd
 800148c:	2000021a 	.word	0x2000021a

08001490 <DisassembleFloatIntoUint8s>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void DisassembleFloatIntoUint8s(float* n, uint8_t* array, int position)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	memcpy(array+position, n, sizeof(float));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	4413      	add	r3, r2
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <TaskDiagnostics>:

void TaskDiagnostics(void const *argument)
{
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b8:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 80014bc:	af10      	add	r7, sp, #64	; 0x40
 80014be:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014c2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80014c6:	6018      	str	r0, [r3, #0]
	char UARTstr[512];
	int8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (int8_t)('i');
 80014c8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014cc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80014d0:	2269      	movs	r2, #105	; 0x69
 80014d2:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 80014d4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014d8:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80014dc:	2266      	movs	r2, #102	; 0x66
 80014de:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 80014e0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014e4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80014e8:	2267      	movs	r2, #103	; 0x67
 80014ea:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	while (1)
	{
		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 80014ec:	4bba      	ldr	r3, [pc, #744]	; (80017d8 <TaskDiagnostics+0x324>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00b f991 	bl	800c81c <osMutexWait>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 80ed 	bne.w	80016dc <TaskDiagnostics+0x228>
		{
			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_controlled, TIM1->CCR1-50, TIM1->CCR2-50, TIM1->CCR3-50, TIM1->CCR4-50);
 8001502:	4bb6      	ldr	r3, [pc, #728]	; (80017dc <TaskDiagnostics+0x328>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	461d      	mov	r5, r3
 8001508:	4bb5      	ldr	r3, [pc, #724]	; (80017e0 <TaskDiagnostics+0x32c>)
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	f1a3 0432 	sub.w	r4, r3, #50	; 0x32
 8001510:	4bb3      	ldr	r3, [pc, #716]	; (80017e0 <TaskDiagnostics+0x32c>)
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	3b32      	subs	r3, #50	; 0x32
 8001516:	4ab2      	ldr	r2, [pc, #712]	; (80017e0 <TaskDiagnostics+0x32c>)
 8001518:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800151a:	3a32      	subs	r2, #50	; 0x32
 800151c:	49b0      	ldr	r1, [pc, #704]	; (80017e0 <TaskDiagnostics+0x32c>)
 800151e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001520:	3932      	subs	r1, #50	; 0x32
 8001522:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001526:	9102      	str	r1, [sp, #8]
 8001528:	9201      	str	r2, [sp, #4]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	4623      	mov	r3, r4
 800152e:	462a      	mov	r2, r5
 8001530:	49ac      	ldr	r1, [pc, #688]	; (80017e4 <TaskDiagnostics+0x330>)
 8001532:	f00e fcb3 	bl	800fe9c <siprintf>
			SpiIntData[1] = (int8_t)Throttle_in;
 8001536:	4bac      	ldr	r3, [pc, #688]	; (80017e8 <TaskDiagnostics+0x334>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b25a      	sxtb	r2, r3
 800153c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001540:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001544:	705a      	strb	r2, [r3, #1]
			SpiIntData[2] = (int8_t)TIM1->CCR1-50;
 8001546:	4ba6      	ldr	r3, [pc, #664]	; (80017e0 <TaskDiagnostics+0x32c>)
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	b2db      	uxtb	r3, r3
 800154c:	3b32      	subs	r3, #50	; 0x32
 800154e:	b2db      	uxtb	r3, r3
 8001550:	b25a      	sxtb	r2, r3
 8001552:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001556:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800155a:	709a      	strb	r2, [r3, #2]
			SpiIntData[3] = (int8_t)TIM1->CCR2-50;
 800155c:	4ba0      	ldr	r3, [pc, #640]	; (80017e0 <TaskDiagnostics+0x32c>)
 800155e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3b32      	subs	r3, #50	; 0x32
 8001564:	b2db      	uxtb	r3, r3
 8001566:	b25a      	sxtb	r2, r3
 8001568:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800156c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001570:	70da      	strb	r2, [r3, #3]
			SpiIntData[4] = (int8_t)TIM1->CCR3-50;
 8001572:	4b9b      	ldr	r3, [pc, #620]	; (80017e0 <TaskDiagnostics+0x32c>)
 8001574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3b32      	subs	r3, #50	; 0x32
 800157a:	b2db      	uxtb	r3, r3
 800157c:	b25a      	sxtb	r2, r3
 800157e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001582:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001586:	711a      	strb	r2, [r3, #4]
			SpiIntData[5] = (int8_t)TIM1->CCR4-50;
 8001588:	4b95      	ldr	r3, [pc, #596]	; (80017e0 <TaskDiagnostics+0x32c>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3b32      	subs	r3, #50	; 0x32
 8001590:	b2db      	uxtb	r3, r3
 8001592:	b25a      	sxtb	r2, r3
 8001594:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001598:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800159c:	715a      	strb	r2, [r3, #5]

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 800159e:	4b93      	ldr	r3, [pc, #588]	; (80017ec <TaskDiagnostics+0x338>)
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015a8:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015ac:	4990      	ldr	r1, [pc, #576]	; (80017f0 <TaskDiagnostics+0x33c>)
 80015ae:	f00e fc75 	bl	800fe9c <siprintf>
			SpiIntData[6] = (int8_t)Yaw_in;
 80015b2:	4b8e      	ldr	r3, [pc, #568]	; (80017ec <TaskDiagnostics+0x338>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	b25a      	sxtb	r2, r3
 80015ba:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80015be:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015c2:	719a      	strb	r2, [r3, #6]

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 80015c4:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <TaskDiagnostics+0x340>)
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015ce:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015d2:	4989      	ldr	r1, [pc, #548]	; (80017f8 <TaskDiagnostics+0x344>)
 80015d4:	f00e fc62 	bl	800fe9c <siprintf>
			SpiIntData[7] = (int8_t)Pitch_in;
 80015d8:	4b86      	ldr	r3, [pc, #536]	; (80017f4 <TaskDiagnostics+0x340>)
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80015e4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015e8:	71da      	strb	r2, [r3, #7]

			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in);
 80015ea:	4b84      	ldr	r3, [pc, #528]	; (80017fc <TaskDiagnostics+0x348>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015f4:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015f8:	4981      	ldr	r1, [pc, #516]	; (8001800 <TaskDiagnostics+0x34c>)
 80015fa:	f00e fc4f 	bl	800fe9c <siprintf>
			SpiIntData[8] = (int8_t)Roll_in;
 80015fe:	4b7f      	ldr	r3, [pc, #508]	; (80017fc <TaskDiagnostics+0x348>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	b25a      	sxtb	r2, r3
 8001606:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800160a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800160e:	721a      	strb	r2, [r3, #8]

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8001610:	4b7c      	ldr	r3, [pc, #496]	; (8001804 <TaskDiagnostics+0x350>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001618:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800161c:	497a      	ldr	r1, [pc, #488]	; (8001808 <TaskDiagnostics+0x354>)
 800161e:	f00e fc3d 	bl	800fe9c <siprintf>
			SpiIntData[9] = (int8_t)SWA;
 8001622:	4b78      	ldr	r3, [pc, #480]	; (8001804 <TaskDiagnostics+0x350>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b25a      	sxtb	r2, r3
 8001628:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800162c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001630:	725a      	strb	r2, [r3, #9]

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <TaskDiagnostics+0x358>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800163a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800163e:	4974      	ldr	r1, [pc, #464]	; (8001810 <TaskDiagnostics+0x35c>)
 8001640:	f00e fc2c 	bl	800fe9c <siprintf>
			SpiIntData[10] = (int8_t)SWB;
 8001644:	4b71      	ldr	r3, [pc, #452]	; (800180c <TaskDiagnostics+0x358>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b25a      	sxtb	r2, r3
 800164a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800164e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001652:	729a      	strb	r2, [r3, #10]

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 8001654:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <TaskDiagnostics+0x360>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800165c:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001660:	496d      	ldr	r1, [pc, #436]	; (8001818 <TaskDiagnostics+0x364>)
 8001662:	f00e fc1b 	bl	800fe9c <siprintf>
			SpiIntData[11] = (int8_t)SWC;
 8001666:	4b6b      	ldr	r3, [pc, #428]	; (8001814 <TaskDiagnostics+0x360>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b25a      	sxtb	r2, r3
 800166c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001670:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001674:	72da      	strb	r2, [r3, #11]

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 8001676:	4b69      	ldr	r3, [pc, #420]	; (800181c <TaskDiagnostics+0x368>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800167e:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001682:	4967      	ldr	r1, [pc, #412]	; (8001820 <TaskDiagnostics+0x36c>)
 8001684:	f00e fc0a 	bl	800fe9c <siprintf>
			SpiIntData[12] = (int8_t)SWD;
 8001688:	4b64      	ldr	r3, [pc, #400]	; (800181c <TaskDiagnostics+0x368>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b25a      	sxtb	r2, r3
 800168e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001692:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001696:	731a      	strb	r2, [r3, #12]

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 8001698:	4b62      	ldr	r3, [pc, #392]	; (8001824 <TaskDiagnostics+0x370>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80016a0:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80016a4:	4960      	ldr	r1, [pc, #384]	; (8001828 <TaskDiagnostics+0x374>)
 80016a6:	f00e fbf9 	bl	800fe9c <siprintf>
			SpiIntData[13] = (int8_t)VRA;
 80016aa:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <TaskDiagnostics+0x370>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80016b4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80016b8:	735a      	strb	r2, [r3, #13]

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <TaskDiagnostics+0x378>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80016c2:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80016c6:	495a      	ldr	r1, [pc, #360]	; (8001830 <TaskDiagnostics+0x37c>)
 80016c8:	f00e fbe8 	bl	800fe9c <siprintf>
			SpiIntData[14] = (int8_t)VRB;
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <TaskDiagnostics+0x378>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b25a      	sxtb	r2, r3
 80016d2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80016d6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80016da:	739a      	strb	r2, [r3, #14]
		}
		osMutexRelease(RemoteDataMutexHandle);
 80016dc:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <TaskDiagnostics+0x324>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f00b f8e9 	bl	800c8b8 <osMutexRelease>

		if (IsImuAvailable)
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <TaskDiagnostics+0x380>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8106 	beq.w	80018fc <TaskDiagnostics+0x448>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80016f0:	4b51      	ldr	r3, [pc, #324]	; (8001838 <TaskDiagnostics+0x384>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00b f88f 	bl	800c81c <osMutexWait>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 80f6 	bne.w	80018f2 <TaskDiagnostics+0x43e>
			{
				sprintf(UARTstr,
 8001706:	4b4d      	ldr	r3, [pc, #308]	; (800183c <TaskDiagnostics+0x388>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff44 	bl	8000598 <__aeabi_f2d>
 8001710:	4680      	mov	r8, r0
 8001712:	4689      	mov	r9, r1
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 8001714:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <TaskDiagnostics+0x38c>)
 8001716:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff3d 	bl	8000598 <__aeabi_f2d>
 800171e:	4682      	mov	sl, r0
 8001720:	468b      	mov	fp, r1
						AccData[0], AccData[1], AccData[2],
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <TaskDiagnostics+0x38c>)
 8001724:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff36 	bl	8000598 <__aeabi_f2d>
 800172c:	e9c7 0104 	strd	r0, r1, [r7, #16]
						AccData[0], AccData[1], AccData[2],
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <TaskDiagnostics+0x38c>)
 8001732:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff2f 	bl	8000598 <__aeabi_f2d>
 800173a:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2]);
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <TaskDiagnostics+0x390>)
 8001740:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff28 	bl	8000598 <__aeabi_f2d>
 8001748:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2]);
 800174c:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <TaskDiagnostics+0x390>)
 800174e:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff21 	bl	8000598 <__aeabi_f2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
						GyroData[0], GyroData[1], GyroData[2]);
 800175a:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <TaskDiagnostics+0x390>)
 800175c:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff1a 	bl	8000598 <__aeabi_f2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800176c:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001770:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001774:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001778:	ed97 7b00 	vldr	d7, [r7]
 800177c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001780:	ed97 7b02 	vldr	d7, [r7, #8]
 8001784:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001788:	ed97 7b04 	vldr	d7, [r7, #16]
 800178c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001790:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001794:	e9cd 8900 	strd	r8, r9, [sp]
 8001798:	460a      	mov	r2, r1
 800179a:	492b      	ldr	r1, [pc, #172]	; (8001848 <TaskDiagnostics+0x394>)
 800179c:	f00e fb7e 	bl	800fe9c <siprintf>
				DisassembleFloatIntoUint8s(&TempData, SpiFloatData1, 1);
 80017a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	4824      	ldr	r0, [pc, #144]	; (800183c <TaskDiagnostics+0x388>)
 80017aa:	f7ff fe71 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData, SpiFloatData1, 5);
 80017ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017b2:	2205      	movs	r2, #5
 80017b4:	4619      	mov	r1, r3
 80017b6:	4822      	ldr	r0, [pc, #136]	; (8001840 <TaskDiagnostics+0x38c>)
 80017b8:	f7ff fe6a 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+1, SpiFloatData1, 9);
 80017bc:	4823      	ldr	r0, [pc, #140]	; (800184c <TaskDiagnostics+0x398>)
 80017be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017c2:	2209      	movs	r2, #9
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fe63 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+2, SpiFloatData1, 13);
 80017ca:	4821      	ldr	r0, [pc, #132]	; (8001850 <TaskDiagnostics+0x39c>)
 80017cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017d0:	220d      	movs	r2, #13
 80017d2:	4619      	mov	r1, r3
 80017d4:	e03e      	b.n	8001854 <TaskDiagnostics+0x3a0>
 80017d6:	bf00      	nop
 80017d8:	20000bd8 	.word	0x20000bd8
 80017dc:	2000021a 	.word	0x2000021a
 80017e0:	40010000 	.word	0x40010000
 80017e4:	08015280 	.word	0x08015280
 80017e8:	20000218 	.word	0x20000218
 80017ec:	2000021c 	.word	0x2000021c
 80017f0:	080152a0 	.word	0x080152a0
 80017f4:	2000021e 	.word	0x2000021e
 80017f8:	080152ac 	.word	0x080152ac
 80017fc:	20000220 	.word	0x20000220
 8001800:	080152bc 	.word	0x080152bc
 8001804:	20000222 	.word	0x20000222
 8001808:	080152cc 	.word	0x080152cc
 800180c:	20000224 	.word	0x20000224
 8001810:	080152d8 	.word	0x080152d8
 8001814:	20000226 	.word	0x20000226
 8001818:	080152e4 	.word	0x080152e4
 800181c:	20000228 	.word	0x20000228
 8001820:	080152f0 	.word	0x080152f0
 8001824:	2000022a 	.word	0x2000022a
 8001828:	080152fc 	.word	0x080152fc
 800182c:	2000022c 	.word	0x2000022c
 8001830:	08015308 	.word	0x08015308
 8001834:	20000214 	.word	0x20000214
 8001838:	20000bdc 	.word	0x20000bdc
 800183c:	200002ac 	.word	0x200002ac
 8001840:	200002a0 	.word	0x200002a0
 8001844:	200002b0 	.word	0x200002b0
 8001848:	08015314 	.word	0x08015314
 800184c:	200002a4 	.word	0x200002a4
 8001850:	200002a8 	.word	0x200002a8
 8001854:	f7ff fe1c 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData, SpiFloatData1, 17);
 8001858:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800185c:	2211      	movs	r2, #17
 800185e:	4619      	mov	r1, r3
 8001860:	48b7      	ldr	r0, [pc, #732]	; (8001b40 <TaskDiagnostics+0x68c>)
 8001862:	f7ff fe15 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+1, SpiFloatData1, 21);
 8001866:	48b7      	ldr	r0, [pc, #732]	; (8001b44 <TaskDiagnostics+0x690>)
 8001868:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800186c:	2215      	movs	r2, #21
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff fe0e 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+2, SpiFloatData1, 25);
 8001874:	48b4      	ldr	r0, [pc, #720]	; (8001b48 <TaskDiagnostics+0x694>)
 8001876:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800187a:	2219      	movs	r2, #25
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff fe07 	bl	8001490 <DisassembleFloatIntoUint8s>

				sprintf(UARTstr,
 8001882:	4bb2      	ldr	r3, [pc, #712]	; (8001b4c <TaskDiagnostics+0x698>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe86 	bl	8000598 <__aeabi_f2d>
 800188c:	4604      	mov	r4, r0
 800188e:	460d      	mov	r5, r1
 8001890:	4baf      	ldr	r3, [pc, #700]	; (8001b50 <TaskDiagnostics+0x69c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe7f 	bl	8000598 <__aeabi_f2d>
 800189a:	4680      	mov	r8, r0
 800189c:	4689      	mov	r9, r1
 800189e:	4bad      	ldr	r3, [pc, #692]	; (8001b54 <TaskDiagnostics+0x6a0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe78 	bl	8000598 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80018b0:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80018b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018bc:	e9cd 4500 	strd	r4, r5, [sp]
 80018c0:	460a      	mov	r2, r1
 80018c2:	49a5      	ldr	r1, [pc, #660]	; (8001b58 <TaskDiagnostics+0x6a4>)
 80018c4:	f00e faea 	bl	800fe9c <siprintf>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				DisassembleFloatIntoUint8s(&BMP_Temp, SpiFloatData1, 29);
 80018c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018cc:	221d      	movs	r2, #29
 80018ce:	4619      	mov	r1, r3
 80018d0:	489e      	ldr	r0, [pc, #632]	; (8001b4c <TaskDiagnostics+0x698>)
 80018d2:	f7ff fddd 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Pres, SpiFloatData1, 33);
 80018d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018da:	2221      	movs	r2, #33	; 0x21
 80018dc:	4619      	mov	r1, r3
 80018de:	489c      	ldr	r0, [pc, #624]	; (8001b50 <TaskDiagnostics+0x69c>)
 80018e0:	f7ff fdd6 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Alt, SpiFloatData1, 37);
 80018e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018e8:	2225      	movs	r2, #37	; 0x25
 80018ea:	4619      	mov	r1, r3
 80018ec:	4899      	ldr	r0, [pc, #612]	; (8001b54 <TaskDiagnostics+0x6a0>)
 80018ee:	f7ff fdcf 	bl	8001490 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 80018f2:	4b9a      	ldr	r3, [pc, #616]	; (8001b5c <TaskDiagnostics+0x6a8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00a ffde 	bl	800c8b8 <osMutexRelease>
		}

		if (IsMagnAvailable)
 80018fc:	4b98      	ldr	r3, [pc, #608]	; (8001b60 <TaskDiagnostics+0x6ac>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d056      	beq.n	80019b2 <TaskDiagnostics+0x4fe>
		{
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8001904:	4b97      	ldr	r3, [pc, #604]	; (8001b64 <TaskDiagnostics+0x6b0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	4618      	mov	r0, r3
 800190e:	f00a ff85 	bl	800c81c <osMutexWait>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d147      	bne.n	80019a8 <TaskDiagnostics+0x4f4>
			{
				sprintf(UARTstr,
 8001918:	4b93      	ldr	r3, [pc, #588]	; (8001b68 <TaskDiagnostics+0x6b4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe3b 	bl	8000598 <__aeabi_f2d>
 8001922:	4604      	mov	r4, r0
 8001924:	460d      	mov	r5, r1
 8001926:	4b91      	ldr	r3, [pc, #580]	; (8001b6c <TaskDiagnostics+0x6b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe34 	bl	8000598 <__aeabi_f2d>
 8001930:	4680      	mov	r8, r0
 8001932:	4689      	mov	r9, r1
 8001934:	4b8e      	ldr	r3, [pc, #568]	; (8001b70 <TaskDiagnostics+0x6bc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe2d 	bl	8000598 <__aeabi_f2d>
 800193e:	4682      	mov	sl, r0
 8001940:	468b      	mov	fp, r1
 8001942:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <TaskDiagnostics+0x6c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe26 	bl	8000598 <__aeabi_f2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001954:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001958:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800195c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001960:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001964:	e9cd 4500 	strd	r4, r5, [sp]
 8001968:	460a      	mov	r2, r1
 800196a:	4983      	ldr	r1, [pc, #524]	; (8001b78 <TaskDiagnostics+0x6c4>)
 800196c:	f00e fa96 	bl	800fe9c <siprintf>
						"%sMAG_X_RAW: %.4f\r\nMAG_Y_RAW: %.4f\r\nMAG_Z_RAW: %.4f\r\ndir: %.4f\r\n",
						UARTstr,
						MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW, MAG_dir);
				DisassembleFloatIntoUint8s(&MAG_X_RAW, SpiFloatData1, 41);
 8001970:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001974:	2229      	movs	r2, #41	; 0x29
 8001976:	4619      	mov	r1, r3
 8001978:	487b      	ldr	r0, [pc, #492]	; (8001b68 <TaskDiagnostics+0x6b4>)
 800197a:	f7ff fd89 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_Y_RAW, SpiFloatData1, 45);
 800197e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001982:	222d      	movs	r2, #45	; 0x2d
 8001984:	4619      	mov	r1, r3
 8001986:	4879      	ldr	r0, [pc, #484]	; (8001b6c <TaskDiagnostics+0x6b8>)
 8001988:	f7ff fd82 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_Z_RAW, SpiFloatData1, 49);
 800198c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001990:	2231      	movs	r2, #49	; 0x31
 8001992:	4619      	mov	r1, r3
 8001994:	4876      	ldr	r0, [pc, #472]	; (8001b70 <TaskDiagnostics+0x6bc>)
 8001996:	f7ff fd7b 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_dir, SpiFloatData1, 53);
 800199a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800199e:	2235      	movs	r2, #53	; 0x35
 80019a0:	4619      	mov	r1, r3
 80019a2:	4874      	ldr	r0, [pc, #464]	; (8001b74 <TaskDiagnostics+0x6c0>)
 80019a4:	f7ff fd74 	bl	8001490 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(MagnMutexHandle);
 80019a8:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <TaskDiagnostics+0x6b0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00a ff83 	bl	800c8b8 <osMutexRelease>
		}

		if (IsDistAvailable)
 80019b2:	4b72      	ldr	r3, [pc, #456]	; (8001b7c <TaskDiagnostics+0x6c8>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d026      	beq.n	8001a08 <TaskDiagnostics+0x554>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80019ba:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <TaskDiagnostics+0x6cc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f04f 31ff 	mov.w	r1, #4294967295
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00a ff2a 	bl	800c81c <osMutexWait>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d117      	bne.n	80019fe <TaskDiagnostics+0x54a>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <TaskDiagnostics+0x6d0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fde0 	bl	8000598 <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80019e0:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80019e4:	e9cd 2300 	strd	r2, r3, [sp]
 80019e8:	460a      	mov	r2, r1
 80019ea:	4967      	ldr	r1, [pc, #412]	; (8001b88 <TaskDiagnostics+0x6d4>)
 80019ec:	f00e fa56 	bl	800fe9c <siprintf>
				DisassembleFloatIntoUint8s(&Distance, SpiFloatData1, 57);
 80019f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019f4:	2239      	movs	r2, #57	; 0x39
 80019f6:	4619      	mov	r1, r3
 80019f8:	4862      	ldr	r0, [pc, #392]	; (8001b84 <TaskDiagnostics+0x6d0>)
 80019fa:	f7ff fd49 	bl	8001490 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(DistMutexHandle);
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <TaskDiagnostics+0x6cc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00a ff58 	bl	800c8b8 <osMutexRelease>
		}

		if (IsGpsAvailable)
 8001a08:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <TaskDiagnostics+0x6d8>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80cd 	beq.w	8001bac <TaskDiagnostics+0x6f8>
		{
			if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8001a12:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <TaskDiagnostics+0x6dc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00a fefe 	bl	800c81c <osMutexWait>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8087 	bne.w	8001b36 <TaskDiagnostics+0x682>
			{
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
						UARTstr,
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fdb3 	bl	8000598 <__aeabi_f2d>
 8001a32:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a38:	7d1b      	ldrb	r3, [r3, #20]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a3a:	60bb      	str	r3, [r7, #8]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a3c:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fda9 	bl	8000598 <__aeabi_f2d>
 8001a46:	4680      	mov	r8, r0
 8001a48:	4689      	mov	r9, r1
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a4a:	4b52      	ldr	r3, [pc, #328]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a4c:	7f1b      	ldrb	r3, [r3, #28]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a4e:	461d      	mov	r5, r3
 8001a50:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a52:	6a1e      	ldr	r6, [r3, #32]
 8001a54:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a58:	603a      	str	r2, [r7, #0]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd9a 	bl	8000598 <__aeabi_f2d>
 8001a64:	4682      	mov	sl, r0
 8001a66:	468b      	mov	fp, r1
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a68:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd93 	bl	8000598 <__aeabi_f2d>
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a78:	461c      	mov	r4, r3
 8001a7a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001a7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a82:	940e      	str	r4, [sp, #56]	; 0x38
 8001a84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001a88:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001a8c:	6839      	ldr	r1, [r7, #0]
 8001a8e:	9108      	str	r1, [sp, #32]
 8001a90:	9607      	str	r6, [sp, #28]
 8001a92:	9506      	str	r5, [sp, #24]
 8001a94:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	9102      	str	r1, [sp, #8]
 8001a9c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001aa0:	ed8d 7b00 	vstr	d7, [sp]
 8001aa4:	493c      	ldr	r1, [pc, #240]	; (8001b98 <TaskDiagnostics+0x6e4>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00e f9f8 	bl	800fe9c <siprintf>
				DisassembleFloatIntoUint8s(&GPS.dec_latitude, SpiFloatData2, 1);
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4839      	ldr	r0, [pc, #228]	; (8001b9c <TaskDiagnostics+0x6e8>)
 8001ab6:	f7ff fceb 	bl	8001490 <DisassembleFloatIntoUint8s>
				SpiIntData[15] = (int8_t)GPS.ns;
 8001aba:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001abc:	7d1b      	ldrb	r3, [r3, #20]
 8001abe:	b25a      	sxtb	r2, r3
 8001ac0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001ac4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001ac8:	73da      	strb	r2, [r3, #15]
				DisassembleFloatIntoUint8s(&GPS.dec_longitude, SpiFloatData2, 5);
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	2205      	movs	r2, #5
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4830      	ldr	r0, [pc, #192]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001ad4:	f7ff fcdc 	bl	8001490 <DisassembleFloatIntoUint8s>
				SpiIntData[16] = (int8_t)GPS.ew;
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001ada:	7f1b      	ldrb	r3, [r3, #28]
 8001adc:	b25a      	sxtb	r2, r3
 8001ade:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001ae2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001ae6:	741a      	strb	r2, [r3, #16]
				SpiIntData[17] = (int8_t)(GPS.fix & 0x000000ff);
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	b25a      	sxtb	r2, r3
 8001aee:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001af2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001af6:	745a      	strb	r2, [r3, #17]
				SpiIntData[18] = (int8_t)(GPS.num_of_satelites & 0x000000ff);
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001b02:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001b06:	749a      	strb	r2, [r3, #18]
				DisassembleFloatIntoUint8s(&GPS.horizontal_dilution_of_precision, SpiFloatData2, 9);
 8001b08:	f107 0320 	add.w	r3, r7, #32
 8001b0c:	2209      	movs	r2, #9
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4823      	ldr	r0, [pc, #140]	; (8001ba0 <TaskDiagnostics+0x6ec>)
 8001b12:	f7ff fcbd 	bl	8001490 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&GPS.mean_sea_level_altitude, SpiFloatData2, 13);
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	220d      	movs	r2, #13
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4821      	ldr	r0, [pc, #132]	; (8001ba4 <TaskDiagnostics+0x6f0>)
 8001b20:	f7ff fcb6 	bl	8001490 <DisassembleFloatIntoUint8s>
				SpiIntData[19] = (int8_t)GPS.altitude_unit;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <TaskDiagnostics+0x6e0>)
 8001b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b2a:	b25a      	sxtb	r2, r3
 8001b2c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001b30:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001b34:	74da      	strb	r2, [r3, #19]
			}
			osMutexRelease(GpsDataMutexHandle);
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <TaskDiagnostics+0x6dc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	e034      	b.n	8001ba8 <TaskDiagnostics+0x6f4>
 8001b3e:	bf00      	nop
 8001b40:	200002b0 	.word	0x200002b0
 8001b44:	200002b4 	.word	0x200002b4
 8001b48:	200002b8 	.word	0x200002b8
 8001b4c:	200002ec 	.word	0x200002ec
 8001b50:	200002f0 	.word	0x200002f0
 8001b54:	200002f4 	.word	0x200002f4
 8001b58:	08015360 	.word	0x08015360
 8001b5c:	20000bdc 	.word	0x20000bdc
 8001b60:	20000215 	.word	0x20000215
 8001b64:	20000bd4 	.word	0x20000bd4
 8001b68:	20000310 	.word	0x20000310
 8001b6c:	20000314 	.word	0x20000314
 8001b70:	20000318 	.word	0x20000318
 8001b74:	2000031c 	.word	0x2000031c
 8001b78:	08015394 	.word	0x08015394
 8001b7c:	20000216 	.word	0x20000216
 8001b80:	20000be4 	.word	0x20000be4
 8001b84:	20000358 	.word	0x20000358
 8001b88:	080153d8 	.word	0x080153d8
 8001b8c:	20000217 	.word	0x20000217
 8001b90:	20000be0 	.word	0x20000be0
 8001b94:	200003fc 	.word	0x200003fc
 8001b98:	080153f0 	.word	0x080153f0
 8001b9c:	20000400 	.word	0x20000400
 8001ba0:	20000424 	.word	0x20000424
 8001ba4:	20000428 	.word	0x20000428
 8001ba8:	f00a fe86 	bl	800c8b8 <osMutexRelease>
		}


		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8001bac:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001bb0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bb4:	491b      	ldr	r1, [pc, #108]	; (8001c24 <TaskDiagnostics+0x770>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00e f970 	bl	800fe9c <siprintf>

		// Sending log info
		if (Diag)
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <TaskDiagnostics+0x774>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d02b      	beq.n	8001c1c <TaskDiagnostics+0x768>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8001bc4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb79 	bl	80002c0 <strlen>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	4814      	ldr	r0, [pc, #80]	; (8001c2c <TaskDiagnostics+0x778>)
 8001bdc:	f009 f8ea 	bl	800adb4 <HAL_UART_Transmit>
			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8001be0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
 8001be8:	2240      	movs	r2, #64	; 0x40
 8001bea:	4811      	ldr	r0, [pc, #68]	; (8001c30 <TaskDiagnostics+0x77c>)
 8001bec:	f006 fbfd 	bl	80083ea <HAL_SPI_Transmit>
			osDelay(10);
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f00a fde6 	bl	800c7c2 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8001bf6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <TaskDiagnostics+0x77c>)
 8001c02:	f006 fbf2 	bl	80083ea <HAL_SPI_Transmit>
			osDelay(10);
 8001c06:	200a      	movs	r0, #10
 8001c08:	f00a fddb 	bl	800c7c2 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8001c0c:	f107 0120 	add.w	r1, r7, #32
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
 8001c14:	2240      	movs	r2, #64	; 0x40
 8001c16:	4806      	ldr	r0, [pc, #24]	; (8001c30 <TaskDiagnostics+0x77c>)
 8001c18:	f006 fbe7 	bl	80083ea <HAL_SPI_Transmit>
		}

		osDelay(250);
 8001c1c:	20fa      	movs	r0, #250	; 0xfa
 8001c1e:	f00a fdd0 	bl	800c7c2 <osDelay>
		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001c22:	e463      	b.n	80014ec <TaskDiagnostics+0x38>
 8001c24:	08015454 	.word	0x08015454
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000ad4 	.word	0x20000ad4
 8001c30:	20000864 	.word	0x20000864

08001c34 <TaskMotor>:

extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;

void TaskMotor(void const *argument)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	485e      	ldr	r0, [pc, #376]	; (8001db8 <TaskMotor+0x184>)
 8001c40:	f007 fbba 	bl	80093b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c44:	2104      	movs	r1, #4
 8001c46:	485c      	ldr	r0, [pc, #368]	; (8001db8 <TaskMotor+0x184>)
 8001c48:	f007 fbb6 	bl	80093b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	485a      	ldr	r0, [pc, #360]	; (8001db8 <TaskMotor+0x184>)
 8001c50:	f007 fbb2 	bl	80093b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001c54:	210c      	movs	r1, #12
 8001c56:	4858      	ldr	r0, [pc, #352]	; (8001db8 <TaskMotor+0x184>)
 8001c58:	f007 fbae 	bl	80093b8 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 8001c5c:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <TaskMotor+0x188>)
 8001c5e:	2232      	movs	r2, #50	; 0x32
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8001c62:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <TaskMotor+0x188>)
 8001c64:	2232      	movs	r2, #50	; 0x32
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8001c68:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <TaskMotor+0x188>)
 8001c6a:	2232      	movs	r2, #50	; 0x32
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 8001c6e:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <TaskMotor+0x188>)
 8001c70:	2232      	movs	r2, #50	; 0x32
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40

	/* Infinite loop */
	while (1)
	{
		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001c74:	4b52      	ldr	r3, [pc, #328]	; (8001dc0 <TaskMotor+0x18c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f00a fdcd 	bl	800c81c <osMutexWait>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 808e 	bne.w	8001da6 <TaskMotor+0x172>
		{
			if (SWA < 10)
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <TaskMotor+0x190>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	2b09      	cmp	r3, #9
 8001c90:	d806      	bhi.n	8001ca0 <TaskMotor+0x6c>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c98:	484b      	ldr	r0, [pc, #300]	; (8001dc8 <TaskMotor+0x194>)
 8001c9a:	f004 fc9b 	bl	80065d4 <HAL_GPIO_WritePin>
 8001c9e:	e005      	b.n	8001cac <TaskMotor+0x78>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca6:	4848      	ldr	r0, [pc, #288]	; (8001dc8 <TaskMotor+0x194>)
 8001ca8:	f004 fc94 	bl	80065d4 <HAL_GPIO_WritePin>

			if (SWB < 10)
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <TaskMotor+0x198>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d803      	bhi.n	8001cbc <TaskMotor+0x88>
				Rotors = false;
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <TaskMotor+0x19c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e002      	b.n	8001cc2 <TaskMotor+0x8e>
			else
				Rotors = true;
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <TaskMotor+0x19c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]


			if (SWD < 10)
 8001cc2:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <TaskMotor+0x1a0>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	d808      	bhi.n	8001cdc <TaskMotor+0xa8>
			{
				ESC1_start_signal = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
				ESC2_start_signal = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73bb      	strb	r3, [r7, #14]
				ESC3_start_signal = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	737b      	strb	r3, [r7, #13]
				ESC4_start_signal = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	733b      	strb	r3, [r7, #12]
 8001cda:	e007      	b.n	8001cec <TaskMotor+0xb8>
			}
			else
			{
				ESC1_start_signal = 1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
				ESC2_start_signal = 1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73bb      	strb	r3, [r7, #14]
				ESC3_start_signal = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	737b      	strb	r3, [r7, #13]
				ESC4_start_signal = 3;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	733b      	strb	r3, [r7, #12]
			}


			// Setting PWM speed
			if (Rotors)
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <TaskMotor+0x19c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d04c      	beq.n	8001d8e <TaskMotor+0x15a>
			{
				TIM1->CCR1 = (uint32_t) ((Throttle_in * (50-(ESC1_start_signal-1)) / 50) + (50+ESC1_start_signal-1));
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <TaskMotor+0x1a4>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	4a35      	ldr	r2, [pc, #212]	; (8001ddc <TaskMotor+0x1a8>)
 8001d06:	fb82 1203 	smull	r1, r2, r2, r3
 8001d0a:	1112      	asrs	r2, r2, #4
 8001d0c:	17db      	asrs	r3, r3, #31
 8001d0e:	1ad2      	subs	r2, r2, r3
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	3331      	adds	r3, #49	; 0x31
 8001d14:	441a      	add	r2, r3
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <TaskMotor+0x188>)
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = (uint32_t) ((Throttle_in * (50-(ESC2_start_signal-1)) / 50) + (50+ESC2_start_signal-1));
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <TaskMotor+0x1a4>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	7bbb      	ldrb	r3, [r7, #14]
 8001d22:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <TaskMotor+0x1a8>)
 8001d2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d30:	1112      	asrs	r2, r2, #4
 8001d32:	17db      	asrs	r3, r3, #31
 8001d34:	1ad2      	subs	r2, r2, r3
 8001d36:	7bbb      	ldrb	r3, [r7, #14]
 8001d38:	3331      	adds	r3, #49	; 0x31
 8001d3a:	441a      	add	r2, r3
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <TaskMotor+0x188>)
 8001d3e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = (uint32_t) ((Throttle_in * (50-(ESC3_start_signal-1)) / 50) + (50+ESC3_start_signal-1));
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <TaskMotor+0x1a4>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	7b7b      	ldrb	r3, [r7, #13]
 8001d48:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <TaskMotor+0x1a8>)
 8001d52:	fb82 1203 	smull	r1, r2, r2, r3
 8001d56:	1112      	asrs	r2, r2, #4
 8001d58:	17db      	asrs	r3, r3, #31
 8001d5a:	1ad2      	subs	r2, r2, r3
 8001d5c:	7b7b      	ldrb	r3, [r7, #13]
 8001d5e:	3331      	adds	r3, #49	; 0x31
 8001d60:	441a      	add	r2, r3
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <TaskMotor+0x188>)
 8001d64:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR4 = (uint32_t) ((Throttle_in * (50-(ESC4_start_signal-1)) / 50) + (50+ESC4_start_signal-1));
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <TaskMotor+0x1a4>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	7b3b      	ldrb	r3, [r7, #12]
 8001d6e:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <TaskMotor+0x1a8>)
 8001d78:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7c:	1112      	asrs	r2, r2, #4
 8001d7e:	17db      	asrs	r3, r3, #31
 8001d80:	1ad2      	subs	r2, r2, r3
 8001d82:	7b3b      	ldrb	r3, [r7, #12]
 8001d84:	3331      	adds	r3, #49	; 0x31
 8001d86:	441a      	add	r2, r3
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <TaskMotor+0x188>)
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d8c:	e00b      	b.n	8001da6 <TaskMotor+0x172>
			}
			else
			{
				TIM1->CCR1 = (uint32_t) (50);
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <TaskMotor+0x188>)
 8001d90:	2232      	movs	r2, #50	; 0x32
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = (uint32_t) (50);
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <TaskMotor+0x188>)
 8001d96:	2232      	movs	r2, #50	; 0x32
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = (uint32_t) (50);
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <TaskMotor+0x188>)
 8001d9c:	2232      	movs	r2, #50	; 0x32
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR4 = (uint32_t) (50);
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <TaskMotor+0x188>)
 8001da2:	2232      	movs	r2, #50	; 0x32
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <TaskMotor+0x18c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00a fd84 	bl	800c8b8 <osMutexRelease>

		osDelay(100);
 8001db0:	2064      	movs	r0, #100	; 0x64
 8001db2:	f00a fd06 	bl	800c7c2 <osDelay>
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001db6:	e75d      	b.n	8001c74 <TaskMotor+0x40>
 8001db8:	2000092c 	.word	0x2000092c
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	20000bd8 	.word	0x20000bd8
 8001dc4:	20000222 	.word	0x20000222
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	20000224 	.word	0x20000224
 8001dd0:	20000001 	.word	0x20000001
 8001dd4:	20000228 	.word	0x20000228
 8001dd8:	20000218 	.word	0x20000218
 8001ddc:	51eb851f 	.word	0x51eb851f

08001de0 <TaskPower>:
void TaskPower(void const *argument)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f00a fcea 	bl	800c7c2 <osDelay>
	{
 8001dee:	e7fb      	b.n	8001de8 <TaskPower+0x8>

08001df0 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	497f      	ldr	r1, [pc, #508]	; (8001ff8 <TaskRemote+0x208>)
 8001dfc:	487f      	ldr	r0, [pc, #508]	; (8001ffc <TaskRemote+0x20c>)
 8001dfe:	f009 f8a0 	bl	800af42 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	while (1)
	{
		Log("R-RBFS-WS");
 8001e02:	487f      	ldr	r0, [pc, #508]	; (8002000 <TaskRemote+0x210>)
 8001e04:	f7ff fa7e 	bl	8001304 <Log>
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 8001e08:	4b7e      	ldr	r3, [pc, #504]	; (8002004 <TaskRemote+0x214>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00a fdb9 	bl	800c988 <osSemaphoreWait>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 80e8 	bne.w	8001fee <TaskRemote+0x1fe>
		{
			Log("R-RBFS-WE");
 8001e1e:	487a      	ldr	r0, [pc, #488]	; (8002008 <TaskRemote+0x218>)
 8001e20:	f7ff fa70 	bl	8001304 <Log>

			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			Log("R-RBM-WS");
 8001e24:	4879      	ldr	r0, [pc, #484]	; (800200c <TaskRemote+0x21c>)
 8001e26:	f7ff fa6d 	bl	8001304 <Log>
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 8001e2a:	4b79      	ldr	r3, [pc, #484]	; (8002010 <TaskRemote+0x220>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00a fcf2 	bl	800c81c <osMutexWait>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d138      	bne.n	8001eb0 <TaskRemote+0xc0>
			{
				Log("R-RBM-WE");
 8001e3e:	4875      	ldr	r0, [pc, #468]	; (8002014 <TaskRemote+0x224>)
 8001e40:	f7ff fa60 	bl	8001304 <Log>

				for (int i = 32; i >= 0; i--)
 8001e44:	2320      	movs	r3, #32
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e024      	b.n	8001e94 <TaskRemote+0xa4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 8001e4a:	4a73      	ldr	r2, [pc, #460]	; (8002018 <TaskRemote+0x228>)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d11a      	bne.n	8001e8e <TaskRemote+0x9e>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a6e      	ldr	r2, [pc, #440]	; (8002018 <TaskRemote+0x228>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b40      	cmp	r3, #64	; 0x40
 8001e64:	d113      	bne.n	8001e8e <TaskRemote+0x9e>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	e00d      	b.n	8001e88 <TaskRemote+0x98>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a69      	ldr	r2, [pc, #420]	; (8002018 <TaskRemote+0x228>)
 8001e74:	5cd3      	ldrb	r3, [r2, r3]
 8001e76:	b2d9      	uxtb	r1, r3
 8001e78:	4a68      	ldr	r2, [pc, #416]	; (800201c <TaskRemote+0x22c>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	460a      	mov	r2, r1
 8001e80:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	3301      	adds	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b1f      	cmp	r3, #31
 8001e8c:	ddee      	ble.n	8001e6c <TaskRemote+0x7c>
				for (int i = 32; i >= 0; i--)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	dad7      	bge.n	8001e4a <TaskRemote+0x5a>
					}
				}

				Log("R-RBM-RS");
 8001e9a:	4861      	ldr	r0, [pc, #388]	; (8002020 <TaskRemote+0x230>)
 8001e9c:	f7ff fa32 	bl	8001304 <Log>
				osMutexRelease(RemoteBufferMutexHandle);
 8001ea0:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <TaskRemote+0x220>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00a fd07 	bl	800c8b8 <osMutexRelease>
				Log("R-RBM-RE");
 8001eaa:	485e      	ldr	r0, [pc, #376]	; (8002024 <TaskRemote+0x234>)
 8001eac:	f7ff fa2a 	bl	8001304 <Log>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e018      	b.n	8001ee8 <TaskRemote+0xf8>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	3303      	adds	r3, #3
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <TaskRemote+0x22c>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4953      	ldr	r1, [pc, #332]	; (800201c <TaskRemote+0x22c>)
 8001ed0:	5ccb      	ldrb	r3, [r1, r3]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	4a53      	ldr	r2, [pc, #332]	; (8002028 <TaskRemote+0x238>)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	dde3      	ble.n	8001eb6 <TaskRemote+0xc6>

			// Setting the speed

			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001eee:	4b4f      	ldr	r3, [pc, #316]	; (800202c <TaskRemote+0x23c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f00a fc90 	bl	800c81c <osMutexWait>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d170      	bne.n	8001fe4 <TaskRemote+0x1f4>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = (channelValues[THROTTLE_CHANNEL] / 20) - 50;
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <TaskRemote+0x238>)
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	4a4a      	ldr	r2, [pc, #296]	; (8002030 <TaskRemote+0x240>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b32      	subs	r3, #50	; 0x32
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b47      	ldr	r3, [pc, #284]	; (8002034 <TaskRemote+0x244>)
 8001f16:	801a      	strh	r2, [r3, #0]
				Pitch_in = (channelValues[PITCH_CHANNEL] / 20) - 75;
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <TaskRemote+0x238>)
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	4a44      	ldr	r2, [pc, #272]	; (8002030 <TaskRemote+0x240>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b4b      	subs	r3, #75	; 0x4b
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <TaskRemote+0x248>)
 8001f2e:	801a      	strh	r2, [r3, #0]
				Roll_in = (channelValues[ROLL_CHANNEL] / 20) - 75;
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <TaskRemote+0x238>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	4a3e      	ldr	r2, [pc, #248]	; (8002030 <TaskRemote+0x240>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b4b      	subs	r3, #75	; 0x4b
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <TaskRemote+0x24c>)
 8001f46:	801a      	strh	r2, [r3, #0]
				Yaw_in = (channelValues[YAW_CHANNEL] / 20) - 75;
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <TaskRemote+0x238>)
 8001f4a:	88db      	ldrh	r3, [r3, #6]
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <TaskRemote+0x240>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b4b      	subs	r3, #75	; 0x4b
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	4b38      	ldr	r3, [pc, #224]	; (8002040 <TaskRemote+0x250>)
 8001f5e:	801a      	strh	r2, [r3, #0]
				SWA = (channelValues[SWA_CHANNEL] / 20) - 50;
 8001f60:	4b31      	ldr	r3, [pc, #196]	; (8002028 <TaskRemote+0x238>)
 8001f62:	891b      	ldrh	r3, [r3, #8]
 8001f64:	4a32      	ldr	r2, [pc, #200]	; (8002030 <TaskRemote+0x240>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b32      	subs	r3, #50	; 0x32
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <TaskRemote+0x254>)
 8001f74:	801a      	strh	r2, [r3, #0]
				SWB = (channelValues[SWB_CHANNEL] / 20) - 50;
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <TaskRemote+0x238>)
 8001f78:	895b      	ldrh	r3, [r3, #10]
 8001f7a:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <TaskRemote+0x240>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b32      	subs	r3, #50	; 0x32
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <TaskRemote+0x258>)
 8001f8a:	801a      	strh	r2, [r3, #0]
				SWC = (channelValues[SWC_CHANNEL] / 20) - 50;
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <TaskRemote+0x238>)
 8001f8e:	899b      	ldrh	r3, [r3, #12]
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <TaskRemote+0x240>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b32      	subs	r3, #50	; 0x32
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <TaskRemote+0x25c>)
 8001fa0:	801a      	strh	r2, [r3, #0]
				SWD = (channelValues[SWD_CHANNEL] / 20) - 50;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <TaskRemote+0x238>)
 8001fa4:	89db      	ldrh	r3, [r3, #14]
 8001fa6:	4a22      	ldr	r2, [pc, #136]	; (8002030 <TaskRemote+0x240>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b32      	subs	r3, #50	; 0x32
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b26      	ldr	r3, [pc, #152]	; (8002050 <TaskRemote+0x260>)
 8001fb6:	801a      	strh	r2, [r3, #0]
				VRA = (channelValues[VRA_CHANNEL] / 20) - 50;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <TaskRemote+0x238>)
 8001fba:	8a1b      	ldrh	r3, [r3, #16]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <TaskRemote+0x240>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b32      	subs	r3, #50	; 0x32
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <TaskRemote+0x264>)
 8001fcc:	801a      	strh	r2, [r3, #0]
				VRB = (channelValues[VRB_CHANNEL] / 20) - 50;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <TaskRemote+0x238>)
 8001fd0:	8a5b      	ldrh	r3, [r3, #18]
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <TaskRemote+0x240>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b32      	subs	r3, #50	; 0x32
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <TaskRemote+0x268>)
 8001fe2:	801a      	strh	r2, [r3, #0]
				//sprintf(str1, "In: %d\r\n", channelValues[THROTTLE_CHANNEL]);
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);


			}
			osMutexRelease(RemoteDataMutexHandle);
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <TaskRemote+0x23c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f00a fc65 	bl	800c8b8 <osMutexRelease>

			// Signal to the UART2 Callback
			//RemoteBufferInProgress = true;
		}

		osDelay(100);
 8001fee:	2064      	movs	r0, #100	; 0x64
 8001ff0:	f00a fbe7 	bl	800c7c2 <osDelay>
		Log("R-RBFS-WS");
 8001ff4:	e705      	b.n	8001e02 <TaskRemote+0x12>
 8001ff6:	bf00      	nop
 8001ff8:	2000035c 	.word	0x2000035c
 8001ffc:	20000a4c 	.word	0x20000a4c
 8002000:	0801545c 	.word	0x0801545c
 8002004:	20000bf4 	.word	0x20000bf4
 8002008:	08015468 	.word	0x08015468
 800200c:	08015474 	.word	0x08015474
 8002010:	20000be8 	.word	0x20000be8
 8002014:	08015480 	.word	0x08015480
 8002018:	2000039c 	.word	0x2000039c
 800201c:	200003dc 	.word	0x200003dc
 8002020:	0801548c 	.word	0x0801548c
 8002024:	08015498 	.word	0x08015498
 8002028:	2000055c 	.word	0x2000055c
 800202c:	20000bd8 	.word	0x20000bd8
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	20000218 	.word	0x20000218
 8002038:	2000021e 	.word	0x2000021e
 800203c:	20000220 	.word	0x20000220
 8002040:	2000021c 	.word	0x2000021c
 8002044:	20000222 	.word	0x20000222
 8002048:	20000224 	.word	0x20000224
 800204c:	20000226 	.word	0x20000226
 8002050:	20000228 	.word	0x20000228
 8002054:	2000022a 	.word	0x2000022a
 8002058:	2000022c 	.word	0x2000022c
 800205c:	00000000 	.word	0x00000000

08002060 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	while (1)
	{
		// IMU Data
		if (IsImuAvailable)
 8002068:	4ba5      	ldr	r3, [pc, #660]	; (8002300 <TaskSensorData+0x2a0>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d03d      	beq.n	80020ec <TaskSensorData+0x8c>
		{
			//Log("SD-IA");
			//Log("SD-IMW-S");
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8002070:	4ba4      	ldr	r3, [pc, #656]	; (8002304 <TaskSensorData+0x2a4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	4618      	mov	r0, r3
 800207a:	f00a fbcf 	bl	800c81c <osMutexWait>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d12e      	bne.n	80020e2 <TaskSensorData+0x82>
			{
				//Log("SD-IMW-E");

				//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
				//MPU_readRawData(&hspi2, &MPU9250);
				MPU_readProcessedData(&hspi2, &MPU9250);
 8002084:	49a0      	ldr	r1, [pc, #640]	; (8002308 <TaskSensorData+0x2a8>)
 8002086:	48a1      	ldr	r0, [pc, #644]	; (800230c <TaskSensorData+0x2ac>)
 8002088:	f003 f936 	bl	80052f8 <MPU_readProcessedData>

				AccData[0] = MPU9250.sensorData.ax;
 800208c:	4b9e      	ldr	r3, [pc, #632]	; (8002308 <TaskSensorData+0x2a8>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a9f      	ldr	r2, [pc, #636]	; (8002310 <TaskSensorData+0x2b0>)
 8002092:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8002094:	4b9c      	ldr	r3, [pc, #624]	; (8002308 <TaskSensorData+0x2a8>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a9d      	ldr	r2, [pc, #628]	; (8002310 <TaskSensorData+0x2b0>)
 800209a:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 800209c:	4b9a      	ldr	r3, [pc, #616]	; (8002308 <TaskSensorData+0x2a8>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	4a9b      	ldr	r2, [pc, #620]	; (8002310 <TaskSensorData+0x2b0>)
 80020a2:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 80020a4:	4b98      	ldr	r3, [pc, #608]	; (8002308 <TaskSensorData+0x2a8>)
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	4a9a      	ldr	r2, [pc, #616]	; (8002314 <TaskSensorData+0x2b4>)
 80020aa:	6013      	str	r3, [r2, #0]
				GyroData[0] = MPU9250.sensorData.gx;
 80020ac:	4b96      	ldr	r3, [pc, #600]	; (8002308 <TaskSensorData+0x2a8>)
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	4a99      	ldr	r2, [pc, #612]	; (8002318 <TaskSensorData+0x2b8>)
 80020b2:	6013      	str	r3, [r2, #0]
				GyroData[1] = MPU9250.sensorData.gy;
 80020b4:	4b94      	ldr	r3, [pc, #592]	; (8002308 <TaskSensorData+0x2a8>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	4a97      	ldr	r2, [pc, #604]	; (8002318 <TaskSensorData+0x2b8>)
 80020ba:	6053      	str	r3, [r2, #4]
				GyroData[2] = MPU9250.sensorData.gz;
 80020bc:	4b92      	ldr	r3, [pc, #584]	; (8002308 <TaskSensorData+0x2a8>)
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	4a95      	ldr	r2, [pc, #596]	; (8002318 <TaskSensorData+0x2b8>)
 80020c2:	6093      	str	r3, [r2, #8]

				BMP280_measure(&BMP280);
 80020c4:	4895      	ldr	r0, [pc, #596]	; (800231c <TaskSensorData+0x2bc>)
 80020c6:	f002 f9eb 	bl	80044a0 <BMP280_measure>

				BMP_Temp = BMP280.measurement.temperature;
 80020ca:	4b94      	ldr	r3, [pc, #592]	; (800231c <TaskSensorData+0x2bc>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	4a94      	ldr	r2, [pc, #592]	; (8002320 <TaskSensorData+0x2c0>)
 80020d0:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 80020d2:	4b92      	ldr	r3, [pc, #584]	; (800231c <TaskSensorData+0x2bc>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	4a93      	ldr	r2, [pc, #588]	; (8002324 <TaskSensorData+0x2c4>)
 80020d8:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 80020da:	4b90      	ldr	r3, [pc, #576]	; (800231c <TaskSensorData+0x2bc>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	4a92      	ldr	r2, [pc, #584]	; (8002328 <TaskSensorData+0x2c8>)
 80020e0:	6013      	str	r3, [r2, #0]

				//Log("SD-IMR-S");
			}
			osMutexRelease(ImuMutexHandle);
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <TaskSensorData+0x2a4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00a fbe6 	bl	800c8b8 <osMutexRelease>
			//Log("SD-IMR-E");
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <TaskSensorData+0x2cc>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80e8 	beq.w	80022c6 <TaskSensorData+0x266>
		{
			//Log("SD-MA");
			//Log("SD-MMW-S");
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 80020f6:	4b8e      	ldr	r3, [pc, #568]	; (8002330 <TaskSensorData+0x2d0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f04f 31ff 	mov.w	r1, #4294967295
 80020fe:	4618      	mov	r0, r3
 8002100:	f00a fb8c 	bl	800c81c <osMutexWait>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80d8 	bne.w	80022bc <TaskSensorData+0x25c>
			{
				//Log("SD-MMW-E");

				struct Vector res = HMC5883L_readRaw();
 800210c:	f001 feaa 	bl	8003e64 <HMC5883L_readRaw>
 8002110:	eef0 6a40 	vmov.f32	s13, s0
 8002114:	eeb0 7a60 	vmov.f32	s14, s1
 8002118:	eef0 7a41 	vmov.f32	s15, s2
 800211c:	edc7 6a03 	vstr	s13, [r7, #12]
 8002120:	ed87 7a04 	vstr	s14, [r7, #16]
 8002124:	edc7 7a05 	vstr	s15, [r7, #20]
				MAG_X_RAW = res.XAxis;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a82      	ldr	r2, [pc, #520]	; (8002334 <TaskSensorData+0x2d4>)
 800212c:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4a81      	ldr	r2, [pc, #516]	; (8002338 <TaskSensorData+0x2d8>)
 8002132:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4a81      	ldr	r2, [pc, #516]	; (800233c <TaskSensorData+0x2dc>)
 8002138:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <TaskSensorData+0x2d8>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d067      	beq.n	800221a <TaskSensorData+0x1ba>
				{
					if (MAG_Y_RAW > 0)
 800214a:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <TaskSensorData+0x2d8>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	dd2b      	ble.n	80021b2 <TaskSensorData+0x152>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 800215a:	4b76      	ldr	r3, [pc, #472]	; (8002334 <TaskSensorData+0x2d4>)
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	4b75      	ldr	r3, [pc, #468]	; (8002338 <TaskSensorData+0x2d8>)
 8002162:	ed93 7a00 	vldr	s14, [r3]
 8002166:	eef0 0a47 	vmov.f32	s1, s14
 800216a:	eeb0 0a67 	vmov.f32	s0, s15
 800216e:	f012 f82f 	bl	80141d0 <atan2f>
 8002172:	eef0 7a40 	vmov.f32	s15, s0
 8002176:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002340 <TaskSensorData+0x2e0>
 800217a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800217e:	ee17 0a90 	vmov	r0, s15
 8002182:	f7fe fa09 	bl	8000598 <__aeabi_f2d>
 8002186:	a35a      	add	r3, pc, #360	; (adr r3, 80022f0 <TaskSensorData+0x290>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fb86 	bl	800089c <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	f04f 0000 	mov.w	r0, #0
 8002198:	496a      	ldr	r1, [pc, #424]	; (8002344 <TaskSensorData+0x2e4>)
 800219a:	f7fe f89d 	bl	80002d8 <__aeabi_dsub>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe fd47 	bl	8000c38 <__aeabi_d2f>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a66      	ldr	r2, [pc, #408]	; (8002348 <TaskSensorData+0x2e8>)
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e053      	b.n	800225a <TaskSensorData+0x1fa>
					else if (MAG_Y_RAW < 0)
 80021b2:	4b61      	ldr	r3, [pc, #388]	; (8002338 <TaskSensorData+0x2d8>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	d54b      	bpl.n	800225a <TaskSensorData+0x1fa>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 80021c2:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <TaskSensorData+0x2d4>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	4b5b      	ldr	r3, [pc, #364]	; (8002338 <TaskSensorData+0x2d8>)
 80021ca:	ed93 7a00 	vldr	s14, [r3]
 80021ce:	eef0 0a47 	vmov.f32	s1, s14
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	f011 fffb 	bl	80141d0 <atan2f>
 80021da:	eef0 7a40 	vmov.f32	s15, s0
 80021de:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002340 <TaskSensorData+0x2e0>
 80021e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e6:	ee17 0a90 	vmov	r0, s15
 80021ea:	f7fe f9d5 	bl	8000598 <__aeabi_f2d>
 80021ee:	a340      	add	r3, pc, #256	; (adr r3, 80022f0 <TaskSensorData+0x290>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fb52 	bl	800089c <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	a13e      	add	r1, pc, #248	; (adr r1, 80022f8 <TaskSensorData+0x298>)
 80021fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002202:	f7fe f869 	bl	80002d8 <__aeabi_dsub>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fd13 	bl	8000c38 <__aeabi_d2f>
 8002212:	4603      	mov	r3, r0
 8002214:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <TaskSensorData+0x2e8>)
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e01f      	b.n	800225a <TaskSensorData+0x1fa>
				}
				else if (MAG_Y_RAW == 0)
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <TaskSensorData+0x2d8>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	d117      	bne.n	800225a <TaskSensorData+0x1fa>
				{
					if (MAG_X_RAW > 0)
 800222a:	4b42      	ldr	r3, [pc, #264]	; (8002334 <TaskSensorData+0x2d4>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	dd04      	ble.n	8002244 <TaskSensorData+0x1e4>
						MAG_dir = 0.0f;
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <TaskSensorData+0x2e8>)
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e00a      	b.n	800225a <TaskSensorData+0x1fa>
					else if (MAG_X_RAW < 0)
 8002244:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <TaskSensorData+0x2d4>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	d502      	bpl.n	800225a <TaskSensorData+0x1fa>
						MAG_dir = 180.0f;
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <TaskSensorData+0x2e8>)
 8002256:	4a3d      	ldr	r2, [pc, #244]	; (800234c <TaskSensorData+0x2ec>)
 8002258:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <TaskSensorData+0x2e8>)
 800225c:	ed93 7a00 	vldr	s14, [r3]
 8002260:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <TaskSensorData+0x2f0>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <TaskSensorData+0x2e8>)
 800226c:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <TaskSensorData+0x2e8>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	d509      	bpl.n	8002294 <TaskSensorData+0x234>
					MAG_dir += 360.0f;
 8002280:	4b31      	ldr	r3, [pc, #196]	; (8002348 <TaskSensorData+0x2e8>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002354 <TaskSensorData+0x2f4>
 800228a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <TaskSensorData+0x2e8>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <TaskSensorData+0x2e8>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002354 <TaskSensorData+0x2f4>
 800229e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a6:	dd09      	ble.n	80022bc <TaskSensorData+0x25c>
					MAG_dir -= 360.0f;
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <TaskSensorData+0x2e8>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002354 <TaskSensorData+0x2f4>
 80022b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <TaskSensorData+0x2e8>)
 80022b8:	edc3 7a00 	vstr	s15, [r3]

				//Log("SD-MMR-S");
			}
			osMutexRelease(MagnMutexHandle);
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <TaskSensorData+0x2d0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f00a faf9 	bl	800c8b8 <osMutexRelease>
			//Log("SD-MMR-E");
		}

		// Distance Data
		if (IsDistAvailable)
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <TaskSensorData+0x2f8>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d070      	beq.n	80023b0 <TaskSensorData+0x350>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <TaskSensorData+0x2fc>)
 80022d0:	7d1b      	ldrb	r3, [r3, #20]
 80022d2:	f083 0301 	eor.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d041      	beq.n	8002360 <TaskSensorData+0x300>
			{
				HCSR04_Trigger(&HCSR04);
 80022dc:	481f      	ldr	r0, [pc, #124]	; (800235c <TaskSensorData+0x2fc>)
 80022de:	f003 fa4d 	bl	800577c <HCSR04_Trigger>
				HCSR04.Triggered = true;
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <TaskSensorData+0x2fc>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	751a      	strb	r2, [r3, #20]
 80022e8:	e062      	b.n	80023b0 <TaskSensorData+0x350>
 80022ea:	bf00      	nop
 80022ec:	f3af 8000 	nop.w
 80022f0:	54442d18 	.word	0x54442d18
 80022f4:	400921fb 	.word	0x400921fb
 80022f8:	00000000 	.word	0x00000000
 80022fc:	4070e000 	.word	0x4070e000
 8002300:	20000214 	.word	0x20000214
 8002304:	20000bdc 	.word	0x20000bdc
 8002308:	20000230 	.word	0x20000230
 800230c:	200008c8 	.word	0x200008c8
 8002310:	200002a0 	.word	0x200002a0
 8002314:	200002ac 	.word	0x200002ac
 8002318:	200002b0 	.word	0x200002b0
 800231c:	200002bc 	.word	0x200002bc
 8002320:	200002ec 	.word	0x200002ec
 8002324:	200002f0 	.word	0x200002f0
 8002328:	200002f4 	.word	0x200002f4
 800232c:	20000215 	.word	0x20000215
 8002330:	20000bd4 	.word	0x20000bd4
 8002334:	20000310 	.word	0x20000310
 8002338:	20000314 	.word	0x20000314
 800233c:	20000318 	.word	0x20000318
 8002340:	43340000 	.word	0x43340000
 8002344:	40568000 	.word	0x40568000
 8002348:	2000031c 	.word	0x2000031c
 800234c:	43340000 	.word	0x43340000
 8002350:	20000004 	.word	0x20000004
 8002354:	43b40000 	.word	0x43b40000
 8002358:	20000216 	.word	0x20000216
 800235c:	20000320 	.word	0x20000320
			}
			else if (HCSR04.Triggered)
 8002360:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <TaskSensorData+0x3c0>)
 8002362:	7d1b      	ldrb	r3, [r3, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <TaskSensorData+0x350>
			{
				//Log("SD-DSW-S");
				if (osSemaphoreWait(DistSemaphoreHandle, osWaitForever) == osOK)
 8002368:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <TaskSensorData+0x3c4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	4618      	mov	r0, r3
 8002372:	f00a fb09 	bl	800c988 <osSemaphoreWait>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d119      	bne.n	80023b0 <TaskSensorData+0x350>
				{
					//Log("SD-DSW-E");
					//Log("SD-DMW-S");
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <TaskSensorData+0x3c8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	4618      	mov	r0, r3
 8002386:	f00a fa49 	bl	800c81c <osMutexWait>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <TaskSensorData+0x340>
					{
						//Log("SD-DMW-E");

						Distance = HCSR04_Read(&HCSR04);
 8002390:	4823      	ldr	r0, [pc, #140]	; (8002420 <TaskSensorData+0x3c0>)
 8002392:	f003 fa0e 	bl	80057b2 <HCSR04_Read>
 8002396:	eef0 7a40 	vmov.f32	s15, s0
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <TaskSensorData+0x3cc>)
 800239c:	edc3 7a00 	vstr	s15, [r3]

						//Log("SD-DMR-S");
					}
					osMutexRelease(DistMutexHandle);
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <TaskSensorData+0x3c8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f00a fa87 	bl	800c8b8 <osMutexRelease>
					//Log("SD-DMR-E");

					HCSR04.Triggered = false;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <TaskSensorData+0x3c0>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <TaskSensorData+0x3d0>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02e      	beq.n	8002416 <TaskSensorData+0x3b6>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <TaskSensorData+0x3d4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00a fae1 	bl	800c988 <osSemaphoreWait>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d124      	bne.n	8002416 <TaskSensorData+0x3b6>
			{
				if (ProcessGPSPackageBuffer)
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <TaskSensorData+0x3d8>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01f      	beq.n	8002416 <TaskSensorData+0x3b6>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <TaskSensorData+0x3dc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f04f 31ff 	mov.w	r1, #4294967295
 80023de:	4618      	mov	r0, r3
 80023e0:	f00a fa1c 	bl	800c81c <osMutexWait>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <TaskSensorData+0x3a6>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 80023ea:	4815      	ldr	r0, [pc, #84]	; (8002440 <TaskSensorData+0x3e0>)
 80023ec:	f001 fb6a 	bl	8003ac4 <GPS_validate>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <TaskSensorData+0x39c>
							GPS_parse((char*) GPSPackageBuffer);
 80023f6:	4812      	ldr	r0, [pc, #72]	; (8002440 <TaskSensorData+0x3e0>)
 80023f8:	f001 fbc6 	bl	8003b88 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 80023fc:	22ff      	movs	r2, #255	; 0xff
 80023fe:	2100      	movs	r1, #0
 8002400:	480f      	ldr	r0, [pc, #60]	; (8002440 <TaskSensorData+0x3e0>)
 8002402:	f00d fddc 	bl	800ffbe <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <TaskSensorData+0x3dc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f00a fa54 	bl	800c8b8 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <TaskSensorData+0x3d8>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		osDelay(100);
 8002416:	2064      	movs	r0, #100	; 0x64
 8002418:	f00a f9d3 	bl	800c7c2 <osDelay>
		if (IsImuAvailable)
 800241c:	e624      	b.n	8002068 <TaskSensorData+0x8>
 800241e:	bf00      	nop
 8002420:	20000320 	.word	0x20000320
 8002424:	20000bec 	.word	0x20000bec
 8002428:	20000be4 	.word	0x20000be4
 800242c:	20000358 	.word	0x20000358
 8002430:	20000217 	.word	0x20000217
 8002434:	20000bf0 	.word	0x20000bf0
 8002438:	2000055b 	.word	0x2000055b
 800243c:	20000be0 	.word	0x20000be0
 8002440:	2000045c 	.word	0x2000045c

08002444 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a07      	ldr	r2, [pc, #28]	; (8002470 <vApplicationGetIdleTaskMemory+0x2c>)
 8002454:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <vApplicationGetIdleTaskMemory+0x30>)
 800245a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000570 	.word	0x20000570
 8002474:	20000610 	.word	0x20000610

08002478 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a42      	ldr	r2, [pc, #264]	; (800258c <HAL_UART_RxCpltCallback+0x114>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d130      	bne.n	80024ea <HAL_UART_RxCpltCallback+0x72>
	{
		//Log("U2CB");
		Uart2CallbackCounter++;
 8002488:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_UART_RxCpltCallback+0x118>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	4a40      	ldr	r2, [pc, #256]	; (8002590 <HAL_UART_RxCpltCallback+0x118>)
 8002490:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8002492:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_UART_RxCpltCallback+0x11c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f00a f9bf 	bl	800c81c <osMutexWait>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d11c      	bne.n	80024de <HAL_UART_RxCpltCallback+0x66>
		{
			//Log("U2CB-RBM-WE");
			for (int i = 0; i < REM_BUF_SIZE; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e00c      	b.n	80024c4 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 80024aa:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_UART_RxCpltCallback+0x120>)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b2d9      	uxtb	r1, r3
 80024b4:	4a39      	ldr	r2, [pc, #228]	; (800259c <HAL_UART_RxCpltCallback+0x124>)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	460a      	mov	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b3f      	cmp	r3, #63	; 0x3f
 80024c8:	ddef      	ble.n	80024aa <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 80024ca:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_UART_RxCpltCallback+0x11c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00a f9f2 	bl	800c8b8 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 80024d4:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_UART_RxCpltCallback+0x128>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f00a faa3 	bl	800ca24 <osSemaphoreRelease>
//				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
//				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//			}
//		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	492d      	ldr	r1, [pc, #180]	; (8002598 <HAL_UART_RxCpltCallback+0x120>)
 80024e2:	482a      	ldr	r0, [pc, #168]	; (800258c <HAL_UART_RxCpltCallback+0x114>)
 80024e4:	f008 fce9 	bl	800aeba <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 80024e8:	e04b      	b.n	8002582 <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a2d      	ldr	r2, [pc, #180]	; (80025a4 <HAL_UART_RxCpltCallback+0x12c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d147      	bne.n	8002582 <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d104      	bne.n	8002506 <HAL_UART_RxCpltCallback+0x8e>
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_UART_RxCpltCallback+0x134>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b24      	cmp	r3, #36	; 0x24
 8002504:	d013      	beq.n	800252e <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 8002506:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d104      	bne.n	800251a <HAL_UART_RxCpltCallback+0xa2>
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_UART_RxCpltCallback+0x134>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b47      	cmp	r3, #71	; 0x47
 8002518:	d009      	beq.n	800252e <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d926      	bls.n	8002572 <HAL_UART_RxCpltCallback+0xfa>
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2bff      	cmp	r3, #255	; 0xff
 800252c:	d021      	beq.n	8002572 <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_UART_RxCpltCallback+0x134>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2d9      	uxtb	r1, r3
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_UART_RxCpltCallback+0x138>)
 800253e:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2bfd      	cmp	r3, #253	; 0xfd
 8002548:	d807      	bhi.n	800255a <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3301      	adds	r3, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 8002556:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002558:	e00e      	b.n	8002578 <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_UART_RxCpltCallback+0x13c>)
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_UART_RxCpltCallback+0x140>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f00a fa5a 	bl	800ca24 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002570:	e002      	b.n	8002578 <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_UART_RxCpltCallback+0x130>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 8002578:	2201      	movs	r2, #1
 800257a:	490c      	ldr	r1, [pc, #48]	; (80025ac <HAL_UART_RxCpltCallback+0x134>)
 800257c:	4809      	ldr	r0, [pc, #36]	; (80025a4 <HAL_UART_RxCpltCallback+0x12c>)
 800257e:	f008 fce0 	bl	800af42 <HAL_UART_Receive_DMA>
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000a4c 	.word	0x20000a4c
 8002590:	20000210 	.word	0x20000210
 8002594:	20000be8 	.word	0x20000be8
 8002598:	2000035c 	.word	0x2000035c
 800259c:	2000039c 	.word	0x2000039c
 80025a0:	20000bf4 	.word	0x20000bf4
 80025a4:	200009c4 	.word	0x200009c4
 80025a8:	20000459 	.word	0x20000459
 80025ac:	20000458 	.word	0x20000458
 80025b0:	2000045c 	.word	0x2000045c
 80025b4:	2000055b 	.word	0x2000055b
 80025b8:	20000bf0 	.word	0x20000bf0

080025bc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a23      	ldr	r2, [pc, #140]	; (8002654 <HAL_UART_ErrorCallback+0x98>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d11c      	bne.n	8002606 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03a      	beq.n	800264c <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	491d      	ldr	r1, [pc, #116]	; (8002658 <HAL_UART_ErrorCallback+0x9c>)
 80025e2:	4618      	mov	r0, r3
 80025e4:	f00d fc5a 	bl	800fe9c <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd fe67 	bl	80002c0 <strlen>
 80025f2:	4603      	mov	r3, r0
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	f107 0108 	add.w	r1, r7, #8
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	4817      	ldr	r0, [pc, #92]	; (800265c <HAL_UART_ErrorCallback+0xa0>)
 8002600:	f008 fbd8 	bl	800adb4 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 8002604:	e022      	b.n	800264c <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a15      	ldr	r2, [pc, #84]	; (8002660 <HAL_UART_ErrorCallback+0xa4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d11e      	bne.n	800264c <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002614:	2b00      	cmp	r3, #0
 8002616:	d019      	beq.n	800264c <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_UART_ErrorCallback+0xa8>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	490f      	ldr	r1, [pc, #60]	; (8002668 <HAL_UART_ErrorCallback+0xac>)
 800262a:	4618      	mov	r0, r3
 800262c:	f00d fc36 	bl	800fe9c <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd fe43 	bl	80002c0 <strlen>
 800263a:	4603      	mov	r3, r0
 800263c:	b29a      	uxth	r2, r3
 800263e:	f107 0108 	add.w	r1, r7, #8
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <HAL_UART_ErrorCallback+0xa0>)
 8002648:	f008 fbb4 	bl	800adb4 <HAL_UART_Transmit>
}
 800264c:	bf00      	nop
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000a4c 	.word	0x20000a4c
 8002658:	080154a4 	.word	0x080154a4
 800265c:	20000ad4 	.word	0x20000ad4
 8002660:	200009c4 	.word	0x200009c4
 8002664:	20000000 	.word	0x20000000
 8002668:	080154c0 	.word	0x080154c0

0800266c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <HAL_TIM_IC_CaptureCallback+0x20>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d103      	bne.n	8002684 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4804      	ldr	r0, [pc, #16]	; (8002690 <HAL_TIM_IC_CaptureCallback+0x24>)
 8002680:	f002 ff36 	bl	80054f0 <HCSR04_TMR_IC_ISR>
	}
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000978 	.word	0x20000978
 8002690:	20000320 	.word	0x20000320

08002694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002694:	b5b0      	push	{r4, r5, r7, lr}
 8002696:	b0bc      	sub	sp, #240	; 0xf0
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800269a:	f003 f8c2 	bl	8005822 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800269e:	f000 f9b7 	bl	8002a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a2:	f000 fcb7 	bl	8003014 <MX_GPIO_Init>
  MX_DMA_Init();
 80026a6:	f000 fc97 	bl	8002fd8 <MX_DMA_Init>
  MX_SPI1_Init();
 80026aa:	f000 fa5f 	bl	8002b6c <MX_SPI1_Init>
  MX_SPI2_Init();
 80026ae:	f000 fa9b 	bl	8002be8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80026b2:	f000 fad7 	bl	8002c64 <MX_TIM1_Init>
  MX_TIM3_Init();
 80026b6:	f000 fba7 	bl	8002e08 <MX_TIM3_Init>
  MX_UART4_Init();
 80026ba:	f000 fbf9 	bl	8002eb0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80026be:	f000 fc27 	bl	8002f10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80026c2:	f000 fa13 	bl	8002aec <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80026c6:	f000 fc57 	bl	8002f78 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 80026ca:	49b4      	ldr	r1, [pc, #720]	; (800299c <main+0x308>)
 80026cc:	48b4      	ldr	r0, [pc, #720]	; (80029a0 <main+0x30c>)
 80026ce:	f002 fbbf 	bl	8004e50 <MPU_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <main+0x5a>
 80026d8:	49b2      	ldr	r1, [pc, #712]	; (80029a4 <main+0x310>)
 80026da:	48b1      	ldr	r0, [pc, #708]	; (80029a0 <main+0x30c>)
 80026dc:	f001 fd2a 	bl	8004134 <BMP280_initialize>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <main+0x5a>
  		IsImuAvailable = true;
 80026e6:	4bb0      	ldr	r3, [pc, #704]	; (80029a8 <main+0x314>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e002      	b.n	80026f4 <main+0x60>
  	else
  		IsImuAvailable = false;
 80026ee:	4bae      	ldr	r3, [pc, #696]	; (80029a8 <main+0x314>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 80026f4:	f001 fba0 	bl	8003e38 <HMC5883L_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <main+0x72>
  		IsMagnAvailable = true;
 80026fe:	4bab      	ldr	r3, [pc, #684]	; (80029ac <main+0x318>)
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e002      	b.n	800270c <main+0x78>
  	else
  		IsMagnAvailable = false;
 8002706:	4ba9      	ldr	r3, [pc, #676]	; (80029ac <main+0x318>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 800270c:	49a8      	ldr	r1, [pc, #672]	; (80029b0 <main+0x31c>)
 800270e:	48a9      	ldr	r0, [pc, #676]	; (80029b4 <main+0x320>)
 8002710:	f002 fea0 	bl	8005454 <HCSR04_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <main+0x8e>
  		IsDistAvailable = true;
 800271a:	4ba7      	ldr	r3, [pc, #668]	; (80029b8 <main+0x324>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e002      	b.n	8002728 <main+0x94>
  	else
  		IsDistAvailable = false;
 8002722:	4ba5      	ldr	r3, [pc, #660]	; (80029b8 <main+0x324>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 8002734:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002738:	4618      	mov	r0, r3
 800273a:	f00a f856 	bl	800c7ea <osMutexCreate>
 800273e:	4603      	mov	r3, r0
 8002740:	4a9e      	ldr	r2, [pc, #632]	; (80029bc <main+0x328>)
 8002742:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 8002750:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002754:	4618      	mov	r0, r3
 8002756:	f00a f848 	bl	800c7ea <osMutexCreate>
 800275a:	4603      	mov	r3, r0
 800275c:	4a98      	ldr	r2, [pc, #608]	; (80029c0 <main+0x32c>)
 800275e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 800276c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002770:	4618      	mov	r0, r3
 8002772:	f00a f83a 	bl	800c7ea <osMutexCreate>
 8002776:	4603      	mov	r3, r0
 8002778:	4a92      	ldr	r2, [pc, #584]	; (80029c4 <main+0x330>)
 800277a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 8002788:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800278c:	4618      	mov	r0, r3
 800278e:	f00a f82c 	bl	800c7ea <osMutexCreate>
 8002792:	4603      	mov	r3, r0
 8002794:	4a8c      	ldr	r2, [pc, #560]	; (80029c8 <main+0x334>)
 8002796:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 80027a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00a f81e 	bl	800c7ea <osMutexCreate>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4a86      	ldr	r2, [pc, #536]	; (80029cc <main+0x338>)
 80027b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 80027c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00a f810 	bl	800c7ea <osMutexCreate>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4a80      	ldr	r2, [pc, #512]	; (80029d0 <main+0x33c>)
 80027ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 80027d0:	4b7a      	ldr	r3, [pc, #488]	; (80029bc <main+0x328>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00a f86f 	bl	800c8b8 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 80027da:	4b79      	ldr	r3, [pc, #484]	; (80029c0 <main+0x32c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f00a f86a 	bl	800c8b8 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 80027e4:	4b77      	ldr	r3, [pc, #476]	; (80029c4 <main+0x330>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f00a f865 	bl	800c8b8 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <main+0x334>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f00a f860 	bl	800c8b8 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <main+0x33c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00a f85b 	bl	800c8b8 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 800280e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002812:	2101      	movs	r1, #1
 8002814:	4618      	mov	r0, r3
 8002816:	f00a f885 	bl	800c924 <osSemaphoreCreate>
 800281a:	4603      	mov	r3, r0
 800281c:	4a6d      	ldr	r2, [pc, #436]	; (80029d4 <main+0x340>)
 800281e:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 800282c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002830:	2101      	movs	r1, #1
 8002832:	4618      	mov	r0, r3
 8002834:	f00a f876 	bl	800c924 <osSemaphoreCreate>
 8002838:	4603      	mov	r3, r0
 800283a:	4a67      	ldr	r2, [pc, #412]	; (80029d8 <main+0x344>)
 800283c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 800284a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f00a f867 	bl	800c924 <osSemaphoreCreate>
 8002856:	4603      	mov	r3, r0
 8002858:	4a60      	ldr	r2, [pc, #384]	; (80029dc <main+0x348>)
 800285a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 800285c:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <main+0x340>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f00a f915 	bl	800ca90 <osSemaphoreGetCount>
 8002866:	4603      	mov	r3, r0
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <main+0x1e6>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <main+0x340>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	4618      	mov	r0, r3
 8002876:	f00a f887 	bl	800c988 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 800287a:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <main+0x344>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f00a f906 	bl	800ca90 <osSemaphoreGetCount>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d106      	bne.n	8002898 <main+0x204>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 800288a:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <main+0x344>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f04f 31ff 	mov.w	r1, #4294967295
 8002892:	4618      	mov	r0, r3
 8002894:	f00a f878 	bl	800c988 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 8002898:	4b50      	ldr	r3, [pc, #320]	; (80029dc <main+0x348>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f00a f8f7 	bl	800ca90 <osSemaphoreGetCount>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <main+0x222>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 80028a8:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <main+0x348>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	4618      	mov	r0, r3
 80028b2:	f00a f869 	bl	800c988 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityRealtime, 0, 512);
 80028b6:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <main+0x34c>)
 80028b8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80028bc:	461d      	mov	r5, r3
 80028be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 80028ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f009 ff2a 	bl	800c72a <osThreadCreate>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <main+0x350>)
 80028da:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 128);
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <main+0x354>)
 80028de:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80028e2:	461d      	mov	r5, r3
 80028e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 80028f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f009 ff17 	bl	800c72a <osThreadCreate>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4a3b      	ldr	r2, [pc, #236]	; (80029ec <main+0x358>)
 8002900:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityHigh, 0, 512);
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <main+0x35c>)
 8002904:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002908:	461d      	mov	r5, r3
 800290a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 8002916:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f009 ff04 	bl	800c72a <osThreadCreate>
 8002922:	4603      	mov	r3, r0
 8002924:	4a33      	ldr	r2, [pc, #204]	; (80029f4 <main+0x360>)
 8002926:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 128);
 8002928:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <main+0x364>)
 800292a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800292e:	461d      	mov	r5, r3
 8002930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002934:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002938:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 800293c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f009 fef1 	bl	800c72a <osThreadCreate>
 8002948:	4603      	mov	r3, r0
 800294a:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <main+0x368>)
 800294c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 128);
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <main+0x36c>)
 8002950:	f107 041c 	add.w	r4, r7, #28
 8002954:	461d      	mov	r5, r3
 8002956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800295a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800295e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f009 fede 	bl	800c72a <osThreadCreate>
 800296e:	4603      	mov	r3, r0
 8002970:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <main+0x370>)
 8002972:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 512);
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <main+0x374>)
 8002976:	463c      	mov	r4, r7
 8002978:	461d      	mov	r5, r3
 800297a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800297c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800297e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 8002986:	463b      	mov	r3, r7
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f009 fecd 	bl	800c72a <osThreadCreate>
 8002990:	4603      	mov	r3, r0
 8002992:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <main+0x378>)
 8002994:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002996:	f009 fec1 	bl	800c71c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800299a:	e7fe      	b.n	800299a <main+0x306>
 800299c:	20000230 	.word	0x20000230
 80029a0:	200008c8 	.word	0x200008c8
 80029a4:	200002bc 	.word	0x200002bc
 80029a8:	20000214 	.word	0x20000214
 80029ac:	20000215 	.word	0x20000215
 80029b0:	20000978 	.word	0x20000978
 80029b4:	20000320 	.word	0x20000320
 80029b8:	20000216 	.word	0x20000216
 80029bc:	20000bd4 	.word	0x20000bd4
 80029c0:	20000bd8 	.word	0x20000bd8
 80029c4:	20000bdc 	.word	0x20000bdc
 80029c8:	20000be0 	.word	0x20000be0
 80029cc:	20000be4 	.word	0x20000be4
 80029d0:	20000be8 	.word	0x20000be8
 80029d4:	20000bec 	.word	0x20000bec
 80029d8:	20000bf0 	.word	0x20000bf0
 80029dc:	20000bf4 	.word	0x20000bf4
 80029e0:	080154ec 	.word	0x080154ec
 80029e4:	20000bbc 	.word	0x20000bbc
 80029e8:	08015518 	.word	0x08015518
 80029ec:	20000bc0 	.word	0x20000bc0
 80029f0:	08015540 	.word	0x08015540
 80029f4:	20000bc4 	.word	0x20000bc4
 80029f8:	08015568 	.word	0x08015568
 80029fc:	20000bc8 	.word	0x20000bc8
 8002a00:	08015590 	.word	0x08015590
 8002a04:	20000bcc 	.word	0x20000bcc
 8002a08:	080155bc 	.word	0x080155bc
 8002a0c:	20000bd0 	.word	0x20000bd0

08002a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b094      	sub	sp, #80	; 0x50
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	f107 0320 	add.w	r3, r7, #32
 8002a1a:	2230      	movs	r2, #48	; 0x30
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00d facd 	bl	800ffbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <SystemClock_Config+0xd4>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <SystemClock_Config+0xd4>)
 8002a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <SystemClock_Config+0xd4>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a4c:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <SystemClock_Config+0xd8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a54:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <SystemClock_Config+0xd8>)
 8002a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <SystemClock_Config+0xd8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a70:	2310      	movs	r3, #16
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a74:	2302      	movs	r3, #2
 8002a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002a80:	23d8      	movs	r3, #216	; 0xd8
 8002a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a84:	2302      	movs	r3, #2
 8002a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a8c:	f107 0320 	add.w	r3, r7, #32
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fbf9 	bl	8007288 <HAL_RCC_OscConfig>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a9c:	f000 fba3 	bl	80031e6 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002aa0:	f004 fba2 	bl	80071e8 <HAL_PWREx_EnableOverDrive>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002aaa:	f000 fb9c 	bl	80031e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aae:	230f      	movs	r3, #15
 8002ab0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002abe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	2103      	movs	r1, #3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fe80 	bl	80077d0 <HAL_RCC_ClockConfig>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002ad6:	f000 fb86 	bl	80031e6 <Error_Handler>
  }
}
 8002ada:	bf00      	nop
 8002adc:	3750      	adds	r7, #80	; 0x50
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40007000 	.word	0x40007000

08002aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <MX_I2C1_Init+0x78>)
 8002af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20808DD4;
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <MX_I2C1_Init+0x7c>)
 8002afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b26:	480e      	ldr	r0, [pc, #56]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b28:	f003 fd6e 	bl	8006608 <HAL_I2C_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b32:	f000 fb58 	bl	80031e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b36:	2100      	movs	r1, #0
 8002b38:	4809      	ldr	r0, [pc, #36]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b3a:	f004 fabd 	bl	80070b8 <HAL_I2CEx_ConfigAnalogFilter>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b44:	f000 fb4f 	bl	80031e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b4c:	f004 faff 	bl	800714e <HAL_I2CEx_ConfigDigitalFilter>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b56:	f000 fb46 	bl	80031e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000810 	.word	0x20000810
 8002b64:	40005400 	.word	0x40005400
 8002b68:	20808dd4 	.word	0x20808dd4

08002b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <MX_SPI1_Init+0x78>)
 8002b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002ba2:	2238      	movs	r2, #56	; 0x38
 8002ba4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bba:	2207      	movs	r2, #7
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bcc:	f005 fb62 	bl	8008294 <HAL_SPI_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bd6:	f000 fb06 	bl	80031e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000864 	.word	0x20000864
 8002be4:	40013000 	.word	0x40013000

08002be8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002bee:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <MX_SPI2_Init+0x78>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002bf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c1e:	2208      	movs	r2, #8
 8002c20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c36:	2207      	movs	r2, #7
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_SPI2_Init+0x74>)
 8002c48:	f005 fb24 	bl	8008294 <HAL_SPI_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c52:	f000 fac8 	bl	80031e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200008c8 	.word	0x200008c8
 8002c60:	40003800 	.word	0x40003800

08002c64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b09a      	sub	sp, #104	; 0x68
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
 8002c94:	615a      	str	r2, [r3, #20]
 8002c96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	222c      	movs	r2, #44	; 0x2c
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f00d f98d 	bl	800ffbe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ca4:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002ca6:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <MX_TIM1_Init+0x1a0>)
 8002ca8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2160-1;
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002cac:	f640 026f 	movw	r2, #2159	; 0x86f
 8002cb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb2:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002cb8:	4b51      	ldr	r3, [pc, #324]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cc6:	4b4e      	ldr	r3, [pc, #312]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cd2:	484b      	ldr	r0, [pc, #300]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002cd4:	f006 fa3e 	bl	8009154 <HAL_TIM_Base_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002cde:	f000 fa82 	bl	80031e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cec:	4619      	mov	r1, r3
 8002cee:	4844      	ldr	r0, [pc, #272]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002cf0:	f007 f8d4 	bl	8009e9c <HAL_TIM_ConfigClockSource>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002cfa:	f000 fa74 	bl	80031e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cfe:	4840      	ldr	r0, [pc, #256]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002d00:	f006 faf8 	bl	80092f4 <HAL_TIM_PWM_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002d0a:	f000 fa6c 	bl	80031e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4837      	ldr	r0, [pc, #220]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002d22:	f007 fecf 	bl	800aac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002d2c:	f000 fa5b 	bl	80031e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d30:	2360      	movs	r3, #96	; 0x60
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d50:	2200      	movs	r2, #0
 8002d52:	4619      	mov	r1, r3
 8002d54:	482a      	ldr	r0, [pc, #168]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002d56:	f006 ff8d 	bl	8009c74 <HAL_TIM_PWM_ConfigChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002d60:	f000 fa41 	bl	80031e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d68:	2204      	movs	r2, #4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4824      	ldr	r0, [pc, #144]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002d6e:	f006 ff81 	bl	8009c74 <HAL_TIM_PWM_ConfigChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002d78:	f000 fa35 	bl	80031e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d80:	2208      	movs	r2, #8
 8002d82:	4619      	mov	r1, r3
 8002d84:	481e      	ldr	r0, [pc, #120]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002d86:	f006 ff75 	bl	8009c74 <HAL_TIM_PWM_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002d90:	f000 fa29 	bl	80031e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d98:	220c      	movs	r2, #12
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4818      	ldr	r0, [pc, #96]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002d9e:	f006 ff69 	bl	8009c74 <HAL_TIM_PWM_ConfigChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002da8:	f000 fa1d 	bl	80031e6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	4619      	mov	r1, r3
 8002de0:	4807      	ldr	r0, [pc, #28]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002de2:	f007 fefd 	bl	800abe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8002dec:	f000 f9fb 	bl	80031e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002df0:	4803      	ldr	r0, [pc, #12]	; (8002e00 <MX_TIM1_Init+0x19c>)
 8002df2:	f000 fb67 	bl	80034c4 <HAL_TIM_MspPostInit>

}
 8002df6:	bf00      	nop
 8002df8:	3768      	adds	r7, #104	; 0x68
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	2000092c 	.word	0x2000092c
 8002e04:	40010000 	.word	0x40010000

08002e08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e28:	4a20      	ldr	r2, [pc, #128]	; (8002eac <MX_TIM3_Init+0xa4>)
 8002e2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e2e:	226b      	movs	r2, #107	; 0x6b
 8002e30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e32:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002e4c:	4816      	ldr	r0, [pc, #88]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e4e:	f006 fbad 	bl	80095ac <HAL_TIM_IC_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002e58:	f000 f9c5 	bl	80031e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4619      	mov	r1, r3
 8002e6a:	480f      	ldr	r0, [pc, #60]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e6c:	f007 fe2a 	bl	800aac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002e76:	f000 f9b6 	bl	80031e6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <MX_TIM3_Init+0xa0>)
 8002e92:	f006 fe52 	bl	8009b3a <HAL_TIM_IC_ConfigChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e9c:	f000 f9a3 	bl	80031e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ea0:	bf00      	nop
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000978 	.word	0x20000978
 8002eac:	40000400 	.word	0x40000400

08002eb0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <MX_UART4_Init+0x58>)
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <MX_UART4_Init+0x5c>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <MX_UART4_Init+0x58>)
 8002ebc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ec0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <MX_UART4_Init+0x58>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <MX_UART4_Init+0x58>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <MX_UART4_Init+0x58>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <MX_UART4_Init+0x58>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <MX_UART4_Init+0x58>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <MX_UART4_Init+0x58>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <MX_UART4_Init+0x58>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <MX_UART4_Init+0x58>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ef2:	4805      	ldr	r0, [pc, #20]	; (8002f08 <MX_UART4_Init+0x58>)
 8002ef4:	f007 ff10 	bl	800ad18 <HAL_UART_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002efe:	f000 f972 	bl	80031e6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200009c4 	.word	0x200009c4
 8002f0c:	40004c00 	.word	0x40004c00

08002f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f16:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <MX_USART2_UART_Init+0x64>)
 8002f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f36:	2204      	movs	r2, #4
 8002f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f4e:	2210      	movs	r2, #16
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f5a:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_USART2_UART_Init+0x60>)
 8002f5c:	f007 fedc 	bl	800ad18 <HAL_UART_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002f66:	f000 f93e 	bl	80031e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000a4c 	.word	0x20000a4c
 8002f74:	40004400 	.word	0x40004400

08002f78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <MX_USART3_UART_Init+0x5c>)
 8002f80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_USART3_UART_Init+0x58>)
 8002fbc:	f007 feac 	bl	800ad18 <HAL_UART_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002fc6:	f000 f90e 	bl	80031e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000ad4 	.word	0x20000ad4
 8002fd4:	40004800 	.word	0x40004800

08002fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <MX_DMA_Init+0x38>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <MX_DMA_Init+0x38>)
 8002fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <MX_DMA_Init+0x38>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	2010      	movs	r0, #16
 8002ffc:	f002 fd1a 	bl	8005a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003000:	2010      	movs	r0, #16
 8003002:	f002 fd33 	bl	8005a6c <HAL_NVIC_EnableIRQ>

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <MX_GPIO_Init+0x11c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a40      	ldr	r2, [pc, #256]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a3a      	ldr	r2, [pc, #232]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	4b35      	ldr	r3, [pc, #212]	; (8003130 <MX_GPIO_Init+0x11c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a34      	ldr	r2, [pc, #208]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b32      	ldr	r3, [pc, #200]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003072:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	6313      	str	r3, [r2, #48]	; 0x30
 800307e:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800308a:	4b29      	ldr	r3, [pc, #164]	; (8003130 <MX_GPIO_Init+0x11c>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a28      	ldr	r2, [pc, #160]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <MX_GPIO_Init+0x11c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030a8:	4822      	ldr	r0, [pc, #136]	; (8003134 <MX_GPIO_Init+0x120>)
 80030aa:	f003 fa93 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80030b4:	4820      	ldr	r0, [pc, #128]	; (8003138 <MX_GPIO_Init+0x124>)
 80030b6:	f003 fa8d 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 80030ba:	2304      	movs	r3, #4
 80030bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	4619      	mov	r1, r3
 80030cc:	481b      	ldr	r0, [pc, #108]	; (800313c <MX_GPIO_Init+0x128>)
 80030ce:	f003 f8e5 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 80030d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d8:	2301      	movs	r3, #1
 80030da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4619      	mov	r1, r3
 80030ea:	4812      	ldr	r0, [pc, #72]	; (8003134 <MX_GPIO_Init+0x120>)
 80030ec:	f003 f8d6 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 80030f0:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f6:	2301      	movs	r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	4619      	mov	r1, r3
 8003108:	480b      	ldr	r0, [pc, #44]	; (8003138 <MX_GPIO_Init+0x124>)
 800310a:	f003 f8c7 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 800310e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	4807      	ldr	r0, [pc, #28]	; (8003140 <MX_GPIO_Init+0x12c>)
 8003124:	f003 f8ba 	bl	800629c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	40021000 	.word	0x40021000
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40020000 	.word	0x40020000
 8003140:	40020400 	.word	0x40020400

08003144 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7fe ff87 	bl	8002060 <TaskSensorData>
  /* USER CODE END 5 */
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f8f6 	bl	8001354 <TaskController>
  /* USER CODE END RunTaskController */
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fe fe39 	bl	8001df0 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe fd50 	bl	8001c34 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fe fe1b 	bl	8001de0 <TaskPower>
  /* USER CODE END RunTaskPower */
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe f97a 	bl	80014b4 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d101      	bne.n	80031de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031da:	f002 fb2f 	bl	800583c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031ea:	b672      	cpsid	i
}
 80031ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031ee:	e7fe      	b.n	80031ee <Error_Handler+0x8>

080031f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_MspInit+0x4c>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a10      	ldr	r2, [pc, #64]	; (800323c <HAL_MspInit+0x4c>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_MspInit+0x4c>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_MspInit+0x4c>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_MspInit+0x4c>)
 8003214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003218:	6453      	str	r3, [r2, #68]	; 0x44
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_MspInit+0x4c>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	210f      	movs	r1, #15
 800322a:	f06f 0001 	mvn.w	r0, #1
 800322e:	f002 fc01 	bl	8005a34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0aa      	sub	sp, #168	; 0xa8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f00c feac 	bl	800ffbe <memset>
  if(hi2c->Instance==I2C1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_I2C_MspInit+0xb4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d13c      	bne.n	80032ea <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003274:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8003276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	4618      	mov	r0, r3
 8003282:	f004 fcbd 	bl	8007c00 <HAL_RCCEx_PeriphCLKConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800328c:	f7ff ffab 	bl	80031e6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <HAL_I2C_MspInit+0xb8>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_I2C_MspInit+0xb8>)
 8003296:	f043 0302 	orr.w	r3, r3, #2
 800329a:	6313      	str	r3, [r2, #48]	; 0x30
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_I2C_MspInit+0xb8>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 80032a8:	23c0      	movs	r3, #192	; 0xc0
 80032aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ae:	2312      	movs	r3, #18
 80032b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032c0:	2304      	movs	r3, #4
 80032c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032ca:	4619      	mov	r1, r3
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <HAL_I2C_MspInit+0xbc>)
 80032ce:	f002 ffe5 	bl	800629c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_I2C_MspInit+0xb8>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <HAL_I2C_MspInit+0xb8>)
 80032d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_I2C_MspInit+0xb8>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032ea:	bf00      	nop
 80032ec:	37a8      	adds	r7, #168	; 0xa8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40005400 	.word	0x40005400
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40020400 	.word	0x40020400

08003300 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	; 0x30
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2e      	ldr	r2, [pc, #184]	; (80033d8 <HAL_SPI_MspInit+0xd8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d128      	bne.n	8003374 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003322:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	4a2d      	ldr	r2, [pc, #180]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 8003328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a27      	ldr	r2, [pc, #156]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 8003352:	23f0      	movs	r3, #240	; 0xf0
 8003354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335e:	2303      	movs	r3, #3
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003362:	2305      	movs	r3, #5
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	f107 031c 	add.w	r3, r7, #28
 800336a:	4619      	mov	r1, r3
 800336c:	481c      	ldr	r0, [pc, #112]	; (80033e0 <HAL_SPI_MspInit+0xe0>)
 800336e:	f002 ff95 	bl	800629c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003372:	e02d      	b.n	80033d0 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <HAL_SPI_MspInit+0xe4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d128      	bne.n	80033d0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 8003384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_SPI_MspInit+0xdc>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 80033ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80033b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033c0:	2305      	movs	r3, #5
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	4619      	mov	r1, r3
 80033ca:	4807      	ldr	r0, [pc, #28]	; (80033e8 <HAL_SPI_MspInit+0xe8>)
 80033cc:	f002 ff66 	bl	800629c <HAL_GPIO_Init>
}
 80033d0:	bf00      	nop
 80033d2:	3730      	adds	r7, #48	; 0x30
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40013000 	.word	0x40013000
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40003800 	.word	0x40003800
 80033e8:	40020400 	.word	0x40020400

080033ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_TIM_Base_MspInit+0x38>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10b      	bne.n	8003416 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_TIM_Base_MspInit+0x3c>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_TIM_Base_MspInit+0x3c>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <HAL_TIM_Base_MspInit+0x3c>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40010000 	.word	0x40010000
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <HAL_TIM_IC_MspInit+0x8c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d12f      	bne.n	80034ae <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_TIM_IC_MspInit+0x90>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a1a      	ldr	r2, [pc, #104]	; (80034bc <HAL_TIM_IC_MspInit+0x90>)
 8003454:	f043 0302 	orr.w	r3, r3, #2
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_TIM_IC_MspInit+0x90>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_TIM_IC_MspInit+0x90>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a14      	ldr	r2, [pc, #80]	; (80034bc <HAL_TIM_IC_MspInit+0x90>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_TIM_IC_MspInit+0x90>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 800347e:	2340      	movs	r3, #64	; 0x40
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800348e:	2302      	movs	r3, #2
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	4809      	ldr	r0, [pc, #36]	; (80034c0 <HAL_TIM_IC_MspInit+0x94>)
 800349a:	f002 feff 	bl	800629c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2106      	movs	r1, #6
 80034a2:	201d      	movs	r0, #29
 80034a4:	f002 fac6 	bl	8005a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034a8:	201d      	movs	r0, #29
 80034aa:	f002 fadf 	bl	8005a6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034ae:	bf00      	nop
 80034b0:	3728      	adds	r7, #40	; 0x28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40020800 	.word	0x40020800

080034c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a11      	ldr	r2, [pc, #68]	; (8003528 <HAL_TIM_MspPostInit+0x64>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d11c      	bne.n	8003520 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_TIM_MspPostInit+0x68>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4a10      	ldr	r2, [pc, #64]	; (800352c <HAL_TIM_MspPostInit+0x68>)
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_TIM_MspPostInit+0x68>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 80034fe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003502:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003510:	2301      	movs	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003514:	f107 030c 	add.w	r3, r7, #12
 8003518:	4619      	mov	r1, r3
 800351a:	4805      	ldr	r0, [pc, #20]	; (8003530 <HAL_TIM_MspPostInit+0x6c>)
 800351c:	f002 febe 	bl	800629c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003520:	bf00      	nop
 8003522:	3720      	adds	r7, #32
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40010000 	.word	0x40010000
 800352c:	40023800 	.word	0x40023800
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b0ae      	sub	sp, #184	; 0xb8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800354c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f00c fd32 	bl	800ffbe <memset>
  if(huart->Instance==UART4)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a83      	ldr	r2, [pc, #524]	; (800376c <HAL_UART_MspInit+0x238>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d144      	bne.n	80035ee <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800356a:	2340      	movs	r3, #64	; 0x40
 800356c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800356e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003572:	4618      	mov	r0, r3
 8003574:	f004 fb44 	bl	8007c00 <HAL_RCCEx_PeriphCLKConfig>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800357e:	f7ff fe32 	bl	80031e6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003582:	4b7b      	ldr	r3, [pc, #492]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7a      	ldr	r2, [pc, #488]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b78      	ldr	r3, [pc, #480]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359a:	4b75      	ldr	r3, [pc, #468]	; (8003770 <HAL_UART_MspInit+0x23c>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a74      	ldr	r2, [pc, #464]	; (8003770 <HAL_UART_MspInit+0x23c>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b72      	ldr	r3, [pc, #456]	; (8003770 <HAL_UART_MspInit+0x23c>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 80035b2:	2303      	movs	r3, #3
 80035b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c4:	2303      	movs	r3, #3
 80035c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035ca:	2308      	movs	r3, #8
 80035cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4867      	ldr	r0, [pc, #412]	; (8003774 <HAL_UART_MspInit+0x240>)
 80035d8:	f002 fe60 	bl	800629c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80035dc:	2200      	movs	r2, #0
 80035de:	2106      	movs	r1, #6
 80035e0:	2034      	movs	r0, #52	; 0x34
 80035e2:	f002 fa27 	bl	8005a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035e6:	2034      	movs	r0, #52	; 0x34
 80035e8:	f002 fa40 	bl	8005a6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035ec:	e0b9      	b.n	8003762 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a61      	ldr	r2, [pc, #388]	; (8003778 <HAL_UART_MspInit+0x244>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d172      	bne.n	80036de <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80035fc:	2304      	movs	r3, #4
 80035fe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fafb 	bl	8007c00 <HAL_RCCEx_PeriphCLKConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8003610:	f7ff fde9 	bl	80031e6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003614:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	4a55      	ldr	r2, [pc, #340]	; (8003770 <HAL_UART_MspInit+0x23c>)
 800361a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361e:	6413      	str	r3, [r2, #64]	; 0x40
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_UART_MspInit+0x23c>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4a4f      	ldr	r2, [pc, #316]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003632:	f043 0308 	orr.w	r3, r3, #8
 8003636:	6313      	str	r3, [r2, #48]	; 0x30
 8003638:	4b4d      	ldr	r3, [pc, #308]	; (8003770 <HAL_UART_MspInit+0x23c>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8003644:	2360      	movs	r3, #96	; 0x60
 8003646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003656:	2303      	movs	r3, #3
 8003658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800365c:	2307      	movs	r3, #7
 800365e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003662:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003666:	4619      	mov	r1, r3
 8003668:	4844      	ldr	r0, [pc, #272]	; (800377c <HAL_UART_MspInit+0x248>)
 800366a:	f002 fe17 	bl	800629c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800366e:	4b44      	ldr	r3, [pc, #272]	; (8003780 <HAL_UART_MspInit+0x24c>)
 8003670:	4a44      	ldr	r2, [pc, #272]	; (8003784 <HAL_UART_MspInit+0x250>)
 8003672:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003674:	4b42      	ldr	r3, [pc, #264]	; (8003780 <HAL_UART_MspInit+0x24c>)
 8003676:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800367a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800367c:	4b40      	ldr	r3, [pc, #256]	; (8003780 <HAL_UART_MspInit+0x24c>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003682:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <HAL_UART_MspInit+0x24c>)
 8003684:	2200      	movs	r2, #0
 8003686:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003688:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <HAL_UART_MspInit+0x24c>)
 800368a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800368e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003690:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <HAL_UART_MspInit+0x24c>)
 8003692:	2200      	movs	r2, #0
 8003694:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003696:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <HAL_UART_MspInit+0x24c>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800369c:	4b38      	ldr	r3, [pc, #224]	; (8003780 <HAL_UART_MspInit+0x24c>)
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <HAL_UART_MspInit+0x24c>)
 80036a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036aa:	4b35      	ldr	r3, [pc, #212]	; (8003780 <HAL_UART_MspInit+0x24c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036b0:	4833      	ldr	r0, [pc, #204]	; (8003780 <HAL_UART_MspInit+0x24c>)
 80036b2:	f002 f9e9 	bl	8005a88 <HAL_DMA_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80036bc:	f7ff fd93 	bl	80031e6 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <HAL_UART_MspInit+0x24c>)
 80036c4:	675a      	str	r2, [r3, #116]	; 0x74
 80036c6:	4a2e      	ldr	r2, [pc, #184]	; (8003780 <HAL_UART_MspInit+0x24c>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2106      	movs	r1, #6
 80036d0:	2026      	movs	r0, #38	; 0x26
 80036d2:	f002 f9af 	bl	8005a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036d6:	2026      	movs	r0, #38	; 0x26
 80036d8:	f002 f9c8 	bl	8005a6c <HAL_NVIC_EnableIRQ>
}
 80036dc:	e041      	b.n	8003762 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a29      	ldr	r2, [pc, #164]	; (8003788 <HAL_UART_MspInit+0x254>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d13c      	bne.n	8003762 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80036ee:	2310      	movs	r3, #16
 80036f0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 fa82 	bl	8007c00 <HAL_RCCEx_PeriphCLKConfig>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8003702:	f7ff fd70 	bl	80031e6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003706:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_UART_MspInit+0x23c>)
 800370c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003710:	6413      	str	r3, [r2, #64]	; 0x40
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <HAL_UART_MspInit+0x23c>)
 8003724:	f043 0304 	orr.w	r3, r3, #4
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_UART_MspInit+0x23c>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 8003736:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800373a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003750:	2307      	movs	r3, #7
 8003752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003756:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800375a:	4619      	mov	r1, r3
 800375c:	480b      	ldr	r0, [pc, #44]	; (800378c <HAL_UART_MspInit+0x258>)
 800375e:	f002 fd9d 	bl	800629c <HAL_GPIO_Init>
}
 8003762:	bf00      	nop
 8003764:	37b8      	adds	r7, #184	; 0xb8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40004c00 	.word	0x40004c00
 8003770:	40023800 	.word	0x40023800
 8003774:	40020000 	.word	0x40020000
 8003778:	40004400 	.word	0x40004400
 800377c:	40020c00 	.word	0x40020c00
 8003780:	20000b5c 	.word	0x20000b5c
 8003784:	40026088 	.word	0x40026088
 8003788:	40004800 	.word	0x40004800
 800378c:	40020800 	.word	0x40020800

08003790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08e      	sub	sp, #56	; 0x38
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80037a0:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_InitTick+0xe4>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	4a33      	ldr	r2, [pc, #204]	; (8003874 <HAL_InitTick+0xe4>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6413      	str	r3, [r2, #64]	; 0x40
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_InitTick+0xe4>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037b8:	f107 0210 	add.w	r2, r7, #16
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 f9ea 	bl	8007b9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037d2:	f004 f9bb 	bl	8007b4c <HAL_RCC_GetPCLK1Freq>
 80037d6:	6378      	str	r0, [r7, #52]	; 0x34
 80037d8:	e004      	b.n	80037e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80037da:	f004 f9b7 	bl	8007b4c <HAL_RCC_GetPCLK1Freq>
 80037de:	4603      	mov	r3, r0
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e6:	4a24      	ldr	r2, [pc, #144]	; (8003878 <HAL_InitTick+0xe8>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	0c9b      	lsrs	r3, r3, #18
 80037ee:	3b01      	subs	r3, #1
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80037f2:	4b22      	ldr	r3, [pc, #136]	; (800387c <HAL_InitTick+0xec>)
 80037f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_InitTick+0xec>)
 80037fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003800:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003802:	4a1e      	ldr	r2, [pc, #120]	; (800387c <HAL_InitTick+0xec>)
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <HAL_InitTick+0xec>)
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_InitTick+0xec>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_InitTick+0xec>)
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800381a:	4818      	ldr	r0, [pc, #96]	; (800387c <HAL_InitTick+0xec>)
 800381c:	f005 fc9a 	bl	8009154 <HAL_TIM_Base_Init>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11b      	bne.n	8003866 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800382e:	4813      	ldr	r0, [pc, #76]	; (800387c <HAL_InitTick+0xec>)
 8003830:	f005 fce8 	bl	8009204 <HAL_TIM_Base_Start_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800383a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800383e:	2b00      	cmp	r3, #0
 8003840:	d111      	bne.n	8003866 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003842:	201c      	movs	r0, #28
 8003844:	f002 f912 	bl	8005a6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	d808      	bhi.n	8003860 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800384e:	2200      	movs	r2, #0
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	201c      	movs	r0, #28
 8003854:	f002 f8ee 	bl	8005a34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_InitTick+0xf0>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e002      	b.n	8003866 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003866:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800386a:	4618      	mov	r0, r3
 800386c:	3738      	adds	r7, #56	; 0x38
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	431bde83 	.word	0x431bde83
 800387c:	20000bf8 	.word	0x20000bf8
 8003880:	2000000c 	.word	0x2000000c

08003884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <NMI_Handler+0x4>

0800388a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <HardFault_Handler+0x4>

08003890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003894:	e7fe      	b.n	8003894 <MemManage_Handler+0x4>

08003896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800389a:	e7fe      	b.n	800389a <BusFault_Handler+0x4>

0800389c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <UsageFault_Handler+0x4>

080038a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA1_Stream5_IRQHandler+0x10>)
 80038b6:	f002 fa87 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000b5c 	.word	0x20000b5c

080038c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <TIM2_IRQHandler+0x10>)
 80038ca:	f006 f817 	bl	80098fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000bf8 	.word	0x20000bf8

080038d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <TIM3_IRQHandler+0x10>)
 80038de:	f006 f80d 	bl	80098fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000978 	.word	0x20000978

080038ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <USART2_IRQHandler+0x10>)
 80038f2:	f007 fb6b 	bl	800afcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000a4c 	.word	0x20000a4c

08003900 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <UART4_IRQHandler+0x10>)
 8003906:	f007 fb61 	bl	800afcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200009c4 	.word	0x200009c4

08003914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_kill>:

int _kill(int pid, int sig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800392e:	f00c fc01 	bl	8010134 <__errno>
 8003932:	4603      	mov	r3, r0
 8003934:	2216      	movs	r2, #22
 8003936:	601a      	str	r2, [r3, #0]
  return -1;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_exit>:

void _exit (int status)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800394c:	f04f 31ff 	mov.w	r1, #4294967295
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ffe7 	bl	8003924 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003956:	e7fe      	b.n	8003956 <_exit+0x12>

08003958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e00a      	b.n	8003980 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800396a:	f3af 8000 	nop.w
 800396e:	4601      	mov	r1, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	60ba      	str	r2, [r7, #8]
 8003976:	b2ca      	uxtb	r2, r1
 8003978:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	dbf0      	blt.n	800396a <_read+0x12>
  }

  return len;
 8003988:	687b      	ldr	r3, [r7, #4]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e009      	b.n	80039b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	60ba      	str	r2, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dbf1      	blt.n	80039a4 <_write+0x12>
  }
  return len;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_close>:

int _close(int file)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039f2:	605a      	str	r2, [r3, #4]
  return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <_isatty>:

int _isatty(int file)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <_sbrk+0x5c>)
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <_sbrk+0x60>)
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_sbrk+0x64>)
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <_sbrk+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d207      	bcs.n	8003a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a64:	f00c fb66 	bl	8010134 <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	e009      	b.n	8003a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <_sbrk+0x64>)
 8003a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20040000 	.word	0x20040000
 8003a94:	00000400 	.word	0x00000400
 8003a98:	20000c44 	.word	0x20000c44
 8003a9c:	20004ae8 	.word	0x20004ae8

08003aa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <SystemInit+0x20>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <SystemInit+0x20>)
 8003aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b24      	cmp	r3, #36	; 0x24
 8003ade:	d103      	bne.n	8003ae8 <GPS_validate+0x24>
		i++;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003ae6:	e00c      	b.n	8003b02 <GPS_validate+0x3e>
		return 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e047      	b.n	8003b7c <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4053      	eors	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
		i++;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3301      	adds	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <GPS_validate+0x5c>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b2a      	cmp	r3, #42	; 0x2a
 8003b18:	d002      	beq.n	8003b20 <GPS_validate+0x5c>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b4a      	cmp	r3, #74	; 0x4a
 8003b1e:	dde5      	ble.n	8003aec <GPS_validate+0x28>
	}

	if (i >= 75)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b4a      	cmp	r3, #74	; 0x4a
 8003b24:	dd01      	ble.n	8003b2a <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8003b26:	2300      	movs	r3, #0
 8003b28:	e028      	b.n	8003b7c <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b2a      	cmp	r3, #42	; 0x2a
 8003b34:	d119      	bne.n	8003b6a <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3302      	adds	r3, #2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	490a      	ldr	r1, [pc, #40]	; (8003b84 <GPS_validate+0xc0>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f00c f99e 	bl	800fe9c <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003b60:	7a3a      	ldrb	r2, [r7, #8]
 8003b62:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d108      	bne.n	8003b7a <GPS_validate+0xb6>
 8003b68:	e001      	b.n	8003b6e <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e006      	b.n	8003b7c <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003b6e:	7a7a      	ldrb	r2, [r7, #9]
 8003b70:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d101      	bne.n	8003b7a <GPS_validate+0xb6>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <GPS_validate+0xb8>
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	080155d8 	.word	0x080155d8

08003b88 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af08      	add	r7, sp, #32
 8003b8e:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8003b90:	2206      	movs	r2, #6
 8003b92:	4964      	ldr	r1, [pc, #400]	; (8003d24 <GPS_parse+0x19c>)
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f00c fa1a 	bl	800ffce <strncmp>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d138      	bne.n	8003c12 <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8003ba0:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <GPS_parse+0x1a0>)
 8003ba2:	9307      	str	r3, [sp, #28]
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <GPS_parse+0x1a4>)
 8003ba6:	9306      	str	r3, [sp, #24]
 8003ba8:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <GPS_parse+0x1a8>)
 8003baa:	9305      	str	r3, [sp, #20]
 8003bac:	4b61      	ldr	r3, [pc, #388]	; (8003d34 <GPS_parse+0x1ac>)
 8003bae:	9304      	str	r3, [sp, #16]
 8003bb0:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <GPS_parse+0x1b0>)
 8003bb2:	9303      	str	r3, [sp, #12]
 8003bb4:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <GPS_parse+0x1b4>)
 8003bb6:	9302      	str	r3, [sp, #8]
 8003bb8:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <GPS_parse+0x1b8>)
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <GPS_parse+0x1bc>)
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <GPS_parse+0x1c0>)
 8003bc2:	4a62      	ldr	r2, [pc, #392]	; (8003d4c <GPS_parse+0x1c4>)
 8003bc4:	4962      	ldr	r1, [pc, #392]	; (8003d50 <GPS_parse+0x1c8>)
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f00c f988 	bl	800fedc <siscanf>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f340 80a4 	ble.w	8003d1c <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003bd4:	4b5f      	ldr	r3, [pc, #380]	; (8003d54 <GPS_parse+0x1cc>)
 8003bd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bda:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <GPS_parse+0x1cc>)
 8003bdc:	7d1b      	ldrb	r3, [r3, #20]
 8003bde:	4618      	mov	r0, r3
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	f000 f8da 	bl	8003d9c <GPS_nmea_to_dec>
 8003be8:	eef0 7a40 	vmov.f32	s15, s0
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <GPS_parse+0x1cc>)
 8003bee:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003bf2:	4b58      	ldr	r3, [pc, #352]	; (8003d54 <GPS_parse+0x1cc>)
 8003bf4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bf8:	4b56      	ldr	r3, [pc, #344]	; (8003d54 <GPS_parse+0x1cc>)
 8003bfa:	7f1b      	ldrb	r3, [r3, #28]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003c02:	f000 f8cb 	bl	8003d9c <GPS_nmea_to_dec>
 8003c06:	eef0 7a40 	vmov.f32	s15, s0
 8003c0a:	4b52      	ldr	r3, [pc, #328]	; (8003d54 <GPS_parse+0x1cc>)
 8003c0c:	edc3 7a00 	vstr	s15, [r3]
			return;
 8003c10:	e084      	b.n	8003d1c <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8003c12:	2206      	movs	r2, #6
 8003c14:	4950      	ldr	r1, [pc, #320]	; (8003d58 <GPS_parse+0x1d0>)
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f00c f9d9 	bl	800ffce <strncmp>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d123      	bne.n	8003c6a <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8003c22:	4b4e      	ldr	r3, [pc, #312]	; (8003d5c <GPS_parse+0x1d4>)
 8003c24:	9305      	str	r3, [sp, #20]
 8003c26:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <GPS_parse+0x1d8>)
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	4b4e      	ldr	r3, [pc, #312]	; (8003d64 <GPS_parse+0x1dc>)
 8003c2c:	9303      	str	r3, [sp, #12]
 8003c2e:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <GPS_parse+0x1b4>)
 8003c30:	9302      	str	r3, [sp, #8]
 8003c32:	4b43      	ldr	r3, [pc, #268]	; (8003d40 <GPS_parse+0x1b8>)
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <GPS_parse+0x1bc>)
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <GPS_parse+0x1c0>)
 8003c3c:	4a43      	ldr	r2, [pc, #268]	; (8003d4c <GPS_parse+0x1c4>)
 8003c3e:	494a      	ldr	r1, [pc, #296]	; (8003d68 <GPS_parse+0x1e0>)
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f00c f94b 	bl	800fedc <siscanf>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	dd67      	ble.n	8003d1c <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8003c4c:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <GPS_parse+0x1cc>)
 8003c4e:	7d1b      	ldrb	r3, [r3, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <GPS_parse+0xd2>
				GPS.ns = ' ';
 8003c54:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <GPS_parse+0x1cc>)
 8003c56:	2220      	movs	r2, #32
 8003c58:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003c5a:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <GPS_parse+0x1cc>)
 8003c5c:	7f1b      	ldrb	r3, [r3, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d157      	bne.n	8003d12 <GPS_parse+0x18a>
				GPS.ew = ' ';
 8003c62:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <GPS_parse+0x1cc>)
 8003c64:	2220      	movs	r2, #32
 8003c66:	771a      	strb	r2, [r3, #28]
			return;
 8003c68:	e053      	b.n	8003d12 <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8003c6a:	2206      	movs	r2, #6
 8003c6c:	493f      	ldr	r1, [pc, #252]	; (8003d6c <GPS_parse+0x1e4>)
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f00c f9ad 	bl	800ffce <strncmp>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d11f      	bne.n	8003cba <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <GPS_parse+0x1e8>)
 8003c7c:	9303      	str	r3, [sp, #12]
 8003c7e:	4b33      	ldr	r3, [pc, #204]	; (8003d4c <GPS_parse+0x1c4>)
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <GPS_parse+0x1b4>)
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <GPS_parse+0x1b8>)
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <GPS_parse+0x1bc>)
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <GPS_parse+0x1c0>)
 8003c8e:	4939      	ldr	r1, [pc, #228]	; (8003d74 <GPS_parse+0x1ec>)
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f00c f923 	bl	800fedc <siscanf>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dd3f      	ble.n	8003d1c <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <GPS_parse+0x1cc>)
 8003c9e:	7d1b      	ldrb	r3, [r3, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <GPS_parse+0x122>
				GPS.ns = '?';
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <GPS_parse+0x1cc>)
 8003ca6:	223f      	movs	r2, #63	; 0x3f
 8003ca8:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003caa:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <GPS_parse+0x1cc>)
 8003cac:	7f1b      	ldrb	r3, [r3, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d131      	bne.n	8003d16 <GPS_parse+0x18e>
				GPS.ew = '?';
 8003cb2:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <GPS_parse+0x1cc>)
 8003cb4:	223f      	movs	r2, #63	; 0x3f
 8003cb6:	771a      	strb	r2, [r3, #28]
			return;
 8003cb8:	e02d      	b.n	8003d16 <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8003cba:	2206      	movs	r2, #6
 8003cbc:	492e      	ldr	r1, [pc, #184]	; (8003d78 <GPS_parse+0x1f0>)
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f00c f985 	bl	800ffce <strncmp>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d128      	bne.n	8003d1c <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8003cca:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <GPS_parse+0x1f4>)
 8003ccc:	9305      	str	r3, [sp, #20]
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <GPS_parse+0x1f8>)
 8003cd0:	9304      	str	r3, [sp, #16]
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <GPS_parse+0x1fc>)
 8003cd4:	9303      	str	r3, [sp, #12]
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <GPS_parse+0x1dc>)
 8003cd8:	9302      	str	r3, [sp, #8]
 8003cda:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <GPS_parse+0x200>)
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <GPS_parse+0x204>)
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <GPS_parse+0x208>)
 8003ce4:	4a2b      	ldr	r2, [pc, #172]	; (8003d94 <GPS_parse+0x20c>)
 8003ce6:	492c      	ldr	r1, [pc, #176]	; (8003d98 <GPS_parse+0x210>)
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f00c f8f7 	bl	800fedc <siscanf>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	dd13      	ble.n	8003d1c <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <GPS_parse+0x1cc>)
 8003cf6:	7d1b      	ldrb	r3, [r3, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <GPS_parse+0x17a>
				GPS.ns = '?';
 8003cfc:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <GPS_parse+0x1cc>)
 8003cfe:	223f      	movs	r2, #63	; 0x3f
 8003d00:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <GPS_parse+0x1cc>)
 8003d04:	7f1b      	ldrb	r3, [r3, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d107      	bne.n	8003d1a <GPS_parse+0x192>
				GPS.ew = '?';
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <GPS_parse+0x1cc>)
 8003d0c:	223f      	movs	r2, #63	; 0x3f
 8003d0e:	771a      	strb	r2, [r3, #28]
			return;
 8003d10:	e003      	b.n	8003d1a <GPS_parse+0x192>
			return;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <GPS_parse+0x194>
			return;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <GPS_parse+0x194>
			return;
 8003d1a:	bf00      	nop
		}
	}
}
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	080155e0 	.word	0x080155e0
 8003d28:	2000042c 	.word	0x2000042c
 8003d2c:	20000428 	.word	0x20000428
 8003d30:	20000424 	.word	0x20000424
 8003d34:	20000420 	.word	0x20000420
 8003d38:	2000041c 	.word	0x2000041c
 8003d3c:	20000418 	.word	0x20000418
 8003d40:	20000414 	.word	0x20000414
 8003d44:	20000410 	.word	0x20000410
 8003d48:	2000040c 	.word	0x2000040c
 8003d4c:	20000408 	.word	0x20000408
 8003d50:	080155e8 	.word	0x080155e8
 8003d54:	200003fc 	.word	0x200003fc
 8003d58:	08015610 	.word	0x08015610
 8003d5c:	20000438 	.word	0x20000438
 8003d60:	20000434 	.word	0x20000434
 8003d64:	20000430 	.word	0x20000430
 8003d68:	08015618 	.word	0x08015618
 8003d6c:	08015638 	.word	0x08015638
 8003d70:	2000043c 	.word	0x2000043c
 8003d74:	08015640 	.word	0x08015640
 8003d78:	0801565c 	.word	0x0801565c
 8003d7c:	20000454 	.word	0x20000454
 8003d80:	20000450 	.word	0x20000450
 8003d84:	2000044d 	.word	0x2000044d
 8003d88:	2000044c 	.word	0x2000044c
 8003d8c:	20000448 	.word	0x20000448
 8003d90:	20000444 	.word	0x20000444
 8003d94:	20000440 	.word	0x20000440
 8003d98:	08015664 	.word	0x08015664

08003d9c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003da6:	4603      	mov	r3, r0
 8003da8:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8003daa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dae:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003e30 <GPS_nmea_to_dec+0x94>
 8003db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dba:	ee17 3a90 	vmov	r3, s15
 8003dbe:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2264      	movs	r2, #100	; 0x64
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dd8:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8003ddc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003de0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003e34 <GPS_nmea_to_dec+0x98>
 8003de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003de8:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003df6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfe:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	2b53      	cmp	r3, #83	; 0x53
 8003e06:	d002      	beq.n	8003e0e <GPS_nmea_to_dec+0x72>
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	2b57      	cmp	r3, #87	; 0x57
 8003e0c:	d105      	bne.n	8003e1a <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8003e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e12:	eef1 7a67 	vneg.f32	s15, s15
 8003e16:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	ee07 3a90 	vmov	s15, r3
}
 8003e20:	eeb0 0a67 	vmov.f32	s0, s15
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	42c80000 	.word	0x42c80000
 8003e34:	42700000 	.word	0x42700000

08003e38 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8003e3c:	2007      	movs	r0, #7
 8003e3e:	f000 f871 	bl	8003f24 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8003e42:	2000      	movs	r0, #0
 8003e44:	f000 f8c8 	bl	8003fd8 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 8003e48:	2005      	movs	r0, #5
 8003e4a:	f000 f8e0 	bl	800400e <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8003e4e:	2002      	movs	r0, #2
 8003e50:	f000 f8fc 	bl	800404c <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8003e54:	2100      	movs	r1, #0
 8003e56:	2000      	movs	r0, #0
 8003e58:	f000 f84e 	bl	8003ef8 <HMC5883L_setOffset>

	return 0;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	f000 f946 	bl	80040fc <HMC5883L_readRegister16>
 8003e70:	4603      	mov	r3, r0
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HMC5883L_readRaw+0x88>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HMC5883L_readRaw+0x8c>)
 8003e84:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8003e88:	2007      	movs	r0, #7
 8003e8a:	f000 f937 	bl	80040fc <HMC5883L_readRegister16>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <HMC5883L_readRaw+0x90>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HMC5883L_readRaw+0x8c>)
 8003ea2:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8003ea6:	2005      	movs	r0, #5
 8003ea8:	f000 f928 	bl	80040fc <HMC5883L_readRegister16>
 8003eac:	4603      	mov	r3, r0
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HMC5883L_readRaw+0x8c>)
 8003eb8:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8003ebc:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <HMC5883L_readRaw+0x8c>)
 8003ebe:	f107 0314 	add.w	r3, r7, #20
 8003ec2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ec8:	6979      	ldr	r1, [r7, #20]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	ee06 1a90 	vmov	s13, r1
 8003ed2:	ee07 2a10 	vmov	s14, r2
 8003ed6:	ee07 3a90 	vmov	s15, r3
}
 8003eda:	eeb0 0a66 	vmov.f32	s0, s13
 8003ede:	eef0 0a47 	vmov.f32	s1, s14
 8003ee2:	eeb0 1a67 	vmov.f32	s2, s15
 8003ee6:	3720      	adds	r7, #32
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000308 	.word	0x20000308
 8003ef0:	200002fc 	.word	0x200002fc
 8003ef4:	2000030c 	.word	0x2000030c

08003ef8 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8003f02:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <HMC5883L_setOffset+0x24>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8003f08:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <HMC5883L_setOffset+0x28>)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6013      	str	r3, [r2, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000308 	.word	0x20000308
 8003f20:	2000030c 	.word	0x2000030c

08003f24 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2b07      	cmp	r3, #7
 8003f32:	d833      	bhi.n	8003f9c <HMC5883L_setRange+0x78>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <HMC5883L_setRange+0x18>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f5d 	.word	0x08003f5d
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	08003f7d 	.word	0x08003f7d
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08003f8d 	.word	0x08003f8d
 8003f58:	08003f95 	.word	0x08003f95
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <HMC5883L_setRange+0x90>)
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <HMC5883L_setRange+0x94>)
 8003f60:	601a      	str	r2, [r3, #0]
	    break;
 8003f62:	e01c      	b.n	8003f9e <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HMC5883L_setRange+0x90>)
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HMC5883L_setRange+0x98>)
 8003f68:	601a      	str	r2, [r3, #0]
	    break;
 8003f6a:	e018      	b.n	8003f9e <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HMC5883L_setRange+0x90>)
 8003f6e:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <HMC5883L_setRange+0x9c>)
 8003f70:	601a      	str	r2, [r3, #0]
	    break;
 8003f72:	e014      	b.n	8003f9e <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HMC5883L_setRange+0x90>)
 8003f76:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <HMC5883L_setRange+0xa0>)
 8003f78:	601a      	str	r2, [r3, #0]
	    break;
 8003f7a:	e010      	b.n	8003f9e <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8003f7c:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <HMC5883L_setRange+0x90>)
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <HMC5883L_setRange+0xa4>)
 8003f80:	601a      	str	r2, [r3, #0]
	    break;
 8003f82:	e00c      	b.n	8003f9e <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HMC5883L_setRange+0x90>)
 8003f86:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <HMC5883L_setRange+0xa8>)
 8003f88:	601a      	str	r2, [r3, #0]
	    break;
 8003f8a:	e008      	b.n	8003f9e <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HMC5883L_setRange+0x90>)
 8003f8e:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <HMC5883L_setRange+0xac>)
 8003f90:	601a      	str	r2, [r3, #0]
	    break;
 8003f92:	e004      	b.n	8003f9e <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <HMC5883L_setRange+0x90>)
 8003f96:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <HMC5883L_setRange+0xb0>)
 8003f98:	601a      	str	r2, [r3, #0]
	    break;
 8003f9a:	e000      	b.n	8003f9e <HMC5883L_setRange+0x7a>

	default:
	    break;
 8003f9c:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	015b      	lsls	r3, r3, #5
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f000 f870 	bl	800408c <HMC5883L_writeRegister8>
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	200002f8 	.word	0x200002f8
 8003fb8:	3d958106 	.word	0x3d958106
 8003fbc:	3f6b851f 	.word	0x3f6b851f
 8003fc0:	3f9c28f6 	.word	0x3f9c28f6
 8003fc4:	3fc28f5c 	.word	0x3fc28f5c
 8003fc8:	401147ae 	.word	0x401147ae
 8003fcc:	4023d70a 	.word	0x4023d70a
 8003fd0:	4041eb85 	.word	0x4041eb85
 8003fd4:	408b3333 	.word	0x408b3333

08003fd8 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f000 f86e 	bl	80040c4 <HMC5883L_readRegister8>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	4619      	mov	r1, r3
 8004000:	2002      	movs	r0, #2
 8004002:	f000 f843 	bl	800408c <HMC5883L_writeRegister8>
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	4603      	mov	r3, r0
 8004016:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8004018:	2000      	movs	r0, #0
 800401a:	f000 f853 	bl	80040c4 <HMC5883L_readRegister8>
 800401e:	4603      	mov	r3, r0
 8004020:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	f023 031c 	bic.w	r3, r3, #28
 8004028:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	b25a      	sxtb	r2, r3
 8004030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004034:	4313      	orrs	r3, r2
 8004036:	b25b      	sxtb	r3, r3
 8004038:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	4619      	mov	r1, r3
 800403e:	2000      	movs	r0, #0
 8004040:	f000 f824 	bl	800408c <HMC5883L_writeRegister8>
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8004056:	2000      	movs	r0, #0
 8004058:	f000 f834 	bl	80040c4 <HMC5883L_readRegister8>
 800405c:	4603      	mov	r3, r0
 800405e:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004066:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	015b      	lsls	r3, r3, #5
 800406c:	b25a      	sxtb	r2, r3
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	4313      	orrs	r3, r2
 8004074:	b25b      	sxtb	r3, r3
 8004076:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	4619      	mov	r1, r3
 800407c:	2000      	movs	r0, #0
 800407e:	f000 f805 	bl	800408c <HMC5883L_writeRegister8>
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af04      	add	r7, sp, #16
 8004092:	4603      	mov	r3, r0
 8004094:	460a      	mov	r2, r1
 8004096:	71fb      	strb	r3, [r7, #7]
 8004098:	4613      	mov	r3, r2
 800409a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	b29a      	uxth	r2, r3
 80040a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040a4:	9302      	str	r3, [sp, #8]
 80040a6:	2301      	movs	r3, #1
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	1dbb      	adds	r3, r7, #6
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2301      	movs	r3, #1
 80040b0:	213c      	movs	r1, #60	; 0x3c
 80040b2:	4803      	ldr	r0, [pc, #12]	; (80040c0 <HMC5883L_writeRegister8+0x34>)
 80040b4:	f002 fb38 	bl	8006728 <HAL_I2C_Mem_Write>
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000810 	.word	0x20000810

080040c4 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af04      	add	r7, sp, #16
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	2301      	movs	r3, #1
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	f107 030f 	add.w	r3, r7, #15
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2301      	movs	r3, #1
 80040e4:	213c      	movs	r1, #60	; 0x3c
 80040e6:	4804      	ldr	r0, [pc, #16]	; (80040f8 <HMC5883L_readRegister8+0x34>)
 80040e8:	f002 fc32 	bl	8006950 <HAL_I2C_Mem_Read>
    return value;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000810 	.word	0x20000810

080040fc <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af04      	add	r7, sp, #16
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	b29a      	uxth	r2, r3
 800410a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	2302      	movs	r3, #2
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	f107 030e 	add.w	r3, r7, #14
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2301      	movs	r3, #1
 800411c:	213c      	movs	r1, #60	; 0x3c
 800411e:	4804      	ldr	r0, [pc, #16]	; (8004130 <HMC5883L_readRegister16+0x34>)
 8004120:	f002 fc16 	bl	8006950 <HAL_I2C_Mem_Read>
    return value;
 8004124:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000810 	.word	0x20000810

08004134 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 800413e:	2201      	movs	r2, #1
 8004140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004144:	481a      	ldr	r0, [pc, #104]	; (80041b0 <BMP280_initialize+0x7c>)
 8004146:	f002 fa45 	bl	80065d4 <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 8004150:	6838      	ldr	r0, [r7, #0]
 8004152:	f000 f83c 	bl	80041ce <BMP280_getID>
 8004156:	4603      	mov	r3, r0
 8004158:	2b58      	cmp	r3, #88	; 0x58
 800415a:	d001      	beq.n	8004160 <BMP280_initialize+0x2c>
    {
        return 1;
 800415c:	2301      	movs	r3, #1
 800415e:	e023      	b.n	80041a8 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 8004160:	6838      	ldr	r0, [r7, #0]
 8004162:	f000 f827 	bl	80041b4 <BMP280_reset>
    HAL_Delay(500);
 8004166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800416a:	f001 fb87 	bl	800587c <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 800416e:	2105      	movs	r1, #5
 8004170:	6838      	ldr	r0, [r7, #0]
 8004172:	f000 f8ef 	bl	8004354 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 8004176:	2102      	movs	r1, #2
 8004178:	6838      	ldr	r0, [r7, #0]
 800417a:	f000 f90c 	bl	8004396 <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 800417e:	2103      	movs	r1, #3
 8004180:	6838      	ldr	r0, [r7, #0]
 8004182:	f000 f929 	bl	80043d8 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 8004186:	2104      	movs	r1, #4
 8004188:	6838      	ldr	r0, [r7, #0]
 800418a:	f000 f966 	bl	800445a <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 800418e:	2100      	movs	r1, #0
 8004190:	6838      	ldr	r0, [r7, #0]
 8004192:	f000 f941 	bl	8004418 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 8004196:	6838      	ldr	r0, [r7, #0]
 8004198:	f000 f826 	bl	80041e8 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 800419c:	2232      	movs	r2, #50	; 0x32
 800419e:	2164      	movs	r1, #100	; 0x64
 80041a0:	6838      	ldr	r0, [r7, #0]
 80041a2:	f000 f89e 	bl	80042e2 <BMP280_setReferencePressure>

    return 0;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40020c00 	.word	0x40020c00

080041b4 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 80041bc:	22b6      	movs	r2, #182	; 0xb6
 80041be:	21e0      	movs	r1, #224	; 0xe0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fa27 	bl	8004614 <BMP280_writeRegister>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 80041d6:	21d0      	movs	r1, #208	; 0xd0
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f9ff 	bl	80045dc <BMP280_readRegister>
 80041de:	4603      	mov	r3, r0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 80041f0:	f107 0208 	add.w	r2, r7, #8
 80041f4:	2318      	movs	r3, #24
 80041f6:	2188      	movs	r1, #136	; 0x88
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fa2a 	bl	8004652 <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 80041fe:	7a7b      	ldrb	r3, [r7, #9]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	b21a      	sxth	r2, r3
 8004204:	7a3b      	ldrb	r3, [r7, #8]
 8004206:	b21b      	sxth	r3, r3
 8004208:	4313      	orrs	r3, r2
 800420a:	b21b      	sxth	r3, r3
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 8004212:	7afb      	ldrb	r3, [r7, #11]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	b21a      	sxth	r2, r3
 8004218:	7abb      	ldrb	r3, [r7, #10]
 800421a:	b21b      	sxth	r3, r3
 800421c:	4313      	orrs	r3, r2
 800421e:	b21a      	sxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 8004224:	7b7b      	ldrb	r3, [r7, #13]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	b21a      	sxth	r2, r3
 800422a:	7b3b      	ldrb	r3, [r7, #12]
 800422c:	b21b      	sxth	r3, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	b21a      	sxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	b21a      	sxth	r2, r3
 800423c:	7bbb      	ldrb	r3, [r7, #14]
 800423e:	b21b      	sxth	r3, r3
 8004240:	4313      	orrs	r3, r2
 8004242:	b21b      	sxth	r3, r3
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 800424a:	7c7b      	ldrb	r3, [r7, #17]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	b21a      	sxth	r2, r3
 8004250:	7c3b      	ldrb	r3, [r7, #16]
 8004252:	b21b      	sxth	r3, r3
 8004254:	4313      	orrs	r3, r2
 8004256:	b21a      	sxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	b21a      	sxth	r2, r3
 8004262:	7cbb      	ldrb	r3, [r7, #18]
 8004264:	b21b      	sxth	r3, r3
 8004266:	4313      	orrs	r3, r2
 8004268:	b21a      	sxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 800426e:	7d7b      	ldrb	r3, [r7, #21]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	b21a      	sxth	r2, r3
 8004274:	7d3b      	ldrb	r3, [r7, #20]
 8004276:	b21b      	sxth	r3, r3
 8004278:	4313      	orrs	r3, r2
 800427a:	b21a      	sxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	b21a      	sxth	r2, r3
 8004286:	7dbb      	ldrb	r3, [r7, #22]
 8004288:	b21b      	sxth	r3, r3
 800428a:	4313      	orrs	r3, r2
 800428c:	b21a      	sxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 8004292:	7e7b      	ldrb	r3, [r7, #25]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	b21a      	sxth	r2, r3
 8004298:	7e3b      	ldrb	r3, [r7, #24]
 800429a:	b21b      	sxth	r3, r3
 800429c:	4313      	orrs	r3, r2
 800429e:	b21a      	sxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 80042a4:	7efb      	ldrb	r3, [r7, #27]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	b21a      	sxth	r2, r3
 80042aa:	7ebb      	ldrb	r3, [r7, #26]
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	4313      	orrs	r3, r2
 80042b0:	b21a      	sxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 80042b6:	7f7b      	ldrb	r3, [r7, #29]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	b21a      	sxth	r2, r3
 80042bc:	7f3b      	ldrb	r3, [r7, #28]
 80042be:	b21b      	sxth	r3, r3
 80042c0:	4313      	orrs	r3, r2
 80042c2:	b21a      	sxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	b21a      	sxth	r2, r3
 80042ce:	7fbb      	ldrb	r3, [r7, #30]
 80042d0:	b21b      	sxth	r3, r3
 80042d2:	4313      	orrs	r3, r2
 80042d4:	b21a      	sxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 80042da:	bf00      	nop
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	807b      	strh	r3, [r7, #2]
 80042ee:	4613      	mov	r3, r2
 80042f0:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 80042f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042f6:	f001 fac1 	bl	800587c <HAL_Delay>
    float sum = 0;
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	e012      	b.n	800432c <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8ca 	bl	80044a0 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004312:	ed97 7a03 	vldr	s14, [r7, #12]
 8004316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431a:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 800431e:	787b      	ldrb	r3, [r7, #1]
 8004320:	4618      	mov	r0, r3
 8004322:	f001 faab 	bl	800587c <HAL_Delay>
    for (int i = 0; i < samples; i++)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3301      	adds	r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	dbe8      	blt.n	8004306 <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 8004334:	887b      	ldrh	r3, [r7, #2]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800433e:	edd7 6a03 	vldr	s13, [r7, #12]
 8004342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8004360:	21f4      	movs	r1, #244	; 0xf4
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f93a 	bl	80045dc <BMP280_readRegister>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 800436c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004370:	f023 031c 	bic.w	r3, r3, #28
 8004374:	b25a      	sxtb	r2, r3
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	b25b      	sxtb	r3, r3
 800437c:	4313      	orrs	r3, r2
 800437e:	b25b      	sxtb	r3, r3
 8004380:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	461a      	mov	r2, r3
 8004386:	21f4      	movs	r1, #244	; 0xf4
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f943 	bl	8004614 <BMP280_writeRegister>
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	460b      	mov	r3, r1
 80043a0:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80043a2:	21f4      	movs	r1, #244	; 0xf4
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f919 	bl	80045dc <BMP280_readRegister>
 80043aa:	4603      	mov	r3, r0
 80043ac:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 80043ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	b25a      	sxtb	r2, r3
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	015b      	lsls	r3, r3, #5
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	461a      	mov	r2, r3
 80043c8:	21f4      	movs	r1, #244	; 0xf4
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f922 	bl	8004614 <BMP280_writeRegister>
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80043e4:	21f4      	movs	r1, #244	; 0xf4
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8f8 	bl	80045dc <BMP280_readRegister>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 80043f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f4:	f023 0303 	bic.w	r3, r3, #3
 80043f8:	b25a      	sxtb	r2, r3
 80043fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043fe:	4313      	orrs	r3, r2
 8004400:	b25b      	sxtb	r3, r3
 8004402:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	461a      	mov	r2, r3
 8004408:	21f4      	movs	r1, #244	; 0xf4
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f902 	bl	8004614 <BMP280_writeRegister>
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8004424:	21f5      	movs	r1, #245	; 0xf5
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8d8 	bl	80045dc <BMP280_readRegister>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 8004430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	b25a      	sxtb	r2, r3
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	015b      	lsls	r3, r3, #5
 800443e:	b25b      	sxtb	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b25b      	sxtb	r3, r3
 8004444:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	461a      	mov	r2, r3
 800444a:	21f5      	movs	r1, #245	; 0xf5
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8e1 	bl	8004614 <BMP280_writeRegister>
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	460b      	mov	r3, r1
 8004464:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8004466:	21f5      	movs	r1, #245	; 0xf5
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8b7 	bl	80045dc <BMP280_readRegister>
 800446e:	4603      	mov	r3, r0
 8004470:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 8004472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004476:	f023 031c 	bic.w	r3, r3, #28
 800447a:	b25a      	sxtb	r2, r3
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	b25b      	sxtb	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b25b      	sxtb	r3, r3
 8004486:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	461a      	mov	r2, r3
 800448c:	21f5      	movs	r1, #245	; 0xf5
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8c0 	bl	8004614 <BMP280_writeRegister>
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	0000      	movs	r0, r0
	...

080044a0 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 80044a8:	f107 0208 	add.w	r2, r7, #8
 80044ac:	2306      	movs	r3, #6
 80044ae:	21f7      	movs	r1, #247	; 0xf7
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f8ce 	bl	8004652 <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80044b6:	7a3b      	ldrb	r3, [r7, #8]
 80044b8:	031a      	lsls	r2, r3, #12
 80044ba:	7a7b      	ldrb	r3, [r7, #9]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	4313      	orrs	r3, r2
 80044c0:	7aba      	ldrb	r2, [r7, #10]
 80044c2:	0912      	lsrs	r2, r2, #4
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80044ca:	7afb      	ldrb	r3, [r7, #11]
 80044cc:	031a      	lsls	r2, r3, #12
 80044ce:	7b3b      	ldrb	r3, [r7, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	4313      	orrs	r3, r2
 80044d4:	7b7a      	ldrb	r2, [r7, #13]
 80044d6:	0912      	lsrs	r2, r2, #4
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 80044de:	6939      	ldr	r1, [r7, #16]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f917 	bl	8004714 <BMP280_compensate_temperature>
 80044e6:	ee07 0a90 	vmov	s15, r0
 80044ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ee:	ee17 0a90 	vmov	r0, s15
 80044f2:	f7fc f851 	bl	8000598 <__aeabi_f2d>
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <BMP280_measure+0x130>)
 80044fc:	f7fc f9ce 	bl	800089c <__aeabi_ddiv>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	f7fc fb96 	bl	8000c38 <__aeabi_d2f>
 800450c:	4602      	mov	r2, r0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 8004512:	6979      	ldr	r1, [r7, #20]
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f953 	bl	80047c0 <BMP280_compensate_pressure>
 800451a:	ee07 0a90 	vmov	s15, r0
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	ee17 0a90 	vmov	r0, s15
 8004526:	f7fc f837 	bl	8000598 <__aeabi_f2d>
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <BMP280_measure+0x134>)
 8004530:	f7fc f9b4 	bl	800089c <__aeabi_ddiv>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	f7fc fb7c 	bl	8000c38 <__aeabi_d2f>
 8004540:	4602      	mov	r2, r0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	edd3 7a01 	vldr	s15, [r3, #4]
 800454c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004554:	dc00      	bgt.n	8004558 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 8004556:	e02c      	b.n	80045b2 <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	ed93 7a04 	vldr	s14, [r3, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	edd3 7a01 	vldr	s15, [r3, #4]
 8004564:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004568:	ee16 0a90 	vmov	r0, s13
 800456c:	f7fc f814 	bl	8000598 <__aeabi_f2d>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80045c0 <BMP280_measure+0x120>
 8004578:	ec43 2b10 	vmov	d0, r2, r3
 800457c:	f00f fdb8 	bl	80140f0 <pow>
 8004580:	ec53 2b10 	vmov	r2, r3, d0
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	4913      	ldr	r1, [pc, #76]	; (80045d8 <BMP280_measure+0x138>)
 800458a:	f7fb fea5 	bl	80002d8 <__aeabi_dsub>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	a30c      	add	r3, pc, #48	; (adr r3, 80045c8 <BMP280_measure+0x128>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fc f854 	bl	8000648 <__aeabi_dmul>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f7fc fb46 	bl	8000c38 <__aeabi_d2f>
 80045ac:	4602      	mov	r2, r0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	615a      	str	r2, [r3, #20]
}
 80045b2:	bf00      	nop
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	f3af 8000 	nop.w
 80045c0:	1a36e2eb 	.word	0x1a36e2eb
 80045c4:	3fc85bc0 	.word	0x3fc85bc0
 80045c8:	00000000 	.word	0x00000000
 80045cc:	4150e92d 	.word	0x4150e92d
 80045d0:	40590000 	.word	0x40590000
 80045d4:	40700000 	.word	0x40700000
 80045d8:	3ff00000 	.word	0x3ff00000

080045dc <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f883 	bl	80046f4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f855 	bl	80046a2 <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 80045f8:	2100      	movs	r1, #0
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f851 	bl	80046a2 <BMP280_spiReadWrite>
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f865 	bl	80046d4 <BMP280_spiCSNhigh>
    return value;
 800460a:	7bfb      	ldrb	r3, [r7, #15]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
 8004620:	4613      	mov	r3, r2
 8004622:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f865 	bl	80046f4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004630:	b2db      	uxtb	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f834 	bl	80046a2 <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 800463a:	78bb      	ldrb	r3, [r7, #2]
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f82f 	bl	80046a2 <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f845 	bl	80046d4 <BMP280_spiCSNhigh>
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 8004652:	b590      	push	{r4, r7, lr}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	461a      	mov	r2, r3
 800465e:	460b      	mov	r3, r1
 8004660:	72fb      	strb	r3, [r7, #11]
 8004662:	4613      	mov	r3, r2
 8004664:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f844 	bl	80046f4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	4619      	mov	r1, r3
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f816 	bl	80046a2 <BMP280_spiReadWrite>
    while (length--)
 8004676:	e008      	b.n	800468a <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8004678:	687c      	ldr	r4, [r7, #4]
 800467a:	1c63      	adds	r3, r4, #1
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	2100      	movs	r1, #0
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f80e 	bl	80046a2 <BMP280_spiReadWrite>
 8004686:	4603      	mov	r3, r0
 8004688:	7023      	strb	r3, [r4, #0]
    while (length--)
 800468a:	7abb      	ldrb	r3, [r7, #10]
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	72ba      	strb	r2, [r7, #10]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f1      	bne.n	8004678 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f81d 	bl	80046d4 <BMP280_spiCSNhigh>
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd90      	pop	{r4, r7, pc}

080046a2 <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b086      	sub	sp, #24
 80046a6:	af02      	add	r7, sp, #8
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 80046ae:	23ff      	movs	r3, #255	; 0xff
 80046b0:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f107 020f 	add.w	r2, r7, #15
 80046ba:	1cf9      	adds	r1, r7, #3
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2301      	movs	r3, #1
 80046c4:	f004 f92f 	bl	8008926 <HAL_SPI_TransmitReceive>
    return rx_message;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046e2:	4803      	ldr	r0, [pc, #12]	; (80046f0 <BMP280_spiCSNhigh+0x1c>)
 80046e4:	f001 ff76 	bl	80065d4 <HAL_GPIO_WritePin>
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40020c00 	.word	0x40020c00

080046f4 <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 80046fc:	2200      	movs	r2, #0
 80046fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004702:	4803      	ldr	r0, [pc, #12]	; (8004710 <BMP280_spiCSNlow+0x1c>)
 8004704:	f001 ff66 	bl	80065d4 <HAL_GPIO_WritePin>
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40020c00 	.word	0x40020c00

08004714 <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	da00      	bge.n	8004726 <BMP280_compensate_temperature+0x12>
 8004724:	3307      	adds	r3, #7
 8004726:	10db      	asrs	r3, r3, #3
 8004728:	461a      	mov	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8b1b      	ldrh	r3, [r3, #24]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8004738:	fb02 f303 	mul.w	r3, r2, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	da01      	bge.n	8004744 <BMP280_compensate_temperature+0x30>
 8004740:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8004744:	12db      	asrs	r3, r3, #11
 8004746:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da00      	bge.n	8004750 <BMP280_compensate_temperature+0x3c>
 800474e:	330f      	adds	r3, #15
 8004750:	111b      	asrs	r3, r3, #4
 8004752:	461a      	mov	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8b1b      	ldrh	r3, [r3, #24]
 8004758:	1ad2      	subs	r2, r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	da00      	bge.n	8004762 <BMP280_compensate_temperature+0x4e>
 8004760:	330f      	adds	r3, #15
 8004762:	111b      	asrs	r3, r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8b1b      	ldrh	r3, [r3, #24]
 800476a:	1acb      	subs	r3, r1, r3
 800476c:	fb02 f303 	mul.w	r3, r2, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	da01      	bge.n	8004778 <BMP280_compensate_temperature+0x64>
 8004774:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004778:	131b      	asrs	r3, r3, #12
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	da03      	bge.n	8004792 <BMP280_compensate_temperature+0x7e>
 800478a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800478e:	441a      	add	r2, r3
 8004790:	4613      	mov	r3, r2
 8004792:	139b      	asrs	r3, r3, #14
 8004794:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	441a      	add	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	3380      	adds	r3, #128	; 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	da00      	bge.n	80047b2 <BMP280_compensate_temperature+0x9e>
 80047b0:	33ff      	adds	r3, #255	; 0xff
 80047b2:	121b      	asrs	r3, r3, #8
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b0d6      	sub	sp, #344	; 0x158
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 80047cc:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 80047d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	17da      	asrs	r2, r3, #31
 80047d8:	461c      	mov	r4, r3
 80047da:	4615      	mov	r5, r2
 80047dc:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80047e0:	f145 3bff 	adc.w	fp, r5, #4294967295
 80047e4:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 80047e8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80047ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047f0:	fb03 f102 	mul.w	r1, r3, r2
 80047f4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80047f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	18ca      	adds	r2, r1, r3
 8004802:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004806:	fba3 8903 	umull	r8, r9, r3, r3
 800480a:	eb02 0309 	add.w	r3, r2, r9
 800480e:	4699      	mov	r9, r3
 8004810:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004814:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004818:	b21b      	sxth	r3, r3
 800481a:	17da      	asrs	r2, r3, #31
 800481c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004820:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004824:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8004828:	4603      	mov	r3, r0
 800482a:	fb03 f209 	mul.w	r2, r3, r9
 800482e:	460b      	mov	r3, r1
 8004830:	fb08 f303 	mul.w	r3, r8, r3
 8004834:	4413      	add	r3, r2
 8004836:	4602      	mov	r2, r0
 8004838:	fba8 1202 	umull	r1, r2, r8, r2
 800483c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004840:	460a      	mov	r2, r1
 8004842:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004846:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800484a:	4413      	add	r3, r2
 800484c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004850:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8004854:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8004858:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 800485c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004860:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004864:	b21b      	sxth	r3, r3
 8004866:	17da      	asrs	r2, r3, #31
 8004868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800486c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004870:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004874:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004878:	462a      	mov	r2, r5
 800487a:	fb02 f203 	mul.w	r2, r2, r3
 800487e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004882:	4621      	mov	r1, r4
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	441a      	add	r2, r3
 800488a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800488e:	4621      	mov	r1, r4
 8004890:	fba3 1301 	umull	r1, r3, r3, r1
 8004894:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004898:	460b      	mov	r3, r1
 800489a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800489e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048a2:	18d3      	adds	r3, r2, r3
 80048a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80048a8:	f04f 0000 	mov.w	r0, #0
 80048ac:	f04f 0100 	mov.w	r1, #0
 80048b0:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80048b4:	462b      	mov	r3, r5
 80048b6:	0459      	lsls	r1, r3, #17
 80048b8:	4623      	mov	r3, r4
 80048ba:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80048be:	4623      	mov	r3, r4
 80048c0:	0458      	lsls	r0, r3, #17
 80048c2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80048c6:	1814      	adds	r4, r2, r0
 80048c8:	67bc      	str	r4, [r7, #120]	; 0x78
 80048ca:	414b      	adcs	r3, r1
 80048cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048ce:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80048d2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 80048d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80048da:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80048de:	b21b      	sxth	r3, r3
 80048e0:	17da      	asrs	r2, r3, #31
 80048e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048f6:	00d9      	lsls	r1, r3, #3
 80048f8:	2000      	movs	r0, #0
 80048fa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80048fe:	1814      	adds	r4, r2, r0
 8004900:	673c      	str	r4, [r7, #112]	; 0x70
 8004902:	414b      	adcs	r3, r1
 8004904:	677b      	str	r3, [r7, #116]	; 0x74
 8004906:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800490a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 800490e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004912:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004916:	fb03 f102 	mul.w	r1, r3, r2
 800491a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800491e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	18ca      	adds	r2, r1, r3
 8004928:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800492c:	fba3 1303 	umull	r1, r3, r3, r3
 8004930:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004934:	460b      	mov	r3, r1
 8004936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800493a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800493e:	18d3      	adds	r3, r2, r3
 8004940:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004944:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004948:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800494c:	b21b      	sxth	r3, r3
 800494e:	17da      	asrs	r2, r3, #31
 8004950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004954:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004958:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800495c:	462b      	mov	r3, r5
 800495e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004962:	4642      	mov	r2, r8
 8004964:	fb02 f203 	mul.w	r2, r2, r3
 8004968:	464b      	mov	r3, r9
 800496a:	4621      	mov	r1, r4
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	4622      	mov	r2, r4
 8004974:	4641      	mov	r1, r8
 8004976:	fba2 1201 	umull	r1, r2, r2, r1
 800497a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800497e:	460a      	mov	r2, r1
 8004980:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8004984:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004988:	4413      	add	r3, r2
 800498a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800498e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004992:	2b00      	cmp	r3, #0
 8004994:	da07      	bge.n	80049a6 <BMP280_compensate_pressure+0x1e6>
 8004996:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800499a:	66b9      	str	r1, [r7, #104]	; 0x68
 800499c:	f143 0300 	adc.w	r3, r3, #0
 80049a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049a2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80049a6:	f04f 0000 	mov.w	r0, #0
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	0a10      	lsrs	r0, r2, #8
 80049b0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80049b4:	1219      	asrs	r1, r3, #8
 80049b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049ba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80049be:	b21b      	sxth	r3, r3
 80049c0:	17da      	asrs	r2, r3, #31
 80049c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80049ca:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80049ce:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80049d2:	464a      	mov	r2, r9
 80049d4:	fb02 f203 	mul.w	r2, r2, r3
 80049d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80049dc:	4644      	mov	r4, r8
 80049de:	fb04 f303 	mul.w	r3, r4, r3
 80049e2:	441a      	add	r2, r3
 80049e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80049e8:	4644      	mov	r4, r8
 80049ea:	fba3 4304 	umull	r4, r3, r3, r4
 80049ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049f2:	4623      	mov	r3, r4
 80049f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80049f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049fc:	18d3      	adds	r3, r2, r3
 80049fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004a0e:	464c      	mov	r4, r9
 8004a10:	0323      	lsls	r3, r4, #12
 8004a12:	4644      	mov	r4, r8
 8004a14:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8004a18:	4644      	mov	r4, r8
 8004a1a:	0322      	lsls	r2, r4, #12
 8004a1c:	1884      	adds	r4, r0, r2
 8004a1e:	663c      	str	r4, [r7, #96]	; 0x60
 8004a20:	eb41 0303 	adc.w	r3, r1, r3
 8004a24:	667b      	str	r3, [r7, #100]	; 0x64
 8004a26:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004a2a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8004a2e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004a32:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8004a36:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8004a3a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8004a3e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004a42:	8bdb      	ldrh	r3, [r3, #30]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a50:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8004a54:	462b      	mov	r3, r5
 8004a56:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a5a:	4642      	mov	r2, r8
 8004a5c:	fb02 f203 	mul.w	r2, r2, r3
 8004a60:	464b      	mov	r3, r9
 8004a62:	4621      	mov	r1, r4
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	fba2 1201 	umull	r1, r2, r2, r1
 8004a72:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8004a76:	460a      	mov	r2, r1
 8004a78:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004a7c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a80:	4413      	add	r3, r2
 8004a82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a86:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da06      	bge.n	8004a9c <BMP280_compensate_pressure+0x2dc>
 8004a8e:	1e51      	subs	r1, r2, #1
 8004a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a92:	f143 0301 	adc.w	r3, r3, #1
 8004a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a9c:	f04f 0000 	mov.w	r0, #0
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	1058      	asrs	r0, r3, #1
 8004aa6:	17d9      	asrs	r1, r3, #31
 8004aa8:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8004aac:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e182      	b.n	8004dbe <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8004ab8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004abc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004ac0:	17da      	asrs	r2, r3, #31
 8004ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac4:	657a      	str	r2, [r7, #84]	; 0x54
 8004ac6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004aca:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8004ace:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	07d9      	lsls	r1, r3, #31
 8004adc:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8004ae0:	07d0      	lsls	r0, r2, #31
 8004ae2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004ae6:	1a84      	subs	r4, r0, r2
 8004ae8:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004aec:	eb61 0303 	sbc.w	r3, r1, r3
 8004af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004af4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8004af8:	4622      	mov	r2, r4
 8004afa:	462b      	mov	r3, r5
 8004afc:	1891      	adds	r1, r2, r2
 8004afe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b00:	415b      	adcs	r3, r3
 8004b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b08:	4621      	mov	r1, r4
 8004b0a:	1851      	adds	r1, r2, r1
 8004b0c:	6439      	str	r1, [r7, #64]	; 0x40
 8004b0e:	4629      	mov	r1, r5
 8004b10:	414b      	adcs	r3, r1
 8004b12:	647b      	str	r3, [r7, #68]	; 0x44
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004b20:	4649      	mov	r1, r9
 8004b22:	018b      	lsls	r3, r1, #6
 8004b24:	4641      	mov	r1, r8
 8004b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	018a      	lsls	r2, r1, #6
 8004b2e:	4641      	mov	r1, r8
 8004b30:	1889      	adds	r1, r1, r2
 8004b32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b34:	4649      	mov	r1, r9
 8004b36:	eb43 0101 	adc.w	r1, r3, r1
 8004b3a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004b48:	4649      	mov	r1, r9
 8004b4a:	008b      	lsls	r3, r1, #2
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b52:	4641      	mov	r1, r8
 8004b54:	008a      	lsls	r2, r1, #2
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
 8004b62:	460b      	mov	r3, r1
 8004b64:	462a      	mov	r2, r5
 8004b66:	eb42 0303 	adc.w	r3, r2, r3
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8004b78:	4649      	mov	r1, r9
 8004b7a:	008b      	lsls	r3, r1, #2
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b82:	4641      	mov	r1, r8
 8004b84:	008a      	lsls	r2, r1, #2
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b94:	462b      	mov	r3, r5
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ba0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004ba4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004ba8:	f7fc f896 	bl	8000cd8 <__aeabi_ldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8004bb4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004bb8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004bbc:	b21b      	sxth	r3, r3
 8004bbe:	17da      	asrs	r2, r3, #31
 8004bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bc4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	da08      	bge.n	8004be2 <BMP280_compensate_pressure+0x422>
 8004bd0:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004bd4:	1851      	adds	r1, r2, r1
 8004bd6:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bd8:	f143 0300 	adc.w	r3, r3, #0
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0b50      	lsrs	r0, r2, #13
 8004bec:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004bf0:	1359      	asrs	r1, r3, #13
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	fb02 f001 	mul.w	r0, r2, r1
 8004c00:	4621      	mov	r1, r4
 8004c02:	fb01 f103 	mul.w	r1, r1, r3
 8004c06:	4401      	add	r1, r0
 8004c08:	4620      	mov	r0, r4
 8004c0a:	fba0 2302 	umull	r2, r3, r0, r2
 8004c0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c12:	4613      	mov	r3, r2
 8004c14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1c:	18cb      	adds	r3, r1, r3
 8004c1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c22:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da08      	bge.n	8004c3c <BMP280_compensate_pressure+0x47c>
 8004c2a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004c2e:	1851      	adds	r1, r2, r1
 8004c30:	6239      	str	r1, [r7, #32]
 8004c32:	f143 0300 	adc.w	r3, r3, #0
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
 8004c38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c3c:	f04f 0000 	mov.w	r0, #0
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	0b50      	lsrs	r0, r2, #13
 8004c46:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004c4a:	1359      	asrs	r1, r3, #13
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004c54:	4629      	mov	r1, r5
 8004c56:	fb02 f001 	mul.w	r0, r2, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	fb01 f103 	mul.w	r1, r1, r3
 8004c60:	4401      	add	r1, r0
 8004c62:	4620      	mov	r0, r4
 8004c64:	fba0 2302 	umull	r2, r3, r0, r2
 8004c68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c76:	18cb      	adds	r3, r1, r3
 8004c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c7c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	da08      	bge.n	8004c96 <BMP280_compensate_pressure+0x4d6>
 8004c84:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8004c88:	1851      	adds	r1, r2, r1
 8004c8a:	61b9      	str	r1, [r7, #24]
 8004c8c:	f143 0300 	adc.w	r3, r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c96:	f04f 0000 	mov.w	r0, #0
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	0e50      	lsrs	r0, r2, #25
 8004ca0:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8004ca4:	1659      	asrs	r1, r3, #25
 8004ca6:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8004caa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004cae:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004cb2:	b21b      	sxth	r3, r3
 8004cb4:	17da      	asrs	r2, r3, #31
 8004cb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cba:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004cbe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004cc2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004cc6:	462a      	mov	r2, r5
 8004cc8:	fb02 f203 	mul.w	r2, r2, r3
 8004ccc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	441a      	add	r2, r3
 8004cd8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004cdc:	4621      	mov	r1, r4
 8004cde:	fba3 1301 	umull	r1, r3, r3, r1
 8004ce2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf0:	18d3      	adds	r3, r2, r3
 8004cf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cf6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004cfa:	2900      	cmp	r1, #0
 8004cfc:	da07      	bge.n	8004d0e <BMP280_compensate_pressure+0x54e>
 8004cfe:	4b33      	ldr	r3, [pc, #204]	; (8004dcc <BMP280_compensate_pressure+0x60c>)
 8004d00:	18c3      	adds	r3, r0, r3
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	f141 0300 	adc.w	r3, r1, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	0cc2      	lsrs	r2, r0, #19
 8004d18:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004d1c:	14cb      	asrs	r3, r1, #19
 8004d1e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8004d22:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004d26:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004d2a:	1884      	adds	r4, r0, r2
 8004d2c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004d30:	eb41 0303 	adc.w	r3, r1, r3
 8004d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d38:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004d3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d40:	4621      	mov	r1, r4
 8004d42:	1889      	adds	r1, r1, r2
 8004d44:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004d48:	4629      	mov	r1, r5
 8004d4a:	eb43 0101 	adc.w	r1, r3, r1
 8004d4e:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8004d52:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da07      	bge.n	8004d6a <BMP280_compensate_pressure+0x5aa>
 8004d5a:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	f143 0300 	adc.w	r3, r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d6a:	f04f 0000 	mov.w	r0, #0
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	0a10      	lsrs	r0, r2, #8
 8004d74:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004d78:	1219      	asrs	r1, r3, #8
 8004d7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d7e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004d82:	b21b      	sxth	r3, r3
 8004d84:	17da      	asrs	r2, r3, #31
 8004d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d8a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004d9a:	464c      	mov	r4, r9
 8004d9c:	0123      	lsls	r3, r4, #4
 8004d9e:	4644      	mov	r4, r8
 8004da0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004da4:	4644      	mov	r4, r8
 8004da6:	0122      	lsls	r2, r4, #4
 8004da8:	1884      	adds	r4, r0, r2
 8004daa:	603c      	str	r4, [r7, #0]
 8004dac:	eb41 0303 	adc.w	r3, r1, r3
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004db6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 8004dba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dca:	bf00      	nop
 8004dcc:	0007ffff 	.word	0x0007ffff

08004dd0 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8004dda:	f107 030f 	add.w	r3, r7, #15
 8004dde:	2201      	movs	r2, #1
 8004de0:	9200      	str	r2, [sp, #0]
 8004de2:	2275      	movs	r2, #117	; 0x75
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8bd 	bl	8004f66 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b70      	cmp	r3, #112	; 0x70
 8004df0:	d129      	bne.n	8004e46 <MPU_begin+0x76>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8004df2:	236b      	movs	r3, #107	; 0x6b
 8004df4:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8004df6:	2300      	movs	r3, #0
 8004df8:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004dfa:	f107 030d 	add.w	r3, r7, #13
 8004dfe:	f107 020e 	add.w	r2, r7, #14
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f88d 	bl	8004f24 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8004e0a:	236a      	movs	r3, #106	; 0x6a
 8004e0c:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8004e0e:	2310      	movs	r3, #16
 8004e10:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004e12:	f107 030d 	add.w	r3, r7, #13
 8004e16:	f107 020e 	add.w	r2, r7, #14
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f881 	bl	8004f24 <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f8d5 	bl	8004fdc <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f935 	bl	80050ac <MPU_writeGyroFullScaleRange>
        return 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <MPU_begin+0x78>
    }
    else
    {
        return 0;
 8004e46:	2300      	movs	r3, #0
    }
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004e50:	b5b0      	push	{r4, r5, r7, lr}
 8004e52:	b09c      	sub	sp, #112	; 0x70
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e60:	482a      	ldr	r0, [pc, #168]	; (8004f0c <MPU_Init+0xbc>)
 8004e62:	f001 fbb7 	bl	80065d4 <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_250DPS;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	pMPU9250->settings.aFullScaleRange = AFSR_2G;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e7c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <MPU_Init+0xbc>)
 8004e84:	669a      	str	r2, [r3, #104]	; 0x68
	pMPU9250->attitude.tau = 0.98;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	4a21      	ldr	r2, [pc, #132]	; (8004f10 <MPU_Init+0xc0>)
 8004e8a:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.dt = 0.004;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <MPU_Init+0xc4>)
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff9b 	bl	8004dd0 <MPU_begin>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d023      	beq.n	8004ee8 <MPU_Init+0x98>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <MPU_Init+0xc8>)
 8004ea2:	f107 040c 	add.w	r4, r7, #12
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	6828      	ldr	r0, [r5, #0]
 8004eaa:	6869      	ldr	r1, [r5, #4]
 8004eac:	68aa      	ldr	r2, [r5, #8]
 8004eae:	68eb      	ldr	r3, [r5, #12]
 8004eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eb2:	6928      	ldr	r0, [r5, #16]
 8004eb4:	6969      	ldr	r1, [r5, #20]
 8004eb6:	69aa      	ldr	r2, [r5, #24]
 8004eb8:	c407      	stmia	r4!, {r0, r1, r2}
 8004eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ebe:	2248      	movs	r2, #72	; 0x48
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f00b f87b 	bl	800ffbe <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fb f9f7 	bl	80002c0 <strlen>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	f107 010c 	add.w	r1, r7, #12
 8004eda:	f04f 33ff 	mov.w	r3, #4294967295
 8004ede:	480f      	ldr	r0, [pc, #60]	; (8004f1c <MPU_Init+0xcc>)
 8004ee0:	f005 ff68 	bl	800adb4 <HAL_UART_Transmit>
		return 1;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e00c      	b.n	8004f02 <MPU_Init+0xb2>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8004ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eec:	2210      	movs	r2, #16
 8004eee:	490c      	ldr	r1, [pc, #48]	; (8004f20 <MPU_Init+0xd0>)
 8004ef0:	480a      	ldr	r0, [pc, #40]	; (8004f1c <MPU_Init+0xcc>)
 8004ef2:	f005 ff5f 	bl	800adb4 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 10);
 8004ef6:	220a      	movs	r2, #10
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f991 	bl	8005222 <MPU_calibrateGyro>

	return 0;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3770      	adds	r7, #112	; 0x70
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40020c00 	.word	0x40020c00
 8004f10:	3f7ae148 	.word	0x3f7ae148
 8004f14:	3b83126f 	.word	0x3b83126f
 8004f18:	08015698 	.word	0x08015698
 8004f1c:	20000ad4 	.word	0x20000ad4
 8004f20:	08015684 	.word	0x08015684

08004f24 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8004f32:	2100      	movs	r1, #0
 8004f34:	68b8      	ldr	r0, [r7, #8]
 8004f36:	f000 f83e 	bl	8004fb6 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8004f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f3e:	2201      	movs	r2, #1
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f003 fa51 	bl	80083ea <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8004f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f003 fa4a 	bl	80083ea <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8004f56:	2101      	movs	r1, #1
 8004f58:	68b8      	ldr	r0, [r7, #8]
 8004f5a:	f000 f82c 	bl	8004fb6 <MPU_CS>
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8004f76:	2100      	movs	r1, #0
 8004f78:	68b8      	ldr	r0, [r7, #8]
 8004f7a:	f000 f81c 	bl	8004fb6 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8004f88:	f107 0117 	add.w	r1, r7, #23
 8004f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f90:	2201      	movs	r2, #1
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f003 fa29 	bl	80083ea <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8004f98:	8c3a      	ldrh	r2, [r7, #32]
 8004f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f003 fb90 	bl	80086c6 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	68b8      	ldr	r0, [r7, #8]
 8004faa:	f000 f804 	bl	8004fb6 <MPU_CS>
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f001 fb00 	bl	80065d4 <HAL_GPIO_WritePin>
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 8004fea:	231c      	movs	r3, #28
 8004fec:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d847      	bhi.n	8005084 <MPU_writeAccFullScaleRange+0xa8>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <MPU_writeAccFullScaleRange+0x20>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	0800500d 	.word	0x0800500d
 8005000:	0800502b 	.word	0x0800502b
 8005004:	08005049 	.word	0x08005049
 8005008:	08005067 	.word	0x08005067
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005012:	615a      	str	r2, [r3, #20]
        val = 0x00;
 8005014:	2300      	movs	r3, #0
 8005016:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005018:	f107 0316 	add.w	r3, r7, #22
 800501c:	f107 0217 	add.w	r2, r7, #23
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff ff7e 	bl	8004f24 <MPU_REG_WRITE>
        break;
 8005028:	e03b      	b.n	80050a2 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005030:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8005032:	2308      	movs	r3, #8
 8005034:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005036:	f107 0316 	add.w	r3, r7, #22
 800503a:	f107 0217 	add.w	r2, r7, #23
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff ff6f 	bl	8004f24 <MPU_REG_WRITE>
        break;
 8005046:	e02c      	b.n	80050a2 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800504e:	615a      	str	r2, [r3, #20]
        val = 0x10;
 8005050:	2310      	movs	r3, #16
 8005052:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005054:	f107 0316 	add.w	r3, r7, #22
 8005058:	f107 0217 	add.w	r2, r7, #23
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff ff60 	bl	8004f24 <MPU_REG_WRITE>
        break;
 8005064:	e01d      	b.n	80050a2 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800506c:	615a      	str	r2, [r3, #20]
        val = 0x18;
 800506e:	2318      	movs	r3, #24
 8005070:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005072:	f107 0316 	add.w	r3, r7, #22
 8005076:	f107 0217 	add.w	r2, r7, #23
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff ff51 	bl	8004f24 <MPU_REG_WRITE>
        break;
 8005082:	e00e      	b.n	80050a2 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800508a:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800508c:	2308      	movs	r3, #8
 800508e:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005090:	f107 0316 	add.w	r3, r7, #22
 8005094:	f107 0217 	add.w	r2, r7, #23
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff ff42 	bl	8004f24 <MPU_REG_WRITE>
        break;
 80050a0:	bf00      	nop
    }
}
 80050a2:	bf00      	nop
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop

080050ac <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 80050ba:	231b      	movs	r3, #27
 80050bc:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d843      	bhi.n	800514c <MPU_writeGyroFullScaleRange+0xa0>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <MPU_writeGyroFullScaleRange+0x20>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005115 	.word	0x08005115
 80050d8:	08005131 	.word	0x08005131
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a24      	ldr	r2, [pc, #144]	; (8005170 <MPU_writeGyroFullScaleRange+0xc4>)
 80050e0:	619a      	str	r2, [r3, #24]
        val = 0x00;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050e6:	f107 0316 	add.w	r3, r7, #22
 80050ea:	f107 0217 	add.w	r2, r7, #23
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff ff17 	bl	8004f24 <MPU_REG_WRITE>
        break;
 80050f6:	e037      	b.n	8005168 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <MPU_writeGyroFullScaleRange+0xc8>)
 80050fc:	619a      	str	r2, [r3, #24]
        val = 0x08;
 80050fe:	2308      	movs	r3, #8
 8005100:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005102:	f107 0316 	add.w	r3, r7, #22
 8005106:	f107 0217 	add.w	r2, r7, #23
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff ff09 	bl	8004f24 <MPU_REG_WRITE>
        break;
 8005112:	e029      	b.n	8005168 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4a18      	ldr	r2, [pc, #96]	; (8005178 <MPU_writeGyroFullScaleRange+0xcc>)
 8005118:	619a      	str	r2, [r3, #24]
        val = 0x10;
 800511a:	2310      	movs	r3, #16
 800511c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800511e:	f107 0316 	add.w	r3, r7, #22
 8005122:	f107 0217 	add.w	r2, r7, #23
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff fefb 	bl	8004f24 <MPU_REG_WRITE>
        break;
 800512e:	e01b      	b.n	8005168 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <MPU_writeGyroFullScaleRange+0xd0>)
 8005134:	619a      	str	r2, [r3, #24]
        val = 0x18;
 8005136:	2318      	movs	r3, #24
 8005138:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800513a:	f107 0316 	add.w	r3, r7, #22
 800513e:	f107 0217 	add.w	r2, r7, #23
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff feed 	bl	8004f24 <MPU_REG_WRITE>
        break;
 800514a:	e00d      	b.n	8005168 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4a09      	ldr	r2, [pc, #36]	; (8005174 <MPU_writeGyroFullScaleRange+0xc8>)
 8005150:	619a      	str	r2, [r3, #24]
        val = 0x08;
 8005152:	2308      	movs	r3, #8
 8005154:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005156:	f107 0316 	add.w	r3, r7, #22
 800515a:	f107 0217 	add.w	r2, r7, #23
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff fedf 	bl	8004f24 <MPU_REG_WRITE>
        break;
 8005166:	bf00      	nop
    }
}
 8005168:	bf00      	nop
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	43030000 	.word	0x43030000
 8005174:	42830000 	.word	0x42830000
 8005178:	42033333 	.word	0x42033333
 800517c:	41833333 	.word	0x41833333

08005180 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08e      	sub	sp, #56	; 0x38
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	2226      	movs	r2, #38	; 0x26
 8005190:	9200      	str	r2, [sp, #0]
 8005192:	223b      	movs	r2, #59	; 0x3b
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff fee5 	bl	8004f66 <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->rawData.ax = buf[0] << 8 | buf[1];
 800519c:	7a3b      	ldrb	r3, [r7, #8]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	b21a      	sxth	r2, r3
 80051a2:	7a7b      	ldrb	r3, [r7, #9]
 80051a4:	b21b      	sxth	r3, r3
 80051a6:	4313      	orrs	r3, r2
 80051a8:	b21a      	sxth	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.ay = buf[2] << 8 | buf[3];
 80051ae:	7abb      	ldrb	r3, [r7, #10]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	b21a      	sxth	r2, r3
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	b21b      	sxth	r3, r3
 80051b8:	4313      	orrs	r3, r2
 80051ba:	b21a      	sxth	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.az = buf[4] << 8 | buf[5];
 80051c0:	7b3b      	ldrb	r3, [r7, #12]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	b21a      	sxth	r2, r3
 80051c6:	7b7b      	ldrb	r3, [r7, #13]
 80051c8:	b21b      	sxth	r3, r3
 80051ca:	4313      	orrs	r3, r2
 80051cc:	b21a      	sxth	r2, r3
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 80051d2:	7bbb      	ldrb	r3, [r7, #14]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	b21a      	sxth	r2, r3
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	b21b      	sxth	r3, r3
 80051dc:	4313      	orrs	r3, r2
 80051de:	b21a      	sxth	r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	80da      	strh	r2, [r3, #6]

    pMPU9250->rawData.gx = buf[8] << 8 | buf[9];
 80051e4:	7c3b      	ldrb	r3, [r7, #16]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	b21a      	sxth	r2, r3
 80051ea:	7c7b      	ldrb	r3, [r7, #17]
 80051ec:	b21b      	sxth	r3, r3
 80051ee:	4313      	orrs	r3, r2
 80051f0:	b21a      	sxth	r2, r3
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gy = buf[10] << 8 | buf[11];
 80051f6:	7cbb      	ldrb	r3, [r7, #18]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	b21a      	sxth	r2, r3
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	b21b      	sxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b21a      	sxth	r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gz = buf[12] << 8 | buf[13];
 8005208:	7d3b      	ldrb	r3, [r7, #20]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	b21a      	sxth	r2, r3
 800520e:	7d7b      	ldrb	r3, [r7, #21]
 8005210:	b21b      	sxth	r3, r3
 8005212:	4313      	orrs	r3, r2
 8005214:	b21a      	sxth	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 800521a:	bf00      	nop
 800521c:	3730      	adds	r7, #48	; 0x30
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b088      	sub	sp, #32
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	4613      	mov	r3, r2
 800522e:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 8005242:	2301      	movs	r3, #1
 8005244:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8005246:	2300      	movs	r3, #0
 8005248:	827b      	strh	r3, [r7, #18]
 800524a:	e01e      	b.n	800528a <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff ff96 	bl	8005180 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800525a:	461a      	mov	r2, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005268:	461a      	mov	r2, r3
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	4413      	add	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005276:	461a      	mov	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4413      	add	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 800527e:	2003      	movs	r0, #3
 8005280:	f000 fafc 	bl	800587c <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8005284:	8a7b      	ldrh	r3, [r7, #18]
 8005286:	3301      	adds	r3, #1
 8005288:	827b      	strh	r3, [r7, #18]
 800528a:	8a7a      	ldrh	r2, [r7, #18]
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	429a      	cmp	r2, r3
 8005290:	d3dc      	bcc.n	800524c <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	ee07 3a90 	vmov	s15, r3
 8005298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 80052ec:	bf00      	nop
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	0000      	movs	r0, r0
	...

080052f8 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff3b 	bl	8005180 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	ed93 7a05 	vldr	s14, [r3, #20]
 800531e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	ed93 7a05 	vldr	s14, [r3, #20]
 800533c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	ed93 7a05 	vldr	s14, [r3, #20]
 800535a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = pMPU9250->rawData.temp / TEMP_SENS + 21;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fb f902 	bl	8000574 <__aeabi_i2d>
 8005370:	a336      	add	r3, pc, #216	; (adr r3, 800544c <MPU_readProcessedData+0x154>)
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	f7fb fa91 	bl	800089c <__aeabi_ddiv>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	4b30      	ldr	r3, [pc, #192]	; (8005448 <MPU_readProcessedData+0x150>)
 8005388:	f7fa ffa8 	bl	80002dc <__adddf3>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	f7fb fc50 	bl	8000c38 <__aeabi_d2f>
 8005398:	4602      	mov	r2, r0
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	629a      	str	r2, [r3, #40]	; 0x28

    // Compensate for gyro offset
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroCal.x;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80053b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroCal.y;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80053d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroCal.z;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80053e0:	ee07 3a90 	vmov	s15, r3
 80053e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80053ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	ed93 7a06 	vldr	s14, [r3, #24]
 8005404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	ed93 7a06 	vldr	s14, [r3, #24]
 800541a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	ed93 7a06 	vldr	s14, [r3, #24]
 8005430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	40350000 	.word	0x40350000
 800544c:	851eb852 	.word	0x851eb852
 8005450:	4074ddeb 	.word	0x4074ddeb

08005454 <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <HCSR04_Init+0x94>)
 8005462:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800546a:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a1f      	ldr	r2, [pc, #124]	; (80054ec <HCSR04_Init+0x98>)
 8005470:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	226c      	movs	r2, #108	; 0x6c
 800547c:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005494:	e019      	b.n	80054ca <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b04      	cmp	r3, #4
 800549c:	d104      	bne.n	80054a8 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80054a6:	e010      	b.n	80054ca <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d104      	bne.n	80054ba <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2204      	movs	r2, #4
 80054b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80054b8:	e007      	b.n	80054ca <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d103      	bne.n	80054ca <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2208      	movs	r2, #8
 80054c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 80054ca:	6838      	ldr	r0, [r7, #0]
 80054cc:	f003 fe9a 	bl	8009204 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4619      	mov	r1, r3
 80054d6:	6838      	ldr	r0, [r7, #0]
 80054d8:	f004 f8c0 	bl	800965c <HAL_TIM_IC_Start_IT>

	return 0;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40020c00 	.word	0x40020c00
 80054ec:	40000400 	.word	0x40000400

080054f0 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	f040 812e 	bne.w	8005768 <HCSR04_TMR_IC_ISR+0x278>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	7f1a      	ldrb	r2, [r3, #28]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005516:	429a      	cmp	r2, r3
 8005518:	f040 8126 	bne.w	8005768 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7d5b      	ldrb	r3, [r3, #21]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d16d      	bne.n	8005600 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4619      	mov	r1, r3
 800552a:	6838      	ldr	r0, [r7, #0]
 800552c:	f004 fd80 	bl	800a030 <HAL_TIM_ReadCapturedValue>
 8005530:	4602      	mov	r2, r0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d108      	bne.n	8005556 <HCSR04_TMR_IC_ISR+0x66>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 020a 	bic.w	r2, r2, #10
 8005552:	621a      	str	r2, [r3, #32]
 8005554:	e021      	b.n	800559a <HCSR04_TMR_IC_ISR+0xaa>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b04      	cmp	r3, #4
 800555c:	d108      	bne.n	8005570 <HCSR04_TMR_IC_ISR+0x80>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800556c:	6213      	str	r3, [r2, #32]
 800556e:	e014      	b.n	800559a <HCSR04_TMR_IC_ISR+0xaa>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d108      	bne.n	800558a <HCSR04_TMR_IC_ISR+0x9a>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005586:	6213      	str	r3, [r2, #32]
 8005588:	e007      	b.n	800559a <HCSR04_TMR_IC_ISR+0xaa>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005598:	6213      	str	r3, [r2, #32]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d108      	bne.n	80055b4 <HCSR04_TMR_IC_ISR+0xc4>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0202 	orr.w	r2, r2, #2
 80055b0:	621a      	str	r2, [r3, #32]
 80055b2:	e021      	b.n	80055f8 <HCSR04_TMR_IC_ISR+0x108>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d108      	bne.n	80055ce <HCSR04_TMR_IC_ISR+0xde>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	f043 0320 	orr.w	r3, r3, #32
 80055ca:	6213      	str	r3, [r2, #32]
 80055cc:	e014      	b.n	80055f8 <HCSR04_TMR_IC_ISR+0x108>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d108      	bne.n	80055e8 <HCSR04_TMR_IC_ISR+0xf8>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055e4:	6213      	str	r3, [r2, #32]
 80055e6:	e007      	b.n	80055f8 <HCSR04_TMR_IC_ISR+0x108>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055f6:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 80055fe:	e0b3      	b.n	8005768 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	7d5b      	ldrb	r3, [r3, #21]
 8005604:	2b01      	cmp	r3, #1
 8005606:	f040 80af 	bne.w	8005768 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4619      	mov	r1, r3
 8005622:	6838      	ldr	r0, [r7, #0]
 8005624:	f004 fd04 	bl	800a030 <HAL_TIM_ReadCapturedValue>
 8005628:	4602      	mov	r2, r0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1a      	ldr	r2, [r3, #32]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	429a      	cmp	r2, r3
 8005638:	d207      	bcs.n	800564a <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	1ad2      	subs	r2, r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	629a      	str	r2, [r3, #40]	; 0x28
 8005648:	e00f      	b.n	800566a <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	429a      	cmp	r2, r3
 8005654:	d209      	bcs.n	800566a <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005664:	4413      	add	r3, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005676:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005770 <HCSR04_TMR_IC_ISR+0x280>
 800567a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800567e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005774 <HCSR04_TMR_IC_ISR+0x284>
 8005682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005686:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800568a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	fbb2 f3f3 	udiv	r3, r2, r3
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d108      	bne.n	80056cc <HCSR04_TMR_IC_ISR+0x1dc>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 020a 	bic.w	r2, r2, #10
 80056c8:	621a      	str	r2, [r3, #32]
 80056ca:	e021      	b.n	8005710 <HCSR04_TMR_IC_ISR+0x220>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d108      	bne.n	80056e6 <HCSR04_TMR_IC_ISR+0x1f6>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e2:	6213      	str	r3, [r2, #32]
 80056e4:	e014      	b.n	8005710 <HCSR04_TMR_IC_ISR+0x220>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d108      	bne.n	8005700 <HCSR04_TMR_IC_ISR+0x210>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80056fc:	6213      	str	r3, [r2, #32]
 80056fe:	e007      	b.n	8005710 <HCSR04_TMR_IC_ISR+0x220>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800570e:	6213      	str	r3, [r2, #32]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HCSR04_TMR_IC_ISR+0x236>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a12      	ldr	r2, [r2, #32]
 8005722:	621a      	str	r2, [r3, #32]
 8005724:	e01b      	b.n	800575e <HCSR04_TMR_IC_ISR+0x26e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d106      	bne.n	800573c <HCSR04_TMR_IC_ISR+0x24c>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	6213      	str	r3, [r2, #32]
 800573a:	e010      	b.n	800575e <HCSR04_TMR_IC_ISR+0x26e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d106      	bne.n	8005752 <HCSR04_TMR_IC_ISR+0x262>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	6213      	str	r3, [r2, #32]
 8005750:	e005      	b.n	800575e <HCSR04_TMR_IC_ISR+0x26e>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HCSR04_TMR_IC_ISR+0x288>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f007 f95e 	bl	800ca24 <osSemaphoreRelease>
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	447a0000 	.word	0x447a0000
 8005774:	43aa0000 	.word	0x43aa0000
 8005778:	20000bec 	.word	0x20000bec

0800577c <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	889b      	ldrh	r3, [r3, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	4619      	mov	r1, r3
 8005790:	f000 ff20 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005794:	2001      	movs	r0, #1
 8005796:	f000 f871 	bl	800587c <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	889b      	ldrh	r3, [r3, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	4619      	mov	r1, r3
 80057a6:	f000 ff15 	bl	80065d4 <HAL_GPIO_WritePin>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	ee07 3a90 	vmov	s15, r3
}
 80057c2:	eeb0 0a67 	vmov.f32	s0, s15
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80057d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057d4:	480d      	ldr	r0, [pc, #52]	; (800580c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80057d6:	490e      	ldr	r1, [pc, #56]	; (8005810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80057d8:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057dc:	e002      	b.n	80057e4 <LoopCopyDataInit>

080057de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057e2:	3304      	adds	r3, #4

080057e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057e8:	d3f9      	bcc.n	80057de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057ea:	4a0b      	ldr	r2, [pc, #44]	; (8005818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80057ec:	4c0b      	ldr	r4, [pc, #44]	; (800581c <LoopFillZerobss+0x26>)
  movs r3, #0
 80057ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057f0:	e001      	b.n	80057f6 <LoopFillZerobss>

080057f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057f4:	3204      	adds	r2, #4

080057f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057f8:	d3fb      	bcc.n	80057f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057fa:	f7fe f951 	bl	8003aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057fe:	f00a fc9f 	bl	8010140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005802:	f7fc ff47 	bl	8002694 <main>
  bx  lr    
 8005806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005808:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800580c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005810:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005814:	08015ba8 	.word	0x08015ba8
  ldr r2, =_sbss
 8005818:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800581c:	20004ae4 	.word	0x20004ae4

08005820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005820:	e7fe      	b.n	8005820 <ADC_IRQHandler>

08005822 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005826:	2003      	movs	r0, #3
 8005828:	f000 f8f9 	bl	8005a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800582c:	200f      	movs	r0, #15
 800582e:	f7fd ffaf 	bl	8003790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005832:	f7fd fcdd 	bl	80031f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005840:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_IncTick+0x20>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_IncTick+0x24>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4413      	add	r3, r2
 800584c:	4a04      	ldr	r2, [pc, #16]	; (8005860 <HAL_IncTick+0x24>)
 800584e:	6013      	str	r3, [r2, #0]
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20000010 	.word	0x20000010
 8005860:	20000c48 	.word	0x20000c48

08005864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return uwTick;
 8005868:	4b03      	ldr	r3, [pc, #12]	; (8005878 <HAL_GetTick+0x14>)
 800586a:	681b      	ldr	r3, [r3, #0]
}
 800586c:	4618      	mov	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000c48 	.word	0x20000c48

0800587c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005884:	f7ff ffee 	bl	8005864 <HAL_GetTick>
 8005888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d005      	beq.n	80058a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <HAL_Delay+0x44>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058a2:	bf00      	nop
 80058a4:	f7ff ffde 	bl	8005864 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d8f7      	bhi.n	80058a4 <HAL_Delay+0x28>
  {
  }
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000010 	.word	0x20000010

080058c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <__NVIC_SetPriorityGrouping+0x40>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058e0:	4013      	ands	r3, r2
 80058e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <__NVIC_SetPriorityGrouping+0x44>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058f2:	4a04      	ldr	r2, [pc, #16]	; (8005904 <__NVIC_SetPriorityGrouping+0x40>)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	60d3      	str	r3, [r2, #12]
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	e000ed00 	.word	0xe000ed00
 8005908:	05fa0000 	.word	0x05fa0000

0800590c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <__NVIC_GetPriorityGrouping+0x18>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	0a1b      	lsrs	r3, r3, #8
 8005916:	f003 0307 	and.w	r3, r3, #7
}
 800591a:	4618      	mov	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	4603      	mov	r3, r0
 8005930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005936:	2b00      	cmp	r3, #0
 8005938:	db0b      	blt.n	8005952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	f003 021f 	and.w	r2, r3, #31
 8005940:	4907      	ldr	r1, [pc, #28]	; (8005960 <__NVIC_EnableIRQ+0x38>)
 8005942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2001      	movs	r0, #1
 800594a:	fa00 f202 	lsl.w	r2, r0, r2
 800594e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	e000e100 	.word	0xe000e100

08005964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	6039      	str	r1, [r7, #0]
 800596e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005974:	2b00      	cmp	r3, #0
 8005976:	db0a      	blt.n	800598e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	490c      	ldr	r1, [pc, #48]	; (80059b0 <__NVIC_SetPriority+0x4c>)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	0112      	lsls	r2, r2, #4
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	440b      	add	r3, r1
 8005988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800598c:	e00a      	b.n	80059a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	4908      	ldr	r1, [pc, #32]	; (80059b4 <__NVIC_SetPriority+0x50>)
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	3b04      	subs	r3, #4
 800599c:	0112      	lsls	r2, r2, #4
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	440b      	add	r3, r1
 80059a2:	761a      	strb	r2, [r3, #24]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	e000e100 	.word	0xe000e100
 80059b4:	e000ed00 	.word	0xe000ed00

080059b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b089      	sub	sp, #36	; 0x24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f1c3 0307 	rsb	r3, r3, #7
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	bf28      	it	cs
 80059d6:	2304      	movcs	r3, #4
 80059d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3304      	adds	r3, #4
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d902      	bls.n	80059e8 <NVIC_EncodePriority+0x30>
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3b03      	subs	r3, #3
 80059e6:	e000      	b.n	80059ea <NVIC_EncodePriority+0x32>
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43da      	mvns	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	401a      	ands	r2, r3
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a00:	f04f 31ff 	mov.w	r1, #4294967295
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	43d9      	mvns	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a10:	4313      	orrs	r3, r2
         );
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3724      	adds	r7, #36	; 0x24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ff4c 	bl	80058c4 <__NVIC_SetPriorityGrouping>
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a46:	f7ff ff61 	bl	800590c <__NVIC_GetPriorityGrouping>
 8005a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f7ff ffb1 	bl	80059b8 <NVIC_EncodePriority>
 8005a56:	4602      	mov	r2, r0
 8005a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff ff80 	bl	8005964 <__NVIC_SetPriority>
}
 8005a64:	bf00      	nop
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff ff54 	bl	8005928 <__NVIC_EnableIRQ>
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a94:	f7ff fee6 	bl	8005864 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e099      	b.n	8005bd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ac4:	e00f      	b.n	8005ae6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ac6:	f7ff fecd 	bl	8005864 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b05      	cmp	r3, #5
 8005ad2:	d908      	bls.n	8005ae6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2203      	movs	r2, #3
 8005ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e078      	b.n	8005bd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e8      	bne.n	8005ac6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <HAL_DMA_Init+0x158>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d107      	bne.n	8005b50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0307 	bic.w	r3, r3, #7
 8005b66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d117      	bne.n	8005baa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00e      	beq.n	8005baa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb09 	bl	80061a4 <DMA_CheckFifoParam>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e016      	b.n	8005bd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fac0 	bl	8006138 <DMA_CalcBaseAndBitshift>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc0:	223f      	movs	r2, #63	; 0x3f
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	e010803f 	.word	0xe010803f

08005be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_DMA_Start_IT+0x26>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e048      	b.n	8005c9c <HAL_DMA_Start_IT+0xb8>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d137      	bne.n	8005c8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fa52 	bl	80060dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3c:	223f      	movs	r2, #63	; 0x3f
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0216 	orr.w	r2, r2, #22
 8005c52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c62:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0208 	orr.w	r2, r2, #8
 8005c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e005      	b.n	8005c9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
 8005c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005cb2:	f7ff fdd7 	bl	8005864 <HAL_GetTick>
 8005cb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d008      	beq.n	8005cd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2280      	movs	r2, #128	; 0x80
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e052      	b.n	8005d7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0216 	bic.w	r2, r2, #22
 8005ce4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <HAL_DMA_Abort+0x62>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0208 	bic.w	r2, r2, #8
 8005d14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d26:	e013      	b.n	8005d50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d28:	f7ff fd9c 	bl	8005864 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b05      	cmp	r3, #5
 8005d34:	d90c      	bls.n	8005d50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2203      	movs	r2, #3
 8005d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e015      	b.n	8005d7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e4      	bne.n	8005d28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d62:	223f      	movs	r2, #63	; 0x3f
 8005d64:	409a      	lsls	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d004      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e00c      	b.n	8005dbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2205      	movs	r2, #5
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005dd4:	4b8e      	ldr	r3, [pc, #568]	; (8006010 <HAL_DMA_IRQHandler+0x248>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a8e      	ldr	r2, [pc, #568]	; (8006014 <HAL_DMA_IRQHandler+0x24c>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0a9b      	lsrs	r3, r3, #10
 8005de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	2208      	movs	r2, #8
 8005df4:	409a      	lsls	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01a      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d013      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0204 	bic.w	r2, r2, #4
 8005e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e20:	2208      	movs	r2, #8
 8005e22:	409a      	lsls	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2c:	f043 0201 	orr.w	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	2201      	movs	r2, #1
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d012      	beq.n	8005e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e56:	2201      	movs	r2, #1
 8005e58:	409a      	lsls	r2, r3
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e62:	f043 0202 	orr.w	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	2204      	movs	r2, #4
 8005e70:	409a      	lsls	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d012      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	409a      	lsls	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d043      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d03c      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d108      	bne.n	8005ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d024      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
 8005ef6:	e01f      	b.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
 8005f08:	e016      	b.n	8005f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d107      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0208 	bic.w	r2, r2, #8
 8005f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 808f 	beq.w	8006068 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8087 	beq.w	8006068 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5e:	2220      	movs	r2, #32
 8005f60:	409a      	lsls	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d136      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0216 	bic.w	r2, r2, #22
 8005f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <HAL_DMA_IRQHandler+0x1da>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0208 	bic.w	r2, r2, #8
 8005fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb6:	223f      	movs	r2, #63	; 0x3f
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d07e      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
        }
        return;
 8005fde:	e079      	b.n	80060d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01d      	beq.n	800602a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10d      	bne.n	8006018 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	2b00      	cmp	r3, #0
 8006002:	d031      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
 800600c:	e02c      	b.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
 800600e:	bf00      	nop
 8006010:	20000008 	.word	0x20000008
 8006014:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d023      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
 8006028:	e01e      	b.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10f      	bne.n	8006058 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0210 	bic.w	r2, r2, #16
 8006046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	2b00      	cmp	r3, #0
 800606e:	d032      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d022      	beq.n	80060c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2205      	movs	r2, #5
 8006080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	3301      	adds	r3, #1
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	429a      	cmp	r2, r3
 800609e:	d307      	bcc.n	80060b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f2      	bne.n	8006094 <HAL_DMA_IRQHandler+0x2cc>
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80060b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
 80060d2:	e000      	b.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80060d4:	bf00      	nop
    }
  }
}
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d108      	bne.n	800611c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800611a:	e007      	b.n	800612c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	60da      	str	r2, [r3, #12]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	3b10      	subs	r3, #16
 8006148:	4a13      	ldr	r2, [pc, #76]	; (8006198 <DMA_CalcBaseAndBitshift+0x60>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	091b      	lsrs	r3, r3, #4
 8006150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006152:	4a12      	ldr	r2, [pc, #72]	; (800619c <DMA_CalcBaseAndBitshift+0x64>)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b03      	cmp	r3, #3
 8006164:	d908      	bls.n	8006178 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <DMA_CalcBaseAndBitshift+0x68>)
 800616e:	4013      	ands	r3, r2
 8006170:	1d1a      	adds	r2, r3, #4
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	659a      	str	r2, [r3, #88]	; 0x58
 8006176:	e006      	b.n	8006186 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <DMA_CalcBaseAndBitshift+0x68>)
 8006180:	4013      	ands	r3, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	aaaaaaab 	.word	0xaaaaaaab
 800619c:	080156e0 	.word	0x080156e0
 80061a0:	fffffc00 	.word	0xfffffc00

080061a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d11f      	bne.n	80061fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d856      	bhi.n	8006272 <DMA_CheckFifoParam+0xce>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <DMA_CheckFifoParam+0x28>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061ef 	.word	0x080061ef
 80061d4:	080061dd 	.word	0x080061dd
 80061d8:	08006273 	.word	0x08006273
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d046      	beq.n	8006276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ec:	e043      	b.n	8006276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061f6:	d140      	bne.n	800627a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061fc:	e03d      	b.n	800627a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006206:	d121      	bne.n	800624c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d837      	bhi.n	800627e <DMA_CheckFifoParam+0xda>
 800620e:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <DMA_CheckFifoParam+0x70>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006225 	.word	0x08006225
 8006218:	0800622b 	.word	0x0800622b
 800621c:	08006225 	.word	0x08006225
 8006220:	0800623d 	.word	0x0800623d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
      break;
 8006228:	e030      	b.n	800628c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d025      	beq.n	8006282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800623a:	e022      	b.n	8006282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006244:	d11f      	bne.n	8006286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800624a:	e01c      	b.n	8006286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d903      	bls.n	800625a <DMA_CheckFifoParam+0xb6>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d003      	beq.n	8006260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006258:	e018      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
      break;
 800625e:	e015      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00e      	beq.n	800628a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
      break;
 8006270:	e00b      	b.n	800628a <DMA_CheckFifoParam+0xe6>
      break;
 8006272:	bf00      	nop
 8006274:	e00a      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 8006276:	bf00      	nop
 8006278:	e008      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 800627a:	bf00      	nop
 800627c:	e006      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 800627e:	bf00      	nop
 8006280:	e004      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 8006282:	bf00      	nop
 8006284:	e002      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;   
 8006286:	bf00      	nop
 8006288:	e000      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 800628a:	bf00      	nop
    }
  } 
  
  return status; 
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop

0800629c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	; 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80062b2:	2300      	movs	r3, #0
 80062b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	e169      	b.n	8006590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80062bc:	2201      	movs	r2, #1
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4013      	ands	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	f040 8158 	bne.w	800658a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d005      	beq.n	80062f2 <HAL_GPIO_Init+0x56>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d130      	bne.n	8006354 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	2203      	movs	r2, #3
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4013      	ands	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	4313      	orrs	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006328:	2201      	movs	r2, #1
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4013      	ands	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	091b      	lsrs	r3, r3, #4
 800633e:	f003 0201 	and.w	r2, r3, #1
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	4313      	orrs	r3, r2
 800634c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	2b03      	cmp	r3, #3
 800635e:	d017      	beq.n	8006390 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	2203      	movs	r2, #3
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	4313      	orrs	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d123      	bne.n	80063e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	08da      	lsrs	r2, r3, #3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3208      	adds	r2, #8
 80063a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	220f      	movs	r2, #15
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	43db      	mvns	r3, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	4013      	ands	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	08da      	lsrs	r2, r3, #3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3208      	adds	r2, #8
 80063de:	69b9      	ldr	r1, [r7, #24]
 80063e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	2203      	movs	r2, #3
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	4013      	ands	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f003 0203 	and.w	r2, r3, #3
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4313      	orrs	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80b2 	beq.w	800658a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006426:	4b60      	ldr	r3, [pc, #384]	; (80065a8 <HAL_GPIO_Init+0x30c>)
 8006428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642a:	4a5f      	ldr	r2, [pc, #380]	; (80065a8 <HAL_GPIO_Init+0x30c>)
 800642c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006430:	6453      	str	r3, [r2, #68]	; 0x44
 8006432:	4b5d      	ldr	r3, [pc, #372]	; (80065a8 <HAL_GPIO_Init+0x30c>)
 8006434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800643e:	4a5b      	ldr	r2, [pc, #364]	; (80065ac <HAL_GPIO_Init+0x310>)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	3302      	adds	r3, #2
 8006446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800644a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	220f      	movs	r2, #15
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	4013      	ands	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a52      	ldr	r2, [pc, #328]	; (80065b0 <HAL_GPIO_Init+0x314>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d02b      	beq.n	80064c2 <HAL_GPIO_Init+0x226>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a51      	ldr	r2, [pc, #324]	; (80065b4 <HAL_GPIO_Init+0x318>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d025      	beq.n	80064be <HAL_GPIO_Init+0x222>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a50      	ldr	r2, [pc, #320]	; (80065b8 <HAL_GPIO_Init+0x31c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01f      	beq.n	80064ba <HAL_GPIO_Init+0x21e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a4f      	ldr	r2, [pc, #316]	; (80065bc <HAL_GPIO_Init+0x320>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d019      	beq.n	80064b6 <HAL_GPIO_Init+0x21a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a4e      	ldr	r2, [pc, #312]	; (80065c0 <HAL_GPIO_Init+0x324>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_GPIO_Init+0x216>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a4d      	ldr	r2, [pc, #308]	; (80065c4 <HAL_GPIO_Init+0x328>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00d      	beq.n	80064ae <HAL_GPIO_Init+0x212>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a4c      	ldr	r2, [pc, #304]	; (80065c8 <HAL_GPIO_Init+0x32c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <HAL_GPIO_Init+0x20e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a4b      	ldr	r2, [pc, #300]	; (80065cc <HAL_GPIO_Init+0x330>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <HAL_GPIO_Init+0x20a>
 80064a2:	2307      	movs	r3, #7
 80064a4:	e00e      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064a6:	2308      	movs	r3, #8
 80064a8:	e00c      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064aa:	2306      	movs	r3, #6
 80064ac:	e00a      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064ae:	2305      	movs	r3, #5
 80064b0:	e008      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064b2:	2304      	movs	r3, #4
 80064b4:	e006      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064b6:	2303      	movs	r3, #3
 80064b8:	e004      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e002      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064c2:	2300      	movs	r3, #0
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	f002 0203 	and.w	r2, r2, #3
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	4093      	lsls	r3, r2
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80064d4:	4935      	ldr	r1, [pc, #212]	; (80065ac <HAL_GPIO_Init+0x310>)
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	089b      	lsrs	r3, r3, #2
 80064da:	3302      	adds	r3, #2
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064e2:	4b3b      	ldr	r3, [pc, #236]	; (80065d0 <HAL_GPIO_Init+0x334>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	43db      	mvns	r3, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4013      	ands	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006506:	4a32      	ldr	r2, [pc, #200]	; (80065d0 <HAL_GPIO_Init+0x334>)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800650c:	4b30      	ldr	r3, [pc, #192]	; (80065d0 <HAL_GPIO_Init+0x334>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	43db      	mvns	r3, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006530:	4a27      	ldr	r2, [pc, #156]	; (80065d0 <HAL_GPIO_Init+0x334>)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006536:	4b26      	ldr	r3, [pc, #152]	; (80065d0 <HAL_GPIO_Init+0x334>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	43db      	mvns	r3, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4013      	ands	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800655a:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <HAL_GPIO_Init+0x334>)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006560:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <HAL_GPIO_Init+0x334>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	43db      	mvns	r3, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4013      	ands	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006584:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <HAL_GPIO_Init+0x334>)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b0f      	cmp	r3, #15
 8006594:	f67f ae92 	bls.w	80062bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	3724      	adds	r7, #36	; 0x24
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40013800 	.word	0x40013800
 80065b0:	40020000 	.word	0x40020000
 80065b4:	40020400 	.word	0x40020400
 80065b8:	40020800 	.word	0x40020800
 80065bc:	40020c00 	.word	0x40020c00
 80065c0:	40021000 	.word	0x40021000
 80065c4:	40021400 	.word	0x40021400
 80065c8:	40021800 	.word	0x40021800
 80065cc:	40021c00 	.word	0x40021c00
 80065d0:	40013c00 	.word	0x40013c00

080065d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	807b      	strh	r3, [r7, #2]
 80065e0:	4613      	mov	r3, r2
 80065e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065e4:	787b      	ldrb	r3, [r7, #1]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065ea:	887a      	ldrh	r2, [r7, #2]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80065f0:	e003      	b.n	80065fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80065f2:	887b      	ldrh	r3, [r7, #2]
 80065f4:	041a      	lsls	r2, r3, #16
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	619a      	str	r2, [r3, #24]
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
	...

08006608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e07f      	b.n	800671a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fc fe06 	bl	8003240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2224      	movs	r2, #36	; 0x24
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006658:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006668:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800667e:	609a      	str	r2, [r3, #8]
 8006680:	e006      	b.n	8006690 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800668e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d104      	bne.n	80066a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6859      	ldr	r1, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <HAL_I2C_Init+0x11c>)
 80066ae:	430b      	orrs	r3, r1
 80066b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69d9      	ldr	r1, [r3, #28]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1a      	ldr	r2, [r3, #32]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	02008000 	.word	0x02008000

08006728 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4603      	mov	r3, r0
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	460b      	mov	r3, r1
 800673c:	813b      	strh	r3, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b20      	cmp	r3, #32
 800674c:	f040 80f9 	bne.w	8006942 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_I2C_Mem_Write+0x34>
 8006756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006762:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0ed      	b.n	8006944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_I2C_Mem_Write+0x4e>
 8006772:	2302      	movs	r3, #2
 8006774:	e0e6      	b.n	8006944 <HAL_I2C_Mem_Write+0x21c>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800677e:	f7ff f871 	bl	8005864 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	2319      	movs	r3, #25
 800678a:	2201      	movs	r2, #1
 800678c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fac3 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e0d1      	b.n	8006944 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2221      	movs	r2, #33	; 0x21
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2240      	movs	r2, #64	; 0x40
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a3a      	ldr	r2, [r7, #32]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067c8:	88f8      	ldrh	r0, [r7, #6]
 80067ca:	893a      	ldrh	r2, [r7, #8]
 80067cc:	8979      	ldrh	r1, [r7, #10]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4603      	mov	r3, r0
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f9d3 	bl	8006b84 <I2C_RequestMemoryWrite>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e0a9      	b.n	8006944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2bff      	cmp	r3, #255	; 0xff
 80067f8:	d90e      	bls.n	8006818 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	22ff      	movs	r2, #255	; 0xff
 80067fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006804:	b2da      	uxtb	r2, r3
 8006806:	8979      	ldrh	r1, [r7, #10]
 8006808:	2300      	movs	r3, #0
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fc1f 	bl	8007054 <I2C_TransferConfig>
 8006816:	e00f      	b.n	8006838 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006826:	b2da      	uxtb	r2, r3
 8006828:	8979      	ldrh	r1, [r7, #10]
 800682a:	2300      	movs	r3, #0
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fc0e 	bl	8007054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 faad 	bl	8006d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e07b      	b.n	8006944 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d034      	beq.n	80068f0 <HAL_I2C_Mem_Write+0x1c8>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	d130      	bne.n	80068f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	2200      	movs	r2, #0
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fa3f 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e04d      	b.n	8006944 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	d90e      	bls.n	80068d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	22ff      	movs	r2, #255	; 0xff
 80068b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	8979      	ldrh	r1, [r7, #10]
 80068c0:	2300      	movs	r3, #0
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fbc3 	bl	8007054 <I2C_TransferConfig>
 80068ce:	e00f      	b.n	80068f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	8979      	ldrh	r1, [r7, #10]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fbb2 	bl	8007054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d19e      	bne.n	8006838 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fa8c 	bl	8006e1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e01a      	b.n	8006944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2220      	movs	r2, #32
 8006914:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6859      	ldr	r1, [r3, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b0a      	ldr	r3, [pc, #40]	; (800694c <HAL_I2C_Mem_Write+0x224>)
 8006922:	400b      	ands	r3, r1
 8006924:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e000      	b.n	8006944 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006942:	2302      	movs	r3, #2
  }
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	fe00e800 	.word	0xfe00e800

08006950 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	4608      	mov	r0, r1
 800695a:	4611      	mov	r1, r2
 800695c:	461a      	mov	r2, r3
 800695e:	4603      	mov	r3, r0
 8006960:	817b      	strh	r3, [r7, #10]
 8006962:	460b      	mov	r3, r1
 8006964:	813b      	strh	r3, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b20      	cmp	r3, #32
 8006974:	f040 80fd 	bne.w	8006b72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_I2C_Mem_Read+0x34>
 800697e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0f1      	b.n	8006b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_I2C_Mem_Read+0x4e>
 800699a:	2302      	movs	r3, #2
 800699c:	e0ea      	b.n	8006b74 <HAL_I2C_Mem_Read+0x224>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069a6:	f7fe ff5d 	bl	8005864 <HAL_GetTick>
 80069aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	2319      	movs	r3, #25
 80069b2:	2201      	movs	r2, #1
 80069b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f9af 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0d5      	b.n	8006b74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2222      	movs	r2, #34	; 0x22
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2240      	movs	r2, #64	; 0x40
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a3a      	ldr	r2, [r7, #32]
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069f0:	88f8      	ldrh	r0, [r7, #6]
 80069f2:	893a      	ldrh	r2, [r7, #8]
 80069f4:	8979      	ldrh	r1, [r7, #10]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	4603      	mov	r3, r0
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f913 	bl	8006c2c <I2C_RequestMemoryRead>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0ad      	b.n	8006b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2bff      	cmp	r3, #255	; 0xff
 8006a20:	d90e      	bls.n	8006a40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	22ff      	movs	r2, #255	; 0xff
 8006a26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	8979      	ldrh	r1, [r7, #10]
 8006a30:	4b52      	ldr	r3, [pc, #328]	; (8006b7c <HAL_I2C_Mem_Read+0x22c>)
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 fb0b 	bl	8007054 <I2C_TransferConfig>
 8006a3e:	e00f      	b.n	8006a60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	8979      	ldrh	r1, [r7, #10]
 8006a52:	4b4a      	ldr	r3, [pc, #296]	; (8006b7c <HAL_I2C_Mem_Read+0x22c>)
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fafa 	bl	8007054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2200      	movs	r2, #0
 8006a68:	2104      	movs	r1, #4
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f956 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e07c      	b.n	8006b74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d034      	beq.n	8006b20 <HAL_I2C_Mem_Read+0x1d0>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d130      	bne.n	8006b20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2180      	movs	r1, #128	; 0x80
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f927 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e04d      	b.n	8006b74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2bff      	cmp	r3, #255	; 0xff
 8006ae0:	d90e      	bls.n	8006b00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	22ff      	movs	r2, #255	; 0xff
 8006ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	8979      	ldrh	r1, [r7, #10]
 8006af0:	2300      	movs	r3, #0
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 faab 	bl	8007054 <I2C_TransferConfig>
 8006afe:	e00f      	b.n	8006b20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	8979      	ldrh	r1, [r7, #10]
 8006b12:	2300      	movs	r3, #0
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fa9a 	bl	8007054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d19a      	bne.n	8006a60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f974 	bl	8006e1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e01a      	b.n	8006b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2220      	movs	r2, #32
 8006b44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6859      	ldr	r1, [r3, #4]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <HAL_I2C_Mem_Read+0x230>)
 8006b52:	400b      	ands	r3, r1
 8006b54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e000      	b.n	8006b74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b72:	2302      	movs	r3, #2
  }
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	80002400 	.word	0x80002400
 8006b80:	fe00e800 	.word	0xfe00e800

08006b84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	817b      	strh	r3, [r7, #10]
 8006b96:	460b      	mov	r3, r1
 8006b98:	813b      	strh	r3, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	8979      	ldrh	r1, [r7, #10]
 8006ba4:	4b20      	ldr	r3, [pc, #128]	; (8006c28 <I2C_RequestMemoryWrite+0xa4>)
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fa51 	bl	8007054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	69b9      	ldr	r1, [r7, #24]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f8f0 	bl	8006d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e02c      	b.n	8006c20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d105      	bne.n	8006bd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bcc:	893b      	ldrh	r3, [r7, #8]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
 8006bd6:	e015      	b.n	8006c04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bd8:	893b      	ldrh	r3, [r7, #8]
 8006bda:	0a1b      	lsrs	r3, r3, #8
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	69b9      	ldr	r1, [r7, #24]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f8d6 	bl	8006d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e012      	b.n	8006c20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bfa:	893b      	ldrh	r3, [r7, #8]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2180      	movs	r1, #128	; 0x80
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f884 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	80002000 	.word	0x80002000

08006c2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	817b      	strh	r3, [r7, #10]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	813b      	strh	r3, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	8979      	ldrh	r1, [r7, #10]
 8006c4c:	4b20      	ldr	r3, [pc, #128]	; (8006cd0 <I2C_RequestMemoryRead+0xa4>)
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2300      	movs	r3, #0
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f9fe 	bl	8007054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	69b9      	ldr	r1, [r7, #24]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f89d 	bl	8006d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e02c      	b.n	8006cc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d105      	bne.n	8006c7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c72:	893b      	ldrh	r3, [r7, #8]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c7c:	e015      	b.n	8006caa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c7e:	893b      	ldrh	r3, [r7, #8]
 8006c80:	0a1b      	lsrs	r3, r3, #8
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	69b9      	ldr	r1, [r7, #24]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f883 	bl	8006d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e012      	b.n	8006cc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca0:	893b      	ldrh	r3, [r7, #8]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2140      	movs	r1, #64	; 0x40
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f831 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	80002000 	.word	0x80002000

08006cd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d103      	bne.n	8006cf2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d007      	beq.n	8006d10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0201 	orr.w	r2, r2, #1
 8006d0e:	619a      	str	r2, [r3, #24]
  }
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d2c:	e022      	b.n	8006d74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d01e      	beq.n	8006d74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d36:	f7fe fd95 	bl	8005864 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d302      	bcc.n	8006d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d113      	bne.n	8006d74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d50:	f043 0220 	orr.w	r2, r3, #32
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e00f      	b.n	8006d94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d0cd      	beq.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006da8:	e02c      	b.n	8006e04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f870 	bl	8006e94 <I2C_IsErrorOccurred>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e02a      	b.n	8006e14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d01e      	beq.n	8006e04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc6:	f7fe fd4d 	bl	8005864 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d302      	bcc.n	8006ddc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d113      	bne.n	8006e04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de0:	f043 0220 	orr.w	r2, r3, #32
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e007      	b.n	8006e14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d1cb      	bne.n	8006daa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e28:	e028      	b.n	8006e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f830 	bl	8006e94 <I2C_IsErrorOccurred>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e026      	b.n	8006e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3e:	f7fe fd11 	bl	8005864 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d113      	bne.n	8006e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e58:	f043 0220 	orr.w	r2, r3, #32
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e007      	b.n	8006e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d1cf      	bne.n	8006e2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d068      	beq.n	8006f92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ec8:	e049      	b.n	8006f5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d045      	beq.n	8006f5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ed2:	f7fe fcc7 	bl	8005864 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d302      	bcc.n	8006ee8 <I2C_IsErrorOccurred+0x54>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d13a      	bne.n	8006f5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006efa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0a:	d121      	bne.n	8006f50 <I2C_IsErrorOccurred+0xbc>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f12:	d01d      	beq.n	8006f50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f14:	7cfb      	ldrb	r3, [r7, #19]
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d01a      	beq.n	8006f50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f2a:	f7fe fc9b 	bl	8005864 <HAL_GetTick>
 8006f2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f30:	e00e      	b.n	8006f50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f32:	f7fe fc97 	bl	8005864 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b19      	cmp	r3, #25
 8006f3e:	d907      	bls.n	8006f50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	f043 0320 	orr.w	r3, r3, #32
 8006f46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f4e:	e006      	b.n	8006f5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d1e9      	bne.n	8006f32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d003      	beq.n	8006f74 <I2C_IsErrorOccurred+0xe0>
 8006f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0aa      	beq.n	8006eca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d103      	bne.n	8006f84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2220      	movs	r2, #32
 8006f82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f043 0304 	orr.w	r3, r3, #4
 8006f8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f043 0308 	orr.w	r3, r3, #8
 8006fcc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	f043 0302 	orr.w	r3, r3, #2
 8006fee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ff8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01c      	beq.n	8007042 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff fe63 	bl	8006cd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <I2C_IsErrorOccurred+0x1bc>)
 800701a:	400b      	ands	r3, r1
 800701c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	431a      	orrs	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007046:	4618      	mov	r0, r3
 8007048:	3728      	adds	r7, #40	; 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	fe00e800 	.word	0xfe00e800

08007054 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	817b      	strh	r3, [r7, #10]
 8007062:	4613      	mov	r3, r2
 8007064:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800706c:	7a7b      	ldrb	r3, [r7, #9]
 800706e:	041b      	lsls	r3, r3, #16
 8007070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007074:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	4313      	orrs	r3, r2
 800707e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007082:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	0d5b      	lsrs	r3, r3, #21
 800708e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007092:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <I2C_TransferConfig+0x60>)
 8007094:	430b      	orrs	r3, r1
 8007096:	43db      	mvns	r3, r3
 8007098:	ea02 0103 	and.w	r1, r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	03ff63ff 	.word	0x03ff63ff

080070b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d138      	bne.n	8007140 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070d8:	2302      	movs	r3, #2
 80070da:	e032      	b.n	8007142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2224      	movs	r2, #36	; 0x24
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800710a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b20      	cmp	r3, #32
 8007162:	d139      	bne.n	80071d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800716e:	2302      	movs	r3, #2
 8007170:	e033      	b.n	80071da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	; 0x24
 800717e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	e000      	b.n	80071da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071d8:	2302      	movs	r3, #2
  }
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80071f2:	4b23      	ldr	r3, [pc, #140]	; (8007280 <HAL_PWREx_EnableOverDrive+0x98>)
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	4a22      	ldr	r2, [pc, #136]	; (8007280 <HAL_PWREx_EnableOverDrive+0x98>)
 80071f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071fc:	6413      	str	r3, [r2, #64]	; 0x40
 80071fe:	4b20      	ldr	r3, [pc, #128]	; (8007280 <HAL_PWREx_EnableOverDrive+0x98>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800720a:	4b1e      	ldr	r3, [pc, #120]	; (8007284 <HAL_PWREx_EnableOverDrive+0x9c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007214:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007216:	f7fe fb25 	bl	8005864 <HAL_GetTick>
 800721a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800721c:	e009      	b.n	8007232 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800721e:	f7fe fb21 	bl	8005864 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800722c:	d901      	bls.n	8007232 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e022      	b.n	8007278 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007232:	4b14      	ldr	r3, [pc, #80]	; (8007284 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800723a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723e:	d1ee      	bne.n	800721e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007240:	4b10      	ldr	r3, [pc, #64]	; (8007284 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a0f      	ldr	r2, [pc, #60]	; (8007284 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800724c:	f7fe fb0a 	bl	8005864 <HAL_GetTick>
 8007250:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007252:	e009      	b.n	8007268 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007254:	f7fe fb06 	bl	8005864 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007262:	d901      	bls.n	8007268 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e007      	b.n	8007278 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <HAL_PWREx_EnableOverDrive+0x9c>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007274:	d1ee      	bne.n	8007254 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40023800 	.word	0x40023800
 8007284:	40007000 	.word	0x40007000

08007288 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007290:	2300      	movs	r3, #0
 8007292:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e291      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 8087 	beq.w	80073ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072ac:	4b96      	ldr	r3, [pc, #600]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 030c 	and.w	r3, r3, #12
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d00c      	beq.n	80072d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072b8:	4b93      	ldr	r3, [pc, #588]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 030c 	and.w	r3, r3, #12
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d112      	bne.n	80072ea <HAL_RCC_OscConfig+0x62>
 80072c4:	4b90      	ldr	r3, [pc, #576]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072d0:	d10b      	bne.n	80072ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d2:	4b8d      	ldr	r3, [pc, #564]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d06c      	beq.n	80073b8 <HAL_RCC_OscConfig+0x130>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d168      	bne.n	80073b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e26b      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f2:	d106      	bne.n	8007302 <HAL_RCC_OscConfig+0x7a>
 80072f4:	4b84      	ldr	r3, [pc, #528]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a83      	ldr	r2, [pc, #524]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80072fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	e02e      	b.n	8007360 <HAL_RCC_OscConfig+0xd8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10c      	bne.n	8007324 <HAL_RCC_OscConfig+0x9c>
 800730a:	4b7f      	ldr	r3, [pc, #508]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a7e      	ldr	r2, [pc, #504]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4b7c      	ldr	r3, [pc, #496]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7b      	ldr	r2, [pc, #492]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 800731c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e01d      	b.n	8007360 <HAL_RCC_OscConfig+0xd8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800732c:	d10c      	bne.n	8007348 <HAL_RCC_OscConfig+0xc0>
 800732e:	4b76      	ldr	r3, [pc, #472]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a75      	ldr	r2, [pc, #468]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	4b73      	ldr	r3, [pc, #460]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a72      	ldr	r2, [pc, #456]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e00b      	b.n	8007360 <HAL_RCC_OscConfig+0xd8>
 8007348:	4b6f      	ldr	r3, [pc, #444]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a6e      	ldr	r2, [pc, #440]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 800734e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	4b6c      	ldr	r3, [pc, #432]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a6b      	ldr	r2, [pc, #428]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 800735a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800735e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d013      	beq.n	8007390 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fe fa7c 	bl	8005864 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007370:	f7fe fa78 	bl	8005864 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b64      	cmp	r3, #100	; 0x64
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e21f      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007382:	4b61      	ldr	r3, [pc, #388]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0xe8>
 800738e:	e014      	b.n	80073ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fe fa68 	bl	8005864 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007398:	f7fe fa64 	bl	8005864 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b64      	cmp	r3, #100	; 0x64
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e20b      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073aa:	4b57      	ldr	r3, [pc, #348]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f0      	bne.n	8007398 <HAL_RCC_OscConfig+0x110>
 80073b6:	e000      	b.n	80073ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d069      	beq.n	800749a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073c6:	4b50      	ldr	r3, [pc, #320]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 030c 	and.w	r3, r3, #12
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073d2:	4b4d      	ldr	r3, [pc, #308]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f003 030c 	and.w	r3, r3, #12
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d11c      	bne.n	8007418 <HAL_RCC_OscConfig+0x190>
 80073de:	4b4a      	ldr	r3, [pc, #296]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d116      	bne.n	8007418 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ea:	4b47      	ldr	r3, [pc, #284]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_RCC_OscConfig+0x17a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d001      	beq.n	8007402 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e1df      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007402:	4b41      	ldr	r3, [pc, #260]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	493d      	ldr	r1, [pc, #244]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007412:	4313      	orrs	r3, r2
 8007414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007416:	e040      	b.n	800749a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d023      	beq.n	8007468 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007420:	4b39      	ldr	r3, [pc, #228]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a38      	ldr	r2, [pc, #224]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007426:	f043 0301 	orr.w	r3, r3, #1
 800742a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fe fa1a 	bl	8005864 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007434:	f7fe fa16 	bl	8005864 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e1bd      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007446:	4b30      	ldr	r3, [pc, #192]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f0      	beq.n	8007434 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007452:	4b2d      	ldr	r3, [pc, #180]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4929      	ldr	r1, [pc, #164]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007462:	4313      	orrs	r3, r2
 8007464:	600b      	str	r3, [r1, #0]
 8007466:	e018      	b.n	800749a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007468:	4b27      	ldr	r3, [pc, #156]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a26      	ldr	r2, [pc, #152]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fe f9f6 	bl	8005864 <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800747c:	f7fe f9f2 	bl	8005864 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e199      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800748e:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f0      	bne.n	800747c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d038      	beq.n	8007518 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d019      	beq.n	80074e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ae:	4b16      	ldr	r3, [pc, #88]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80074b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b2:	4a15      	ldr	r2, [pc, #84]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ba:	f7fe f9d3 	bl	8005864 <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074c2:	f7fe f9cf 	bl	8005864 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e176      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074d4:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80074d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_OscConfig+0x23a>
 80074e0:	e01a      	b.n	8007518 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074e2:	4b09      	ldr	r3, [pc, #36]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80074e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e6:	4a08      	ldr	r2, [pc, #32]	; (8007508 <HAL_RCC_OscConfig+0x280>)
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ee:	f7fe f9b9 	bl	8005864 <HAL_GetTick>
 80074f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f4:	e00a      	b.n	800750c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074f6:	f7fe f9b5 	bl	8005864 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d903      	bls.n	800750c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e15c      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
 8007508:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800750c:	4b91      	ldr	r3, [pc, #580]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 800750e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1ee      	bne.n	80074f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 80a4 	beq.w	800766e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007526:	4b8b      	ldr	r3, [pc, #556]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10d      	bne.n	800754e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007532:	4b88      	ldr	r3, [pc, #544]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	4a87      	ldr	r2, [pc, #540]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800753c:	6413      	str	r3, [r2, #64]	; 0x40
 800753e:	4b85      	ldr	r3, [pc, #532]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007546:	60bb      	str	r3, [r7, #8]
 8007548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800754e:	4b82      	ldr	r3, [pc, #520]	; (8007758 <HAL_RCC_OscConfig+0x4d0>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007556:	2b00      	cmp	r3, #0
 8007558:	d118      	bne.n	800758c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800755a:	4b7f      	ldr	r3, [pc, #508]	; (8007758 <HAL_RCC_OscConfig+0x4d0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a7e      	ldr	r2, [pc, #504]	; (8007758 <HAL_RCC_OscConfig+0x4d0>)
 8007560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007566:	f7fe f97d 	bl	8005864 <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800756c:	e008      	b.n	8007580 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800756e:	f7fe f979 	bl	8005864 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b64      	cmp	r3, #100	; 0x64
 800757a:	d901      	bls.n	8007580 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e120      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007580:	4b75      	ldr	r3, [pc, #468]	; (8007758 <HAL_RCC_OscConfig+0x4d0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0f0      	beq.n	800756e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d106      	bne.n	80075a2 <HAL_RCC_OscConfig+0x31a>
 8007594:	4b6f      	ldr	r3, [pc, #444]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	4a6e      	ldr	r2, [pc, #440]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	6713      	str	r3, [r2, #112]	; 0x70
 80075a0:	e02d      	b.n	80075fe <HAL_RCC_OscConfig+0x376>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x33c>
 80075aa:	4b6a      	ldr	r3, [pc, #424]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a69      	ldr	r2, [pc, #420]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70
 80075b6:	4b67      	ldr	r3, [pc, #412]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	4a66      	ldr	r2, [pc, #408]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075bc:	f023 0304 	bic.w	r3, r3, #4
 80075c0:	6713      	str	r3, [r2, #112]	; 0x70
 80075c2:	e01c      	b.n	80075fe <HAL_RCC_OscConfig+0x376>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b05      	cmp	r3, #5
 80075ca:	d10c      	bne.n	80075e6 <HAL_RCC_OscConfig+0x35e>
 80075cc:	4b61      	ldr	r3, [pc, #388]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d0:	4a60      	ldr	r2, [pc, #384]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075d2:	f043 0304 	orr.w	r3, r3, #4
 80075d6:	6713      	str	r3, [r2, #112]	; 0x70
 80075d8:	4b5e      	ldr	r3, [pc, #376]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	4a5d      	ldr	r2, [pc, #372]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	6713      	str	r3, [r2, #112]	; 0x70
 80075e4:	e00b      	b.n	80075fe <HAL_RCC_OscConfig+0x376>
 80075e6:	4b5b      	ldr	r3, [pc, #364]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	4a5a      	ldr	r2, [pc, #360]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	6713      	str	r3, [r2, #112]	; 0x70
 80075f2:	4b58      	ldr	r3, [pc, #352]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	4a57      	ldr	r2, [pc, #348]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80075f8:	f023 0304 	bic.w	r3, r3, #4
 80075fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d015      	beq.n	8007632 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007606:	f7fe f92d 	bl	8005864 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800760c:	e00a      	b.n	8007624 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800760e:	f7fe f929 	bl	8005864 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	f241 3288 	movw	r2, #5000	; 0x1388
 800761c:	4293      	cmp	r3, r2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e0ce      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007624:	4b4b      	ldr	r3, [pc, #300]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0ee      	beq.n	800760e <HAL_RCC_OscConfig+0x386>
 8007630:	e014      	b.n	800765c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007632:	f7fe f917 	bl	8005864 <HAL_GetTick>
 8007636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007638:	e00a      	b.n	8007650 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800763a:	f7fe f913 	bl	8005864 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	f241 3288 	movw	r2, #5000	; 0x1388
 8007648:	4293      	cmp	r3, r2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e0b8      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007650:	4b40      	ldr	r3, [pc, #256]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1ee      	bne.n	800763a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d105      	bne.n	800766e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007662:	4b3c      	ldr	r3, [pc, #240]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	4a3b      	ldr	r2, [pc, #236]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800766c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80a4 	beq.w	80077c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007678:	4b36      	ldr	r3, [pc, #216]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 030c 	and.w	r3, r3, #12
 8007680:	2b08      	cmp	r3, #8
 8007682:	d06b      	beq.n	800775c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d149      	bne.n	8007720 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800768c:	4b31      	ldr	r3, [pc, #196]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a30      	ldr	r2, [pc, #192]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007698:	f7fe f8e4 	bl	8005864 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076a0:	f7fe f8e0 	bl	8005864 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e087      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076b2:	4b28      	ldr	r3, [pc, #160]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69da      	ldr	r2, [r3, #28]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	019b      	lsls	r3, r3, #6
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	3b01      	subs	r3, #1
 80076d8:	041b      	lsls	r3, r3, #16
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	061b      	lsls	r3, r3, #24
 80076e2:	4313      	orrs	r3, r2
 80076e4:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80076e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076ec:	4b19      	ldr	r3, [pc, #100]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a18      	ldr	r2, [pc, #96]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 80076f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f8:	f7fe f8b4 	bl	8005864 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007700:	f7fe f8b0 	bl	8005864 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e057      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0x478>
 800771e:	e04f      	b.n	80077c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007720:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a0b      	ldr	r2, [pc, #44]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800772a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772c:	f7fe f89a 	bl	8005864 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007734:	f7fe f896 	bl	8005864 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e03d      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007746:	4b03      	ldr	r3, [pc, #12]	; (8007754 <HAL_RCC_OscConfig+0x4cc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f0      	bne.n	8007734 <HAL_RCC_OscConfig+0x4ac>
 8007752:	e035      	b.n	80077c0 <HAL_RCC_OscConfig+0x538>
 8007754:	40023800 	.word	0x40023800
 8007758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800775c:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <HAL_RCC_OscConfig+0x544>)
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d028      	beq.n	80077bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007774:	429a      	cmp	r2, r3
 8007776:	d121      	bne.n	80077bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007782:	429a      	cmp	r2, r3
 8007784:	d11a      	bne.n	80077bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800778c:	4013      	ands	r3, r2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007792:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007794:	4293      	cmp	r3, r2
 8007796:	d111      	bne.n	80077bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	3b01      	subs	r3, #1
 80077a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d107      	bne.n	80077bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d001      	beq.n	80077c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40023800 	.word	0x40023800

080077d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0d0      	b.n	800798a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077e8:	4b6a      	ldr	r3, [pc, #424]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 030f 	and.w	r3, r3, #15
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d910      	bls.n	8007818 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f6:	4b67      	ldr	r3, [pc, #412]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f023 020f 	bic.w	r2, r3, #15
 80077fe:	4965      	ldr	r1, [pc, #404]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	4313      	orrs	r3, r2
 8007804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007806:	4b63      	ldr	r3, [pc, #396]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d001      	beq.n	8007818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0b8      	b.n	800798a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d020      	beq.n	8007866 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007830:	4b59      	ldr	r3, [pc, #356]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4a58      	ldr	r2, [pc, #352]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800783a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007848:	4b53      	ldr	r3, [pc, #332]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	4a52      	ldr	r2, [pc, #328]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 800784e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007852:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007854:	4b50      	ldr	r3, [pc, #320]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	494d      	ldr	r1, [pc, #308]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007862:	4313      	orrs	r3, r2
 8007864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d040      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787a:	4b47      	ldr	r3, [pc, #284]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d115      	bne.n	80078b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e07f      	b.n	800798a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d107      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007892:	4b41      	ldr	r3, [pc, #260]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d109      	bne.n	80078b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e073      	b.n	800798a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078a2:	4b3d      	ldr	r3, [pc, #244]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e06b      	b.n	800798a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078b2:	4b39      	ldr	r3, [pc, #228]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f023 0203 	bic.w	r2, r3, #3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4936      	ldr	r1, [pc, #216]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c4:	f7fd ffce 	bl	8005864 <HAL_GetTick>
 80078c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ca:	e00a      	b.n	80078e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078cc:	f7fd ffca 	bl	8005864 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078da:	4293      	cmp	r3, r2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e053      	b.n	800798a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e2:	4b2d      	ldr	r3, [pc, #180]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 020c 	and.w	r2, r3, #12
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d1eb      	bne.n	80078cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078f4:	4b27      	ldr	r3, [pc, #156]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 030f 	and.w	r3, r3, #15
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d210      	bcs.n	8007924 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007902:	4b24      	ldr	r3, [pc, #144]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f023 020f 	bic.w	r2, r3, #15
 800790a:	4922      	ldr	r1, [pc, #136]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	4313      	orrs	r3, r2
 8007910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007912:	4b20      	ldr	r3, [pc, #128]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d001      	beq.n	8007924 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e032      	b.n	800798a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007930:	4b19      	ldr	r3, [pc, #100]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	4916      	ldr	r1, [pc, #88]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 800793e:	4313      	orrs	r3, r2
 8007940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d009      	beq.n	8007962 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	490e      	ldr	r1, [pc, #56]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 800795e:	4313      	orrs	r3, r2
 8007960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007962:	f000 f821 	bl	80079a8 <HAL_RCC_GetSysClockFreq>
 8007966:	4602      	mov	r2, r0
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	091b      	lsrs	r3, r3, #4
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	490a      	ldr	r1, [pc, #40]	; (800799c <HAL_RCC_ClockConfig+0x1cc>)
 8007974:	5ccb      	ldrb	r3, [r1, r3]
 8007976:	fa22 f303 	lsr.w	r3, r2, r3
 800797a:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <HAL_RCC_ClockConfig+0x1d0>)
 800797c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800797e:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <HAL_RCC_ClockConfig+0x1d4>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f7fb ff04 	bl	8003790 <HAL_InitTick>

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	40023c00 	.word	0x40023c00
 8007998:	40023800 	.word	0x40023800
 800799c:	080156c8 	.word	0x080156c8
 80079a0:	20000008 	.word	0x20000008
 80079a4:	2000000c 	.word	0x2000000c

080079a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079ac:	b090      	sub	sp, #64	; 0x40
 80079ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
 80079b4:	2300      	movs	r3, #0
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b8:	2300      	movs	r3, #0
 80079ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079c0:	4b59      	ldr	r3, [pc, #356]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 030c 	and.w	r3, r3, #12
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d00d      	beq.n	80079e8 <HAL_RCC_GetSysClockFreq+0x40>
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	f200 80a1 	bhi.w	8007b14 <HAL_RCC_GetSysClockFreq+0x16c>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_RCC_GetSysClockFreq+0x34>
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d003      	beq.n	80079e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80079da:	e09b      	b.n	8007b14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079dc:	4b53      	ldr	r3, [pc, #332]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x184>)
 80079de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079e0:	e09b      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079e2:	4b53      	ldr	r3, [pc, #332]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x188>)
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079e6:	e098      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079e8:	4b4f      	ldr	r3, [pc, #316]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079f2:	4b4d      	ldr	r3, [pc, #308]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d028      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079fe:	4b4a      	ldr	r3, [pc, #296]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	099b      	lsrs	r3, r3, #6
 8007a04:	2200      	movs	r2, #0
 8007a06:	623b      	str	r3, [r7, #32]
 8007a08:	627a      	str	r2, [r7, #36]	; 0x24
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a10:	2100      	movs	r1, #0
 8007a12:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a14:	fb03 f201 	mul.w	r2, r3, r1
 8007a18:	2300      	movs	r3, #0
 8007a1a:	fb00 f303 	mul.w	r3, r0, r3
 8007a1e:	4413      	add	r3, r2
 8007a20:	4a43      	ldr	r2, [pc, #268]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a22:	fba0 1202 	umull	r1, r2, r0, r2
 8007a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a28:	460a      	mov	r2, r1
 8007a2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a2e:	4413      	add	r3, r2
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a34:	2200      	movs	r2, #0
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	61fa      	str	r2, [r7, #28]
 8007a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a42:	f7f9 f999 	bl	8000d78 <__aeabi_uldivmod>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4e:	e053      	b.n	8007af8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a50:	4b35      	ldr	r3, [pc, #212]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	099b      	lsrs	r3, r3, #6
 8007a56:	2200      	movs	r2, #0
 8007a58:	613b      	str	r3, [r7, #16]
 8007a5a:	617a      	str	r2, [r7, #20]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a62:	f04f 0b00 	mov.w	fp, #0
 8007a66:	4652      	mov	r2, sl
 8007a68:	465b      	mov	r3, fp
 8007a6a:	f04f 0000 	mov.w	r0, #0
 8007a6e:	f04f 0100 	mov.w	r1, #0
 8007a72:	0159      	lsls	r1, r3, #5
 8007a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a78:	0150      	lsls	r0, r2, #5
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	ebb2 080a 	subs.w	r8, r2, sl
 8007a82:	eb63 090b 	sbc.w	r9, r3, fp
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a9a:	ebb2 0408 	subs.w	r4, r2, r8
 8007a9e:	eb63 0509 	sbc.w	r5, r3, r9
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	00eb      	lsls	r3, r5, #3
 8007aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ab0:	00e2      	lsls	r2, r4, #3
 8007ab2:	4614      	mov	r4, r2
 8007ab4:	461d      	mov	r5, r3
 8007ab6:	eb14 030a 	adds.w	r3, r4, sl
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	eb45 030b 	adc.w	r3, r5, fp
 8007ac0:	607b      	str	r3, [r7, #4]
 8007ac2:	f04f 0200 	mov.w	r2, #0
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ace:	4629      	mov	r1, r5
 8007ad0:	028b      	lsls	r3, r1, #10
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ad8:	4621      	mov	r1, r4
 8007ada:	028a      	lsls	r2, r1, #10
 8007adc:	4610      	mov	r0, r2
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	60fa      	str	r2, [r7, #12]
 8007ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007aec:	f7f9 f944 	bl	8000d78 <__aeabi_uldivmod>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4613      	mov	r3, r2
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	3301      	adds	r3, #1
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b12:	e002      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b14:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x184>)
 8007b16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3740      	adds	r7, #64	; 0x40
 8007b20:	46bd      	mov	sp, r7
 8007b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b26:	bf00      	nop
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	00f42400 	.word	0x00f42400
 8007b30:	017d7840 	.word	0x017d7840

08007b34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b38:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000008 	.word	0x20000008

08007b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b50:	f7ff fff0 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8007b54:	4602      	mov	r2, r0
 8007b56:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	0a9b      	lsrs	r3, r3, #10
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	4903      	ldr	r1, [pc, #12]	; (8007b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b62:	5ccb      	ldrb	r3, [r1, r3]
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	080156d8 	.word	0x080156d8

08007b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b78:	f7ff ffdc 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	0b5b      	lsrs	r3, r3, #13
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	4903      	ldr	r1, [pc, #12]	; (8007b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b8a:	5ccb      	ldrb	r3, [r1, r3]
 8007b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40023800 	.word	0x40023800
 8007b98:	080156d8 	.word	0x080156d8

08007b9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	220f      	movs	r2, #15
 8007baa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bac:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 0203 	and.w	r2, r3, #3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bb8:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007bd0:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	08db      	lsrs	r3, r3, #3
 8007bd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bde:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <HAL_RCC_GetClockConfig+0x60>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 020f 	and.w	r2, r3, #15
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	601a      	str	r2, [r3, #0]
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	40023c00 	.word	0x40023c00

08007c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d012      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c24:	4b65      	ldr	r3, [pc, #404]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	4a64      	ldr	r2, [pc, #400]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c2e:	6093      	str	r3, [r2, #8]
 8007c30:	4b62      	ldr	r3, [pc, #392]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	4960      	ldr	r1, [pc, #384]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007c46:	2301      	movs	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d017      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c56:	4b59      	ldr	r3, [pc, #356]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c64:	4955      	ldr	r1, [pc, #340]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c74:	d101      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8007c76:	2301      	movs	r3, #1
 8007c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d017      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c92:	4b4a      	ldr	r3, [pc, #296]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	4946      	ldr	r1, [pc, #280]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cb0:	d101      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 808b 	beq.w	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cd0:	4b3a      	ldr	r3, [pc, #232]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	4a39      	ldr	r2, [pc, #228]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cda:	6413      	str	r3, [r2, #64]	; 0x40
 8007cdc:	4b37      	ldr	r3, [pc, #220]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ce8:	4b35      	ldr	r3, [pc, #212]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a34      	ldr	r2, [pc, #208]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf4:	f7fd fdb6 	bl	8005864 <HAL_GetTick>
 8007cf8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cfc:	f7fd fdb2 	bl	8005864 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b64      	cmp	r3, #100	; 0x64
 8007d08:	d901      	bls.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e2bc      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d0e:	4b2c      	ldr	r3, [pc, #176]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0f0      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d1a:	4b28      	ldr	r3, [pc, #160]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d035      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d02e      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d38:	4b20      	ldr	r3, [pc, #128]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d42:	4b1e      	ldr	r3, [pc, #120]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d46:	4a1d      	ldr	r2, [pc, #116]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d4e:	4b1b      	ldr	r3, [pc, #108]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	4a1a      	ldr	r2, [pc, #104]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d5a:	4a18      	ldr	r2, [pc, #96]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d60:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d114      	bne.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6c:	f7fd fd7a 	bl	8005864 <HAL_GetTick>
 8007d70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d72:	e00a      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d74:	f7fd fd76 	bl	8005864 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e27e      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0ee      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da2:	d111      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8007da4:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007db2:	400b      	ands	r3, r1
 8007db4:	4901      	ldr	r1, [pc, #4]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	608b      	str	r3, [r1, #8]
 8007dba:	e00b      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007dbc:	40023800 	.word	0x40023800
 8007dc0:	40007000 	.word	0x40007000
 8007dc4:	0ffffcff 	.word	0x0ffffcff
 8007dc8:	4ba4      	ldr	r3, [pc, #656]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	4aa3      	ldr	r2, [pc, #652]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007dd2:	6093      	str	r3, [r2, #8]
 8007dd4:	4ba1      	ldr	r3, [pc, #644]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de0:	499e      	ldr	r1, [pc, #632]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d010      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007df2:	4b9a      	ldr	r3, [pc, #616]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007df8:	4a98      	ldr	r2, [pc, #608]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e02:	4b96      	ldr	r3, [pc, #600]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	4993      	ldr	r1, [pc, #588]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e20:	4b8e      	ldr	r3, [pc, #568]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2e:	498b      	ldr	r1, [pc, #556]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e42:	4b86      	ldr	r3, [pc, #536]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e50:	4982      	ldr	r1, [pc, #520]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e64:	4b7d      	ldr	r3, [pc, #500]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e72:	497a      	ldr	r1, [pc, #488]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e86:	4b75      	ldr	r3, [pc, #468]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8c:	f023 0203 	bic.w	r2, r3, #3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e94:	4971      	ldr	r1, [pc, #452]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00a      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ea8:	4b6c      	ldr	r3, [pc, #432]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eae:	f023 020c 	bic.w	r2, r3, #12
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	4969      	ldr	r1, [pc, #420]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007eca:	4b64      	ldr	r3, [pc, #400]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed8:	4960      	ldr	r1, [pc, #384]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007eec:	4b5b      	ldr	r3, [pc, #364]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007efa:	4958      	ldr	r1, [pc, #352]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f0e:	4b53      	ldr	r3, [pc, #332]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1c:	494f      	ldr	r1, [pc, #316]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f30:	4b4a      	ldr	r3, [pc, #296]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3e:	4947      	ldr	r1, [pc, #284]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f52:	4b42      	ldr	r3, [pc, #264]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f60:	493e      	ldr	r1, [pc, #248]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007f74:	4b39      	ldr	r3, [pc, #228]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f82:	4936      	ldr	r1, [pc, #216]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d011      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f96:	4b31      	ldr	r3, [pc, #196]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa4:	492d      	ldr	r1, [pc, #180]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fb4:	d101      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fc6:	4b25      	ldr	r3, [pc, #148]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	4921      	ldr	r1, [pc, #132]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007fe8:	4b1c      	ldr	r3, [pc, #112]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff6:	4919      	ldr	r1, [pc, #100]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800800a:	4b14      	ldr	r3, [pc, #80]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800800c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008010:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008018:	4910      	ldr	r1, [pc, #64]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d006      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 809d 	beq.w	800816e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008034:	4b09      	ldr	r3, [pc, #36]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a08      	ldr	r2, [pc, #32]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800803a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800803e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008040:	f7fd fc10 	bl	8005864 <HAL_GetTick>
 8008044:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008046:	e00b      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008048:	f7fd fc0c 	bl	8005864 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b64      	cmp	r3, #100	; 0x64
 8008054:	d904      	bls.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e116      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800805a:	bf00      	nop
 800805c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008060:	4b8b      	ldr	r3, [pc, #556]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1ed      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d017      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	2b00      	cmp	r3, #0
 800807e:	d113      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008080:	4b83      	ldr	r3, [pc, #524]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008086:	0e1b      	lsrs	r3, r3, #24
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	019a      	lsls	r2, r3, #6
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	061b      	lsls	r3, r3, #24
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	071b      	lsls	r3, r3, #28
 80080a0:	497b      	ldr	r1, [pc, #492]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d004      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080bc:	d00a      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d024      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080d2:	d11f      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080d4:	4b6e      	ldr	r3, [pc, #440]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080da:	0f1b      	lsrs	r3, r3, #28
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	019a      	lsls	r2, r3, #6
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	061b      	lsls	r3, r3, #24
 80080ee:	431a      	orrs	r2, r3
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	071b      	lsls	r3, r3, #28
 80080f4:	4966      	ldr	r1, [pc, #408]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80080fc:	4b64      	ldr	r3, [pc, #400]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008102:	f023 021f 	bic.w	r2, r3, #31
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	3b01      	subs	r3, #1
 800810c:	4960      	ldr	r1, [pc, #384]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800810e:	4313      	orrs	r3, r2
 8008110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00d      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	019a      	lsls	r2, r3, #6
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	061b      	lsls	r3, r3, #24
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	071b      	lsls	r3, r3, #28
 8008134:	4956      	ldr	r1, [pc, #344]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008136:	4313      	orrs	r3, r2
 8008138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800813c:	4b54      	ldr	r3, [pc, #336]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a53      	ldr	r2, [pc, #332]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008148:	f7fd fb8c 	bl	8005864 <HAL_GetTick>
 800814c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800814e:	e008      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008150:	f7fd fb88 	bl	8005864 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b64      	cmp	r3, #100	; 0x64
 800815c:	d901      	bls.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e092      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008162:	4b4b      	ldr	r3, [pc, #300]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0f0      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b01      	cmp	r3, #1
 8008172:	f040 8088 	bne.w	8008286 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008176:	4b46      	ldr	r3, [pc, #280]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a45      	ldr	r2, [pc, #276]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800817c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008182:	f7fd fb6f 	bl	8005864 <HAL_GetTick>
 8008186:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008188:	e008      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800818a:	f7fd fb6b 	bl	8005864 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b64      	cmp	r3, #100	; 0x64
 8008196:	d901      	bls.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e075      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800819c:	4b3c      	ldr	r3, [pc, #240]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a8:	d0ef      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d024      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d120      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081d2:	4b2f      	ldr	r3, [pc, #188]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d8:	0c1b      	lsrs	r3, r3, #16
 80081da:	f003 0303 	and.w	r3, r3, #3
 80081de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	019a      	lsls	r2, r3, #6
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	041b      	lsls	r3, r3, #16
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	061b      	lsls	r3, r3, #24
 80081f2:	4927      	ldr	r1, [pc, #156]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80081fa:	4b25      	ldr	r3, [pc, #148]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008200:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	3b01      	subs	r3, #1
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	4920      	ldr	r1, [pc, #128]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d018      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008228:	d113      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800822a:	4b19      	ldr	r3, [pc, #100]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	0e1b      	lsrs	r3, r3, #24
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	019a      	lsls	r2, r3, #6
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	041b      	lsls	r3, r3, #16
 8008244:	431a      	orrs	r2, r3
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	061b      	lsls	r3, r3, #24
 800824a:	4911      	ldr	r1, [pc, #68]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800824c:	4313      	orrs	r3, r2
 800824e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a0e      	ldr	r2, [pc, #56]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800825e:	f7fd fb01 	bl	8005864 <HAL_GetTick>
 8008262:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008264:	e008      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008266:	f7fd fafd 	bl	8005864 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b64      	cmp	r3, #100	; 0x64
 8008272:	d901      	bls.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e007      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008284:	d1ef      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3720      	adds	r7, #32
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	40023800 	.word	0x40023800

08008294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e09d      	b.n	80083e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d108      	bne.n	80082c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082b6:	d009      	beq.n	80082cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	61da      	str	r2, [r3, #28]
 80082be:	e005      	b.n	80082cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fb f80a 	bl	8003300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008302:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800830c:	d902      	bls.n	8008314 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	e002      	b.n	800831a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008318:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008322:	d007      	beq.n	8008334 <HAL_SPI_Init+0xa0>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800832c:	d002      	beq.n	8008334 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008362:	431a      	orrs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008376:	ea42 0103 	orr.w	r1, r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	f003 0204 	and.w	r2, r3, #4
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083b0:	ea42 0103 	orr.w	r1, r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b088      	sub	sp, #32
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	603b      	str	r3, [r7, #0]
 80083f6:	4613      	mov	r3, r2
 80083f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_SPI_Transmit+0x22>
 8008408:	2302      	movs	r3, #2
 800840a:	e158      	b.n	80086be <HAL_SPI_Transmit+0x2d4>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008414:	f7fd fa26 	bl	8005864 <HAL_GetTick>
 8008418:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	d002      	beq.n	8008430 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800842a:	2302      	movs	r3, #2
 800842c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800842e:	e13d      	b.n	80086ac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <HAL_SPI_Transmit+0x52>
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008440:	e134      	b.n	80086ac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2203      	movs	r2, #3
 8008446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	88fa      	ldrh	r2, [r7, #6]
 800845a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	88fa      	ldrh	r2, [r7, #6]
 8008460:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800848c:	d10f      	bne.n	80084ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800849c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	d007      	beq.n	80084cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084d4:	d94b      	bls.n	800856e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <HAL_SPI_Transmit+0xfa>
 80084de:	8afb      	ldrh	r3, [r7, #22]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d13e      	bne.n	8008562 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	1c9a      	adds	r2, r3, #2
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084fe:	b29b      	uxth	r3, r3
 8008500:	3b01      	subs	r3, #1
 8008502:	b29a      	uxth	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008508:	e02b      	b.n	8008562 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b02      	cmp	r3, #2
 8008516:	d112      	bne.n	800853e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	881a      	ldrh	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	1c9a      	adds	r2, r3, #2
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008532:	b29b      	uxth	r3, r3
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800853c:	e011      	b.n	8008562 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800853e:	f7fd f991 	bl	8005864 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d803      	bhi.n	8008556 <HAL_SPI_Transmit+0x16c>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d102      	bne.n	800855c <HAL_SPI_Transmit+0x172>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d102      	bne.n	8008562 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008560:	e0a4      	b.n	80086ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008566:	b29b      	uxth	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1ce      	bne.n	800850a <HAL_SPI_Transmit+0x120>
 800856c:	e07c      	b.n	8008668 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_SPI_Transmit+0x192>
 8008576:	8afb      	ldrh	r3, [r7, #22]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d170      	bne.n	800865e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b01      	cmp	r3, #1
 8008584:	d912      	bls.n	80085ac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	881a      	ldrh	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	1c9a      	adds	r2, r3, #2
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b02      	subs	r3, #2
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085aa:	e058      	b.n	800865e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	330c      	adds	r3, #12
 80085b6:	7812      	ldrb	r2, [r2, #0]
 80085b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	3b01      	subs	r3, #1
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80085d2:	e044      	b.n	800865e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d12b      	bne.n	800863a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d912      	bls.n	8008612 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	881a      	ldrh	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	1c9a      	adds	r2, r3, #2
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008606:	b29b      	uxth	r3, r3
 8008608:	3b02      	subs	r3, #2
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008610:	e025      	b.n	800865e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	330c      	adds	r3, #12
 800861c:	7812      	ldrb	r2, [r2, #0]
 800861e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862e:	b29b      	uxth	r3, r3
 8008630:	3b01      	subs	r3, #1
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008638:	e011      	b.n	800865e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800863a:	f7fd f913 	bl	8005864 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d803      	bhi.n	8008652 <HAL_SPI_Transmit+0x268>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008650:	d102      	bne.n	8008658 <HAL_SPI_Transmit+0x26e>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800865c:	e026      	b.n	80086ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1b5      	bne.n	80085d4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fd07 	bl	8009080 <SPI_EndRxTxTransaction>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2220      	movs	r2, #32
 800867c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008686:	2300      	movs	r3, #0
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	77fb      	strb	r3, [r7, #31]
 80086a8:	e000      	b.n	80086ac <HAL_SPI_Transmit+0x2c2>
  }

error:
 80086aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80086bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3720      	adds	r7, #32
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b088      	sub	sp, #32
 80086ca:	af02      	add	r7, sp, #8
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	4613      	mov	r3, r2
 80086d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086e2:	d112      	bne.n	800870a <HAL_SPI_Receive+0x44>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10e      	bne.n	800870a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2204      	movs	r2, #4
 80086f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	4613      	mov	r3, r2
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f910 	bl	8008926 <HAL_SPI_TransmitReceive>
 8008706:	4603      	mov	r3, r0
 8008708:	e109      	b.n	800891e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_SPI_Receive+0x52>
 8008714:	2302      	movs	r3, #2
 8008716:	e102      	b.n	800891e <HAL_SPI_Receive+0x258>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008720:	f7fd f8a0 	bl	8005864 <HAL_GetTick>
 8008724:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b01      	cmp	r3, #1
 8008730:	d002      	beq.n	8008738 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008732:	2302      	movs	r3, #2
 8008734:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008736:	e0e9      	b.n	800890c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <HAL_SPI_Receive+0x7e>
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008748:	e0e0      	b.n	800890c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2204      	movs	r2, #4
 800874e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	88fa      	ldrh	r2, [r7, #6]
 8008762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	88fa      	ldrh	r2, [r7, #6]
 800876a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008794:	d908      	bls.n	80087a8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087a4:	605a      	str	r2, [r3, #4]
 80087a6:	e007      	b.n	80087b8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087c0:	d10f      	bne.n	80087e2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b40      	cmp	r3, #64	; 0x40
 80087ee:	d007      	beq.n	8008800 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008808:	d867      	bhi.n	80088da <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800880a:	e030      	b.n	800886e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b01      	cmp	r3, #1
 8008818:	d117      	bne.n	800884a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f103 020c 	add.w	r2, r3, #12
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008848:	e011      	b.n	800886e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800884a:	f7fd f80b 	bl	8005864 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d803      	bhi.n	8008862 <HAL_SPI_Receive+0x19c>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008860:	d102      	bne.n	8008868 <HAL_SPI_Receive+0x1a2>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800886c:	e04e      	b.n	800890c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008874:	b29b      	uxth	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1c8      	bne.n	800880c <HAL_SPI_Receive+0x146>
 800887a:	e034      	b.n	80088e6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d115      	bne.n	80088b6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	b292      	uxth	r2, r2
 8008896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	1c9a      	adds	r2, r3, #2
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80088b4:	e011      	b.n	80088da <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088b6:	f7fc ffd5 	bl	8005864 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d803      	bhi.n	80088ce <HAL_SPI_Receive+0x208>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d102      	bne.n	80088d4 <HAL_SPI_Receive+0x20e>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088d8:	e018      	b.n	800890c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1ca      	bne.n	800887c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fb4c 	bl	8008f88 <SPI_EndRxTransaction>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	75fb      	strb	r3, [r7, #23]
 8008908:	e000      	b.n	800890c <HAL_SPI_Receive+0x246>
  }

error :
 800890a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b08a      	sub	sp, #40	; 0x28
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
 8008932:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008934:	2301      	movs	r3, #1
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_SPI_TransmitReceive+0x26>
 8008948:	2302      	movs	r3, #2
 800894a:	e1fb      	b.n	8008d44 <HAL_SPI_TransmitReceive+0x41e>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008954:	f7fc ff86 	bl	8005864 <HAL_GetTick>
 8008958:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008960:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008968:	887b      	ldrh	r3, [r7, #2]
 800896a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800896c:	887b      	ldrh	r3, [r7, #2]
 800896e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008970:	7efb      	ldrb	r3, [r7, #27]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d00e      	beq.n	8008994 <HAL_SPI_TransmitReceive+0x6e>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800897c:	d106      	bne.n	800898c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d102      	bne.n	800898c <HAL_SPI_TransmitReceive+0x66>
 8008986:	7efb      	ldrb	r3, [r7, #27]
 8008988:	2b04      	cmp	r3, #4
 800898a:	d003      	beq.n	8008994 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800898c:	2302      	movs	r3, #2
 800898e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008992:	e1cd      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <HAL_SPI_TransmitReceive+0x80>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <HAL_SPI_TransmitReceive+0x80>
 80089a0:	887b      	ldrh	r3, [r7, #2]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d103      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80089ac:	e1c0      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d003      	beq.n	80089c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2205      	movs	r2, #5
 80089be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	887a      	ldrh	r2, [r7, #2]
 80089d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	887a      	ldrh	r2, [r7, #2]
 80089da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	887a      	ldrh	r2, [r7, #2]
 80089e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	887a      	ldrh	r2, [r7, #2]
 80089ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a04:	d802      	bhi.n	8008a0c <HAL_SPI_TransmitReceive+0xe6>
 8008a06:	8a3b      	ldrh	r3, [r7, #16]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d908      	bls.n	8008a1e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a1a:	605a      	str	r2, [r3, #4]
 8008a1c:	e007      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a2c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b40      	cmp	r3, #64	; 0x40
 8008a3a:	d007      	beq.n	8008a4c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a54:	d97c      	bls.n	8008b50 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <HAL_SPI_TransmitReceive+0x13e>
 8008a5e:	8a7b      	ldrh	r3, [r7, #18]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d169      	bne.n	8008b38 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	881a      	ldrh	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	1c9a      	adds	r2, r3, #2
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a88:	e056      	b.n	8008b38 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d11b      	bne.n	8008ad0 <HAL_SPI_TransmitReceive+0x1aa>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d016      	beq.n	8008ad0 <HAL_SPI_TransmitReceive+0x1aa>
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d113      	bne.n	8008ad0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	881a      	ldrh	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	1c9a      	adds	r2, r3, #2
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d11c      	bne.n	8008b18 <HAL_SPI_TransmitReceive+0x1f2>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d016      	beq.n	8008b18 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	b292      	uxth	r2, r2
 8008af6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	1c9a      	adds	r2, r3, #2
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b14:	2301      	movs	r3, #1
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b18:	f7fc fea4 	bl	8005864 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d807      	bhi.n	8008b38 <HAL_SPI_TransmitReceive+0x212>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2e:	d003      	beq.n	8008b38 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008b36:	e0fb      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1a3      	bne.n	8008a8a <HAL_SPI_TransmitReceive+0x164>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d19d      	bne.n	8008a8a <HAL_SPI_TransmitReceive+0x164>
 8008b4e:	e0df      	b.n	8008d10 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_SPI_TransmitReceive+0x23a>
 8008b58:	8a7b      	ldrh	r3, [r7, #18]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	f040 80cb 	bne.w	8008cf6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d912      	bls.n	8008b90 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6e:	881a      	ldrh	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	1c9a      	adds	r2, r3, #2
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b02      	subs	r3, #2
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b8e:	e0b2      	b.n	8008cf6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	330c      	adds	r3, #12
 8008b9a:	7812      	ldrb	r2, [r2, #0]
 8008b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bb6:	e09e      	b.n	8008cf6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d134      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x30a>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d02f      	beq.n	8008c30 <HAL_SPI_TransmitReceive+0x30a>
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d12c      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d912      	bls.n	8008c06 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	881a      	ldrh	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	1c9a      	adds	r2, r3, #2
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	3b02      	subs	r3, #2
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c04:	e012      	b.n	8008c2c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	330c      	adds	r3, #12
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d148      	bne.n	8008cd0 <HAL_SPI_TransmitReceive+0x3aa>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d042      	beq.n	8008cd0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d923      	bls.n	8008c9e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	b292      	uxth	r2, r2
 8008c62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c68:	1c9a      	adds	r2, r3, #2
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b02      	subs	r3, #2
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d81f      	bhi.n	8008ccc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c9a:	605a      	str	r2, [r3, #4]
 8008c9c:	e016      	b.n	8008ccc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f103 020c 	add.w	r2, r3, #12
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	7812      	ldrb	r2, [r2, #0]
 8008cac:	b2d2      	uxtb	r2, r2
 8008cae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008cd0:	f7fc fdc8 	bl	8005864 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d803      	bhi.n	8008ce8 <HAL_SPI_TransmitReceive+0x3c2>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d102      	bne.n	8008cee <HAL_SPI_TransmitReceive+0x3c8>
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008cf4:	e01c      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f47f af5b 	bne.w	8008bb8 <HAL_SPI_TransmitReceive+0x292>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f47f af54 	bne.w	8008bb8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 f9b3 	bl	8009080 <SPI_EndRxTxTransaction>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	661a      	str	r2, [r3, #96]	; 0x60
 8008d2c:	e000      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008d2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3728      	adds	r7, #40	; 0x28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d5c:	f7fc fd82 	bl	8005864 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	4413      	add	r3, r2
 8008d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d6c:	f7fc fd7a 	bl	8005864 <HAL_GetTick>
 8008d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d72:	4b39      	ldr	r3, [pc, #228]	; (8008e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	015b      	lsls	r3, r3, #5
 8008d78:	0d1b      	lsrs	r3, r3, #20
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	fb02 f303 	mul.w	r3, r2, r3
 8008d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d82:	e054      	b.n	8008e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8a:	d050      	beq.n	8008e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d8c:	f7fc fd6a 	bl	8005864 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d902      	bls.n	8008da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d13d      	bne.n	8008e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dba:	d111      	bne.n	8008de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc4:	d004      	beq.n	8008dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dce:	d107      	bne.n	8008de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de8:	d10f      	bne.n	8008e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e017      	b.n	8008e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4013      	ands	r3, r2
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	bf0c      	ite	eq
 8008e3e:	2301      	moveq	r3, #1
 8008e40:	2300      	movne	r3, #0
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d19b      	bne.n	8008d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3720      	adds	r7, #32
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000008 	.word	0x20000008

08008e5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08a      	sub	sp, #40	; 0x28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e6e:	f7fc fcf9 	bl	8005864 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008e7e:	f7fc fcf1 	bl	8005864 <HAL_GetTick>
 8008e82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	330c      	adds	r3, #12
 8008e8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e8c:	4b3d      	ldr	r3, [pc, #244]	; (8008f84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	00da      	lsls	r2, r3, #3
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	0d1b      	lsrs	r3, r3, #20
 8008e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ea2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008ea4:	e060      	b.n	8008f68 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008eac:	d107      	bne.n	8008ebe <SPI_WaitFifoStateUntilTimeout+0x62>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d104      	bne.n	8008ebe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec4:	d050      	beq.n	8008f68 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ec6:	f7fc fccd 	bl	8005864 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d902      	bls.n	8008edc <SPI_WaitFifoStateUntilTimeout+0x80>
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d13d      	bne.n	8008f58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008eea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef4:	d111      	bne.n	8008f1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008efe:	d004      	beq.n	8008f0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f08:	d107      	bne.n	8008f1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f22:	d10f      	bne.n	8008f44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e010      	b.n	8008f7a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689a      	ldr	r2, [r3, #8]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	4013      	ands	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d196      	bne.n	8008ea6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3728      	adds	r7, #40	; 0x28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000008 	.word	0x20000008

08008f88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af02      	add	r7, sp, #8
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f9c:	d111      	bne.n	8008fc2 <SPI_EndRxTransaction+0x3a>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fa6:	d004      	beq.n	8008fb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb0:	d107      	bne.n	8008fc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fca:	d112      	bne.n	8008ff2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2180      	movs	r1, #128	; 0x80
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f7ff feb8 	bl	8008d4c <SPI_WaitFlagStateUntilTimeout>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d021      	beq.n	8009026 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe6:	f043 0220 	orr.w	r2, r3, #32
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	e03d      	b.n	800906e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ff2:	4b21      	ldr	r3, [pc, #132]	; (8009078 <SPI_EndRxTransaction+0xf0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a21      	ldr	r2, [pc, #132]	; (800907c <SPI_EndRxTransaction+0xf4>)
 8008ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffc:	0d5b      	lsrs	r3, r3, #21
 8008ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009002:	fb02 f303 	mul.w	r3, r2, r3
 8009006:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	3b01      	subs	r3, #1
 8009012:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901e:	2b80      	cmp	r3, #128	; 0x80
 8009020:	d0f2      	beq.n	8009008 <SPI_EndRxTransaction+0x80>
 8009022:	e000      	b.n	8009026 <SPI_EndRxTransaction+0x9e>
        break;
 8009024:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800902e:	d11d      	bne.n	800906c <SPI_EndRxTransaction+0xe4>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009038:	d004      	beq.n	8009044 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009042:	d113      	bne.n	800906c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2200      	movs	r2, #0
 800904c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff ff03 	bl	8008e5c <SPI_WaitFifoStateUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d007      	beq.n	800906c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009060:	f043 0220 	orr.w	r2, r3, #32
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e000      	b.n	800906e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000008 	.word	0x20000008
 800907c:	165e9f81 	.word	0x165e9f81

08009080 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af02      	add	r7, sp, #8
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f7ff fedf 	bl	8008e5c <SPI_WaitFifoStateUntilTimeout>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d007      	beq.n	80090b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a8:	f043 0220 	orr.w	r2, r3, #32
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e046      	b.n	8009142 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090b4:	4b25      	ldr	r3, [pc, #148]	; (800914c <SPI_EndRxTxTransaction+0xcc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a25      	ldr	r2, [pc, #148]	; (8009150 <SPI_EndRxTxTransaction+0xd0>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	0d5b      	lsrs	r3, r3, #21
 80090c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090c4:	fb02 f303 	mul.w	r3, r2, r3
 80090c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090d2:	d112      	bne.n	80090fa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	2180      	movs	r1, #128	; 0x80
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff fe34 	bl	8008d4c <SPI_WaitFlagStateUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d016      	beq.n	8009118 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ee:	f043 0220 	orr.w	r2, r3, #32
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e023      	b.n	8009142 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	3b01      	subs	r3, #1
 8009104:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009110:	2b80      	cmp	r3, #128	; 0x80
 8009112:	d0f2      	beq.n	80090fa <SPI_EndRxTxTransaction+0x7a>
 8009114:	e000      	b.n	8009118 <SPI_EndRxTxTransaction+0x98>
        break;
 8009116:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7ff fe99 	bl	8008e5c <SPI_WaitFifoStateUntilTimeout>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d007      	beq.n	8009140 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009134:	f043 0220 	orr.w	r2, r3, #32
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e000      	b.n	8009142 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000008 	.word	0x20000008
 8009150:	165e9f81 	.word	0x165e9f81

08009154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e049      	b.n	80091fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d106      	bne.n	8009180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fa f936 	bl	80033ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f000 ffae 	bl	800a0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b01      	cmp	r3, #1
 8009216:	d001      	beq.n	800921c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e054      	b.n	80092c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f042 0201 	orr.w	r2, r2, #1
 8009232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a26      	ldr	r2, [pc, #152]	; (80092d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d022      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x80>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009246:	d01d      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x80>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a22      	ldr	r2, [pc, #136]	; (80092d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d018      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x80>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a21      	ldr	r2, [pc, #132]	; (80092dc <HAL_TIM_Base_Start_IT+0xd8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d013      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x80>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a1f      	ldr	r2, [pc, #124]	; (80092e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00e      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x80>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1e      	ldr	r2, [pc, #120]	; (80092e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d009      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x80>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a1c      	ldr	r2, [pc, #112]	; (80092e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d004      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x80>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a1b      	ldr	r2, [pc, #108]	; (80092ec <HAL_TIM_Base_Start_IT+0xe8>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d115      	bne.n	80092b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	4b19      	ldr	r3, [pc, #100]	; (80092f0 <HAL_TIM_Base_Start_IT+0xec>)
 800928c:	4013      	ands	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b06      	cmp	r3, #6
 8009294:	d015      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0xbe>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800929c:	d011      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 0201 	orr.w	r2, r2, #1
 80092ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ae:	e008      	b.n	80092c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0201 	orr.w	r2, r2, #1
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	e000      	b.n	80092c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40000400 	.word	0x40000400
 80092dc:	40000800 	.word	0x40000800
 80092e0:	40000c00 	.word	0x40000c00
 80092e4:	40010400 	.word	0x40010400
 80092e8:	40014000 	.word	0x40014000
 80092ec:	40001800 	.word	0x40001800
 80092f0:	00010007 	.word	0x00010007

080092f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e049      	b.n	800939a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f841 	bl	80093a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f000 fede 	bl	800a0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80093aa:	bf00      	nop
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
	...

080093b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d109      	bne.n	80093dc <HAL_TIM_PWM_Start+0x24>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	bf14      	ite	ne
 80093d4:	2301      	movne	r3, #1
 80093d6:	2300      	moveq	r3, #0
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	e03c      	b.n	8009456 <HAL_TIM_PWM_Start+0x9e>
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d109      	bne.n	80093f6 <HAL_TIM_PWM_Start+0x3e>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	bf14      	ite	ne
 80093ee:	2301      	movne	r3, #1
 80093f0:	2300      	moveq	r3, #0
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	e02f      	b.n	8009456 <HAL_TIM_PWM_Start+0x9e>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d109      	bne.n	8009410 <HAL_TIM_PWM_Start+0x58>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	bf14      	ite	ne
 8009408:	2301      	movne	r3, #1
 800940a:	2300      	moveq	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	e022      	b.n	8009456 <HAL_TIM_PWM_Start+0x9e>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b0c      	cmp	r3, #12
 8009414:	d109      	bne.n	800942a <HAL_TIM_PWM_Start+0x72>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b01      	cmp	r3, #1
 8009420:	bf14      	ite	ne
 8009422:	2301      	movne	r3, #1
 8009424:	2300      	moveq	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	e015      	b.n	8009456 <HAL_TIM_PWM_Start+0x9e>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b10      	cmp	r3, #16
 800942e:	d109      	bne.n	8009444 <HAL_TIM_PWM_Start+0x8c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	bf14      	ite	ne
 800943c:	2301      	movne	r3, #1
 800943e:	2300      	moveq	r3, #0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	e008      	b.n	8009456 <HAL_TIM_PWM_Start+0x9e>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b01      	cmp	r3, #1
 800944e:	bf14      	ite	ne
 8009450:	2301      	movne	r3, #1
 8009452:	2300      	moveq	r3, #0
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e092      	b.n	8009584 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d104      	bne.n	800946e <HAL_TIM_PWM_Start+0xb6>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2202      	movs	r2, #2
 8009468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800946c:	e023      	b.n	80094b6 <HAL_TIM_PWM_Start+0xfe>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b04      	cmp	r3, #4
 8009472:	d104      	bne.n	800947e <HAL_TIM_PWM_Start+0xc6>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800947c:	e01b      	b.n	80094b6 <HAL_TIM_PWM_Start+0xfe>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b08      	cmp	r3, #8
 8009482:	d104      	bne.n	800948e <HAL_TIM_PWM_Start+0xd6>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800948c:	e013      	b.n	80094b6 <HAL_TIM_PWM_Start+0xfe>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b0c      	cmp	r3, #12
 8009492:	d104      	bne.n	800949e <HAL_TIM_PWM_Start+0xe6>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800949c:	e00b      	b.n	80094b6 <HAL_TIM_PWM_Start+0xfe>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b10      	cmp	r3, #16
 80094a2:	d104      	bne.n	80094ae <HAL_TIM_PWM_Start+0xf6>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094ac:	e003      	b.n	80094b6 <HAL_TIM_PWM_Start+0xfe>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2202      	movs	r2, #2
 80094b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2201      	movs	r2, #1
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 fada 	bl	800aa78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a30      	ldr	r2, [pc, #192]	; (800958c <HAL_TIM_PWM_Start+0x1d4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d004      	beq.n	80094d8 <HAL_TIM_PWM_Start+0x120>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a2f      	ldr	r2, [pc, #188]	; (8009590 <HAL_TIM_PWM_Start+0x1d8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d101      	bne.n	80094dc <HAL_TIM_PWM_Start+0x124>
 80094d8:	2301      	movs	r3, #1
 80094da:	e000      	b.n	80094de <HAL_TIM_PWM_Start+0x126>
 80094dc:	2300      	movs	r3, #0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d007      	beq.n	80094f2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a25      	ldr	r2, [pc, #148]	; (800958c <HAL_TIM_PWM_Start+0x1d4>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d022      	beq.n	8009542 <HAL_TIM_PWM_Start+0x18a>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009504:	d01d      	beq.n	8009542 <HAL_TIM_PWM_Start+0x18a>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a22      	ldr	r2, [pc, #136]	; (8009594 <HAL_TIM_PWM_Start+0x1dc>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d018      	beq.n	8009542 <HAL_TIM_PWM_Start+0x18a>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a20      	ldr	r2, [pc, #128]	; (8009598 <HAL_TIM_PWM_Start+0x1e0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d013      	beq.n	8009542 <HAL_TIM_PWM_Start+0x18a>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a1f      	ldr	r2, [pc, #124]	; (800959c <HAL_TIM_PWM_Start+0x1e4>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d00e      	beq.n	8009542 <HAL_TIM_PWM_Start+0x18a>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a19      	ldr	r2, [pc, #100]	; (8009590 <HAL_TIM_PWM_Start+0x1d8>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d009      	beq.n	8009542 <HAL_TIM_PWM_Start+0x18a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a1b      	ldr	r2, [pc, #108]	; (80095a0 <HAL_TIM_PWM_Start+0x1e8>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d004      	beq.n	8009542 <HAL_TIM_PWM_Start+0x18a>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a19      	ldr	r2, [pc, #100]	; (80095a4 <HAL_TIM_PWM_Start+0x1ec>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d115      	bne.n	800956e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	4b17      	ldr	r3, [pc, #92]	; (80095a8 <HAL_TIM_PWM_Start+0x1f0>)
 800954a:	4013      	ands	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b06      	cmp	r3, #6
 8009552:	d015      	beq.n	8009580 <HAL_TIM_PWM_Start+0x1c8>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800955a:	d011      	beq.n	8009580 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f042 0201 	orr.w	r2, r2, #1
 800956a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800956c:	e008      	b.n	8009580 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f042 0201 	orr.w	r2, r2, #1
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	e000      	b.n	8009582 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009580:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	40010000 	.word	0x40010000
 8009590:	40010400 	.word	0x40010400
 8009594:	40000400 	.word	0x40000400
 8009598:	40000800 	.word	0x40000800
 800959c:	40000c00 	.word	0x40000c00
 80095a0:	40014000 	.word	0x40014000
 80095a4:	40001800 	.word	0x40001800
 80095a8:	00010007 	.word	0x00010007

080095ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e049      	b.n	8009652 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7f9 ff2a 	bl	800342c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	4619      	mov	r1, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	f000 fd82 	bl	800a0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d104      	bne.n	800967a <HAL_TIM_IC_Start_IT+0x1e>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009676:	b2db      	uxtb	r3, r3
 8009678:	e023      	b.n	80096c2 <HAL_TIM_IC_Start_IT+0x66>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b04      	cmp	r3, #4
 800967e:	d104      	bne.n	800968a <HAL_TIM_IC_Start_IT+0x2e>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009686:	b2db      	uxtb	r3, r3
 8009688:	e01b      	b.n	80096c2 <HAL_TIM_IC_Start_IT+0x66>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b08      	cmp	r3, #8
 800968e:	d104      	bne.n	800969a <HAL_TIM_IC_Start_IT+0x3e>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009696:	b2db      	uxtb	r3, r3
 8009698:	e013      	b.n	80096c2 <HAL_TIM_IC_Start_IT+0x66>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b0c      	cmp	r3, #12
 800969e:	d104      	bne.n	80096aa <HAL_TIM_IC_Start_IT+0x4e>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	e00b      	b.n	80096c2 <HAL_TIM_IC_Start_IT+0x66>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b10      	cmp	r3, #16
 80096ae:	d104      	bne.n	80096ba <HAL_TIM_IC_Start_IT+0x5e>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	e003      	b.n	80096c2 <HAL_TIM_IC_Start_IT+0x66>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <HAL_TIM_IC_Start_IT+0x78>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	e013      	b.n	80096fc <HAL_TIM_IC_Start_IT+0xa0>
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d104      	bne.n	80096e4 <HAL_TIM_IC_Start_IT+0x88>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	e00b      	b.n	80096fc <HAL_TIM_IC_Start_IT+0xa0>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b08      	cmp	r3, #8
 80096e8:	d104      	bne.n	80096f4 <HAL_TIM_IC_Start_IT+0x98>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	e003      	b.n	80096fc <HAL_TIM_IC_Start_IT+0xa0>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d102      	bne.n	800970a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009704:	7b7b      	ldrb	r3, [r7, #13]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d001      	beq.n	800970e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e0e2      	b.n	80098d4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <HAL_TIM_IC_Start_IT+0xc2>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800971c:	e023      	b.n	8009766 <HAL_TIM_IC_Start_IT+0x10a>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b04      	cmp	r3, #4
 8009722:	d104      	bne.n	800972e <HAL_TIM_IC_Start_IT+0xd2>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800972c:	e01b      	b.n	8009766 <HAL_TIM_IC_Start_IT+0x10a>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b08      	cmp	r3, #8
 8009732:	d104      	bne.n	800973e <HAL_TIM_IC_Start_IT+0xe2>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800973c:	e013      	b.n	8009766 <HAL_TIM_IC_Start_IT+0x10a>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b0c      	cmp	r3, #12
 8009742:	d104      	bne.n	800974e <HAL_TIM_IC_Start_IT+0xf2>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800974c:	e00b      	b.n	8009766 <HAL_TIM_IC_Start_IT+0x10a>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b10      	cmp	r3, #16
 8009752:	d104      	bne.n	800975e <HAL_TIM_IC_Start_IT+0x102>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2202      	movs	r2, #2
 8009758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800975c:	e003      	b.n	8009766 <HAL_TIM_IC_Start_IT+0x10a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2202      	movs	r2, #2
 8009762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <HAL_TIM_IC_Start_IT+0x11a>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009774:	e013      	b.n	800979e <HAL_TIM_IC_Start_IT+0x142>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b04      	cmp	r3, #4
 800977a:	d104      	bne.n	8009786 <HAL_TIM_IC_Start_IT+0x12a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009784:	e00b      	b.n	800979e <HAL_TIM_IC_Start_IT+0x142>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b08      	cmp	r3, #8
 800978a:	d104      	bne.n	8009796 <HAL_TIM_IC_Start_IT+0x13a>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009794:	e003      	b.n	800979e <HAL_TIM_IC_Start_IT+0x142>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2202      	movs	r2, #2
 800979a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b0c      	cmp	r3, #12
 80097a2:	d841      	bhi.n	8009828 <HAL_TIM_IC_Start_IT+0x1cc>
 80097a4:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <HAL_TIM_IC_Start_IT+0x150>)
 80097a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097aa:	bf00      	nop
 80097ac:	080097e1 	.word	0x080097e1
 80097b0:	08009829 	.word	0x08009829
 80097b4:	08009829 	.word	0x08009829
 80097b8:	08009829 	.word	0x08009829
 80097bc:	080097f3 	.word	0x080097f3
 80097c0:	08009829 	.word	0x08009829
 80097c4:	08009829 	.word	0x08009829
 80097c8:	08009829 	.word	0x08009829
 80097cc:	08009805 	.word	0x08009805
 80097d0:	08009829 	.word	0x08009829
 80097d4:	08009829 	.word	0x08009829
 80097d8:	08009829 	.word	0x08009829
 80097dc:	08009817 	.word	0x08009817
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f042 0202 	orr.w	r2, r2, #2
 80097ee:	60da      	str	r2, [r3, #12]
      break;
 80097f0:	e01d      	b.n	800982e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68da      	ldr	r2, [r3, #12]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0204 	orr.w	r2, r2, #4
 8009800:	60da      	str	r2, [r3, #12]
      break;
 8009802:	e014      	b.n	800982e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0208 	orr.w	r2, r2, #8
 8009812:	60da      	str	r2, [r3, #12]
      break;
 8009814:	e00b      	b.n	800982e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f042 0210 	orr.w	r2, r2, #16
 8009824:	60da      	str	r2, [r3, #12]
      break;
 8009826:	e002      	b.n	800982e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
      break;
 800982c:	bf00      	nop
  }

  if (status == HAL_OK)
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d14e      	bne.n	80098d2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2201      	movs	r2, #1
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	4618      	mov	r0, r3
 800983e:	f001 f91b 	bl	800aa78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a25      	ldr	r2, [pc, #148]	; (80098dc <HAL_TIM_IC_Start_IT+0x280>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d022      	beq.n	8009892 <HAL_TIM_IC_Start_IT+0x236>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009854:	d01d      	beq.n	8009892 <HAL_TIM_IC_Start_IT+0x236>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a21      	ldr	r2, [pc, #132]	; (80098e0 <HAL_TIM_IC_Start_IT+0x284>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d018      	beq.n	8009892 <HAL_TIM_IC_Start_IT+0x236>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a1f      	ldr	r2, [pc, #124]	; (80098e4 <HAL_TIM_IC_Start_IT+0x288>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d013      	beq.n	8009892 <HAL_TIM_IC_Start_IT+0x236>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a1e      	ldr	r2, [pc, #120]	; (80098e8 <HAL_TIM_IC_Start_IT+0x28c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00e      	beq.n	8009892 <HAL_TIM_IC_Start_IT+0x236>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a1c      	ldr	r2, [pc, #112]	; (80098ec <HAL_TIM_IC_Start_IT+0x290>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d009      	beq.n	8009892 <HAL_TIM_IC_Start_IT+0x236>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <HAL_TIM_IC_Start_IT+0x294>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d004      	beq.n	8009892 <HAL_TIM_IC_Start_IT+0x236>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a19      	ldr	r2, [pc, #100]	; (80098f4 <HAL_TIM_IC_Start_IT+0x298>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d115      	bne.n	80098be <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689a      	ldr	r2, [r3, #8]
 8009898:	4b17      	ldr	r3, [pc, #92]	; (80098f8 <HAL_TIM_IC_Start_IT+0x29c>)
 800989a:	4013      	ands	r3, r2
 800989c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2b06      	cmp	r3, #6
 80098a2:	d015      	beq.n	80098d0 <HAL_TIM_IC_Start_IT+0x274>
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098aa:	d011      	beq.n	80098d0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f042 0201 	orr.w	r2, r2, #1
 80098ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098bc:	e008      	b.n	80098d0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 0201 	orr.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	e000      	b.n	80098d2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40010000 	.word	0x40010000
 80098e0:	40000400 	.word	0x40000400
 80098e4:	40000800 	.word	0x40000800
 80098e8:	40000c00 	.word	0x40000c00
 80098ec:	40010400 	.word	0x40010400
 80098f0:	40014000 	.word	0x40014000
 80098f4:	40001800 	.word	0x40001800
 80098f8:	00010007 	.word	0x00010007

080098fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b02      	cmp	r3, #2
 8009910:	d122      	bne.n	8009958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b02      	cmp	r3, #2
 800991e:	d11b      	bne.n	8009958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f06f 0202 	mvn.w	r2, #2
 8009928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7f8 fe94 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 8009944:	e005      	b.n	8009952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fbb6 	bl	800a0b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fbbd 	bl	800a0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	2b04      	cmp	r3, #4
 8009964:	d122      	bne.n	80099ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b04      	cmp	r3, #4
 8009972:	d11b      	bne.n	80099ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f06f 0204 	mvn.w	r2, #4
 800997c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2202      	movs	r2, #2
 8009982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7f8 fe6a 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 8009998:	e005      	b.n	80099a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fb8c 	bl	800a0b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fb93 	bl	800a0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f003 0308 	and.w	r3, r3, #8
 80099b6:	2b08      	cmp	r3, #8
 80099b8:	d122      	bne.n	8009a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	d11b      	bne.n	8009a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f06f 0208 	mvn.w	r2, #8
 80099d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2204      	movs	r2, #4
 80099d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7f8 fe40 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 80099ec:	e005      	b.n	80099fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fb62 	bl	800a0b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fb69 	bl	800a0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b10      	cmp	r3, #16
 8009a0c:	d122      	bne.n	8009a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	2b10      	cmp	r3, #16
 8009a1a:	d11b      	bne.n	8009a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f06f 0210 	mvn.w	r2, #16
 8009a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2208      	movs	r2, #8
 8009a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7f8 fe16 	bl	800266c <HAL_TIM_IC_CaptureCallback>
 8009a40:	e005      	b.n	8009a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fb38 	bl	800a0b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fb3f 	bl	800a0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d10e      	bne.n	8009a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d107      	bne.n	8009a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f06f 0201 	mvn.w	r2, #1
 8009a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7f9 fba4 	bl	80031c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a8a:	2b80      	cmp	r3, #128	; 0x80
 8009a8c:	d10e      	bne.n	8009aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a98:	2b80      	cmp	r3, #128	; 0x80
 8009a9a:	d107      	bne.n	8009aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f001 f922 	bl	800acf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aba:	d10e      	bne.n	8009ada <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac6:	2b80      	cmp	r3, #128	; 0x80
 8009ac8:	d107      	bne.n	8009ada <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 f915 	bl	800ad04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae4:	2b40      	cmp	r3, #64	; 0x40
 8009ae6:	d10e      	bne.n	8009b06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af2:	2b40      	cmp	r3, #64	; 0x40
 8009af4:	d107      	bne.n	8009b06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 faed 	bl	800a0e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	d10e      	bne.n	8009b32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f003 0320 	and.w	r3, r3, #32
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	d107      	bne.n	8009b32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f06f 0220 	mvn.w	r2, #32
 8009b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 f8d5 	bl	800acdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b086      	sub	sp, #24
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d101      	bne.n	8009b58 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009b54:	2302      	movs	r3, #2
 8009b56:	e088      	b.n	8009c6a <HAL_TIM_IC_ConfigChannel+0x130>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d11b      	bne.n	8009b9e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009b76:	f000 fdbb 	bl	800a6f0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699a      	ldr	r2, [r3, #24]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 020c 	bic.w	r2, r2, #12
 8009b88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6999      	ldr	r1, [r3, #24]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	619a      	str	r2, [r3, #24]
 8009b9c:	e060      	b.n	8009c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d11c      	bne.n	8009bde <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009bb4:	f000 fe3f 	bl	800a836 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	699a      	ldr	r2, [r3, #24]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009bc6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6999      	ldr	r1, [r3, #24]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	021a      	lsls	r2, r3, #8
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	619a      	str	r2, [r3, #24]
 8009bdc:	e040      	b.n	8009c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d11b      	bne.n	8009c1c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009bf4:	f000 fe8c 	bl	800a910 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69da      	ldr	r2, [r3, #28]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 020c 	bic.w	r2, r2, #12
 8009c06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69d9      	ldr	r1, [r3, #28]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	61da      	str	r2, [r3, #28]
 8009c1a:	e021      	b.n	8009c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b0c      	cmp	r3, #12
 8009c20:	d11c      	bne.n	8009c5c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009c32:	f000 fea9 	bl	800a988 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69da      	ldr	r2, [r3, #28]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c44:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69d9      	ldr	r1, [r3, #28]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	021a      	lsls	r2, r3, #8
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	61da      	str	r2, [r3, #28]
 8009c5a:	e001      	b.n	8009c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
	...

08009c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d101      	bne.n	8009c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e0ff      	b.n	8009e92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b14      	cmp	r3, #20
 8009c9e:	f200 80f0 	bhi.w	8009e82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009ca2:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009cfd 	.word	0x08009cfd
 8009cac:	08009e83 	.word	0x08009e83
 8009cb0:	08009e83 	.word	0x08009e83
 8009cb4:	08009e83 	.word	0x08009e83
 8009cb8:	08009d3d 	.word	0x08009d3d
 8009cbc:	08009e83 	.word	0x08009e83
 8009cc0:	08009e83 	.word	0x08009e83
 8009cc4:	08009e83 	.word	0x08009e83
 8009cc8:	08009d7f 	.word	0x08009d7f
 8009ccc:	08009e83 	.word	0x08009e83
 8009cd0:	08009e83 	.word	0x08009e83
 8009cd4:	08009e83 	.word	0x08009e83
 8009cd8:	08009dbf 	.word	0x08009dbf
 8009cdc:	08009e83 	.word	0x08009e83
 8009ce0:	08009e83 	.word	0x08009e83
 8009ce4:	08009e83 	.word	0x08009e83
 8009ce8:	08009e01 	.word	0x08009e01
 8009cec:	08009e83 	.word	0x08009e83
 8009cf0:	08009e83 	.word	0x08009e83
 8009cf4:	08009e83 	.word	0x08009e83
 8009cf8:	08009e41 	.word	0x08009e41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68b9      	ldr	r1, [r7, #8]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 fa96 	bl	800a234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699a      	ldr	r2, [r3, #24]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0208 	orr.w	r2, r2, #8
 8009d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	699a      	ldr	r2, [r3, #24]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f022 0204 	bic.w	r2, r2, #4
 8009d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6999      	ldr	r1, [r3, #24]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	691a      	ldr	r2, [r3, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	619a      	str	r2, [r3, #24]
      break;
 8009d3a:	e0a5      	b.n	8009e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fae8 	bl	800a318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6999      	ldr	r1, [r3, #24]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	021a      	lsls	r2, r3, #8
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	619a      	str	r2, [r3, #24]
      break;
 8009d7c:	e084      	b.n	8009e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fb3f 	bl	800a408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69da      	ldr	r2, [r3, #28]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0208 	orr.w	r2, r2, #8
 8009d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	69da      	ldr	r2, [r3, #28]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0204 	bic.w	r2, r2, #4
 8009da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69d9      	ldr	r1, [r3, #28]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	61da      	str	r2, [r3, #28]
      break;
 8009dbc:	e064      	b.n	8009e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68b9      	ldr	r1, [r7, #8]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fb95 	bl	800a4f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69da      	ldr	r2, [r3, #28]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	69d9      	ldr	r1, [r3, #28]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	021a      	lsls	r2, r3, #8
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	61da      	str	r2, [r3, #28]
      break;
 8009dfe:	e043      	b.n	8009e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fbcc 	bl	800a5a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0208 	orr.w	r2, r2, #8
 8009e1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f022 0204 	bic.w	r2, r2, #4
 8009e2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	691a      	ldr	r2, [r3, #16]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e3e:	e023      	b.n	8009e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fbfe 	bl	800a648 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	021a      	lsls	r2, r3, #8
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e80:	e002      	b.n	8009e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	75fb      	strb	r3, [r7, #23]
      break;
 8009e86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop

08009e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d101      	bne.n	8009eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	e0b4      	b.n	800a022 <HAL_TIM_ConfigClockSource+0x186>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	4b56      	ldr	r3, [pc, #344]	; (800a02c <HAL_TIM_ConfigClockSource+0x190>)
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ef0:	d03e      	beq.n	8009f70 <HAL_TIM_ConfigClockSource+0xd4>
 8009ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ef6:	f200 8087 	bhi.w	800a008 <HAL_TIM_ConfigClockSource+0x16c>
 8009efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efe:	f000 8086 	beq.w	800a00e <HAL_TIM_ConfigClockSource+0x172>
 8009f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f06:	d87f      	bhi.n	800a008 <HAL_TIM_ConfigClockSource+0x16c>
 8009f08:	2b70      	cmp	r3, #112	; 0x70
 8009f0a:	d01a      	beq.n	8009f42 <HAL_TIM_ConfigClockSource+0xa6>
 8009f0c:	2b70      	cmp	r3, #112	; 0x70
 8009f0e:	d87b      	bhi.n	800a008 <HAL_TIM_ConfigClockSource+0x16c>
 8009f10:	2b60      	cmp	r3, #96	; 0x60
 8009f12:	d050      	beq.n	8009fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8009f14:	2b60      	cmp	r3, #96	; 0x60
 8009f16:	d877      	bhi.n	800a008 <HAL_TIM_ConfigClockSource+0x16c>
 8009f18:	2b50      	cmp	r3, #80	; 0x50
 8009f1a:	d03c      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0xfa>
 8009f1c:	2b50      	cmp	r3, #80	; 0x50
 8009f1e:	d873      	bhi.n	800a008 <HAL_TIM_ConfigClockSource+0x16c>
 8009f20:	2b40      	cmp	r3, #64	; 0x40
 8009f22:	d058      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8009f24:	2b40      	cmp	r3, #64	; 0x40
 8009f26:	d86f      	bhi.n	800a008 <HAL_TIM_ConfigClockSource+0x16c>
 8009f28:	2b30      	cmp	r3, #48	; 0x30
 8009f2a:	d064      	beq.n	8009ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8009f2c:	2b30      	cmp	r3, #48	; 0x30
 8009f2e:	d86b      	bhi.n	800a008 <HAL_TIM_ConfigClockSource+0x16c>
 8009f30:	2b20      	cmp	r3, #32
 8009f32:	d060      	beq.n	8009ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	d867      	bhi.n	800a008 <HAL_TIM_ConfigClockSource+0x16c>
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d05c      	beq.n	8009ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8009f3c:	2b10      	cmp	r3, #16
 8009f3e:	d05a      	beq.n	8009ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8009f40:	e062      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f52:	f000 fd71 	bl	800aa38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	609a      	str	r2, [r3, #8]
      break;
 8009f6e:	e04f      	b.n	800a010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f80:	f000 fd5a 	bl	800aa38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f92:	609a      	str	r2, [r3, #8]
      break;
 8009f94:	e03c      	b.n	800a010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f000 fc18 	bl	800a7d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2150      	movs	r1, #80	; 0x50
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fd27 	bl	800aa02 <TIM_ITRx_SetConfig>
      break;
 8009fb4:	e02c      	b.n	800a010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f000 fc74 	bl	800a8b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2160      	movs	r1, #96	; 0x60
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 fd17 	bl	800aa02 <TIM_ITRx_SetConfig>
      break;
 8009fd4:	e01c      	b.n	800a010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f000 fbf8 	bl	800a7d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2140      	movs	r1, #64	; 0x40
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fd07 	bl	800aa02 <TIM_ITRx_SetConfig>
      break;
 8009ff4:	e00c      	b.n	800a010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f000 fcfe 	bl	800aa02 <TIM_ITRx_SetConfig>
      break;
 800a006:	e003      	b.n	800a010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	73fb      	strb	r3, [r7, #15]
      break;
 800a00c:	e000      	b.n	800a010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a00e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a020:	7bfb      	ldrb	r3, [r7, #15]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	fffeff88 	.word	0xfffeff88

0800a030 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b0c      	cmp	r3, #12
 800a042:	d831      	bhi.n	800a0a8 <HAL_TIM_ReadCapturedValue+0x78>
 800a044:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <HAL_TIM_ReadCapturedValue+0x1c>)
 800a046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04a:	bf00      	nop
 800a04c:	0800a081 	.word	0x0800a081
 800a050:	0800a0a9 	.word	0x0800a0a9
 800a054:	0800a0a9 	.word	0x0800a0a9
 800a058:	0800a0a9 	.word	0x0800a0a9
 800a05c:	0800a08b 	.word	0x0800a08b
 800a060:	0800a0a9 	.word	0x0800a0a9
 800a064:	0800a0a9 	.word	0x0800a0a9
 800a068:	0800a0a9 	.word	0x0800a0a9
 800a06c:	0800a095 	.word	0x0800a095
 800a070:	0800a0a9 	.word	0x0800a0a9
 800a074:	0800a0a9 	.word	0x0800a0a9
 800a078:	0800a0a9 	.word	0x0800a0a9
 800a07c:	0800a09f 	.word	0x0800a09f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a086:	60fb      	str	r3, [r7, #12]

      break;
 800a088:	e00f      	b.n	800a0aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	60fb      	str	r3, [r7, #12]

      break;
 800a092:	e00a      	b.n	800a0aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09a:	60fb      	str	r3, [r7, #12]

      break;
 800a09c:	e005      	b.n	800a0aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	60fb      	str	r3, [r7, #12]

      break;
 800a0a6:	e000      	b.n	800a0aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a0a8:	bf00      	nop
  }

  return tmpreg;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a40      	ldr	r2, [pc, #256]	; (800a208 <TIM_Base_SetConfig+0x114>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d013      	beq.n	800a134 <TIM_Base_SetConfig+0x40>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a112:	d00f      	beq.n	800a134 <TIM_Base_SetConfig+0x40>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a3d      	ldr	r2, [pc, #244]	; (800a20c <TIM_Base_SetConfig+0x118>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00b      	beq.n	800a134 <TIM_Base_SetConfig+0x40>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a3c      	ldr	r2, [pc, #240]	; (800a210 <TIM_Base_SetConfig+0x11c>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d007      	beq.n	800a134 <TIM_Base_SetConfig+0x40>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a3b      	ldr	r2, [pc, #236]	; (800a214 <TIM_Base_SetConfig+0x120>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d003      	beq.n	800a134 <TIM_Base_SetConfig+0x40>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a3a      	ldr	r2, [pc, #232]	; (800a218 <TIM_Base_SetConfig+0x124>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d108      	bne.n	800a146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a2f      	ldr	r2, [pc, #188]	; (800a208 <TIM_Base_SetConfig+0x114>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d02b      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a154:	d027      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a2c      	ldr	r2, [pc, #176]	; (800a20c <TIM_Base_SetConfig+0x118>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d023      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a2b      	ldr	r2, [pc, #172]	; (800a210 <TIM_Base_SetConfig+0x11c>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d01f      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a2a      	ldr	r2, [pc, #168]	; (800a214 <TIM_Base_SetConfig+0x120>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d01b      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a29      	ldr	r2, [pc, #164]	; (800a218 <TIM_Base_SetConfig+0x124>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d017      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a28      	ldr	r2, [pc, #160]	; (800a21c <TIM_Base_SetConfig+0x128>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d013      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a27      	ldr	r2, [pc, #156]	; (800a220 <TIM_Base_SetConfig+0x12c>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d00f      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a26      	ldr	r2, [pc, #152]	; (800a224 <TIM_Base_SetConfig+0x130>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d00b      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a25      	ldr	r2, [pc, #148]	; (800a228 <TIM_Base_SetConfig+0x134>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d007      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a24      	ldr	r2, [pc, #144]	; (800a22c <TIM_Base_SetConfig+0x138>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d003      	beq.n	800a1a6 <TIM_Base_SetConfig+0xb2>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a23      	ldr	r2, [pc, #140]	; (800a230 <TIM_Base_SetConfig+0x13c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d108      	bne.n	800a1b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a0a      	ldr	r2, [pc, #40]	; (800a208 <TIM_Base_SetConfig+0x114>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d003      	beq.n	800a1ec <TIM_Base_SetConfig+0xf8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a0c      	ldr	r2, [pc, #48]	; (800a218 <TIM_Base_SetConfig+0x124>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d103      	bne.n	800a1f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	691a      	ldr	r2, [r3, #16]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	615a      	str	r2, [r3, #20]
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	40010000 	.word	0x40010000
 800a20c:	40000400 	.word	0x40000400
 800a210:	40000800 	.word	0x40000800
 800a214:	40000c00 	.word	0x40000c00
 800a218:	40010400 	.word	0x40010400
 800a21c:	40014000 	.word	0x40014000
 800a220:	40014400 	.word	0x40014400
 800a224:	40014800 	.word	0x40014800
 800a228:	40001800 	.word	0x40001800
 800a22c:	40001c00 	.word	0x40001c00
 800a230:	40002000 	.word	0x40002000

0800a234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	f023 0201 	bic.w	r2, r3, #1
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4b2b      	ldr	r3, [pc, #172]	; (800a30c <TIM_OC1_SetConfig+0xd8>)
 800a260:	4013      	ands	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f023 0302 	bic.w	r3, r3, #2
 800a27c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	4313      	orrs	r3, r2
 800a286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a21      	ldr	r2, [pc, #132]	; (800a310 <TIM_OC1_SetConfig+0xdc>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d003      	beq.n	800a298 <TIM_OC1_SetConfig+0x64>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a20      	ldr	r2, [pc, #128]	; (800a314 <TIM_OC1_SetConfig+0xe0>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d10c      	bne.n	800a2b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f023 0308 	bic.w	r3, r3, #8
 800a29e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f023 0304 	bic.w	r3, r3, #4
 800a2b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a16      	ldr	r2, [pc, #88]	; (800a310 <TIM_OC1_SetConfig+0xdc>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d003      	beq.n	800a2c2 <TIM_OC1_SetConfig+0x8e>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a15      	ldr	r2, [pc, #84]	; (800a314 <TIM_OC1_SetConfig+0xe0>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d111      	bne.n	800a2e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	621a      	str	r2, [r3, #32]
}
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	fffeff8f 	.word	0xfffeff8f
 800a310:	40010000 	.word	0x40010000
 800a314:	40010400 	.word	0x40010400

0800a318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f023 0210 	bic.w	r2, r3, #16
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4b2e      	ldr	r3, [pc, #184]	; (800a3fc <TIM_OC2_SetConfig+0xe4>)
 800a344:	4013      	ands	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f023 0320 	bic.w	r3, r3, #32
 800a362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a23      	ldr	r2, [pc, #140]	; (800a400 <TIM_OC2_SetConfig+0xe8>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d003      	beq.n	800a380 <TIM_OC2_SetConfig+0x68>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a22      	ldr	r2, [pc, #136]	; (800a404 <TIM_OC2_SetConfig+0xec>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d10d      	bne.n	800a39c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	011b      	lsls	r3, r3, #4
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	4313      	orrs	r3, r2
 800a392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a39a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a18      	ldr	r2, [pc, #96]	; (800a400 <TIM_OC2_SetConfig+0xe8>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d003      	beq.n	800a3ac <TIM_OC2_SetConfig+0x94>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a17      	ldr	r2, [pc, #92]	; (800a404 <TIM_OC2_SetConfig+0xec>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d113      	bne.n	800a3d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	621a      	str	r2, [r3, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	feff8fff 	.word	0xfeff8fff
 800a400:	40010000 	.word	0x40010000
 800a404:	40010400 	.word	0x40010400

0800a408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4b2d      	ldr	r3, [pc, #180]	; (800a4e8 <TIM_OC3_SetConfig+0xe0>)
 800a434:	4013      	ands	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f023 0303 	bic.w	r3, r3, #3
 800a43e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	021b      	lsls	r3, r3, #8
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a22      	ldr	r2, [pc, #136]	; (800a4ec <TIM_OC3_SetConfig+0xe4>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d003      	beq.n	800a46e <TIM_OC3_SetConfig+0x66>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a21      	ldr	r2, [pc, #132]	; (800a4f0 <TIM_OC3_SetConfig+0xe8>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d10d      	bne.n	800a48a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a17      	ldr	r2, [pc, #92]	; (800a4ec <TIM_OC3_SetConfig+0xe4>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d003      	beq.n	800a49a <TIM_OC3_SetConfig+0x92>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a16      	ldr	r2, [pc, #88]	; (800a4f0 <TIM_OC3_SetConfig+0xe8>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d113      	bne.n	800a4c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	011b      	lsls	r3, r3, #4
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	621a      	str	r2, [r3, #32]
}
 800a4dc:	bf00      	nop
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	fffeff8f 	.word	0xfffeff8f
 800a4ec:	40010000 	.word	0x40010000
 800a4f0:	40010400 	.word	0x40010400

0800a4f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	4b1e      	ldr	r3, [pc, #120]	; (800a598 <TIM_OC4_SetConfig+0xa4>)
 800a520:	4013      	ands	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	021b      	lsls	r3, r3, #8
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a53e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	031b      	lsls	r3, r3, #12
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4313      	orrs	r3, r2
 800a54a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a13      	ldr	r2, [pc, #76]	; (800a59c <TIM_OC4_SetConfig+0xa8>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d003      	beq.n	800a55c <TIM_OC4_SetConfig+0x68>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a12      	ldr	r2, [pc, #72]	; (800a5a0 <TIM_OC4_SetConfig+0xac>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d109      	bne.n	800a570 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	019b      	lsls	r3, r3, #6
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	621a      	str	r2, [r3, #32]
}
 800a58a:	bf00      	nop
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	feff8fff 	.word	0xfeff8fff
 800a59c:	40010000 	.word	0x40010000
 800a5a0:	40010400 	.word	0x40010400

0800a5a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	4b1b      	ldr	r3, [pc, #108]	; (800a63c <TIM_OC5_SetConfig+0x98>)
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a5e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	041b      	lsls	r3, r3, #16
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a12      	ldr	r2, [pc, #72]	; (800a640 <TIM_OC5_SetConfig+0x9c>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d003      	beq.n	800a602 <TIM_OC5_SetConfig+0x5e>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a11      	ldr	r2, [pc, #68]	; (800a644 <TIM_OC5_SetConfig+0xa0>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d109      	bne.n	800a616 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	021b      	lsls	r3, r3, #8
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	4313      	orrs	r3, r2
 800a614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	621a      	str	r2, [r3, #32]
}
 800a630:	bf00      	nop
 800a632:	371c      	adds	r7, #28
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	fffeff8f 	.word	0xfffeff8f
 800a640:	40010000 	.word	0x40010000
 800a644:	40010400 	.word	0x40010400

0800a648 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	4b1c      	ldr	r3, [pc, #112]	; (800a6e4 <TIM_OC6_SetConfig+0x9c>)
 800a674:	4013      	ands	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	021b      	lsls	r3, r3, #8
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	4313      	orrs	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a68a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	051b      	lsls	r3, r3, #20
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	4313      	orrs	r3, r2
 800a696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a13      	ldr	r2, [pc, #76]	; (800a6e8 <TIM_OC6_SetConfig+0xa0>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d003      	beq.n	800a6a8 <TIM_OC6_SetConfig+0x60>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a12      	ldr	r2, [pc, #72]	; (800a6ec <TIM_OC6_SetConfig+0xa4>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d109      	bne.n	800a6bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	029b      	lsls	r3, r3, #10
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	621a      	str	r2, [r3, #32]
}
 800a6d6:	bf00      	nop
 800a6d8:	371c      	adds	r7, #28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	feff8fff 	.word	0xfeff8fff
 800a6e8:	40010000 	.word	0x40010000
 800a6ec:	40010400 	.word	0x40010400

0800a6f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	f023 0201 	bic.w	r2, r3, #1
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4a28      	ldr	r2, [pc, #160]	; (800a7bc <TIM_TI1_SetConfig+0xcc>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d01b      	beq.n	800a756 <TIM_TI1_SetConfig+0x66>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a724:	d017      	beq.n	800a756 <TIM_TI1_SetConfig+0x66>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4a25      	ldr	r2, [pc, #148]	; (800a7c0 <TIM_TI1_SetConfig+0xd0>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d013      	beq.n	800a756 <TIM_TI1_SetConfig+0x66>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	4a24      	ldr	r2, [pc, #144]	; (800a7c4 <TIM_TI1_SetConfig+0xd4>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d00f      	beq.n	800a756 <TIM_TI1_SetConfig+0x66>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	4a23      	ldr	r2, [pc, #140]	; (800a7c8 <TIM_TI1_SetConfig+0xd8>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d00b      	beq.n	800a756 <TIM_TI1_SetConfig+0x66>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4a22      	ldr	r2, [pc, #136]	; (800a7cc <TIM_TI1_SetConfig+0xdc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d007      	beq.n	800a756 <TIM_TI1_SetConfig+0x66>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4a21      	ldr	r2, [pc, #132]	; (800a7d0 <TIM_TI1_SetConfig+0xe0>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d003      	beq.n	800a756 <TIM_TI1_SetConfig+0x66>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4a20      	ldr	r2, [pc, #128]	; (800a7d4 <TIM_TI1_SetConfig+0xe4>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d101      	bne.n	800a75a <TIM_TI1_SetConfig+0x6a>
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <TIM_TI1_SetConfig+0x6c>
 800a75a:	2300      	movs	r3, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d008      	beq.n	800a772 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e003      	b.n	800a77a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f043 0301 	orr.w	r3, r3, #1
 800a778:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	011b      	lsls	r3, r3, #4
 800a786:	b2db      	uxtb	r3, r3
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f023 030a 	bic.w	r3, r3, #10
 800a794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f003 030a 	and.w	r3, r3, #10
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	621a      	str	r2, [r3, #32]
}
 800a7ae:	bf00      	nop
 800a7b0:	371c      	adds	r7, #28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	40010000 	.word	0x40010000
 800a7c0:	40000400 	.word	0x40000400
 800a7c4:	40000800 	.word	0x40000800
 800a7c8:	40000c00 	.word	0x40000c00
 800a7cc:	40010400 	.word	0x40010400
 800a7d0:	40014000 	.word	0x40014000
 800a7d4:	40001800 	.word	0x40001800

0800a7d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6a1b      	ldr	r3, [r3, #32]
 800a7e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	f023 0201 	bic.w	r2, r3, #1
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	011b      	lsls	r3, r3, #4
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f023 030a 	bic.w	r3, r3, #10
 800a814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	621a      	str	r2, [r3, #32]
}
 800a82a:	bf00      	nop
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a836:	b480      	push	{r7}
 800a838:	b087      	sub	sp, #28
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
 800a842:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	f023 0210 	bic.w	r2, r3, #16
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	031b      	lsls	r3, r3, #12
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	4313      	orrs	r3, r2
 800a880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	011b      	lsls	r3, r3, #4
 800a88e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	4313      	orrs	r3, r2
 800a896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	621a      	str	r2, [r3, #32]
}
 800a8a4:	bf00      	nop
 800a8a6:	371c      	adds	r7, #28
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	f023 0210 	bic.w	r2, r3, #16
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	031b      	lsls	r3, r3, #12
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	621a      	str	r2, [r3, #32]
}
 800a904:	bf00      	nop
 800a906:	371c      	adds	r7, #28
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f023 0303 	bic.w	r3, r3, #3
 800a93c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4313      	orrs	r3, r2
 800a944:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a94c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	b2db      	uxtb	r3, r3
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	4313      	orrs	r3, r2
 800a958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a960:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	021b      	lsls	r3, r3, #8
 800a966:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	621a      	str	r2, [r3, #32]
}
 800a97c:	bf00      	nop
 800a97e:	371c      	adds	r7, #28
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a988:	b480      	push	{r7}
 800a98a:	b087      	sub	sp, #28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	021b      	lsls	r3, r3, #8
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	031b      	lsls	r3, r3, #12
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a9da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	031b      	lsls	r3, r3, #12
 800a9e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	621a      	str	r2, [r3, #32]
}
 800a9f6:	bf00      	nop
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b085      	sub	sp, #20
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	f043 0307 	orr.w	r3, r3, #7
 800aa24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	609a      	str	r2, [r3, #8]
}
 800aa2c:	bf00      	nop
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	021a      	lsls	r2, r3, #8
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	431a      	orrs	r2, r3
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	609a      	str	r2, [r3, #8]
}
 800aa6c:	bf00      	nop
 800aa6e:	371c      	adds	r7, #28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f003 031f 	and.w	r3, r3, #31
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a1a      	ldr	r2, [r3, #32]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	43db      	mvns	r3, r3
 800aa9a:	401a      	ands	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6a1a      	ldr	r2, [r3, #32]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f003 031f 	and.w	r3, r3, #31
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	fa01 f303 	lsl.w	r3, r1, r3
 800aab0:	431a      	orrs	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	621a      	str	r2, [r3, #32]
}
 800aab6:	bf00      	nop
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
	...

0800aac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d101      	bne.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aad8:	2302      	movs	r3, #2
 800aada:	e06d      	b.n	800abb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2202      	movs	r2, #2
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a30      	ldr	r2, [pc, #192]	; (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d004      	beq.n	800ab10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a2f      	ldr	r2, [pc, #188]	; (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d108      	bne.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a20      	ldr	r2, [pc, #128]	; (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d022      	beq.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab4e:	d01d      	beq.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a1d      	ldr	r2, [pc, #116]	; (800abcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d018      	beq.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a1c      	ldr	r2, [pc, #112]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d013      	beq.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a1a      	ldr	r2, [pc, #104]	; (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d00e      	beq.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a15      	ldr	r2, [pc, #84]	; (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d009      	beq.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a16      	ldr	r2, [pc, #88]	; (800abd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d004      	beq.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a15      	ldr	r2, [pc, #84]	; (800abdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d10c      	bne.n	800aba6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	40010000 	.word	0x40010000
 800abc8:	40010400 	.word	0x40010400
 800abcc:	40000400 	.word	0x40000400
 800abd0:	40000800 	.word	0x40000800
 800abd4:	40000c00 	.word	0x40000c00
 800abd8:	40014000 	.word	0x40014000
 800abdc:	40001800 	.word	0x40001800

0800abe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d101      	bne.n	800abfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abf8:	2302      	movs	r3, #2
 800abfa:	e065      	b.n	800acc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	041b      	lsls	r3, r3, #16
 800ac72:	4313      	orrs	r3, r2
 800ac74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a16      	ldr	r2, [pc, #88]	; (800acd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d004      	beq.n	800ac8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a14      	ldr	r2, [pc, #80]	; (800acd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d115      	bne.n	800acb6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	051b      	lsls	r3, r3, #20
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	69db      	ldr	r3, [r3, #28]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr
 800acd4:	40010000 	.word	0x40010000
 800acd8:	40010400 	.word	0x40010400

0800acdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e040      	b.n	800adac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d106      	bne.n	800ad40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7f8 fbfa 	bl	8003534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2224      	movs	r2, #36	; 0x24
 800ad44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f022 0201 	bic.w	r2, r2, #1
 800ad54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fc2a 	bl	800b5b0 <UART_SetConfig>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d101      	bne.n	800ad66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e022      	b.n	800adac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fe82 	bl	800ba78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	689a      	ldr	r2, [r3, #8]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f042 0201 	orr.w	r2, r2, #1
 800ada2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 ff09 	bl	800bbbc <UART_CheckIdleState>
 800adaa:	4603      	mov	r3, r0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08a      	sub	sp, #40	; 0x28
 800adb8:	af02      	add	r7, sp, #8
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	4613      	mov	r3, r2
 800adc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adc8:	2b20      	cmp	r3, #32
 800adca:	d171      	bne.n	800aeb0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_UART_Transmit+0x24>
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e06a      	b.n	800aeb2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2221      	movs	r2, #33	; 0x21
 800ade8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adea:	f7fa fd3b 	bl	8005864 <HAL_GetTick>
 800adee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	88fa      	ldrh	r2, [r7, #6]
 800adf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	88fa      	ldrh	r2, [r7, #6]
 800adfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae08:	d108      	bne.n	800ae1c <HAL_UART_Transmit+0x68>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d104      	bne.n	800ae1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	61bb      	str	r3, [r7, #24]
 800ae1a:	e003      	b.n	800ae24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae20:	2300      	movs	r3, #0
 800ae22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae24:	e02c      	b.n	800ae80 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2180      	movs	r1, #128	; 0x80
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 fefa 	bl	800bc2a <UART_WaitOnFlagUntilTimeout>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e038      	b.n	800aeb2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10b      	bne.n	800ae5e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	3302      	adds	r3, #2
 800ae5a:	61bb      	str	r3, [r7, #24]
 800ae5c:	e007      	b.n	800ae6e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	3b01      	subs	r3, #1
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1cc      	bne.n	800ae26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	2200      	movs	r2, #0
 800ae94:	2140      	movs	r1, #64	; 0x40
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f000 fec7 	bl	800bc2a <UART_WaitOnFlagUntilTimeout>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e005      	b.n	800aeb2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	e000      	b.n	800aeb2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800aeb0:	2302      	movs	r3, #2
  }
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3720      	adds	r7, #32
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b08a      	sub	sp, #40	; 0x28
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	4613      	mov	r3, r2
 800aec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d132      	bne.n	800af38 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <HAL_UART_Receive_IT+0x24>
 800aed8:	88fb      	ldrh	r3, [r7, #6]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e02b      	b.n	800af3a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d018      	beq.n	800af28 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	e853 3f00 	ldrex	r3, [r3]
 800af02:	613b      	str	r3, [r7, #16]
   return(result);
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af0a:	627b      	str	r3, [r7, #36]	; 0x24
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	461a      	mov	r2, r3
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	623b      	str	r3, [r7, #32]
 800af16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af18:	69f9      	ldr	r1, [r7, #28]
 800af1a:	6a3a      	ldr	r2, [r7, #32]
 800af1c:	e841 2300 	strex	r3, r2, [r1]
 800af20:	61bb      	str	r3, [r7, #24]
   return(result);
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1e6      	bne.n	800aef6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	461a      	mov	r2, r3
 800af2c:	68b9      	ldr	r1, [r7, #8]
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f000 ff42 	bl	800bdb8 <UART_Start_Receive_IT>
 800af34:	4603      	mov	r3, r0
 800af36:	e000      	b.n	800af3a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800af38:	2302      	movs	r3, #2
  }
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3728      	adds	r7, #40	; 0x28
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b08a      	sub	sp, #40	; 0x28
 800af46:	af00      	add	r7, sp, #0
 800af48:	60f8      	str	r0, [r7, #12]
 800af4a:	60b9      	str	r1, [r7, #8]
 800af4c:	4613      	mov	r3, r2
 800af4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af56:	2b20      	cmp	r3, #32
 800af58:	d132      	bne.n	800afc0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <HAL_UART_Receive_DMA+0x24>
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e02b      	b.n	800afc2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d018      	beq.n	800afb0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	e853 3f00 	ldrex	r3, [r3]
 800af8a:	613b      	str	r3, [r7, #16]
   return(result);
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af92:	627b      	str	r3, [r7, #36]	; 0x24
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	623b      	str	r3, [r7, #32]
 800af9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	69f9      	ldr	r1, [r7, #28]
 800afa2:	6a3a      	ldr	r2, [r7, #32]
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	61bb      	str	r3, [r7, #24]
   return(result);
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e6      	bne.n	800af7e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800afb0:	88fb      	ldrh	r3, [r7, #6]
 800afb2:	461a      	mov	r2, r3
 800afb4:	68b9      	ldr	r1, [r7, #8]
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f000 ffc4 	bl	800bf44 <UART_Start_Receive_DMA>
 800afbc:	4603      	mov	r3, r0
 800afbe:	e000      	b.n	800afc2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800afc0:	2302      	movs	r3, #2
  }
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3728      	adds	r7, #40	; 0x28
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b0ba      	sub	sp, #232	; 0xe8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	69db      	ldr	r3, [r3, #28]
 800afda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aff2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aff6:	f640 030f 	movw	r3, #2063	; 0x80f
 800affa:	4013      	ands	r3, r2
 800affc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b004:	2b00      	cmp	r3, #0
 800b006:	d115      	bne.n	800b034 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00f      	beq.n	800b034 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b018:	f003 0320 	and.w	r3, r3, #32
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 8297 	beq.w	800b558 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	4798      	blx	r3
      }
      return;
 800b032:	e291      	b.n	800b558 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 8117 	beq.w	800b26c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b03e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b04a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b04e:	4b85      	ldr	r3, [pc, #532]	; (800b264 <HAL_UART_IRQHandler+0x298>)
 800b050:	4013      	ands	r3, r2
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 810a 	beq.w	800b26c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d011      	beq.n	800b088 <HAL_UART_IRQHandler+0xbc>
 800b064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00b      	beq.n	800b088 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2201      	movs	r2, #1
 800b076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b07e:	f043 0201 	orr.w	r2, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b08c:	f003 0302 	and.w	r3, r3, #2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d011      	beq.n	800b0b8 <HAL_UART_IRQHandler+0xec>
 800b094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00b      	beq.n	800b0b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2202      	movs	r2, #2
 800b0a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ae:	f043 0204 	orr.w	r2, r3, #4
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d011      	beq.n	800b0e8 <HAL_UART_IRQHandler+0x11c>
 800b0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00b      	beq.n	800b0e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2204      	movs	r2, #4
 800b0d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0de:	f043 0202 	orr.w	r2, r3, #2
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ec:	f003 0308 	and.w	r3, r3, #8
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d017      	beq.n	800b124 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f8:	f003 0320 	and.w	r3, r3, #32
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d105      	bne.n	800b10c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b104:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00b      	beq.n	800b124 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2208      	movs	r2, #8
 800b112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b11a:	f043 0208 	orr.w	r2, r3, #8
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d012      	beq.n	800b156 <HAL_UART_IRQHandler+0x18a>
 800b130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00c      	beq.n	800b156 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b14c:	f043 0220 	orr.w	r2, r3, #32
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 81fd 	beq.w	800b55c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b166:	f003 0320 	and.w	r3, r3, #32
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00d      	beq.n	800b18a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b00      	cmp	r3, #0
 800b178:	d007      	beq.n	800b18a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19e:	2b40      	cmp	r3, #64	; 0x40
 800b1a0:	d005      	beq.n	800b1ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d04f      	beq.n	800b24e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 ff8e 	bl	800c0d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1be:	2b40      	cmp	r3, #64	; 0x40
 800b1c0:	d141      	bne.n	800b246 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3308      	adds	r3, #8
 800b1c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b1fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1d9      	bne.n	800b1c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b212:	2b00      	cmp	r3, #0
 800b214:	d013      	beq.n	800b23e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b21a:	4a13      	ldr	r2, [pc, #76]	; (800b268 <HAL_UART_IRQHandler+0x29c>)
 800b21c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b222:	4618      	mov	r0, r3
 800b224:	f7fa fdae 	bl	8005d84 <HAL_DMA_Abort_IT>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d017      	beq.n	800b25e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b23c:	e00f      	b.n	800b25e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7f7 f9bc 	bl	80025bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b244:	e00b      	b.n	800b25e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7f7 f9b8 	bl	80025bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b24c:	e007      	b.n	800b25e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7f7 f9b4 	bl	80025bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b25c:	e17e      	b.n	800b55c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b25e:	bf00      	nop
    return;
 800b260:	e17c      	b.n	800b55c <HAL_UART_IRQHandler+0x590>
 800b262:	bf00      	nop
 800b264:	04000120 	.word	0x04000120
 800b268:	0800c37d 	.word	0x0800c37d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b270:	2b01      	cmp	r3, #1
 800b272:	f040 814c 	bne.w	800b50e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b27a:	f003 0310 	and.w	r3, r3, #16
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 8145 	beq.w	800b50e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b288:	f003 0310 	and.w	r3, r3, #16
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 813e 	beq.w	800b50e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2210      	movs	r2, #16
 800b298:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2a4:	2b40      	cmp	r3, #64	; 0x40
 800b2a6:	f040 80b6 	bne.w	800b416 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f000 8150 	beq.w	800b560 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	f080 8148 	bcs.w	800b560 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2e4:	f000 8086 	beq.w	800b3f4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b2fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	461a      	mov	r2, r3
 800b30e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b316:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b31e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b322:	e841 2300 	strex	r3, r2, [r1]
 800b326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b32a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1da      	bne.n	800b2e8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3308      	adds	r3, #8
 800b338:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b344:	f023 0301 	bic.w	r3, r3, #1
 800b348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3308      	adds	r3, #8
 800b352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b356:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b35a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b35e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b362:	e841 2300 	strex	r3, r2, [r1]
 800b366:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1e1      	bne.n	800b332 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	3308      	adds	r3, #8
 800b374:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b37e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3308      	adds	r3, #8
 800b38e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b392:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b394:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b39a:	e841 2300 	strex	r3, r2, [r1]
 800b39e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1e3      	bne.n	800b36e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3bc:	e853 3f00 	ldrex	r3, [r3]
 800b3c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3c4:	f023 0310 	bic.w	r3, r3, #16
 800b3c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3de:	e841 2300 	strex	r3, r2, [r1]
 800b3e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e4      	bne.n	800b3b4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fa fc58 	bl	8005ca4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2202      	movs	r2, #2
 800b3f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b406:	b29b      	uxth	r3, r3
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f8c2 	bl	800b598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b414:	e0a4      	b.n	800b560 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b422:	b29b      	uxth	r3, r3
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b430:	b29b      	uxth	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 8096 	beq.w	800b564 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8091 	beq.w	800b564 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44a:	e853 3f00 	ldrex	r3, [r3]
 800b44e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b464:	647b      	str	r3, [r7, #68]	; 0x44
 800b466:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b46a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b46c:	e841 2300 	strex	r3, r2, [r1]
 800b470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1e4      	bne.n	800b442 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3308      	adds	r3, #8
 800b47e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	e853 3f00 	ldrex	r3, [r3]
 800b486:	623b      	str	r3, [r7, #32]
   return(result);
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	f023 0301 	bic.w	r3, r3, #1
 800b48e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3308      	adds	r3, #8
 800b498:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b49c:	633a      	str	r2, [r7, #48]	; 0x30
 800b49e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a4:	e841 2300 	strex	r3, r2, [r1]
 800b4a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1e3      	bne.n	800b478 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2220      	movs	r2, #32
 800b4b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f023 0310 	bic.w	r3, r3, #16
 800b4d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b4e6:	61fb      	str	r3, [r7, #28]
 800b4e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	69b9      	ldr	r1, [r7, #24]
 800b4ec:	69fa      	ldr	r2, [r7, #28]
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e4      	bne.n	800b4c4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f846 	bl	800b598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b50c:	e02a      	b.n	800b564 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00e      	beq.n	800b538 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b51a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b522:	2b00      	cmp	r3, #0
 800b524:	d008      	beq.n	800b538 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d01c      	beq.n	800b568 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	4798      	blx	r3
    }
    return;
 800b536:	e017      	b.n	800b568 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	d012      	beq.n	800b56a <HAL_UART_IRQHandler+0x59e>
 800b544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00c      	beq.n	800b56a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 ff29 	bl	800c3a8 <UART_EndTransmit_IT>
    return;
 800b556:	e008      	b.n	800b56a <HAL_UART_IRQHandler+0x59e>
      return;
 800b558:	bf00      	nop
 800b55a:	e006      	b.n	800b56a <HAL_UART_IRQHandler+0x59e>
    return;
 800b55c:	bf00      	nop
 800b55e:	e004      	b.n	800b56a <HAL_UART_IRQHandler+0x59e>
      return;
 800b560:	bf00      	nop
 800b562:	e002      	b.n	800b56a <HAL_UART_IRQHandler+0x59e>
      return;
 800b564:	bf00      	nop
 800b566:	e000      	b.n	800b56a <HAL_UART_IRQHandler+0x59e>
    return;
 800b568:	bf00      	nop
  }

}
 800b56a:	37e8      	adds	r7, #232	; 0xe8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4ba6      	ldr	r3, [pc, #664]	; (800b874 <UART_SetConfig+0x2c4>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6812      	ldr	r2, [r2, #0]
 800b5e2:	6979      	ldr	r1, [r7, #20]
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a1b      	ldr	r3, [r3, #32]
 800b608:	697a      	ldr	r2, [r7, #20]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	430a      	orrs	r2, r1
 800b620:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a94      	ldr	r2, [pc, #592]	; (800b878 <UART_SetConfig+0x2c8>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d120      	bne.n	800b66e <UART_SetConfig+0xbe>
 800b62c:	4b93      	ldr	r3, [pc, #588]	; (800b87c <UART_SetConfig+0x2cc>)
 800b62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	2b03      	cmp	r3, #3
 800b638:	d816      	bhi.n	800b668 <UART_SetConfig+0xb8>
 800b63a:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <UART_SetConfig+0x90>)
 800b63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b640:	0800b651 	.word	0x0800b651
 800b644:	0800b65d 	.word	0x0800b65d
 800b648:	0800b657 	.word	0x0800b657
 800b64c:	0800b663 	.word	0x0800b663
 800b650:	2301      	movs	r3, #1
 800b652:	77fb      	strb	r3, [r7, #31]
 800b654:	e150      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b656:	2302      	movs	r3, #2
 800b658:	77fb      	strb	r3, [r7, #31]
 800b65a:	e14d      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b65c:	2304      	movs	r3, #4
 800b65e:	77fb      	strb	r3, [r7, #31]
 800b660:	e14a      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b662:	2308      	movs	r3, #8
 800b664:	77fb      	strb	r3, [r7, #31]
 800b666:	e147      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b668:	2310      	movs	r3, #16
 800b66a:	77fb      	strb	r3, [r7, #31]
 800b66c:	e144      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a83      	ldr	r2, [pc, #524]	; (800b880 <UART_SetConfig+0x2d0>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d132      	bne.n	800b6de <UART_SetConfig+0x12e>
 800b678:	4b80      	ldr	r3, [pc, #512]	; (800b87c <UART_SetConfig+0x2cc>)
 800b67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b67e:	f003 030c 	and.w	r3, r3, #12
 800b682:	2b0c      	cmp	r3, #12
 800b684:	d828      	bhi.n	800b6d8 <UART_SetConfig+0x128>
 800b686:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <UART_SetConfig+0xdc>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6c1 	.word	0x0800b6c1
 800b690:	0800b6d9 	.word	0x0800b6d9
 800b694:	0800b6d9 	.word	0x0800b6d9
 800b698:	0800b6d9 	.word	0x0800b6d9
 800b69c:	0800b6cd 	.word	0x0800b6cd
 800b6a0:	0800b6d9 	.word	0x0800b6d9
 800b6a4:	0800b6d9 	.word	0x0800b6d9
 800b6a8:	0800b6d9 	.word	0x0800b6d9
 800b6ac:	0800b6c7 	.word	0x0800b6c7
 800b6b0:	0800b6d9 	.word	0x0800b6d9
 800b6b4:	0800b6d9 	.word	0x0800b6d9
 800b6b8:	0800b6d9 	.word	0x0800b6d9
 800b6bc:	0800b6d3 	.word	0x0800b6d3
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	77fb      	strb	r3, [r7, #31]
 800b6c4:	e118      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	77fb      	strb	r3, [r7, #31]
 800b6ca:	e115      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b6cc:	2304      	movs	r3, #4
 800b6ce:	77fb      	strb	r3, [r7, #31]
 800b6d0:	e112      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b6d2:	2308      	movs	r3, #8
 800b6d4:	77fb      	strb	r3, [r7, #31]
 800b6d6:	e10f      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b6d8:	2310      	movs	r3, #16
 800b6da:	77fb      	strb	r3, [r7, #31]
 800b6dc:	e10c      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a68      	ldr	r2, [pc, #416]	; (800b884 <UART_SetConfig+0x2d4>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d120      	bne.n	800b72a <UART_SetConfig+0x17a>
 800b6e8:	4b64      	ldr	r3, [pc, #400]	; (800b87c <UART_SetConfig+0x2cc>)
 800b6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b6f2:	2b30      	cmp	r3, #48	; 0x30
 800b6f4:	d013      	beq.n	800b71e <UART_SetConfig+0x16e>
 800b6f6:	2b30      	cmp	r3, #48	; 0x30
 800b6f8:	d814      	bhi.n	800b724 <UART_SetConfig+0x174>
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d009      	beq.n	800b712 <UART_SetConfig+0x162>
 800b6fe:	2b20      	cmp	r3, #32
 800b700:	d810      	bhi.n	800b724 <UART_SetConfig+0x174>
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <UART_SetConfig+0x15c>
 800b706:	2b10      	cmp	r3, #16
 800b708:	d006      	beq.n	800b718 <UART_SetConfig+0x168>
 800b70a:	e00b      	b.n	800b724 <UART_SetConfig+0x174>
 800b70c:	2300      	movs	r3, #0
 800b70e:	77fb      	strb	r3, [r7, #31]
 800b710:	e0f2      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b712:	2302      	movs	r3, #2
 800b714:	77fb      	strb	r3, [r7, #31]
 800b716:	e0ef      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b718:	2304      	movs	r3, #4
 800b71a:	77fb      	strb	r3, [r7, #31]
 800b71c:	e0ec      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b71e:	2308      	movs	r3, #8
 800b720:	77fb      	strb	r3, [r7, #31]
 800b722:	e0e9      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b724:	2310      	movs	r3, #16
 800b726:	77fb      	strb	r3, [r7, #31]
 800b728:	e0e6      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a56      	ldr	r2, [pc, #344]	; (800b888 <UART_SetConfig+0x2d8>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d120      	bne.n	800b776 <UART_SetConfig+0x1c6>
 800b734:	4b51      	ldr	r3, [pc, #324]	; (800b87c <UART_SetConfig+0x2cc>)
 800b736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b73a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b73e:	2bc0      	cmp	r3, #192	; 0xc0
 800b740:	d013      	beq.n	800b76a <UART_SetConfig+0x1ba>
 800b742:	2bc0      	cmp	r3, #192	; 0xc0
 800b744:	d814      	bhi.n	800b770 <UART_SetConfig+0x1c0>
 800b746:	2b80      	cmp	r3, #128	; 0x80
 800b748:	d009      	beq.n	800b75e <UART_SetConfig+0x1ae>
 800b74a:	2b80      	cmp	r3, #128	; 0x80
 800b74c:	d810      	bhi.n	800b770 <UART_SetConfig+0x1c0>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d002      	beq.n	800b758 <UART_SetConfig+0x1a8>
 800b752:	2b40      	cmp	r3, #64	; 0x40
 800b754:	d006      	beq.n	800b764 <UART_SetConfig+0x1b4>
 800b756:	e00b      	b.n	800b770 <UART_SetConfig+0x1c0>
 800b758:	2300      	movs	r3, #0
 800b75a:	77fb      	strb	r3, [r7, #31]
 800b75c:	e0cc      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b75e:	2302      	movs	r3, #2
 800b760:	77fb      	strb	r3, [r7, #31]
 800b762:	e0c9      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b764:	2304      	movs	r3, #4
 800b766:	77fb      	strb	r3, [r7, #31]
 800b768:	e0c6      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b76a:	2308      	movs	r3, #8
 800b76c:	77fb      	strb	r3, [r7, #31]
 800b76e:	e0c3      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b770:	2310      	movs	r3, #16
 800b772:	77fb      	strb	r3, [r7, #31]
 800b774:	e0c0      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a44      	ldr	r2, [pc, #272]	; (800b88c <UART_SetConfig+0x2dc>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d125      	bne.n	800b7cc <UART_SetConfig+0x21c>
 800b780:	4b3e      	ldr	r3, [pc, #248]	; (800b87c <UART_SetConfig+0x2cc>)
 800b782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b78a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b78e:	d017      	beq.n	800b7c0 <UART_SetConfig+0x210>
 800b790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b794:	d817      	bhi.n	800b7c6 <UART_SetConfig+0x216>
 800b796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b79a:	d00b      	beq.n	800b7b4 <UART_SetConfig+0x204>
 800b79c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7a0:	d811      	bhi.n	800b7c6 <UART_SetConfig+0x216>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <UART_SetConfig+0x1fe>
 800b7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7aa:	d006      	beq.n	800b7ba <UART_SetConfig+0x20a>
 800b7ac:	e00b      	b.n	800b7c6 <UART_SetConfig+0x216>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	77fb      	strb	r3, [r7, #31]
 800b7b2:	e0a1      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	77fb      	strb	r3, [r7, #31]
 800b7b8:	e09e      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b7ba:	2304      	movs	r3, #4
 800b7bc:	77fb      	strb	r3, [r7, #31]
 800b7be:	e09b      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b7c0:	2308      	movs	r3, #8
 800b7c2:	77fb      	strb	r3, [r7, #31]
 800b7c4:	e098      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b7c6:	2310      	movs	r3, #16
 800b7c8:	77fb      	strb	r3, [r7, #31]
 800b7ca:	e095      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a2f      	ldr	r2, [pc, #188]	; (800b890 <UART_SetConfig+0x2e0>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d125      	bne.n	800b822 <UART_SetConfig+0x272>
 800b7d6:	4b29      	ldr	r3, [pc, #164]	; (800b87c <UART_SetConfig+0x2cc>)
 800b7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b7e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7e4:	d017      	beq.n	800b816 <UART_SetConfig+0x266>
 800b7e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7ea:	d817      	bhi.n	800b81c <UART_SetConfig+0x26c>
 800b7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f0:	d00b      	beq.n	800b80a <UART_SetConfig+0x25a>
 800b7f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f6:	d811      	bhi.n	800b81c <UART_SetConfig+0x26c>
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <UART_SetConfig+0x254>
 800b7fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b800:	d006      	beq.n	800b810 <UART_SetConfig+0x260>
 800b802:	e00b      	b.n	800b81c <UART_SetConfig+0x26c>
 800b804:	2301      	movs	r3, #1
 800b806:	77fb      	strb	r3, [r7, #31]
 800b808:	e076      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b80a:	2302      	movs	r3, #2
 800b80c:	77fb      	strb	r3, [r7, #31]
 800b80e:	e073      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b810:	2304      	movs	r3, #4
 800b812:	77fb      	strb	r3, [r7, #31]
 800b814:	e070      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b816:	2308      	movs	r3, #8
 800b818:	77fb      	strb	r3, [r7, #31]
 800b81a:	e06d      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b81c:	2310      	movs	r3, #16
 800b81e:	77fb      	strb	r3, [r7, #31]
 800b820:	e06a      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a1b      	ldr	r2, [pc, #108]	; (800b894 <UART_SetConfig+0x2e4>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d138      	bne.n	800b89e <UART_SetConfig+0x2ee>
 800b82c:	4b13      	ldr	r3, [pc, #76]	; (800b87c <UART_SetConfig+0x2cc>)
 800b82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b832:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b836:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b83a:	d017      	beq.n	800b86c <UART_SetConfig+0x2bc>
 800b83c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b840:	d82a      	bhi.n	800b898 <UART_SetConfig+0x2e8>
 800b842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b846:	d00b      	beq.n	800b860 <UART_SetConfig+0x2b0>
 800b848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b84c:	d824      	bhi.n	800b898 <UART_SetConfig+0x2e8>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <UART_SetConfig+0x2aa>
 800b852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b856:	d006      	beq.n	800b866 <UART_SetConfig+0x2b6>
 800b858:	e01e      	b.n	800b898 <UART_SetConfig+0x2e8>
 800b85a:	2300      	movs	r3, #0
 800b85c:	77fb      	strb	r3, [r7, #31]
 800b85e:	e04b      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b860:	2302      	movs	r3, #2
 800b862:	77fb      	strb	r3, [r7, #31]
 800b864:	e048      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b866:	2304      	movs	r3, #4
 800b868:	77fb      	strb	r3, [r7, #31]
 800b86a:	e045      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b86c:	2308      	movs	r3, #8
 800b86e:	77fb      	strb	r3, [r7, #31]
 800b870:	e042      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b872:	bf00      	nop
 800b874:	efff69f3 	.word	0xefff69f3
 800b878:	40011000 	.word	0x40011000
 800b87c:	40023800 	.word	0x40023800
 800b880:	40004400 	.word	0x40004400
 800b884:	40004800 	.word	0x40004800
 800b888:	40004c00 	.word	0x40004c00
 800b88c:	40005000 	.word	0x40005000
 800b890:	40011400 	.word	0x40011400
 800b894:	40007800 	.word	0x40007800
 800b898:	2310      	movs	r3, #16
 800b89a:	77fb      	strb	r3, [r7, #31]
 800b89c:	e02c      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a72      	ldr	r2, [pc, #456]	; (800ba6c <UART_SetConfig+0x4bc>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d125      	bne.n	800b8f4 <UART_SetConfig+0x344>
 800b8a8:	4b71      	ldr	r3, [pc, #452]	; (800ba70 <UART_SetConfig+0x4c0>)
 800b8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b8b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b8b6:	d017      	beq.n	800b8e8 <UART_SetConfig+0x338>
 800b8b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b8bc:	d817      	bhi.n	800b8ee <UART_SetConfig+0x33e>
 800b8be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8c2:	d00b      	beq.n	800b8dc <UART_SetConfig+0x32c>
 800b8c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8c8:	d811      	bhi.n	800b8ee <UART_SetConfig+0x33e>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <UART_SetConfig+0x326>
 800b8ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8d2:	d006      	beq.n	800b8e2 <UART_SetConfig+0x332>
 800b8d4:	e00b      	b.n	800b8ee <UART_SetConfig+0x33e>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	77fb      	strb	r3, [r7, #31]
 800b8da:	e00d      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b8dc:	2302      	movs	r3, #2
 800b8de:	77fb      	strb	r3, [r7, #31]
 800b8e0:	e00a      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b8e2:	2304      	movs	r3, #4
 800b8e4:	77fb      	strb	r3, [r7, #31]
 800b8e6:	e007      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b8e8:	2308      	movs	r3, #8
 800b8ea:	77fb      	strb	r3, [r7, #31]
 800b8ec:	e004      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b8ee:	2310      	movs	r3, #16
 800b8f0:	77fb      	strb	r3, [r7, #31]
 800b8f2:	e001      	b.n	800b8f8 <UART_SetConfig+0x348>
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b900:	d15b      	bne.n	800b9ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b902:	7ffb      	ldrb	r3, [r7, #31]
 800b904:	2b08      	cmp	r3, #8
 800b906:	d828      	bhi.n	800b95a <UART_SetConfig+0x3aa>
 800b908:	a201      	add	r2, pc, #4	; (adr r2, 800b910 <UART_SetConfig+0x360>)
 800b90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90e:	bf00      	nop
 800b910:	0800b935 	.word	0x0800b935
 800b914:	0800b93d 	.word	0x0800b93d
 800b918:	0800b945 	.word	0x0800b945
 800b91c:	0800b95b 	.word	0x0800b95b
 800b920:	0800b94b 	.word	0x0800b94b
 800b924:	0800b95b 	.word	0x0800b95b
 800b928:	0800b95b 	.word	0x0800b95b
 800b92c:	0800b95b 	.word	0x0800b95b
 800b930:	0800b953 	.word	0x0800b953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b934:	f7fc f90a 	bl	8007b4c <HAL_RCC_GetPCLK1Freq>
 800b938:	61b8      	str	r0, [r7, #24]
        break;
 800b93a:	e013      	b.n	800b964 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b93c:	f7fc f91a 	bl	8007b74 <HAL_RCC_GetPCLK2Freq>
 800b940:	61b8      	str	r0, [r7, #24]
        break;
 800b942:	e00f      	b.n	800b964 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b944:	4b4b      	ldr	r3, [pc, #300]	; (800ba74 <UART_SetConfig+0x4c4>)
 800b946:	61bb      	str	r3, [r7, #24]
        break;
 800b948:	e00c      	b.n	800b964 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b94a:	f7fc f82d 	bl	80079a8 <HAL_RCC_GetSysClockFreq>
 800b94e:	61b8      	str	r0, [r7, #24]
        break;
 800b950:	e008      	b.n	800b964 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b956:	61bb      	str	r3, [r7, #24]
        break;
 800b958:	e004      	b.n	800b964 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	77bb      	strb	r3, [r7, #30]
        break;
 800b962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d074      	beq.n	800ba54 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	005a      	lsls	r2, r3, #1
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	085b      	lsrs	r3, r3, #1
 800b974:	441a      	add	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	2b0f      	cmp	r3, #15
 800b984:	d916      	bls.n	800b9b4 <UART_SetConfig+0x404>
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b98c:	d212      	bcs.n	800b9b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	b29b      	uxth	r3, r3
 800b992:	f023 030f 	bic.w	r3, r3, #15
 800b996:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	085b      	lsrs	r3, r3, #1
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	f003 0307 	and.w	r3, r3, #7
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	89fb      	ldrh	r3, [r7, #14]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	89fa      	ldrh	r2, [r7, #14]
 800b9b0:	60da      	str	r2, [r3, #12]
 800b9b2:	e04f      	b.n	800ba54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	77bb      	strb	r3, [r7, #30]
 800b9b8:	e04c      	b.n	800ba54 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9ba:	7ffb      	ldrb	r3, [r7, #31]
 800b9bc:	2b08      	cmp	r3, #8
 800b9be:	d828      	bhi.n	800ba12 <UART_SetConfig+0x462>
 800b9c0:	a201      	add	r2, pc, #4	; (adr r2, 800b9c8 <UART_SetConfig+0x418>)
 800b9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c6:	bf00      	nop
 800b9c8:	0800b9ed 	.word	0x0800b9ed
 800b9cc:	0800b9f5 	.word	0x0800b9f5
 800b9d0:	0800b9fd 	.word	0x0800b9fd
 800b9d4:	0800ba13 	.word	0x0800ba13
 800b9d8:	0800ba03 	.word	0x0800ba03
 800b9dc:	0800ba13 	.word	0x0800ba13
 800b9e0:	0800ba13 	.word	0x0800ba13
 800b9e4:	0800ba13 	.word	0x0800ba13
 800b9e8:	0800ba0b 	.word	0x0800ba0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9ec:	f7fc f8ae 	bl	8007b4c <HAL_RCC_GetPCLK1Freq>
 800b9f0:	61b8      	str	r0, [r7, #24]
        break;
 800b9f2:	e013      	b.n	800ba1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9f4:	f7fc f8be 	bl	8007b74 <HAL_RCC_GetPCLK2Freq>
 800b9f8:	61b8      	str	r0, [r7, #24]
        break;
 800b9fa:	e00f      	b.n	800ba1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9fc:	4b1d      	ldr	r3, [pc, #116]	; (800ba74 <UART_SetConfig+0x4c4>)
 800b9fe:	61bb      	str	r3, [r7, #24]
        break;
 800ba00:	e00c      	b.n	800ba1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba02:	f7fb ffd1 	bl	80079a8 <HAL_RCC_GetSysClockFreq>
 800ba06:	61b8      	str	r0, [r7, #24]
        break;
 800ba08:	e008      	b.n	800ba1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0e:	61bb      	str	r3, [r7, #24]
        break;
 800ba10:	e004      	b.n	800ba1c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	77bb      	strb	r3, [r7, #30]
        break;
 800ba1a:	bf00      	nop
    }

    if (pclk != 0U)
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d018      	beq.n	800ba54 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	085a      	lsrs	r2, r3, #1
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	441a      	add	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b0f      	cmp	r3, #15
 800ba3a:	d909      	bls.n	800ba50 <UART_SetConfig+0x4a0>
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba42:	d205      	bcs.n	800ba50 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60da      	str	r2, [r3, #12]
 800ba4e:	e001      	b.n	800ba54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ba60:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3720      	adds	r7, #32
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	40007c00 	.word	0x40007c00
 800ba70:	40023800 	.word	0x40023800
 800ba74:	00f42400 	.word	0x00f42400

0800ba78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00a      	beq.n	800baa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	430a      	orrs	r2, r1
 800baa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa6:	f003 0302 	and.w	r3, r3, #2
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	430a      	orrs	r2, r1
 800bac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	f003 0304 	and.w	r3, r3, #4
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00a      	beq.n	800bae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	430a      	orrs	r2, r1
 800bae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baea:	f003 0308 	and.w	r3, r3, #8
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00a      	beq.n	800bb08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	430a      	orrs	r2, r1
 800bb06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0c:	f003 0310 	and.w	r3, r3, #16
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00a      	beq.n	800bb2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	430a      	orrs	r2, r1
 800bb28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2e:	f003 0320 	and.w	r3, r3, #32
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00a      	beq.n	800bb4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	430a      	orrs	r2, r1
 800bb4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d01a      	beq.n	800bb8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb76:	d10a      	bne.n	800bb8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	430a      	orrs	r2, r1
 800bbae:	605a      	str	r2, [r3, #4]
  }
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af02      	add	r7, sp, #8
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbcc:	f7f9 fe4a 	bl	8005864 <HAL_GetTick>
 800bbd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0308 	and.w	r3, r3, #8
 800bbdc:	2b08      	cmp	r3, #8
 800bbde:	d10e      	bne.n	800bbfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f81b 	bl	800bc2a <UART_WaitOnFlagUntilTimeout>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	e011      	b.n	800bc22 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2220      	movs	r2, #32
 800bc02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2220      	movs	r2, #32
 800bc08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b09c      	sub	sp, #112	; 0x70
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	60f8      	str	r0, [r7, #12]
 800bc32:	60b9      	str	r1, [r7, #8]
 800bc34:	603b      	str	r3, [r7, #0]
 800bc36:	4613      	mov	r3, r2
 800bc38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc3a:	e0a7      	b.n	800bd8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc42:	f000 80a3 	beq.w	800bd8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc46:	f7f9 fe0d 	bl	8005864 <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d302      	bcc.n	800bc5c <UART_WaitOnFlagUntilTimeout+0x32>
 800bc56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d13f      	bne.n	800bcdc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc64:	e853 3f00 	ldrex	r3, [r3]
 800bc68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc70:	667b      	str	r3, [r7, #100]	; 0x64
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e6      	bne.n	800bc5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3308      	adds	r3, #8
 800bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc98:	e853 3f00 	ldrex	r3, [r3]
 800bc9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	f023 0301 	bic.w	r3, r3, #1
 800bca4:	663b      	str	r3, [r7, #96]	; 0x60
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3308      	adds	r3, #8
 800bcac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcae:	64ba      	str	r2, [r7, #72]	; 0x48
 800bcb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcb6:	e841 2300 	strex	r3, r2, [r1]
 800bcba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bcbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1e5      	bne.n	800bc8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2220      	movs	r2, #32
 800bcc6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e068      	b.n	800bdae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 0304 	and.w	r3, r3, #4
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d050      	beq.n	800bd8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69db      	ldr	r3, [r3, #28]
 800bcf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf8:	d148      	bne.n	800bd8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0c:	e853 3f00 	ldrex	r3, [r3]
 800bd10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd22:	637b      	str	r3, [r7, #52]	; 0x34
 800bd24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd2a:	e841 2300 	strex	r3, r2, [r1]
 800bd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1e6      	bne.n	800bd04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	e853 3f00 	ldrex	r3, [r3]
 800bd44:	613b      	str	r3, [r7, #16]
   return(result);
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f023 0301 	bic.w	r3, r3, #1
 800bd4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3308      	adds	r3, #8
 800bd54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd56:	623a      	str	r2, [r7, #32]
 800bd58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5a:	69f9      	ldr	r1, [r7, #28]
 800bd5c:	6a3a      	ldr	r2, [r7, #32]
 800bd5e:	e841 2300 	strex	r3, r2, [r1]
 800bd62:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1e5      	bne.n	800bd36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2220      	movs	r2, #32
 800bd6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e010      	b.n	800bdae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	69da      	ldr	r2, [r3, #28]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	4013      	ands	r3, r2
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	bf0c      	ite	eq
 800bd9c:	2301      	moveq	r3, #1
 800bd9e:	2300      	movne	r3, #0
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	461a      	mov	r2, r3
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	f43f af48 	beq.w	800bc3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3770      	adds	r7, #112	; 0x70
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
	...

0800bdb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b097      	sub	sp, #92	; 0x5c
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	88fa      	ldrh	r2, [r7, #6]
 800bdd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	88fa      	ldrh	r2, [r7, #6]
 800bdd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdea:	d10e      	bne.n	800be0a <UART_Start_Receive_IT+0x52>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d105      	bne.n	800be00 <UART_Start_Receive_IT+0x48>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bdfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bdfe:	e02d      	b.n	800be5c <UART_Start_Receive_IT+0xa4>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	22ff      	movs	r2, #255	; 0xff
 800be04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be08:	e028      	b.n	800be5c <UART_Start_Receive_IT+0xa4>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10d      	bne.n	800be2e <UART_Start_Receive_IT+0x76>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d104      	bne.n	800be24 <UART_Start_Receive_IT+0x6c>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	22ff      	movs	r2, #255	; 0xff
 800be1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be22:	e01b      	b.n	800be5c <UART_Start_Receive_IT+0xa4>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	227f      	movs	r2, #127	; 0x7f
 800be28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be2c:	e016      	b.n	800be5c <UART_Start_Receive_IT+0xa4>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be36:	d10d      	bne.n	800be54 <UART_Start_Receive_IT+0x9c>
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d104      	bne.n	800be4a <UART_Start_Receive_IT+0x92>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	227f      	movs	r2, #127	; 0x7f
 800be44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be48:	e008      	b.n	800be5c <UART_Start_Receive_IT+0xa4>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	223f      	movs	r2, #63	; 0x3f
 800be4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be52:	e003      	b.n	800be5c <UART_Start_Receive_IT+0xa4>
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2222      	movs	r2, #34	; 0x22
 800be68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3308      	adds	r3, #8
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be76:	e853 3f00 	ldrex	r3, [r3]
 800be7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	f043 0301 	orr.w	r3, r3, #1
 800be82:	657b      	str	r3, [r7, #84]	; 0x54
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3308      	adds	r3, #8
 800be8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be8c:	64ba      	str	r2, [r7, #72]	; 0x48
 800be8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be94:	e841 2300 	strex	r3, r2, [r1]
 800be98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800be9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e5      	bne.n	800be6c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bea8:	d107      	bne.n	800beba <UART_Start_Receive_IT+0x102>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d103      	bne.n	800beba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4a21      	ldr	r2, [pc, #132]	; (800bf3c <UART_Start_Receive_IT+0x184>)
 800beb6:	669a      	str	r2, [r3, #104]	; 0x68
 800beb8:	e002      	b.n	800bec0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	4a20      	ldr	r2, [pc, #128]	; (800bf40 <UART_Start_Receive_IT+0x188>)
 800bebe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	691b      	ldr	r3, [r3, #16]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d019      	beq.n	800befc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bedc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee6:	637b      	str	r3, [r7, #52]	; 0x34
 800bee8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800beec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e6      	bne.n	800bec8 <UART_Start_Receive_IT+0x110>
 800befa:	e018      	b.n	800bf2e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	e853 3f00 	ldrex	r3, [r3]
 800bf08:	613b      	str	r3, [r7, #16]
   return(result);
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	f043 0320 	orr.w	r3, r3, #32
 800bf10:	653b      	str	r3, [r7, #80]	; 0x50
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	461a      	mov	r2, r3
 800bf18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf1a:	623b      	str	r3, [r7, #32]
 800bf1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1e:	69f9      	ldr	r1, [r7, #28]
 800bf20:	6a3a      	ldr	r2, [r7, #32]
 800bf22:	e841 2300 	strex	r3, r2, [r1]
 800bf26:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1e6      	bne.n	800befc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	375c      	adds	r7, #92	; 0x5c
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	0800c563 	.word	0x0800c563
 800bf40:	0800c3fd 	.word	0x0800c3fd

0800bf44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b096      	sub	sp, #88	; 0x58
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	88fa      	ldrh	r2, [r7, #6]
 800bf5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2222      	movs	r2, #34	; 0x22
 800bf6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d028      	beq.n	800bfca <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf7c:	4a3e      	ldr	r2, [pc, #248]	; (800c078 <UART_Start_Receive_DMA+0x134>)
 800bf7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf84:	4a3d      	ldr	r2, [pc, #244]	; (800c07c <UART_Start_Receive_DMA+0x138>)
 800bf86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf8c:	4a3c      	ldr	r2, [pc, #240]	; (800c080 <UART_Start_Receive_DMA+0x13c>)
 800bf8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf94:	2200      	movs	r2, #0
 800bf96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3324      	adds	r3, #36	; 0x24
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	88fb      	ldrh	r3, [r7, #6]
 800bfac:	f7f9 fe1a 	bl	8005be4 <HAL_DMA_Start_IT>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d009      	beq.n	800bfca <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2210      	movs	r2, #16
 800bfba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e051      	b.n	800c06e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d018      	beq.n	800c004 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfda:	e853 3f00 	ldrex	r3, [r3]
 800bfde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfe6:	657b      	str	r3, [r7, #84]	; 0x54
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	461a      	mov	r2, r3
 800bfee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bff0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bff2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e6      	bne.n	800bfd2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3308      	adds	r3, #8
 800c00a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	f043 0301 	orr.w	r3, r3, #1
 800c01a:	653b      	str	r3, [r7, #80]	; 0x50
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3308      	adds	r3, #8
 800c022:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c024:	637a      	str	r2, [r7, #52]	; 0x34
 800c026:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c02a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c02c:	e841 2300 	strex	r3, r2, [r1]
 800c030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1e5      	bne.n	800c004 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3308      	adds	r3, #8
 800c03e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	e853 3f00 	ldrex	r3, [r3]
 800c046:	613b      	str	r3, [r7, #16]
   return(result);
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c04e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3308      	adds	r3, #8
 800c056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c058:	623a      	str	r2, [r7, #32]
 800c05a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05c:	69f9      	ldr	r1, [r7, #28]
 800c05e:	6a3a      	ldr	r2, [r7, #32]
 800c060:	e841 2300 	strex	r3, r2, [r1]
 800c064:	61bb      	str	r3, [r7, #24]
   return(result);
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1e5      	bne.n	800c038 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3758      	adds	r7, #88	; 0x58
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	0800c199 	.word	0x0800c199
 800c07c:	0800c2c1 	.word	0x0800c2c1
 800c080:	0800c2ff 	.word	0x0800c2ff

0800c084 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c084:	b480      	push	{r7}
 800c086:	b089      	sub	sp, #36	; 0x24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	60bb      	str	r3, [r7, #8]
   return(result);
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c0a0:	61fb      	str	r3, [r7, #28]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	61bb      	str	r3, [r7, #24]
 800c0ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	6979      	ldr	r1, [r7, #20]
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	e841 2300 	strex	r3, r2, [r1]
 800c0b6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e6      	bne.n	800c08c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c0c4:	bf00      	nop
 800c0c6:	3724      	adds	r7, #36	; 0x24
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b095      	sub	sp, #84	; 0x54
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0f6:	643b      	str	r3, [r7, #64]	; 0x40
 800c0f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e6      	bne.n	800c0d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	3308      	adds	r3, #8
 800c110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c112:	6a3b      	ldr	r3, [r7, #32]
 800c114:	e853 3f00 	ldrex	r3, [r3]
 800c118:	61fb      	str	r3, [r7, #28]
   return(result);
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	f023 0301 	bic.w	r3, r3, #1
 800c120:	64bb      	str	r3, [r7, #72]	; 0x48
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3308      	adds	r3, #8
 800c128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c12a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c12c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1e5      	bne.n	800c10a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c142:	2b01      	cmp	r3, #1
 800c144:	d118      	bne.n	800c178 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	e853 3f00 	ldrex	r3, [r3]
 800c152:	60bb      	str	r3, [r7, #8]
   return(result);
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	f023 0310 	bic.w	r3, r3, #16
 800c15a:	647b      	str	r3, [r7, #68]	; 0x44
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	461a      	mov	r2, r3
 800c162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c164:	61bb      	str	r3, [r7, #24]
 800c166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c168:	6979      	ldr	r1, [r7, #20]
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	e841 2300 	strex	r3, r2, [r1]
 800c170:	613b      	str	r3, [r7, #16]
   return(result);
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1e6      	bne.n	800c146 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2220      	movs	r2, #32
 800c17c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c18c:	bf00      	nop
 800c18e:	3754      	adds	r7, #84	; 0x54
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b09c      	sub	sp, #112	; 0x70
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	69db      	ldr	r3, [r3, #28]
 800c1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ae:	d071      	beq.n	800c294 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c1b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1c0:	e853 3f00 	ldrex	r3, [r3]
 800c1c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1de:	e841 2300 	strex	r3, r2, [r1]
 800c1e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1e6      	bne.n	800c1b8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fc:	f023 0301 	bic.w	r3, r3, #1
 800c200:	667b      	str	r3, [r7, #100]	; 0x64
 800c202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3308      	adds	r3, #8
 800c208:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c20a:	647a      	str	r2, [r7, #68]	; 0x44
 800c20c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e5      	bne.n	800c1ea <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c21e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3308      	adds	r3, #8
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	623b      	str	r3, [r7, #32]
   return(result);
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c234:	663b      	str	r3, [r7, #96]	; 0x60
 800c236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3308      	adds	r3, #8
 800c23c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c23e:	633a      	str	r2, [r7, #48]	; 0x30
 800c240:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c246:	e841 2300 	strex	r3, r2, [r1]
 800c24a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1e5      	bne.n	800c21e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c254:	2220      	movs	r2, #32
 800c256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c25a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c25c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d118      	bne.n	800c294 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	e853 3f00 	ldrex	r3, [r3]
 800c26e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f023 0310 	bic.w	r3, r3, #16
 800c276:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	461a      	mov	r2, r3
 800c27e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c280:	61fb      	str	r3, [r7, #28]
 800c282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	69b9      	ldr	r1, [r7, #24]
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	617b      	str	r3, [r7, #20]
   return(result);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e6      	bne.n	800c262 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c296:	2200      	movs	r2, #0
 800c298:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c29a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c29c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d107      	bne.n	800c2b2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c2ac:	f7ff f974 	bl	800b598 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2b0:	e002      	b.n	800c2b8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c2b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c2b4:	f7f6 f8e0 	bl	8002478 <HAL_UART_RxCpltCallback>
}
 800c2b8:	bf00      	nop
 800c2ba:	3770      	adds	r7, #112	; 0x70
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d109      	bne.n	800c2f0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c2e2:	085b      	lsrs	r3, r3, #1
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f7ff f955 	bl	800b598 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2ee:	e002      	b.n	800c2f6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f7ff f947 	bl	800b584 <HAL_UART_RxHalfCpltCallback>
}
 800c2f6:	bf00      	nop
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b086      	sub	sp, #24
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c310:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c318:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c324:	2b80      	cmp	r3, #128	; 0x80
 800c326:	d109      	bne.n	800c33c <UART_DMAError+0x3e>
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	2b21      	cmp	r3, #33	; 0x21
 800c32c:	d106      	bne.n	800c33c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2200      	movs	r2, #0
 800c332:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c336:	6978      	ldr	r0, [r7, #20]
 800c338:	f7ff fea4 	bl	800c084 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c346:	2b40      	cmp	r3, #64	; 0x40
 800c348:	d109      	bne.n	800c35e <UART_DMAError+0x60>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b22      	cmp	r3, #34	; 0x22
 800c34e:	d106      	bne.n	800c35e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2200      	movs	r2, #0
 800c354:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c358:	6978      	ldr	r0, [r7, #20]
 800c35a:	f7ff feb9 	bl	800c0d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c364:	f043 0210 	orr.w	r2, r3, #16
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c36e:	6978      	ldr	r0, [r7, #20]
 800c370:	f7f6 f924 	bl	80025bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c374:	bf00      	nop
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2200      	movs	r2, #0
 800c396:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7f6 f90e 	bl	80025bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3a0:	bf00      	nop
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b088      	sub	sp, #32
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	e853 3f00 	ldrex	r3, [r3]
 800c3bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3c4:	61fb      	str	r3, [r7, #28]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	61bb      	str	r3, [r7, #24]
 800c3d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d2:	6979      	ldr	r1, [r7, #20]
 800c3d4:	69ba      	ldr	r2, [r7, #24]
 800c3d6:	e841 2300 	strex	r3, r2, [r1]
 800c3da:	613b      	str	r3, [r7, #16]
   return(result);
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1e6      	bne.n	800c3b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2220      	movs	r2, #32
 800c3e6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff f8be 	bl	800b570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3f4:	bf00      	nop
 800c3f6:	3720      	adds	r7, #32
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b096      	sub	sp, #88	; 0x58
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c40a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c414:	2b22      	cmp	r3, #34	; 0x22
 800c416:	f040 8098 	bne.w	800c54a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c420:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c424:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c428:	b2d9      	uxtb	r1, r3
 800c42a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c434:	400a      	ands	r2, r1
 800c436:	b2d2      	uxtb	r2, r2
 800c438:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	3b01      	subs	r3, #1
 800c44e:	b29a      	uxth	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d17b      	bne.n	800c55a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c476:	653b      	str	r3, [r7, #80]	; 0x50
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	461a      	mov	r2, r3
 800c47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c480:	647b      	str	r3, [r7, #68]	; 0x44
 800c482:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c484:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c488:	e841 2300 	strex	r3, r2, [r1]
 800c48c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e6      	bne.n	800c462 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3308      	adds	r3, #8
 800c49a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	e853 3f00 	ldrex	r3, [r3]
 800c4a2:	623b      	str	r3, [r7, #32]
   return(result);
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	f023 0301 	bic.w	r3, r3, #1
 800c4aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4b4:	633a      	str	r2, [r7, #48]	; 0x30
 800c4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4bc:	e841 2300 	strex	r3, r2, [r1]
 800c4c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e5      	bne.n	800c494 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d12e      	bne.n	800c542 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	e853 3f00 	ldrex	r3, [r3]
 800c4f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f023 0310 	bic.w	r3, r3, #16
 800c4fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	461a      	mov	r2, r3
 800c506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c508:	61fb      	str	r3, [r7, #28]
 800c50a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50c:	69b9      	ldr	r1, [r7, #24]
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	e841 2300 	strex	r3, r2, [r1]
 800c514:	617b      	str	r3, [r7, #20]
   return(result);
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e6      	bne.n	800c4ea <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	f003 0310 	and.w	r3, r3, #16
 800c526:	2b10      	cmp	r3, #16
 800c528:	d103      	bne.n	800c532 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2210      	movs	r2, #16
 800c530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff f82c 	bl	800b598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c540:	e00b      	b.n	800c55a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7f5 ff98 	bl	8002478 <HAL_UART_RxCpltCallback>
}
 800c548:	e007      	b.n	800c55a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	699a      	ldr	r2, [r3, #24]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f042 0208 	orr.w	r2, r2, #8
 800c558:	619a      	str	r2, [r3, #24]
}
 800c55a:	bf00      	nop
 800c55c:	3758      	adds	r7, #88	; 0x58
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b096      	sub	sp, #88	; 0x58
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c570:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c57a:	2b22      	cmp	r3, #34	; 0x22
 800c57c:	f040 8098 	bne.w	800c6b0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c586:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c58e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c590:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c594:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c598:	4013      	ands	r3, r2
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c59e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5a4:	1c9a      	adds	r2, r3, #2
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d17b      	bne.n	800c6c0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d0:	e853 3f00 	ldrex	r3, [r3]
 800c5d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5e6:	643b      	str	r3, [r7, #64]	; 0x40
 800c5e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5ee:	e841 2300 	strex	r3, r2, [r1]
 800c5f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1e6      	bne.n	800c5c8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3308      	adds	r3, #8
 800c600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	e853 3f00 	ldrex	r3, [r3]
 800c608:	61fb      	str	r3, [r7, #28]
   return(result);
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	f023 0301 	bic.w	r3, r3, #1
 800c610:	64bb      	str	r3, [r7, #72]	; 0x48
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	3308      	adds	r3, #8
 800c618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c61a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c61c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c622:	e841 2300 	strex	r3, r2, [r1]
 800c626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1e5      	bne.n	800c5fa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2220      	movs	r2, #32
 800c632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c646:	2b01      	cmp	r3, #1
 800c648:	d12e      	bne.n	800c6a8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	e853 3f00 	ldrex	r3, [r3]
 800c65c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	f023 0310 	bic.w	r3, r3, #16
 800c664:	647b      	str	r3, [r7, #68]	; 0x44
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c66e:	61bb      	str	r3, [r7, #24]
 800c670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c672:	6979      	ldr	r1, [r7, #20]
 800c674:	69ba      	ldr	r2, [r7, #24]
 800c676:	e841 2300 	strex	r3, r2, [r1]
 800c67a:	613b      	str	r3, [r7, #16]
   return(result);
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1e6      	bne.n	800c650 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	69db      	ldr	r3, [r3, #28]
 800c688:	f003 0310 	and.w	r3, r3, #16
 800c68c:	2b10      	cmp	r3, #16
 800c68e:	d103      	bne.n	800c698 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2210      	movs	r2, #16
 800c696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c69e:	4619      	mov	r1, r3
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7fe ff79 	bl	800b598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6a6:	e00b      	b.n	800c6c0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7f5 fee5 	bl	8002478 <HAL_UART_RxCpltCallback>
}
 800c6ae:	e007      	b.n	800c6c0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	699a      	ldr	r2, [r3, #24]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f042 0208 	orr.w	r2, r2, #8
 800c6be:	619a      	str	r2, [r3, #24]
}
 800c6c0:	bf00      	nop
 800c6c2:	3758      	adds	r7, #88	; 0x58
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c6d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6da:	2b84      	cmp	r3, #132	; 0x84
 800c6dc:	d005      	beq.n	800c6ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c6de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	3303      	adds	r3, #3
 800c6e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6fe:	f3ef 8305 	mrs	r3, IPSR
 800c702:	607b      	str	r3, [r7, #4]
  return(result);
 800c704:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c706:	2b00      	cmp	r3, #0
 800c708:	bf14      	ite	ne
 800c70a:	2301      	movne	r3, #1
 800c70c:	2300      	moveq	r3, #0
 800c70e:	b2db      	uxtb	r3, r3
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c720:	f001 fa38 	bl	800db94 <vTaskStartScheduler>
  
  return osOK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	bd80      	pop	{r7, pc}

0800c72a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c72a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c72c:	b089      	sub	sp, #36	; 0x24
 800c72e:	af04      	add	r7, sp, #16
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d020      	beq.n	800c77e <osThreadCreate+0x54>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d01c      	beq.n	800c77e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685c      	ldr	r4, [r3, #4]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	691e      	ldr	r6, [r3, #16]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff ffb6 	bl	800c6c8 <makeFreeRtosPriority>
 800c75c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c766:	9202      	str	r2, [sp, #8]
 800c768:	9301      	str	r3, [sp, #4]
 800c76a:	9100      	str	r1, [sp, #0]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	4632      	mov	r2, r6
 800c770:	4629      	mov	r1, r5
 800c772:	4620      	mov	r0, r4
 800c774:	f001 f834 	bl	800d7e0 <xTaskCreateStatic>
 800c778:	4603      	mov	r3, r0
 800c77a:	60fb      	str	r3, [r7, #12]
 800c77c:	e01c      	b.n	800c7b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685c      	ldr	r4, [r3, #4]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c78a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff ff98 	bl	800c6c8 <makeFreeRtosPriority>
 800c798:	4602      	mov	r2, r0
 800c79a:	f107 030c 	add.w	r3, r7, #12
 800c79e:	9301      	str	r3, [sp, #4]
 800c7a0:	9200      	str	r2, [sp, #0]
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f001 f87c 	bl	800d8a6 <xTaskCreate>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d001      	beq.n	800c7b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e000      	b.n	800c7ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <osDelay+0x16>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	e000      	b.n	800c7da <osDelay+0x18>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f001 f9a4 	bl	800db28 <vTaskDelay>
  
  return osOK;
 800c7e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d007      	beq.n	800c80a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	4619      	mov	r1, r3
 800c800:	2001      	movs	r0, #1
 800c802:	f000 fb77 	bl	800cef4 <xQueueCreateMutexStatic>
 800c806:	4603      	mov	r3, r0
 800c808:	e003      	b.n	800c812 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c80a:	2001      	movs	r0, #1
 800c80c:	f000 fb5a 	bl	800cec4 <xQueueCreateMutex>
 800c810:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c812:	4618      	mov	r0, r3
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
	...

0800c81c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c826:	2300      	movs	r3, #0
 800c828:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <osMutexWait+0x18>
    return osErrorParameter;
 800c830:	2380      	movs	r3, #128	; 0x80
 800c832:	e03a      	b.n	800c8aa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83e:	d103      	bne.n	800c848 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c840:	f04f 33ff 	mov.w	r3, #4294967295
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e009      	b.n	800c85c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d006      	beq.n	800c85c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d101      	bne.n	800c85c <osMutexWait+0x40>
      ticks = 1;
 800c858:	2301      	movs	r3, #1
 800c85a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c85c:	f7ff ff4c 	bl	800c6f8 <inHandlerMode>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d017      	beq.n	800c896 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c866:	f107 0308 	add.w	r3, r7, #8
 800c86a:	461a      	mov	r2, r3
 800c86c:	2100      	movs	r1, #0
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fde8 	bl	800d444 <xQueueReceiveFromISR>
 800c874:	4603      	mov	r3, r0
 800c876:	2b01      	cmp	r3, #1
 800c878:	d001      	beq.n	800c87e <osMutexWait+0x62>
      return osErrorOS;
 800c87a:	23ff      	movs	r3, #255	; 0xff
 800c87c:	e015      	b.n	800c8aa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d011      	beq.n	800c8a8 <osMutexWait+0x8c>
 800c884:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <osMutexWait+0x98>)
 800c886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	e008      	b.n	800c8a8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c896:	68f9      	ldr	r1, [r7, #12]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fccb 	bl	800d234 <xQueueSemaphoreTake>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d001      	beq.n	800c8a8 <osMutexWait+0x8c>
    return osErrorOS;
 800c8a4:	23ff      	movs	r3, #255	; 0xff
 800c8a6:	e000      	b.n	800c8aa <osMutexWait+0x8e>
  }
  
  return osOK;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	e000ed04 	.word	0xe000ed04

0800c8b8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c8c8:	f7ff ff16 	bl	800c6f8 <inHandlerMode>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d016      	beq.n	800c900 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c8d2:	f107 0308 	add.w	r3, r7, #8
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fc15 	bl	800d108 <xQueueGiveFromISR>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d001      	beq.n	800c8e8 <osMutexRelease+0x30>
      return osErrorOS;
 800c8e4:	23ff      	movs	r3, #255	; 0xff
 800c8e6:	e017      	b.n	800c918 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d013      	beq.n	800c916 <osMutexRelease+0x5e>
 800c8ee:	4b0c      	ldr	r3, [pc, #48]	; (800c920 <osMutexRelease+0x68>)
 800c8f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8f4:	601a      	str	r2, [r3, #0]
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	e00a      	b.n	800c916 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c900:	2300      	movs	r3, #0
 800c902:	2200      	movs	r2, #0
 800c904:	2100      	movs	r1, #0
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fb10 	bl	800cf2c <xQueueGenericSend>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d001      	beq.n	800c916 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c912:	23ff      	movs	r3, #255	; 0xff
 800c914:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c916:	68fb      	ldr	r3, [r7, #12]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	e000ed04 	.word	0xe000ed04

0800c924 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af02      	add	r7, sp, #8
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00f      	beq.n	800c956 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d10a      	bne.n	800c952 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	2203      	movs	r2, #3
 800c942:	9200      	str	r2, [sp, #0]
 800c944:	2200      	movs	r2, #0
 800c946:	2100      	movs	r1, #0
 800c948:	2001      	movs	r0, #1
 800c94a:	f000 f9be 	bl	800ccca <xQueueGenericCreateStatic>
 800c94e:	4603      	mov	r3, r0
 800c950:	e016      	b.n	800c980 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c952:	2300      	movs	r3, #0
 800c954:	e014      	b.n	800c980 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d110      	bne.n	800c97e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c95c:	2203      	movs	r2, #3
 800c95e:	2100      	movs	r1, #0
 800c960:	2001      	movs	r0, #1
 800c962:	f000 fa34 	bl	800cdce <xQueueGenericCreate>
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d005      	beq.n	800c97a <osSemaphoreCreate+0x56>
 800c96e:	2300      	movs	r3, #0
 800c970:	2200      	movs	r2, #0
 800c972:	2100      	movs	r1, #0
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f000 fad9 	bl	800cf2c <xQueueGenericSend>
      return sema;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	e000      	b.n	800c980 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c97e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c980:	4618      	mov	r0, r3
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c992:	2300      	movs	r3, #0
 800c994:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c99c:	2380      	movs	r3, #128	; 0x80
 800c99e:	e03a      	b.n	800ca16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9aa:	d103      	bne.n	800c9b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b0:	60fb      	str	r3, [r7, #12]
 800c9b2:	e009      	b.n	800c9c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d006      	beq.n	800c9c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d101      	bne.n	800c9c8 <osSemaphoreWait+0x40>
      ticks = 1;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c9c8:	f7ff fe96 	bl	800c6f8 <inHandlerMode>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d017      	beq.n	800ca02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c9d2:	f107 0308 	add.w	r3, r7, #8
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	2100      	movs	r1, #0
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fd32 	bl	800d444 <xQueueReceiveFromISR>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d001      	beq.n	800c9ea <osSemaphoreWait+0x62>
      return osErrorOS;
 800c9e6:	23ff      	movs	r3, #255	; 0xff
 800c9e8:	e015      	b.n	800ca16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d011      	beq.n	800ca14 <osSemaphoreWait+0x8c>
 800c9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <osSemaphoreWait+0x98>)
 800c9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f6:	601a      	str	r2, [r3, #0]
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	e008      	b.n	800ca14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ca02:	68f9      	ldr	r1, [r7, #12]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fc15 	bl	800d234 <xQueueSemaphoreTake>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d001      	beq.n	800ca14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ca10:	23ff      	movs	r3, #255	; 0xff
 800ca12:	e000      	b.n	800ca16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	e000ed04 	.word	0xe000ed04

0800ca24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ca30:	2300      	movs	r3, #0
 800ca32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ca34:	f7ff fe60 	bl	800c6f8 <inHandlerMode>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d016      	beq.n	800ca6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ca3e:	f107 0308 	add.w	r3, r7, #8
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fb5f 	bl	800d108 <xQueueGiveFromISR>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d001      	beq.n	800ca54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ca50:	23ff      	movs	r3, #255	; 0xff
 800ca52:	e017      	b.n	800ca84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d013      	beq.n	800ca82 <osSemaphoreRelease+0x5e>
 800ca5a:	4b0c      	ldr	r3, [pc, #48]	; (800ca8c <osSemaphoreRelease+0x68>)
 800ca5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca60:	601a      	str	r2, [r3, #0]
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	e00a      	b.n	800ca82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2100      	movs	r1, #0
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fa5a 	bl	800cf2c <xQueueGenericSend>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d001      	beq.n	800ca82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ca7e:	23ff      	movs	r3, #255	; 0xff
 800ca80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ca82:	68fb      	ldr	r3, [r7, #12]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	e000ed04 	.word	0xe000ed04

0800ca90 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fd59 	bl	800d550 <uxQueueMessagesWaiting>
 800ca9e:	4603      	mov	r3, r0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f103 0208 	add.w	r2, r3, #8
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f04f 32ff 	mov.w	r2, #4294967295
 800cac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f103 0208 	add.w	r2, r3, #8
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f103 0208 	add.w	r2, r3, #8
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800caf6:	bf00      	nop
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb02:	b480      	push	{r7}
 800cb04:	b085      	sub	sp, #20
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	689a      	ldr	r2, [r3, #8]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	601a      	str	r2, [r3, #0]
}
 800cb3e:	bf00      	nop
 800cb40:	3714      	adds	r7, #20
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb4a:	b480      	push	{r7}
 800cb4c:	b085      	sub	sp, #20
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb60:	d103      	bne.n	800cb6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	e00c      	b.n	800cb84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3308      	adds	r3, #8
 800cb6e:	60fb      	str	r3, [r7, #12]
 800cb70:	e002      	b.n	800cb78 <vListInsert+0x2e>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	60fb      	str	r3, [r7, #12]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d2f6      	bcs.n	800cb72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	685a      	ldr	r2, [r3, #4]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	1c5a      	adds	r2, r3, #1
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	601a      	str	r2, [r3, #0]
}
 800cbb0:	bf00      	nop
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	6892      	ldr	r2, [r2, #8]
 800cbd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	6852      	ldr	r2, [r2, #4]
 800cbdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d103      	bne.n	800cbf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	689a      	ldr	r2, [r3, #8]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	1e5a      	subs	r2, r3, #1
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10c      	bne.n	800cc3e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	b672      	cpsid	i
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	b662      	cpsie	i
 800cc38:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc3a:	bf00      	nop
 800cc3c:	e7fe      	b.n	800cc3c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cc3e:	f001 fee5 	bl	800ea0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4a:	68f9      	ldr	r1, [r7, #12]
 800cc4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc4e:	fb01 f303 	mul.w	r3, r1, r3
 800cc52:	441a      	add	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	68f9      	ldr	r1, [r7, #12]
 800cc72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc74:	fb01 f303 	mul.w	r3, r1, r3
 800cc78:	441a      	add	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	22ff      	movs	r2, #255	; 0xff
 800cc82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	22ff      	movs	r2, #255	; 0xff
 800cc8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d109      	bne.n	800cca8 <xQueueGenericReset+0x98>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00f      	beq.n	800ccbc <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	3310      	adds	r3, #16
 800cca0:	4618      	mov	r0, r3
 800cca2:	f001 f9a5 	bl	800dff0 <xTaskRemoveFromEventList>
 800cca6:	e009      	b.n	800ccbc <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3310      	adds	r3, #16
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7ff fefb 	bl	800caa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3324      	adds	r3, #36	; 0x24
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff fef6 	bl	800caa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ccbc:	f001 feda 	bl	800ea74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ccc0:	2301      	movs	r3, #1
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b08e      	sub	sp, #56	; 0x38
 800ccce:	af02      	add	r7, sp, #8
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
 800ccd6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10c      	bne.n	800ccf8 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	b672      	cpsid	i
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	b662      	cpsie	i
 800ccf2:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccf4:	bf00      	nop
 800ccf6:	e7fe      	b.n	800ccf6 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10c      	bne.n	800cd18 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	b672      	cpsid	i
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	b662      	cpsie	i
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd14:	bf00      	nop
 800cd16:	e7fe      	b.n	800cd16 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <xQueueGenericCreateStatic+0x5a>
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <xQueueGenericCreateStatic+0x5e>
 800cd24:	2301      	movs	r3, #1
 800cd26:	e000      	b.n	800cd2a <xQueueGenericCreateStatic+0x60>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10c      	bne.n	800cd48 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd32:	b672      	cpsid	i
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	b662      	cpsie	i
 800cd42:	623b      	str	r3, [r7, #32]
}
 800cd44:	bf00      	nop
 800cd46:	e7fe      	b.n	800cd46 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d102      	bne.n	800cd54 <xQueueGenericCreateStatic+0x8a>
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <xQueueGenericCreateStatic+0x8e>
 800cd54:	2301      	movs	r3, #1
 800cd56:	e000      	b.n	800cd5a <xQueueGenericCreateStatic+0x90>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10c      	bne.n	800cd78 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	b672      	cpsid	i
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	b662      	cpsie	i
 800cd72:	61fb      	str	r3, [r7, #28]
}
 800cd74:	bf00      	nop
 800cd76:	e7fe      	b.n	800cd76 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd78:	2348      	movs	r3, #72	; 0x48
 800cd7a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	2b48      	cmp	r3, #72	; 0x48
 800cd80:	d00c      	beq.n	800cd9c <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	b672      	cpsid	i
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	b662      	cpsie	i
 800cd96:	61bb      	str	r3, [r7, #24]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00d      	beq.n	800cdc4 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	9300      	str	r3, [sp, #0]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	68b9      	ldr	r1, [r7, #8]
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f000 f847 	bl	800ce52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3730      	adds	r7, #48	; 0x30
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b08a      	sub	sp, #40	; 0x28
 800cdd2:	af02      	add	r7, sp, #8
 800cdd4:	60f8      	str	r0, [r7, #12]
 800cdd6:	60b9      	str	r1, [r7, #8]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10c      	bne.n	800cdfc <xQueueGenericCreate+0x2e>
	__asm volatile
 800cde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde6:	b672      	cpsid	i
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	b662      	cpsie	i
 800cdf6:	613b      	str	r3, [r7, #16]
}
 800cdf8:	bf00      	nop
 800cdfa:	e7fe      	b.n	800cdfa <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d102      	bne.n	800ce08 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	61fb      	str	r3, [r7, #28]
 800ce06:	e004      	b.n	800ce12 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	fb02 f303 	mul.w	r3, r2, r3
 800ce10:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	3348      	adds	r3, #72	; 0x48
 800ce16:	4618      	mov	r0, r3
 800ce18:	f001 ff24 	bl	800ec64 <pvPortMalloc>
 800ce1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d011      	beq.n	800ce48 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	3348      	adds	r3, #72	; 0x48
 800ce2c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce36:	79fa      	ldrb	r2, [r7, #7]
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	68b9      	ldr	r1, [r7, #8]
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f000 f805 	bl	800ce52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce48:	69bb      	ldr	r3, [r7, #24]
	}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3720      	adds	r7, #32
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	60f8      	str	r0, [r7, #12]
 800ce5a:	60b9      	str	r1, [r7, #8]
 800ce5c:	607a      	str	r2, [r7, #4]
 800ce5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d103      	bne.n	800ce6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	69ba      	ldr	r2, [r7, #24]
 800ce6a:	601a      	str	r2, [r3, #0]
 800ce6c:	e002      	b.n	800ce74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce80:	2101      	movs	r1, #1
 800ce82:	69b8      	ldr	r0, [r7, #24]
 800ce84:	f7ff fec4 	bl	800cc10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce88:	bf00      	nop
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00e      	beq.n	800cebc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f838 	bl	800cf2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cebc:	bf00      	nop
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	4603      	mov	r3, r0
 800cecc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cece:	2301      	movs	r3, #1
 800ced0:	617b      	str	r3, [r7, #20]
 800ced2:	2300      	movs	r3, #0
 800ced4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ced6:	79fb      	ldrb	r3, [r7, #7]
 800ced8:	461a      	mov	r2, r3
 800ceda:	6939      	ldr	r1, [r7, #16]
 800cedc:	6978      	ldr	r0, [r7, #20]
 800cede:	f7ff ff76 	bl	800cdce <xQueueGenericCreate>
 800cee2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f7ff ffd3 	bl	800ce90 <prvInitialiseMutex>

		return xNewQueue;
 800ceea:	68fb      	ldr	r3, [r7, #12]
	}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b088      	sub	sp, #32
 800cef8:	af02      	add	r7, sp, #8
 800cefa:	4603      	mov	r3, r0
 800cefc:	6039      	str	r1, [r7, #0]
 800cefe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf00:	2301      	movs	r3, #1
 800cf02:	617b      	str	r3, [r7, #20]
 800cf04:	2300      	movs	r3, #0
 800cf06:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	6939      	ldr	r1, [r7, #16]
 800cf12:	6978      	ldr	r0, [r7, #20]
 800cf14:	f7ff fed9 	bl	800ccca <xQueueGenericCreateStatic>
 800cf18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f7ff ffb8 	bl	800ce90 <prvInitialiseMutex>

		return xNewQueue;
 800cf20:	68fb      	ldr	r3, [r7, #12]
	}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08e      	sub	sp, #56	; 0x38
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10c      	bne.n	800cf62 <xQueueGenericSend+0x36>
	__asm volatile
 800cf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4c:	b672      	cpsid	i
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	b662      	cpsie	i
 800cf5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d103      	bne.n	800cf70 <xQueueGenericSend+0x44>
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <xQueueGenericSend+0x48>
 800cf70:	2301      	movs	r3, #1
 800cf72:	e000      	b.n	800cf76 <xQueueGenericSend+0x4a>
 800cf74:	2300      	movs	r3, #0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10c      	bne.n	800cf94 <xQueueGenericSend+0x68>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	b672      	cpsid	i
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	b662      	cpsie	i
 800cf8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d103      	bne.n	800cfa2 <xQueueGenericSend+0x76>
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d101      	bne.n	800cfa6 <xQueueGenericSend+0x7a>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <xQueueGenericSend+0x7c>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10c      	bne.n	800cfc6 <xQueueGenericSend+0x9a>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	b672      	cpsid	i
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	b662      	cpsie	i
 800cfc0:	623b      	str	r3, [r7, #32]
}
 800cfc2:	bf00      	nop
 800cfc4:	e7fe      	b.n	800cfc4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfc6:	f001 f9d5 	bl	800e374 <xTaskGetSchedulerState>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d102      	bne.n	800cfd6 <xQueueGenericSend+0xaa>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d101      	bne.n	800cfda <xQueueGenericSend+0xae>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e000      	b.n	800cfdc <xQueueGenericSend+0xb0>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10c      	bne.n	800cffa <xQueueGenericSend+0xce>
	__asm volatile
 800cfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe4:	b672      	cpsid	i
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	b662      	cpsie	i
 800cff4:	61fb      	str	r3, [r7, #28]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cffa:	f001 fd07 	bl	800ea0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d006:	429a      	cmp	r2, r3
 800d008:	d302      	bcc.n	800d010 <xQueueGenericSend+0xe4>
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d112      	bne.n	800d036 <xQueueGenericSend+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	68b9      	ldr	r1, [r7, #8]
 800d014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d016:	f000 fad3 	bl	800d5c0 <prvCopyDataToQueue>
 800d01a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d020:	2b00      	cmp	r3, #0
 800d022:	d004      	beq.n	800d02e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d026:	3324      	adds	r3, #36	; 0x24
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 ffe1 	bl	800dff0 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d02e:	f001 fd21 	bl	800ea74 <vPortExitCritical>
				return pdPASS;
 800d032:	2301      	movs	r3, #1
 800d034:	e062      	b.n	800d0fc <xQueueGenericSend+0x1d0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d103      	bne.n	800d044 <xQueueGenericSend+0x118>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d03c:	f001 fd1a 	bl	800ea74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d040:	2300      	movs	r3, #0
 800d042:	e05b      	b.n	800d0fc <xQueueGenericSend+0x1d0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d046:	2b00      	cmp	r3, #0
 800d048:	d106      	bne.n	800d058 <xQueueGenericSend+0x12c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d04a:	f107 0314 	add.w	r3, r7, #20
 800d04e:	4618      	mov	r0, r3
 800d050:	f001 f832 	bl	800e0b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d054:	2301      	movs	r3, #1
 800d056:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d058:	f001 fd0c 	bl	800ea74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d05c:	f000 fe08 	bl	800dc70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d060:	f001 fcd4 	bl	800ea0c <vPortEnterCritical>
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d06a:	b25b      	sxtb	r3, r3
 800d06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d070:	d103      	bne.n	800d07a <xQueueGenericSend+0x14e>
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	2200      	movs	r2, #0
 800d076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d080:	b25b      	sxtb	r3, r3
 800d082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d086:	d103      	bne.n	800d090 <xQueueGenericSend+0x164>
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d090:	f001 fcf0 	bl	800ea74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d094:	1d3a      	adds	r2, r7, #4
 800d096:	f107 0314 	add.w	r3, r7, #20
 800d09a:	4611      	mov	r1, r2
 800d09c:	4618      	mov	r0, r3
 800d09e:	f001 f821 	bl	800e0e4 <xTaskCheckForTimeOut>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d123      	bne.n	800d0f0 <xQueueGenericSend+0x1c4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0aa:	f000 fb81 	bl	800d7b0 <prvIsQueueFull>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d017      	beq.n	800d0e4 <xQueueGenericSend+0x1b8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	3310      	adds	r3, #16
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 ff71 	bl	800dfa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0c4:	f000 fb0c 	bl	800d6e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0c8:	f000 fde0 	bl	800dc8c <xTaskResumeAll>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d193      	bne.n	800cffa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d0d2:	4b0c      	ldr	r3, [pc, #48]	; (800d104 <xQueueGenericSend+0x1d8>)
 800d0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d8:	601a      	str	r2, [r3, #0]
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	e78a      	b.n	800cffa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0e6:	f000 fafb 	bl	800d6e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0ea:	f000 fdcf 	bl	800dc8c <xTaskResumeAll>
 800d0ee:	e784      	b.n	800cffa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0f2:	f000 faf5 	bl	800d6e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0f6:	f000 fdc9 	bl	800dc8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d0fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3738      	adds	r7, #56	; 0x38
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	e000ed04 	.word	0xe000ed04

0800d108 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08e      	sub	sp, #56	; 0x38
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10c      	bne.n	800d136 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d120:	b672      	cpsid	i
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	b662      	cpsie	i
 800d130:	623b      	str	r3, [r7, #32]
}
 800d132:	bf00      	nop
 800d134:	e7fe      	b.n	800d134 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00c      	beq.n	800d158 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	b672      	cpsid	i
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	b662      	cpsie	i
 800d152:	61fb      	str	r3, [r7, #28]
}
 800d154:	bf00      	nop
 800d156:	e7fe      	b.n	800d156 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d103      	bne.n	800d168 <xQueueGiveFromISR+0x60>
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d101      	bne.n	800d16c <xQueueGiveFromISR+0x64>
 800d168:	2301      	movs	r3, #1
 800d16a:	e000      	b.n	800d16e <xQueueGiveFromISR+0x66>
 800d16c:	2300      	movs	r3, #0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10c      	bne.n	800d18c <xQueueGiveFromISR+0x84>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	b672      	cpsid	i
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	b662      	cpsie	i
 800d186:	61bb      	str	r3, [r7, #24]
}
 800d188:	bf00      	nop
 800d18a:	e7fe      	b.n	800d18a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d18c:	f001 fd26 	bl	800ebdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d190:	f3ef 8211 	mrs	r2, BASEPRI
 800d194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d198:	b672      	cpsid	i
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	b662      	cpsie	i
 800d1a8:	617a      	str	r2, [r7, #20]
 800d1aa:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1ac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d22b      	bcs.n	800d218 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1da:	d112      	bne.n	800d202 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d016      	beq.n	800d212 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e6:	3324      	adds	r3, #36	; 0x24
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 ff01 	bl	800dff0 <xTaskRemoveFromEventList>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00e      	beq.n	800d212 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00b      	beq.n	800d212 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	e007      	b.n	800d212 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d206:	3301      	adds	r3, #1
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	b25a      	sxtb	r2, r3
 800d20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d212:	2301      	movs	r3, #1
 800d214:	637b      	str	r3, [r7, #52]	; 0x34
 800d216:	e001      	b.n	800d21c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d218:	2300      	movs	r3, #0
 800d21a:	637b      	str	r3, [r7, #52]	; 0x34
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d226:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3738      	adds	r7, #56	; 0x38
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08e      	sub	sp, #56	; 0x38
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d23e:	2300      	movs	r3, #0
 800d240:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d246:	2300      	movs	r3, #0
 800d248:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10c      	bne.n	800d26a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	b672      	cpsid	i
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	b662      	cpsie	i
 800d264:	623b      	str	r3, [r7, #32]
}
 800d266:	bf00      	nop
 800d268:	e7fe      	b.n	800d268 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00c      	beq.n	800d28c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d276:	b672      	cpsid	i
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	b662      	cpsie	i
 800d286:	61fb      	str	r3, [r7, #28]
}
 800d288:	bf00      	nop
 800d28a:	e7fe      	b.n	800d28a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d28c:	f001 f872 	bl	800e374 <xTaskGetSchedulerState>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d102      	bne.n	800d29c <xQueueSemaphoreTake+0x68>
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <xQueueSemaphoreTake+0x6c>
 800d29c:	2301      	movs	r3, #1
 800d29e:	e000      	b.n	800d2a2 <xQueueSemaphoreTake+0x6e>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10c      	bne.n	800d2c0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2aa:	b672      	cpsid	i
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	b662      	cpsie	i
 800d2ba:	61bb      	str	r3, [r7, #24]
}
 800d2bc:	bf00      	nop
 800d2be:	e7fe      	b.n	800d2be <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2c0:	f001 fba4 	bl	800ea0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d019      	beq.n	800d304 <xQueueSemaphoreTake+0xd0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d2:	1e5a      	subs	r2, r3, #1
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d104      	bne.n	800d2ea <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2e0:	f001 fa0e 	bl	800e700 <pvTaskIncrementMutexHeldCount>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d004      	beq.n	800d2fc <xQueueSemaphoreTake+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	3310      	adds	r3, #16
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 fe7a 	bl	800dff0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2fc:	f001 fbba 	bl	800ea74 <vPortExitCritical>
				return pdPASS;
 800d300:	2301      	movs	r3, #1
 800d302:	e099      	b.n	800d438 <xQueueSemaphoreTake+0x204>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d113      	bne.n	800d332 <xQueueSemaphoreTake+0xfe>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00c      	beq.n	800d32a <xQueueSemaphoreTake+0xf6>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	b672      	cpsid	i
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	b662      	cpsie	i
 800d324:	617b      	str	r3, [r7, #20]
}
 800d326:	bf00      	nop
 800d328:	e7fe      	b.n	800d328 <xQueueSemaphoreTake+0xf4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d32a:	f001 fba3 	bl	800ea74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d32e:	2300      	movs	r3, #0
 800d330:	e082      	b.n	800d438 <xQueueSemaphoreTake+0x204>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d334:	2b00      	cmp	r3, #0
 800d336:	d106      	bne.n	800d346 <xQueueSemaphoreTake+0x112>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d338:	f107 030c 	add.w	r3, r7, #12
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 febb 	bl	800e0b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d342:	2301      	movs	r3, #1
 800d344:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d346:	f001 fb95 	bl	800ea74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d34a:	f000 fc91 	bl	800dc70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d34e:	f001 fb5d 	bl	800ea0c <vPortEnterCritical>
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d358:	b25b      	sxtb	r3, r3
 800d35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35e:	d103      	bne.n	800d368 <xQueueSemaphoreTake+0x134>
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d362:	2200      	movs	r2, #0
 800d364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d36e:	b25b      	sxtb	r3, r3
 800d370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d374:	d103      	bne.n	800d37e <xQueueSemaphoreTake+0x14a>
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d37e:	f001 fb79 	bl	800ea74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d382:	463a      	mov	r2, r7
 800d384:	f107 030c 	add.w	r3, r7, #12
 800d388:	4611      	mov	r1, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f000 feaa 	bl	800e0e4 <xTaskCheckForTimeOut>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d132      	bne.n	800d3fc <xQueueSemaphoreTake+0x1c8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d398:	f000 f9f4 	bl	800d784 <prvIsQueueEmpty>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d026      	beq.n	800d3f0 <xQueueSemaphoreTake+0x1bc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d109      	bne.n	800d3be <xQueueSemaphoreTake+0x18a>
					{
						taskENTER_CRITICAL();
 800d3aa:	f001 fb2f 	bl	800ea0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 fffc 	bl	800e3b0 <xTaskPriorityInherit>
 800d3b8:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d3ba:	f001 fb5b 	bl	800ea74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	3324      	adds	r3, #36	; 0x24
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 fdec 	bl	800dfa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ce:	f000 f987 	bl	800d6e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3d2:	f000 fc5b 	bl	800dc8c <xTaskResumeAll>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f47f af71 	bne.w	800d2c0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d3de:	4b18      	ldr	r3, [pc, #96]	; (800d440 <xQueueSemaphoreTake+0x20c>)
 800d3e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e4:	601a      	str	r2, [r3, #0]
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	f3bf 8f6f 	isb	sy
 800d3ee:	e767      	b.n	800d2c0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3f2:	f000 f975 	bl	800d6e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3f6:	f000 fc49 	bl	800dc8c <xTaskResumeAll>
 800d3fa:	e761      	b.n	800d2c0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3fe:	f000 f96f 	bl	800d6e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d402:	f000 fc43 	bl	800dc8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d408:	f000 f9bc 	bl	800d784 <prvIsQueueEmpty>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f43f af56 	beq.w	800d2c0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00d      	beq.n	800d436 <xQueueSemaphoreTake+0x202>
					{
						taskENTER_CRITICAL();
 800d41a:	f001 faf7 	bl	800ea0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d41e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d420:	f000 f8b6 	bl	800d590 <prvGetDisinheritPriorityAfterTimeout>
 800d424:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d42c:	4618      	mov	r0, r3
 800d42e:	f001 f8c9 	bl	800e5c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d432:	f001 fb1f 	bl	800ea74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d436:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3738      	adds	r7, #56	; 0x38
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	e000ed04 	.word	0xe000ed04

0800d444 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08e      	sub	sp, #56	; 0x38
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10c      	bne.n	800d474 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	b672      	cpsid	i
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	b662      	cpsie	i
 800d46e:	623b      	str	r3, [r7, #32]
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d103      	bne.n	800d482 <xQueueReceiveFromISR+0x3e>
 800d47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d101      	bne.n	800d486 <xQueueReceiveFromISR+0x42>
 800d482:	2301      	movs	r3, #1
 800d484:	e000      	b.n	800d488 <xQueueReceiveFromISR+0x44>
 800d486:	2300      	movs	r3, #0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d10c      	bne.n	800d4a6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	b672      	cpsid	i
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	b662      	cpsie	i
 800d4a0:	61fb      	str	r3, [r7, #28]
}
 800d4a2:	bf00      	nop
 800d4a4:	e7fe      	b.n	800d4a4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4a6:	f001 fb99 	bl	800ebdc <vPortValidateInterruptPriority>
	__asm volatile
 800d4aa:	f3ef 8211 	mrs	r2, BASEPRI
 800d4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b2:	b672      	cpsid	i
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	b662      	cpsie	i
 800d4c2:	61ba      	str	r2, [r7, #24]
 800d4c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d02f      	beq.n	800d536 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4e0:	68b9      	ldr	r1, [r7, #8]
 800d4e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4e4:	f000 f8d6 	bl	800d694 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	1e5a      	subs	r2, r3, #1
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f8:	d112      	bne.n	800d520 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d016      	beq.n	800d530 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	3310      	adds	r3, #16
 800d506:	4618      	mov	r0, r3
 800d508:	f000 fd72 	bl	800dff0 <xTaskRemoveFromEventList>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00e      	beq.n	800d530 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00b      	beq.n	800d530 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	e007      	b.n	800d530 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d524:	3301      	adds	r3, #1
 800d526:	b2db      	uxtb	r3, r3
 800d528:	b25a      	sxtb	r2, r3
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d530:	2301      	movs	r3, #1
 800d532:	637b      	str	r3, [r7, #52]	; 0x34
 800d534:	e001      	b.n	800d53a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d536:	2300      	movs	r3, #0
 800d538:	637b      	str	r3, [r7, #52]	; 0x34
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	f383 8811 	msr	BASEPRI, r3
}
 800d544:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3738      	adds	r7, #56	; 0x38
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10c      	bne.n	800d578 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800d55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d562:	b672      	cpsid	i
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	b662      	cpsie	i
 800d572:	60bb      	str	r3, [r7, #8]
}
 800d574:	bf00      	nop
 800d576:	e7fe      	b.n	800d576 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800d578:	f001 fa48 	bl	800ea0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d580:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d582:	f001 fa77 	bl	800ea74 <vPortExitCritical>

	return uxReturn;
 800d586:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d588:	4618      	mov	r0, r3
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d006      	beq.n	800d5ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f1c3 0307 	rsb	r3, r3, #7
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	e001      	b.n	800d5b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
	}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10d      	bne.n	800d5fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d14d      	bne.n	800d682 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 ff60 	bl	800e4b0 <xTaskPriorityDisinherit>
 800d5f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	609a      	str	r2, [r3, #8]
 800d5f8:	e043      	b.n	800d682 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d119      	bne.n	800d634 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6858      	ldr	r0, [r3, #4]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d608:	461a      	mov	r2, r3
 800d60a:	68b9      	ldr	r1, [r7, #8]
 800d60c:	f002 fdbf 	bl	801018e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d618:	441a      	add	r2, r3
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	429a      	cmp	r2, r3
 800d628:	d32b      	bcc.n	800d682 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	605a      	str	r2, [r3, #4]
 800d632:	e026      	b.n	800d682 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	68d8      	ldr	r0, [r3, #12]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63c:	461a      	mov	r2, r3
 800d63e:	68b9      	ldr	r1, [r7, #8]
 800d640:	f002 fda5 	bl	801018e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	68da      	ldr	r2, [r3, #12]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64c:	425b      	negs	r3, r3
 800d64e:	441a      	add	r2, r3
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	68da      	ldr	r2, [r3, #12]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d207      	bcs.n	800d670 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	689a      	ldr	r2, [r3, #8]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d668:	425b      	negs	r3, r3
 800d66a:	441a      	add	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b02      	cmp	r3, #2
 800d674:	d105      	bne.n	800d682 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	3b01      	subs	r3, #1
 800d680:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d68a:	697b      	ldr	r3, [r7, #20]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3718      	adds	r7, #24
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d018      	beq.n	800d6d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68da      	ldr	r2, [r3, #12]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ae:	441a      	add	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	68da      	ldr	r2, [r3, #12]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d303      	bcc.n	800d6c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68d9      	ldr	r1, [r3, #12]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	6838      	ldr	r0, [r7, #0]
 800d6d4:	f002 fd5b 	bl	801018e <memcpy>
	}
}
 800d6d8:	bf00      	nop
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6e8:	f001 f990 	bl	800ea0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6f4:	e011      	b.n	800d71a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d012      	beq.n	800d724 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	3324      	adds	r3, #36	; 0x24
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fc74 	bl	800dff0 <xTaskRemoveFromEventList>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d70e:	f000 fd4f 	bl	800e1b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d712:	7bfb      	ldrb	r3, [r7, #15]
 800d714:	3b01      	subs	r3, #1
 800d716:	b2db      	uxtb	r3, r3
 800d718:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	dce9      	bgt.n	800d6f6 <prvUnlockQueue+0x16>
 800d722:	e000      	b.n	800d726 <prvUnlockQueue+0x46>
					break;
 800d724:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	22ff      	movs	r2, #255	; 0xff
 800d72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d72e:	f001 f9a1 	bl	800ea74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d732:	f001 f96b 	bl	800ea0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d73c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d73e:	e011      	b.n	800d764 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d012      	beq.n	800d76e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	3310      	adds	r3, #16
 800d74c:	4618      	mov	r0, r3
 800d74e:	f000 fc4f 	bl	800dff0 <xTaskRemoveFromEventList>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d758:	f000 fd2a 	bl	800e1b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d75c:	7bbb      	ldrb	r3, [r7, #14]
 800d75e:	3b01      	subs	r3, #1
 800d760:	b2db      	uxtb	r3, r3
 800d762:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	dce9      	bgt.n	800d740 <prvUnlockQueue+0x60>
 800d76c:	e000      	b.n	800d770 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d76e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	22ff      	movs	r2, #255	; 0xff
 800d774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d778:	f001 f97c 	bl	800ea74 <vPortExitCritical>
}
 800d77c:	bf00      	nop
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d78c:	f001 f93e 	bl	800ea0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d794:	2b00      	cmp	r3, #0
 800d796:	d102      	bne.n	800d79e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d798:	2301      	movs	r3, #1
 800d79a:	60fb      	str	r3, [r7, #12]
 800d79c:	e001      	b.n	800d7a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7a2:	f001 f967 	bl	800ea74 <vPortExitCritical>

	return xReturn;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7b8:	f001 f928 	bl	800ea0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d102      	bne.n	800d7ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	e001      	b.n	800d7d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7d2:	f001 f94f 	bl	800ea74 <vPortExitCritical>

	return xReturn;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b08e      	sub	sp, #56	; 0x38
 800d7e4:	af04      	add	r7, sp, #16
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
 800d7ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d10c      	bne.n	800d80e <xTaskCreateStatic+0x2e>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f8:	b672      	cpsid	i
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	b662      	cpsie	i
 800d808:	623b      	str	r3, [r7, #32]
}
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10c      	bne.n	800d82e <xTaskCreateStatic+0x4e>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	b672      	cpsid	i
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	b662      	cpsie	i
 800d828:	61fb      	str	r3, [r7, #28]
}
 800d82a:	bf00      	nop
 800d82c:	e7fe      	b.n	800d82c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d82e:	23a0      	movs	r3, #160	; 0xa0
 800d830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	2ba0      	cmp	r3, #160	; 0xa0
 800d836:	d00c      	beq.n	800d852 <xTaskCreateStatic+0x72>
	__asm volatile
 800d838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83c:	b672      	cpsid	i
 800d83e:	f383 8811 	msr	BASEPRI, r3
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	b662      	cpsie	i
 800d84c:	61bb      	str	r3, [r7, #24]
}
 800d84e:	bf00      	nop
 800d850:	e7fe      	b.n	800d850 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d856:	2b00      	cmp	r3, #0
 800d858:	d01e      	beq.n	800d898 <xTaskCreateStatic+0xb8>
 800d85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d01b      	beq.n	800d898 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	2202      	movs	r2, #2
 800d86e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d872:	2300      	movs	r3, #0
 800d874:	9303      	str	r3, [sp, #12]
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	9302      	str	r3, [sp, #8]
 800d87a:	f107 0314 	add.w	r3, r7, #20
 800d87e:	9301      	str	r3, [sp, #4]
 800d880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	68b9      	ldr	r1, [r7, #8]
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f000 f850 	bl	800d930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d892:	f000 f8ed 	bl	800da70 <prvAddNewTaskToReadyList>
 800d896:	e001      	b.n	800d89c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d898:	2300      	movs	r3, #0
 800d89a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d89c:	697b      	ldr	r3, [r7, #20]
	}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3728      	adds	r7, #40	; 0x28
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b08c      	sub	sp, #48	; 0x30
 800d8aa:	af04      	add	r7, sp, #16
 800d8ac:	60f8      	str	r0, [r7, #12]
 800d8ae:	60b9      	str	r1, [r7, #8]
 800d8b0:	603b      	str	r3, [r7, #0]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f001 f9d2 	bl	800ec64 <pvPortMalloc>
 800d8c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00e      	beq.n	800d8e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8c8:	20a0      	movs	r0, #160	; 0xa0
 800d8ca:	f001 f9cb 	bl	800ec64 <pvPortMalloc>
 800d8ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	631a      	str	r2, [r3, #48]	; 0x30
 800d8dc:	e005      	b.n	800d8ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8de:	6978      	ldr	r0, [r7, #20]
 800d8e0:	f001 fa8a 	bl	800edf8 <vPortFree>
 800d8e4:	e001      	b.n	800d8ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d017      	beq.n	800d920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d8f8:	88fa      	ldrh	r2, [r7, #6]
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9303      	str	r3, [sp, #12]
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	9302      	str	r3, [sp, #8]
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	68b9      	ldr	r1, [r7, #8]
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f000 f80e 	bl	800d930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d914:	69f8      	ldr	r0, [r7, #28]
 800d916:	f000 f8ab 	bl	800da70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d91a:	2301      	movs	r3, #1
 800d91c:	61bb      	str	r3, [r7, #24]
 800d91e:	e002      	b.n	800d926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d920:	f04f 33ff 	mov.w	r3, #4294967295
 800d924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d926:	69bb      	ldr	r3, [r7, #24]
	}
 800d928:	4618      	mov	r0, r3
 800d92a:	3720      	adds	r7, #32
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b088      	sub	sp, #32
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d948:	440b      	add	r3, r1
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	f023 0307 	bic.w	r3, r3, #7
 800d956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00c      	beq.n	800d97c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	b672      	cpsid	i
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	b662      	cpsie	i
 800d976:	617b      	str	r3, [r7, #20]
}
 800d978:	bf00      	nop
 800d97a:	e7fe      	b.n	800d97a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d01f      	beq.n	800d9c2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d982:	2300      	movs	r3, #0
 800d984:	61fb      	str	r3, [r7, #28]
 800d986:	e012      	b.n	800d9ae <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	4413      	add	r3, r2
 800d98e:	7819      	ldrb	r1, [r3, #0]
 800d990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	4413      	add	r3, r2
 800d996:	3334      	adds	r3, #52	; 0x34
 800d998:	460a      	mov	r2, r1
 800d99a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d006      	beq.n	800d9b6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	61fb      	str	r3, [r7, #28]
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	2b0f      	cmp	r3, #15
 800d9b2:	d9e9      	bls.n	800d988 <prvInitialiseNewTask+0x58>
 800d9b4:	e000      	b.n	800d9b8 <prvInitialiseNewTask+0x88>
			{
				break;
 800d9b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9c0:	e003      	b.n	800d9ca <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9cc:	2b06      	cmp	r3, #6
 800d9ce:	d901      	bls.n	800d9d4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9d0:	2306      	movs	r3, #6
 800d9d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff f87c 	bl	800cae8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	3318      	adds	r3, #24
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7ff f877 	bl	800cae8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da02:	f1c3 0207 	rsb	r2, r3, #7
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	2200      	movs	r2, #0
 800da14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da22:	334c      	adds	r3, #76	; 0x4c
 800da24:	224c      	movs	r2, #76	; 0x4c
 800da26:	2100      	movs	r1, #0
 800da28:	4618      	mov	r0, r3
 800da2a:	f002 fac8 	bl	800ffbe <memset>
 800da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da30:	4a0c      	ldr	r2, [pc, #48]	; (800da64 <prvInitialiseNewTask+0x134>)
 800da32:	651a      	str	r2, [r3, #80]	; 0x50
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	4a0c      	ldr	r2, [pc, #48]	; (800da68 <prvInitialiseNewTask+0x138>)
 800da38:	655a      	str	r2, [r3, #84]	; 0x54
 800da3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3c:	4a0b      	ldr	r2, [pc, #44]	; (800da6c <prvInitialiseNewTask+0x13c>)
 800da3e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da40:	683a      	ldr	r2, [r7, #0]
 800da42:	68f9      	ldr	r1, [r7, #12]
 800da44:	69b8      	ldr	r0, [r7, #24]
 800da46:	f000 fed5 	bl	800e7f4 <pxPortInitialiseStack>
 800da4a:	4602      	mov	r2, r0
 800da4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da5c:	bf00      	nop
 800da5e:	3720      	adds	r7, #32
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	20004998 	.word	0x20004998
 800da68:	20004a00 	.word	0x20004a00
 800da6c:	20004a68 	.word	0x20004a68

0800da70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da78:	f000 ffc8 	bl	800ea0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da7c:	4b24      	ldr	r3, [pc, #144]	; (800db10 <prvAddNewTaskToReadyList+0xa0>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3301      	adds	r3, #1
 800da82:	4a23      	ldr	r2, [pc, #140]	; (800db10 <prvAddNewTaskToReadyList+0xa0>)
 800da84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da86:	4b23      	ldr	r3, [pc, #140]	; (800db14 <prvAddNewTaskToReadyList+0xa4>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d109      	bne.n	800daa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da8e:	4a21      	ldr	r2, [pc, #132]	; (800db14 <prvAddNewTaskToReadyList+0xa4>)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da94:	4b1e      	ldr	r3, [pc, #120]	; (800db10 <prvAddNewTaskToReadyList+0xa0>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d110      	bne.n	800dabe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da9c:	f000 fba6 	bl	800e1ec <prvInitialiseTaskLists>
 800daa0:	e00d      	b.n	800dabe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800daa2:	4b1d      	ldr	r3, [pc, #116]	; (800db18 <prvAddNewTaskToReadyList+0xa8>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d109      	bne.n	800dabe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800daaa:	4b1a      	ldr	r3, [pc, #104]	; (800db14 <prvAddNewTaskToReadyList+0xa4>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d802      	bhi.n	800dabe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dab8:	4a16      	ldr	r2, [pc, #88]	; (800db14 <prvAddNewTaskToReadyList+0xa4>)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dabe:	4b17      	ldr	r3, [pc, #92]	; (800db1c <prvAddNewTaskToReadyList+0xac>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	3301      	adds	r3, #1
 800dac4:	4a15      	ldr	r2, [pc, #84]	; (800db1c <prvAddNewTaskToReadyList+0xac>)
 800dac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dacc:	2201      	movs	r2, #1
 800dace:	409a      	lsls	r2, r3
 800dad0:	4b13      	ldr	r3, [pc, #76]	; (800db20 <prvAddNewTaskToReadyList+0xb0>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	4a12      	ldr	r2, [pc, #72]	; (800db20 <prvAddNewTaskToReadyList+0xb0>)
 800dad8:	6013      	str	r3, [r2, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dade:	4613      	mov	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4413      	add	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4a0f      	ldr	r2, [pc, #60]	; (800db24 <prvAddNewTaskToReadyList+0xb4>)
 800dae8:	441a      	add	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	3304      	adds	r3, #4
 800daee:	4619      	mov	r1, r3
 800daf0:	4610      	mov	r0, r2
 800daf2:	f7ff f806 	bl	800cb02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800daf6:	f000 ffbd 	bl	800ea74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dafa:	4b07      	ldr	r3, [pc, #28]	; (800db18 <prvAddNewTaskToReadyList+0xa8>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d001      	beq.n	800db06 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db02:	4b04      	ldr	r3, [pc, #16]	; (800db14 <prvAddNewTaskToReadyList+0xa4>)
 800db04:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20000d4c 	.word	0x20000d4c
 800db14:	20000c4c 	.word	0x20000c4c
 800db18:	20000d58 	.word	0x20000d58
 800db1c:	20000d68 	.word	0x20000d68
 800db20:	20000d54 	.word	0x20000d54
 800db24:	20000c50 	.word	0x20000c50

0800db28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db30:	2300      	movs	r3, #0
 800db32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d019      	beq.n	800db6e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db3a:	4b14      	ldr	r3, [pc, #80]	; (800db8c <vTaskDelay+0x64>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00c      	beq.n	800db5c <vTaskDelay+0x34>
	__asm volatile
 800db42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db46:	b672      	cpsid	i
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	b662      	cpsie	i
 800db56:	60bb      	str	r3, [r7, #8]
}
 800db58:	bf00      	nop
 800db5a:	e7fe      	b.n	800db5a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800db5c:	f000 f888 	bl	800dc70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db60:	2100      	movs	r1, #0
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fde0 	bl	800e728 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db68:	f000 f890 	bl	800dc8c <xTaskResumeAll>
 800db6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d107      	bne.n	800db84 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800db74:	4b06      	ldr	r3, [pc, #24]	; (800db90 <vTaskDelay+0x68>)
 800db76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db84:	bf00      	nop
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	20000d74 	.word	0x20000d74
 800db90:	e000ed04 	.word	0xe000ed04

0800db94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08a      	sub	sp, #40	; 0x28
 800db98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db9a:	2300      	movs	r3, #0
 800db9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db9e:	2300      	movs	r3, #0
 800dba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dba2:	463a      	mov	r2, r7
 800dba4:	1d39      	adds	r1, r7, #4
 800dba6:	f107 0308 	add.w	r3, r7, #8
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7f4 fc4a 	bl	8002444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbb0:	6839      	ldr	r1, [r7, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	9202      	str	r2, [sp, #8]
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	460a      	mov	r2, r1
 800dbc2:	4923      	ldr	r1, [pc, #140]	; (800dc50 <vTaskStartScheduler+0xbc>)
 800dbc4:	4823      	ldr	r0, [pc, #140]	; (800dc54 <vTaskStartScheduler+0xc0>)
 800dbc6:	f7ff fe0b 	bl	800d7e0 <xTaskCreateStatic>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4a22      	ldr	r2, [pc, #136]	; (800dc58 <vTaskStartScheduler+0xc4>)
 800dbce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dbd0:	4b21      	ldr	r3, [pc, #132]	; (800dc58 <vTaskStartScheduler+0xc4>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	617b      	str	r3, [r7, #20]
 800dbdc:	e001      	b.n	800dbe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d11d      	bne.n	800dc24 <vTaskStartScheduler+0x90>
	__asm volatile
 800dbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbec:	b672      	cpsid	i
 800dbee:	f383 8811 	msr	BASEPRI, r3
 800dbf2:	f3bf 8f6f 	isb	sy
 800dbf6:	f3bf 8f4f 	dsb	sy
 800dbfa:	b662      	cpsie	i
 800dbfc:	613b      	str	r3, [r7, #16]
}
 800dbfe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc00:	4b16      	ldr	r3, [pc, #88]	; (800dc5c <vTaskStartScheduler+0xc8>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	334c      	adds	r3, #76	; 0x4c
 800dc06:	4a16      	ldr	r2, [pc, #88]	; (800dc60 <vTaskStartScheduler+0xcc>)
 800dc08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc0a:	4b16      	ldr	r3, [pc, #88]	; (800dc64 <vTaskStartScheduler+0xd0>)
 800dc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc12:	4b15      	ldr	r3, [pc, #84]	; (800dc68 <vTaskStartScheduler+0xd4>)
 800dc14:	2201      	movs	r2, #1
 800dc16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc18:	4b14      	ldr	r3, [pc, #80]	; (800dc6c <vTaskStartScheduler+0xd8>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc1e:	f000 fe77 	bl	800e910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc22:	e010      	b.n	800dc46 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2a:	d10c      	bne.n	800dc46 <vTaskStartScheduler+0xb2>
	__asm volatile
 800dc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc30:	b672      	cpsid	i
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	b662      	cpsie	i
 800dc40:	60fb      	str	r3, [r7, #12]
}
 800dc42:	bf00      	nop
 800dc44:	e7fe      	b.n	800dc44 <vTaskStartScheduler+0xb0>
}
 800dc46:	bf00      	nop
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	080156b4 	.word	0x080156b4
 800dc54:	0800e1c9 	.word	0x0800e1c9
 800dc58:	20000d70 	.word	0x20000d70
 800dc5c:	20000c4c 	.word	0x20000c4c
 800dc60:	20000070 	.word	0x20000070
 800dc64:	20000d6c 	.word	0x20000d6c
 800dc68:	20000d58 	.word	0x20000d58
 800dc6c:	20000d50 	.word	0x20000d50

0800dc70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc70:	b480      	push	{r7}
 800dc72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dc74:	4b04      	ldr	r3, [pc, #16]	; (800dc88 <vTaskSuspendAll+0x18>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	4a03      	ldr	r2, [pc, #12]	; (800dc88 <vTaskSuspendAll+0x18>)
 800dc7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dc7e:	bf00      	nop
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	20000d74 	.word	0x20000d74

0800dc8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc92:	2300      	movs	r3, #0
 800dc94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc96:	2300      	movs	r3, #0
 800dc98:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc9a:	4b3c      	ldr	r3, [pc, #240]	; (800dd8c <xTaskResumeAll+0x100>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d10c      	bne.n	800dcbc <xTaskResumeAll+0x30>
	__asm volatile
 800dca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca6:	b672      	cpsid	i
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	b662      	cpsie	i
 800dcb6:	603b      	str	r3, [r7, #0]
}
 800dcb8:	bf00      	nop
 800dcba:	e7fe      	b.n	800dcba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dcbc:	f000 fea6 	bl	800ea0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dcc0:	4b32      	ldr	r3, [pc, #200]	; (800dd8c <xTaskResumeAll+0x100>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	4a31      	ldr	r2, [pc, #196]	; (800dd8c <xTaskResumeAll+0x100>)
 800dcc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcca:	4b30      	ldr	r3, [pc, #192]	; (800dd8c <xTaskResumeAll+0x100>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d155      	bne.n	800dd7e <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dcd2:	4b2f      	ldr	r3, [pc, #188]	; (800dd90 <xTaskResumeAll+0x104>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d051      	beq.n	800dd7e <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcda:	e02e      	b.n	800dd3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcdc:	4b2d      	ldr	r3, [pc, #180]	; (800dd94 <xTaskResumeAll+0x108>)
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	3318      	adds	r3, #24
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fe ff67 	bl	800cbbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fe ff62 	bl	800cbbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	409a      	lsls	r2, r3
 800dd00:	4b25      	ldr	r3, [pc, #148]	; (800dd98 <xTaskResumeAll+0x10c>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	4a24      	ldr	r2, [pc, #144]	; (800dd98 <xTaskResumeAll+0x10c>)
 800dd08:	6013      	str	r3, [r2, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0e:	4613      	mov	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4a21      	ldr	r2, [pc, #132]	; (800dd9c <xTaskResumeAll+0x110>)
 800dd18:	441a      	add	r2, r3
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4610      	mov	r0, r2
 800dd22:	f7fe feee 	bl	800cb02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd2a:	4b1d      	ldr	r3, [pc, #116]	; (800dda0 <xTaskResumeAll+0x114>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d302      	bcc.n	800dd3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dd34:	4b1b      	ldr	r3, [pc, #108]	; (800dda4 <xTaskResumeAll+0x118>)
 800dd36:	2201      	movs	r2, #1
 800dd38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd3a:	4b16      	ldr	r3, [pc, #88]	; (800dd94 <xTaskResumeAll+0x108>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1cc      	bne.n	800dcdc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd48:	f000 faf4 	bl	800e334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dd4c:	4b16      	ldr	r3, [pc, #88]	; (800dda8 <xTaskResumeAll+0x11c>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d010      	beq.n	800dd7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd58:	f000 f828 	bl	800ddac <xTaskIncrementTick>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d002      	beq.n	800dd68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dd62:	4b10      	ldr	r3, [pc, #64]	; (800dda4 <xTaskResumeAll+0x118>)
 800dd64:	2201      	movs	r2, #1
 800dd66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1f1      	bne.n	800dd58 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800dd74:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <xTaskResumeAll+0x11c>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd7a:	4b0a      	ldr	r3, [pc, #40]	; (800dda4 <xTaskResumeAll+0x118>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd7e:	f000 fe79 	bl	800ea74 <vPortExitCritical>

	return xAlreadyYielded;
 800dd82:	687b      	ldr	r3, [r7, #4]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	20000d74 	.word	0x20000d74
 800dd90:	20000d4c 	.word	0x20000d4c
 800dd94:	20000d0c 	.word	0x20000d0c
 800dd98:	20000d54 	.word	0x20000d54
 800dd9c:	20000c50 	.word	0x20000c50
 800dda0:	20000c4c 	.word	0x20000c4c
 800dda4:	20000d60 	.word	0x20000d60
 800dda8:	20000d5c 	.word	0x20000d5c

0800ddac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddb6:	4b40      	ldr	r3, [pc, #256]	; (800deb8 <xTaskIncrementTick+0x10c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d171      	bne.n	800dea2 <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ddbe:	4b3f      	ldr	r3, [pc, #252]	; (800debc <xTaskIncrementTick+0x110>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ddc6:	4a3d      	ldr	r2, [pc, #244]	; (800debc <xTaskIncrementTick+0x110>)
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d122      	bne.n	800de18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ddd2:	4b3b      	ldr	r3, [pc, #236]	; (800dec0 <xTaskIncrementTick+0x114>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00c      	beq.n	800ddf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde0:	b672      	cpsid	i
 800dde2:	f383 8811 	msr	BASEPRI, r3
 800dde6:	f3bf 8f6f 	isb	sy
 800ddea:	f3bf 8f4f 	dsb	sy
 800ddee:	b662      	cpsie	i
 800ddf0:	603b      	str	r3, [r7, #0]
}
 800ddf2:	bf00      	nop
 800ddf4:	e7fe      	b.n	800ddf4 <xTaskIncrementTick+0x48>
 800ddf6:	4b32      	ldr	r3, [pc, #200]	; (800dec0 <xTaskIncrementTick+0x114>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	60fb      	str	r3, [r7, #12]
 800ddfc:	4b31      	ldr	r3, [pc, #196]	; (800dec4 <xTaskIncrementTick+0x118>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a2f      	ldr	r2, [pc, #188]	; (800dec0 <xTaskIncrementTick+0x114>)
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	4a2f      	ldr	r2, [pc, #188]	; (800dec4 <xTaskIncrementTick+0x118>)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6013      	str	r3, [r2, #0]
 800de0a:	4b2f      	ldr	r3, [pc, #188]	; (800dec8 <xTaskIncrementTick+0x11c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	3301      	adds	r3, #1
 800de10:	4a2d      	ldr	r2, [pc, #180]	; (800dec8 <xTaskIncrementTick+0x11c>)
 800de12:	6013      	str	r3, [r2, #0]
 800de14:	f000 fa8e 	bl	800e334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de18:	4b2c      	ldr	r3, [pc, #176]	; (800decc <xTaskIncrementTick+0x120>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	693a      	ldr	r2, [r7, #16]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d344      	bcc.n	800deac <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de22:	4b27      	ldr	r3, [pc, #156]	; (800dec0 <xTaskIncrementTick+0x114>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d104      	bne.n	800de36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de2c:	4b27      	ldr	r3, [pc, #156]	; (800decc <xTaskIncrementTick+0x120>)
 800de2e:	f04f 32ff 	mov.w	r2, #4294967295
 800de32:	601a      	str	r2, [r3, #0]
					break;
 800de34:	e03a      	b.n	800deac <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de36:	4b22      	ldr	r3, [pc, #136]	; (800dec0 <xTaskIncrementTick+0x114>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de46:	693a      	ldr	r2, [r7, #16]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d203      	bcs.n	800de56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de4e:	4a1f      	ldr	r2, [pc, #124]	; (800decc <xTaskIncrementTick+0x120>)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de54:	e02a      	b.n	800deac <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	3304      	adds	r3, #4
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe feae 	bl	800cbbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de64:	2b00      	cmp	r3, #0
 800de66:	d004      	beq.n	800de72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	3318      	adds	r3, #24
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fe fea5 	bl	800cbbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de76:	2201      	movs	r2, #1
 800de78:	409a      	lsls	r2, r3
 800de7a:	4b15      	ldr	r3, [pc, #84]	; (800ded0 <xTaskIncrementTick+0x124>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4313      	orrs	r3, r2
 800de80:	4a13      	ldr	r2, [pc, #76]	; (800ded0 <xTaskIncrementTick+0x124>)
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de88:	4613      	mov	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	4413      	add	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4a10      	ldr	r2, [pc, #64]	; (800ded4 <xTaskIncrementTick+0x128>)
 800de92:	441a      	add	r2, r3
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	3304      	adds	r3, #4
 800de98:	4619      	mov	r1, r3
 800de9a:	4610      	mov	r0, r2
 800de9c:	f7fe fe31 	bl	800cb02 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dea0:	e7bf      	b.n	800de22 <xTaskIncrementTick+0x76>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dea2:	4b0d      	ldr	r3, [pc, #52]	; (800ded8 <xTaskIncrementTick+0x12c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3301      	adds	r3, #1
 800dea8:	4a0b      	ldr	r2, [pc, #44]	; (800ded8 <xTaskIncrementTick+0x12c>)
 800deaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800deac:	697b      	ldr	r3, [r7, #20]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3718      	adds	r7, #24
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20000d74 	.word	0x20000d74
 800debc:	20000d50 	.word	0x20000d50
 800dec0:	20000d04 	.word	0x20000d04
 800dec4:	20000d08 	.word	0x20000d08
 800dec8:	20000d64 	.word	0x20000d64
 800decc:	20000d6c 	.word	0x20000d6c
 800ded0:	20000d54 	.word	0x20000d54
 800ded4:	20000c50 	.word	0x20000c50
 800ded8:	20000d5c 	.word	0x20000d5c

0800dedc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dedc:	b480      	push	{r7}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dee2:	4b2a      	ldr	r3, [pc, #168]	; (800df8c <vTaskSwitchContext+0xb0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800deea:	4b29      	ldr	r3, [pc, #164]	; (800df90 <vTaskSwitchContext+0xb4>)
 800deec:	2201      	movs	r2, #1
 800deee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800def0:	e046      	b.n	800df80 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800def2:	4b27      	ldr	r3, [pc, #156]	; (800df90 <vTaskSwitchContext+0xb4>)
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def8:	4b26      	ldr	r3, [pc, #152]	; (800df94 <vTaskSwitchContext+0xb8>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	fab3 f383 	clz	r3, r3
 800df04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800df06:	7afb      	ldrb	r3, [r7, #11]
 800df08:	f1c3 031f 	rsb	r3, r3, #31
 800df0c:	617b      	str	r3, [r7, #20]
 800df0e:	4922      	ldr	r1, [pc, #136]	; (800df98 <vTaskSwitchContext+0xbc>)
 800df10:	697a      	ldr	r2, [r7, #20]
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	440b      	add	r3, r1
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10c      	bne.n	800df3c <vTaskSwitchContext+0x60>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	b672      	cpsid	i
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	b662      	cpsie	i
 800df36:	607b      	str	r3, [r7, #4]
}
 800df38:	bf00      	nop
 800df3a:	e7fe      	b.n	800df3a <vTaskSwitchContext+0x5e>
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	4613      	mov	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4a14      	ldr	r2, [pc, #80]	; (800df98 <vTaskSwitchContext+0xbc>)
 800df48:	4413      	add	r3, r2
 800df4a:	613b      	str	r3, [r7, #16]
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	685a      	ldr	r2, [r3, #4]
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	605a      	str	r2, [r3, #4]
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	3308      	adds	r3, #8
 800df5e:	429a      	cmp	r2, r3
 800df60:	d104      	bne.n	800df6c <vTaskSwitchContext+0x90>
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	605a      	str	r2, [r3, #4]
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	4a0a      	ldr	r2, [pc, #40]	; (800df9c <vTaskSwitchContext+0xc0>)
 800df74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df76:	4b09      	ldr	r3, [pc, #36]	; (800df9c <vTaskSwitchContext+0xc0>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	334c      	adds	r3, #76	; 0x4c
 800df7c:	4a08      	ldr	r2, [pc, #32]	; (800dfa0 <vTaskSwitchContext+0xc4>)
 800df7e:	6013      	str	r3, [r2, #0]
}
 800df80:	bf00      	nop
 800df82:	371c      	adds	r7, #28
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	20000d74 	.word	0x20000d74
 800df90:	20000d60 	.word	0x20000d60
 800df94:	20000d54 	.word	0x20000d54
 800df98:	20000c50 	.word	0x20000c50
 800df9c:	20000c4c 	.word	0x20000c4c
 800dfa0:	20000070 	.word	0x20000070

0800dfa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10c      	bne.n	800dfce <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800dfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb8:	b672      	cpsid	i
 800dfba:	f383 8811 	msr	BASEPRI, r3
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f3bf 8f4f 	dsb	sy
 800dfc6:	b662      	cpsie	i
 800dfc8:	60fb      	str	r3, [r7, #12]
}
 800dfca:	bf00      	nop
 800dfcc:	e7fe      	b.n	800dfcc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfce:	4b07      	ldr	r3, [pc, #28]	; (800dfec <vTaskPlaceOnEventList+0x48>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	3318      	adds	r3, #24
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7fe fdb7 	bl	800cb4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfdc:	2101      	movs	r1, #1
 800dfde:	6838      	ldr	r0, [r7, #0]
 800dfe0:	f000 fba2 	bl	800e728 <prvAddCurrentTaskToDelayedList>
}
 800dfe4:	bf00      	nop
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	20000c4c 	.word	0x20000c4c

0800dff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10c      	bne.n	800e020 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00a:	b672      	cpsid	i
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	b662      	cpsie	i
 800e01a:	60fb      	str	r3, [r7, #12]
}
 800e01c:	bf00      	nop
 800e01e:	e7fe      	b.n	800e01e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	3318      	adds	r3, #24
 800e024:	4618      	mov	r0, r3
 800e026:	f7fe fdc9 	bl	800cbbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e02a:	4b1d      	ldr	r3, [pc, #116]	; (800e0a0 <xTaskRemoveFromEventList+0xb0>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d11c      	bne.n	800e06c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	3304      	adds	r3, #4
 800e036:	4618      	mov	r0, r3
 800e038:	f7fe fdc0 	bl	800cbbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e040:	2201      	movs	r2, #1
 800e042:	409a      	lsls	r2, r3
 800e044:	4b17      	ldr	r3, [pc, #92]	; (800e0a4 <xTaskRemoveFromEventList+0xb4>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4313      	orrs	r3, r2
 800e04a:	4a16      	ldr	r2, [pc, #88]	; (800e0a4 <xTaskRemoveFromEventList+0xb4>)
 800e04c:	6013      	str	r3, [r2, #0]
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e052:	4613      	mov	r3, r2
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	4413      	add	r3, r2
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	4a13      	ldr	r2, [pc, #76]	; (800e0a8 <xTaskRemoveFromEventList+0xb8>)
 800e05c:	441a      	add	r2, r3
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	3304      	adds	r3, #4
 800e062:	4619      	mov	r1, r3
 800e064:	4610      	mov	r0, r2
 800e066:	f7fe fd4c 	bl	800cb02 <vListInsertEnd>
 800e06a:	e005      	b.n	800e078 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	3318      	adds	r3, #24
 800e070:	4619      	mov	r1, r3
 800e072:	480e      	ldr	r0, [pc, #56]	; (800e0ac <xTaskRemoveFromEventList+0xbc>)
 800e074:	f7fe fd45 	bl	800cb02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07c:	4b0c      	ldr	r3, [pc, #48]	; (800e0b0 <xTaskRemoveFromEventList+0xc0>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e082:	429a      	cmp	r2, r3
 800e084:	d905      	bls.n	800e092 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e086:	2301      	movs	r3, #1
 800e088:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e08a:	4b0a      	ldr	r3, [pc, #40]	; (800e0b4 <xTaskRemoveFromEventList+0xc4>)
 800e08c:	2201      	movs	r2, #1
 800e08e:	601a      	str	r2, [r3, #0]
 800e090:	e001      	b.n	800e096 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e092:	2300      	movs	r3, #0
 800e094:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e096:	697b      	ldr	r3, [r7, #20]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	20000d74 	.word	0x20000d74
 800e0a4:	20000d54 	.word	0x20000d54
 800e0a8:	20000c50 	.word	0x20000c50
 800e0ac:	20000d0c 	.word	0x20000d0c
 800e0b0:	20000c4c 	.word	0x20000c4c
 800e0b4:	20000d60 	.word	0x20000d60

0800e0b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0c0:	4b06      	ldr	r3, [pc, #24]	; (800e0dc <vTaskInternalSetTimeOutState+0x24>)
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0c8:	4b05      	ldr	r3, [pc, #20]	; (800e0e0 <vTaskInternalSetTimeOutState+0x28>)
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	605a      	str	r2, [r3, #4]
}
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr
 800e0dc:	20000d64 	.word	0x20000d64
 800e0e0:	20000d50 	.word	0x20000d50

0800e0e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b088      	sub	sp, #32
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d10c      	bne.n	800e10e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f8:	b672      	cpsid	i
 800e0fa:	f383 8811 	msr	BASEPRI, r3
 800e0fe:	f3bf 8f6f 	isb	sy
 800e102:	f3bf 8f4f 	dsb	sy
 800e106:	b662      	cpsie	i
 800e108:	613b      	str	r3, [r7, #16]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10c      	bne.n	800e12e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	b672      	cpsid	i
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	b662      	cpsie	i
 800e128:	60fb      	str	r3, [r7, #12]
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e12e:	f000 fc6d 	bl	800ea0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e132:	4b1d      	ldr	r3, [pc, #116]	; (800e1a8 <xTaskCheckForTimeOut+0xc4>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	69ba      	ldr	r2, [r7, #24]
 800e13e:	1ad3      	subs	r3, r2, r3
 800e140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14a:	d102      	bne.n	800e152 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e14c:	2300      	movs	r3, #0
 800e14e:	61fb      	str	r3, [r7, #28]
 800e150:	e023      	b.n	800e19a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	4b15      	ldr	r3, [pc, #84]	; (800e1ac <xTaskCheckForTimeOut+0xc8>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d007      	beq.n	800e16e <xTaskCheckForTimeOut+0x8a>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	69ba      	ldr	r2, [r7, #24]
 800e164:	429a      	cmp	r2, r3
 800e166:	d302      	bcc.n	800e16e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e168:	2301      	movs	r3, #1
 800e16a:	61fb      	str	r3, [r7, #28]
 800e16c:	e015      	b.n	800e19a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	697a      	ldr	r2, [r7, #20]
 800e174:	429a      	cmp	r2, r3
 800e176:	d20b      	bcs.n	800e190 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	1ad2      	subs	r2, r2, r3
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7ff ff97 	bl	800e0b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e18a:	2300      	movs	r3, #0
 800e18c:	61fb      	str	r3, [r7, #28]
 800e18e:	e004      	b.n	800e19a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	2200      	movs	r2, #0
 800e194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e196:	2301      	movs	r3, #1
 800e198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e19a:	f000 fc6b 	bl	800ea74 <vPortExitCritical>

	return xReturn;
 800e19e:	69fb      	ldr	r3, [r7, #28]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3720      	adds	r7, #32
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	20000d50 	.word	0x20000d50
 800e1ac:	20000d64 	.word	0x20000d64

0800e1b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1b4:	4b03      	ldr	r3, [pc, #12]	; (800e1c4 <vTaskMissedYield+0x14>)
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	601a      	str	r2, [r3, #0]
}
 800e1ba:	bf00      	nop
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr
 800e1c4:	20000d60 	.word	0x20000d60

0800e1c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1d0:	f000 f84c 	bl	800e26c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800e1d4:	4b04      	ldr	r3, [pc, #16]	; (800e1e8 <prvIdleTask+0x20>)
 800e1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1da:	601a      	str	r2, [r3, #0]
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e1e4:	e7f4      	b.n	800e1d0 <prvIdleTask+0x8>
 800e1e6:	bf00      	nop
 800e1e8:	e000ed04 	.word	0xe000ed04

0800e1ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	607b      	str	r3, [r7, #4]
 800e1f6:	e00c      	b.n	800e212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4413      	add	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4a12      	ldr	r2, [pc, #72]	; (800e24c <prvInitialiseTaskLists+0x60>)
 800e204:	4413      	add	r3, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe fc4e 	bl	800caa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3301      	adds	r3, #1
 800e210:	607b      	str	r3, [r7, #4]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b06      	cmp	r3, #6
 800e216:	d9ef      	bls.n	800e1f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e218:	480d      	ldr	r0, [pc, #52]	; (800e250 <prvInitialiseTaskLists+0x64>)
 800e21a:	f7fe fc45 	bl	800caa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e21e:	480d      	ldr	r0, [pc, #52]	; (800e254 <prvInitialiseTaskLists+0x68>)
 800e220:	f7fe fc42 	bl	800caa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e224:	480c      	ldr	r0, [pc, #48]	; (800e258 <prvInitialiseTaskLists+0x6c>)
 800e226:	f7fe fc3f 	bl	800caa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e22a:	480c      	ldr	r0, [pc, #48]	; (800e25c <prvInitialiseTaskLists+0x70>)
 800e22c:	f7fe fc3c 	bl	800caa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e230:	480b      	ldr	r0, [pc, #44]	; (800e260 <prvInitialiseTaskLists+0x74>)
 800e232:	f7fe fc39 	bl	800caa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e236:	4b0b      	ldr	r3, [pc, #44]	; (800e264 <prvInitialiseTaskLists+0x78>)
 800e238:	4a05      	ldr	r2, [pc, #20]	; (800e250 <prvInitialiseTaskLists+0x64>)
 800e23a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e23c:	4b0a      	ldr	r3, [pc, #40]	; (800e268 <prvInitialiseTaskLists+0x7c>)
 800e23e:	4a05      	ldr	r2, [pc, #20]	; (800e254 <prvInitialiseTaskLists+0x68>)
 800e240:	601a      	str	r2, [r3, #0]
}
 800e242:	bf00      	nop
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	20000c50 	.word	0x20000c50
 800e250:	20000cdc 	.word	0x20000cdc
 800e254:	20000cf0 	.word	0x20000cf0
 800e258:	20000d0c 	.word	0x20000d0c
 800e25c:	20000d20 	.word	0x20000d20
 800e260:	20000d38 	.word	0x20000d38
 800e264:	20000d04 	.word	0x20000d04
 800e268:	20000d08 	.word	0x20000d08

0800e26c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e272:	e019      	b.n	800e2a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e274:	f000 fbca 	bl	800ea0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e278:	4b10      	ldr	r3, [pc, #64]	; (800e2bc <prvCheckTasksWaitingTermination+0x50>)
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3304      	adds	r3, #4
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe fc99 	bl	800cbbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e28a:	4b0d      	ldr	r3, [pc, #52]	; (800e2c0 <prvCheckTasksWaitingTermination+0x54>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3b01      	subs	r3, #1
 800e290:	4a0b      	ldr	r2, [pc, #44]	; (800e2c0 <prvCheckTasksWaitingTermination+0x54>)
 800e292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e294:	4b0b      	ldr	r3, [pc, #44]	; (800e2c4 <prvCheckTasksWaitingTermination+0x58>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3b01      	subs	r3, #1
 800e29a:	4a0a      	ldr	r2, [pc, #40]	; (800e2c4 <prvCheckTasksWaitingTermination+0x58>)
 800e29c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e29e:	f000 fbe9 	bl	800ea74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f810 	bl	800e2c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2a8:	4b06      	ldr	r3, [pc, #24]	; (800e2c4 <prvCheckTasksWaitingTermination+0x58>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1e1      	bne.n	800e274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2b0:	bf00      	nop
 800e2b2:	bf00      	nop
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	20000d20 	.word	0x20000d20
 800e2c0:	20000d4c 	.word	0x20000d4c
 800e2c4:	20000d34 	.word	0x20000d34

0800e2c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	334c      	adds	r3, #76	; 0x4c
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f001 fea1 	bl	801001c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d108      	bne.n	800e2f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 fd85 	bl	800edf8 <vPortFree>
				vPortFree( pxTCB );
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fd82 	bl	800edf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e2f4:	e01a      	b.n	800e32c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d103      	bne.n	800e308 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fd79 	bl	800edf8 <vPortFree>
	}
 800e306:	e011      	b.n	800e32c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e30e:	2b02      	cmp	r3, #2
 800e310:	d00c      	beq.n	800e32c <prvDeleteTCB+0x64>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e316:	b672      	cpsid	i
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	b662      	cpsie	i
 800e326:	60fb      	str	r3, [r7, #12]
}
 800e328:	bf00      	nop
 800e32a:	e7fe      	b.n	800e32a <prvDeleteTCB+0x62>
	}
 800e32c:	bf00      	nop
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e33a:	4b0c      	ldr	r3, [pc, #48]	; (800e36c <prvResetNextTaskUnblockTime+0x38>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d104      	bne.n	800e34e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e344:	4b0a      	ldr	r3, [pc, #40]	; (800e370 <prvResetNextTaskUnblockTime+0x3c>)
 800e346:	f04f 32ff 	mov.w	r2, #4294967295
 800e34a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e34c:	e008      	b.n	800e360 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e34e:	4b07      	ldr	r3, [pc, #28]	; (800e36c <prvResetNextTaskUnblockTime+0x38>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	4a04      	ldr	r2, [pc, #16]	; (800e370 <prvResetNextTaskUnblockTime+0x3c>)
 800e35e:	6013      	str	r3, [r2, #0]
}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	20000d04 	.word	0x20000d04
 800e370:	20000d6c 	.word	0x20000d6c

0800e374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e37a:	4b0b      	ldr	r3, [pc, #44]	; (800e3a8 <xTaskGetSchedulerState+0x34>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d102      	bne.n	800e388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e382:	2301      	movs	r3, #1
 800e384:	607b      	str	r3, [r7, #4]
 800e386:	e008      	b.n	800e39a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e388:	4b08      	ldr	r3, [pc, #32]	; (800e3ac <xTaskGetSchedulerState+0x38>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d102      	bne.n	800e396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e390:	2302      	movs	r3, #2
 800e392:	607b      	str	r3, [r7, #4]
 800e394:	e001      	b.n	800e39a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e396:	2300      	movs	r3, #0
 800e398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e39a:	687b      	ldr	r3, [r7, #4]
	}
 800e39c:	4618      	mov	r0, r3
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	20000d58 	.word	0x20000d58
 800e3ac:	20000d74 	.word	0x20000d74

0800e3b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d069      	beq.n	800e49a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ca:	4b36      	ldr	r3, [pc, #216]	; (800e4a4 <xTaskPriorityInherit+0xf4>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d259      	bcs.n	800e488 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	db06      	blt.n	800e3ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3dc:	4b31      	ldr	r3, [pc, #196]	; (800e4a4 <xTaskPriorityInherit+0xf4>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e2:	f1c3 0207 	rsb	r2, r3, #7
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	6959      	ldr	r1, [r3, #20]
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4a2b      	ldr	r2, [pc, #172]	; (800e4a8 <xTaskPriorityInherit+0xf8>)
 800e3fc:	4413      	add	r3, r2
 800e3fe:	4299      	cmp	r1, r3
 800e400:	d13a      	bne.n	800e478 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	3304      	adds	r3, #4
 800e406:	4618      	mov	r0, r3
 800e408:	f7fe fbd8 	bl	800cbbc <uxListRemove>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d115      	bne.n	800e43e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e416:	4924      	ldr	r1, [pc, #144]	; (800e4a8 <xTaskPriorityInherit+0xf8>)
 800e418:	4613      	mov	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4413      	add	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	440b      	add	r3, r1
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10a      	bne.n	800e43e <xTaskPriorityInherit+0x8e>
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42c:	2201      	movs	r2, #1
 800e42e:	fa02 f303 	lsl.w	r3, r2, r3
 800e432:	43da      	mvns	r2, r3
 800e434:	4b1d      	ldr	r3, [pc, #116]	; (800e4ac <xTaskPriorityInherit+0xfc>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4013      	ands	r3, r2
 800e43a:	4a1c      	ldr	r2, [pc, #112]	; (800e4ac <xTaskPriorityInherit+0xfc>)
 800e43c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e43e:	4b19      	ldr	r3, [pc, #100]	; (800e4a4 <xTaskPriorityInherit+0xf4>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e44c:	2201      	movs	r2, #1
 800e44e:	409a      	lsls	r2, r3
 800e450:	4b16      	ldr	r3, [pc, #88]	; (800e4ac <xTaskPriorityInherit+0xfc>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4313      	orrs	r3, r2
 800e456:	4a15      	ldr	r2, [pc, #84]	; (800e4ac <xTaskPriorityInherit+0xfc>)
 800e458:	6013      	str	r3, [r2, #0]
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e45e:	4613      	mov	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	4413      	add	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4a10      	ldr	r2, [pc, #64]	; (800e4a8 <xTaskPriorityInherit+0xf8>)
 800e468:	441a      	add	r2, r3
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	3304      	adds	r3, #4
 800e46e:	4619      	mov	r1, r3
 800e470:	4610      	mov	r0, r2
 800e472:	f7fe fb46 	bl	800cb02 <vListInsertEnd>
 800e476:	e004      	b.n	800e482 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e478:	4b0a      	ldr	r3, [pc, #40]	; (800e4a4 <xTaskPriorityInherit+0xf4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e482:	2301      	movs	r3, #1
 800e484:	60fb      	str	r3, [r7, #12]
 800e486:	e008      	b.n	800e49a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e48c:	4b05      	ldr	r3, [pc, #20]	; (800e4a4 <xTaskPriorityInherit+0xf4>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e492:	429a      	cmp	r2, r3
 800e494:	d201      	bcs.n	800e49a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e496:	2301      	movs	r3, #1
 800e498:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e49a:	68fb      	ldr	r3, [r7, #12]
	}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	20000c4c 	.word	0x20000c4c
 800e4a8:	20000c50 	.word	0x20000c50
 800e4ac:	20000d54 	.word	0x20000d54

0800e4b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d072      	beq.n	800e5ac <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4c6:	4b3c      	ldr	r3, [pc, #240]	; (800e5b8 <xTaskPriorityDisinherit+0x108>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d00c      	beq.n	800e4ea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	b672      	cpsid	i
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	b662      	cpsie	i
 800e4e4:	60fb      	str	r3, [r7, #12]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10c      	bne.n	800e50c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	b672      	cpsid	i
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	b662      	cpsie	i
 800e506:	60bb      	str	r3, [r7, #8]
}
 800e508:	bf00      	nop
 800e50a:	e7fe      	b.n	800e50a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e510:	1e5a      	subs	r2, r3, #1
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e51e:	429a      	cmp	r2, r3
 800e520:	d044      	beq.n	800e5ac <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e526:	2b00      	cmp	r3, #0
 800e528:	d140      	bne.n	800e5ac <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	3304      	adds	r3, #4
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fb44 	bl	800cbbc <uxListRemove>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d115      	bne.n	800e566 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53e:	491f      	ldr	r1, [pc, #124]	; (800e5bc <xTaskPriorityDisinherit+0x10c>)
 800e540:	4613      	mov	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	440b      	add	r3, r1
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10a      	bne.n	800e566 <xTaskPriorityDisinherit+0xb6>
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e554:	2201      	movs	r2, #1
 800e556:	fa02 f303 	lsl.w	r3, r2, r3
 800e55a:	43da      	mvns	r2, r3
 800e55c:	4b18      	ldr	r3, [pc, #96]	; (800e5c0 <xTaskPriorityDisinherit+0x110>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4013      	ands	r3, r2
 800e562:	4a17      	ldr	r2, [pc, #92]	; (800e5c0 <xTaskPriorityDisinherit+0x110>)
 800e564:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e572:	f1c3 0207 	rsb	r2, r3, #7
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57e:	2201      	movs	r2, #1
 800e580:	409a      	lsls	r2, r3
 800e582:	4b0f      	ldr	r3, [pc, #60]	; (800e5c0 <xTaskPriorityDisinherit+0x110>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4313      	orrs	r3, r2
 800e588:	4a0d      	ldr	r2, [pc, #52]	; (800e5c0 <xTaskPriorityDisinherit+0x110>)
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e590:	4613      	mov	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	4413      	add	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4a08      	ldr	r2, [pc, #32]	; (800e5bc <xTaskPriorityDisinherit+0x10c>)
 800e59a:	441a      	add	r2, r3
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	3304      	adds	r3, #4
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	f7fe faad 	bl	800cb02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5ac:	697b      	ldr	r3, [r7, #20]
	}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3718      	adds	r7, #24
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20000c4c 	.word	0x20000c4c
 800e5bc:	20000c50 	.word	0x20000c50
 800e5c0:	20000d54 	.word	0x20000d54

0800e5c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b088      	sub	sp, #32
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f000 8087 	beq.w	800e6ec <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10c      	bne.n	800e600 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	b672      	cpsid	i
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	b662      	cpsie	i
 800e5fa:	60fb      	str	r3, [r7, #12]
}
 800e5fc:	bf00      	nop
 800e5fe:	e7fe      	b.n	800e5fe <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e604:	683a      	ldr	r2, [r7, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	d902      	bls.n	800e610 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	61fb      	str	r3, [r7, #28]
 800e60e:	e002      	b.n	800e616 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e614:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e61a:	69fa      	ldr	r2, [r7, #28]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d065      	beq.n	800e6ec <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e624:	697a      	ldr	r2, [r7, #20]
 800e626:	429a      	cmp	r2, r3
 800e628:	d160      	bne.n	800e6ec <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e62a:	4b32      	ldr	r3, [pc, #200]	; (800e6f4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	69ba      	ldr	r2, [r7, #24]
 800e630:	429a      	cmp	r2, r3
 800e632:	d10c      	bne.n	800e64e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e638:	b672      	cpsid	i
 800e63a:	f383 8811 	msr	BASEPRI, r3
 800e63e:	f3bf 8f6f 	isb	sy
 800e642:	f3bf 8f4f 	dsb	sy
 800e646:	b662      	cpsie	i
 800e648:	60bb      	str	r3, [r7, #8]
}
 800e64a:	bf00      	nop
 800e64c:	e7fe      	b.n	800e64c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e652:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	69fa      	ldr	r2, [r7, #28]
 800e658:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	db04      	blt.n	800e66c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	f1c3 0207 	rsb	r2, r3, #7
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	6959      	ldr	r1, [r3, #20]
 800e670:	693a      	ldr	r2, [r7, #16]
 800e672:	4613      	mov	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4a1f      	ldr	r2, [pc, #124]	; (800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e67c:	4413      	add	r3, r2
 800e67e:	4299      	cmp	r1, r3
 800e680:	d134      	bne.n	800e6ec <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	3304      	adds	r3, #4
 800e686:	4618      	mov	r0, r3
 800e688:	f7fe fa98 	bl	800cbbc <uxListRemove>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d115      	bne.n	800e6be <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e696:	4918      	ldr	r1, [pc, #96]	; (800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e698:	4613      	mov	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4413      	add	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	440b      	add	r3, r1
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d10a      	bne.n	800e6be <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e6b2:	43da      	mvns	r2, r3
 800e6b4:	4b11      	ldr	r3, [pc, #68]	; (800e6fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	4a10      	ldr	r2, [pc, #64]	; (800e6fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e6bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	409a      	lsls	r2, r3
 800e6c6:	4b0d      	ldr	r3, [pc, #52]	; (800e6fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	4a0b      	ldr	r2, [pc, #44]	; (800e6fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e6ce:	6013      	str	r3, [r2, #0]
 800e6d0:	69bb      	ldr	r3, [r7, #24]
 800e6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	4413      	add	r3, r2
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	4a06      	ldr	r2, [pc, #24]	; (800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e6de:	441a      	add	r2, r3
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	4610      	mov	r0, r2
 800e6e8:	f7fe fa0b 	bl	800cb02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6ec:	bf00      	nop
 800e6ee:	3720      	adds	r7, #32
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	20000c4c 	.word	0x20000c4c
 800e6f8:	20000c50 	.word	0x20000c50
 800e6fc:	20000d54 	.word	0x20000d54

0800e700 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e700:	b480      	push	{r7}
 800e702:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e704:	4b07      	ldr	r3, [pc, #28]	; (800e724 <pvTaskIncrementMutexHeldCount+0x24>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d004      	beq.n	800e716 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e70c:	4b05      	ldr	r3, [pc, #20]	; (800e724 <pvTaskIncrementMutexHeldCount+0x24>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e712:	3201      	adds	r2, #1
 800e714:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e716:	4b03      	ldr	r3, [pc, #12]	; (800e724 <pvTaskIncrementMutexHeldCount+0x24>)
 800e718:	681b      	ldr	r3, [r3, #0]
	}
 800e71a:	4618      	mov	r0, r3
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr
 800e724:	20000c4c 	.word	0x20000c4c

0800e728 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e732:	4b29      	ldr	r3, [pc, #164]	; (800e7d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e738:	4b28      	ldr	r3, [pc, #160]	; (800e7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3304      	adds	r3, #4
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fe fa3c 	bl	800cbbc <uxListRemove>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d10b      	bne.n	800e762 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e74a:	4b24      	ldr	r3, [pc, #144]	; (800e7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e750:	2201      	movs	r2, #1
 800e752:	fa02 f303 	lsl.w	r3, r2, r3
 800e756:	43da      	mvns	r2, r3
 800e758:	4b21      	ldr	r3, [pc, #132]	; (800e7e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4013      	ands	r3, r2
 800e75e:	4a20      	ldr	r2, [pc, #128]	; (800e7e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e760:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e768:	d10a      	bne.n	800e780 <prvAddCurrentTaskToDelayedList+0x58>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d007      	beq.n	800e780 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e770:	4b1a      	ldr	r3, [pc, #104]	; (800e7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3304      	adds	r3, #4
 800e776:	4619      	mov	r1, r3
 800e778:	481a      	ldr	r0, [pc, #104]	; (800e7e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e77a:	f7fe f9c2 	bl	800cb02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e77e:	e026      	b.n	800e7ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4413      	add	r3, r2
 800e786:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e788:	4b14      	ldr	r3, [pc, #80]	; (800e7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68ba      	ldr	r2, [r7, #8]
 800e78e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	429a      	cmp	r2, r3
 800e796:	d209      	bcs.n	800e7ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e798:	4b13      	ldr	r3, [pc, #76]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	4b0f      	ldr	r3, [pc, #60]	; (800e7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	4610      	mov	r0, r2
 800e7a6:	f7fe f9d0 	bl	800cb4a <vListInsert>
}
 800e7aa:	e010      	b.n	800e7ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	f7fe f9c6 	bl	800cb4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e7be:	4b0c      	ldr	r3, [pc, #48]	; (800e7f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68ba      	ldr	r2, [r7, #8]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d202      	bcs.n	800e7ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e7c8:	4a09      	ldr	r2, [pc, #36]	; (800e7f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	6013      	str	r3, [r2, #0]
}
 800e7ce:	bf00      	nop
 800e7d0:	3710      	adds	r7, #16
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20000d50 	.word	0x20000d50
 800e7dc:	20000c4c 	.word	0x20000c4c
 800e7e0:	20000d54 	.word	0x20000d54
 800e7e4:	20000d38 	.word	0x20000d38
 800e7e8:	20000d08 	.word	0x20000d08
 800e7ec:	20000d04 	.word	0x20000d04
 800e7f0:	20000d6c 	.word	0x20000d6c

0800e7f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	3b04      	subs	r3, #4
 800e804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	3b04      	subs	r3, #4
 800e812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	f023 0201 	bic.w	r2, r3, #1
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	3b04      	subs	r3, #4
 800e822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e824:	4a0c      	ldr	r2, [pc, #48]	; (800e858 <pxPortInitialiseStack+0x64>)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	3b14      	subs	r3, #20
 800e82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3b04      	subs	r3, #4
 800e83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f06f 0202 	mvn.w	r2, #2
 800e842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	3b20      	subs	r3, #32
 800e848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e84a:	68fb      	ldr	r3, [r7, #12]
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3714      	adds	r7, #20
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	0800e85d 	.word	0x0800e85d

0800e85c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e866:	4b14      	ldr	r3, [pc, #80]	; (800e8b8 <prvTaskExitError+0x5c>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e86e:	d00c      	beq.n	800e88a <prvTaskExitError+0x2e>
	__asm volatile
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	b672      	cpsid	i
 800e876:	f383 8811 	msr	BASEPRI, r3
 800e87a:	f3bf 8f6f 	isb	sy
 800e87e:	f3bf 8f4f 	dsb	sy
 800e882:	b662      	cpsie	i
 800e884:	60fb      	str	r3, [r7, #12]
}
 800e886:	bf00      	nop
 800e888:	e7fe      	b.n	800e888 <prvTaskExitError+0x2c>
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	b672      	cpsid	i
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	b662      	cpsie	i
 800e89e:	60bb      	str	r3, [r7, #8]
}
 800e8a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e8a2:	bf00      	nop
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d0fc      	beq.n	800e8a4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e8aa:	bf00      	nop
 800e8ac:	bf00      	nop
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr
 800e8b8:	20000014 	.word	0x20000014
 800e8bc:	00000000 	.word	0x00000000

0800e8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e8c0:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <pxCurrentTCBConst2>)
 800e8c2:	6819      	ldr	r1, [r3, #0]
 800e8c4:	6808      	ldr	r0, [r1, #0]
 800e8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ca:	f380 8809 	msr	PSP, r0
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f04f 0000 	mov.w	r0, #0
 800e8d6:	f380 8811 	msr	BASEPRI, r0
 800e8da:	4770      	bx	lr
 800e8dc:	f3af 8000 	nop.w

0800e8e0 <pxCurrentTCBConst2>:
 800e8e0:	20000c4c 	.word	0x20000c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8e4:	bf00      	nop
 800e8e6:	bf00      	nop

0800e8e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8e8:	4808      	ldr	r0, [pc, #32]	; (800e90c <prvPortStartFirstTask+0x24>)
 800e8ea:	6800      	ldr	r0, [r0, #0]
 800e8ec:	6800      	ldr	r0, [r0, #0]
 800e8ee:	f380 8808 	msr	MSP, r0
 800e8f2:	f04f 0000 	mov.w	r0, #0
 800e8f6:	f380 8814 	msr	CONTROL, r0
 800e8fa:	b662      	cpsie	i
 800e8fc:	b661      	cpsie	f
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	df00      	svc	0
 800e908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e90a:	bf00      	nop
 800e90c:	e000ed08 	.word	0xe000ed08

0800e910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e916:	4b37      	ldr	r3, [pc, #220]	; (800e9f4 <xPortStartScheduler+0xe4>)
 800e918:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	22ff      	movs	r2, #255	; 0xff
 800e926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e930:	78fb      	ldrb	r3, [r7, #3]
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	4b2f      	ldr	r3, [pc, #188]	; (800e9f8 <xPortStartScheduler+0xe8>)
 800e93c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e93e:	4b2f      	ldr	r3, [pc, #188]	; (800e9fc <xPortStartScheduler+0xec>)
 800e940:	2207      	movs	r2, #7
 800e942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e944:	e009      	b.n	800e95a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e946:	4b2d      	ldr	r3, [pc, #180]	; (800e9fc <xPortStartScheduler+0xec>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3b01      	subs	r3, #1
 800e94c:	4a2b      	ldr	r2, [pc, #172]	; (800e9fc <xPortStartScheduler+0xec>)
 800e94e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e950:	78fb      	ldrb	r3, [r7, #3]
 800e952:	b2db      	uxtb	r3, r3
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	b2db      	uxtb	r3, r3
 800e958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e95a:	78fb      	ldrb	r3, [r7, #3]
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e962:	2b80      	cmp	r3, #128	; 0x80
 800e964:	d0ef      	beq.n	800e946 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e966:	4b25      	ldr	r3, [pc, #148]	; (800e9fc <xPortStartScheduler+0xec>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f1c3 0307 	rsb	r3, r3, #7
 800e96e:	2b04      	cmp	r3, #4
 800e970:	d00c      	beq.n	800e98c <xPortStartScheduler+0x7c>
	__asm volatile
 800e972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e976:	b672      	cpsid	i
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	b662      	cpsie	i
 800e986:	60bb      	str	r3, [r7, #8]
}
 800e988:	bf00      	nop
 800e98a:	e7fe      	b.n	800e98a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e98c:	4b1b      	ldr	r3, [pc, #108]	; (800e9fc <xPortStartScheduler+0xec>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	021b      	lsls	r3, r3, #8
 800e992:	4a1a      	ldr	r2, [pc, #104]	; (800e9fc <xPortStartScheduler+0xec>)
 800e994:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e996:	4b19      	ldr	r3, [pc, #100]	; (800e9fc <xPortStartScheduler+0xec>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e99e:	4a17      	ldr	r2, [pc, #92]	; (800e9fc <xPortStartScheduler+0xec>)
 800e9a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e9aa:	4b15      	ldr	r3, [pc, #84]	; (800ea00 <xPortStartScheduler+0xf0>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a14      	ldr	r2, [pc, #80]	; (800ea00 <xPortStartScheduler+0xf0>)
 800e9b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e9b6:	4b12      	ldr	r3, [pc, #72]	; (800ea00 <xPortStartScheduler+0xf0>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a11      	ldr	r2, [pc, #68]	; (800ea00 <xPortStartScheduler+0xf0>)
 800e9bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e9c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e9c2:	f000 f8dd 	bl	800eb80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ea04 <xPortStartScheduler+0xf4>)
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e9cc:	f000 f8fc 	bl	800ebc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ea08 <xPortStartScheduler+0xf8>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a0c      	ldr	r2, [pc, #48]	; (800ea08 <xPortStartScheduler+0xf8>)
 800e9d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e9da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e9dc:	f7ff ff84 	bl	800e8e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e9e0:	f7ff fa7c 	bl	800dedc <vTaskSwitchContext>
	prvTaskExitError();
 800e9e4:	f7ff ff3a 	bl	800e85c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	e000e400 	.word	0xe000e400
 800e9f8:	20000d78 	.word	0x20000d78
 800e9fc:	20000d7c 	.word	0x20000d7c
 800ea00:	e000ed20 	.word	0xe000ed20
 800ea04:	20000014 	.word	0x20000014
 800ea08:	e000ef34 	.word	0xe000ef34

0800ea0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
	__asm volatile
 800ea12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea16:	b672      	cpsid	i
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	b662      	cpsie	i
 800ea26:	607b      	str	r3, [r7, #4]
}
 800ea28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea2a:	4b10      	ldr	r3, [pc, #64]	; (800ea6c <vPortEnterCritical+0x60>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	4a0e      	ldr	r2, [pc, #56]	; (800ea6c <vPortEnterCritical+0x60>)
 800ea32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea34:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <vPortEnterCritical+0x60>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d111      	bne.n	800ea60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea3c:	4b0c      	ldr	r3, [pc, #48]	; (800ea70 <vPortEnterCritical+0x64>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00c      	beq.n	800ea60 <vPortEnterCritical+0x54>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4a:	b672      	cpsid	i
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	b662      	cpsie	i
 800ea5a:	603b      	str	r3, [r7, #0]
}
 800ea5c:	bf00      	nop
 800ea5e:	e7fe      	b.n	800ea5e <vPortEnterCritical+0x52>
	}
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	20000014 	.word	0x20000014
 800ea70:	e000ed04 	.word	0xe000ed04

0800ea74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea7a:	4b13      	ldr	r3, [pc, #76]	; (800eac8 <vPortExitCritical+0x54>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10c      	bne.n	800ea9c <vPortExitCritical+0x28>
	__asm volatile
 800ea82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea86:	b672      	cpsid	i
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	b662      	cpsie	i
 800ea96:	607b      	str	r3, [r7, #4]
}
 800ea98:	bf00      	nop
 800ea9a:	e7fe      	b.n	800ea9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ea9c:	4b0a      	ldr	r3, [pc, #40]	; (800eac8 <vPortExitCritical+0x54>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	4a09      	ldr	r2, [pc, #36]	; (800eac8 <vPortExitCritical+0x54>)
 800eaa4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eaa6:	4b08      	ldr	r3, [pc, #32]	; (800eac8 <vPortExitCritical+0x54>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d105      	bne.n	800eaba <vPortExitCritical+0x46>
 800eaae:	2300      	movs	r3, #0
 800eab0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	f383 8811 	msr	BASEPRI, r3
}
 800eab8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eaba:	bf00      	nop
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop
 800eac8:	20000014 	.word	0x20000014
 800eacc:	00000000 	.word	0x00000000

0800ead0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ead0:	f3ef 8009 	mrs	r0, PSP
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	4b15      	ldr	r3, [pc, #84]	; (800eb30 <pxCurrentTCBConst>)
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	f01e 0f10 	tst.w	lr, #16
 800eae0:	bf08      	it	eq
 800eae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaea:	6010      	str	r0, [r2, #0]
 800eaec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eaf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eaf4:	b672      	cpsid	i
 800eaf6:	f380 8811 	msr	BASEPRI, r0
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	b662      	cpsie	i
 800eb04:	f7ff f9ea 	bl	800dedc <vTaskSwitchContext>
 800eb08:	f04f 0000 	mov.w	r0, #0
 800eb0c:	f380 8811 	msr	BASEPRI, r0
 800eb10:	bc09      	pop	{r0, r3}
 800eb12:	6819      	ldr	r1, [r3, #0]
 800eb14:	6808      	ldr	r0, [r1, #0]
 800eb16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1a:	f01e 0f10 	tst.w	lr, #16
 800eb1e:	bf08      	it	eq
 800eb20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb24:	f380 8809 	msr	PSP, r0
 800eb28:	f3bf 8f6f 	isb	sy
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop

0800eb30 <pxCurrentTCBConst>:
 800eb30:	20000c4c 	.word	0x20000c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop

0800eb38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb42:	b672      	cpsid	i
 800eb44:	f383 8811 	msr	BASEPRI, r3
 800eb48:	f3bf 8f6f 	isb	sy
 800eb4c:	f3bf 8f4f 	dsb	sy
 800eb50:	b662      	cpsie	i
 800eb52:	607b      	str	r3, [r7, #4]
}
 800eb54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb56:	f7ff f929 	bl	800ddac <xTaskIncrementTick>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d003      	beq.n	800eb68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb60:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <SysTick_Handler+0x44>)
 800eb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb66:	601a      	str	r2, [r3, #0]
 800eb68:	2300      	movs	r3, #0
 800eb6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	f383 8811 	msr	BASEPRI, r3
}
 800eb72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb74:	bf00      	nop
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	e000ed04 	.word	0xe000ed04

0800eb80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb80:	b480      	push	{r7}
 800eb82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb84:	4b0b      	ldr	r3, [pc, #44]	; (800ebb4 <vPortSetupTimerInterrupt+0x34>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb8a:	4b0b      	ldr	r3, [pc, #44]	; (800ebb8 <vPortSetupTimerInterrupt+0x38>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb90:	4b0a      	ldr	r3, [pc, #40]	; (800ebbc <vPortSetupTimerInterrupt+0x3c>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a0a      	ldr	r2, [pc, #40]	; (800ebc0 <vPortSetupTimerInterrupt+0x40>)
 800eb96:	fba2 2303 	umull	r2, r3, r2, r3
 800eb9a:	099b      	lsrs	r3, r3, #6
 800eb9c:	4a09      	ldr	r2, [pc, #36]	; (800ebc4 <vPortSetupTimerInterrupt+0x44>)
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eba2:	4b04      	ldr	r3, [pc, #16]	; (800ebb4 <vPortSetupTimerInterrupt+0x34>)
 800eba4:	2207      	movs	r2, #7
 800eba6:	601a      	str	r2, [r3, #0]
}
 800eba8:	bf00      	nop
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	e000e010 	.word	0xe000e010
 800ebb8:	e000e018 	.word	0xe000e018
 800ebbc:	20000008 	.word	0x20000008
 800ebc0:	10624dd3 	.word	0x10624dd3
 800ebc4:	e000e014 	.word	0xe000e014

0800ebc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ebc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ebd8 <vPortEnableVFP+0x10>
 800ebcc:	6801      	ldr	r1, [r0, #0]
 800ebce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ebd2:	6001      	str	r1, [r0, #0]
 800ebd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ebd6:	bf00      	nop
 800ebd8:	e000ed88 	.word	0xe000ed88

0800ebdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ebe2:	f3ef 8305 	mrs	r3, IPSR
 800ebe6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b0f      	cmp	r3, #15
 800ebec:	d916      	bls.n	800ec1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ebee:	4a19      	ldr	r2, [pc, #100]	; (800ec54 <vPortValidateInterruptPriority+0x78>)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ebf8:	4b17      	ldr	r3, [pc, #92]	; (800ec58 <vPortValidateInterruptPriority+0x7c>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	7afa      	ldrb	r2, [r7, #11]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d20c      	bcs.n	800ec1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ec02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec06:	b672      	cpsid	i
 800ec08:	f383 8811 	msr	BASEPRI, r3
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	b662      	cpsie	i
 800ec16:	607b      	str	r3, [r7, #4]
}
 800ec18:	bf00      	nop
 800ec1a:	e7fe      	b.n	800ec1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec1c:	4b0f      	ldr	r3, [pc, #60]	; (800ec5c <vPortValidateInterruptPriority+0x80>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec24:	4b0e      	ldr	r3, [pc, #56]	; (800ec60 <vPortValidateInterruptPriority+0x84>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d90c      	bls.n	800ec46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ec2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec30:	b672      	cpsid	i
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	b662      	cpsie	i
 800ec40:	603b      	str	r3, [r7, #0]
}
 800ec42:	bf00      	nop
 800ec44:	e7fe      	b.n	800ec44 <vPortValidateInterruptPriority+0x68>
	}
 800ec46:	bf00      	nop
 800ec48:	3714      	adds	r7, #20
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	e000e3f0 	.word	0xe000e3f0
 800ec58:	20000d78 	.word	0x20000d78
 800ec5c:	e000ed0c 	.word	0xe000ed0c
 800ec60:	20000d7c 	.word	0x20000d7c

0800ec64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b08a      	sub	sp, #40	; 0x28
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec70:	f7fe fffe 	bl	800dc70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ec74:	4b5b      	ldr	r3, [pc, #364]	; (800ede4 <pvPortMalloc+0x180>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d101      	bne.n	800ec80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ec7c:	f000 f91a 	bl	800eeb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec80:	4b59      	ldr	r3, [pc, #356]	; (800ede8 <pvPortMalloc+0x184>)
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4013      	ands	r3, r2
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f040 8092 	bne.w	800edb2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d01f      	beq.n	800ecd4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ec94:	2208      	movs	r2, #8
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	4413      	add	r3, r2
 800ec9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f003 0307 	and.w	r3, r3, #7
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d016      	beq.n	800ecd4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f023 0307 	bic.w	r3, r3, #7
 800ecac:	3308      	adds	r3, #8
 800ecae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f003 0307 	and.w	r3, r3, #7
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00c      	beq.n	800ecd4 <pvPortMalloc+0x70>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	b672      	cpsid	i
 800ecc0:	f383 8811 	msr	BASEPRI, r3
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	b662      	cpsie	i
 800ecce:	617b      	str	r3, [r7, #20]
}
 800ecd0:	bf00      	nop
 800ecd2:	e7fe      	b.n	800ecd2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d06b      	beq.n	800edb2 <pvPortMalloc+0x14e>
 800ecda:	4b44      	ldr	r3, [pc, #272]	; (800edec <pvPortMalloc+0x188>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d866      	bhi.n	800edb2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ece4:	4b42      	ldr	r3, [pc, #264]	; (800edf0 <pvPortMalloc+0x18c>)
 800ece6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ece8:	4b41      	ldr	r3, [pc, #260]	; (800edf0 <pvPortMalloc+0x18c>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ecee:	e004      	b.n	800ecfa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d903      	bls.n	800ed0c <pvPortMalloc+0xa8>
 800ed04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1f1      	bne.n	800ecf0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed0c:	4b35      	ldr	r3, [pc, #212]	; (800ede4 <pvPortMalloc+0x180>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d04d      	beq.n	800edb2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2208      	movs	r2, #8
 800ed1c:	4413      	add	r3, r2
 800ed1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	6a3b      	ldr	r3, [r7, #32]
 800ed26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	685a      	ldr	r2, [r3, #4]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	1ad2      	subs	r2, r2, r3
 800ed30:	2308      	movs	r3, #8
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d921      	bls.n	800ed7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	f003 0307 	and.w	r3, r3, #7
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00c      	beq.n	800ed64 <pvPortMalloc+0x100>
	__asm volatile
 800ed4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4e:	b672      	cpsid	i
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	b662      	cpsie	i
 800ed5e:	613b      	str	r3, [r7, #16]
}
 800ed60:	bf00      	nop
 800ed62:	e7fe      	b.n	800ed62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	685a      	ldr	r2, [r3, #4]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	1ad2      	subs	r2, r2, r3
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed76:	69b8      	ldr	r0, [r7, #24]
 800ed78:	f000 f8fe 	bl	800ef78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed7c:	4b1b      	ldr	r3, [pc, #108]	; (800edec <pvPortMalloc+0x188>)
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	4a19      	ldr	r2, [pc, #100]	; (800edec <pvPortMalloc+0x188>)
 800ed88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed8a:	4b18      	ldr	r3, [pc, #96]	; (800edec <pvPortMalloc+0x188>)
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	4b19      	ldr	r3, [pc, #100]	; (800edf4 <pvPortMalloc+0x190>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d203      	bcs.n	800ed9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed96:	4b15      	ldr	r3, [pc, #84]	; (800edec <pvPortMalloc+0x188>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a16      	ldr	r2, [pc, #88]	; (800edf4 <pvPortMalloc+0x190>)
 800ed9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda0:	685a      	ldr	r2, [r3, #4]
 800eda2:	4b11      	ldr	r3, [pc, #68]	; (800ede8 <pvPortMalloc+0x184>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	431a      	orrs	r2, r3
 800eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	2200      	movs	r2, #0
 800edb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800edb2:	f7fe ff6b 	bl	800dc8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	f003 0307 	and.w	r3, r3, #7
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00c      	beq.n	800edda <pvPortMalloc+0x176>
	__asm volatile
 800edc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc4:	b672      	cpsid	i
 800edc6:	f383 8811 	msr	BASEPRI, r3
 800edca:	f3bf 8f6f 	isb	sy
 800edce:	f3bf 8f4f 	dsb	sy
 800edd2:	b662      	cpsie	i
 800edd4:	60fb      	str	r3, [r7, #12]
}
 800edd6:	bf00      	nop
 800edd8:	e7fe      	b.n	800edd8 <pvPortMalloc+0x174>
	return pvReturn;
 800edda:	69fb      	ldr	r3, [r7, #28]
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3728      	adds	r7, #40	; 0x28
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	20004988 	.word	0x20004988
 800ede8:	20004994 	.word	0x20004994
 800edec:	2000498c 	.word	0x2000498c
 800edf0:	20004980 	.word	0x20004980
 800edf4:	20004990 	.word	0x20004990

0800edf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d04c      	beq.n	800eea4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee0a:	2308      	movs	r3, #8
 800ee0c:	425b      	negs	r3, r3
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	4413      	add	r3, r2
 800ee12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	685a      	ldr	r2, [r3, #4]
 800ee1c:	4b23      	ldr	r3, [pc, #140]	; (800eeac <vPortFree+0xb4>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4013      	ands	r3, r2
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10c      	bne.n	800ee40 <vPortFree+0x48>
	__asm volatile
 800ee26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2a:	b672      	cpsid	i
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	b662      	cpsie	i
 800ee3a:	60fb      	str	r3, [r7, #12]
}
 800ee3c:	bf00      	nop
 800ee3e:	e7fe      	b.n	800ee3e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00c      	beq.n	800ee62 <vPortFree+0x6a>
	__asm volatile
 800ee48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4c:	b672      	cpsid	i
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	b662      	cpsie	i
 800ee5c:	60bb      	str	r3, [r7, #8]
}
 800ee5e:	bf00      	nop
 800ee60:	e7fe      	b.n	800ee60 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	685a      	ldr	r2, [r3, #4]
 800ee66:	4b11      	ldr	r3, [pc, #68]	; (800eeac <vPortFree+0xb4>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4013      	ands	r3, r2
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d019      	beq.n	800eea4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d115      	bne.n	800eea4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	685a      	ldr	r2, [r3, #4]
 800ee7c:	4b0b      	ldr	r3, [pc, #44]	; (800eeac <vPortFree+0xb4>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	43db      	mvns	r3, r3
 800ee82:	401a      	ands	r2, r3
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee88:	f7fe fef2 	bl	800dc70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	685a      	ldr	r2, [r3, #4]
 800ee90:	4b07      	ldr	r3, [pc, #28]	; (800eeb0 <vPortFree+0xb8>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4413      	add	r3, r2
 800ee96:	4a06      	ldr	r2, [pc, #24]	; (800eeb0 <vPortFree+0xb8>)
 800ee98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee9a:	6938      	ldr	r0, [r7, #16]
 800ee9c:	f000 f86c 	bl	800ef78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eea0:	f7fe fef4 	bl	800dc8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eea4:	bf00      	nop
 800eea6:	3718      	adds	r7, #24
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	20004994 	.word	0x20004994
 800eeb0:	2000498c 	.word	0x2000498c

0800eeb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b085      	sub	sp, #20
 800eeb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eeba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eec0:	4b27      	ldr	r3, [pc, #156]	; (800ef60 <prvHeapInit+0xac>)
 800eec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f003 0307 	and.w	r3, r3, #7
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00c      	beq.n	800eee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	3307      	adds	r3, #7
 800eed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f023 0307 	bic.w	r3, r3, #7
 800eeda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	4a1f      	ldr	r2, [pc, #124]	; (800ef60 <prvHeapInit+0xac>)
 800eee4:	4413      	add	r3, r2
 800eee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eeec:	4a1d      	ldr	r2, [pc, #116]	; (800ef64 <prvHeapInit+0xb0>)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eef2:	4b1c      	ldr	r3, [pc, #112]	; (800ef64 <prvHeapInit+0xb0>)
 800eef4:	2200      	movs	r2, #0
 800eef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	4413      	add	r3, r2
 800eefe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef00:	2208      	movs	r2, #8
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	1a9b      	subs	r3, r3, r2
 800ef06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f023 0307 	bic.w	r3, r3, #7
 800ef0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	4a15      	ldr	r2, [pc, #84]	; (800ef68 <prvHeapInit+0xb4>)
 800ef14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef16:	4b14      	ldr	r3, [pc, #80]	; (800ef68 <prvHeapInit+0xb4>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef1e:	4b12      	ldr	r3, [pc, #72]	; (800ef68 <prvHeapInit+0xb4>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2200      	movs	r2, #0
 800ef24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	1ad2      	subs	r2, r2, r3
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef34:	4b0c      	ldr	r3, [pc, #48]	; (800ef68 <prvHeapInit+0xb4>)
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	4a0a      	ldr	r2, [pc, #40]	; (800ef6c <prvHeapInit+0xb8>)
 800ef42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	4a09      	ldr	r2, [pc, #36]	; (800ef70 <prvHeapInit+0xbc>)
 800ef4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef4c:	4b09      	ldr	r3, [pc, #36]	; (800ef74 <prvHeapInit+0xc0>)
 800ef4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef52:	601a      	str	r2, [r3, #0]
}
 800ef54:	bf00      	nop
 800ef56:	3714      	adds	r7, #20
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr
 800ef60:	20000d80 	.word	0x20000d80
 800ef64:	20004980 	.word	0x20004980
 800ef68:	20004988 	.word	0x20004988
 800ef6c:	20004990 	.word	0x20004990
 800ef70:	2000498c 	.word	0x2000498c
 800ef74:	20004994 	.word	0x20004994

0800ef78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef80:	4b28      	ldr	r3, [pc, #160]	; (800f024 <prvInsertBlockIntoFreeList+0xac>)
 800ef82:	60fb      	str	r3, [r7, #12]
 800ef84:	e002      	b.n	800ef8c <prvInsertBlockIntoFreeList+0x14>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d8f7      	bhi.n	800ef86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	4413      	add	r3, r2
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d108      	bne.n	800efba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	441a      	add	r2, r3
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	441a      	add	r2, r3
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d118      	bne.n	800f000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	4b15      	ldr	r3, [pc, #84]	; (800f028 <prvInsertBlockIntoFreeList+0xb0>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d00d      	beq.n	800eff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	441a      	add	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	601a      	str	r2, [r3, #0]
 800eff4:	e008      	b.n	800f008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eff6:	4b0c      	ldr	r3, [pc, #48]	; (800f028 <prvInsertBlockIntoFreeList+0xb0>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	601a      	str	r2, [r3, #0]
 800effe:	e003      	b.n	800f008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d002      	beq.n	800f016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f016:	bf00      	nop
 800f018:	3714      	adds	r7, #20
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	20004980 	.word	0x20004980
 800f028:	20004988 	.word	0x20004988

0800f02c <__cvt>:
 800f02c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f030:	ec55 4b10 	vmov	r4, r5, d0
 800f034:	2d00      	cmp	r5, #0
 800f036:	460e      	mov	r6, r1
 800f038:	4619      	mov	r1, r3
 800f03a:	462b      	mov	r3, r5
 800f03c:	bfbb      	ittet	lt
 800f03e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f042:	461d      	movlt	r5, r3
 800f044:	2300      	movge	r3, #0
 800f046:	232d      	movlt	r3, #45	; 0x2d
 800f048:	700b      	strb	r3, [r1, #0]
 800f04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f04c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f050:	4691      	mov	r9, r2
 800f052:	f023 0820 	bic.w	r8, r3, #32
 800f056:	bfbc      	itt	lt
 800f058:	4622      	movlt	r2, r4
 800f05a:	4614      	movlt	r4, r2
 800f05c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f060:	d005      	beq.n	800f06e <__cvt+0x42>
 800f062:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f066:	d100      	bne.n	800f06a <__cvt+0x3e>
 800f068:	3601      	adds	r6, #1
 800f06a:	2102      	movs	r1, #2
 800f06c:	e000      	b.n	800f070 <__cvt+0x44>
 800f06e:	2103      	movs	r1, #3
 800f070:	ab03      	add	r3, sp, #12
 800f072:	9301      	str	r3, [sp, #4]
 800f074:	ab02      	add	r3, sp, #8
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	ec45 4b10 	vmov	d0, r4, r5
 800f07c:	4653      	mov	r3, sl
 800f07e:	4632      	mov	r2, r6
 800f080:	f001 f922 	bl	80102c8 <_dtoa_r>
 800f084:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f088:	4607      	mov	r7, r0
 800f08a:	d102      	bne.n	800f092 <__cvt+0x66>
 800f08c:	f019 0f01 	tst.w	r9, #1
 800f090:	d022      	beq.n	800f0d8 <__cvt+0xac>
 800f092:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f096:	eb07 0906 	add.w	r9, r7, r6
 800f09a:	d110      	bne.n	800f0be <__cvt+0x92>
 800f09c:	783b      	ldrb	r3, [r7, #0]
 800f09e:	2b30      	cmp	r3, #48	; 0x30
 800f0a0:	d10a      	bne.n	800f0b8 <__cvt+0x8c>
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	f7f1 fd35 	bl	8000b18 <__aeabi_dcmpeq>
 800f0ae:	b918      	cbnz	r0, 800f0b8 <__cvt+0x8c>
 800f0b0:	f1c6 0601 	rsb	r6, r6, #1
 800f0b4:	f8ca 6000 	str.w	r6, [sl]
 800f0b8:	f8da 3000 	ldr.w	r3, [sl]
 800f0bc:	4499      	add	r9, r3
 800f0be:	2200      	movs	r2, #0
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	f7f1 fd27 	bl	8000b18 <__aeabi_dcmpeq>
 800f0ca:	b108      	cbz	r0, 800f0d0 <__cvt+0xa4>
 800f0cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0d0:	2230      	movs	r2, #48	; 0x30
 800f0d2:	9b03      	ldr	r3, [sp, #12]
 800f0d4:	454b      	cmp	r3, r9
 800f0d6:	d307      	bcc.n	800f0e8 <__cvt+0xbc>
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0dc:	1bdb      	subs	r3, r3, r7
 800f0de:	4638      	mov	r0, r7
 800f0e0:	6013      	str	r3, [r2, #0]
 800f0e2:	b004      	add	sp, #16
 800f0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e8:	1c59      	adds	r1, r3, #1
 800f0ea:	9103      	str	r1, [sp, #12]
 800f0ec:	701a      	strb	r2, [r3, #0]
 800f0ee:	e7f0      	b.n	800f0d2 <__cvt+0xa6>

0800f0f0 <__exponent>:
 800f0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2900      	cmp	r1, #0
 800f0f6:	bfb8      	it	lt
 800f0f8:	4249      	neglt	r1, r1
 800f0fa:	f803 2b02 	strb.w	r2, [r3], #2
 800f0fe:	bfb4      	ite	lt
 800f100:	222d      	movlt	r2, #45	; 0x2d
 800f102:	222b      	movge	r2, #43	; 0x2b
 800f104:	2909      	cmp	r1, #9
 800f106:	7042      	strb	r2, [r0, #1]
 800f108:	dd2a      	ble.n	800f160 <__exponent+0x70>
 800f10a:	f10d 0207 	add.w	r2, sp, #7
 800f10e:	4617      	mov	r7, r2
 800f110:	260a      	movs	r6, #10
 800f112:	4694      	mov	ip, r2
 800f114:	fb91 f5f6 	sdiv	r5, r1, r6
 800f118:	fb06 1415 	mls	r4, r6, r5, r1
 800f11c:	3430      	adds	r4, #48	; 0x30
 800f11e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f122:	460c      	mov	r4, r1
 800f124:	2c63      	cmp	r4, #99	; 0x63
 800f126:	f102 32ff 	add.w	r2, r2, #4294967295
 800f12a:	4629      	mov	r1, r5
 800f12c:	dcf1      	bgt.n	800f112 <__exponent+0x22>
 800f12e:	3130      	adds	r1, #48	; 0x30
 800f130:	f1ac 0402 	sub.w	r4, ip, #2
 800f134:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f138:	1c41      	adds	r1, r0, #1
 800f13a:	4622      	mov	r2, r4
 800f13c:	42ba      	cmp	r2, r7
 800f13e:	d30a      	bcc.n	800f156 <__exponent+0x66>
 800f140:	f10d 0209 	add.w	r2, sp, #9
 800f144:	eba2 020c 	sub.w	r2, r2, ip
 800f148:	42bc      	cmp	r4, r7
 800f14a:	bf88      	it	hi
 800f14c:	2200      	movhi	r2, #0
 800f14e:	4413      	add	r3, r2
 800f150:	1a18      	subs	r0, r3, r0
 800f152:	b003      	add	sp, #12
 800f154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f156:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f15a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f15e:	e7ed      	b.n	800f13c <__exponent+0x4c>
 800f160:	2330      	movs	r3, #48	; 0x30
 800f162:	3130      	adds	r1, #48	; 0x30
 800f164:	7083      	strb	r3, [r0, #2]
 800f166:	70c1      	strb	r1, [r0, #3]
 800f168:	1d03      	adds	r3, r0, #4
 800f16a:	e7f1      	b.n	800f150 <__exponent+0x60>

0800f16c <_printf_float>:
 800f16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f170:	ed2d 8b02 	vpush	{d8}
 800f174:	b08d      	sub	sp, #52	; 0x34
 800f176:	460c      	mov	r4, r1
 800f178:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f17c:	4616      	mov	r6, r2
 800f17e:	461f      	mov	r7, r3
 800f180:	4605      	mov	r5, r0
 800f182:	f000 ff37 	bl	800fff4 <_localeconv_r>
 800f186:	f8d0 a000 	ldr.w	sl, [r0]
 800f18a:	4650      	mov	r0, sl
 800f18c:	f7f1 f898 	bl	80002c0 <strlen>
 800f190:	2300      	movs	r3, #0
 800f192:	930a      	str	r3, [sp, #40]	; 0x28
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	9305      	str	r3, [sp, #20]
 800f198:	f8d8 3000 	ldr.w	r3, [r8]
 800f19c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f1a0:	3307      	adds	r3, #7
 800f1a2:	f023 0307 	bic.w	r3, r3, #7
 800f1a6:	f103 0208 	add.w	r2, r3, #8
 800f1aa:	f8c8 2000 	str.w	r2, [r8]
 800f1ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f1b6:	9307      	str	r3, [sp, #28]
 800f1b8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1bc:	ee08 0a10 	vmov	s16, r0
 800f1c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f1c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1c8:	4b9e      	ldr	r3, [pc, #632]	; (800f444 <_printf_float+0x2d8>)
 800f1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ce:	f7f1 fcd5 	bl	8000b7c <__aeabi_dcmpun>
 800f1d2:	bb88      	cbnz	r0, 800f238 <_printf_float+0xcc>
 800f1d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1d8:	4b9a      	ldr	r3, [pc, #616]	; (800f444 <_printf_float+0x2d8>)
 800f1da:	f04f 32ff 	mov.w	r2, #4294967295
 800f1de:	f7f1 fcaf 	bl	8000b40 <__aeabi_dcmple>
 800f1e2:	bb48      	cbnz	r0, 800f238 <_printf_float+0xcc>
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	4640      	mov	r0, r8
 800f1ea:	4649      	mov	r1, r9
 800f1ec:	f7f1 fc9e 	bl	8000b2c <__aeabi_dcmplt>
 800f1f0:	b110      	cbz	r0, 800f1f8 <_printf_float+0x8c>
 800f1f2:	232d      	movs	r3, #45	; 0x2d
 800f1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1f8:	4a93      	ldr	r2, [pc, #588]	; (800f448 <_printf_float+0x2dc>)
 800f1fa:	4b94      	ldr	r3, [pc, #592]	; (800f44c <_printf_float+0x2e0>)
 800f1fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f200:	bf94      	ite	ls
 800f202:	4690      	movls	r8, r2
 800f204:	4698      	movhi	r8, r3
 800f206:	2303      	movs	r3, #3
 800f208:	6123      	str	r3, [r4, #16]
 800f20a:	9b05      	ldr	r3, [sp, #20]
 800f20c:	f023 0304 	bic.w	r3, r3, #4
 800f210:	6023      	str	r3, [r4, #0]
 800f212:	f04f 0900 	mov.w	r9, #0
 800f216:	9700      	str	r7, [sp, #0]
 800f218:	4633      	mov	r3, r6
 800f21a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f21c:	4621      	mov	r1, r4
 800f21e:	4628      	mov	r0, r5
 800f220:	f000 f9da 	bl	800f5d8 <_printf_common>
 800f224:	3001      	adds	r0, #1
 800f226:	f040 8090 	bne.w	800f34a <_printf_float+0x1de>
 800f22a:	f04f 30ff 	mov.w	r0, #4294967295
 800f22e:	b00d      	add	sp, #52	; 0x34
 800f230:	ecbd 8b02 	vpop	{d8}
 800f234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f238:	4642      	mov	r2, r8
 800f23a:	464b      	mov	r3, r9
 800f23c:	4640      	mov	r0, r8
 800f23e:	4649      	mov	r1, r9
 800f240:	f7f1 fc9c 	bl	8000b7c <__aeabi_dcmpun>
 800f244:	b140      	cbz	r0, 800f258 <_printf_float+0xec>
 800f246:	464b      	mov	r3, r9
 800f248:	2b00      	cmp	r3, #0
 800f24a:	bfbc      	itt	lt
 800f24c:	232d      	movlt	r3, #45	; 0x2d
 800f24e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f252:	4a7f      	ldr	r2, [pc, #508]	; (800f450 <_printf_float+0x2e4>)
 800f254:	4b7f      	ldr	r3, [pc, #508]	; (800f454 <_printf_float+0x2e8>)
 800f256:	e7d1      	b.n	800f1fc <_printf_float+0x90>
 800f258:	6863      	ldr	r3, [r4, #4]
 800f25a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f25e:	9206      	str	r2, [sp, #24]
 800f260:	1c5a      	adds	r2, r3, #1
 800f262:	d13f      	bne.n	800f2e4 <_printf_float+0x178>
 800f264:	2306      	movs	r3, #6
 800f266:	6063      	str	r3, [r4, #4]
 800f268:	9b05      	ldr	r3, [sp, #20]
 800f26a:	6861      	ldr	r1, [r4, #4]
 800f26c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f270:	2300      	movs	r3, #0
 800f272:	9303      	str	r3, [sp, #12]
 800f274:	ab0a      	add	r3, sp, #40	; 0x28
 800f276:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f27a:	ab09      	add	r3, sp, #36	; 0x24
 800f27c:	ec49 8b10 	vmov	d0, r8, r9
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	6022      	str	r2, [r4, #0]
 800f284:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f288:	4628      	mov	r0, r5
 800f28a:	f7ff fecf 	bl	800f02c <__cvt>
 800f28e:	9b06      	ldr	r3, [sp, #24]
 800f290:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f292:	2b47      	cmp	r3, #71	; 0x47
 800f294:	4680      	mov	r8, r0
 800f296:	d108      	bne.n	800f2aa <_printf_float+0x13e>
 800f298:	1cc8      	adds	r0, r1, #3
 800f29a:	db02      	blt.n	800f2a2 <_printf_float+0x136>
 800f29c:	6863      	ldr	r3, [r4, #4]
 800f29e:	4299      	cmp	r1, r3
 800f2a0:	dd41      	ble.n	800f326 <_printf_float+0x1ba>
 800f2a2:	f1ab 0302 	sub.w	r3, fp, #2
 800f2a6:	fa5f fb83 	uxtb.w	fp, r3
 800f2aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2ae:	d820      	bhi.n	800f2f2 <_printf_float+0x186>
 800f2b0:	3901      	subs	r1, #1
 800f2b2:	465a      	mov	r2, fp
 800f2b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f2b8:	9109      	str	r1, [sp, #36]	; 0x24
 800f2ba:	f7ff ff19 	bl	800f0f0 <__exponent>
 800f2be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2c0:	1813      	adds	r3, r2, r0
 800f2c2:	2a01      	cmp	r2, #1
 800f2c4:	4681      	mov	r9, r0
 800f2c6:	6123      	str	r3, [r4, #16]
 800f2c8:	dc02      	bgt.n	800f2d0 <_printf_float+0x164>
 800f2ca:	6822      	ldr	r2, [r4, #0]
 800f2cc:	07d2      	lsls	r2, r2, #31
 800f2ce:	d501      	bpl.n	800f2d4 <_printf_float+0x168>
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	6123      	str	r3, [r4, #16]
 800f2d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d09c      	beq.n	800f216 <_printf_float+0xaa>
 800f2dc:	232d      	movs	r3, #45	; 0x2d
 800f2de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2e2:	e798      	b.n	800f216 <_printf_float+0xaa>
 800f2e4:	9a06      	ldr	r2, [sp, #24]
 800f2e6:	2a47      	cmp	r2, #71	; 0x47
 800f2e8:	d1be      	bne.n	800f268 <_printf_float+0xfc>
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1bc      	bne.n	800f268 <_printf_float+0xfc>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	e7b9      	b.n	800f266 <_printf_float+0xfa>
 800f2f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2f6:	d118      	bne.n	800f32a <_printf_float+0x1be>
 800f2f8:	2900      	cmp	r1, #0
 800f2fa:	6863      	ldr	r3, [r4, #4]
 800f2fc:	dd0b      	ble.n	800f316 <_printf_float+0x1aa>
 800f2fe:	6121      	str	r1, [r4, #16]
 800f300:	b913      	cbnz	r3, 800f308 <_printf_float+0x19c>
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	07d0      	lsls	r0, r2, #31
 800f306:	d502      	bpl.n	800f30e <_printf_float+0x1a2>
 800f308:	3301      	adds	r3, #1
 800f30a:	440b      	add	r3, r1
 800f30c:	6123      	str	r3, [r4, #16]
 800f30e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f310:	f04f 0900 	mov.w	r9, #0
 800f314:	e7de      	b.n	800f2d4 <_printf_float+0x168>
 800f316:	b913      	cbnz	r3, 800f31e <_printf_float+0x1b2>
 800f318:	6822      	ldr	r2, [r4, #0]
 800f31a:	07d2      	lsls	r2, r2, #31
 800f31c:	d501      	bpl.n	800f322 <_printf_float+0x1b6>
 800f31e:	3302      	adds	r3, #2
 800f320:	e7f4      	b.n	800f30c <_printf_float+0x1a0>
 800f322:	2301      	movs	r3, #1
 800f324:	e7f2      	b.n	800f30c <_printf_float+0x1a0>
 800f326:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f32c:	4299      	cmp	r1, r3
 800f32e:	db05      	blt.n	800f33c <_printf_float+0x1d0>
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	6121      	str	r1, [r4, #16]
 800f334:	07d8      	lsls	r0, r3, #31
 800f336:	d5ea      	bpl.n	800f30e <_printf_float+0x1a2>
 800f338:	1c4b      	adds	r3, r1, #1
 800f33a:	e7e7      	b.n	800f30c <_printf_float+0x1a0>
 800f33c:	2900      	cmp	r1, #0
 800f33e:	bfd4      	ite	le
 800f340:	f1c1 0202 	rsble	r2, r1, #2
 800f344:	2201      	movgt	r2, #1
 800f346:	4413      	add	r3, r2
 800f348:	e7e0      	b.n	800f30c <_printf_float+0x1a0>
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	055a      	lsls	r2, r3, #21
 800f34e:	d407      	bmi.n	800f360 <_printf_float+0x1f4>
 800f350:	6923      	ldr	r3, [r4, #16]
 800f352:	4642      	mov	r2, r8
 800f354:	4631      	mov	r1, r6
 800f356:	4628      	mov	r0, r5
 800f358:	47b8      	blx	r7
 800f35a:	3001      	adds	r0, #1
 800f35c:	d12c      	bne.n	800f3b8 <_printf_float+0x24c>
 800f35e:	e764      	b.n	800f22a <_printf_float+0xbe>
 800f360:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f364:	f240 80e0 	bls.w	800f528 <_printf_float+0x3bc>
 800f368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f36c:	2200      	movs	r2, #0
 800f36e:	2300      	movs	r3, #0
 800f370:	f7f1 fbd2 	bl	8000b18 <__aeabi_dcmpeq>
 800f374:	2800      	cmp	r0, #0
 800f376:	d034      	beq.n	800f3e2 <_printf_float+0x276>
 800f378:	4a37      	ldr	r2, [pc, #220]	; (800f458 <_printf_float+0x2ec>)
 800f37a:	2301      	movs	r3, #1
 800f37c:	4631      	mov	r1, r6
 800f37e:	4628      	mov	r0, r5
 800f380:	47b8      	blx	r7
 800f382:	3001      	adds	r0, #1
 800f384:	f43f af51 	beq.w	800f22a <_printf_float+0xbe>
 800f388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f38c:	429a      	cmp	r2, r3
 800f38e:	db02      	blt.n	800f396 <_printf_float+0x22a>
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	07d8      	lsls	r0, r3, #31
 800f394:	d510      	bpl.n	800f3b8 <_printf_float+0x24c>
 800f396:	ee18 3a10 	vmov	r3, s16
 800f39a:	4652      	mov	r2, sl
 800f39c:	4631      	mov	r1, r6
 800f39e:	4628      	mov	r0, r5
 800f3a0:	47b8      	blx	r7
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	f43f af41 	beq.w	800f22a <_printf_float+0xbe>
 800f3a8:	f04f 0800 	mov.w	r8, #0
 800f3ac:	f104 091a 	add.w	r9, r4, #26
 800f3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	4543      	cmp	r3, r8
 800f3b6:	dc09      	bgt.n	800f3cc <_printf_float+0x260>
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	079b      	lsls	r3, r3, #30
 800f3bc:	f100 8107 	bmi.w	800f5ce <_printf_float+0x462>
 800f3c0:	68e0      	ldr	r0, [r4, #12]
 800f3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3c4:	4298      	cmp	r0, r3
 800f3c6:	bfb8      	it	lt
 800f3c8:	4618      	movlt	r0, r3
 800f3ca:	e730      	b.n	800f22e <_printf_float+0xc2>
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	464a      	mov	r2, r9
 800f3d0:	4631      	mov	r1, r6
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	47b8      	blx	r7
 800f3d6:	3001      	adds	r0, #1
 800f3d8:	f43f af27 	beq.w	800f22a <_printf_float+0xbe>
 800f3dc:	f108 0801 	add.w	r8, r8, #1
 800f3e0:	e7e6      	b.n	800f3b0 <_printf_float+0x244>
 800f3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	dc39      	bgt.n	800f45c <_printf_float+0x2f0>
 800f3e8:	4a1b      	ldr	r2, [pc, #108]	; (800f458 <_printf_float+0x2ec>)
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	4631      	mov	r1, r6
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	47b8      	blx	r7
 800f3f2:	3001      	adds	r0, #1
 800f3f4:	f43f af19 	beq.w	800f22a <_printf_float+0xbe>
 800f3f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	d102      	bne.n	800f406 <_printf_float+0x29a>
 800f400:	6823      	ldr	r3, [r4, #0]
 800f402:	07d9      	lsls	r1, r3, #31
 800f404:	d5d8      	bpl.n	800f3b8 <_printf_float+0x24c>
 800f406:	ee18 3a10 	vmov	r3, s16
 800f40a:	4652      	mov	r2, sl
 800f40c:	4631      	mov	r1, r6
 800f40e:	4628      	mov	r0, r5
 800f410:	47b8      	blx	r7
 800f412:	3001      	adds	r0, #1
 800f414:	f43f af09 	beq.w	800f22a <_printf_float+0xbe>
 800f418:	f04f 0900 	mov.w	r9, #0
 800f41c:	f104 0a1a 	add.w	sl, r4, #26
 800f420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f422:	425b      	negs	r3, r3
 800f424:	454b      	cmp	r3, r9
 800f426:	dc01      	bgt.n	800f42c <_printf_float+0x2c0>
 800f428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f42a:	e792      	b.n	800f352 <_printf_float+0x1e6>
 800f42c:	2301      	movs	r3, #1
 800f42e:	4652      	mov	r2, sl
 800f430:	4631      	mov	r1, r6
 800f432:	4628      	mov	r0, r5
 800f434:	47b8      	blx	r7
 800f436:	3001      	adds	r0, #1
 800f438:	f43f aef7 	beq.w	800f22a <_printf_float+0xbe>
 800f43c:	f109 0901 	add.w	r9, r9, #1
 800f440:	e7ee      	b.n	800f420 <_printf_float+0x2b4>
 800f442:	bf00      	nop
 800f444:	7fefffff 	.word	0x7fefffff
 800f448:	080156e8 	.word	0x080156e8
 800f44c:	080156ec 	.word	0x080156ec
 800f450:	080156f0 	.word	0x080156f0
 800f454:	080156f4 	.word	0x080156f4
 800f458:	08015a80 	.word	0x08015a80
 800f45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f45e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f460:	429a      	cmp	r2, r3
 800f462:	bfa8      	it	ge
 800f464:	461a      	movge	r2, r3
 800f466:	2a00      	cmp	r2, #0
 800f468:	4691      	mov	r9, r2
 800f46a:	dc37      	bgt.n	800f4dc <_printf_float+0x370>
 800f46c:	f04f 0b00 	mov.w	fp, #0
 800f470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f474:	f104 021a 	add.w	r2, r4, #26
 800f478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f47a:	9305      	str	r3, [sp, #20]
 800f47c:	eba3 0309 	sub.w	r3, r3, r9
 800f480:	455b      	cmp	r3, fp
 800f482:	dc33      	bgt.n	800f4ec <_printf_float+0x380>
 800f484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f488:	429a      	cmp	r2, r3
 800f48a:	db3b      	blt.n	800f504 <_printf_float+0x398>
 800f48c:	6823      	ldr	r3, [r4, #0]
 800f48e:	07da      	lsls	r2, r3, #31
 800f490:	d438      	bmi.n	800f504 <_printf_float+0x398>
 800f492:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f496:	eba2 0903 	sub.w	r9, r2, r3
 800f49a:	9b05      	ldr	r3, [sp, #20]
 800f49c:	1ad2      	subs	r2, r2, r3
 800f49e:	4591      	cmp	r9, r2
 800f4a0:	bfa8      	it	ge
 800f4a2:	4691      	movge	r9, r2
 800f4a4:	f1b9 0f00 	cmp.w	r9, #0
 800f4a8:	dc35      	bgt.n	800f516 <_printf_float+0x3aa>
 800f4aa:	f04f 0800 	mov.w	r8, #0
 800f4ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4b2:	f104 0a1a 	add.w	sl, r4, #26
 800f4b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4ba:	1a9b      	subs	r3, r3, r2
 800f4bc:	eba3 0309 	sub.w	r3, r3, r9
 800f4c0:	4543      	cmp	r3, r8
 800f4c2:	f77f af79 	ble.w	800f3b8 <_printf_float+0x24c>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	4652      	mov	r2, sl
 800f4ca:	4631      	mov	r1, r6
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	47b8      	blx	r7
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	f43f aeaa 	beq.w	800f22a <_printf_float+0xbe>
 800f4d6:	f108 0801 	add.w	r8, r8, #1
 800f4da:	e7ec      	b.n	800f4b6 <_printf_float+0x34a>
 800f4dc:	4613      	mov	r3, r2
 800f4de:	4631      	mov	r1, r6
 800f4e0:	4642      	mov	r2, r8
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	47b8      	blx	r7
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	d1c0      	bne.n	800f46c <_printf_float+0x300>
 800f4ea:	e69e      	b.n	800f22a <_printf_float+0xbe>
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	4631      	mov	r1, r6
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	9205      	str	r2, [sp, #20]
 800f4f4:	47b8      	blx	r7
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	f43f ae97 	beq.w	800f22a <_printf_float+0xbe>
 800f4fc:	9a05      	ldr	r2, [sp, #20]
 800f4fe:	f10b 0b01 	add.w	fp, fp, #1
 800f502:	e7b9      	b.n	800f478 <_printf_float+0x30c>
 800f504:	ee18 3a10 	vmov	r3, s16
 800f508:	4652      	mov	r2, sl
 800f50a:	4631      	mov	r1, r6
 800f50c:	4628      	mov	r0, r5
 800f50e:	47b8      	blx	r7
 800f510:	3001      	adds	r0, #1
 800f512:	d1be      	bne.n	800f492 <_printf_float+0x326>
 800f514:	e689      	b.n	800f22a <_printf_float+0xbe>
 800f516:	9a05      	ldr	r2, [sp, #20]
 800f518:	464b      	mov	r3, r9
 800f51a:	4442      	add	r2, r8
 800f51c:	4631      	mov	r1, r6
 800f51e:	4628      	mov	r0, r5
 800f520:	47b8      	blx	r7
 800f522:	3001      	adds	r0, #1
 800f524:	d1c1      	bne.n	800f4aa <_printf_float+0x33e>
 800f526:	e680      	b.n	800f22a <_printf_float+0xbe>
 800f528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f52a:	2a01      	cmp	r2, #1
 800f52c:	dc01      	bgt.n	800f532 <_printf_float+0x3c6>
 800f52e:	07db      	lsls	r3, r3, #31
 800f530:	d53a      	bpl.n	800f5a8 <_printf_float+0x43c>
 800f532:	2301      	movs	r3, #1
 800f534:	4642      	mov	r2, r8
 800f536:	4631      	mov	r1, r6
 800f538:	4628      	mov	r0, r5
 800f53a:	47b8      	blx	r7
 800f53c:	3001      	adds	r0, #1
 800f53e:	f43f ae74 	beq.w	800f22a <_printf_float+0xbe>
 800f542:	ee18 3a10 	vmov	r3, s16
 800f546:	4652      	mov	r2, sl
 800f548:	4631      	mov	r1, r6
 800f54a:	4628      	mov	r0, r5
 800f54c:	47b8      	blx	r7
 800f54e:	3001      	adds	r0, #1
 800f550:	f43f ae6b 	beq.w	800f22a <_printf_float+0xbe>
 800f554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f558:	2200      	movs	r2, #0
 800f55a:	2300      	movs	r3, #0
 800f55c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f560:	f7f1 fada 	bl	8000b18 <__aeabi_dcmpeq>
 800f564:	b9d8      	cbnz	r0, 800f59e <_printf_float+0x432>
 800f566:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f56a:	f108 0201 	add.w	r2, r8, #1
 800f56e:	4631      	mov	r1, r6
 800f570:	4628      	mov	r0, r5
 800f572:	47b8      	blx	r7
 800f574:	3001      	adds	r0, #1
 800f576:	d10e      	bne.n	800f596 <_printf_float+0x42a>
 800f578:	e657      	b.n	800f22a <_printf_float+0xbe>
 800f57a:	2301      	movs	r3, #1
 800f57c:	4652      	mov	r2, sl
 800f57e:	4631      	mov	r1, r6
 800f580:	4628      	mov	r0, r5
 800f582:	47b8      	blx	r7
 800f584:	3001      	adds	r0, #1
 800f586:	f43f ae50 	beq.w	800f22a <_printf_float+0xbe>
 800f58a:	f108 0801 	add.w	r8, r8, #1
 800f58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f590:	3b01      	subs	r3, #1
 800f592:	4543      	cmp	r3, r8
 800f594:	dcf1      	bgt.n	800f57a <_printf_float+0x40e>
 800f596:	464b      	mov	r3, r9
 800f598:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f59c:	e6da      	b.n	800f354 <_printf_float+0x1e8>
 800f59e:	f04f 0800 	mov.w	r8, #0
 800f5a2:	f104 0a1a 	add.w	sl, r4, #26
 800f5a6:	e7f2      	b.n	800f58e <_printf_float+0x422>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	4642      	mov	r2, r8
 800f5ac:	e7df      	b.n	800f56e <_printf_float+0x402>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	464a      	mov	r2, r9
 800f5b2:	4631      	mov	r1, r6
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	47b8      	blx	r7
 800f5b8:	3001      	adds	r0, #1
 800f5ba:	f43f ae36 	beq.w	800f22a <_printf_float+0xbe>
 800f5be:	f108 0801 	add.w	r8, r8, #1
 800f5c2:	68e3      	ldr	r3, [r4, #12]
 800f5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5c6:	1a5b      	subs	r3, r3, r1
 800f5c8:	4543      	cmp	r3, r8
 800f5ca:	dcf0      	bgt.n	800f5ae <_printf_float+0x442>
 800f5cc:	e6f8      	b.n	800f3c0 <_printf_float+0x254>
 800f5ce:	f04f 0800 	mov.w	r8, #0
 800f5d2:	f104 0919 	add.w	r9, r4, #25
 800f5d6:	e7f4      	b.n	800f5c2 <_printf_float+0x456>

0800f5d8 <_printf_common>:
 800f5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5dc:	4616      	mov	r6, r2
 800f5de:	4699      	mov	r9, r3
 800f5e0:	688a      	ldr	r2, [r1, #8]
 800f5e2:	690b      	ldr	r3, [r1, #16]
 800f5e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	bfb8      	it	lt
 800f5ec:	4613      	movlt	r3, r2
 800f5ee:	6033      	str	r3, [r6, #0]
 800f5f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5f4:	4607      	mov	r7, r0
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	b10a      	cbz	r2, 800f5fe <_printf_common+0x26>
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	6033      	str	r3, [r6, #0]
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	0699      	lsls	r1, r3, #26
 800f602:	bf42      	ittt	mi
 800f604:	6833      	ldrmi	r3, [r6, #0]
 800f606:	3302      	addmi	r3, #2
 800f608:	6033      	strmi	r3, [r6, #0]
 800f60a:	6825      	ldr	r5, [r4, #0]
 800f60c:	f015 0506 	ands.w	r5, r5, #6
 800f610:	d106      	bne.n	800f620 <_printf_common+0x48>
 800f612:	f104 0a19 	add.w	sl, r4, #25
 800f616:	68e3      	ldr	r3, [r4, #12]
 800f618:	6832      	ldr	r2, [r6, #0]
 800f61a:	1a9b      	subs	r3, r3, r2
 800f61c:	42ab      	cmp	r3, r5
 800f61e:	dc26      	bgt.n	800f66e <_printf_common+0x96>
 800f620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f624:	1e13      	subs	r3, r2, #0
 800f626:	6822      	ldr	r2, [r4, #0]
 800f628:	bf18      	it	ne
 800f62a:	2301      	movne	r3, #1
 800f62c:	0692      	lsls	r2, r2, #26
 800f62e:	d42b      	bmi.n	800f688 <_printf_common+0xb0>
 800f630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f634:	4649      	mov	r1, r9
 800f636:	4638      	mov	r0, r7
 800f638:	47c0      	blx	r8
 800f63a:	3001      	adds	r0, #1
 800f63c:	d01e      	beq.n	800f67c <_printf_common+0xa4>
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	6922      	ldr	r2, [r4, #16]
 800f642:	f003 0306 	and.w	r3, r3, #6
 800f646:	2b04      	cmp	r3, #4
 800f648:	bf02      	ittt	eq
 800f64a:	68e5      	ldreq	r5, [r4, #12]
 800f64c:	6833      	ldreq	r3, [r6, #0]
 800f64e:	1aed      	subeq	r5, r5, r3
 800f650:	68a3      	ldr	r3, [r4, #8]
 800f652:	bf0c      	ite	eq
 800f654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f658:	2500      	movne	r5, #0
 800f65a:	4293      	cmp	r3, r2
 800f65c:	bfc4      	itt	gt
 800f65e:	1a9b      	subgt	r3, r3, r2
 800f660:	18ed      	addgt	r5, r5, r3
 800f662:	2600      	movs	r6, #0
 800f664:	341a      	adds	r4, #26
 800f666:	42b5      	cmp	r5, r6
 800f668:	d11a      	bne.n	800f6a0 <_printf_common+0xc8>
 800f66a:	2000      	movs	r0, #0
 800f66c:	e008      	b.n	800f680 <_printf_common+0xa8>
 800f66e:	2301      	movs	r3, #1
 800f670:	4652      	mov	r2, sl
 800f672:	4649      	mov	r1, r9
 800f674:	4638      	mov	r0, r7
 800f676:	47c0      	blx	r8
 800f678:	3001      	adds	r0, #1
 800f67a:	d103      	bne.n	800f684 <_printf_common+0xac>
 800f67c:	f04f 30ff 	mov.w	r0, #4294967295
 800f680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f684:	3501      	adds	r5, #1
 800f686:	e7c6      	b.n	800f616 <_printf_common+0x3e>
 800f688:	18e1      	adds	r1, r4, r3
 800f68a:	1c5a      	adds	r2, r3, #1
 800f68c:	2030      	movs	r0, #48	; 0x30
 800f68e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f692:	4422      	add	r2, r4
 800f694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f69c:	3302      	adds	r3, #2
 800f69e:	e7c7      	b.n	800f630 <_printf_common+0x58>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	4622      	mov	r2, r4
 800f6a4:	4649      	mov	r1, r9
 800f6a6:	4638      	mov	r0, r7
 800f6a8:	47c0      	blx	r8
 800f6aa:	3001      	adds	r0, #1
 800f6ac:	d0e6      	beq.n	800f67c <_printf_common+0xa4>
 800f6ae:	3601      	adds	r6, #1
 800f6b0:	e7d9      	b.n	800f666 <_printf_common+0x8e>
	...

0800f6b4 <_printf_i>:
 800f6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b8:	7e0f      	ldrb	r7, [r1, #24]
 800f6ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6bc:	2f78      	cmp	r7, #120	; 0x78
 800f6be:	4691      	mov	r9, r2
 800f6c0:	4680      	mov	r8, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	469a      	mov	sl, r3
 800f6c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6ca:	d807      	bhi.n	800f6dc <_printf_i+0x28>
 800f6cc:	2f62      	cmp	r7, #98	; 0x62
 800f6ce:	d80a      	bhi.n	800f6e6 <_printf_i+0x32>
 800f6d0:	2f00      	cmp	r7, #0
 800f6d2:	f000 80d4 	beq.w	800f87e <_printf_i+0x1ca>
 800f6d6:	2f58      	cmp	r7, #88	; 0x58
 800f6d8:	f000 80c0 	beq.w	800f85c <_printf_i+0x1a8>
 800f6dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6e4:	e03a      	b.n	800f75c <_printf_i+0xa8>
 800f6e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6ea:	2b15      	cmp	r3, #21
 800f6ec:	d8f6      	bhi.n	800f6dc <_printf_i+0x28>
 800f6ee:	a101      	add	r1, pc, #4	; (adr r1, 800f6f4 <_printf_i+0x40>)
 800f6f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6f4:	0800f74d 	.word	0x0800f74d
 800f6f8:	0800f761 	.word	0x0800f761
 800f6fc:	0800f6dd 	.word	0x0800f6dd
 800f700:	0800f6dd 	.word	0x0800f6dd
 800f704:	0800f6dd 	.word	0x0800f6dd
 800f708:	0800f6dd 	.word	0x0800f6dd
 800f70c:	0800f761 	.word	0x0800f761
 800f710:	0800f6dd 	.word	0x0800f6dd
 800f714:	0800f6dd 	.word	0x0800f6dd
 800f718:	0800f6dd 	.word	0x0800f6dd
 800f71c:	0800f6dd 	.word	0x0800f6dd
 800f720:	0800f865 	.word	0x0800f865
 800f724:	0800f78d 	.word	0x0800f78d
 800f728:	0800f81f 	.word	0x0800f81f
 800f72c:	0800f6dd 	.word	0x0800f6dd
 800f730:	0800f6dd 	.word	0x0800f6dd
 800f734:	0800f887 	.word	0x0800f887
 800f738:	0800f6dd 	.word	0x0800f6dd
 800f73c:	0800f78d 	.word	0x0800f78d
 800f740:	0800f6dd 	.word	0x0800f6dd
 800f744:	0800f6dd 	.word	0x0800f6dd
 800f748:	0800f827 	.word	0x0800f827
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	1d1a      	adds	r2, r3, #4
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	602a      	str	r2, [r5, #0]
 800f754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f75c:	2301      	movs	r3, #1
 800f75e:	e09f      	b.n	800f8a0 <_printf_i+0x1ec>
 800f760:	6820      	ldr	r0, [r4, #0]
 800f762:	682b      	ldr	r3, [r5, #0]
 800f764:	0607      	lsls	r7, r0, #24
 800f766:	f103 0104 	add.w	r1, r3, #4
 800f76a:	6029      	str	r1, [r5, #0]
 800f76c:	d501      	bpl.n	800f772 <_printf_i+0xbe>
 800f76e:	681e      	ldr	r6, [r3, #0]
 800f770:	e003      	b.n	800f77a <_printf_i+0xc6>
 800f772:	0646      	lsls	r6, r0, #25
 800f774:	d5fb      	bpl.n	800f76e <_printf_i+0xba>
 800f776:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f77a:	2e00      	cmp	r6, #0
 800f77c:	da03      	bge.n	800f786 <_printf_i+0xd2>
 800f77e:	232d      	movs	r3, #45	; 0x2d
 800f780:	4276      	negs	r6, r6
 800f782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f786:	485a      	ldr	r0, [pc, #360]	; (800f8f0 <_printf_i+0x23c>)
 800f788:	230a      	movs	r3, #10
 800f78a:	e012      	b.n	800f7b2 <_printf_i+0xfe>
 800f78c:	682b      	ldr	r3, [r5, #0]
 800f78e:	6820      	ldr	r0, [r4, #0]
 800f790:	1d19      	adds	r1, r3, #4
 800f792:	6029      	str	r1, [r5, #0]
 800f794:	0605      	lsls	r5, r0, #24
 800f796:	d501      	bpl.n	800f79c <_printf_i+0xe8>
 800f798:	681e      	ldr	r6, [r3, #0]
 800f79a:	e002      	b.n	800f7a2 <_printf_i+0xee>
 800f79c:	0641      	lsls	r1, r0, #25
 800f79e:	d5fb      	bpl.n	800f798 <_printf_i+0xe4>
 800f7a0:	881e      	ldrh	r6, [r3, #0]
 800f7a2:	4853      	ldr	r0, [pc, #332]	; (800f8f0 <_printf_i+0x23c>)
 800f7a4:	2f6f      	cmp	r7, #111	; 0x6f
 800f7a6:	bf0c      	ite	eq
 800f7a8:	2308      	moveq	r3, #8
 800f7aa:	230a      	movne	r3, #10
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7b2:	6865      	ldr	r5, [r4, #4]
 800f7b4:	60a5      	str	r5, [r4, #8]
 800f7b6:	2d00      	cmp	r5, #0
 800f7b8:	bfa2      	ittt	ge
 800f7ba:	6821      	ldrge	r1, [r4, #0]
 800f7bc:	f021 0104 	bicge.w	r1, r1, #4
 800f7c0:	6021      	strge	r1, [r4, #0]
 800f7c2:	b90e      	cbnz	r6, 800f7c8 <_printf_i+0x114>
 800f7c4:	2d00      	cmp	r5, #0
 800f7c6:	d04b      	beq.n	800f860 <_printf_i+0x1ac>
 800f7c8:	4615      	mov	r5, r2
 800f7ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7ce:	fb03 6711 	mls	r7, r3, r1, r6
 800f7d2:	5dc7      	ldrb	r7, [r0, r7]
 800f7d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7d8:	4637      	mov	r7, r6
 800f7da:	42bb      	cmp	r3, r7
 800f7dc:	460e      	mov	r6, r1
 800f7de:	d9f4      	bls.n	800f7ca <_printf_i+0x116>
 800f7e0:	2b08      	cmp	r3, #8
 800f7e2:	d10b      	bne.n	800f7fc <_printf_i+0x148>
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	07de      	lsls	r6, r3, #31
 800f7e8:	d508      	bpl.n	800f7fc <_printf_i+0x148>
 800f7ea:	6923      	ldr	r3, [r4, #16]
 800f7ec:	6861      	ldr	r1, [r4, #4]
 800f7ee:	4299      	cmp	r1, r3
 800f7f0:	bfde      	ittt	le
 800f7f2:	2330      	movle	r3, #48	; 0x30
 800f7f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7fc:	1b52      	subs	r2, r2, r5
 800f7fe:	6122      	str	r2, [r4, #16]
 800f800:	f8cd a000 	str.w	sl, [sp]
 800f804:	464b      	mov	r3, r9
 800f806:	aa03      	add	r2, sp, #12
 800f808:	4621      	mov	r1, r4
 800f80a:	4640      	mov	r0, r8
 800f80c:	f7ff fee4 	bl	800f5d8 <_printf_common>
 800f810:	3001      	adds	r0, #1
 800f812:	d14a      	bne.n	800f8aa <_printf_i+0x1f6>
 800f814:	f04f 30ff 	mov.w	r0, #4294967295
 800f818:	b004      	add	sp, #16
 800f81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	f043 0320 	orr.w	r3, r3, #32
 800f824:	6023      	str	r3, [r4, #0]
 800f826:	4833      	ldr	r0, [pc, #204]	; (800f8f4 <_printf_i+0x240>)
 800f828:	2778      	movs	r7, #120	; 0x78
 800f82a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f82e:	6823      	ldr	r3, [r4, #0]
 800f830:	6829      	ldr	r1, [r5, #0]
 800f832:	061f      	lsls	r7, r3, #24
 800f834:	f851 6b04 	ldr.w	r6, [r1], #4
 800f838:	d402      	bmi.n	800f840 <_printf_i+0x18c>
 800f83a:	065f      	lsls	r7, r3, #25
 800f83c:	bf48      	it	mi
 800f83e:	b2b6      	uxthmi	r6, r6
 800f840:	07df      	lsls	r7, r3, #31
 800f842:	bf48      	it	mi
 800f844:	f043 0320 	orrmi.w	r3, r3, #32
 800f848:	6029      	str	r1, [r5, #0]
 800f84a:	bf48      	it	mi
 800f84c:	6023      	strmi	r3, [r4, #0]
 800f84e:	b91e      	cbnz	r6, 800f858 <_printf_i+0x1a4>
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	f023 0320 	bic.w	r3, r3, #32
 800f856:	6023      	str	r3, [r4, #0]
 800f858:	2310      	movs	r3, #16
 800f85a:	e7a7      	b.n	800f7ac <_printf_i+0xf8>
 800f85c:	4824      	ldr	r0, [pc, #144]	; (800f8f0 <_printf_i+0x23c>)
 800f85e:	e7e4      	b.n	800f82a <_printf_i+0x176>
 800f860:	4615      	mov	r5, r2
 800f862:	e7bd      	b.n	800f7e0 <_printf_i+0x12c>
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	6826      	ldr	r6, [r4, #0]
 800f868:	6961      	ldr	r1, [r4, #20]
 800f86a:	1d18      	adds	r0, r3, #4
 800f86c:	6028      	str	r0, [r5, #0]
 800f86e:	0635      	lsls	r5, r6, #24
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	d501      	bpl.n	800f878 <_printf_i+0x1c4>
 800f874:	6019      	str	r1, [r3, #0]
 800f876:	e002      	b.n	800f87e <_printf_i+0x1ca>
 800f878:	0670      	lsls	r0, r6, #25
 800f87a:	d5fb      	bpl.n	800f874 <_printf_i+0x1c0>
 800f87c:	8019      	strh	r1, [r3, #0]
 800f87e:	2300      	movs	r3, #0
 800f880:	6123      	str	r3, [r4, #16]
 800f882:	4615      	mov	r5, r2
 800f884:	e7bc      	b.n	800f800 <_printf_i+0x14c>
 800f886:	682b      	ldr	r3, [r5, #0]
 800f888:	1d1a      	adds	r2, r3, #4
 800f88a:	602a      	str	r2, [r5, #0]
 800f88c:	681d      	ldr	r5, [r3, #0]
 800f88e:	6862      	ldr	r2, [r4, #4]
 800f890:	2100      	movs	r1, #0
 800f892:	4628      	mov	r0, r5
 800f894:	f7f0 fcc4 	bl	8000220 <memchr>
 800f898:	b108      	cbz	r0, 800f89e <_printf_i+0x1ea>
 800f89a:	1b40      	subs	r0, r0, r5
 800f89c:	6060      	str	r0, [r4, #4]
 800f89e:	6863      	ldr	r3, [r4, #4]
 800f8a0:	6123      	str	r3, [r4, #16]
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8a8:	e7aa      	b.n	800f800 <_printf_i+0x14c>
 800f8aa:	6923      	ldr	r3, [r4, #16]
 800f8ac:	462a      	mov	r2, r5
 800f8ae:	4649      	mov	r1, r9
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	47d0      	blx	sl
 800f8b4:	3001      	adds	r0, #1
 800f8b6:	d0ad      	beq.n	800f814 <_printf_i+0x160>
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	079b      	lsls	r3, r3, #30
 800f8bc:	d413      	bmi.n	800f8e6 <_printf_i+0x232>
 800f8be:	68e0      	ldr	r0, [r4, #12]
 800f8c0:	9b03      	ldr	r3, [sp, #12]
 800f8c2:	4298      	cmp	r0, r3
 800f8c4:	bfb8      	it	lt
 800f8c6:	4618      	movlt	r0, r3
 800f8c8:	e7a6      	b.n	800f818 <_printf_i+0x164>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	4632      	mov	r2, r6
 800f8ce:	4649      	mov	r1, r9
 800f8d0:	4640      	mov	r0, r8
 800f8d2:	47d0      	blx	sl
 800f8d4:	3001      	adds	r0, #1
 800f8d6:	d09d      	beq.n	800f814 <_printf_i+0x160>
 800f8d8:	3501      	adds	r5, #1
 800f8da:	68e3      	ldr	r3, [r4, #12]
 800f8dc:	9903      	ldr	r1, [sp, #12]
 800f8de:	1a5b      	subs	r3, r3, r1
 800f8e0:	42ab      	cmp	r3, r5
 800f8e2:	dcf2      	bgt.n	800f8ca <_printf_i+0x216>
 800f8e4:	e7eb      	b.n	800f8be <_printf_i+0x20a>
 800f8e6:	2500      	movs	r5, #0
 800f8e8:	f104 0619 	add.w	r6, r4, #25
 800f8ec:	e7f5      	b.n	800f8da <_printf_i+0x226>
 800f8ee:	bf00      	nop
 800f8f0:	080156f8 	.word	0x080156f8
 800f8f4:	08015709 	.word	0x08015709

0800f8f8 <_scanf_float>:
 800f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fc:	b087      	sub	sp, #28
 800f8fe:	4617      	mov	r7, r2
 800f900:	9303      	str	r3, [sp, #12]
 800f902:	688b      	ldr	r3, [r1, #8]
 800f904:	1e5a      	subs	r2, r3, #1
 800f906:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f90a:	bf83      	ittte	hi
 800f90c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f910:	195b      	addhi	r3, r3, r5
 800f912:	9302      	strhi	r3, [sp, #8]
 800f914:	2300      	movls	r3, #0
 800f916:	bf86      	itte	hi
 800f918:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f91c:	608b      	strhi	r3, [r1, #8]
 800f91e:	9302      	strls	r3, [sp, #8]
 800f920:	680b      	ldr	r3, [r1, #0]
 800f922:	468b      	mov	fp, r1
 800f924:	2500      	movs	r5, #0
 800f926:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f92a:	f84b 3b1c 	str.w	r3, [fp], #28
 800f92e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f932:	4680      	mov	r8, r0
 800f934:	460c      	mov	r4, r1
 800f936:	465e      	mov	r6, fp
 800f938:	46aa      	mov	sl, r5
 800f93a:	46a9      	mov	r9, r5
 800f93c:	9501      	str	r5, [sp, #4]
 800f93e:	68a2      	ldr	r2, [r4, #8]
 800f940:	b152      	cbz	r2, 800f958 <_scanf_float+0x60>
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	2b4e      	cmp	r3, #78	; 0x4e
 800f948:	d864      	bhi.n	800fa14 <_scanf_float+0x11c>
 800f94a:	2b40      	cmp	r3, #64	; 0x40
 800f94c:	d83c      	bhi.n	800f9c8 <_scanf_float+0xd0>
 800f94e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f952:	b2c8      	uxtb	r0, r1
 800f954:	280e      	cmp	r0, #14
 800f956:	d93a      	bls.n	800f9ce <_scanf_float+0xd6>
 800f958:	f1b9 0f00 	cmp.w	r9, #0
 800f95c:	d003      	beq.n	800f966 <_scanf_float+0x6e>
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f964:	6023      	str	r3, [r4, #0]
 800f966:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f96a:	f1ba 0f01 	cmp.w	sl, #1
 800f96e:	f200 8113 	bhi.w	800fb98 <_scanf_float+0x2a0>
 800f972:	455e      	cmp	r6, fp
 800f974:	f200 8105 	bhi.w	800fb82 <_scanf_float+0x28a>
 800f978:	2501      	movs	r5, #1
 800f97a:	4628      	mov	r0, r5
 800f97c:	b007      	add	sp, #28
 800f97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f982:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f986:	2a0d      	cmp	r2, #13
 800f988:	d8e6      	bhi.n	800f958 <_scanf_float+0x60>
 800f98a:	a101      	add	r1, pc, #4	; (adr r1, 800f990 <_scanf_float+0x98>)
 800f98c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f990:	0800facf 	.word	0x0800facf
 800f994:	0800f959 	.word	0x0800f959
 800f998:	0800f959 	.word	0x0800f959
 800f99c:	0800f959 	.word	0x0800f959
 800f9a0:	0800fb2f 	.word	0x0800fb2f
 800f9a4:	0800fb07 	.word	0x0800fb07
 800f9a8:	0800f959 	.word	0x0800f959
 800f9ac:	0800f959 	.word	0x0800f959
 800f9b0:	0800fadd 	.word	0x0800fadd
 800f9b4:	0800f959 	.word	0x0800f959
 800f9b8:	0800f959 	.word	0x0800f959
 800f9bc:	0800f959 	.word	0x0800f959
 800f9c0:	0800f959 	.word	0x0800f959
 800f9c4:	0800fa95 	.word	0x0800fa95
 800f9c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f9cc:	e7db      	b.n	800f986 <_scanf_float+0x8e>
 800f9ce:	290e      	cmp	r1, #14
 800f9d0:	d8c2      	bhi.n	800f958 <_scanf_float+0x60>
 800f9d2:	a001      	add	r0, pc, #4	; (adr r0, 800f9d8 <_scanf_float+0xe0>)
 800f9d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9d8:	0800fa87 	.word	0x0800fa87
 800f9dc:	0800f959 	.word	0x0800f959
 800f9e0:	0800fa87 	.word	0x0800fa87
 800f9e4:	0800fb1b 	.word	0x0800fb1b
 800f9e8:	0800f959 	.word	0x0800f959
 800f9ec:	0800fa35 	.word	0x0800fa35
 800f9f0:	0800fa71 	.word	0x0800fa71
 800f9f4:	0800fa71 	.word	0x0800fa71
 800f9f8:	0800fa71 	.word	0x0800fa71
 800f9fc:	0800fa71 	.word	0x0800fa71
 800fa00:	0800fa71 	.word	0x0800fa71
 800fa04:	0800fa71 	.word	0x0800fa71
 800fa08:	0800fa71 	.word	0x0800fa71
 800fa0c:	0800fa71 	.word	0x0800fa71
 800fa10:	0800fa71 	.word	0x0800fa71
 800fa14:	2b6e      	cmp	r3, #110	; 0x6e
 800fa16:	d809      	bhi.n	800fa2c <_scanf_float+0x134>
 800fa18:	2b60      	cmp	r3, #96	; 0x60
 800fa1a:	d8b2      	bhi.n	800f982 <_scanf_float+0x8a>
 800fa1c:	2b54      	cmp	r3, #84	; 0x54
 800fa1e:	d077      	beq.n	800fb10 <_scanf_float+0x218>
 800fa20:	2b59      	cmp	r3, #89	; 0x59
 800fa22:	d199      	bne.n	800f958 <_scanf_float+0x60>
 800fa24:	2d07      	cmp	r5, #7
 800fa26:	d197      	bne.n	800f958 <_scanf_float+0x60>
 800fa28:	2508      	movs	r5, #8
 800fa2a:	e029      	b.n	800fa80 <_scanf_float+0x188>
 800fa2c:	2b74      	cmp	r3, #116	; 0x74
 800fa2e:	d06f      	beq.n	800fb10 <_scanf_float+0x218>
 800fa30:	2b79      	cmp	r3, #121	; 0x79
 800fa32:	e7f6      	b.n	800fa22 <_scanf_float+0x12a>
 800fa34:	6821      	ldr	r1, [r4, #0]
 800fa36:	05c8      	lsls	r0, r1, #23
 800fa38:	d51a      	bpl.n	800fa70 <_scanf_float+0x178>
 800fa3a:	9b02      	ldr	r3, [sp, #8]
 800fa3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fa40:	6021      	str	r1, [r4, #0]
 800fa42:	f109 0901 	add.w	r9, r9, #1
 800fa46:	b11b      	cbz	r3, 800fa50 <_scanf_float+0x158>
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	3201      	adds	r2, #1
 800fa4c:	9302      	str	r3, [sp, #8]
 800fa4e:	60a2      	str	r2, [r4, #8]
 800fa50:	68a3      	ldr	r3, [r4, #8]
 800fa52:	3b01      	subs	r3, #1
 800fa54:	60a3      	str	r3, [r4, #8]
 800fa56:	6923      	ldr	r3, [r4, #16]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	6123      	str	r3, [r4, #16]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	607b      	str	r3, [r7, #4]
 800fa64:	f340 8084 	ble.w	800fb70 <_scanf_float+0x278>
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	603b      	str	r3, [r7, #0]
 800fa6e:	e766      	b.n	800f93e <_scanf_float+0x46>
 800fa70:	eb1a 0f05 	cmn.w	sl, r5
 800fa74:	f47f af70 	bne.w	800f958 <_scanf_float+0x60>
 800fa78:	6822      	ldr	r2, [r4, #0]
 800fa7a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fa7e:	6022      	str	r2, [r4, #0]
 800fa80:	f806 3b01 	strb.w	r3, [r6], #1
 800fa84:	e7e4      	b.n	800fa50 <_scanf_float+0x158>
 800fa86:	6822      	ldr	r2, [r4, #0]
 800fa88:	0610      	lsls	r0, r2, #24
 800fa8a:	f57f af65 	bpl.w	800f958 <_scanf_float+0x60>
 800fa8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa92:	e7f4      	b.n	800fa7e <_scanf_float+0x186>
 800fa94:	f1ba 0f00 	cmp.w	sl, #0
 800fa98:	d10e      	bne.n	800fab8 <_scanf_float+0x1c0>
 800fa9a:	f1b9 0f00 	cmp.w	r9, #0
 800fa9e:	d10e      	bne.n	800fabe <_scanf_float+0x1c6>
 800faa0:	6822      	ldr	r2, [r4, #0]
 800faa2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800faa6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800faaa:	d108      	bne.n	800fabe <_scanf_float+0x1c6>
 800faac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fab0:	6022      	str	r2, [r4, #0]
 800fab2:	f04f 0a01 	mov.w	sl, #1
 800fab6:	e7e3      	b.n	800fa80 <_scanf_float+0x188>
 800fab8:	f1ba 0f02 	cmp.w	sl, #2
 800fabc:	d055      	beq.n	800fb6a <_scanf_float+0x272>
 800fabe:	2d01      	cmp	r5, #1
 800fac0:	d002      	beq.n	800fac8 <_scanf_float+0x1d0>
 800fac2:	2d04      	cmp	r5, #4
 800fac4:	f47f af48 	bne.w	800f958 <_scanf_float+0x60>
 800fac8:	3501      	adds	r5, #1
 800faca:	b2ed      	uxtb	r5, r5
 800facc:	e7d8      	b.n	800fa80 <_scanf_float+0x188>
 800face:	f1ba 0f01 	cmp.w	sl, #1
 800fad2:	f47f af41 	bne.w	800f958 <_scanf_float+0x60>
 800fad6:	f04f 0a02 	mov.w	sl, #2
 800fada:	e7d1      	b.n	800fa80 <_scanf_float+0x188>
 800fadc:	b97d      	cbnz	r5, 800fafe <_scanf_float+0x206>
 800fade:	f1b9 0f00 	cmp.w	r9, #0
 800fae2:	f47f af3c 	bne.w	800f95e <_scanf_float+0x66>
 800fae6:	6822      	ldr	r2, [r4, #0]
 800fae8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800faec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800faf0:	f47f af39 	bne.w	800f966 <_scanf_float+0x6e>
 800faf4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800faf8:	6022      	str	r2, [r4, #0]
 800fafa:	2501      	movs	r5, #1
 800fafc:	e7c0      	b.n	800fa80 <_scanf_float+0x188>
 800fafe:	2d03      	cmp	r5, #3
 800fb00:	d0e2      	beq.n	800fac8 <_scanf_float+0x1d0>
 800fb02:	2d05      	cmp	r5, #5
 800fb04:	e7de      	b.n	800fac4 <_scanf_float+0x1cc>
 800fb06:	2d02      	cmp	r5, #2
 800fb08:	f47f af26 	bne.w	800f958 <_scanf_float+0x60>
 800fb0c:	2503      	movs	r5, #3
 800fb0e:	e7b7      	b.n	800fa80 <_scanf_float+0x188>
 800fb10:	2d06      	cmp	r5, #6
 800fb12:	f47f af21 	bne.w	800f958 <_scanf_float+0x60>
 800fb16:	2507      	movs	r5, #7
 800fb18:	e7b2      	b.n	800fa80 <_scanf_float+0x188>
 800fb1a:	6822      	ldr	r2, [r4, #0]
 800fb1c:	0591      	lsls	r1, r2, #22
 800fb1e:	f57f af1b 	bpl.w	800f958 <_scanf_float+0x60>
 800fb22:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fb26:	6022      	str	r2, [r4, #0]
 800fb28:	f8cd 9004 	str.w	r9, [sp, #4]
 800fb2c:	e7a8      	b.n	800fa80 <_scanf_float+0x188>
 800fb2e:	6822      	ldr	r2, [r4, #0]
 800fb30:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fb34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fb38:	d006      	beq.n	800fb48 <_scanf_float+0x250>
 800fb3a:	0550      	lsls	r0, r2, #21
 800fb3c:	f57f af0c 	bpl.w	800f958 <_scanf_float+0x60>
 800fb40:	f1b9 0f00 	cmp.w	r9, #0
 800fb44:	f43f af0f 	beq.w	800f966 <_scanf_float+0x6e>
 800fb48:	0591      	lsls	r1, r2, #22
 800fb4a:	bf58      	it	pl
 800fb4c:	9901      	ldrpl	r1, [sp, #4]
 800fb4e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb52:	bf58      	it	pl
 800fb54:	eba9 0101 	subpl.w	r1, r9, r1
 800fb58:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fb5c:	bf58      	it	pl
 800fb5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb62:	6022      	str	r2, [r4, #0]
 800fb64:	f04f 0900 	mov.w	r9, #0
 800fb68:	e78a      	b.n	800fa80 <_scanf_float+0x188>
 800fb6a:	f04f 0a03 	mov.w	sl, #3
 800fb6e:	e787      	b.n	800fa80 <_scanf_float+0x188>
 800fb70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb74:	4639      	mov	r1, r7
 800fb76:	4640      	mov	r0, r8
 800fb78:	4798      	blx	r3
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	f43f aedf 	beq.w	800f93e <_scanf_float+0x46>
 800fb80:	e6ea      	b.n	800f958 <_scanf_float+0x60>
 800fb82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb8a:	463a      	mov	r2, r7
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	4798      	blx	r3
 800fb90:	6923      	ldr	r3, [r4, #16]
 800fb92:	3b01      	subs	r3, #1
 800fb94:	6123      	str	r3, [r4, #16]
 800fb96:	e6ec      	b.n	800f972 <_scanf_float+0x7a>
 800fb98:	1e6b      	subs	r3, r5, #1
 800fb9a:	2b06      	cmp	r3, #6
 800fb9c:	d825      	bhi.n	800fbea <_scanf_float+0x2f2>
 800fb9e:	2d02      	cmp	r5, #2
 800fba0:	d836      	bhi.n	800fc10 <_scanf_float+0x318>
 800fba2:	455e      	cmp	r6, fp
 800fba4:	f67f aee8 	bls.w	800f978 <_scanf_float+0x80>
 800fba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbb0:	463a      	mov	r2, r7
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	4798      	blx	r3
 800fbb6:	6923      	ldr	r3, [r4, #16]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	e7f1      	b.n	800fba2 <_scanf_float+0x2aa>
 800fbbe:	9802      	ldr	r0, [sp, #8]
 800fbc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbc4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fbc8:	9002      	str	r0, [sp, #8]
 800fbca:	463a      	mov	r2, r7
 800fbcc:	4640      	mov	r0, r8
 800fbce:	4798      	blx	r3
 800fbd0:	6923      	ldr	r3, [r4, #16]
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	6123      	str	r3, [r4, #16]
 800fbd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbda:	fa5f fa8a 	uxtb.w	sl, sl
 800fbde:	f1ba 0f02 	cmp.w	sl, #2
 800fbe2:	d1ec      	bne.n	800fbbe <_scanf_float+0x2c6>
 800fbe4:	3d03      	subs	r5, #3
 800fbe6:	b2ed      	uxtb	r5, r5
 800fbe8:	1b76      	subs	r6, r6, r5
 800fbea:	6823      	ldr	r3, [r4, #0]
 800fbec:	05da      	lsls	r2, r3, #23
 800fbee:	d52f      	bpl.n	800fc50 <_scanf_float+0x358>
 800fbf0:	055b      	lsls	r3, r3, #21
 800fbf2:	d510      	bpl.n	800fc16 <_scanf_float+0x31e>
 800fbf4:	455e      	cmp	r6, fp
 800fbf6:	f67f aebf 	bls.w	800f978 <_scanf_float+0x80>
 800fbfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc02:	463a      	mov	r2, r7
 800fc04:	4640      	mov	r0, r8
 800fc06:	4798      	blx	r3
 800fc08:	6923      	ldr	r3, [r4, #16]
 800fc0a:	3b01      	subs	r3, #1
 800fc0c:	6123      	str	r3, [r4, #16]
 800fc0e:	e7f1      	b.n	800fbf4 <_scanf_float+0x2fc>
 800fc10:	46aa      	mov	sl, r5
 800fc12:	9602      	str	r6, [sp, #8]
 800fc14:	e7df      	b.n	800fbd6 <_scanf_float+0x2de>
 800fc16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc1a:	6923      	ldr	r3, [r4, #16]
 800fc1c:	2965      	cmp	r1, #101	; 0x65
 800fc1e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc22:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc26:	6123      	str	r3, [r4, #16]
 800fc28:	d00c      	beq.n	800fc44 <_scanf_float+0x34c>
 800fc2a:	2945      	cmp	r1, #69	; 0x45
 800fc2c:	d00a      	beq.n	800fc44 <_scanf_float+0x34c>
 800fc2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc32:	463a      	mov	r2, r7
 800fc34:	4640      	mov	r0, r8
 800fc36:	4798      	blx	r3
 800fc38:	6923      	ldr	r3, [r4, #16]
 800fc3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc3e:	3b01      	subs	r3, #1
 800fc40:	1eb5      	subs	r5, r6, #2
 800fc42:	6123      	str	r3, [r4, #16]
 800fc44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc48:	463a      	mov	r2, r7
 800fc4a:	4640      	mov	r0, r8
 800fc4c:	4798      	blx	r3
 800fc4e:	462e      	mov	r6, r5
 800fc50:	6825      	ldr	r5, [r4, #0]
 800fc52:	f015 0510 	ands.w	r5, r5, #16
 800fc56:	d158      	bne.n	800fd0a <_scanf_float+0x412>
 800fc58:	7035      	strb	r5, [r6, #0]
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fc60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc64:	d11c      	bne.n	800fca0 <_scanf_float+0x3a8>
 800fc66:	9b01      	ldr	r3, [sp, #4]
 800fc68:	454b      	cmp	r3, r9
 800fc6a:	eba3 0209 	sub.w	r2, r3, r9
 800fc6e:	d124      	bne.n	800fcba <_scanf_float+0x3c2>
 800fc70:	2200      	movs	r2, #0
 800fc72:	4659      	mov	r1, fp
 800fc74:	4640      	mov	r0, r8
 800fc76:	f002 fcd3 	bl	8012620 <_strtod_r>
 800fc7a:	9b03      	ldr	r3, [sp, #12]
 800fc7c:	6821      	ldr	r1, [r4, #0]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f011 0f02 	tst.w	r1, #2
 800fc84:	ec57 6b10 	vmov	r6, r7, d0
 800fc88:	f103 0204 	add.w	r2, r3, #4
 800fc8c:	d020      	beq.n	800fcd0 <_scanf_float+0x3d8>
 800fc8e:	9903      	ldr	r1, [sp, #12]
 800fc90:	600a      	str	r2, [r1, #0]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	e9c3 6700 	strd	r6, r7, [r3]
 800fc98:	68e3      	ldr	r3, [r4, #12]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	60e3      	str	r3, [r4, #12]
 800fc9e:	e66c      	b.n	800f97a <_scanf_float+0x82>
 800fca0:	9b04      	ldr	r3, [sp, #16]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d0e4      	beq.n	800fc70 <_scanf_float+0x378>
 800fca6:	9905      	ldr	r1, [sp, #20]
 800fca8:	230a      	movs	r3, #10
 800fcaa:	462a      	mov	r2, r5
 800fcac:	3101      	adds	r1, #1
 800fcae:	4640      	mov	r0, r8
 800fcb0:	f002 fd3e 	bl	8012730 <_strtol_r>
 800fcb4:	9b04      	ldr	r3, [sp, #16]
 800fcb6:	9e05      	ldr	r6, [sp, #20]
 800fcb8:	1ac2      	subs	r2, r0, r3
 800fcba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fcbe:	429e      	cmp	r6, r3
 800fcc0:	bf28      	it	cs
 800fcc2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fcc6:	4912      	ldr	r1, [pc, #72]	; (800fd10 <_scanf_float+0x418>)
 800fcc8:	4630      	mov	r0, r6
 800fcca:	f000 f8e7 	bl	800fe9c <siprintf>
 800fcce:	e7cf      	b.n	800fc70 <_scanf_float+0x378>
 800fcd0:	f011 0f04 	tst.w	r1, #4
 800fcd4:	9903      	ldr	r1, [sp, #12]
 800fcd6:	600a      	str	r2, [r1, #0]
 800fcd8:	d1db      	bne.n	800fc92 <_scanf_float+0x39a>
 800fcda:	f8d3 8000 	ldr.w	r8, [r3]
 800fcde:	ee10 2a10 	vmov	r2, s0
 800fce2:	ee10 0a10 	vmov	r0, s0
 800fce6:	463b      	mov	r3, r7
 800fce8:	4639      	mov	r1, r7
 800fcea:	f7f0 ff47 	bl	8000b7c <__aeabi_dcmpun>
 800fcee:	b128      	cbz	r0, 800fcfc <_scanf_float+0x404>
 800fcf0:	4808      	ldr	r0, [pc, #32]	; (800fd14 <_scanf_float+0x41c>)
 800fcf2:	f000 fa5b 	bl	80101ac <nanf>
 800fcf6:	ed88 0a00 	vstr	s0, [r8]
 800fcfa:	e7cd      	b.n	800fc98 <_scanf_float+0x3a0>
 800fcfc:	4630      	mov	r0, r6
 800fcfe:	4639      	mov	r1, r7
 800fd00:	f7f0 ff9a 	bl	8000c38 <__aeabi_d2f>
 800fd04:	f8c8 0000 	str.w	r0, [r8]
 800fd08:	e7c6      	b.n	800fc98 <_scanf_float+0x3a0>
 800fd0a:	2500      	movs	r5, #0
 800fd0c:	e635      	b.n	800f97a <_scanf_float+0x82>
 800fd0e:	bf00      	nop
 800fd10:	0801571a 	.word	0x0801571a
 800fd14:	08015ac8 	.word	0x08015ac8

0800fd18 <std>:
 800fd18:	2300      	movs	r3, #0
 800fd1a:	b510      	push	{r4, lr}
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	e9c0 3300 	strd	r3, r3, [r0]
 800fd22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd26:	6083      	str	r3, [r0, #8]
 800fd28:	8181      	strh	r1, [r0, #12]
 800fd2a:	6643      	str	r3, [r0, #100]	; 0x64
 800fd2c:	81c2      	strh	r2, [r0, #14]
 800fd2e:	6183      	str	r3, [r0, #24]
 800fd30:	4619      	mov	r1, r3
 800fd32:	2208      	movs	r2, #8
 800fd34:	305c      	adds	r0, #92	; 0x5c
 800fd36:	f000 f942 	bl	800ffbe <memset>
 800fd3a:	4b0d      	ldr	r3, [pc, #52]	; (800fd70 <std+0x58>)
 800fd3c:	6263      	str	r3, [r4, #36]	; 0x24
 800fd3e:	4b0d      	ldr	r3, [pc, #52]	; (800fd74 <std+0x5c>)
 800fd40:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd42:	4b0d      	ldr	r3, [pc, #52]	; (800fd78 <std+0x60>)
 800fd44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd46:	4b0d      	ldr	r3, [pc, #52]	; (800fd7c <std+0x64>)
 800fd48:	6323      	str	r3, [r4, #48]	; 0x30
 800fd4a:	4b0d      	ldr	r3, [pc, #52]	; (800fd80 <std+0x68>)
 800fd4c:	6224      	str	r4, [r4, #32]
 800fd4e:	429c      	cmp	r4, r3
 800fd50:	d006      	beq.n	800fd60 <std+0x48>
 800fd52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fd56:	4294      	cmp	r4, r2
 800fd58:	d002      	beq.n	800fd60 <std+0x48>
 800fd5a:	33d0      	adds	r3, #208	; 0xd0
 800fd5c:	429c      	cmp	r4, r3
 800fd5e:	d105      	bne.n	800fd6c <std+0x54>
 800fd60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd68:	f000 ba0e 	b.w	8010188 <__retarget_lock_init_recursive>
 800fd6c:	bd10      	pop	{r4, pc}
 800fd6e:	bf00      	nop
 800fd70:	0800ff35 	.word	0x0800ff35
 800fd74:	0800ff5b 	.word	0x0800ff5b
 800fd78:	0800ff93 	.word	0x0800ff93
 800fd7c:	0800ffb7 	.word	0x0800ffb7
 800fd80:	20004998 	.word	0x20004998

0800fd84 <stdio_exit_handler>:
 800fd84:	4a02      	ldr	r2, [pc, #8]	; (800fd90 <stdio_exit_handler+0xc>)
 800fd86:	4903      	ldr	r1, [pc, #12]	; (800fd94 <stdio_exit_handler+0x10>)
 800fd88:	4803      	ldr	r0, [pc, #12]	; (800fd98 <stdio_exit_handler+0x14>)
 800fd8a:	f000 b869 	b.w	800fe60 <_fwalk_sglue>
 800fd8e:	bf00      	nop
 800fd90:	20000018 	.word	0x20000018
 800fd94:	08013131 	.word	0x08013131
 800fd98:	20000024 	.word	0x20000024

0800fd9c <cleanup_stdio>:
 800fd9c:	6841      	ldr	r1, [r0, #4]
 800fd9e:	4b0c      	ldr	r3, [pc, #48]	; (800fdd0 <cleanup_stdio+0x34>)
 800fda0:	4299      	cmp	r1, r3
 800fda2:	b510      	push	{r4, lr}
 800fda4:	4604      	mov	r4, r0
 800fda6:	d001      	beq.n	800fdac <cleanup_stdio+0x10>
 800fda8:	f003 f9c2 	bl	8013130 <_fflush_r>
 800fdac:	68a1      	ldr	r1, [r4, #8]
 800fdae:	4b09      	ldr	r3, [pc, #36]	; (800fdd4 <cleanup_stdio+0x38>)
 800fdb0:	4299      	cmp	r1, r3
 800fdb2:	d002      	beq.n	800fdba <cleanup_stdio+0x1e>
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f003 f9bb 	bl	8013130 <_fflush_r>
 800fdba:	68e1      	ldr	r1, [r4, #12]
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <cleanup_stdio+0x3c>)
 800fdbe:	4299      	cmp	r1, r3
 800fdc0:	d004      	beq.n	800fdcc <cleanup_stdio+0x30>
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdc8:	f003 b9b2 	b.w	8013130 <_fflush_r>
 800fdcc:	bd10      	pop	{r4, pc}
 800fdce:	bf00      	nop
 800fdd0:	20004998 	.word	0x20004998
 800fdd4:	20004a00 	.word	0x20004a00
 800fdd8:	20004a68 	.word	0x20004a68

0800fddc <global_stdio_init.part.0>:
 800fddc:	b510      	push	{r4, lr}
 800fdde:	4b0b      	ldr	r3, [pc, #44]	; (800fe0c <global_stdio_init.part.0+0x30>)
 800fde0:	4c0b      	ldr	r4, [pc, #44]	; (800fe10 <global_stdio_init.part.0+0x34>)
 800fde2:	4a0c      	ldr	r2, [pc, #48]	; (800fe14 <global_stdio_init.part.0+0x38>)
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	4620      	mov	r0, r4
 800fde8:	2200      	movs	r2, #0
 800fdea:	2104      	movs	r1, #4
 800fdec:	f7ff ff94 	bl	800fd18 <std>
 800fdf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	2109      	movs	r1, #9
 800fdf8:	f7ff ff8e 	bl	800fd18 <std>
 800fdfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fe00:	2202      	movs	r2, #2
 800fe02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe06:	2112      	movs	r1, #18
 800fe08:	f7ff bf86 	b.w	800fd18 <std>
 800fe0c:	20004ad0 	.word	0x20004ad0
 800fe10:	20004998 	.word	0x20004998
 800fe14:	0800fd85 	.word	0x0800fd85

0800fe18 <__sfp_lock_acquire>:
 800fe18:	4801      	ldr	r0, [pc, #4]	; (800fe20 <__sfp_lock_acquire+0x8>)
 800fe1a:	f000 b9b6 	b.w	801018a <__retarget_lock_acquire_recursive>
 800fe1e:	bf00      	nop
 800fe20:	20004ad9 	.word	0x20004ad9

0800fe24 <__sfp_lock_release>:
 800fe24:	4801      	ldr	r0, [pc, #4]	; (800fe2c <__sfp_lock_release+0x8>)
 800fe26:	f000 b9b1 	b.w	801018c <__retarget_lock_release_recursive>
 800fe2a:	bf00      	nop
 800fe2c:	20004ad9 	.word	0x20004ad9

0800fe30 <__sinit>:
 800fe30:	b510      	push	{r4, lr}
 800fe32:	4604      	mov	r4, r0
 800fe34:	f7ff fff0 	bl	800fe18 <__sfp_lock_acquire>
 800fe38:	6a23      	ldr	r3, [r4, #32]
 800fe3a:	b11b      	cbz	r3, 800fe44 <__sinit+0x14>
 800fe3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe40:	f7ff bff0 	b.w	800fe24 <__sfp_lock_release>
 800fe44:	4b04      	ldr	r3, [pc, #16]	; (800fe58 <__sinit+0x28>)
 800fe46:	6223      	str	r3, [r4, #32]
 800fe48:	4b04      	ldr	r3, [pc, #16]	; (800fe5c <__sinit+0x2c>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d1f5      	bne.n	800fe3c <__sinit+0xc>
 800fe50:	f7ff ffc4 	bl	800fddc <global_stdio_init.part.0>
 800fe54:	e7f2      	b.n	800fe3c <__sinit+0xc>
 800fe56:	bf00      	nop
 800fe58:	0800fd9d 	.word	0x0800fd9d
 800fe5c:	20004ad0 	.word	0x20004ad0

0800fe60 <_fwalk_sglue>:
 800fe60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe64:	4607      	mov	r7, r0
 800fe66:	4688      	mov	r8, r1
 800fe68:	4614      	mov	r4, r2
 800fe6a:	2600      	movs	r6, #0
 800fe6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe70:	f1b9 0901 	subs.w	r9, r9, #1
 800fe74:	d505      	bpl.n	800fe82 <_fwalk_sglue+0x22>
 800fe76:	6824      	ldr	r4, [r4, #0]
 800fe78:	2c00      	cmp	r4, #0
 800fe7a:	d1f7      	bne.n	800fe6c <_fwalk_sglue+0xc>
 800fe7c:	4630      	mov	r0, r6
 800fe7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe82:	89ab      	ldrh	r3, [r5, #12]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d907      	bls.n	800fe98 <_fwalk_sglue+0x38>
 800fe88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	d003      	beq.n	800fe98 <_fwalk_sglue+0x38>
 800fe90:	4629      	mov	r1, r5
 800fe92:	4638      	mov	r0, r7
 800fe94:	47c0      	blx	r8
 800fe96:	4306      	orrs	r6, r0
 800fe98:	3568      	adds	r5, #104	; 0x68
 800fe9a:	e7e9      	b.n	800fe70 <_fwalk_sglue+0x10>

0800fe9c <siprintf>:
 800fe9c:	b40e      	push	{r1, r2, r3}
 800fe9e:	b500      	push	{lr}
 800fea0:	b09c      	sub	sp, #112	; 0x70
 800fea2:	ab1d      	add	r3, sp, #116	; 0x74
 800fea4:	9002      	str	r0, [sp, #8]
 800fea6:	9006      	str	r0, [sp, #24]
 800fea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800feac:	4809      	ldr	r0, [pc, #36]	; (800fed4 <siprintf+0x38>)
 800feae:	9107      	str	r1, [sp, #28]
 800feb0:	9104      	str	r1, [sp, #16]
 800feb2:	4909      	ldr	r1, [pc, #36]	; (800fed8 <siprintf+0x3c>)
 800feb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb8:	9105      	str	r1, [sp, #20]
 800feba:	6800      	ldr	r0, [r0, #0]
 800febc:	9301      	str	r3, [sp, #4]
 800febe:	a902      	add	r1, sp, #8
 800fec0:	f002 fc92 	bl	80127e8 <_svfiprintf_r>
 800fec4:	9b02      	ldr	r3, [sp, #8]
 800fec6:	2200      	movs	r2, #0
 800fec8:	701a      	strb	r2, [r3, #0]
 800feca:	b01c      	add	sp, #112	; 0x70
 800fecc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fed0:	b003      	add	sp, #12
 800fed2:	4770      	bx	lr
 800fed4:	20000070 	.word	0x20000070
 800fed8:	ffff0208 	.word	0xffff0208

0800fedc <siscanf>:
 800fedc:	b40e      	push	{r1, r2, r3}
 800fede:	b510      	push	{r4, lr}
 800fee0:	b09f      	sub	sp, #124	; 0x7c
 800fee2:	ac21      	add	r4, sp, #132	; 0x84
 800fee4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fee8:	f854 2b04 	ldr.w	r2, [r4], #4
 800feec:	9201      	str	r2, [sp, #4]
 800feee:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fef2:	9004      	str	r0, [sp, #16]
 800fef4:	9008      	str	r0, [sp, #32]
 800fef6:	f7f0 f9e3 	bl	80002c0 <strlen>
 800fefa:	4b0c      	ldr	r3, [pc, #48]	; (800ff2c <siscanf+0x50>)
 800fefc:	9005      	str	r0, [sp, #20]
 800fefe:	9009      	str	r0, [sp, #36]	; 0x24
 800ff00:	930d      	str	r3, [sp, #52]	; 0x34
 800ff02:	480b      	ldr	r0, [pc, #44]	; (800ff30 <siscanf+0x54>)
 800ff04:	9a01      	ldr	r2, [sp, #4]
 800ff06:	6800      	ldr	r0, [r0, #0]
 800ff08:	9403      	str	r4, [sp, #12]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	9311      	str	r3, [sp, #68]	; 0x44
 800ff0e:	9316      	str	r3, [sp, #88]	; 0x58
 800ff10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff14:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ff18:	a904      	add	r1, sp, #16
 800ff1a:	4623      	mov	r3, r4
 800ff1c:	f002 fdbc 	bl	8012a98 <__ssvfiscanf_r>
 800ff20:	b01f      	add	sp, #124	; 0x7c
 800ff22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff26:	b003      	add	sp, #12
 800ff28:	4770      	bx	lr
 800ff2a:	bf00      	nop
 800ff2c:	0800ff57 	.word	0x0800ff57
 800ff30:	20000070 	.word	0x20000070

0800ff34 <__sread>:
 800ff34:	b510      	push	{r4, lr}
 800ff36:	460c      	mov	r4, r1
 800ff38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff3c:	f000 f8d6 	bl	80100ec <_read_r>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	bfab      	itete	ge
 800ff44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff46:	89a3      	ldrhlt	r3, [r4, #12]
 800ff48:	181b      	addge	r3, r3, r0
 800ff4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff4e:	bfac      	ite	ge
 800ff50:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff52:	81a3      	strhlt	r3, [r4, #12]
 800ff54:	bd10      	pop	{r4, pc}

0800ff56 <__seofread>:
 800ff56:	2000      	movs	r0, #0
 800ff58:	4770      	bx	lr

0800ff5a <__swrite>:
 800ff5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5e:	461f      	mov	r7, r3
 800ff60:	898b      	ldrh	r3, [r1, #12]
 800ff62:	05db      	lsls	r3, r3, #23
 800ff64:	4605      	mov	r5, r0
 800ff66:	460c      	mov	r4, r1
 800ff68:	4616      	mov	r6, r2
 800ff6a:	d505      	bpl.n	800ff78 <__swrite+0x1e>
 800ff6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff70:	2302      	movs	r3, #2
 800ff72:	2200      	movs	r2, #0
 800ff74:	f000 f8a8 	bl	80100c8 <_lseek_r>
 800ff78:	89a3      	ldrh	r3, [r4, #12]
 800ff7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff82:	81a3      	strh	r3, [r4, #12]
 800ff84:	4632      	mov	r2, r6
 800ff86:	463b      	mov	r3, r7
 800ff88:	4628      	mov	r0, r5
 800ff8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8e:	f000 b8bf 	b.w	8010110 <_write_r>

0800ff92 <__sseek>:
 800ff92:	b510      	push	{r4, lr}
 800ff94:	460c      	mov	r4, r1
 800ff96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff9a:	f000 f895 	bl	80100c8 <_lseek_r>
 800ff9e:	1c43      	adds	r3, r0, #1
 800ffa0:	89a3      	ldrh	r3, [r4, #12]
 800ffa2:	bf15      	itete	ne
 800ffa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffae:	81a3      	strheq	r3, [r4, #12]
 800ffb0:	bf18      	it	ne
 800ffb2:	81a3      	strhne	r3, [r4, #12]
 800ffb4:	bd10      	pop	{r4, pc}

0800ffb6 <__sclose>:
 800ffb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffba:	f000 b81f 	b.w	800fffc <_close_r>

0800ffbe <memset>:
 800ffbe:	4402      	add	r2, r0
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d100      	bne.n	800ffc8 <memset+0xa>
 800ffc6:	4770      	bx	lr
 800ffc8:	f803 1b01 	strb.w	r1, [r3], #1
 800ffcc:	e7f9      	b.n	800ffc2 <memset+0x4>

0800ffce <strncmp>:
 800ffce:	b510      	push	{r4, lr}
 800ffd0:	b16a      	cbz	r2, 800ffee <strncmp+0x20>
 800ffd2:	3901      	subs	r1, #1
 800ffd4:	1884      	adds	r4, r0, r2
 800ffd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d103      	bne.n	800ffea <strncmp+0x1c>
 800ffe2:	42a0      	cmp	r0, r4
 800ffe4:	d001      	beq.n	800ffea <strncmp+0x1c>
 800ffe6:	2a00      	cmp	r2, #0
 800ffe8:	d1f5      	bne.n	800ffd6 <strncmp+0x8>
 800ffea:	1ad0      	subs	r0, r2, r3
 800ffec:	bd10      	pop	{r4, pc}
 800ffee:	4610      	mov	r0, r2
 800fff0:	e7fc      	b.n	800ffec <strncmp+0x1e>
	...

0800fff4 <_localeconv_r>:
 800fff4:	4800      	ldr	r0, [pc, #0]	; (800fff8 <_localeconv_r+0x4>)
 800fff6:	4770      	bx	lr
 800fff8:	20000164 	.word	0x20000164

0800fffc <_close_r>:
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	4d06      	ldr	r5, [pc, #24]	; (8010018 <_close_r+0x1c>)
 8010000:	2300      	movs	r3, #0
 8010002:	4604      	mov	r4, r0
 8010004:	4608      	mov	r0, r1
 8010006:	602b      	str	r3, [r5, #0]
 8010008:	f7f3 fcdf 	bl	80039ca <_close>
 801000c:	1c43      	adds	r3, r0, #1
 801000e:	d102      	bne.n	8010016 <_close_r+0x1a>
 8010010:	682b      	ldr	r3, [r5, #0]
 8010012:	b103      	cbz	r3, 8010016 <_close_r+0x1a>
 8010014:	6023      	str	r3, [r4, #0]
 8010016:	bd38      	pop	{r3, r4, r5, pc}
 8010018:	20004ad4 	.word	0x20004ad4

0801001c <_reclaim_reent>:
 801001c:	4b29      	ldr	r3, [pc, #164]	; (80100c4 <_reclaim_reent+0xa8>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4283      	cmp	r3, r0
 8010022:	b570      	push	{r4, r5, r6, lr}
 8010024:	4604      	mov	r4, r0
 8010026:	d04b      	beq.n	80100c0 <_reclaim_reent+0xa4>
 8010028:	69c3      	ldr	r3, [r0, #28]
 801002a:	b143      	cbz	r3, 801003e <_reclaim_reent+0x22>
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d144      	bne.n	80100bc <_reclaim_reent+0xa0>
 8010032:	69e3      	ldr	r3, [r4, #28]
 8010034:	6819      	ldr	r1, [r3, #0]
 8010036:	b111      	cbz	r1, 801003e <_reclaim_reent+0x22>
 8010038:	4620      	mov	r0, r4
 801003a:	f000 ff37 	bl	8010eac <_free_r>
 801003e:	6961      	ldr	r1, [r4, #20]
 8010040:	b111      	cbz	r1, 8010048 <_reclaim_reent+0x2c>
 8010042:	4620      	mov	r0, r4
 8010044:	f000 ff32 	bl	8010eac <_free_r>
 8010048:	69e1      	ldr	r1, [r4, #28]
 801004a:	b111      	cbz	r1, 8010052 <_reclaim_reent+0x36>
 801004c:	4620      	mov	r0, r4
 801004e:	f000 ff2d 	bl	8010eac <_free_r>
 8010052:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010054:	b111      	cbz	r1, 801005c <_reclaim_reent+0x40>
 8010056:	4620      	mov	r0, r4
 8010058:	f000 ff28 	bl	8010eac <_free_r>
 801005c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801005e:	b111      	cbz	r1, 8010066 <_reclaim_reent+0x4a>
 8010060:	4620      	mov	r0, r4
 8010062:	f000 ff23 	bl	8010eac <_free_r>
 8010066:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010068:	b111      	cbz	r1, 8010070 <_reclaim_reent+0x54>
 801006a:	4620      	mov	r0, r4
 801006c:	f000 ff1e 	bl	8010eac <_free_r>
 8010070:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010072:	b111      	cbz	r1, 801007a <_reclaim_reent+0x5e>
 8010074:	4620      	mov	r0, r4
 8010076:	f000 ff19 	bl	8010eac <_free_r>
 801007a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801007c:	b111      	cbz	r1, 8010084 <_reclaim_reent+0x68>
 801007e:	4620      	mov	r0, r4
 8010080:	f000 ff14 	bl	8010eac <_free_r>
 8010084:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010086:	b111      	cbz	r1, 801008e <_reclaim_reent+0x72>
 8010088:	4620      	mov	r0, r4
 801008a:	f000 ff0f 	bl	8010eac <_free_r>
 801008e:	6a23      	ldr	r3, [r4, #32]
 8010090:	b1b3      	cbz	r3, 80100c0 <_reclaim_reent+0xa4>
 8010092:	4620      	mov	r0, r4
 8010094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010098:	4718      	bx	r3
 801009a:	5949      	ldr	r1, [r1, r5]
 801009c:	b941      	cbnz	r1, 80100b0 <_reclaim_reent+0x94>
 801009e:	3504      	adds	r5, #4
 80100a0:	69e3      	ldr	r3, [r4, #28]
 80100a2:	2d80      	cmp	r5, #128	; 0x80
 80100a4:	68d9      	ldr	r1, [r3, #12]
 80100a6:	d1f8      	bne.n	801009a <_reclaim_reent+0x7e>
 80100a8:	4620      	mov	r0, r4
 80100aa:	f000 feff 	bl	8010eac <_free_r>
 80100ae:	e7c0      	b.n	8010032 <_reclaim_reent+0x16>
 80100b0:	680e      	ldr	r6, [r1, #0]
 80100b2:	4620      	mov	r0, r4
 80100b4:	f000 fefa 	bl	8010eac <_free_r>
 80100b8:	4631      	mov	r1, r6
 80100ba:	e7ef      	b.n	801009c <_reclaim_reent+0x80>
 80100bc:	2500      	movs	r5, #0
 80100be:	e7ef      	b.n	80100a0 <_reclaim_reent+0x84>
 80100c0:	bd70      	pop	{r4, r5, r6, pc}
 80100c2:	bf00      	nop
 80100c4:	20000070 	.word	0x20000070

080100c8 <_lseek_r>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	4d07      	ldr	r5, [pc, #28]	; (80100e8 <_lseek_r+0x20>)
 80100cc:	4604      	mov	r4, r0
 80100ce:	4608      	mov	r0, r1
 80100d0:	4611      	mov	r1, r2
 80100d2:	2200      	movs	r2, #0
 80100d4:	602a      	str	r2, [r5, #0]
 80100d6:	461a      	mov	r2, r3
 80100d8:	f7f3 fc9e 	bl	8003a18 <_lseek>
 80100dc:	1c43      	adds	r3, r0, #1
 80100de:	d102      	bne.n	80100e6 <_lseek_r+0x1e>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	b103      	cbz	r3, 80100e6 <_lseek_r+0x1e>
 80100e4:	6023      	str	r3, [r4, #0]
 80100e6:	bd38      	pop	{r3, r4, r5, pc}
 80100e8:	20004ad4 	.word	0x20004ad4

080100ec <_read_r>:
 80100ec:	b538      	push	{r3, r4, r5, lr}
 80100ee:	4d07      	ldr	r5, [pc, #28]	; (801010c <_read_r+0x20>)
 80100f0:	4604      	mov	r4, r0
 80100f2:	4608      	mov	r0, r1
 80100f4:	4611      	mov	r1, r2
 80100f6:	2200      	movs	r2, #0
 80100f8:	602a      	str	r2, [r5, #0]
 80100fa:	461a      	mov	r2, r3
 80100fc:	f7f3 fc2c 	bl	8003958 <_read>
 8010100:	1c43      	adds	r3, r0, #1
 8010102:	d102      	bne.n	801010a <_read_r+0x1e>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	b103      	cbz	r3, 801010a <_read_r+0x1e>
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	bd38      	pop	{r3, r4, r5, pc}
 801010c:	20004ad4 	.word	0x20004ad4

08010110 <_write_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d07      	ldr	r5, [pc, #28]	; (8010130 <_write_r+0x20>)
 8010114:	4604      	mov	r4, r0
 8010116:	4608      	mov	r0, r1
 8010118:	4611      	mov	r1, r2
 801011a:	2200      	movs	r2, #0
 801011c:	602a      	str	r2, [r5, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	f7f3 fc37 	bl	8003992 <_write>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d102      	bne.n	801012e <_write_r+0x1e>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	b103      	cbz	r3, 801012e <_write_r+0x1e>
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	bd38      	pop	{r3, r4, r5, pc}
 8010130:	20004ad4 	.word	0x20004ad4

08010134 <__errno>:
 8010134:	4b01      	ldr	r3, [pc, #4]	; (801013c <__errno+0x8>)
 8010136:	6818      	ldr	r0, [r3, #0]
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	20000070 	.word	0x20000070

08010140 <__libc_init_array>:
 8010140:	b570      	push	{r4, r5, r6, lr}
 8010142:	4d0d      	ldr	r5, [pc, #52]	; (8010178 <__libc_init_array+0x38>)
 8010144:	4c0d      	ldr	r4, [pc, #52]	; (801017c <__libc_init_array+0x3c>)
 8010146:	1b64      	subs	r4, r4, r5
 8010148:	10a4      	asrs	r4, r4, #2
 801014a:	2600      	movs	r6, #0
 801014c:	42a6      	cmp	r6, r4
 801014e:	d109      	bne.n	8010164 <__libc_init_array+0x24>
 8010150:	4d0b      	ldr	r5, [pc, #44]	; (8010180 <__libc_init_array+0x40>)
 8010152:	4c0c      	ldr	r4, [pc, #48]	; (8010184 <__libc_init_array+0x44>)
 8010154:	f005 f884 	bl	8015260 <_init>
 8010158:	1b64      	subs	r4, r4, r5
 801015a:	10a4      	asrs	r4, r4, #2
 801015c:	2600      	movs	r6, #0
 801015e:	42a6      	cmp	r6, r4
 8010160:	d105      	bne.n	801016e <__libc_init_array+0x2e>
 8010162:	bd70      	pop	{r4, r5, r6, pc}
 8010164:	f855 3b04 	ldr.w	r3, [r5], #4
 8010168:	4798      	blx	r3
 801016a:	3601      	adds	r6, #1
 801016c:	e7ee      	b.n	801014c <__libc_init_array+0xc>
 801016e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010172:	4798      	blx	r3
 8010174:	3601      	adds	r6, #1
 8010176:	e7f2      	b.n	801015e <__libc_init_array+0x1e>
 8010178:	08015ba0 	.word	0x08015ba0
 801017c:	08015ba0 	.word	0x08015ba0
 8010180:	08015ba0 	.word	0x08015ba0
 8010184:	08015ba4 	.word	0x08015ba4

08010188 <__retarget_lock_init_recursive>:
 8010188:	4770      	bx	lr

0801018a <__retarget_lock_acquire_recursive>:
 801018a:	4770      	bx	lr

0801018c <__retarget_lock_release_recursive>:
 801018c:	4770      	bx	lr

0801018e <memcpy>:
 801018e:	440a      	add	r2, r1
 8010190:	4291      	cmp	r1, r2
 8010192:	f100 33ff 	add.w	r3, r0, #4294967295
 8010196:	d100      	bne.n	801019a <memcpy+0xc>
 8010198:	4770      	bx	lr
 801019a:	b510      	push	{r4, lr}
 801019c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101a4:	4291      	cmp	r1, r2
 80101a6:	d1f9      	bne.n	801019c <memcpy+0xe>
 80101a8:	bd10      	pop	{r4, pc}
	...

080101ac <nanf>:
 80101ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80101b4 <nanf+0x8>
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	7fc00000 	.word	0x7fc00000

080101b8 <quorem>:
 80101b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101bc:	6903      	ldr	r3, [r0, #16]
 80101be:	690c      	ldr	r4, [r1, #16]
 80101c0:	42a3      	cmp	r3, r4
 80101c2:	4607      	mov	r7, r0
 80101c4:	db7e      	blt.n	80102c4 <quorem+0x10c>
 80101c6:	3c01      	subs	r4, #1
 80101c8:	f101 0814 	add.w	r8, r1, #20
 80101cc:	f100 0514 	add.w	r5, r0, #20
 80101d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101d4:	9301      	str	r3, [sp, #4]
 80101d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80101da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101de:	3301      	adds	r3, #1
 80101e0:	429a      	cmp	r2, r3
 80101e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80101e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80101ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80101ee:	d331      	bcc.n	8010254 <quorem+0x9c>
 80101f0:	f04f 0e00 	mov.w	lr, #0
 80101f4:	4640      	mov	r0, r8
 80101f6:	46ac      	mov	ip, r5
 80101f8:	46f2      	mov	sl, lr
 80101fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80101fe:	b293      	uxth	r3, r2
 8010200:	fb06 e303 	mla	r3, r6, r3, lr
 8010204:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010208:	0c1a      	lsrs	r2, r3, #16
 801020a:	b29b      	uxth	r3, r3
 801020c:	ebaa 0303 	sub.w	r3, sl, r3
 8010210:	f8dc a000 	ldr.w	sl, [ip]
 8010214:	fa13 f38a 	uxtah	r3, r3, sl
 8010218:	fb06 220e 	mla	r2, r6, lr, r2
 801021c:	9300      	str	r3, [sp, #0]
 801021e:	9b00      	ldr	r3, [sp, #0]
 8010220:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010224:	b292      	uxth	r2, r2
 8010226:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801022a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801022e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010232:	4581      	cmp	r9, r0
 8010234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010238:	f84c 3b04 	str.w	r3, [ip], #4
 801023c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010240:	d2db      	bcs.n	80101fa <quorem+0x42>
 8010242:	f855 300b 	ldr.w	r3, [r5, fp]
 8010246:	b92b      	cbnz	r3, 8010254 <quorem+0x9c>
 8010248:	9b01      	ldr	r3, [sp, #4]
 801024a:	3b04      	subs	r3, #4
 801024c:	429d      	cmp	r5, r3
 801024e:	461a      	mov	r2, r3
 8010250:	d32c      	bcc.n	80102ac <quorem+0xf4>
 8010252:	613c      	str	r4, [r7, #16]
 8010254:	4638      	mov	r0, r7
 8010256:	f001 f9ef 	bl	8011638 <__mcmp>
 801025a:	2800      	cmp	r0, #0
 801025c:	db22      	blt.n	80102a4 <quorem+0xec>
 801025e:	3601      	adds	r6, #1
 8010260:	4629      	mov	r1, r5
 8010262:	2000      	movs	r0, #0
 8010264:	f858 2b04 	ldr.w	r2, [r8], #4
 8010268:	f8d1 c000 	ldr.w	ip, [r1]
 801026c:	b293      	uxth	r3, r2
 801026e:	1ac3      	subs	r3, r0, r3
 8010270:	0c12      	lsrs	r2, r2, #16
 8010272:	fa13 f38c 	uxtah	r3, r3, ip
 8010276:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801027a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801027e:	b29b      	uxth	r3, r3
 8010280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010284:	45c1      	cmp	r9, r8
 8010286:	f841 3b04 	str.w	r3, [r1], #4
 801028a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801028e:	d2e9      	bcs.n	8010264 <quorem+0xac>
 8010290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010298:	b922      	cbnz	r2, 80102a4 <quorem+0xec>
 801029a:	3b04      	subs	r3, #4
 801029c:	429d      	cmp	r5, r3
 801029e:	461a      	mov	r2, r3
 80102a0:	d30a      	bcc.n	80102b8 <quorem+0x100>
 80102a2:	613c      	str	r4, [r7, #16]
 80102a4:	4630      	mov	r0, r6
 80102a6:	b003      	add	sp, #12
 80102a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ac:	6812      	ldr	r2, [r2, #0]
 80102ae:	3b04      	subs	r3, #4
 80102b0:	2a00      	cmp	r2, #0
 80102b2:	d1ce      	bne.n	8010252 <quorem+0x9a>
 80102b4:	3c01      	subs	r4, #1
 80102b6:	e7c9      	b.n	801024c <quorem+0x94>
 80102b8:	6812      	ldr	r2, [r2, #0]
 80102ba:	3b04      	subs	r3, #4
 80102bc:	2a00      	cmp	r2, #0
 80102be:	d1f0      	bne.n	80102a2 <quorem+0xea>
 80102c0:	3c01      	subs	r4, #1
 80102c2:	e7eb      	b.n	801029c <quorem+0xe4>
 80102c4:	2000      	movs	r0, #0
 80102c6:	e7ee      	b.n	80102a6 <quorem+0xee>

080102c8 <_dtoa_r>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	ed2d 8b04 	vpush	{d8-d9}
 80102d0:	69c5      	ldr	r5, [r0, #28]
 80102d2:	b093      	sub	sp, #76	; 0x4c
 80102d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80102d8:	ec57 6b10 	vmov	r6, r7, d0
 80102dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80102e0:	9107      	str	r1, [sp, #28]
 80102e2:	4604      	mov	r4, r0
 80102e4:	920a      	str	r2, [sp, #40]	; 0x28
 80102e6:	930d      	str	r3, [sp, #52]	; 0x34
 80102e8:	b975      	cbnz	r5, 8010308 <_dtoa_r+0x40>
 80102ea:	2010      	movs	r0, #16
 80102ec:	f000 fe2a 	bl	8010f44 <malloc>
 80102f0:	4602      	mov	r2, r0
 80102f2:	61e0      	str	r0, [r4, #28]
 80102f4:	b920      	cbnz	r0, 8010300 <_dtoa_r+0x38>
 80102f6:	4bae      	ldr	r3, [pc, #696]	; (80105b0 <_dtoa_r+0x2e8>)
 80102f8:	21ef      	movs	r1, #239	; 0xef
 80102fa:	48ae      	ldr	r0, [pc, #696]	; (80105b4 <_dtoa_r+0x2ec>)
 80102fc:	f002 ffe8 	bl	80132d0 <__assert_func>
 8010300:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010304:	6005      	str	r5, [r0, #0]
 8010306:	60c5      	str	r5, [r0, #12]
 8010308:	69e3      	ldr	r3, [r4, #28]
 801030a:	6819      	ldr	r1, [r3, #0]
 801030c:	b151      	cbz	r1, 8010324 <_dtoa_r+0x5c>
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	604a      	str	r2, [r1, #4]
 8010312:	2301      	movs	r3, #1
 8010314:	4093      	lsls	r3, r2
 8010316:	608b      	str	r3, [r1, #8]
 8010318:	4620      	mov	r0, r4
 801031a:	f000 ff07 	bl	801112c <_Bfree>
 801031e:	69e3      	ldr	r3, [r4, #28]
 8010320:	2200      	movs	r2, #0
 8010322:	601a      	str	r2, [r3, #0]
 8010324:	1e3b      	subs	r3, r7, #0
 8010326:	bfbb      	ittet	lt
 8010328:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801032c:	9303      	strlt	r3, [sp, #12]
 801032e:	2300      	movge	r3, #0
 8010330:	2201      	movlt	r2, #1
 8010332:	bfac      	ite	ge
 8010334:	f8c8 3000 	strge.w	r3, [r8]
 8010338:	f8c8 2000 	strlt.w	r2, [r8]
 801033c:	4b9e      	ldr	r3, [pc, #632]	; (80105b8 <_dtoa_r+0x2f0>)
 801033e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010342:	ea33 0308 	bics.w	r3, r3, r8
 8010346:	d11b      	bne.n	8010380 <_dtoa_r+0xb8>
 8010348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801034a:	f242 730f 	movw	r3, #9999	; 0x270f
 801034e:	6013      	str	r3, [r2, #0]
 8010350:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010354:	4333      	orrs	r3, r6
 8010356:	f000 8593 	beq.w	8010e80 <_dtoa_r+0xbb8>
 801035a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801035c:	b963      	cbnz	r3, 8010378 <_dtoa_r+0xb0>
 801035e:	4b97      	ldr	r3, [pc, #604]	; (80105bc <_dtoa_r+0x2f4>)
 8010360:	e027      	b.n	80103b2 <_dtoa_r+0xea>
 8010362:	4b97      	ldr	r3, [pc, #604]	; (80105c0 <_dtoa_r+0x2f8>)
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	3308      	adds	r3, #8
 8010368:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801036a:	6013      	str	r3, [r2, #0]
 801036c:	9800      	ldr	r0, [sp, #0]
 801036e:	b013      	add	sp, #76	; 0x4c
 8010370:	ecbd 8b04 	vpop	{d8-d9}
 8010374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010378:	4b90      	ldr	r3, [pc, #576]	; (80105bc <_dtoa_r+0x2f4>)
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	3303      	adds	r3, #3
 801037e:	e7f3      	b.n	8010368 <_dtoa_r+0xa0>
 8010380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010384:	2200      	movs	r2, #0
 8010386:	ec51 0b17 	vmov	r0, r1, d7
 801038a:	eeb0 8a47 	vmov.f32	s16, s14
 801038e:	eef0 8a67 	vmov.f32	s17, s15
 8010392:	2300      	movs	r3, #0
 8010394:	f7f0 fbc0 	bl	8000b18 <__aeabi_dcmpeq>
 8010398:	4681      	mov	r9, r0
 801039a:	b160      	cbz	r0, 80103b6 <_dtoa_r+0xee>
 801039c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801039e:	2301      	movs	r3, #1
 80103a0:	6013      	str	r3, [r2, #0]
 80103a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f000 8568 	beq.w	8010e7a <_dtoa_r+0xbb2>
 80103aa:	4b86      	ldr	r3, [pc, #536]	; (80105c4 <_dtoa_r+0x2fc>)
 80103ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	3b01      	subs	r3, #1
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	e7da      	b.n	801036c <_dtoa_r+0xa4>
 80103b6:	aa10      	add	r2, sp, #64	; 0x40
 80103b8:	a911      	add	r1, sp, #68	; 0x44
 80103ba:	4620      	mov	r0, r4
 80103bc:	eeb0 0a48 	vmov.f32	s0, s16
 80103c0:	eef0 0a68 	vmov.f32	s1, s17
 80103c4:	f001 fa4e 	bl	8011864 <__d2b>
 80103c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80103cc:	4682      	mov	sl, r0
 80103ce:	2d00      	cmp	r5, #0
 80103d0:	d07f      	beq.n	80104d2 <_dtoa_r+0x20a>
 80103d2:	ee18 3a90 	vmov	r3, s17
 80103d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80103de:	ec51 0b18 	vmov	r0, r1, d8
 80103e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80103e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80103ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80103ee:	4619      	mov	r1, r3
 80103f0:	2200      	movs	r2, #0
 80103f2:	4b75      	ldr	r3, [pc, #468]	; (80105c8 <_dtoa_r+0x300>)
 80103f4:	f7ef ff70 	bl	80002d8 <__aeabi_dsub>
 80103f8:	a367      	add	r3, pc, #412	; (adr r3, 8010598 <_dtoa_r+0x2d0>)
 80103fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fe:	f7f0 f923 	bl	8000648 <__aeabi_dmul>
 8010402:	a367      	add	r3, pc, #412	; (adr r3, 80105a0 <_dtoa_r+0x2d8>)
 8010404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010408:	f7ef ff68 	bl	80002dc <__adddf3>
 801040c:	4606      	mov	r6, r0
 801040e:	4628      	mov	r0, r5
 8010410:	460f      	mov	r7, r1
 8010412:	f7f0 f8af 	bl	8000574 <__aeabi_i2d>
 8010416:	a364      	add	r3, pc, #400	; (adr r3, 80105a8 <_dtoa_r+0x2e0>)
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	f7f0 f914 	bl	8000648 <__aeabi_dmul>
 8010420:	4602      	mov	r2, r0
 8010422:	460b      	mov	r3, r1
 8010424:	4630      	mov	r0, r6
 8010426:	4639      	mov	r1, r7
 8010428:	f7ef ff58 	bl	80002dc <__adddf3>
 801042c:	4606      	mov	r6, r0
 801042e:	460f      	mov	r7, r1
 8010430:	f7f0 fbba 	bl	8000ba8 <__aeabi_d2iz>
 8010434:	2200      	movs	r2, #0
 8010436:	4683      	mov	fp, r0
 8010438:	2300      	movs	r3, #0
 801043a:	4630      	mov	r0, r6
 801043c:	4639      	mov	r1, r7
 801043e:	f7f0 fb75 	bl	8000b2c <__aeabi_dcmplt>
 8010442:	b148      	cbz	r0, 8010458 <_dtoa_r+0x190>
 8010444:	4658      	mov	r0, fp
 8010446:	f7f0 f895 	bl	8000574 <__aeabi_i2d>
 801044a:	4632      	mov	r2, r6
 801044c:	463b      	mov	r3, r7
 801044e:	f7f0 fb63 	bl	8000b18 <__aeabi_dcmpeq>
 8010452:	b908      	cbnz	r0, 8010458 <_dtoa_r+0x190>
 8010454:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010458:	f1bb 0f16 	cmp.w	fp, #22
 801045c:	d857      	bhi.n	801050e <_dtoa_r+0x246>
 801045e:	4b5b      	ldr	r3, [pc, #364]	; (80105cc <_dtoa_r+0x304>)
 8010460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010468:	ec51 0b18 	vmov	r0, r1, d8
 801046c:	f7f0 fb5e 	bl	8000b2c <__aeabi_dcmplt>
 8010470:	2800      	cmp	r0, #0
 8010472:	d04e      	beq.n	8010512 <_dtoa_r+0x24a>
 8010474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010478:	2300      	movs	r3, #0
 801047a:	930c      	str	r3, [sp, #48]	; 0x30
 801047c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801047e:	1b5b      	subs	r3, r3, r5
 8010480:	1e5a      	subs	r2, r3, #1
 8010482:	bf45      	ittet	mi
 8010484:	f1c3 0301 	rsbmi	r3, r3, #1
 8010488:	9305      	strmi	r3, [sp, #20]
 801048a:	2300      	movpl	r3, #0
 801048c:	2300      	movmi	r3, #0
 801048e:	9206      	str	r2, [sp, #24]
 8010490:	bf54      	ite	pl
 8010492:	9305      	strpl	r3, [sp, #20]
 8010494:	9306      	strmi	r3, [sp, #24]
 8010496:	f1bb 0f00 	cmp.w	fp, #0
 801049a:	db3c      	blt.n	8010516 <_dtoa_r+0x24e>
 801049c:	9b06      	ldr	r3, [sp, #24]
 801049e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80104a2:	445b      	add	r3, fp
 80104a4:	9306      	str	r3, [sp, #24]
 80104a6:	2300      	movs	r3, #0
 80104a8:	9308      	str	r3, [sp, #32]
 80104aa:	9b07      	ldr	r3, [sp, #28]
 80104ac:	2b09      	cmp	r3, #9
 80104ae:	d868      	bhi.n	8010582 <_dtoa_r+0x2ba>
 80104b0:	2b05      	cmp	r3, #5
 80104b2:	bfc4      	itt	gt
 80104b4:	3b04      	subgt	r3, #4
 80104b6:	9307      	strgt	r3, [sp, #28]
 80104b8:	9b07      	ldr	r3, [sp, #28]
 80104ba:	f1a3 0302 	sub.w	r3, r3, #2
 80104be:	bfcc      	ite	gt
 80104c0:	2500      	movgt	r5, #0
 80104c2:	2501      	movle	r5, #1
 80104c4:	2b03      	cmp	r3, #3
 80104c6:	f200 8085 	bhi.w	80105d4 <_dtoa_r+0x30c>
 80104ca:	e8df f003 	tbb	[pc, r3]
 80104ce:	3b2e      	.short	0x3b2e
 80104d0:	5839      	.short	0x5839
 80104d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80104d6:	441d      	add	r5, r3
 80104d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80104dc:	2b20      	cmp	r3, #32
 80104de:	bfc1      	itttt	gt
 80104e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80104e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80104e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80104ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80104f0:	bfd6      	itet	le
 80104f2:	f1c3 0320 	rsble	r3, r3, #32
 80104f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80104fa:	fa06 f003 	lslle.w	r0, r6, r3
 80104fe:	f7f0 f829 	bl	8000554 <__aeabi_ui2d>
 8010502:	2201      	movs	r2, #1
 8010504:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010508:	3d01      	subs	r5, #1
 801050a:	920e      	str	r2, [sp, #56]	; 0x38
 801050c:	e76f      	b.n	80103ee <_dtoa_r+0x126>
 801050e:	2301      	movs	r3, #1
 8010510:	e7b3      	b.n	801047a <_dtoa_r+0x1b2>
 8010512:	900c      	str	r0, [sp, #48]	; 0x30
 8010514:	e7b2      	b.n	801047c <_dtoa_r+0x1b4>
 8010516:	9b05      	ldr	r3, [sp, #20]
 8010518:	eba3 030b 	sub.w	r3, r3, fp
 801051c:	9305      	str	r3, [sp, #20]
 801051e:	f1cb 0300 	rsb	r3, fp, #0
 8010522:	9308      	str	r3, [sp, #32]
 8010524:	2300      	movs	r3, #0
 8010526:	930b      	str	r3, [sp, #44]	; 0x2c
 8010528:	e7bf      	b.n	80104aa <_dtoa_r+0x1e2>
 801052a:	2300      	movs	r3, #0
 801052c:	9309      	str	r3, [sp, #36]	; 0x24
 801052e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010530:	2b00      	cmp	r3, #0
 8010532:	dc52      	bgt.n	80105da <_dtoa_r+0x312>
 8010534:	2301      	movs	r3, #1
 8010536:	9301      	str	r3, [sp, #4]
 8010538:	9304      	str	r3, [sp, #16]
 801053a:	461a      	mov	r2, r3
 801053c:	920a      	str	r2, [sp, #40]	; 0x28
 801053e:	e00b      	b.n	8010558 <_dtoa_r+0x290>
 8010540:	2301      	movs	r3, #1
 8010542:	e7f3      	b.n	801052c <_dtoa_r+0x264>
 8010544:	2300      	movs	r3, #0
 8010546:	9309      	str	r3, [sp, #36]	; 0x24
 8010548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801054a:	445b      	add	r3, fp
 801054c:	9301      	str	r3, [sp, #4]
 801054e:	3301      	adds	r3, #1
 8010550:	2b01      	cmp	r3, #1
 8010552:	9304      	str	r3, [sp, #16]
 8010554:	bfb8      	it	lt
 8010556:	2301      	movlt	r3, #1
 8010558:	69e0      	ldr	r0, [r4, #28]
 801055a:	2100      	movs	r1, #0
 801055c:	2204      	movs	r2, #4
 801055e:	f102 0614 	add.w	r6, r2, #20
 8010562:	429e      	cmp	r6, r3
 8010564:	d93d      	bls.n	80105e2 <_dtoa_r+0x31a>
 8010566:	6041      	str	r1, [r0, #4]
 8010568:	4620      	mov	r0, r4
 801056a:	f000 fd9f 	bl	80110ac <_Balloc>
 801056e:	9000      	str	r0, [sp, #0]
 8010570:	2800      	cmp	r0, #0
 8010572:	d139      	bne.n	80105e8 <_dtoa_r+0x320>
 8010574:	4b16      	ldr	r3, [pc, #88]	; (80105d0 <_dtoa_r+0x308>)
 8010576:	4602      	mov	r2, r0
 8010578:	f240 11af 	movw	r1, #431	; 0x1af
 801057c:	e6bd      	b.n	80102fa <_dtoa_r+0x32>
 801057e:	2301      	movs	r3, #1
 8010580:	e7e1      	b.n	8010546 <_dtoa_r+0x27e>
 8010582:	2501      	movs	r5, #1
 8010584:	2300      	movs	r3, #0
 8010586:	9307      	str	r3, [sp, #28]
 8010588:	9509      	str	r5, [sp, #36]	; 0x24
 801058a:	f04f 33ff 	mov.w	r3, #4294967295
 801058e:	9301      	str	r3, [sp, #4]
 8010590:	9304      	str	r3, [sp, #16]
 8010592:	2200      	movs	r2, #0
 8010594:	2312      	movs	r3, #18
 8010596:	e7d1      	b.n	801053c <_dtoa_r+0x274>
 8010598:	636f4361 	.word	0x636f4361
 801059c:	3fd287a7 	.word	0x3fd287a7
 80105a0:	8b60c8b3 	.word	0x8b60c8b3
 80105a4:	3fc68a28 	.word	0x3fc68a28
 80105a8:	509f79fb 	.word	0x509f79fb
 80105ac:	3fd34413 	.word	0x3fd34413
 80105b0:	0801572c 	.word	0x0801572c
 80105b4:	08015743 	.word	0x08015743
 80105b8:	7ff00000 	.word	0x7ff00000
 80105bc:	08015728 	.word	0x08015728
 80105c0:	0801571f 	.word	0x0801571f
 80105c4:	08015a81 	.word	0x08015a81
 80105c8:	3ff80000 	.word	0x3ff80000
 80105cc:	08015830 	.word	0x08015830
 80105d0:	0801579b 	.word	0x0801579b
 80105d4:	2301      	movs	r3, #1
 80105d6:	9309      	str	r3, [sp, #36]	; 0x24
 80105d8:	e7d7      	b.n	801058a <_dtoa_r+0x2c2>
 80105da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105dc:	9301      	str	r3, [sp, #4]
 80105de:	9304      	str	r3, [sp, #16]
 80105e0:	e7ba      	b.n	8010558 <_dtoa_r+0x290>
 80105e2:	3101      	adds	r1, #1
 80105e4:	0052      	lsls	r2, r2, #1
 80105e6:	e7ba      	b.n	801055e <_dtoa_r+0x296>
 80105e8:	69e3      	ldr	r3, [r4, #28]
 80105ea:	9a00      	ldr	r2, [sp, #0]
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	9b04      	ldr	r3, [sp, #16]
 80105f0:	2b0e      	cmp	r3, #14
 80105f2:	f200 80a8 	bhi.w	8010746 <_dtoa_r+0x47e>
 80105f6:	2d00      	cmp	r5, #0
 80105f8:	f000 80a5 	beq.w	8010746 <_dtoa_r+0x47e>
 80105fc:	f1bb 0f00 	cmp.w	fp, #0
 8010600:	dd38      	ble.n	8010674 <_dtoa_r+0x3ac>
 8010602:	4bc0      	ldr	r3, [pc, #768]	; (8010904 <_dtoa_r+0x63c>)
 8010604:	f00b 020f 	and.w	r2, fp, #15
 8010608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801060c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010610:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010614:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010618:	d019      	beq.n	801064e <_dtoa_r+0x386>
 801061a:	4bbb      	ldr	r3, [pc, #748]	; (8010908 <_dtoa_r+0x640>)
 801061c:	ec51 0b18 	vmov	r0, r1, d8
 8010620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010624:	f7f0 f93a 	bl	800089c <__aeabi_ddiv>
 8010628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801062c:	f008 080f 	and.w	r8, r8, #15
 8010630:	2503      	movs	r5, #3
 8010632:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010908 <_dtoa_r+0x640>
 8010636:	f1b8 0f00 	cmp.w	r8, #0
 801063a:	d10a      	bne.n	8010652 <_dtoa_r+0x38a>
 801063c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010640:	4632      	mov	r2, r6
 8010642:	463b      	mov	r3, r7
 8010644:	f7f0 f92a 	bl	800089c <__aeabi_ddiv>
 8010648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801064c:	e02b      	b.n	80106a6 <_dtoa_r+0x3de>
 801064e:	2502      	movs	r5, #2
 8010650:	e7ef      	b.n	8010632 <_dtoa_r+0x36a>
 8010652:	f018 0f01 	tst.w	r8, #1
 8010656:	d008      	beq.n	801066a <_dtoa_r+0x3a2>
 8010658:	4630      	mov	r0, r6
 801065a:	4639      	mov	r1, r7
 801065c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010660:	f7ef fff2 	bl	8000648 <__aeabi_dmul>
 8010664:	3501      	adds	r5, #1
 8010666:	4606      	mov	r6, r0
 8010668:	460f      	mov	r7, r1
 801066a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801066e:	f109 0908 	add.w	r9, r9, #8
 8010672:	e7e0      	b.n	8010636 <_dtoa_r+0x36e>
 8010674:	f000 809f 	beq.w	80107b6 <_dtoa_r+0x4ee>
 8010678:	f1cb 0600 	rsb	r6, fp, #0
 801067c:	4ba1      	ldr	r3, [pc, #644]	; (8010904 <_dtoa_r+0x63c>)
 801067e:	4fa2      	ldr	r7, [pc, #648]	; (8010908 <_dtoa_r+0x640>)
 8010680:	f006 020f 	and.w	r2, r6, #15
 8010684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068c:	ec51 0b18 	vmov	r0, r1, d8
 8010690:	f7ef ffda 	bl	8000648 <__aeabi_dmul>
 8010694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010698:	1136      	asrs	r6, r6, #4
 801069a:	2300      	movs	r3, #0
 801069c:	2502      	movs	r5, #2
 801069e:	2e00      	cmp	r6, #0
 80106a0:	d17e      	bne.n	80107a0 <_dtoa_r+0x4d8>
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d1d0      	bne.n	8010648 <_dtoa_r+0x380>
 80106a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f000 8084 	beq.w	80107ba <_dtoa_r+0x4f2>
 80106b2:	4b96      	ldr	r3, [pc, #600]	; (801090c <_dtoa_r+0x644>)
 80106b4:	2200      	movs	r2, #0
 80106b6:	4640      	mov	r0, r8
 80106b8:	4649      	mov	r1, r9
 80106ba:	f7f0 fa37 	bl	8000b2c <__aeabi_dcmplt>
 80106be:	2800      	cmp	r0, #0
 80106c0:	d07b      	beq.n	80107ba <_dtoa_r+0x4f2>
 80106c2:	9b04      	ldr	r3, [sp, #16]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d078      	beq.n	80107ba <_dtoa_r+0x4f2>
 80106c8:	9b01      	ldr	r3, [sp, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	dd39      	ble.n	8010742 <_dtoa_r+0x47a>
 80106ce:	4b90      	ldr	r3, [pc, #576]	; (8010910 <_dtoa_r+0x648>)
 80106d0:	2200      	movs	r2, #0
 80106d2:	4640      	mov	r0, r8
 80106d4:	4649      	mov	r1, r9
 80106d6:	f7ef ffb7 	bl	8000648 <__aeabi_dmul>
 80106da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106de:	9e01      	ldr	r6, [sp, #4]
 80106e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80106e4:	3501      	adds	r5, #1
 80106e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80106ea:	4628      	mov	r0, r5
 80106ec:	f7ef ff42 	bl	8000574 <__aeabi_i2d>
 80106f0:	4642      	mov	r2, r8
 80106f2:	464b      	mov	r3, r9
 80106f4:	f7ef ffa8 	bl	8000648 <__aeabi_dmul>
 80106f8:	4b86      	ldr	r3, [pc, #536]	; (8010914 <_dtoa_r+0x64c>)
 80106fa:	2200      	movs	r2, #0
 80106fc:	f7ef fdee 	bl	80002dc <__adddf3>
 8010700:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010708:	9303      	str	r3, [sp, #12]
 801070a:	2e00      	cmp	r6, #0
 801070c:	d158      	bne.n	80107c0 <_dtoa_r+0x4f8>
 801070e:	4b82      	ldr	r3, [pc, #520]	; (8010918 <_dtoa_r+0x650>)
 8010710:	2200      	movs	r2, #0
 8010712:	4640      	mov	r0, r8
 8010714:	4649      	mov	r1, r9
 8010716:	f7ef fddf 	bl	80002d8 <__aeabi_dsub>
 801071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801071e:	4680      	mov	r8, r0
 8010720:	4689      	mov	r9, r1
 8010722:	f7f0 fa21 	bl	8000b68 <__aeabi_dcmpgt>
 8010726:	2800      	cmp	r0, #0
 8010728:	f040 8296 	bne.w	8010c58 <_dtoa_r+0x990>
 801072c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010730:	4640      	mov	r0, r8
 8010732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010736:	4649      	mov	r1, r9
 8010738:	f7f0 f9f8 	bl	8000b2c <__aeabi_dcmplt>
 801073c:	2800      	cmp	r0, #0
 801073e:	f040 8289 	bne.w	8010c54 <_dtoa_r+0x98c>
 8010742:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010748:	2b00      	cmp	r3, #0
 801074a:	f2c0 814e 	blt.w	80109ea <_dtoa_r+0x722>
 801074e:	f1bb 0f0e 	cmp.w	fp, #14
 8010752:	f300 814a 	bgt.w	80109ea <_dtoa_r+0x722>
 8010756:	4b6b      	ldr	r3, [pc, #428]	; (8010904 <_dtoa_r+0x63c>)
 8010758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801075c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010762:	2b00      	cmp	r3, #0
 8010764:	f280 80dc 	bge.w	8010920 <_dtoa_r+0x658>
 8010768:	9b04      	ldr	r3, [sp, #16]
 801076a:	2b00      	cmp	r3, #0
 801076c:	f300 80d8 	bgt.w	8010920 <_dtoa_r+0x658>
 8010770:	f040 826f 	bne.w	8010c52 <_dtoa_r+0x98a>
 8010774:	4b68      	ldr	r3, [pc, #416]	; (8010918 <_dtoa_r+0x650>)
 8010776:	2200      	movs	r2, #0
 8010778:	4640      	mov	r0, r8
 801077a:	4649      	mov	r1, r9
 801077c:	f7ef ff64 	bl	8000648 <__aeabi_dmul>
 8010780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010784:	f7f0 f9e6 	bl	8000b54 <__aeabi_dcmpge>
 8010788:	9e04      	ldr	r6, [sp, #16]
 801078a:	4637      	mov	r7, r6
 801078c:	2800      	cmp	r0, #0
 801078e:	f040 8245 	bne.w	8010c1c <_dtoa_r+0x954>
 8010792:	9d00      	ldr	r5, [sp, #0]
 8010794:	2331      	movs	r3, #49	; 0x31
 8010796:	f805 3b01 	strb.w	r3, [r5], #1
 801079a:	f10b 0b01 	add.w	fp, fp, #1
 801079e:	e241      	b.n	8010c24 <_dtoa_r+0x95c>
 80107a0:	07f2      	lsls	r2, r6, #31
 80107a2:	d505      	bpl.n	80107b0 <_dtoa_r+0x4e8>
 80107a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107a8:	f7ef ff4e 	bl	8000648 <__aeabi_dmul>
 80107ac:	3501      	adds	r5, #1
 80107ae:	2301      	movs	r3, #1
 80107b0:	1076      	asrs	r6, r6, #1
 80107b2:	3708      	adds	r7, #8
 80107b4:	e773      	b.n	801069e <_dtoa_r+0x3d6>
 80107b6:	2502      	movs	r5, #2
 80107b8:	e775      	b.n	80106a6 <_dtoa_r+0x3de>
 80107ba:	9e04      	ldr	r6, [sp, #16]
 80107bc:	465f      	mov	r7, fp
 80107be:	e792      	b.n	80106e6 <_dtoa_r+0x41e>
 80107c0:	9900      	ldr	r1, [sp, #0]
 80107c2:	4b50      	ldr	r3, [pc, #320]	; (8010904 <_dtoa_r+0x63c>)
 80107c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107c8:	4431      	add	r1, r6
 80107ca:	9102      	str	r1, [sp, #8]
 80107cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107ce:	eeb0 9a47 	vmov.f32	s18, s14
 80107d2:	eef0 9a67 	vmov.f32	s19, s15
 80107d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80107da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80107de:	2900      	cmp	r1, #0
 80107e0:	d044      	beq.n	801086c <_dtoa_r+0x5a4>
 80107e2:	494e      	ldr	r1, [pc, #312]	; (801091c <_dtoa_r+0x654>)
 80107e4:	2000      	movs	r0, #0
 80107e6:	f7f0 f859 	bl	800089c <__aeabi_ddiv>
 80107ea:	ec53 2b19 	vmov	r2, r3, d9
 80107ee:	f7ef fd73 	bl	80002d8 <__aeabi_dsub>
 80107f2:	9d00      	ldr	r5, [sp, #0]
 80107f4:	ec41 0b19 	vmov	d9, r0, r1
 80107f8:	4649      	mov	r1, r9
 80107fa:	4640      	mov	r0, r8
 80107fc:	f7f0 f9d4 	bl	8000ba8 <__aeabi_d2iz>
 8010800:	4606      	mov	r6, r0
 8010802:	f7ef feb7 	bl	8000574 <__aeabi_i2d>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	4640      	mov	r0, r8
 801080c:	4649      	mov	r1, r9
 801080e:	f7ef fd63 	bl	80002d8 <__aeabi_dsub>
 8010812:	3630      	adds	r6, #48	; 0x30
 8010814:	f805 6b01 	strb.w	r6, [r5], #1
 8010818:	ec53 2b19 	vmov	r2, r3, d9
 801081c:	4680      	mov	r8, r0
 801081e:	4689      	mov	r9, r1
 8010820:	f7f0 f984 	bl	8000b2c <__aeabi_dcmplt>
 8010824:	2800      	cmp	r0, #0
 8010826:	d164      	bne.n	80108f2 <_dtoa_r+0x62a>
 8010828:	4642      	mov	r2, r8
 801082a:	464b      	mov	r3, r9
 801082c:	4937      	ldr	r1, [pc, #220]	; (801090c <_dtoa_r+0x644>)
 801082e:	2000      	movs	r0, #0
 8010830:	f7ef fd52 	bl	80002d8 <__aeabi_dsub>
 8010834:	ec53 2b19 	vmov	r2, r3, d9
 8010838:	f7f0 f978 	bl	8000b2c <__aeabi_dcmplt>
 801083c:	2800      	cmp	r0, #0
 801083e:	f040 80b6 	bne.w	80109ae <_dtoa_r+0x6e6>
 8010842:	9b02      	ldr	r3, [sp, #8]
 8010844:	429d      	cmp	r5, r3
 8010846:	f43f af7c 	beq.w	8010742 <_dtoa_r+0x47a>
 801084a:	4b31      	ldr	r3, [pc, #196]	; (8010910 <_dtoa_r+0x648>)
 801084c:	ec51 0b19 	vmov	r0, r1, d9
 8010850:	2200      	movs	r2, #0
 8010852:	f7ef fef9 	bl	8000648 <__aeabi_dmul>
 8010856:	4b2e      	ldr	r3, [pc, #184]	; (8010910 <_dtoa_r+0x648>)
 8010858:	ec41 0b19 	vmov	d9, r0, r1
 801085c:	2200      	movs	r2, #0
 801085e:	4640      	mov	r0, r8
 8010860:	4649      	mov	r1, r9
 8010862:	f7ef fef1 	bl	8000648 <__aeabi_dmul>
 8010866:	4680      	mov	r8, r0
 8010868:	4689      	mov	r9, r1
 801086a:	e7c5      	b.n	80107f8 <_dtoa_r+0x530>
 801086c:	ec51 0b17 	vmov	r0, r1, d7
 8010870:	f7ef feea 	bl	8000648 <__aeabi_dmul>
 8010874:	9b02      	ldr	r3, [sp, #8]
 8010876:	9d00      	ldr	r5, [sp, #0]
 8010878:	930f      	str	r3, [sp, #60]	; 0x3c
 801087a:	ec41 0b19 	vmov	d9, r0, r1
 801087e:	4649      	mov	r1, r9
 8010880:	4640      	mov	r0, r8
 8010882:	f7f0 f991 	bl	8000ba8 <__aeabi_d2iz>
 8010886:	4606      	mov	r6, r0
 8010888:	f7ef fe74 	bl	8000574 <__aeabi_i2d>
 801088c:	3630      	adds	r6, #48	; 0x30
 801088e:	4602      	mov	r2, r0
 8010890:	460b      	mov	r3, r1
 8010892:	4640      	mov	r0, r8
 8010894:	4649      	mov	r1, r9
 8010896:	f7ef fd1f 	bl	80002d8 <__aeabi_dsub>
 801089a:	f805 6b01 	strb.w	r6, [r5], #1
 801089e:	9b02      	ldr	r3, [sp, #8]
 80108a0:	429d      	cmp	r5, r3
 80108a2:	4680      	mov	r8, r0
 80108a4:	4689      	mov	r9, r1
 80108a6:	f04f 0200 	mov.w	r2, #0
 80108aa:	d124      	bne.n	80108f6 <_dtoa_r+0x62e>
 80108ac:	4b1b      	ldr	r3, [pc, #108]	; (801091c <_dtoa_r+0x654>)
 80108ae:	ec51 0b19 	vmov	r0, r1, d9
 80108b2:	f7ef fd13 	bl	80002dc <__adddf3>
 80108b6:	4602      	mov	r2, r0
 80108b8:	460b      	mov	r3, r1
 80108ba:	4640      	mov	r0, r8
 80108bc:	4649      	mov	r1, r9
 80108be:	f7f0 f953 	bl	8000b68 <__aeabi_dcmpgt>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d173      	bne.n	80109ae <_dtoa_r+0x6e6>
 80108c6:	ec53 2b19 	vmov	r2, r3, d9
 80108ca:	4914      	ldr	r1, [pc, #80]	; (801091c <_dtoa_r+0x654>)
 80108cc:	2000      	movs	r0, #0
 80108ce:	f7ef fd03 	bl	80002d8 <__aeabi_dsub>
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	4640      	mov	r0, r8
 80108d8:	4649      	mov	r1, r9
 80108da:	f7f0 f927 	bl	8000b2c <__aeabi_dcmplt>
 80108de:	2800      	cmp	r0, #0
 80108e0:	f43f af2f 	beq.w	8010742 <_dtoa_r+0x47a>
 80108e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80108e6:	1e6b      	subs	r3, r5, #1
 80108e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80108ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80108ee:	2b30      	cmp	r3, #48	; 0x30
 80108f0:	d0f8      	beq.n	80108e4 <_dtoa_r+0x61c>
 80108f2:	46bb      	mov	fp, r7
 80108f4:	e04a      	b.n	801098c <_dtoa_r+0x6c4>
 80108f6:	4b06      	ldr	r3, [pc, #24]	; (8010910 <_dtoa_r+0x648>)
 80108f8:	f7ef fea6 	bl	8000648 <__aeabi_dmul>
 80108fc:	4680      	mov	r8, r0
 80108fe:	4689      	mov	r9, r1
 8010900:	e7bd      	b.n	801087e <_dtoa_r+0x5b6>
 8010902:	bf00      	nop
 8010904:	08015830 	.word	0x08015830
 8010908:	08015808 	.word	0x08015808
 801090c:	3ff00000 	.word	0x3ff00000
 8010910:	40240000 	.word	0x40240000
 8010914:	401c0000 	.word	0x401c0000
 8010918:	40140000 	.word	0x40140000
 801091c:	3fe00000 	.word	0x3fe00000
 8010920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010924:	9d00      	ldr	r5, [sp, #0]
 8010926:	4642      	mov	r2, r8
 8010928:	464b      	mov	r3, r9
 801092a:	4630      	mov	r0, r6
 801092c:	4639      	mov	r1, r7
 801092e:	f7ef ffb5 	bl	800089c <__aeabi_ddiv>
 8010932:	f7f0 f939 	bl	8000ba8 <__aeabi_d2iz>
 8010936:	9001      	str	r0, [sp, #4]
 8010938:	f7ef fe1c 	bl	8000574 <__aeabi_i2d>
 801093c:	4642      	mov	r2, r8
 801093e:	464b      	mov	r3, r9
 8010940:	f7ef fe82 	bl	8000648 <__aeabi_dmul>
 8010944:	4602      	mov	r2, r0
 8010946:	460b      	mov	r3, r1
 8010948:	4630      	mov	r0, r6
 801094a:	4639      	mov	r1, r7
 801094c:	f7ef fcc4 	bl	80002d8 <__aeabi_dsub>
 8010950:	9e01      	ldr	r6, [sp, #4]
 8010952:	9f04      	ldr	r7, [sp, #16]
 8010954:	3630      	adds	r6, #48	; 0x30
 8010956:	f805 6b01 	strb.w	r6, [r5], #1
 801095a:	9e00      	ldr	r6, [sp, #0]
 801095c:	1bae      	subs	r6, r5, r6
 801095e:	42b7      	cmp	r7, r6
 8010960:	4602      	mov	r2, r0
 8010962:	460b      	mov	r3, r1
 8010964:	d134      	bne.n	80109d0 <_dtoa_r+0x708>
 8010966:	f7ef fcb9 	bl	80002dc <__adddf3>
 801096a:	4642      	mov	r2, r8
 801096c:	464b      	mov	r3, r9
 801096e:	4606      	mov	r6, r0
 8010970:	460f      	mov	r7, r1
 8010972:	f7f0 f8f9 	bl	8000b68 <__aeabi_dcmpgt>
 8010976:	b9c8      	cbnz	r0, 80109ac <_dtoa_r+0x6e4>
 8010978:	4642      	mov	r2, r8
 801097a:	464b      	mov	r3, r9
 801097c:	4630      	mov	r0, r6
 801097e:	4639      	mov	r1, r7
 8010980:	f7f0 f8ca 	bl	8000b18 <__aeabi_dcmpeq>
 8010984:	b110      	cbz	r0, 801098c <_dtoa_r+0x6c4>
 8010986:	9b01      	ldr	r3, [sp, #4]
 8010988:	07db      	lsls	r3, r3, #31
 801098a:	d40f      	bmi.n	80109ac <_dtoa_r+0x6e4>
 801098c:	4651      	mov	r1, sl
 801098e:	4620      	mov	r0, r4
 8010990:	f000 fbcc 	bl	801112c <_Bfree>
 8010994:	2300      	movs	r3, #0
 8010996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010998:	702b      	strb	r3, [r5, #0]
 801099a:	f10b 0301 	add.w	r3, fp, #1
 801099e:	6013      	str	r3, [r2, #0]
 80109a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f43f ace2 	beq.w	801036c <_dtoa_r+0xa4>
 80109a8:	601d      	str	r5, [r3, #0]
 80109aa:	e4df      	b.n	801036c <_dtoa_r+0xa4>
 80109ac:	465f      	mov	r7, fp
 80109ae:	462b      	mov	r3, r5
 80109b0:	461d      	mov	r5, r3
 80109b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109b6:	2a39      	cmp	r2, #57	; 0x39
 80109b8:	d106      	bne.n	80109c8 <_dtoa_r+0x700>
 80109ba:	9a00      	ldr	r2, [sp, #0]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d1f7      	bne.n	80109b0 <_dtoa_r+0x6e8>
 80109c0:	9900      	ldr	r1, [sp, #0]
 80109c2:	2230      	movs	r2, #48	; 0x30
 80109c4:	3701      	adds	r7, #1
 80109c6:	700a      	strb	r2, [r1, #0]
 80109c8:	781a      	ldrb	r2, [r3, #0]
 80109ca:	3201      	adds	r2, #1
 80109cc:	701a      	strb	r2, [r3, #0]
 80109ce:	e790      	b.n	80108f2 <_dtoa_r+0x62a>
 80109d0:	4ba3      	ldr	r3, [pc, #652]	; (8010c60 <_dtoa_r+0x998>)
 80109d2:	2200      	movs	r2, #0
 80109d4:	f7ef fe38 	bl	8000648 <__aeabi_dmul>
 80109d8:	2200      	movs	r2, #0
 80109da:	2300      	movs	r3, #0
 80109dc:	4606      	mov	r6, r0
 80109de:	460f      	mov	r7, r1
 80109e0:	f7f0 f89a 	bl	8000b18 <__aeabi_dcmpeq>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d09e      	beq.n	8010926 <_dtoa_r+0x65e>
 80109e8:	e7d0      	b.n	801098c <_dtoa_r+0x6c4>
 80109ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109ec:	2a00      	cmp	r2, #0
 80109ee:	f000 80ca 	beq.w	8010b86 <_dtoa_r+0x8be>
 80109f2:	9a07      	ldr	r2, [sp, #28]
 80109f4:	2a01      	cmp	r2, #1
 80109f6:	f300 80ad 	bgt.w	8010b54 <_dtoa_r+0x88c>
 80109fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109fc:	2a00      	cmp	r2, #0
 80109fe:	f000 80a5 	beq.w	8010b4c <_dtoa_r+0x884>
 8010a02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a06:	9e08      	ldr	r6, [sp, #32]
 8010a08:	9d05      	ldr	r5, [sp, #20]
 8010a0a:	9a05      	ldr	r2, [sp, #20]
 8010a0c:	441a      	add	r2, r3
 8010a0e:	9205      	str	r2, [sp, #20]
 8010a10:	9a06      	ldr	r2, [sp, #24]
 8010a12:	2101      	movs	r1, #1
 8010a14:	441a      	add	r2, r3
 8010a16:	4620      	mov	r0, r4
 8010a18:	9206      	str	r2, [sp, #24]
 8010a1a:	f000 fc87 	bl	801132c <__i2b>
 8010a1e:	4607      	mov	r7, r0
 8010a20:	b165      	cbz	r5, 8010a3c <_dtoa_r+0x774>
 8010a22:	9b06      	ldr	r3, [sp, #24]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	dd09      	ble.n	8010a3c <_dtoa_r+0x774>
 8010a28:	42ab      	cmp	r3, r5
 8010a2a:	9a05      	ldr	r2, [sp, #20]
 8010a2c:	bfa8      	it	ge
 8010a2e:	462b      	movge	r3, r5
 8010a30:	1ad2      	subs	r2, r2, r3
 8010a32:	9205      	str	r2, [sp, #20]
 8010a34:	9a06      	ldr	r2, [sp, #24]
 8010a36:	1aed      	subs	r5, r5, r3
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	9306      	str	r3, [sp, #24]
 8010a3c:	9b08      	ldr	r3, [sp, #32]
 8010a3e:	b1f3      	cbz	r3, 8010a7e <_dtoa_r+0x7b6>
 8010a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f000 80a3 	beq.w	8010b8e <_dtoa_r+0x8c6>
 8010a48:	2e00      	cmp	r6, #0
 8010a4a:	dd10      	ble.n	8010a6e <_dtoa_r+0x7a6>
 8010a4c:	4639      	mov	r1, r7
 8010a4e:	4632      	mov	r2, r6
 8010a50:	4620      	mov	r0, r4
 8010a52:	f000 fd2b 	bl	80114ac <__pow5mult>
 8010a56:	4652      	mov	r2, sl
 8010a58:	4601      	mov	r1, r0
 8010a5a:	4607      	mov	r7, r0
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f000 fc7b 	bl	8011358 <__multiply>
 8010a62:	4651      	mov	r1, sl
 8010a64:	4680      	mov	r8, r0
 8010a66:	4620      	mov	r0, r4
 8010a68:	f000 fb60 	bl	801112c <_Bfree>
 8010a6c:	46c2      	mov	sl, r8
 8010a6e:	9b08      	ldr	r3, [sp, #32]
 8010a70:	1b9a      	subs	r2, r3, r6
 8010a72:	d004      	beq.n	8010a7e <_dtoa_r+0x7b6>
 8010a74:	4651      	mov	r1, sl
 8010a76:	4620      	mov	r0, r4
 8010a78:	f000 fd18 	bl	80114ac <__pow5mult>
 8010a7c:	4682      	mov	sl, r0
 8010a7e:	2101      	movs	r1, #1
 8010a80:	4620      	mov	r0, r4
 8010a82:	f000 fc53 	bl	801132c <__i2b>
 8010a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	f340 8081 	ble.w	8010b92 <_dtoa_r+0x8ca>
 8010a90:	461a      	mov	r2, r3
 8010a92:	4601      	mov	r1, r0
 8010a94:	4620      	mov	r0, r4
 8010a96:	f000 fd09 	bl	80114ac <__pow5mult>
 8010a9a:	9b07      	ldr	r3, [sp, #28]
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	dd7a      	ble.n	8010b98 <_dtoa_r+0x8d0>
 8010aa2:	f04f 0800 	mov.w	r8, #0
 8010aa6:	6933      	ldr	r3, [r6, #16]
 8010aa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010aac:	6918      	ldr	r0, [r3, #16]
 8010aae:	f000 fbef 	bl	8011290 <__hi0bits>
 8010ab2:	f1c0 0020 	rsb	r0, r0, #32
 8010ab6:	9b06      	ldr	r3, [sp, #24]
 8010ab8:	4418      	add	r0, r3
 8010aba:	f010 001f 	ands.w	r0, r0, #31
 8010abe:	f000 8094 	beq.w	8010bea <_dtoa_r+0x922>
 8010ac2:	f1c0 0320 	rsb	r3, r0, #32
 8010ac6:	2b04      	cmp	r3, #4
 8010ac8:	f340 8085 	ble.w	8010bd6 <_dtoa_r+0x90e>
 8010acc:	9b05      	ldr	r3, [sp, #20]
 8010ace:	f1c0 001c 	rsb	r0, r0, #28
 8010ad2:	4403      	add	r3, r0
 8010ad4:	9305      	str	r3, [sp, #20]
 8010ad6:	9b06      	ldr	r3, [sp, #24]
 8010ad8:	4403      	add	r3, r0
 8010ada:	4405      	add	r5, r0
 8010adc:	9306      	str	r3, [sp, #24]
 8010ade:	9b05      	ldr	r3, [sp, #20]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	dd05      	ble.n	8010af0 <_dtoa_r+0x828>
 8010ae4:	4651      	mov	r1, sl
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f000 fd39 	bl	8011560 <__lshift>
 8010aee:	4682      	mov	sl, r0
 8010af0:	9b06      	ldr	r3, [sp, #24]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	dd05      	ble.n	8010b02 <_dtoa_r+0x83a>
 8010af6:	4631      	mov	r1, r6
 8010af8:	461a      	mov	r2, r3
 8010afa:	4620      	mov	r0, r4
 8010afc:	f000 fd30 	bl	8011560 <__lshift>
 8010b00:	4606      	mov	r6, r0
 8010b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d072      	beq.n	8010bee <_dtoa_r+0x926>
 8010b08:	4631      	mov	r1, r6
 8010b0a:	4650      	mov	r0, sl
 8010b0c:	f000 fd94 	bl	8011638 <__mcmp>
 8010b10:	2800      	cmp	r0, #0
 8010b12:	da6c      	bge.n	8010bee <_dtoa_r+0x926>
 8010b14:	2300      	movs	r3, #0
 8010b16:	4651      	mov	r1, sl
 8010b18:	220a      	movs	r2, #10
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f000 fb28 	bl	8011170 <__multadd>
 8010b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b26:	4682      	mov	sl, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	f000 81b0 	beq.w	8010e8e <_dtoa_r+0xbc6>
 8010b2e:	2300      	movs	r3, #0
 8010b30:	4639      	mov	r1, r7
 8010b32:	220a      	movs	r2, #10
 8010b34:	4620      	mov	r0, r4
 8010b36:	f000 fb1b 	bl	8011170 <__multadd>
 8010b3a:	9b01      	ldr	r3, [sp, #4]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	4607      	mov	r7, r0
 8010b40:	f300 8096 	bgt.w	8010c70 <_dtoa_r+0x9a8>
 8010b44:	9b07      	ldr	r3, [sp, #28]
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	dc59      	bgt.n	8010bfe <_dtoa_r+0x936>
 8010b4a:	e091      	b.n	8010c70 <_dtoa_r+0x9a8>
 8010b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010b52:	e758      	b.n	8010a06 <_dtoa_r+0x73e>
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	1e5e      	subs	r6, r3, #1
 8010b58:	9b08      	ldr	r3, [sp, #32]
 8010b5a:	42b3      	cmp	r3, r6
 8010b5c:	bfbf      	itttt	lt
 8010b5e:	9b08      	ldrlt	r3, [sp, #32]
 8010b60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010b62:	9608      	strlt	r6, [sp, #32]
 8010b64:	1af3      	sublt	r3, r6, r3
 8010b66:	bfb4      	ite	lt
 8010b68:	18d2      	addlt	r2, r2, r3
 8010b6a:	1b9e      	subge	r6, r3, r6
 8010b6c:	9b04      	ldr	r3, [sp, #16]
 8010b6e:	bfbc      	itt	lt
 8010b70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010b72:	2600      	movlt	r6, #0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	bfb7      	itett	lt
 8010b78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010b7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010b80:	1a9d      	sublt	r5, r3, r2
 8010b82:	2300      	movlt	r3, #0
 8010b84:	e741      	b.n	8010a0a <_dtoa_r+0x742>
 8010b86:	9e08      	ldr	r6, [sp, #32]
 8010b88:	9d05      	ldr	r5, [sp, #20]
 8010b8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010b8c:	e748      	b.n	8010a20 <_dtoa_r+0x758>
 8010b8e:	9a08      	ldr	r2, [sp, #32]
 8010b90:	e770      	b.n	8010a74 <_dtoa_r+0x7ac>
 8010b92:	9b07      	ldr	r3, [sp, #28]
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	dc19      	bgt.n	8010bcc <_dtoa_r+0x904>
 8010b98:	9b02      	ldr	r3, [sp, #8]
 8010b9a:	b9bb      	cbnz	r3, 8010bcc <_dtoa_r+0x904>
 8010b9c:	9b03      	ldr	r3, [sp, #12]
 8010b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ba2:	b99b      	cbnz	r3, 8010bcc <_dtoa_r+0x904>
 8010ba4:	9b03      	ldr	r3, [sp, #12]
 8010ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010baa:	0d1b      	lsrs	r3, r3, #20
 8010bac:	051b      	lsls	r3, r3, #20
 8010bae:	b183      	cbz	r3, 8010bd2 <_dtoa_r+0x90a>
 8010bb0:	9b05      	ldr	r3, [sp, #20]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	9305      	str	r3, [sp, #20]
 8010bb6:	9b06      	ldr	r3, [sp, #24]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	9306      	str	r3, [sp, #24]
 8010bbc:	f04f 0801 	mov.w	r8, #1
 8010bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f47f af6f 	bne.w	8010aa6 <_dtoa_r+0x7de>
 8010bc8:	2001      	movs	r0, #1
 8010bca:	e774      	b.n	8010ab6 <_dtoa_r+0x7ee>
 8010bcc:	f04f 0800 	mov.w	r8, #0
 8010bd0:	e7f6      	b.n	8010bc0 <_dtoa_r+0x8f8>
 8010bd2:	4698      	mov	r8, r3
 8010bd4:	e7f4      	b.n	8010bc0 <_dtoa_r+0x8f8>
 8010bd6:	d082      	beq.n	8010ade <_dtoa_r+0x816>
 8010bd8:	9a05      	ldr	r2, [sp, #20]
 8010bda:	331c      	adds	r3, #28
 8010bdc:	441a      	add	r2, r3
 8010bde:	9205      	str	r2, [sp, #20]
 8010be0:	9a06      	ldr	r2, [sp, #24]
 8010be2:	441a      	add	r2, r3
 8010be4:	441d      	add	r5, r3
 8010be6:	9206      	str	r2, [sp, #24]
 8010be8:	e779      	b.n	8010ade <_dtoa_r+0x816>
 8010bea:	4603      	mov	r3, r0
 8010bec:	e7f4      	b.n	8010bd8 <_dtoa_r+0x910>
 8010bee:	9b04      	ldr	r3, [sp, #16]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	dc37      	bgt.n	8010c64 <_dtoa_r+0x99c>
 8010bf4:	9b07      	ldr	r3, [sp, #28]
 8010bf6:	2b02      	cmp	r3, #2
 8010bf8:	dd34      	ble.n	8010c64 <_dtoa_r+0x99c>
 8010bfa:	9b04      	ldr	r3, [sp, #16]
 8010bfc:	9301      	str	r3, [sp, #4]
 8010bfe:	9b01      	ldr	r3, [sp, #4]
 8010c00:	b963      	cbnz	r3, 8010c1c <_dtoa_r+0x954>
 8010c02:	4631      	mov	r1, r6
 8010c04:	2205      	movs	r2, #5
 8010c06:	4620      	mov	r0, r4
 8010c08:	f000 fab2 	bl	8011170 <__multadd>
 8010c0c:	4601      	mov	r1, r0
 8010c0e:	4606      	mov	r6, r0
 8010c10:	4650      	mov	r0, sl
 8010c12:	f000 fd11 	bl	8011638 <__mcmp>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	f73f adbb 	bgt.w	8010792 <_dtoa_r+0x4ca>
 8010c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c1e:	9d00      	ldr	r5, [sp, #0]
 8010c20:	ea6f 0b03 	mvn.w	fp, r3
 8010c24:	f04f 0800 	mov.w	r8, #0
 8010c28:	4631      	mov	r1, r6
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f000 fa7e 	bl	801112c <_Bfree>
 8010c30:	2f00      	cmp	r7, #0
 8010c32:	f43f aeab 	beq.w	801098c <_dtoa_r+0x6c4>
 8010c36:	f1b8 0f00 	cmp.w	r8, #0
 8010c3a:	d005      	beq.n	8010c48 <_dtoa_r+0x980>
 8010c3c:	45b8      	cmp	r8, r7
 8010c3e:	d003      	beq.n	8010c48 <_dtoa_r+0x980>
 8010c40:	4641      	mov	r1, r8
 8010c42:	4620      	mov	r0, r4
 8010c44:	f000 fa72 	bl	801112c <_Bfree>
 8010c48:	4639      	mov	r1, r7
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f000 fa6e 	bl	801112c <_Bfree>
 8010c50:	e69c      	b.n	801098c <_dtoa_r+0x6c4>
 8010c52:	2600      	movs	r6, #0
 8010c54:	4637      	mov	r7, r6
 8010c56:	e7e1      	b.n	8010c1c <_dtoa_r+0x954>
 8010c58:	46bb      	mov	fp, r7
 8010c5a:	4637      	mov	r7, r6
 8010c5c:	e599      	b.n	8010792 <_dtoa_r+0x4ca>
 8010c5e:	bf00      	nop
 8010c60:	40240000 	.word	0x40240000
 8010c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	f000 80c8 	beq.w	8010dfc <_dtoa_r+0xb34>
 8010c6c:	9b04      	ldr	r3, [sp, #16]
 8010c6e:	9301      	str	r3, [sp, #4]
 8010c70:	2d00      	cmp	r5, #0
 8010c72:	dd05      	ble.n	8010c80 <_dtoa_r+0x9b8>
 8010c74:	4639      	mov	r1, r7
 8010c76:	462a      	mov	r2, r5
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f000 fc71 	bl	8011560 <__lshift>
 8010c7e:	4607      	mov	r7, r0
 8010c80:	f1b8 0f00 	cmp.w	r8, #0
 8010c84:	d05b      	beq.n	8010d3e <_dtoa_r+0xa76>
 8010c86:	6879      	ldr	r1, [r7, #4]
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f000 fa0f 	bl	80110ac <_Balloc>
 8010c8e:	4605      	mov	r5, r0
 8010c90:	b928      	cbnz	r0, 8010c9e <_dtoa_r+0x9d6>
 8010c92:	4b83      	ldr	r3, [pc, #524]	; (8010ea0 <_dtoa_r+0xbd8>)
 8010c94:	4602      	mov	r2, r0
 8010c96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010c9a:	f7ff bb2e 	b.w	80102fa <_dtoa_r+0x32>
 8010c9e:	693a      	ldr	r2, [r7, #16]
 8010ca0:	3202      	adds	r2, #2
 8010ca2:	0092      	lsls	r2, r2, #2
 8010ca4:	f107 010c 	add.w	r1, r7, #12
 8010ca8:	300c      	adds	r0, #12
 8010caa:	f7ff fa70 	bl	801018e <memcpy>
 8010cae:	2201      	movs	r2, #1
 8010cb0:	4629      	mov	r1, r5
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f000 fc54 	bl	8011560 <__lshift>
 8010cb8:	9b00      	ldr	r3, [sp, #0]
 8010cba:	3301      	adds	r3, #1
 8010cbc:	9304      	str	r3, [sp, #16]
 8010cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	9308      	str	r3, [sp, #32]
 8010cc6:	9b02      	ldr	r3, [sp, #8]
 8010cc8:	f003 0301 	and.w	r3, r3, #1
 8010ccc:	46b8      	mov	r8, r7
 8010cce:	9306      	str	r3, [sp, #24]
 8010cd0:	4607      	mov	r7, r0
 8010cd2:	9b04      	ldr	r3, [sp, #16]
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	3b01      	subs	r3, #1
 8010cd8:	4650      	mov	r0, sl
 8010cda:	9301      	str	r3, [sp, #4]
 8010cdc:	f7ff fa6c 	bl	80101b8 <quorem>
 8010ce0:	4641      	mov	r1, r8
 8010ce2:	9002      	str	r0, [sp, #8]
 8010ce4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010ce8:	4650      	mov	r0, sl
 8010cea:	f000 fca5 	bl	8011638 <__mcmp>
 8010cee:	463a      	mov	r2, r7
 8010cf0:	9005      	str	r0, [sp, #20]
 8010cf2:	4631      	mov	r1, r6
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f000 fcbb 	bl	8011670 <__mdiff>
 8010cfa:	68c2      	ldr	r2, [r0, #12]
 8010cfc:	4605      	mov	r5, r0
 8010cfe:	bb02      	cbnz	r2, 8010d42 <_dtoa_r+0xa7a>
 8010d00:	4601      	mov	r1, r0
 8010d02:	4650      	mov	r0, sl
 8010d04:	f000 fc98 	bl	8011638 <__mcmp>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	4629      	mov	r1, r5
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d10:	f000 fa0c 	bl	801112c <_Bfree>
 8010d14:	9b07      	ldr	r3, [sp, #28]
 8010d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d18:	9d04      	ldr	r5, [sp, #16]
 8010d1a:	ea43 0102 	orr.w	r1, r3, r2
 8010d1e:	9b06      	ldr	r3, [sp, #24]
 8010d20:	4319      	orrs	r1, r3
 8010d22:	d110      	bne.n	8010d46 <_dtoa_r+0xa7e>
 8010d24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010d28:	d029      	beq.n	8010d7e <_dtoa_r+0xab6>
 8010d2a:	9b05      	ldr	r3, [sp, #20]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	dd02      	ble.n	8010d36 <_dtoa_r+0xa6e>
 8010d30:	9b02      	ldr	r3, [sp, #8]
 8010d32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010d36:	9b01      	ldr	r3, [sp, #4]
 8010d38:	f883 9000 	strb.w	r9, [r3]
 8010d3c:	e774      	b.n	8010c28 <_dtoa_r+0x960>
 8010d3e:	4638      	mov	r0, r7
 8010d40:	e7ba      	b.n	8010cb8 <_dtoa_r+0x9f0>
 8010d42:	2201      	movs	r2, #1
 8010d44:	e7e1      	b.n	8010d0a <_dtoa_r+0xa42>
 8010d46:	9b05      	ldr	r3, [sp, #20]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	db04      	blt.n	8010d56 <_dtoa_r+0xa8e>
 8010d4c:	9907      	ldr	r1, [sp, #28]
 8010d4e:	430b      	orrs	r3, r1
 8010d50:	9906      	ldr	r1, [sp, #24]
 8010d52:	430b      	orrs	r3, r1
 8010d54:	d120      	bne.n	8010d98 <_dtoa_r+0xad0>
 8010d56:	2a00      	cmp	r2, #0
 8010d58:	dded      	ble.n	8010d36 <_dtoa_r+0xa6e>
 8010d5a:	4651      	mov	r1, sl
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f000 fbfe 	bl	8011560 <__lshift>
 8010d64:	4631      	mov	r1, r6
 8010d66:	4682      	mov	sl, r0
 8010d68:	f000 fc66 	bl	8011638 <__mcmp>
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	dc03      	bgt.n	8010d78 <_dtoa_r+0xab0>
 8010d70:	d1e1      	bne.n	8010d36 <_dtoa_r+0xa6e>
 8010d72:	f019 0f01 	tst.w	r9, #1
 8010d76:	d0de      	beq.n	8010d36 <_dtoa_r+0xa6e>
 8010d78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010d7c:	d1d8      	bne.n	8010d30 <_dtoa_r+0xa68>
 8010d7e:	9a01      	ldr	r2, [sp, #4]
 8010d80:	2339      	movs	r3, #57	; 0x39
 8010d82:	7013      	strb	r3, [r2, #0]
 8010d84:	462b      	mov	r3, r5
 8010d86:	461d      	mov	r5, r3
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010d8e:	2a39      	cmp	r2, #57	; 0x39
 8010d90:	d06c      	beq.n	8010e6c <_dtoa_r+0xba4>
 8010d92:	3201      	adds	r2, #1
 8010d94:	701a      	strb	r2, [r3, #0]
 8010d96:	e747      	b.n	8010c28 <_dtoa_r+0x960>
 8010d98:	2a00      	cmp	r2, #0
 8010d9a:	dd07      	ble.n	8010dac <_dtoa_r+0xae4>
 8010d9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010da0:	d0ed      	beq.n	8010d7e <_dtoa_r+0xab6>
 8010da2:	9a01      	ldr	r2, [sp, #4]
 8010da4:	f109 0301 	add.w	r3, r9, #1
 8010da8:	7013      	strb	r3, [r2, #0]
 8010daa:	e73d      	b.n	8010c28 <_dtoa_r+0x960>
 8010dac:	9b04      	ldr	r3, [sp, #16]
 8010dae:	9a08      	ldr	r2, [sp, #32]
 8010db0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d043      	beq.n	8010e40 <_dtoa_r+0xb78>
 8010db8:	4651      	mov	r1, sl
 8010dba:	2300      	movs	r3, #0
 8010dbc:	220a      	movs	r2, #10
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f000 f9d6 	bl	8011170 <__multadd>
 8010dc4:	45b8      	cmp	r8, r7
 8010dc6:	4682      	mov	sl, r0
 8010dc8:	f04f 0300 	mov.w	r3, #0
 8010dcc:	f04f 020a 	mov.w	r2, #10
 8010dd0:	4641      	mov	r1, r8
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	d107      	bne.n	8010de6 <_dtoa_r+0xb1e>
 8010dd6:	f000 f9cb 	bl	8011170 <__multadd>
 8010dda:	4680      	mov	r8, r0
 8010ddc:	4607      	mov	r7, r0
 8010dde:	9b04      	ldr	r3, [sp, #16]
 8010de0:	3301      	adds	r3, #1
 8010de2:	9304      	str	r3, [sp, #16]
 8010de4:	e775      	b.n	8010cd2 <_dtoa_r+0xa0a>
 8010de6:	f000 f9c3 	bl	8011170 <__multadd>
 8010dea:	4639      	mov	r1, r7
 8010dec:	4680      	mov	r8, r0
 8010dee:	2300      	movs	r3, #0
 8010df0:	220a      	movs	r2, #10
 8010df2:	4620      	mov	r0, r4
 8010df4:	f000 f9bc 	bl	8011170 <__multadd>
 8010df8:	4607      	mov	r7, r0
 8010dfa:	e7f0      	b.n	8010dde <_dtoa_r+0xb16>
 8010dfc:	9b04      	ldr	r3, [sp, #16]
 8010dfe:	9301      	str	r3, [sp, #4]
 8010e00:	9d00      	ldr	r5, [sp, #0]
 8010e02:	4631      	mov	r1, r6
 8010e04:	4650      	mov	r0, sl
 8010e06:	f7ff f9d7 	bl	80101b8 <quorem>
 8010e0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010e0e:	9b00      	ldr	r3, [sp, #0]
 8010e10:	f805 9b01 	strb.w	r9, [r5], #1
 8010e14:	1aea      	subs	r2, r5, r3
 8010e16:	9b01      	ldr	r3, [sp, #4]
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	dd07      	ble.n	8010e2c <_dtoa_r+0xb64>
 8010e1c:	4651      	mov	r1, sl
 8010e1e:	2300      	movs	r3, #0
 8010e20:	220a      	movs	r2, #10
 8010e22:	4620      	mov	r0, r4
 8010e24:	f000 f9a4 	bl	8011170 <__multadd>
 8010e28:	4682      	mov	sl, r0
 8010e2a:	e7ea      	b.n	8010e02 <_dtoa_r+0xb3a>
 8010e2c:	9b01      	ldr	r3, [sp, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	bfc8      	it	gt
 8010e32:	461d      	movgt	r5, r3
 8010e34:	9b00      	ldr	r3, [sp, #0]
 8010e36:	bfd8      	it	le
 8010e38:	2501      	movle	r5, #1
 8010e3a:	441d      	add	r5, r3
 8010e3c:	f04f 0800 	mov.w	r8, #0
 8010e40:	4651      	mov	r1, sl
 8010e42:	2201      	movs	r2, #1
 8010e44:	4620      	mov	r0, r4
 8010e46:	f000 fb8b 	bl	8011560 <__lshift>
 8010e4a:	4631      	mov	r1, r6
 8010e4c:	4682      	mov	sl, r0
 8010e4e:	f000 fbf3 	bl	8011638 <__mcmp>
 8010e52:	2800      	cmp	r0, #0
 8010e54:	dc96      	bgt.n	8010d84 <_dtoa_r+0xabc>
 8010e56:	d102      	bne.n	8010e5e <_dtoa_r+0xb96>
 8010e58:	f019 0f01 	tst.w	r9, #1
 8010e5c:	d192      	bne.n	8010d84 <_dtoa_r+0xabc>
 8010e5e:	462b      	mov	r3, r5
 8010e60:	461d      	mov	r5, r3
 8010e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e66:	2a30      	cmp	r2, #48	; 0x30
 8010e68:	d0fa      	beq.n	8010e60 <_dtoa_r+0xb98>
 8010e6a:	e6dd      	b.n	8010c28 <_dtoa_r+0x960>
 8010e6c:	9a00      	ldr	r2, [sp, #0]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d189      	bne.n	8010d86 <_dtoa_r+0xabe>
 8010e72:	f10b 0b01 	add.w	fp, fp, #1
 8010e76:	2331      	movs	r3, #49	; 0x31
 8010e78:	e796      	b.n	8010da8 <_dtoa_r+0xae0>
 8010e7a:	4b0a      	ldr	r3, [pc, #40]	; (8010ea4 <_dtoa_r+0xbdc>)
 8010e7c:	f7ff ba99 	b.w	80103b2 <_dtoa_r+0xea>
 8010e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	f47f aa6d 	bne.w	8010362 <_dtoa_r+0x9a>
 8010e88:	4b07      	ldr	r3, [pc, #28]	; (8010ea8 <_dtoa_r+0xbe0>)
 8010e8a:	f7ff ba92 	b.w	80103b2 <_dtoa_r+0xea>
 8010e8e:	9b01      	ldr	r3, [sp, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	dcb5      	bgt.n	8010e00 <_dtoa_r+0xb38>
 8010e94:	9b07      	ldr	r3, [sp, #28]
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	f73f aeb1 	bgt.w	8010bfe <_dtoa_r+0x936>
 8010e9c:	e7b0      	b.n	8010e00 <_dtoa_r+0xb38>
 8010e9e:	bf00      	nop
 8010ea0:	0801579b 	.word	0x0801579b
 8010ea4:	08015a80 	.word	0x08015a80
 8010ea8:	0801571f 	.word	0x0801571f

08010eac <_free_r>:
 8010eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eae:	2900      	cmp	r1, #0
 8010eb0:	d044      	beq.n	8010f3c <_free_r+0x90>
 8010eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010eb6:	9001      	str	r0, [sp, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	f1a1 0404 	sub.w	r4, r1, #4
 8010ebe:	bfb8      	it	lt
 8010ec0:	18e4      	addlt	r4, r4, r3
 8010ec2:	f000 f8e7 	bl	8011094 <__malloc_lock>
 8010ec6:	4a1e      	ldr	r2, [pc, #120]	; (8010f40 <_free_r+0x94>)
 8010ec8:	9801      	ldr	r0, [sp, #4]
 8010eca:	6813      	ldr	r3, [r2, #0]
 8010ecc:	b933      	cbnz	r3, 8010edc <_free_r+0x30>
 8010ece:	6063      	str	r3, [r4, #4]
 8010ed0:	6014      	str	r4, [r2, #0]
 8010ed2:	b003      	add	sp, #12
 8010ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ed8:	f000 b8e2 	b.w	80110a0 <__malloc_unlock>
 8010edc:	42a3      	cmp	r3, r4
 8010ede:	d908      	bls.n	8010ef2 <_free_r+0x46>
 8010ee0:	6825      	ldr	r5, [r4, #0]
 8010ee2:	1961      	adds	r1, r4, r5
 8010ee4:	428b      	cmp	r3, r1
 8010ee6:	bf01      	itttt	eq
 8010ee8:	6819      	ldreq	r1, [r3, #0]
 8010eea:	685b      	ldreq	r3, [r3, #4]
 8010eec:	1949      	addeq	r1, r1, r5
 8010eee:	6021      	streq	r1, [r4, #0]
 8010ef0:	e7ed      	b.n	8010ece <_free_r+0x22>
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	b10b      	cbz	r3, 8010efc <_free_r+0x50>
 8010ef8:	42a3      	cmp	r3, r4
 8010efa:	d9fa      	bls.n	8010ef2 <_free_r+0x46>
 8010efc:	6811      	ldr	r1, [r2, #0]
 8010efe:	1855      	adds	r5, r2, r1
 8010f00:	42a5      	cmp	r5, r4
 8010f02:	d10b      	bne.n	8010f1c <_free_r+0x70>
 8010f04:	6824      	ldr	r4, [r4, #0]
 8010f06:	4421      	add	r1, r4
 8010f08:	1854      	adds	r4, r2, r1
 8010f0a:	42a3      	cmp	r3, r4
 8010f0c:	6011      	str	r1, [r2, #0]
 8010f0e:	d1e0      	bne.n	8010ed2 <_free_r+0x26>
 8010f10:	681c      	ldr	r4, [r3, #0]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	6053      	str	r3, [r2, #4]
 8010f16:	440c      	add	r4, r1
 8010f18:	6014      	str	r4, [r2, #0]
 8010f1a:	e7da      	b.n	8010ed2 <_free_r+0x26>
 8010f1c:	d902      	bls.n	8010f24 <_free_r+0x78>
 8010f1e:	230c      	movs	r3, #12
 8010f20:	6003      	str	r3, [r0, #0]
 8010f22:	e7d6      	b.n	8010ed2 <_free_r+0x26>
 8010f24:	6825      	ldr	r5, [r4, #0]
 8010f26:	1961      	adds	r1, r4, r5
 8010f28:	428b      	cmp	r3, r1
 8010f2a:	bf04      	itt	eq
 8010f2c:	6819      	ldreq	r1, [r3, #0]
 8010f2e:	685b      	ldreq	r3, [r3, #4]
 8010f30:	6063      	str	r3, [r4, #4]
 8010f32:	bf04      	itt	eq
 8010f34:	1949      	addeq	r1, r1, r5
 8010f36:	6021      	streq	r1, [r4, #0]
 8010f38:	6054      	str	r4, [r2, #4]
 8010f3a:	e7ca      	b.n	8010ed2 <_free_r+0x26>
 8010f3c:	b003      	add	sp, #12
 8010f3e:	bd30      	pop	{r4, r5, pc}
 8010f40:	20004adc 	.word	0x20004adc

08010f44 <malloc>:
 8010f44:	4b02      	ldr	r3, [pc, #8]	; (8010f50 <malloc+0xc>)
 8010f46:	4601      	mov	r1, r0
 8010f48:	6818      	ldr	r0, [r3, #0]
 8010f4a:	f000 b823 	b.w	8010f94 <_malloc_r>
 8010f4e:	bf00      	nop
 8010f50:	20000070 	.word	0x20000070

08010f54 <sbrk_aligned>:
 8010f54:	b570      	push	{r4, r5, r6, lr}
 8010f56:	4e0e      	ldr	r6, [pc, #56]	; (8010f90 <sbrk_aligned+0x3c>)
 8010f58:	460c      	mov	r4, r1
 8010f5a:	6831      	ldr	r1, [r6, #0]
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	b911      	cbnz	r1, 8010f66 <sbrk_aligned+0x12>
 8010f60:	f002 f99c 	bl	801329c <_sbrk_r>
 8010f64:	6030      	str	r0, [r6, #0]
 8010f66:	4621      	mov	r1, r4
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f002 f997 	bl	801329c <_sbrk_r>
 8010f6e:	1c43      	adds	r3, r0, #1
 8010f70:	d00a      	beq.n	8010f88 <sbrk_aligned+0x34>
 8010f72:	1cc4      	adds	r4, r0, #3
 8010f74:	f024 0403 	bic.w	r4, r4, #3
 8010f78:	42a0      	cmp	r0, r4
 8010f7a:	d007      	beq.n	8010f8c <sbrk_aligned+0x38>
 8010f7c:	1a21      	subs	r1, r4, r0
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f002 f98c 	bl	801329c <_sbrk_r>
 8010f84:	3001      	adds	r0, #1
 8010f86:	d101      	bne.n	8010f8c <sbrk_aligned+0x38>
 8010f88:	f04f 34ff 	mov.w	r4, #4294967295
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	bd70      	pop	{r4, r5, r6, pc}
 8010f90:	20004ae0 	.word	0x20004ae0

08010f94 <_malloc_r>:
 8010f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f98:	1ccd      	adds	r5, r1, #3
 8010f9a:	f025 0503 	bic.w	r5, r5, #3
 8010f9e:	3508      	adds	r5, #8
 8010fa0:	2d0c      	cmp	r5, #12
 8010fa2:	bf38      	it	cc
 8010fa4:	250c      	movcc	r5, #12
 8010fa6:	2d00      	cmp	r5, #0
 8010fa8:	4607      	mov	r7, r0
 8010faa:	db01      	blt.n	8010fb0 <_malloc_r+0x1c>
 8010fac:	42a9      	cmp	r1, r5
 8010fae:	d905      	bls.n	8010fbc <_malloc_r+0x28>
 8010fb0:	230c      	movs	r3, #12
 8010fb2:	603b      	str	r3, [r7, #0]
 8010fb4:	2600      	movs	r6, #0
 8010fb6:	4630      	mov	r0, r6
 8010fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011090 <_malloc_r+0xfc>
 8010fc0:	f000 f868 	bl	8011094 <__malloc_lock>
 8010fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8010fc8:	461c      	mov	r4, r3
 8010fca:	bb5c      	cbnz	r4, 8011024 <_malloc_r+0x90>
 8010fcc:	4629      	mov	r1, r5
 8010fce:	4638      	mov	r0, r7
 8010fd0:	f7ff ffc0 	bl	8010f54 <sbrk_aligned>
 8010fd4:	1c43      	adds	r3, r0, #1
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	d155      	bne.n	8011086 <_malloc_r+0xf2>
 8010fda:	f8d8 4000 	ldr.w	r4, [r8]
 8010fde:	4626      	mov	r6, r4
 8010fe0:	2e00      	cmp	r6, #0
 8010fe2:	d145      	bne.n	8011070 <_malloc_r+0xdc>
 8010fe4:	2c00      	cmp	r4, #0
 8010fe6:	d048      	beq.n	801107a <_malloc_r+0xe6>
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	4631      	mov	r1, r6
 8010fec:	4638      	mov	r0, r7
 8010fee:	eb04 0903 	add.w	r9, r4, r3
 8010ff2:	f002 f953 	bl	801329c <_sbrk_r>
 8010ff6:	4581      	cmp	r9, r0
 8010ff8:	d13f      	bne.n	801107a <_malloc_r+0xe6>
 8010ffa:	6821      	ldr	r1, [r4, #0]
 8010ffc:	1a6d      	subs	r5, r5, r1
 8010ffe:	4629      	mov	r1, r5
 8011000:	4638      	mov	r0, r7
 8011002:	f7ff ffa7 	bl	8010f54 <sbrk_aligned>
 8011006:	3001      	adds	r0, #1
 8011008:	d037      	beq.n	801107a <_malloc_r+0xe6>
 801100a:	6823      	ldr	r3, [r4, #0]
 801100c:	442b      	add	r3, r5
 801100e:	6023      	str	r3, [r4, #0]
 8011010:	f8d8 3000 	ldr.w	r3, [r8]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d038      	beq.n	801108a <_malloc_r+0xf6>
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	42a2      	cmp	r2, r4
 801101c:	d12b      	bne.n	8011076 <_malloc_r+0xe2>
 801101e:	2200      	movs	r2, #0
 8011020:	605a      	str	r2, [r3, #4]
 8011022:	e00f      	b.n	8011044 <_malloc_r+0xb0>
 8011024:	6822      	ldr	r2, [r4, #0]
 8011026:	1b52      	subs	r2, r2, r5
 8011028:	d41f      	bmi.n	801106a <_malloc_r+0xd6>
 801102a:	2a0b      	cmp	r2, #11
 801102c:	d917      	bls.n	801105e <_malloc_r+0xca>
 801102e:	1961      	adds	r1, r4, r5
 8011030:	42a3      	cmp	r3, r4
 8011032:	6025      	str	r5, [r4, #0]
 8011034:	bf18      	it	ne
 8011036:	6059      	strne	r1, [r3, #4]
 8011038:	6863      	ldr	r3, [r4, #4]
 801103a:	bf08      	it	eq
 801103c:	f8c8 1000 	streq.w	r1, [r8]
 8011040:	5162      	str	r2, [r4, r5]
 8011042:	604b      	str	r3, [r1, #4]
 8011044:	4638      	mov	r0, r7
 8011046:	f104 060b 	add.w	r6, r4, #11
 801104a:	f000 f829 	bl	80110a0 <__malloc_unlock>
 801104e:	f026 0607 	bic.w	r6, r6, #7
 8011052:	1d23      	adds	r3, r4, #4
 8011054:	1af2      	subs	r2, r6, r3
 8011056:	d0ae      	beq.n	8010fb6 <_malloc_r+0x22>
 8011058:	1b9b      	subs	r3, r3, r6
 801105a:	50a3      	str	r3, [r4, r2]
 801105c:	e7ab      	b.n	8010fb6 <_malloc_r+0x22>
 801105e:	42a3      	cmp	r3, r4
 8011060:	6862      	ldr	r2, [r4, #4]
 8011062:	d1dd      	bne.n	8011020 <_malloc_r+0x8c>
 8011064:	f8c8 2000 	str.w	r2, [r8]
 8011068:	e7ec      	b.n	8011044 <_malloc_r+0xb0>
 801106a:	4623      	mov	r3, r4
 801106c:	6864      	ldr	r4, [r4, #4]
 801106e:	e7ac      	b.n	8010fca <_malloc_r+0x36>
 8011070:	4634      	mov	r4, r6
 8011072:	6876      	ldr	r6, [r6, #4]
 8011074:	e7b4      	b.n	8010fe0 <_malloc_r+0x4c>
 8011076:	4613      	mov	r3, r2
 8011078:	e7cc      	b.n	8011014 <_malloc_r+0x80>
 801107a:	230c      	movs	r3, #12
 801107c:	603b      	str	r3, [r7, #0]
 801107e:	4638      	mov	r0, r7
 8011080:	f000 f80e 	bl	80110a0 <__malloc_unlock>
 8011084:	e797      	b.n	8010fb6 <_malloc_r+0x22>
 8011086:	6025      	str	r5, [r4, #0]
 8011088:	e7dc      	b.n	8011044 <_malloc_r+0xb0>
 801108a:	605b      	str	r3, [r3, #4]
 801108c:	deff      	udf	#255	; 0xff
 801108e:	bf00      	nop
 8011090:	20004adc 	.word	0x20004adc

08011094 <__malloc_lock>:
 8011094:	4801      	ldr	r0, [pc, #4]	; (801109c <__malloc_lock+0x8>)
 8011096:	f7ff b878 	b.w	801018a <__retarget_lock_acquire_recursive>
 801109a:	bf00      	nop
 801109c:	20004ad8 	.word	0x20004ad8

080110a0 <__malloc_unlock>:
 80110a0:	4801      	ldr	r0, [pc, #4]	; (80110a8 <__malloc_unlock+0x8>)
 80110a2:	f7ff b873 	b.w	801018c <__retarget_lock_release_recursive>
 80110a6:	bf00      	nop
 80110a8:	20004ad8 	.word	0x20004ad8

080110ac <_Balloc>:
 80110ac:	b570      	push	{r4, r5, r6, lr}
 80110ae:	69c6      	ldr	r6, [r0, #28]
 80110b0:	4604      	mov	r4, r0
 80110b2:	460d      	mov	r5, r1
 80110b4:	b976      	cbnz	r6, 80110d4 <_Balloc+0x28>
 80110b6:	2010      	movs	r0, #16
 80110b8:	f7ff ff44 	bl	8010f44 <malloc>
 80110bc:	4602      	mov	r2, r0
 80110be:	61e0      	str	r0, [r4, #28]
 80110c0:	b920      	cbnz	r0, 80110cc <_Balloc+0x20>
 80110c2:	4b18      	ldr	r3, [pc, #96]	; (8011124 <_Balloc+0x78>)
 80110c4:	4818      	ldr	r0, [pc, #96]	; (8011128 <_Balloc+0x7c>)
 80110c6:	216b      	movs	r1, #107	; 0x6b
 80110c8:	f002 f902 	bl	80132d0 <__assert_func>
 80110cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110d0:	6006      	str	r6, [r0, #0]
 80110d2:	60c6      	str	r6, [r0, #12]
 80110d4:	69e6      	ldr	r6, [r4, #28]
 80110d6:	68f3      	ldr	r3, [r6, #12]
 80110d8:	b183      	cbz	r3, 80110fc <_Balloc+0x50>
 80110da:	69e3      	ldr	r3, [r4, #28]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110e2:	b9b8      	cbnz	r0, 8011114 <_Balloc+0x68>
 80110e4:	2101      	movs	r1, #1
 80110e6:	fa01 f605 	lsl.w	r6, r1, r5
 80110ea:	1d72      	adds	r2, r6, #5
 80110ec:	0092      	lsls	r2, r2, #2
 80110ee:	4620      	mov	r0, r4
 80110f0:	f002 f90c 	bl	801330c <_calloc_r>
 80110f4:	b160      	cbz	r0, 8011110 <_Balloc+0x64>
 80110f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80110fa:	e00e      	b.n	801111a <_Balloc+0x6e>
 80110fc:	2221      	movs	r2, #33	; 0x21
 80110fe:	2104      	movs	r1, #4
 8011100:	4620      	mov	r0, r4
 8011102:	f002 f903 	bl	801330c <_calloc_r>
 8011106:	69e3      	ldr	r3, [r4, #28]
 8011108:	60f0      	str	r0, [r6, #12]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1e4      	bne.n	80110da <_Balloc+0x2e>
 8011110:	2000      	movs	r0, #0
 8011112:	bd70      	pop	{r4, r5, r6, pc}
 8011114:	6802      	ldr	r2, [r0, #0]
 8011116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801111a:	2300      	movs	r3, #0
 801111c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011120:	e7f7      	b.n	8011112 <_Balloc+0x66>
 8011122:	bf00      	nop
 8011124:	0801572c 	.word	0x0801572c
 8011128:	080157ac 	.word	0x080157ac

0801112c <_Bfree>:
 801112c:	b570      	push	{r4, r5, r6, lr}
 801112e:	69c6      	ldr	r6, [r0, #28]
 8011130:	4605      	mov	r5, r0
 8011132:	460c      	mov	r4, r1
 8011134:	b976      	cbnz	r6, 8011154 <_Bfree+0x28>
 8011136:	2010      	movs	r0, #16
 8011138:	f7ff ff04 	bl	8010f44 <malloc>
 801113c:	4602      	mov	r2, r0
 801113e:	61e8      	str	r0, [r5, #28]
 8011140:	b920      	cbnz	r0, 801114c <_Bfree+0x20>
 8011142:	4b09      	ldr	r3, [pc, #36]	; (8011168 <_Bfree+0x3c>)
 8011144:	4809      	ldr	r0, [pc, #36]	; (801116c <_Bfree+0x40>)
 8011146:	218f      	movs	r1, #143	; 0x8f
 8011148:	f002 f8c2 	bl	80132d0 <__assert_func>
 801114c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011150:	6006      	str	r6, [r0, #0]
 8011152:	60c6      	str	r6, [r0, #12]
 8011154:	b13c      	cbz	r4, 8011166 <_Bfree+0x3a>
 8011156:	69eb      	ldr	r3, [r5, #28]
 8011158:	6862      	ldr	r2, [r4, #4]
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011160:	6021      	str	r1, [r4, #0]
 8011162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011166:	bd70      	pop	{r4, r5, r6, pc}
 8011168:	0801572c 	.word	0x0801572c
 801116c:	080157ac 	.word	0x080157ac

08011170 <__multadd>:
 8011170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011174:	690d      	ldr	r5, [r1, #16]
 8011176:	4607      	mov	r7, r0
 8011178:	460c      	mov	r4, r1
 801117a:	461e      	mov	r6, r3
 801117c:	f101 0c14 	add.w	ip, r1, #20
 8011180:	2000      	movs	r0, #0
 8011182:	f8dc 3000 	ldr.w	r3, [ip]
 8011186:	b299      	uxth	r1, r3
 8011188:	fb02 6101 	mla	r1, r2, r1, r6
 801118c:	0c1e      	lsrs	r6, r3, #16
 801118e:	0c0b      	lsrs	r3, r1, #16
 8011190:	fb02 3306 	mla	r3, r2, r6, r3
 8011194:	b289      	uxth	r1, r1
 8011196:	3001      	adds	r0, #1
 8011198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801119c:	4285      	cmp	r5, r0
 801119e:	f84c 1b04 	str.w	r1, [ip], #4
 80111a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80111a6:	dcec      	bgt.n	8011182 <__multadd+0x12>
 80111a8:	b30e      	cbz	r6, 80111ee <__multadd+0x7e>
 80111aa:	68a3      	ldr	r3, [r4, #8]
 80111ac:	42ab      	cmp	r3, r5
 80111ae:	dc19      	bgt.n	80111e4 <__multadd+0x74>
 80111b0:	6861      	ldr	r1, [r4, #4]
 80111b2:	4638      	mov	r0, r7
 80111b4:	3101      	adds	r1, #1
 80111b6:	f7ff ff79 	bl	80110ac <_Balloc>
 80111ba:	4680      	mov	r8, r0
 80111bc:	b928      	cbnz	r0, 80111ca <__multadd+0x5a>
 80111be:	4602      	mov	r2, r0
 80111c0:	4b0c      	ldr	r3, [pc, #48]	; (80111f4 <__multadd+0x84>)
 80111c2:	480d      	ldr	r0, [pc, #52]	; (80111f8 <__multadd+0x88>)
 80111c4:	21ba      	movs	r1, #186	; 0xba
 80111c6:	f002 f883 	bl	80132d0 <__assert_func>
 80111ca:	6922      	ldr	r2, [r4, #16]
 80111cc:	3202      	adds	r2, #2
 80111ce:	f104 010c 	add.w	r1, r4, #12
 80111d2:	0092      	lsls	r2, r2, #2
 80111d4:	300c      	adds	r0, #12
 80111d6:	f7fe ffda 	bl	801018e <memcpy>
 80111da:	4621      	mov	r1, r4
 80111dc:	4638      	mov	r0, r7
 80111de:	f7ff ffa5 	bl	801112c <_Bfree>
 80111e2:	4644      	mov	r4, r8
 80111e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80111e8:	3501      	adds	r5, #1
 80111ea:	615e      	str	r6, [r3, #20]
 80111ec:	6125      	str	r5, [r4, #16]
 80111ee:	4620      	mov	r0, r4
 80111f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111f4:	0801579b 	.word	0x0801579b
 80111f8:	080157ac 	.word	0x080157ac

080111fc <__s2b>:
 80111fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011200:	460c      	mov	r4, r1
 8011202:	4615      	mov	r5, r2
 8011204:	461f      	mov	r7, r3
 8011206:	2209      	movs	r2, #9
 8011208:	3308      	adds	r3, #8
 801120a:	4606      	mov	r6, r0
 801120c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011210:	2100      	movs	r1, #0
 8011212:	2201      	movs	r2, #1
 8011214:	429a      	cmp	r2, r3
 8011216:	db09      	blt.n	801122c <__s2b+0x30>
 8011218:	4630      	mov	r0, r6
 801121a:	f7ff ff47 	bl	80110ac <_Balloc>
 801121e:	b940      	cbnz	r0, 8011232 <__s2b+0x36>
 8011220:	4602      	mov	r2, r0
 8011222:	4b19      	ldr	r3, [pc, #100]	; (8011288 <__s2b+0x8c>)
 8011224:	4819      	ldr	r0, [pc, #100]	; (801128c <__s2b+0x90>)
 8011226:	21d3      	movs	r1, #211	; 0xd3
 8011228:	f002 f852 	bl	80132d0 <__assert_func>
 801122c:	0052      	lsls	r2, r2, #1
 801122e:	3101      	adds	r1, #1
 8011230:	e7f0      	b.n	8011214 <__s2b+0x18>
 8011232:	9b08      	ldr	r3, [sp, #32]
 8011234:	6143      	str	r3, [r0, #20]
 8011236:	2d09      	cmp	r5, #9
 8011238:	f04f 0301 	mov.w	r3, #1
 801123c:	6103      	str	r3, [r0, #16]
 801123e:	dd16      	ble.n	801126e <__s2b+0x72>
 8011240:	f104 0909 	add.w	r9, r4, #9
 8011244:	46c8      	mov	r8, r9
 8011246:	442c      	add	r4, r5
 8011248:	f818 3b01 	ldrb.w	r3, [r8], #1
 801124c:	4601      	mov	r1, r0
 801124e:	3b30      	subs	r3, #48	; 0x30
 8011250:	220a      	movs	r2, #10
 8011252:	4630      	mov	r0, r6
 8011254:	f7ff ff8c 	bl	8011170 <__multadd>
 8011258:	45a0      	cmp	r8, r4
 801125a:	d1f5      	bne.n	8011248 <__s2b+0x4c>
 801125c:	f1a5 0408 	sub.w	r4, r5, #8
 8011260:	444c      	add	r4, r9
 8011262:	1b2d      	subs	r5, r5, r4
 8011264:	1963      	adds	r3, r4, r5
 8011266:	42bb      	cmp	r3, r7
 8011268:	db04      	blt.n	8011274 <__s2b+0x78>
 801126a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801126e:	340a      	adds	r4, #10
 8011270:	2509      	movs	r5, #9
 8011272:	e7f6      	b.n	8011262 <__s2b+0x66>
 8011274:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011278:	4601      	mov	r1, r0
 801127a:	3b30      	subs	r3, #48	; 0x30
 801127c:	220a      	movs	r2, #10
 801127e:	4630      	mov	r0, r6
 8011280:	f7ff ff76 	bl	8011170 <__multadd>
 8011284:	e7ee      	b.n	8011264 <__s2b+0x68>
 8011286:	bf00      	nop
 8011288:	0801579b 	.word	0x0801579b
 801128c:	080157ac 	.word	0x080157ac

08011290 <__hi0bits>:
 8011290:	0c03      	lsrs	r3, r0, #16
 8011292:	041b      	lsls	r3, r3, #16
 8011294:	b9d3      	cbnz	r3, 80112cc <__hi0bits+0x3c>
 8011296:	0400      	lsls	r0, r0, #16
 8011298:	2310      	movs	r3, #16
 801129a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801129e:	bf04      	itt	eq
 80112a0:	0200      	lsleq	r0, r0, #8
 80112a2:	3308      	addeq	r3, #8
 80112a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80112a8:	bf04      	itt	eq
 80112aa:	0100      	lsleq	r0, r0, #4
 80112ac:	3304      	addeq	r3, #4
 80112ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80112b2:	bf04      	itt	eq
 80112b4:	0080      	lsleq	r0, r0, #2
 80112b6:	3302      	addeq	r3, #2
 80112b8:	2800      	cmp	r0, #0
 80112ba:	db05      	blt.n	80112c8 <__hi0bits+0x38>
 80112bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80112c0:	f103 0301 	add.w	r3, r3, #1
 80112c4:	bf08      	it	eq
 80112c6:	2320      	moveq	r3, #32
 80112c8:	4618      	mov	r0, r3
 80112ca:	4770      	bx	lr
 80112cc:	2300      	movs	r3, #0
 80112ce:	e7e4      	b.n	801129a <__hi0bits+0xa>

080112d0 <__lo0bits>:
 80112d0:	6803      	ldr	r3, [r0, #0]
 80112d2:	f013 0207 	ands.w	r2, r3, #7
 80112d6:	d00c      	beq.n	80112f2 <__lo0bits+0x22>
 80112d8:	07d9      	lsls	r1, r3, #31
 80112da:	d422      	bmi.n	8011322 <__lo0bits+0x52>
 80112dc:	079a      	lsls	r2, r3, #30
 80112de:	bf49      	itett	mi
 80112e0:	085b      	lsrmi	r3, r3, #1
 80112e2:	089b      	lsrpl	r3, r3, #2
 80112e4:	6003      	strmi	r3, [r0, #0]
 80112e6:	2201      	movmi	r2, #1
 80112e8:	bf5c      	itt	pl
 80112ea:	6003      	strpl	r3, [r0, #0]
 80112ec:	2202      	movpl	r2, #2
 80112ee:	4610      	mov	r0, r2
 80112f0:	4770      	bx	lr
 80112f2:	b299      	uxth	r1, r3
 80112f4:	b909      	cbnz	r1, 80112fa <__lo0bits+0x2a>
 80112f6:	0c1b      	lsrs	r3, r3, #16
 80112f8:	2210      	movs	r2, #16
 80112fa:	b2d9      	uxtb	r1, r3
 80112fc:	b909      	cbnz	r1, 8011302 <__lo0bits+0x32>
 80112fe:	3208      	adds	r2, #8
 8011300:	0a1b      	lsrs	r3, r3, #8
 8011302:	0719      	lsls	r1, r3, #28
 8011304:	bf04      	itt	eq
 8011306:	091b      	lsreq	r3, r3, #4
 8011308:	3204      	addeq	r2, #4
 801130a:	0799      	lsls	r1, r3, #30
 801130c:	bf04      	itt	eq
 801130e:	089b      	lsreq	r3, r3, #2
 8011310:	3202      	addeq	r2, #2
 8011312:	07d9      	lsls	r1, r3, #31
 8011314:	d403      	bmi.n	801131e <__lo0bits+0x4e>
 8011316:	085b      	lsrs	r3, r3, #1
 8011318:	f102 0201 	add.w	r2, r2, #1
 801131c:	d003      	beq.n	8011326 <__lo0bits+0x56>
 801131e:	6003      	str	r3, [r0, #0]
 8011320:	e7e5      	b.n	80112ee <__lo0bits+0x1e>
 8011322:	2200      	movs	r2, #0
 8011324:	e7e3      	b.n	80112ee <__lo0bits+0x1e>
 8011326:	2220      	movs	r2, #32
 8011328:	e7e1      	b.n	80112ee <__lo0bits+0x1e>
	...

0801132c <__i2b>:
 801132c:	b510      	push	{r4, lr}
 801132e:	460c      	mov	r4, r1
 8011330:	2101      	movs	r1, #1
 8011332:	f7ff febb 	bl	80110ac <_Balloc>
 8011336:	4602      	mov	r2, r0
 8011338:	b928      	cbnz	r0, 8011346 <__i2b+0x1a>
 801133a:	4b05      	ldr	r3, [pc, #20]	; (8011350 <__i2b+0x24>)
 801133c:	4805      	ldr	r0, [pc, #20]	; (8011354 <__i2b+0x28>)
 801133e:	f240 1145 	movw	r1, #325	; 0x145
 8011342:	f001 ffc5 	bl	80132d0 <__assert_func>
 8011346:	2301      	movs	r3, #1
 8011348:	6144      	str	r4, [r0, #20]
 801134a:	6103      	str	r3, [r0, #16]
 801134c:	bd10      	pop	{r4, pc}
 801134e:	bf00      	nop
 8011350:	0801579b 	.word	0x0801579b
 8011354:	080157ac 	.word	0x080157ac

08011358 <__multiply>:
 8011358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135c:	4691      	mov	r9, r2
 801135e:	690a      	ldr	r2, [r1, #16]
 8011360:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011364:	429a      	cmp	r2, r3
 8011366:	bfb8      	it	lt
 8011368:	460b      	movlt	r3, r1
 801136a:	460c      	mov	r4, r1
 801136c:	bfbc      	itt	lt
 801136e:	464c      	movlt	r4, r9
 8011370:	4699      	movlt	r9, r3
 8011372:	6927      	ldr	r7, [r4, #16]
 8011374:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011378:	68a3      	ldr	r3, [r4, #8]
 801137a:	6861      	ldr	r1, [r4, #4]
 801137c:	eb07 060a 	add.w	r6, r7, sl
 8011380:	42b3      	cmp	r3, r6
 8011382:	b085      	sub	sp, #20
 8011384:	bfb8      	it	lt
 8011386:	3101      	addlt	r1, #1
 8011388:	f7ff fe90 	bl	80110ac <_Balloc>
 801138c:	b930      	cbnz	r0, 801139c <__multiply+0x44>
 801138e:	4602      	mov	r2, r0
 8011390:	4b44      	ldr	r3, [pc, #272]	; (80114a4 <__multiply+0x14c>)
 8011392:	4845      	ldr	r0, [pc, #276]	; (80114a8 <__multiply+0x150>)
 8011394:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011398:	f001 ff9a 	bl	80132d0 <__assert_func>
 801139c:	f100 0514 	add.w	r5, r0, #20
 80113a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113a4:	462b      	mov	r3, r5
 80113a6:	2200      	movs	r2, #0
 80113a8:	4543      	cmp	r3, r8
 80113aa:	d321      	bcc.n	80113f0 <__multiply+0x98>
 80113ac:	f104 0314 	add.w	r3, r4, #20
 80113b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80113b4:	f109 0314 	add.w	r3, r9, #20
 80113b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80113bc:	9202      	str	r2, [sp, #8]
 80113be:	1b3a      	subs	r2, r7, r4
 80113c0:	3a15      	subs	r2, #21
 80113c2:	f022 0203 	bic.w	r2, r2, #3
 80113c6:	3204      	adds	r2, #4
 80113c8:	f104 0115 	add.w	r1, r4, #21
 80113cc:	428f      	cmp	r7, r1
 80113ce:	bf38      	it	cc
 80113d0:	2204      	movcc	r2, #4
 80113d2:	9201      	str	r2, [sp, #4]
 80113d4:	9a02      	ldr	r2, [sp, #8]
 80113d6:	9303      	str	r3, [sp, #12]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d80c      	bhi.n	80113f6 <__multiply+0x9e>
 80113dc:	2e00      	cmp	r6, #0
 80113de:	dd03      	ble.n	80113e8 <__multiply+0x90>
 80113e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d05b      	beq.n	80114a0 <__multiply+0x148>
 80113e8:	6106      	str	r6, [r0, #16]
 80113ea:	b005      	add	sp, #20
 80113ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f0:	f843 2b04 	str.w	r2, [r3], #4
 80113f4:	e7d8      	b.n	80113a8 <__multiply+0x50>
 80113f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80113fa:	f1ba 0f00 	cmp.w	sl, #0
 80113fe:	d024      	beq.n	801144a <__multiply+0xf2>
 8011400:	f104 0e14 	add.w	lr, r4, #20
 8011404:	46a9      	mov	r9, r5
 8011406:	f04f 0c00 	mov.w	ip, #0
 801140a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801140e:	f8d9 1000 	ldr.w	r1, [r9]
 8011412:	fa1f fb82 	uxth.w	fp, r2
 8011416:	b289      	uxth	r1, r1
 8011418:	fb0a 110b 	mla	r1, sl, fp, r1
 801141c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011420:	f8d9 2000 	ldr.w	r2, [r9]
 8011424:	4461      	add	r1, ip
 8011426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801142a:	fb0a c20b 	mla	r2, sl, fp, ip
 801142e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011432:	b289      	uxth	r1, r1
 8011434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011438:	4577      	cmp	r7, lr
 801143a:	f849 1b04 	str.w	r1, [r9], #4
 801143e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011442:	d8e2      	bhi.n	801140a <__multiply+0xb2>
 8011444:	9a01      	ldr	r2, [sp, #4]
 8011446:	f845 c002 	str.w	ip, [r5, r2]
 801144a:	9a03      	ldr	r2, [sp, #12]
 801144c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011450:	3304      	adds	r3, #4
 8011452:	f1b9 0f00 	cmp.w	r9, #0
 8011456:	d021      	beq.n	801149c <__multiply+0x144>
 8011458:	6829      	ldr	r1, [r5, #0]
 801145a:	f104 0c14 	add.w	ip, r4, #20
 801145e:	46ae      	mov	lr, r5
 8011460:	f04f 0a00 	mov.w	sl, #0
 8011464:	f8bc b000 	ldrh.w	fp, [ip]
 8011468:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801146c:	fb09 220b 	mla	r2, r9, fp, r2
 8011470:	4452      	add	r2, sl
 8011472:	b289      	uxth	r1, r1
 8011474:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011478:	f84e 1b04 	str.w	r1, [lr], #4
 801147c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011484:	f8be 1000 	ldrh.w	r1, [lr]
 8011488:	fb09 110a 	mla	r1, r9, sl, r1
 801148c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011490:	4567      	cmp	r7, ip
 8011492:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011496:	d8e5      	bhi.n	8011464 <__multiply+0x10c>
 8011498:	9a01      	ldr	r2, [sp, #4]
 801149a:	50a9      	str	r1, [r5, r2]
 801149c:	3504      	adds	r5, #4
 801149e:	e799      	b.n	80113d4 <__multiply+0x7c>
 80114a0:	3e01      	subs	r6, #1
 80114a2:	e79b      	b.n	80113dc <__multiply+0x84>
 80114a4:	0801579b 	.word	0x0801579b
 80114a8:	080157ac 	.word	0x080157ac

080114ac <__pow5mult>:
 80114ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114b0:	4615      	mov	r5, r2
 80114b2:	f012 0203 	ands.w	r2, r2, #3
 80114b6:	4606      	mov	r6, r0
 80114b8:	460f      	mov	r7, r1
 80114ba:	d007      	beq.n	80114cc <__pow5mult+0x20>
 80114bc:	4c25      	ldr	r4, [pc, #148]	; (8011554 <__pow5mult+0xa8>)
 80114be:	3a01      	subs	r2, #1
 80114c0:	2300      	movs	r3, #0
 80114c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114c6:	f7ff fe53 	bl	8011170 <__multadd>
 80114ca:	4607      	mov	r7, r0
 80114cc:	10ad      	asrs	r5, r5, #2
 80114ce:	d03d      	beq.n	801154c <__pow5mult+0xa0>
 80114d0:	69f4      	ldr	r4, [r6, #28]
 80114d2:	b97c      	cbnz	r4, 80114f4 <__pow5mult+0x48>
 80114d4:	2010      	movs	r0, #16
 80114d6:	f7ff fd35 	bl	8010f44 <malloc>
 80114da:	4602      	mov	r2, r0
 80114dc:	61f0      	str	r0, [r6, #28]
 80114de:	b928      	cbnz	r0, 80114ec <__pow5mult+0x40>
 80114e0:	4b1d      	ldr	r3, [pc, #116]	; (8011558 <__pow5mult+0xac>)
 80114e2:	481e      	ldr	r0, [pc, #120]	; (801155c <__pow5mult+0xb0>)
 80114e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80114e8:	f001 fef2 	bl	80132d0 <__assert_func>
 80114ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80114f0:	6004      	str	r4, [r0, #0]
 80114f2:	60c4      	str	r4, [r0, #12]
 80114f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80114f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80114fc:	b94c      	cbnz	r4, 8011512 <__pow5mult+0x66>
 80114fe:	f240 2171 	movw	r1, #625	; 0x271
 8011502:	4630      	mov	r0, r6
 8011504:	f7ff ff12 	bl	801132c <__i2b>
 8011508:	2300      	movs	r3, #0
 801150a:	f8c8 0008 	str.w	r0, [r8, #8]
 801150e:	4604      	mov	r4, r0
 8011510:	6003      	str	r3, [r0, #0]
 8011512:	f04f 0900 	mov.w	r9, #0
 8011516:	07eb      	lsls	r3, r5, #31
 8011518:	d50a      	bpl.n	8011530 <__pow5mult+0x84>
 801151a:	4639      	mov	r1, r7
 801151c:	4622      	mov	r2, r4
 801151e:	4630      	mov	r0, r6
 8011520:	f7ff ff1a 	bl	8011358 <__multiply>
 8011524:	4639      	mov	r1, r7
 8011526:	4680      	mov	r8, r0
 8011528:	4630      	mov	r0, r6
 801152a:	f7ff fdff 	bl	801112c <_Bfree>
 801152e:	4647      	mov	r7, r8
 8011530:	106d      	asrs	r5, r5, #1
 8011532:	d00b      	beq.n	801154c <__pow5mult+0xa0>
 8011534:	6820      	ldr	r0, [r4, #0]
 8011536:	b938      	cbnz	r0, 8011548 <__pow5mult+0x9c>
 8011538:	4622      	mov	r2, r4
 801153a:	4621      	mov	r1, r4
 801153c:	4630      	mov	r0, r6
 801153e:	f7ff ff0b 	bl	8011358 <__multiply>
 8011542:	6020      	str	r0, [r4, #0]
 8011544:	f8c0 9000 	str.w	r9, [r0]
 8011548:	4604      	mov	r4, r0
 801154a:	e7e4      	b.n	8011516 <__pow5mult+0x6a>
 801154c:	4638      	mov	r0, r7
 801154e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011552:	bf00      	nop
 8011554:	080158f8 	.word	0x080158f8
 8011558:	0801572c 	.word	0x0801572c
 801155c:	080157ac 	.word	0x080157ac

08011560 <__lshift>:
 8011560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011564:	460c      	mov	r4, r1
 8011566:	6849      	ldr	r1, [r1, #4]
 8011568:	6923      	ldr	r3, [r4, #16]
 801156a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801156e:	68a3      	ldr	r3, [r4, #8]
 8011570:	4607      	mov	r7, r0
 8011572:	4691      	mov	r9, r2
 8011574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011578:	f108 0601 	add.w	r6, r8, #1
 801157c:	42b3      	cmp	r3, r6
 801157e:	db0b      	blt.n	8011598 <__lshift+0x38>
 8011580:	4638      	mov	r0, r7
 8011582:	f7ff fd93 	bl	80110ac <_Balloc>
 8011586:	4605      	mov	r5, r0
 8011588:	b948      	cbnz	r0, 801159e <__lshift+0x3e>
 801158a:	4602      	mov	r2, r0
 801158c:	4b28      	ldr	r3, [pc, #160]	; (8011630 <__lshift+0xd0>)
 801158e:	4829      	ldr	r0, [pc, #164]	; (8011634 <__lshift+0xd4>)
 8011590:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011594:	f001 fe9c 	bl	80132d0 <__assert_func>
 8011598:	3101      	adds	r1, #1
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	e7ee      	b.n	801157c <__lshift+0x1c>
 801159e:	2300      	movs	r3, #0
 80115a0:	f100 0114 	add.w	r1, r0, #20
 80115a4:	f100 0210 	add.w	r2, r0, #16
 80115a8:	4618      	mov	r0, r3
 80115aa:	4553      	cmp	r3, sl
 80115ac:	db33      	blt.n	8011616 <__lshift+0xb6>
 80115ae:	6920      	ldr	r0, [r4, #16]
 80115b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115b4:	f104 0314 	add.w	r3, r4, #20
 80115b8:	f019 091f 	ands.w	r9, r9, #31
 80115bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115c4:	d02b      	beq.n	801161e <__lshift+0xbe>
 80115c6:	f1c9 0e20 	rsb	lr, r9, #32
 80115ca:	468a      	mov	sl, r1
 80115cc:	2200      	movs	r2, #0
 80115ce:	6818      	ldr	r0, [r3, #0]
 80115d0:	fa00 f009 	lsl.w	r0, r0, r9
 80115d4:	4310      	orrs	r0, r2
 80115d6:	f84a 0b04 	str.w	r0, [sl], #4
 80115da:	f853 2b04 	ldr.w	r2, [r3], #4
 80115de:	459c      	cmp	ip, r3
 80115e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80115e4:	d8f3      	bhi.n	80115ce <__lshift+0x6e>
 80115e6:	ebac 0304 	sub.w	r3, ip, r4
 80115ea:	3b15      	subs	r3, #21
 80115ec:	f023 0303 	bic.w	r3, r3, #3
 80115f0:	3304      	adds	r3, #4
 80115f2:	f104 0015 	add.w	r0, r4, #21
 80115f6:	4584      	cmp	ip, r0
 80115f8:	bf38      	it	cc
 80115fa:	2304      	movcc	r3, #4
 80115fc:	50ca      	str	r2, [r1, r3]
 80115fe:	b10a      	cbz	r2, 8011604 <__lshift+0xa4>
 8011600:	f108 0602 	add.w	r6, r8, #2
 8011604:	3e01      	subs	r6, #1
 8011606:	4638      	mov	r0, r7
 8011608:	612e      	str	r6, [r5, #16]
 801160a:	4621      	mov	r1, r4
 801160c:	f7ff fd8e 	bl	801112c <_Bfree>
 8011610:	4628      	mov	r0, r5
 8011612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011616:	f842 0f04 	str.w	r0, [r2, #4]!
 801161a:	3301      	adds	r3, #1
 801161c:	e7c5      	b.n	80115aa <__lshift+0x4a>
 801161e:	3904      	subs	r1, #4
 8011620:	f853 2b04 	ldr.w	r2, [r3], #4
 8011624:	f841 2f04 	str.w	r2, [r1, #4]!
 8011628:	459c      	cmp	ip, r3
 801162a:	d8f9      	bhi.n	8011620 <__lshift+0xc0>
 801162c:	e7ea      	b.n	8011604 <__lshift+0xa4>
 801162e:	bf00      	nop
 8011630:	0801579b 	.word	0x0801579b
 8011634:	080157ac 	.word	0x080157ac

08011638 <__mcmp>:
 8011638:	b530      	push	{r4, r5, lr}
 801163a:	6902      	ldr	r2, [r0, #16]
 801163c:	690c      	ldr	r4, [r1, #16]
 801163e:	1b12      	subs	r2, r2, r4
 8011640:	d10e      	bne.n	8011660 <__mcmp+0x28>
 8011642:	f100 0314 	add.w	r3, r0, #20
 8011646:	3114      	adds	r1, #20
 8011648:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801164c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011650:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011654:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011658:	42a5      	cmp	r5, r4
 801165a:	d003      	beq.n	8011664 <__mcmp+0x2c>
 801165c:	d305      	bcc.n	801166a <__mcmp+0x32>
 801165e:	2201      	movs	r2, #1
 8011660:	4610      	mov	r0, r2
 8011662:	bd30      	pop	{r4, r5, pc}
 8011664:	4283      	cmp	r3, r0
 8011666:	d3f3      	bcc.n	8011650 <__mcmp+0x18>
 8011668:	e7fa      	b.n	8011660 <__mcmp+0x28>
 801166a:	f04f 32ff 	mov.w	r2, #4294967295
 801166e:	e7f7      	b.n	8011660 <__mcmp+0x28>

08011670 <__mdiff>:
 8011670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011674:	460c      	mov	r4, r1
 8011676:	4606      	mov	r6, r0
 8011678:	4611      	mov	r1, r2
 801167a:	4620      	mov	r0, r4
 801167c:	4690      	mov	r8, r2
 801167e:	f7ff ffdb 	bl	8011638 <__mcmp>
 8011682:	1e05      	subs	r5, r0, #0
 8011684:	d110      	bne.n	80116a8 <__mdiff+0x38>
 8011686:	4629      	mov	r1, r5
 8011688:	4630      	mov	r0, r6
 801168a:	f7ff fd0f 	bl	80110ac <_Balloc>
 801168e:	b930      	cbnz	r0, 801169e <__mdiff+0x2e>
 8011690:	4b3a      	ldr	r3, [pc, #232]	; (801177c <__mdiff+0x10c>)
 8011692:	4602      	mov	r2, r0
 8011694:	f240 2137 	movw	r1, #567	; 0x237
 8011698:	4839      	ldr	r0, [pc, #228]	; (8011780 <__mdiff+0x110>)
 801169a:	f001 fe19 	bl	80132d0 <__assert_func>
 801169e:	2301      	movs	r3, #1
 80116a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a8:	bfa4      	itt	ge
 80116aa:	4643      	movge	r3, r8
 80116ac:	46a0      	movge	r8, r4
 80116ae:	4630      	mov	r0, r6
 80116b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80116b4:	bfa6      	itte	ge
 80116b6:	461c      	movge	r4, r3
 80116b8:	2500      	movge	r5, #0
 80116ba:	2501      	movlt	r5, #1
 80116bc:	f7ff fcf6 	bl	80110ac <_Balloc>
 80116c0:	b920      	cbnz	r0, 80116cc <__mdiff+0x5c>
 80116c2:	4b2e      	ldr	r3, [pc, #184]	; (801177c <__mdiff+0x10c>)
 80116c4:	4602      	mov	r2, r0
 80116c6:	f240 2145 	movw	r1, #581	; 0x245
 80116ca:	e7e5      	b.n	8011698 <__mdiff+0x28>
 80116cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80116d0:	6926      	ldr	r6, [r4, #16]
 80116d2:	60c5      	str	r5, [r0, #12]
 80116d4:	f104 0914 	add.w	r9, r4, #20
 80116d8:	f108 0514 	add.w	r5, r8, #20
 80116dc:	f100 0e14 	add.w	lr, r0, #20
 80116e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80116e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80116e8:	f108 0210 	add.w	r2, r8, #16
 80116ec:	46f2      	mov	sl, lr
 80116ee:	2100      	movs	r1, #0
 80116f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80116f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80116f8:	fa11 f88b 	uxtah	r8, r1, fp
 80116fc:	b299      	uxth	r1, r3
 80116fe:	0c1b      	lsrs	r3, r3, #16
 8011700:	eba8 0801 	sub.w	r8, r8, r1
 8011704:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011708:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801170c:	fa1f f888 	uxth.w	r8, r8
 8011710:	1419      	asrs	r1, r3, #16
 8011712:	454e      	cmp	r6, r9
 8011714:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011718:	f84a 3b04 	str.w	r3, [sl], #4
 801171c:	d8e8      	bhi.n	80116f0 <__mdiff+0x80>
 801171e:	1b33      	subs	r3, r6, r4
 8011720:	3b15      	subs	r3, #21
 8011722:	f023 0303 	bic.w	r3, r3, #3
 8011726:	3304      	adds	r3, #4
 8011728:	3415      	adds	r4, #21
 801172a:	42a6      	cmp	r6, r4
 801172c:	bf38      	it	cc
 801172e:	2304      	movcc	r3, #4
 8011730:	441d      	add	r5, r3
 8011732:	4473      	add	r3, lr
 8011734:	469e      	mov	lr, r3
 8011736:	462e      	mov	r6, r5
 8011738:	4566      	cmp	r6, ip
 801173a:	d30e      	bcc.n	801175a <__mdiff+0xea>
 801173c:	f10c 0203 	add.w	r2, ip, #3
 8011740:	1b52      	subs	r2, r2, r5
 8011742:	f022 0203 	bic.w	r2, r2, #3
 8011746:	3d03      	subs	r5, #3
 8011748:	45ac      	cmp	ip, r5
 801174a:	bf38      	it	cc
 801174c:	2200      	movcc	r2, #0
 801174e:	4413      	add	r3, r2
 8011750:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011754:	b17a      	cbz	r2, 8011776 <__mdiff+0x106>
 8011756:	6107      	str	r7, [r0, #16]
 8011758:	e7a4      	b.n	80116a4 <__mdiff+0x34>
 801175a:	f856 8b04 	ldr.w	r8, [r6], #4
 801175e:	fa11 f288 	uxtah	r2, r1, r8
 8011762:	1414      	asrs	r4, r2, #16
 8011764:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011768:	b292      	uxth	r2, r2
 801176a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801176e:	f84e 2b04 	str.w	r2, [lr], #4
 8011772:	1421      	asrs	r1, r4, #16
 8011774:	e7e0      	b.n	8011738 <__mdiff+0xc8>
 8011776:	3f01      	subs	r7, #1
 8011778:	e7ea      	b.n	8011750 <__mdiff+0xe0>
 801177a:	bf00      	nop
 801177c:	0801579b 	.word	0x0801579b
 8011780:	080157ac 	.word	0x080157ac

08011784 <__ulp>:
 8011784:	b082      	sub	sp, #8
 8011786:	ed8d 0b00 	vstr	d0, [sp]
 801178a:	9a01      	ldr	r2, [sp, #4]
 801178c:	4b0f      	ldr	r3, [pc, #60]	; (80117cc <__ulp+0x48>)
 801178e:	4013      	ands	r3, r2
 8011790:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011794:	2b00      	cmp	r3, #0
 8011796:	dc08      	bgt.n	80117aa <__ulp+0x26>
 8011798:	425b      	negs	r3, r3
 801179a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801179e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80117a2:	da04      	bge.n	80117ae <__ulp+0x2a>
 80117a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117a8:	4113      	asrs	r3, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	e008      	b.n	80117c0 <__ulp+0x3c>
 80117ae:	f1a2 0314 	sub.w	r3, r2, #20
 80117b2:	2b1e      	cmp	r3, #30
 80117b4:	bfda      	itte	le
 80117b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80117ba:	40da      	lsrle	r2, r3
 80117bc:	2201      	movgt	r2, #1
 80117be:	2300      	movs	r3, #0
 80117c0:	4619      	mov	r1, r3
 80117c2:	4610      	mov	r0, r2
 80117c4:	ec41 0b10 	vmov	d0, r0, r1
 80117c8:	b002      	add	sp, #8
 80117ca:	4770      	bx	lr
 80117cc:	7ff00000 	.word	0x7ff00000

080117d0 <__b2d>:
 80117d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d4:	6906      	ldr	r6, [r0, #16]
 80117d6:	f100 0814 	add.w	r8, r0, #20
 80117da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80117de:	1f37      	subs	r7, r6, #4
 80117e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80117e4:	4610      	mov	r0, r2
 80117e6:	f7ff fd53 	bl	8011290 <__hi0bits>
 80117ea:	f1c0 0320 	rsb	r3, r0, #32
 80117ee:	280a      	cmp	r0, #10
 80117f0:	600b      	str	r3, [r1, #0]
 80117f2:	491b      	ldr	r1, [pc, #108]	; (8011860 <__b2d+0x90>)
 80117f4:	dc15      	bgt.n	8011822 <__b2d+0x52>
 80117f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80117fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80117fe:	45b8      	cmp	r8, r7
 8011800:	ea43 0501 	orr.w	r5, r3, r1
 8011804:	bf34      	ite	cc
 8011806:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801180a:	2300      	movcs	r3, #0
 801180c:	3015      	adds	r0, #21
 801180e:	fa02 f000 	lsl.w	r0, r2, r0
 8011812:	fa23 f30c 	lsr.w	r3, r3, ip
 8011816:	4303      	orrs	r3, r0
 8011818:	461c      	mov	r4, r3
 801181a:	ec45 4b10 	vmov	d0, r4, r5
 801181e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011822:	45b8      	cmp	r8, r7
 8011824:	bf3a      	itte	cc
 8011826:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801182a:	f1a6 0708 	subcc.w	r7, r6, #8
 801182e:	2300      	movcs	r3, #0
 8011830:	380b      	subs	r0, #11
 8011832:	d012      	beq.n	801185a <__b2d+0x8a>
 8011834:	f1c0 0120 	rsb	r1, r0, #32
 8011838:	fa23 f401 	lsr.w	r4, r3, r1
 801183c:	4082      	lsls	r2, r0
 801183e:	4322      	orrs	r2, r4
 8011840:	4547      	cmp	r7, r8
 8011842:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011846:	bf8c      	ite	hi
 8011848:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801184c:	2200      	movls	r2, #0
 801184e:	4083      	lsls	r3, r0
 8011850:	40ca      	lsrs	r2, r1
 8011852:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011856:	4313      	orrs	r3, r2
 8011858:	e7de      	b.n	8011818 <__b2d+0x48>
 801185a:	ea42 0501 	orr.w	r5, r2, r1
 801185e:	e7db      	b.n	8011818 <__b2d+0x48>
 8011860:	3ff00000 	.word	0x3ff00000

08011864 <__d2b>:
 8011864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011868:	460f      	mov	r7, r1
 801186a:	2101      	movs	r1, #1
 801186c:	ec59 8b10 	vmov	r8, r9, d0
 8011870:	4616      	mov	r6, r2
 8011872:	f7ff fc1b 	bl	80110ac <_Balloc>
 8011876:	4604      	mov	r4, r0
 8011878:	b930      	cbnz	r0, 8011888 <__d2b+0x24>
 801187a:	4602      	mov	r2, r0
 801187c:	4b24      	ldr	r3, [pc, #144]	; (8011910 <__d2b+0xac>)
 801187e:	4825      	ldr	r0, [pc, #148]	; (8011914 <__d2b+0xb0>)
 8011880:	f240 310f 	movw	r1, #783	; 0x30f
 8011884:	f001 fd24 	bl	80132d0 <__assert_func>
 8011888:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801188c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011890:	bb2d      	cbnz	r5, 80118de <__d2b+0x7a>
 8011892:	9301      	str	r3, [sp, #4]
 8011894:	f1b8 0300 	subs.w	r3, r8, #0
 8011898:	d026      	beq.n	80118e8 <__d2b+0x84>
 801189a:	4668      	mov	r0, sp
 801189c:	9300      	str	r3, [sp, #0]
 801189e:	f7ff fd17 	bl	80112d0 <__lo0bits>
 80118a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80118a6:	b1e8      	cbz	r0, 80118e4 <__d2b+0x80>
 80118a8:	f1c0 0320 	rsb	r3, r0, #32
 80118ac:	fa02 f303 	lsl.w	r3, r2, r3
 80118b0:	430b      	orrs	r3, r1
 80118b2:	40c2      	lsrs	r2, r0
 80118b4:	6163      	str	r3, [r4, #20]
 80118b6:	9201      	str	r2, [sp, #4]
 80118b8:	9b01      	ldr	r3, [sp, #4]
 80118ba:	61a3      	str	r3, [r4, #24]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	bf14      	ite	ne
 80118c0:	2202      	movne	r2, #2
 80118c2:	2201      	moveq	r2, #1
 80118c4:	6122      	str	r2, [r4, #16]
 80118c6:	b1bd      	cbz	r5, 80118f8 <__d2b+0x94>
 80118c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80118cc:	4405      	add	r5, r0
 80118ce:	603d      	str	r5, [r7, #0]
 80118d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80118d4:	6030      	str	r0, [r6, #0]
 80118d6:	4620      	mov	r0, r4
 80118d8:	b003      	add	sp, #12
 80118da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118e2:	e7d6      	b.n	8011892 <__d2b+0x2e>
 80118e4:	6161      	str	r1, [r4, #20]
 80118e6:	e7e7      	b.n	80118b8 <__d2b+0x54>
 80118e8:	a801      	add	r0, sp, #4
 80118ea:	f7ff fcf1 	bl	80112d0 <__lo0bits>
 80118ee:	9b01      	ldr	r3, [sp, #4]
 80118f0:	6163      	str	r3, [r4, #20]
 80118f2:	3020      	adds	r0, #32
 80118f4:	2201      	movs	r2, #1
 80118f6:	e7e5      	b.n	80118c4 <__d2b+0x60>
 80118f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80118fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011900:	6038      	str	r0, [r7, #0]
 8011902:	6918      	ldr	r0, [r3, #16]
 8011904:	f7ff fcc4 	bl	8011290 <__hi0bits>
 8011908:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801190c:	e7e2      	b.n	80118d4 <__d2b+0x70>
 801190e:	bf00      	nop
 8011910:	0801579b 	.word	0x0801579b
 8011914:	080157ac 	.word	0x080157ac

08011918 <__ratio>:
 8011918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801191c:	4688      	mov	r8, r1
 801191e:	4669      	mov	r1, sp
 8011920:	4681      	mov	r9, r0
 8011922:	f7ff ff55 	bl	80117d0 <__b2d>
 8011926:	a901      	add	r1, sp, #4
 8011928:	4640      	mov	r0, r8
 801192a:	ec55 4b10 	vmov	r4, r5, d0
 801192e:	f7ff ff4f 	bl	80117d0 <__b2d>
 8011932:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011936:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801193a:	eba3 0c02 	sub.w	ip, r3, r2
 801193e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011942:	1a9b      	subs	r3, r3, r2
 8011944:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011948:	ec51 0b10 	vmov	r0, r1, d0
 801194c:	2b00      	cmp	r3, #0
 801194e:	bfd6      	itet	le
 8011950:	460a      	movle	r2, r1
 8011952:	462a      	movgt	r2, r5
 8011954:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011958:	468b      	mov	fp, r1
 801195a:	462f      	mov	r7, r5
 801195c:	bfd4      	ite	le
 801195e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011962:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011966:	4620      	mov	r0, r4
 8011968:	ee10 2a10 	vmov	r2, s0
 801196c:	465b      	mov	r3, fp
 801196e:	4639      	mov	r1, r7
 8011970:	f7ee ff94 	bl	800089c <__aeabi_ddiv>
 8011974:	ec41 0b10 	vmov	d0, r0, r1
 8011978:	b003      	add	sp, #12
 801197a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801197e <__copybits>:
 801197e:	3901      	subs	r1, #1
 8011980:	b570      	push	{r4, r5, r6, lr}
 8011982:	1149      	asrs	r1, r1, #5
 8011984:	6914      	ldr	r4, [r2, #16]
 8011986:	3101      	adds	r1, #1
 8011988:	f102 0314 	add.w	r3, r2, #20
 801198c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011990:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011994:	1f05      	subs	r5, r0, #4
 8011996:	42a3      	cmp	r3, r4
 8011998:	d30c      	bcc.n	80119b4 <__copybits+0x36>
 801199a:	1aa3      	subs	r3, r4, r2
 801199c:	3b11      	subs	r3, #17
 801199e:	f023 0303 	bic.w	r3, r3, #3
 80119a2:	3211      	adds	r2, #17
 80119a4:	42a2      	cmp	r2, r4
 80119a6:	bf88      	it	hi
 80119a8:	2300      	movhi	r3, #0
 80119aa:	4418      	add	r0, r3
 80119ac:	2300      	movs	r3, #0
 80119ae:	4288      	cmp	r0, r1
 80119b0:	d305      	bcc.n	80119be <__copybits+0x40>
 80119b2:	bd70      	pop	{r4, r5, r6, pc}
 80119b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80119b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80119bc:	e7eb      	b.n	8011996 <__copybits+0x18>
 80119be:	f840 3b04 	str.w	r3, [r0], #4
 80119c2:	e7f4      	b.n	80119ae <__copybits+0x30>

080119c4 <__any_on>:
 80119c4:	f100 0214 	add.w	r2, r0, #20
 80119c8:	6900      	ldr	r0, [r0, #16]
 80119ca:	114b      	asrs	r3, r1, #5
 80119cc:	4298      	cmp	r0, r3
 80119ce:	b510      	push	{r4, lr}
 80119d0:	db11      	blt.n	80119f6 <__any_on+0x32>
 80119d2:	dd0a      	ble.n	80119ea <__any_on+0x26>
 80119d4:	f011 011f 	ands.w	r1, r1, #31
 80119d8:	d007      	beq.n	80119ea <__any_on+0x26>
 80119da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80119de:	fa24 f001 	lsr.w	r0, r4, r1
 80119e2:	fa00 f101 	lsl.w	r1, r0, r1
 80119e6:	428c      	cmp	r4, r1
 80119e8:	d10b      	bne.n	8011a02 <__any_on+0x3e>
 80119ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d803      	bhi.n	80119fa <__any_on+0x36>
 80119f2:	2000      	movs	r0, #0
 80119f4:	bd10      	pop	{r4, pc}
 80119f6:	4603      	mov	r3, r0
 80119f8:	e7f7      	b.n	80119ea <__any_on+0x26>
 80119fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80119fe:	2900      	cmp	r1, #0
 8011a00:	d0f5      	beq.n	80119ee <__any_on+0x2a>
 8011a02:	2001      	movs	r0, #1
 8011a04:	e7f6      	b.n	80119f4 <__any_on+0x30>

08011a06 <sulp>:
 8011a06:	b570      	push	{r4, r5, r6, lr}
 8011a08:	4604      	mov	r4, r0
 8011a0a:	460d      	mov	r5, r1
 8011a0c:	ec45 4b10 	vmov	d0, r4, r5
 8011a10:	4616      	mov	r6, r2
 8011a12:	f7ff feb7 	bl	8011784 <__ulp>
 8011a16:	ec51 0b10 	vmov	r0, r1, d0
 8011a1a:	b17e      	cbz	r6, 8011a3c <sulp+0x36>
 8011a1c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011a20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	dd09      	ble.n	8011a3c <sulp+0x36>
 8011a28:	051b      	lsls	r3, r3, #20
 8011a2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011a2e:	2400      	movs	r4, #0
 8011a30:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011a34:	4622      	mov	r2, r4
 8011a36:	462b      	mov	r3, r5
 8011a38:	f7ee fe06 	bl	8000648 <__aeabi_dmul>
 8011a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011a40 <_strtod_l>:
 8011a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a44:	ed2d 8b02 	vpush	{d8}
 8011a48:	b09b      	sub	sp, #108	; 0x6c
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8011a4e:	2200      	movs	r2, #0
 8011a50:	9216      	str	r2, [sp, #88]	; 0x58
 8011a52:	460d      	mov	r5, r1
 8011a54:	f04f 0800 	mov.w	r8, #0
 8011a58:	f04f 0900 	mov.w	r9, #0
 8011a5c:	460a      	mov	r2, r1
 8011a5e:	9215      	str	r2, [sp, #84]	; 0x54
 8011a60:	7811      	ldrb	r1, [r2, #0]
 8011a62:	292b      	cmp	r1, #43	; 0x2b
 8011a64:	d04c      	beq.n	8011b00 <_strtod_l+0xc0>
 8011a66:	d83a      	bhi.n	8011ade <_strtod_l+0x9e>
 8011a68:	290d      	cmp	r1, #13
 8011a6a:	d834      	bhi.n	8011ad6 <_strtod_l+0x96>
 8011a6c:	2908      	cmp	r1, #8
 8011a6e:	d834      	bhi.n	8011ada <_strtod_l+0x9a>
 8011a70:	2900      	cmp	r1, #0
 8011a72:	d03d      	beq.n	8011af0 <_strtod_l+0xb0>
 8011a74:	2200      	movs	r2, #0
 8011a76:	920a      	str	r2, [sp, #40]	; 0x28
 8011a78:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011a7a:	7832      	ldrb	r2, [r6, #0]
 8011a7c:	2a30      	cmp	r2, #48	; 0x30
 8011a7e:	f040 80b4 	bne.w	8011bea <_strtod_l+0x1aa>
 8011a82:	7872      	ldrb	r2, [r6, #1]
 8011a84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011a88:	2a58      	cmp	r2, #88	; 0x58
 8011a8a:	d170      	bne.n	8011b6e <_strtod_l+0x12e>
 8011a8c:	9302      	str	r3, [sp, #8]
 8011a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a90:	9301      	str	r3, [sp, #4]
 8011a92:	ab16      	add	r3, sp, #88	; 0x58
 8011a94:	9300      	str	r3, [sp, #0]
 8011a96:	4a8e      	ldr	r2, [pc, #568]	; (8011cd0 <_strtod_l+0x290>)
 8011a98:	ab17      	add	r3, sp, #92	; 0x5c
 8011a9a:	a915      	add	r1, sp, #84	; 0x54
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f001 fcb3 	bl	8013408 <__gethex>
 8011aa2:	f010 070f 	ands.w	r7, r0, #15
 8011aa6:	4605      	mov	r5, r0
 8011aa8:	d005      	beq.n	8011ab6 <_strtod_l+0x76>
 8011aaa:	2f06      	cmp	r7, #6
 8011aac:	d12a      	bne.n	8011b04 <_strtod_l+0xc4>
 8011aae:	3601      	adds	r6, #1
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	9615      	str	r6, [sp, #84]	; 0x54
 8011ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8011ab6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f040 857f 	bne.w	80125bc <_strtod_l+0xb7c>
 8011abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ac0:	b1db      	cbz	r3, 8011afa <_strtod_l+0xba>
 8011ac2:	4642      	mov	r2, r8
 8011ac4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011ac8:	ec43 2b10 	vmov	d0, r2, r3
 8011acc:	b01b      	add	sp, #108	; 0x6c
 8011ace:	ecbd 8b02 	vpop	{d8}
 8011ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad6:	2920      	cmp	r1, #32
 8011ad8:	d1cc      	bne.n	8011a74 <_strtod_l+0x34>
 8011ada:	3201      	adds	r2, #1
 8011adc:	e7bf      	b.n	8011a5e <_strtod_l+0x1e>
 8011ade:	292d      	cmp	r1, #45	; 0x2d
 8011ae0:	d1c8      	bne.n	8011a74 <_strtod_l+0x34>
 8011ae2:	2101      	movs	r1, #1
 8011ae4:	910a      	str	r1, [sp, #40]	; 0x28
 8011ae6:	1c51      	adds	r1, r2, #1
 8011ae8:	9115      	str	r1, [sp, #84]	; 0x54
 8011aea:	7852      	ldrb	r2, [r2, #1]
 8011aec:	2a00      	cmp	r2, #0
 8011aee:	d1c3      	bne.n	8011a78 <_strtod_l+0x38>
 8011af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011af2:	9515      	str	r5, [sp, #84]	; 0x54
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	f040 855f 	bne.w	80125b8 <_strtod_l+0xb78>
 8011afa:	4642      	mov	r2, r8
 8011afc:	464b      	mov	r3, r9
 8011afe:	e7e3      	b.n	8011ac8 <_strtod_l+0x88>
 8011b00:	2100      	movs	r1, #0
 8011b02:	e7ef      	b.n	8011ae4 <_strtod_l+0xa4>
 8011b04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b06:	b13a      	cbz	r2, 8011b18 <_strtod_l+0xd8>
 8011b08:	2135      	movs	r1, #53	; 0x35
 8011b0a:	a818      	add	r0, sp, #96	; 0x60
 8011b0c:	f7ff ff37 	bl	801197e <__copybits>
 8011b10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011b12:	4620      	mov	r0, r4
 8011b14:	f7ff fb0a 	bl	801112c <_Bfree>
 8011b18:	3f01      	subs	r7, #1
 8011b1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b1c:	2f04      	cmp	r7, #4
 8011b1e:	d806      	bhi.n	8011b2e <_strtod_l+0xee>
 8011b20:	e8df f007 	tbb	[pc, r7]
 8011b24:	201d0314 	.word	0x201d0314
 8011b28:	14          	.byte	0x14
 8011b29:	00          	.byte	0x00
 8011b2a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011b2e:	05e9      	lsls	r1, r5, #23
 8011b30:	bf48      	it	mi
 8011b32:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011b36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011b3a:	0d1b      	lsrs	r3, r3, #20
 8011b3c:	051b      	lsls	r3, r3, #20
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d1b9      	bne.n	8011ab6 <_strtod_l+0x76>
 8011b42:	f7fe faf7 	bl	8010134 <__errno>
 8011b46:	2322      	movs	r3, #34	; 0x22
 8011b48:	6003      	str	r3, [r0, #0]
 8011b4a:	e7b4      	b.n	8011ab6 <_strtod_l+0x76>
 8011b4c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011b50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011b54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011b58:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011b5c:	e7e7      	b.n	8011b2e <_strtod_l+0xee>
 8011b5e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011cd8 <_strtod_l+0x298>
 8011b62:	e7e4      	b.n	8011b2e <_strtod_l+0xee>
 8011b64:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011b68:	f04f 38ff 	mov.w	r8, #4294967295
 8011b6c:	e7df      	b.n	8011b2e <_strtod_l+0xee>
 8011b6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b70:	1c5a      	adds	r2, r3, #1
 8011b72:	9215      	str	r2, [sp, #84]	; 0x54
 8011b74:	785b      	ldrb	r3, [r3, #1]
 8011b76:	2b30      	cmp	r3, #48	; 0x30
 8011b78:	d0f9      	beq.n	8011b6e <_strtod_l+0x12e>
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d09b      	beq.n	8011ab6 <_strtod_l+0x76>
 8011b7e:	2301      	movs	r3, #1
 8011b80:	f04f 0a00 	mov.w	sl, #0
 8011b84:	9304      	str	r3, [sp, #16]
 8011b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b88:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011b8e:	46d3      	mov	fp, sl
 8011b90:	220a      	movs	r2, #10
 8011b92:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011b94:	7806      	ldrb	r6, [r0, #0]
 8011b96:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011b9a:	b2d9      	uxtb	r1, r3
 8011b9c:	2909      	cmp	r1, #9
 8011b9e:	d926      	bls.n	8011bee <_strtod_l+0x1ae>
 8011ba0:	494c      	ldr	r1, [pc, #304]	; (8011cd4 <_strtod_l+0x294>)
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	f7fe fa13 	bl	800ffce <strncmp>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	d030      	beq.n	8011c0e <_strtod_l+0x1ce>
 8011bac:	2000      	movs	r0, #0
 8011bae:	4632      	mov	r2, r6
 8011bb0:	9005      	str	r0, [sp, #20]
 8011bb2:	465e      	mov	r6, fp
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2a65      	cmp	r2, #101	; 0x65
 8011bb8:	d001      	beq.n	8011bbe <_strtod_l+0x17e>
 8011bba:	2a45      	cmp	r2, #69	; 0x45
 8011bbc:	d113      	bne.n	8011be6 <_strtod_l+0x1a6>
 8011bbe:	b91e      	cbnz	r6, 8011bc8 <_strtod_l+0x188>
 8011bc0:	9a04      	ldr	r2, [sp, #16]
 8011bc2:	4302      	orrs	r2, r0
 8011bc4:	d094      	beq.n	8011af0 <_strtod_l+0xb0>
 8011bc6:	2600      	movs	r6, #0
 8011bc8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011bca:	1c6a      	adds	r2, r5, #1
 8011bcc:	9215      	str	r2, [sp, #84]	; 0x54
 8011bce:	786a      	ldrb	r2, [r5, #1]
 8011bd0:	2a2b      	cmp	r2, #43	; 0x2b
 8011bd2:	d074      	beq.n	8011cbe <_strtod_l+0x27e>
 8011bd4:	2a2d      	cmp	r2, #45	; 0x2d
 8011bd6:	d078      	beq.n	8011cca <_strtod_l+0x28a>
 8011bd8:	f04f 0c00 	mov.w	ip, #0
 8011bdc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011be0:	2909      	cmp	r1, #9
 8011be2:	d97f      	bls.n	8011ce4 <_strtod_l+0x2a4>
 8011be4:	9515      	str	r5, [sp, #84]	; 0x54
 8011be6:	2700      	movs	r7, #0
 8011be8:	e09e      	b.n	8011d28 <_strtod_l+0x2e8>
 8011bea:	2300      	movs	r3, #0
 8011bec:	e7c8      	b.n	8011b80 <_strtod_l+0x140>
 8011bee:	f1bb 0f08 	cmp.w	fp, #8
 8011bf2:	bfd8      	it	le
 8011bf4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011bf6:	f100 0001 	add.w	r0, r0, #1
 8011bfa:	bfda      	itte	le
 8011bfc:	fb02 3301 	mlale	r3, r2, r1, r3
 8011c00:	9309      	strle	r3, [sp, #36]	; 0x24
 8011c02:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011c06:	f10b 0b01 	add.w	fp, fp, #1
 8011c0a:	9015      	str	r0, [sp, #84]	; 0x54
 8011c0c:	e7c1      	b.n	8011b92 <_strtod_l+0x152>
 8011c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	9215      	str	r2, [sp, #84]	; 0x54
 8011c14:	785a      	ldrb	r2, [r3, #1]
 8011c16:	f1bb 0f00 	cmp.w	fp, #0
 8011c1a:	d037      	beq.n	8011c8c <_strtod_l+0x24c>
 8011c1c:	9005      	str	r0, [sp, #20]
 8011c1e:	465e      	mov	r6, fp
 8011c20:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011c24:	2b09      	cmp	r3, #9
 8011c26:	d912      	bls.n	8011c4e <_strtod_l+0x20e>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	e7c4      	b.n	8011bb6 <_strtod_l+0x176>
 8011c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c2e:	1c5a      	adds	r2, r3, #1
 8011c30:	9215      	str	r2, [sp, #84]	; 0x54
 8011c32:	785a      	ldrb	r2, [r3, #1]
 8011c34:	3001      	adds	r0, #1
 8011c36:	2a30      	cmp	r2, #48	; 0x30
 8011c38:	d0f8      	beq.n	8011c2c <_strtod_l+0x1ec>
 8011c3a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011c3e:	2b08      	cmp	r3, #8
 8011c40:	f200 84c1 	bhi.w	80125c6 <_strtod_l+0xb86>
 8011c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c46:	9005      	str	r0, [sp, #20]
 8011c48:	2000      	movs	r0, #0
 8011c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	3a30      	subs	r2, #48	; 0x30
 8011c50:	f100 0301 	add.w	r3, r0, #1
 8011c54:	d014      	beq.n	8011c80 <_strtod_l+0x240>
 8011c56:	9905      	ldr	r1, [sp, #20]
 8011c58:	4419      	add	r1, r3
 8011c5a:	9105      	str	r1, [sp, #20]
 8011c5c:	4633      	mov	r3, r6
 8011c5e:	eb00 0c06 	add.w	ip, r0, r6
 8011c62:	210a      	movs	r1, #10
 8011c64:	4563      	cmp	r3, ip
 8011c66:	d113      	bne.n	8011c90 <_strtod_l+0x250>
 8011c68:	1833      	adds	r3, r6, r0
 8011c6a:	2b08      	cmp	r3, #8
 8011c6c:	f106 0601 	add.w	r6, r6, #1
 8011c70:	4406      	add	r6, r0
 8011c72:	dc1a      	bgt.n	8011caa <_strtod_l+0x26a>
 8011c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c76:	230a      	movs	r3, #10
 8011c78:	fb03 2301 	mla	r3, r3, r1, r2
 8011c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8011c7e:	2300      	movs	r3, #0
 8011c80:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011c82:	1c51      	adds	r1, r2, #1
 8011c84:	9115      	str	r1, [sp, #84]	; 0x54
 8011c86:	7852      	ldrb	r2, [r2, #1]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	e7c9      	b.n	8011c20 <_strtod_l+0x1e0>
 8011c8c:	4658      	mov	r0, fp
 8011c8e:	e7d2      	b.n	8011c36 <_strtod_l+0x1f6>
 8011c90:	2b08      	cmp	r3, #8
 8011c92:	f103 0301 	add.w	r3, r3, #1
 8011c96:	dc03      	bgt.n	8011ca0 <_strtod_l+0x260>
 8011c98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011c9a:	434f      	muls	r7, r1
 8011c9c:	9709      	str	r7, [sp, #36]	; 0x24
 8011c9e:	e7e1      	b.n	8011c64 <_strtod_l+0x224>
 8011ca0:	2b10      	cmp	r3, #16
 8011ca2:	bfd8      	it	le
 8011ca4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8011ca8:	e7dc      	b.n	8011c64 <_strtod_l+0x224>
 8011caa:	2e10      	cmp	r6, #16
 8011cac:	bfdc      	itt	le
 8011cae:	230a      	movle	r3, #10
 8011cb0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8011cb4:	e7e3      	b.n	8011c7e <_strtod_l+0x23e>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	9305      	str	r3, [sp, #20]
 8011cba:	2301      	movs	r3, #1
 8011cbc:	e780      	b.n	8011bc0 <_strtod_l+0x180>
 8011cbe:	f04f 0c00 	mov.w	ip, #0
 8011cc2:	1caa      	adds	r2, r5, #2
 8011cc4:	9215      	str	r2, [sp, #84]	; 0x54
 8011cc6:	78aa      	ldrb	r2, [r5, #2]
 8011cc8:	e788      	b.n	8011bdc <_strtod_l+0x19c>
 8011cca:	f04f 0c01 	mov.w	ip, #1
 8011cce:	e7f8      	b.n	8011cc2 <_strtod_l+0x282>
 8011cd0:	08015908 	.word	0x08015908
 8011cd4:	08015904 	.word	0x08015904
 8011cd8:	7ff00000 	.word	0x7ff00000
 8011cdc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011cde:	1c51      	adds	r1, r2, #1
 8011ce0:	9115      	str	r1, [sp, #84]	; 0x54
 8011ce2:	7852      	ldrb	r2, [r2, #1]
 8011ce4:	2a30      	cmp	r2, #48	; 0x30
 8011ce6:	d0f9      	beq.n	8011cdc <_strtod_l+0x29c>
 8011ce8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011cec:	2908      	cmp	r1, #8
 8011cee:	f63f af7a 	bhi.w	8011be6 <_strtod_l+0x1a6>
 8011cf2:	3a30      	subs	r2, #48	; 0x30
 8011cf4:	9208      	str	r2, [sp, #32]
 8011cf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011cf8:	920c      	str	r2, [sp, #48]	; 0x30
 8011cfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011cfc:	1c57      	adds	r7, r2, #1
 8011cfe:	9715      	str	r7, [sp, #84]	; 0x54
 8011d00:	7852      	ldrb	r2, [r2, #1]
 8011d02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011d06:	f1be 0f09 	cmp.w	lr, #9
 8011d0a:	d938      	bls.n	8011d7e <_strtod_l+0x33e>
 8011d0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d0e:	1a7f      	subs	r7, r7, r1
 8011d10:	2f08      	cmp	r7, #8
 8011d12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011d16:	dc03      	bgt.n	8011d20 <_strtod_l+0x2e0>
 8011d18:	9908      	ldr	r1, [sp, #32]
 8011d1a:	428f      	cmp	r7, r1
 8011d1c:	bfa8      	it	ge
 8011d1e:	460f      	movge	r7, r1
 8011d20:	f1bc 0f00 	cmp.w	ip, #0
 8011d24:	d000      	beq.n	8011d28 <_strtod_l+0x2e8>
 8011d26:	427f      	negs	r7, r7
 8011d28:	2e00      	cmp	r6, #0
 8011d2a:	d14f      	bne.n	8011dcc <_strtod_l+0x38c>
 8011d2c:	9904      	ldr	r1, [sp, #16]
 8011d2e:	4301      	orrs	r1, r0
 8011d30:	f47f aec1 	bne.w	8011ab6 <_strtod_l+0x76>
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	f47f aedb 	bne.w	8011af0 <_strtod_l+0xb0>
 8011d3a:	2a69      	cmp	r2, #105	; 0x69
 8011d3c:	d029      	beq.n	8011d92 <_strtod_l+0x352>
 8011d3e:	dc26      	bgt.n	8011d8e <_strtod_l+0x34e>
 8011d40:	2a49      	cmp	r2, #73	; 0x49
 8011d42:	d026      	beq.n	8011d92 <_strtod_l+0x352>
 8011d44:	2a4e      	cmp	r2, #78	; 0x4e
 8011d46:	f47f aed3 	bne.w	8011af0 <_strtod_l+0xb0>
 8011d4a:	499b      	ldr	r1, [pc, #620]	; (8011fb8 <_strtod_l+0x578>)
 8011d4c:	a815      	add	r0, sp, #84	; 0x54
 8011d4e:	f001 fd9b 	bl	8013888 <__match>
 8011d52:	2800      	cmp	r0, #0
 8011d54:	f43f aecc 	beq.w	8011af0 <_strtod_l+0xb0>
 8011d58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	2b28      	cmp	r3, #40	; 0x28
 8011d5e:	d12f      	bne.n	8011dc0 <_strtod_l+0x380>
 8011d60:	4996      	ldr	r1, [pc, #600]	; (8011fbc <_strtod_l+0x57c>)
 8011d62:	aa18      	add	r2, sp, #96	; 0x60
 8011d64:	a815      	add	r0, sp, #84	; 0x54
 8011d66:	f001 fda3 	bl	80138b0 <__hexnan>
 8011d6a:	2805      	cmp	r0, #5
 8011d6c:	d128      	bne.n	8011dc0 <_strtod_l+0x380>
 8011d6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011d74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011d78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011d7c:	e69b      	b.n	8011ab6 <_strtod_l+0x76>
 8011d7e:	9f08      	ldr	r7, [sp, #32]
 8011d80:	210a      	movs	r1, #10
 8011d82:	fb01 2107 	mla	r1, r1, r7, r2
 8011d86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011d8a:	9208      	str	r2, [sp, #32]
 8011d8c:	e7b5      	b.n	8011cfa <_strtod_l+0x2ba>
 8011d8e:	2a6e      	cmp	r2, #110	; 0x6e
 8011d90:	e7d9      	b.n	8011d46 <_strtod_l+0x306>
 8011d92:	498b      	ldr	r1, [pc, #556]	; (8011fc0 <_strtod_l+0x580>)
 8011d94:	a815      	add	r0, sp, #84	; 0x54
 8011d96:	f001 fd77 	bl	8013888 <__match>
 8011d9a:	2800      	cmp	r0, #0
 8011d9c:	f43f aea8 	beq.w	8011af0 <_strtod_l+0xb0>
 8011da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011da2:	4988      	ldr	r1, [pc, #544]	; (8011fc4 <_strtod_l+0x584>)
 8011da4:	3b01      	subs	r3, #1
 8011da6:	a815      	add	r0, sp, #84	; 0x54
 8011da8:	9315      	str	r3, [sp, #84]	; 0x54
 8011daa:	f001 fd6d 	bl	8013888 <__match>
 8011dae:	b910      	cbnz	r0, 8011db6 <_strtod_l+0x376>
 8011db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011db2:	3301      	adds	r3, #1
 8011db4:	9315      	str	r3, [sp, #84]	; 0x54
 8011db6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8011fd4 <_strtod_l+0x594>
 8011dba:	f04f 0800 	mov.w	r8, #0
 8011dbe:	e67a      	b.n	8011ab6 <_strtod_l+0x76>
 8011dc0:	4881      	ldr	r0, [pc, #516]	; (8011fc8 <_strtod_l+0x588>)
 8011dc2:	f001 fa7d 	bl	80132c0 <nan>
 8011dc6:	ec59 8b10 	vmov	r8, r9, d0
 8011dca:	e674      	b.n	8011ab6 <_strtod_l+0x76>
 8011dcc:	9b05      	ldr	r3, [sp, #20]
 8011dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dd0:	1afb      	subs	r3, r7, r3
 8011dd2:	f1bb 0f00 	cmp.w	fp, #0
 8011dd6:	bf08      	it	eq
 8011dd8:	46b3      	moveq	fp, r6
 8011dda:	2e10      	cmp	r6, #16
 8011ddc:	9308      	str	r3, [sp, #32]
 8011dde:	4635      	mov	r5, r6
 8011de0:	bfa8      	it	ge
 8011de2:	2510      	movge	r5, #16
 8011de4:	f7ee fbb6 	bl	8000554 <__aeabi_ui2d>
 8011de8:	2e09      	cmp	r6, #9
 8011dea:	4680      	mov	r8, r0
 8011dec:	4689      	mov	r9, r1
 8011dee:	dd13      	ble.n	8011e18 <_strtod_l+0x3d8>
 8011df0:	4b76      	ldr	r3, [pc, #472]	; (8011fcc <_strtod_l+0x58c>)
 8011df2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011df6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011dfa:	f7ee fc25 	bl	8000648 <__aeabi_dmul>
 8011dfe:	4680      	mov	r8, r0
 8011e00:	4650      	mov	r0, sl
 8011e02:	4689      	mov	r9, r1
 8011e04:	f7ee fba6 	bl	8000554 <__aeabi_ui2d>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	460b      	mov	r3, r1
 8011e0c:	4640      	mov	r0, r8
 8011e0e:	4649      	mov	r1, r9
 8011e10:	f7ee fa64 	bl	80002dc <__adddf3>
 8011e14:	4680      	mov	r8, r0
 8011e16:	4689      	mov	r9, r1
 8011e18:	2e0f      	cmp	r6, #15
 8011e1a:	dc38      	bgt.n	8011e8e <_strtod_l+0x44e>
 8011e1c:	9b08      	ldr	r3, [sp, #32]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	f43f ae49 	beq.w	8011ab6 <_strtod_l+0x76>
 8011e24:	dd24      	ble.n	8011e70 <_strtod_l+0x430>
 8011e26:	2b16      	cmp	r3, #22
 8011e28:	dc0b      	bgt.n	8011e42 <_strtod_l+0x402>
 8011e2a:	4968      	ldr	r1, [pc, #416]	; (8011fcc <_strtod_l+0x58c>)
 8011e2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e34:	4642      	mov	r2, r8
 8011e36:	464b      	mov	r3, r9
 8011e38:	f7ee fc06 	bl	8000648 <__aeabi_dmul>
 8011e3c:	4680      	mov	r8, r0
 8011e3e:	4689      	mov	r9, r1
 8011e40:	e639      	b.n	8011ab6 <_strtod_l+0x76>
 8011e42:	9a08      	ldr	r2, [sp, #32]
 8011e44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011e48:	4293      	cmp	r3, r2
 8011e4a:	db20      	blt.n	8011e8e <_strtod_l+0x44e>
 8011e4c:	4c5f      	ldr	r4, [pc, #380]	; (8011fcc <_strtod_l+0x58c>)
 8011e4e:	f1c6 060f 	rsb	r6, r6, #15
 8011e52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8011e56:	4642      	mov	r2, r8
 8011e58:	464b      	mov	r3, r9
 8011e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e5e:	f7ee fbf3 	bl	8000648 <__aeabi_dmul>
 8011e62:	9b08      	ldr	r3, [sp, #32]
 8011e64:	1b9e      	subs	r6, r3, r6
 8011e66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011e6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011e6e:	e7e3      	b.n	8011e38 <_strtod_l+0x3f8>
 8011e70:	9b08      	ldr	r3, [sp, #32]
 8011e72:	3316      	adds	r3, #22
 8011e74:	db0b      	blt.n	8011e8e <_strtod_l+0x44e>
 8011e76:	9b05      	ldr	r3, [sp, #20]
 8011e78:	1bdf      	subs	r7, r3, r7
 8011e7a:	4b54      	ldr	r3, [pc, #336]	; (8011fcc <_strtod_l+0x58c>)
 8011e7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e84:	4640      	mov	r0, r8
 8011e86:	4649      	mov	r1, r9
 8011e88:	f7ee fd08 	bl	800089c <__aeabi_ddiv>
 8011e8c:	e7d6      	b.n	8011e3c <_strtod_l+0x3fc>
 8011e8e:	9b08      	ldr	r3, [sp, #32]
 8011e90:	1b75      	subs	r5, r6, r5
 8011e92:	441d      	add	r5, r3
 8011e94:	2d00      	cmp	r5, #0
 8011e96:	dd70      	ble.n	8011f7a <_strtod_l+0x53a>
 8011e98:	f015 030f 	ands.w	r3, r5, #15
 8011e9c:	d00a      	beq.n	8011eb4 <_strtod_l+0x474>
 8011e9e:	494b      	ldr	r1, [pc, #300]	; (8011fcc <_strtod_l+0x58c>)
 8011ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ea4:	4642      	mov	r2, r8
 8011ea6:	464b      	mov	r3, r9
 8011ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011eac:	f7ee fbcc 	bl	8000648 <__aeabi_dmul>
 8011eb0:	4680      	mov	r8, r0
 8011eb2:	4689      	mov	r9, r1
 8011eb4:	f035 050f 	bics.w	r5, r5, #15
 8011eb8:	d04d      	beq.n	8011f56 <_strtod_l+0x516>
 8011eba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8011ebe:	dd22      	ble.n	8011f06 <_strtod_l+0x4c6>
 8011ec0:	2500      	movs	r5, #0
 8011ec2:	46ab      	mov	fp, r5
 8011ec4:	9509      	str	r5, [sp, #36]	; 0x24
 8011ec6:	9505      	str	r5, [sp, #20]
 8011ec8:	2322      	movs	r3, #34	; 0x22
 8011eca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011fd4 <_strtod_l+0x594>
 8011ece:	6023      	str	r3, [r4, #0]
 8011ed0:	f04f 0800 	mov.w	r8, #0
 8011ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	f43f aded 	beq.w	8011ab6 <_strtod_l+0x76>
 8011edc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f7ff f924 	bl	801112c <_Bfree>
 8011ee4:	9905      	ldr	r1, [sp, #20]
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f7ff f920 	bl	801112c <_Bfree>
 8011eec:	4659      	mov	r1, fp
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f7ff f91c 	bl	801112c <_Bfree>
 8011ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f7ff f918 	bl	801112c <_Bfree>
 8011efc:	4629      	mov	r1, r5
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7ff f914 	bl	801112c <_Bfree>
 8011f04:	e5d7      	b.n	8011ab6 <_strtod_l+0x76>
 8011f06:	4b32      	ldr	r3, [pc, #200]	; (8011fd0 <_strtod_l+0x590>)
 8011f08:	9304      	str	r3, [sp, #16]
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	112d      	asrs	r5, r5, #4
 8011f0e:	4640      	mov	r0, r8
 8011f10:	4649      	mov	r1, r9
 8011f12:	469a      	mov	sl, r3
 8011f14:	2d01      	cmp	r5, #1
 8011f16:	dc21      	bgt.n	8011f5c <_strtod_l+0x51c>
 8011f18:	b10b      	cbz	r3, 8011f1e <_strtod_l+0x4de>
 8011f1a:	4680      	mov	r8, r0
 8011f1c:	4689      	mov	r9, r1
 8011f1e:	492c      	ldr	r1, [pc, #176]	; (8011fd0 <_strtod_l+0x590>)
 8011f20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011f24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011f28:	4642      	mov	r2, r8
 8011f2a:	464b      	mov	r3, r9
 8011f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f30:	f7ee fb8a 	bl	8000648 <__aeabi_dmul>
 8011f34:	4b27      	ldr	r3, [pc, #156]	; (8011fd4 <_strtod_l+0x594>)
 8011f36:	460a      	mov	r2, r1
 8011f38:	400b      	ands	r3, r1
 8011f3a:	4927      	ldr	r1, [pc, #156]	; (8011fd8 <_strtod_l+0x598>)
 8011f3c:	428b      	cmp	r3, r1
 8011f3e:	4680      	mov	r8, r0
 8011f40:	d8be      	bhi.n	8011ec0 <_strtod_l+0x480>
 8011f42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011f46:	428b      	cmp	r3, r1
 8011f48:	bf86      	itte	hi
 8011f4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8011fdc <_strtod_l+0x59c>
 8011f4e:	f04f 38ff 	movhi.w	r8, #4294967295
 8011f52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8011f56:	2300      	movs	r3, #0
 8011f58:	9304      	str	r3, [sp, #16]
 8011f5a:	e07b      	b.n	8012054 <_strtod_l+0x614>
 8011f5c:	07ea      	lsls	r2, r5, #31
 8011f5e:	d505      	bpl.n	8011f6c <_strtod_l+0x52c>
 8011f60:	9b04      	ldr	r3, [sp, #16]
 8011f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f66:	f7ee fb6f 	bl	8000648 <__aeabi_dmul>
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	9a04      	ldr	r2, [sp, #16]
 8011f6e:	3208      	adds	r2, #8
 8011f70:	f10a 0a01 	add.w	sl, sl, #1
 8011f74:	106d      	asrs	r5, r5, #1
 8011f76:	9204      	str	r2, [sp, #16]
 8011f78:	e7cc      	b.n	8011f14 <_strtod_l+0x4d4>
 8011f7a:	d0ec      	beq.n	8011f56 <_strtod_l+0x516>
 8011f7c:	426d      	negs	r5, r5
 8011f7e:	f015 020f 	ands.w	r2, r5, #15
 8011f82:	d00a      	beq.n	8011f9a <_strtod_l+0x55a>
 8011f84:	4b11      	ldr	r3, [pc, #68]	; (8011fcc <_strtod_l+0x58c>)
 8011f86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f8a:	4640      	mov	r0, r8
 8011f8c:	4649      	mov	r1, r9
 8011f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f92:	f7ee fc83 	bl	800089c <__aeabi_ddiv>
 8011f96:	4680      	mov	r8, r0
 8011f98:	4689      	mov	r9, r1
 8011f9a:	112d      	asrs	r5, r5, #4
 8011f9c:	d0db      	beq.n	8011f56 <_strtod_l+0x516>
 8011f9e:	2d1f      	cmp	r5, #31
 8011fa0:	dd1e      	ble.n	8011fe0 <_strtod_l+0x5a0>
 8011fa2:	2500      	movs	r5, #0
 8011fa4:	46ab      	mov	fp, r5
 8011fa6:	9509      	str	r5, [sp, #36]	; 0x24
 8011fa8:	9505      	str	r5, [sp, #20]
 8011faa:	2322      	movs	r3, #34	; 0x22
 8011fac:	f04f 0800 	mov.w	r8, #0
 8011fb0:	f04f 0900 	mov.w	r9, #0
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	e78d      	b.n	8011ed4 <_strtod_l+0x494>
 8011fb8:	080156f5 	.word	0x080156f5
 8011fbc:	0801591c 	.word	0x0801591c
 8011fc0:	080156ed 	.word	0x080156ed
 8011fc4:	08015722 	.word	0x08015722
 8011fc8:	08015ac8 	.word	0x08015ac8
 8011fcc:	08015830 	.word	0x08015830
 8011fd0:	08015808 	.word	0x08015808
 8011fd4:	7ff00000 	.word	0x7ff00000
 8011fd8:	7ca00000 	.word	0x7ca00000
 8011fdc:	7fefffff 	.word	0x7fefffff
 8011fe0:	f015 0310 	ands.w	r3, r5, #16
 8011fe4:	bf18      	it	ne
 8011fe6:	236a      	movne	r3, #106	; 0x6a
 8011fe8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801238c <_strtod_l+0x94c>
 8011fec:	9304      	str	r3, [sp, #16]
 8011fee:	4640      	mov	r0, r8
 8011ff0:	4649      	mov	r1, r9
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	07ea      	lsls	r2, r5, #31
 8011ff6:	d504      	bpl.n	8012002 <_strtod_l+0x5c2>
 8011ff8:	e9da 2300 	ldrd	r2, r3, [sl]
 8011ffc:	f7ee fb24 	bl	8000648 <__aeabi_dmul>
 8012000:	2301      	movs	r3, #1
 8012002:	106d      	asrs	r5, r5, #1
 8012004:	f10a 0a08 	add.w	sl, sl, #8
 8012008:	d1f4      	bne.n	8011ff4 <_strtod_l+0x5b4>
 801200a:	b10b      	cbz	r3, 8012010 <_strtod_l+0x5d0>
 801200c:	4680      	mov	r8, r0
 801200e:	4689      	mov	r9, r1
 8012010:	9b04      	ldr	r3, [sp, #16]
 8012012:	b1bb      	cbz	r3, 8012044 <_strtod_l+0x604>
 8012014:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012018:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801201c:	2b00      	cmp	r3, #0
 801201e:	4649      	mov	r1, r9
 8012020:	dd10      	ble.n	8012044 <_strtod_l+0x604>
 8012022:	2b1f      	cmp	r3, #31
 8012024:	f340 811e 	ble.w	8012264 <_strtod_l+0x824>
 8012028:	2b34      	cmp	r3, #52	; 0x34
 801202a:	bfde      	ittt	le
 801202c:	f04f 33ff 	movle.w	r3, #4294967295
 8012030:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012034:	4093      	lslle	r3, r2
 8012036:	f04f 0800 	mov.w	r8, #0
 801203a:	bfcc      	ite	gt
 801203c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012040:	ea03 0901 	andle.w	r9, r3, r1
 8012044:	2200      	movs	r2, #0
 8012046:	2300      	movs	r3, #0
 8012048:	4640      	mov	r0, r8
 801204a:	4649      	mov	r1, r9
 801204c:	f7ee fd64 	bl	8000b18 <__aeabi_dcmpeq>
 8012050:	2800      	cmp	r0, #0
 8012052:	d1a6      	bne.n	8011fa2 <_strtod_l+0x562>
 8012054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012056:	9300      	str	r3, [sp, #0]
 8012058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801205a:	4633      	mov	r3, r6
 801205c:	465a      	mov	r2, fp
 801205e:	4620      	mov	r0, r4
 8012060:	f7ff f8cc 	bl	80111fc <__s2b>
 8012064:	9009      	str	r0, [sp, #36]	; 0x24
 8012066:	2800      	cmp	r0, #0
 8012068:	f43f af2a 	beq.w	8011ec0 <_strtod_l+0x480>
 801206c:	9a08      	ldr	r2, [sp, #32]
 801206e:	9b05      	ldr	r3, [sp, #20]
 8012070:	2a00      	cmp	r2, #0
 8012072:	eba3 0307 	sub.w	r3, r3, r7
 8012076:	bfa8      	it	ge
 8012078:	2300      	movge	r3, #0
 801207a:	930c      	str	r3, [sp, #48]	; 0x30
 801207c:	2500      	movs	r5, #0
 801207e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012082:	9312      	str	r3, [sp, #72]	; 0x48
 8012084:	46ab      	mov	fp, r5
 8012086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012088:	4620      	mov	r0, r4
 801208a:	6859      	ldr	r1, [r3, #4]
 801208c:	f7ff f80e 	bl	80110ac <_Balloc>
 8012090:	9005      	str	r0, [sp, #20]
 8012092:	2800      	cmp	r0, #0
 8012094:	f43f af18 	beq.w	8011ec8 <_strtod_l+0x488>
 8012098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801209a:	691a      	ldr	r2, [r3, #16]
 801209c:	3202      	adds	r2, #2
 801209e:	f103 010c 	add.w	r1, r3, #12
 80120a2:	0092      	lsls	r2, r2, #2
 80120a4:	300c      	adds	r0, #12
 80120a6:	f7fe f872 	bl	801018e <memcpy>
 80120aa:	ec49 8b10 	vmov	d0, r8, r9
 80120ae:	aa18      	add	r2, sp, #96	; 0x60
 80120b0:	a917      	add	r1, sp, #92	; 0x5c
 80120b2:	4620      	mov	r0, r4
 80120b4:	f7ff fbd6 	bl	8011864 <__d2b>
 80120b8:	ec49 8b18 	vmov	d8, r8, r9
 80120bc:	9016      	str	r0, [sp, #88]	; 0x58
 80120be:	2800      	cmp	r0, #0
 80120c0:	f43f af02 	beq.w	8011ec8 <_strtod_l+0x488>
 80120c4:	2101      	movs	r1, #1
 80120c6:	4620      	mov	r0, r4
 80120c8:	f7ff f930 	bl	801132c <__i2b>
 80120cc:	4683      	mov	fp, r0
 80120ce:	2800      	cmp	r0, #0
 80120d0:	f43f aefa 	beq.w	8011ec8 <_strtod_l+0x488>
 80120d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80120d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80120d8:	2e00      	cmp	r6, #0
 80120da:	bfab      	itete	ge
 80120dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80120de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80120e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80120e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80120e6:	bfac      	ite	ge
 80120e8:	eb06 0a03 	addge.w	sl, r6, r3
 80120ec:	1b9f      	sublt	r7, r3, r6
 80120ee:	9b04      	ldr	r3, [sp, #16]
 80120f0:	1af6      	subs	r6, r6, r3
 80120f2:	4416      	add	r6, r2
 80120f4:	4ba0      	ldr	r3, [pc, #640]	; (8012378 <_strtod_l+0x938>)
 80120f6:	3e01      	subs	r6, #1
 80120f8:	429e      	cmp	r6, r3
 80120fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80120fe:	f280 80c4 	bge.w	801228a <_strtod_l+0x84a>
 8012102:	1b9b      	subs	r3, r3, r6
 8012104:	2b1f      	cmp	r3, #31
 8012106:	eba2 0203 	sub.w	r2, r2, r3
 801210a:	f04f 0101 	mov.w	r1, #1
 801210e:	f300 80b0 	bgt.w	8012272 <_strtod_l+0x832>
 8012112:	fa01 f303 	lsl.w	r3, r1, r3
 8012116:	930e      	str	r3, [sp, #56]	; 0x38
 8012118:	2300      	movs	r3, #0
 801211a:	930d      	str	r3, [sp, #52]	; 0x34
 801211c:	eb0a 0602 	add.w	r6, sl, r2
 8012120:	9b04      	ldr	r3, [sp, #16]
 8012122:	45b2      	cmp	sl, r6
 8012124:	4417      	add	r7, r2
 8012126:	441f      	add	r7, r3
 8012128:	4653      	mov	r3, sl
 801212a:	bfa8      	it	ge
 801212c:	4633      	movge	r3, r6
 801212e:	42bb      	cmp	r3, r7
 8012130:	bfa8      	it	ge
 8012132:	463b      	movge	r3, r7
 8012134:	2b00      	cmp	r3, #0
 8012136:	bfc2      	ittt	gt
 8012138:	1af6      	subgt	r6, r6, r3
 801213a:	1aff      	subgt	r7, r7, r3
 801213c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012142:	2b00      	cmp	r3, #0
 8012144:	dd17      	ble.n	8012176 <_strtod_l+0x736>
 8012146:	4659      	mov	r1, fp
 8012148:	461a      	mov	r2, r3
 801214a:	4620      	mov	r0, r4
 801214c:	f7ff f9ae 	bl	80114ac <__pow5mult>
 8012150:	4683      	mov	fp, r0
 8012152:	2800      	cmp	r0, #0
 8012154:	f43f aeb8 	beq.w	8011ec8 <_strtod_l+0x488>
 8012158:	4601      	mov	r1, r0
 801215a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801215c:	4620      	mov	r0, r4
 801215e:	f7ff f8fb 	bl	8011358 <__multiply>
 8012162:	900b      	str	r0, [sp, #44]	; 0x2c
 8012164:	2800      	cmp	r0, #0
 8012166:	f43f aeaf 	beq.w	8011ec8 <_strtod_l+0x488>
 801216a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801216c:	4620      	mov	r0, r4
 801216e:	f7fe ffdd 	bl	801112c <_Bfree>
 8012172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012174:	9316      	str	r3, [sp, #88]	; 0x58
 8012176:	2e00      	cmp	r6, #0
 8012178:	f300 808c 	bgt.w	8012294 <_strtod_l+0x854>
 801217c:	9b08      	ldr	r3, [sp, #32]
 801217e:	2b00      	cmp	r3, #0
 8012180:	dd08      	ble.n	8012194 <_strtod_l+0x754>
 8012182:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012184:	9905      	ldr	r1, [sp, #20]
 8012186:	4620      	mov	r0, r4
 8012188:	f7ff f990 	bl	80114ac <__pow5mult>
 801218c:	9005      	str	r0, [sp, #20]
 801218e:	2800      	cmp	r0, #0
 8012190:	f43f ae9a 	beq.w	8011ec8 <_strtod_l+0x488>
 8012194:	2f00      	cmp	r7, #0
 8012196:	dd08      	ble.n	80121aa <_strtod_l+0x76a>
 8012198:	9905      	ldr	r1, [sp, #20]
 801219a:	463a      	mov	r2, r7
 801219c:	4620      	mov	r0, r4
 801219e:	f7ff f9df 	bl	8011560 <__lshift>
 80121a2:	9005      	str	r0, [sp, #20]
 80121a4:	2800      	cmp	r0, #0
 80121a6:	f43f ae8f 	beq.w	8011ec8 <_strtod_l+0x488>
 80121aa:	f1ba 0f00 	cmp.w	sl, #0
 80121ae:	dd08      	ble.n	80121c2 <_strtod_l+0x782>
 80121b0:	4659      	mov	r1, fp
 80121b2:	4652      	mov	r2, sl
 80121b4:	4620      	mov	r0, r4
 80121b6:	f7ff f9d3 	bl	8011560 <__lshift>
 80121ba:	4683      	mov	fp, r0
 80121bc:	2800      	cmp	r0, #0
 80121be:	f43f ae83 	beq.w	8011ec8 <_strtod_l+0x488>
 80121c2:	9a05      	ldr	r2, [sp, #20]
 80121c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80121c6:	4620      	mov	r0, r4
 80121c8:	f7ff fa52 	bl	8011670 <__mdiff>
 80121cc:	4605      	mov	r5, r0
 80121ce:	2800      	cmp	r0, #0
 80121d0:	f43f ae7a 	beq.w	8011ec8 <_strtod_l+0x488>
 80121d4:	68c3      	ldr	r3, [r0, #12]
 80121d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80121d8:	2300      	movs	r3, #0
 80121da:	60c3      	str	r3, [r0, #12]
 80121dc:	4659      	mov	r1, fp
 80121de:	f7ff fa2b 	bl	8011638 <__mcmp>
 80121e2:	2800      	cmp	r0, #0
 80121e4:	da60      	bge.n	80122a8 <_strtod_l+0x868>
 80121e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121e8:	ea53 0308 	orrs.w	r3, r3, r8
 80121ec:	f040 8084 	bne.w	80122f8 <_strtod_l+0x8b8>
 80121f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d17f      	bne.n	80122f8 <_strtod_l+0x8b8>
 80121f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80121fc:	0d1b      	lsrs	r3, r3, #20
 80121fe:	051b      	lsls	r3, r3, #20
 8012200:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012204:	d978      	bls.n	80122f8 <_strtod_l+0x8b8>
 8012206:	696b      	ldr	r3, [r5, #20]
 8012208:	b913      	cbnz	r3, 8012210 <_strtod_l+0x7d0>
 801220a:	692b      	ldr	r3, [r5, #16]
 801220c:	2b01      	cmp	r3, #1
 801220e:	dd73      	ble.n	80122f8 <_strtod_l+0x8b8>
 8012210:	4629      	mov	r1, r5
 8012212:	2201      	movs	r2, #1
 8012214:	4620      	mov	r0, r4
 8012216:	f7ff f9a3 	bl	8011560 <__lshift>
 801221a:	4659      	mov	r1, fp
 801221c:	4605      	mov	r5, r0
 801221e:	f7ff fa0b 	bl	8011638 <__mcmp>
 8012222:	2800      	cmp	r0, #0
 8012224:	dd68      	ble.n	80122f8 <_strtod_l+0x8b8>
 8012226:	9904      	ldr	r1, [sp, #16]
 8012228:	4a54      	ldr	r2, [pc, #336]	; (801237c <_strtod_l+0x93c>)
 801222a:	464b      	mov	r3, r9
 801222c:	2900      	cmp	r1, #0
 801222e:	f000 8084 	beq.w	801233a <_strtod_l+0x8fa>
 8012232:	ea02 0109 	and.w	r1, r2, r9
 8012236:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801223a:	dc7e      	bgt.n	801233a <_strtod_l+0x8fa>
 801223c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012240:	f77f aeb3 	ble.w	8011faa <_strtod_l+0x56a>
 8012244:	4b4e      	ldr	r3, [pc, #312]	; (8012380 <_strtod_l+0x940>)
 8012246:	4640      	mov	r0, r8
 8012248:	4649      	mov	r1, r9
 801224a:	2200      	movs	r2, #0
 801224c:	f7ee f9fc 	bl	8000648 <__aeabi_dmul>
 8012250:	4b4a      	ldr	r3, [pc, #296]	; (801237c <_strtod_l+0x93c>)
 8012252:	400b      	ands	r3, r1
 8012254:	4680      	mov	r8, r0
 8012256:	4689      	mov	r9, r1
 8012258:	2b00      	cmp	r3, #0
 801225a:	f47f ae3f 	bne.w	8011edc <_strtod_l+0x49c>
 801225e:	2322      	movs	r3, #34	; 0x22
 8012260:	6023      	str	r3, [r4, #0]
 8012262:	e63b      	b.n	8011edc <_strtod_l+0x49c>
 8012264:	f04f 32ff 	mov.w	r2, #4294967295
 8012268:	fa02 f303 	lsl.w	r3, r2, r3
 801226c:	ea03 0808 	and.w	r8, r3, r8
 8012270:	e6e8      	b.n	8012044 <_strtod_l+0x604>
 8012272:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012276:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801227a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801227e:	36e2      	adds	r6, #226	; 0xe2
 8012280:	fa01 f306 	lsl.w	r3, r1, r6
 8012284:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012288:	e748      	b.n	801211c <_strtod_l+0x6dc>
 801228a:	2100      	movs	r1, #0
 801228c:	2301      	movs	r3, #1
 801228e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012292:	e743      	b.n	801211c <_strtod_l+0x6dc>
 8012294:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012296:	4632      	mov	r2, r6
 8012298:	4620      	mov	r0, r4
 801229a:	f7ff f961 	bl	8011560 <__lshift>
 801229e:	9016      	str	r0, [sp, #88]	; 0x58
 80122a0:	2800      	cmp	r0, #0
 80122a2:	f47f af6b 	bne.w	801217c <_strtod_l+0x73c>
 80122a6:	e60f      	b.n	8011ec8 <_strtod_l+0x488>
 80122a8:	46ca      	mov	sl, r9
 80122aa:	d171      	bne.n	8012390 <_strtod_l+0x950>
 80122ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80122ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80122b2:	b352      	cbz	r2, 801230a <_strtod_l+0x8ca>
 80122b4:	4a33      	ldr	r2, [pc, #204]	; (8012384 <_strtod_l+0x944>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d12a      	bne.n	8012310 <_strtod_l+0x8d0>
 80122ba:	9b04      	ldr	r3, [sp, #16]
 80122bc:	4641      	mov	r1, r8
 80122be:	b1fb      	cbz	r3, 8012300 <_strtod_l+0x8c0>
 80122c0:	4b2e      	ldr	r3, [pc, #184]	; (801237c <_strtod_l+0x93c>)
 80122c2:	ea09 0303 	and.w	r3, r9, r3
 80122c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80122ca:	f04f 32ff 	mov.w	r2, #4294967295
 80122ce:	d81a      	bhi.n	8012306 <_strtod_l+0x8c6>
 80122d0:	0d1b      	lsrs	r3, r3, #20
 80122d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80122d6:	fa02 f303 	lsl.w	r3, r2, r3
 80122da:	4299      	cmp	r1, r3
 80122dc:	d118      	bne.n	8012310 <_strtod_l+0x8d0>
 80122de:	4b2a      	ldr	r3, [pc, #168]	; (8012388 <_strtod_l+0x948>)
 80122e0:	459a      	cmp	sl, r3
 80122e2:	d102      	bne.n	80122ea <_strtod_l+0x8aa>
 80122e4:	3101      	adds	r1, #1
 80122e6:	f43f adef 	beq.w	8011ec8 <_strtod_l+0x488>
 80122ea:	4b24      	ldr	r3, [pc, #144]	; (801237c <_strtod_l+0x93c>)
 80122ec:	ea0a 0303 	and.w	r3, sl, r3
 80122f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80122f4:	f04f 0800 	mov.w	r8, #0
 80122f8:	9b04      	ldr	r3, [sp, #16]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d1a2      	bne.n	8012244 <_strtod_l+0x804>
 80122fe:	e5ed      	b.n	8011edc <_strtod_l+0x49c>
 8012300:	f04f 33ff 	mov.w	r3, #4294967295
 8012304:	e7e9      	b.n	80122da <_strtod_l+0x89a>
 8012306:	4613      	mov	r3, r2
 8012308:	e7e7      	b.n	80122da <_strtod_l+0x89a>
 801230a:	ea53 0308 	orrs.w	r3, r3, r8
 801230e:	d08a      	beq.n	8012226 <_strtod_l+0x7e6>
 8012310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012312:	b1e3      	cbz	r3, 801234e <_strtod_l+0x90e>
 8012314:	ea13 0f0a 	tst.w	r3, sl
 8012318:	d0ee      	beq.n	80122f8 <_strtod_l+0x8b8>
 801231a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801231c:	9a04      	ldr	r2, [sp, #16]
 801231e:	4640      	mov	r0, r8
 8012320:	4649      	mov	r1, r9
 8012322:	b1c3      	cbz	r3, 8012356 <_strtod_l+0x916>
 8012324:	f7ff fb6f 	bl	8011a06 <sulp>
 8012328:	4602      	mov	r2, r0
 801232a:	460b      	mov	r3, r1
 801232c:	ec51 0b18 	vmov	r0, r1, d8
 8012330:	f7ed ffd4 	bl	80002dc <__adddf3>
 8012334:	4680      	mov	r8, r0
 8012336:	4689      	mov	r9, r1
 8012338:	e7de      	b.n	80122f8 <_strtod_l+0x8b8>
 801233a:	4013      	ands	r3, r2
 801233c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012340:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012344:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012348:	f04f 38ff 	mov.w	r8, #4294967295
 801234c:	e7d4      	b.n	80122f8 <_strtod_l+0x8b8>
 801234e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012350:	ea13 0f08 	tst.w	r3, r8
 8012354:	e7e0      	b.n	8012318 <_strtod_l+0x8d8>
 8012356:	f7ff fb56 	bl	8011a06 <sulp>
 801235a:	4602      	mov	r2, r0
 801235c:	460b      	mov	r3, r1
 801235e:	ec51 0b18 	vmov	r0, r1, d8
 8012362:	f7ed ffb9 	bl	80002d8 <__aeabi_dsub>
 8012366:	2200      	movs	r2, #0
 8012368:	2300      	movs	r3, #0
 801236a:	4680      	mov	r8, r0
 801236c:	4689      	mov	r9, r1
 801236e:	f7ee fbd3 	bl	8000b18 <__aeabi_dcmpeq>
 8012372:	2800      	cmp	r0, #0
 8012374:	d0c0      	beq.n	80122f8 <_strtod_l+0x8b8>
 8012376:	e618      	b.n	8011faa <_strtod_l+0x56a>
 8012378:	fffffc02 	.word	0xfffffc02
 801237c:	7ff00000 	.word	0x7ff00000
 8012380:	39500000 	.word	0x39500000
 8012384:	000fffff 	.word	0x000fffff
 8012388:	7fefffff 	.word	0x7fefffff
 801238c:	08015930 	.word	0x08015930
 8012390:	4659      	mov	r1, fp
 8012392:	4628      	mov	r0, r5
 8012394:	f7ff fac0 	bl	8011918 <__ratio>
 8012398:	ec57 6b10 	vmov	r6, r7, d0
 801239c:	ee10 0a10 	vmov	r0, s0
 80123a0:	2200      	movs	r2, #0
 80123a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123a6:	4639      	mov	r1, r7
 80123a8:	f7ee fbca 	bl	8000b40 <__aeabi_dcmple>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	d071      	beq.n	8012494 <_strtod_l+0xa54>
 80123b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d17c      	bne.n	80124b0 <_strtod_l+0xa70>
 80123b6:	f1b8 0f00 	cmp.w	r8, #0
 80123ba:	d15a      	bne.n	8012472 <_strtod_l+0xa32>
 80123bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d15d      	bne.n	8012480 <_strtod_l+0xa40>
 80123c4:	4b90      	ldr	r3, [pc, #576]	; (8012608 <_strtod_l+0xbc8>)
 80123c6:	2200      	movs	r2, #0
 80123c8:	4630      	mov	r0, r6
 80123ca:	4639      	mov	r1, r7
 80123cc:	f7ee fbae 	bl	8000b2c <__aeabi_dcmplt>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	d15c      	bne.n	801248e <_strtod_l+0xa4e>
 80123d4:	4630      	mov	r0, r6
 80123d6:	4639      	mov	r1, r7
 80123d8:	4b8c      	ldr	r3, [pc, #560]	; (801260c <_strtod_l+0xbcc>)
 80123da:	2200      	movs	r2, #0
 80123dc:	f7ee f934 	bl	8000648 <__aeabi_dmul>
 80123e0:	4606      	mov	r6, r0
 80123e2:	460f      	mov	r7, r1
 80123e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80123e8:	9606      	str	r6, [sp, #24]
 80123ea:	9307      	str	r3, [sp, #28]
 80123ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80123f4:	4b86      	ldr	r3, [pc, #536]	; (8012610 <_strtod_l+0xbd0>)
 80123f6:	ea0a 0303 	and.w	r3, sl, r3
 80123fa:	930d      	str	r3, [sp, #52]	; 0x34
 80123fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123fe:	4b85      	ldr	r3, [pc, #532]	; (8012614 <_strtod_l+0xbd4>)
 8012400:	429a      	cmp	r2, r3
 8012402:	f040 8090 	bne.w	8012526 <_strtod_l+0xae6>
 8012406:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801240a:	ec49 8b10 	vmov	d0, r8, r9
 801240e:	f7ff f9b9 	bl	8011784 <__ulp>
 8012412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012416:	ec51 0b10 	vmov	r0, r1, d0
 801241a:	f7ee f915 	bl	8000648 <__aeabi_dmul>
 801241e:	4642      	mov	r2, r8
 8012420:	464b      	mov	r3, r9
 8012422:	f7ed ff5b 	bl	80002dc <__adddf3>
 8012426:	460b      	mov	r3, r1
 8012428:	4979      	ldr	r1, [pc, #484]	; (8012610 <_strtod_l+0xbd0>)
 801242a:	4a7b      	ldr	r2, [pc, #492]	; (8012618 <_strtod_l+0xbd8>)
 801242c:	4019      	ands	r1, r3
 801242e:	4291      	cmp	r1, r2
 8012430:	4680      	mov	r8, r0
 8012432:	d944      	bls.n	80124be <_strtod_l+0xa7e>
 8012434:	ee18 2a90 	vmov	r2, s17
 8012438:	4b78      	ldr	r3, [pc, #480]	; (801261c <_strtod_l+0xbdc>)
 801243a:	429a      	cmp	r2, r3
 801243c:	d104      	bne.n	8012448 <_strtod_l+0xa08>
 801243e:	ee18 3a10 	vmov	r3, s16
 8012442:	3301      	adds	r3, #1
 8012444:	f43f ad40 	beq.w	8011ec8 <_strtod_l+0x488>
 8012448:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801261c <_strtod_l+0xbdc>
 801244c:	f04f 38ff 	mov.w	r8, #4294967295
 8012450:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012452:	4620      	mov	r0, r4
 8012454:	f7fe fe6a 	bl	801112c <_Bfree>
 8012458:	9905      	ldr	r1, [sp, #20]
 801245a:	4620      	mov	r0, r4
 801245c:	f7fe fe66 	bl	801112c <_Bfree>
 8012460:	4659      	mov	r1, fp
 8012462:	4620      	mov	r0, r4
 8012464:	f7fe fe62 	bl	801112c <_Bfree>
 8012468:	4629      	mov	r1, r5
 801246a:	4620      	mov	r0, r4
 801246c:	f7fe fe5e 	bl	801112c <_Bfree>
 8012470:	e609      	b.n	8012086 <_strtod_l+0x646>
 8012472:	f1b8 0f01 	cmp.w	r8, #1
 8012476:	d103      	bne.n	8012480 <_strtod_l+0xa40>
 8012478:	f1b9 0f00 	cmp.w	r9, #0
 801247c:	f43f ad95 	beq.w	8011faa <_strtod_l+0x56a>
 8012480:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80125d8 <_strtod_l+0xb98>
 8012484:	4f60      	ldr	r7, [pc, #384]	; (8012608 <_strtod_l+0xbc8>)
 8012486:	ed8d 7b06 	vstr	d7, [sp, #24]
 801248a:	2600      	movs	r6, #0
 801248c:	e7ae      	b.n	80123ec <_strtod_l+0x9ac>
 801248e:	4f5f      	ldr	r7, [pc, #380]	; (801260c <_strtod_l+0xbcc>)
 8012490:	2600      	movs	r6, #0
 8012492:	e7a7      	b.n	80123e4 <_strtod_l+0x9a4>
 8012494:	4b5d      	ldr	r3, [pc, #372]	; (801260c <_strtod_l+0xbcc>)
 8012496:	4630      	mov	r0, r6
 8012498:	4639      	mov	r1, r7
 801249a:	2200      	movs	r2, #0
 801249c:	f7ee f8d4 	bl	8000648 <__aeabi_dmul>
 80124a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124a2:	4606      	mov	r6, r0
 80124a4:	460f      	mov	r7, r1
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d09c      	beq.n	80123e4 <_strtod_l+0x9a4>
 80124aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80124ae:	e79d      	b.n	80123ec <_strtod_l+0x9ac>
 80124b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80125e0 <_strtod_l+0xba0>
 80124b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80124b8:	ec57 6b17 	vmov	r6, r7, d7
 80124bc:	e796      	b.n	80123ec <_strtod_l+0x9ac>
 80124be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80124c2:	9b04      	ldr	r3, [sp, #16]
 80124c4:	46ca      	mov	sl, r9
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1c2      	bne.n	8012450 <_strtod_l+0xa10>
 80124ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80124ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124d0:	0d1b      	lsrs	r3, r3, #20
 80124d2:	051b      	lsls	r3, r3, #20
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d1bb      	bne.n	8012450 <_strtod_l+0xa10>
 80124d8:	4630      	mov	r0, r6
 80124da:	4639      	mov	r1, r7
 80124dc:	f7ee fc64 	bl	8000da8 <__aeabi_d2lz>
 80124e0:	f7ee f884 	bl	80005ec <__aeabi_l2d>
 80124e4:	4602      	mov	r2, r0
 80124e6:	460b      	mov	r3, r1
 80124e8:	4630      	mov	r0, r6
 80124ea:	4639      	mov	r1, r7
 80124ec:	f7ed fef4 	bl	80002d8 <__aeabi_dsub>
 80124f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80124f6:	ea43 0308 	orr.w	r3, r3, r8
 80124fa:	4313      	orrs	r3, r2
 80124fc:	4606      	mov	r6, r0
 80124fe:	460f      	mov	r7, r1
 8012500:	d054      	beq.n	80125ac <_strtod_l+0xb6c>
 8012502:	a339      	add	r3, pc, #228	; (adr r3, 80125e8 <_strtod_l+0xba8>)
 8012504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012508:	f7ee fb10 	bl	8000b2c <__aeabi_dcmplt>
 801250c:	2800      	cmp	r0, #0
 801250e:	f47f ace5 	bne.w	8011edc <_strtod_l+0x49c>
 8012512:	a337      	add	r3, pc, #220	; (adr r3, 80125f0 <_strtod_l+0xbb0>)
 8012514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012518:	4630      	mov	r0, r6
 801251a:	4639      	mov	r1, r7
 801251c:	f7ee fb24 	bl	8000b68 <__aeabi_dcmpgt>
 8012520:	2800      	cmp	r0, #0
 8012522:	d095      	beq.n	8012450 <_strtod_l+0xa10>
 8012524:	e4da      	b.n	8011edc <_strtod_l+0x49c>
 8012526:	9b04      	ldr	r3, [sp, #16]
 8012528:	b333      	cbz	r3, 8012578 <_strtod_l+0xb38>
 801252a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801252c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012530:	d822      	bhi.n	8012578 <_strtod_l+0xb38>
 8012532:	a331      	add	r3, pc, #196	; (adr r3, 80125f8 <_strtod_l+0xbb8>)
 8012534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012538:	4630      	mov	r0, r6
 801253a:	4639      	mov	r1, r7
 801253c:	f7ee fb00 	bl	8000b40 <__aeabi_dcmple>
 8012540:	b1a0      	cbz	r0, 801256c <_strtod_l+0xb2c>
 8012542:	4639      	mov	r1, r7
 8012544:	4630      	mov	r0, r6
 8012546:	f7ee fb57 	bl	8000bf8 <__aeabi_d2uiz>
 801254a:	2801      	cmp	r0, #1
 801254c:	bf38      	it	cc
 801254e:	2001      	movcc	r0, #1
 8012550:	f7ee f800 	bl	8000554 <__aeabi_ui2d>
 8012554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012556:	4606      	mov	r6, r0
 8012558:	460f      	mov	r7, r1
 801255a:	bb23      	cbnz	r3, 80125a6 <_strtod_l+0xb66>
 801255c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012560:	9010      	str	r0, [sp, #64]	; 0x40
 8012562:	9311      	str	r3, [sp, #68]	; 0x44
 8012564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012568:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801256c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801256e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012570:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012574:	1a9b      	subs	r3, r3, r2
 8012576:	930f      	str	r3, [sp, #60]	; 0x3c
 8012578:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801257c:	eeb0 0a48 	vmov.f32	s0, s16
 8012580:	eef0 0a68 	vmov.f32	s1, s17
 8012584:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012588:	f7ff f8fc 	bl	8011784 <__ulp>
 801258c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012590:	ec53 2b10 	vmov	r2, r3, d0
 8012594:	f7ee f858 	bl	8000648 <__aeabi_dmul>
 8012598:	ec53 2b18 	vmov	r2, r3, d8
 801259c:	f7ed fe9e 	bl	80002dc <__adddf3>
 80125a0:	4680      	mov	r8, r0
 80125a2:	4689      	mov	r9, r1
 80125a4:	e78d      	b.n	80124c2 <_strtod_l+0xa82>
 80125a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80125aa:	e7db      	b.n	8012564 <_strtod_l+0xb24>
 80125ac:	a314      	add	r3, pc, #80	; (adr r3, 8012600 <_strtod_l+0xbc0>)
 80125ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b2:	f7ee fabb 	bl	8000b2c <__aeabi_dcmplt>
 80125b6:	e7b3      	b.n	8012520 <_strtod_l+0xae0>
 80125b8:	2300      	movs	r3, #0
 80125ba:	930a      	str	r3, [sp, #40]	; 0x28
 80125bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80125be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125c0:	6013      	str	r3, [r2, #0]
 80125c2:	f7ff ba7c 	b.w	8011abe <_strtod_l+0x7e>
 80125c6:	2a65      	cmp	r2, #101	; 0x65
 80125c8:	f43f ab75 	beq.w	8011cb6 <_strtod_l+0x276>
 80125cc:	2a45      	cmp	r2, #69	; 0x45
 80125ce:	f43f ab72 	beq.w	8011cb6 <_strtod_l+0x276>
 80125d2:	2301      	movs	r3, #1
 80125d4:	f7ff bbaa 	b.w	8011d2c <_strtod_l+0x2ec>
 80125d8:	00000000 	.word	0x00000000
 80125dc:	bff00000 	.word	0xbff00000
 80125e0:	00000000 	.word	0x00000000
 80125e4:	3ff00000 	.word	0x3ff00000
 80125e8:	94a03595 	.word	0x94a03595
 80125ec:	3fdfffff 	.word	0x3fdfffff
 80125f0:	35afe535 	.word	0x35afe535
 80125f4:	3fe00000 	.word	0x3fe00000
 80125f8:	ffc00000 	.word	0xffc00000
 80125fc:	41dfffff 	.word	0x41dfffff
 8012600:	94a03595 	.word	0x94a03595
 8012604:	3fcfffff 	.word	0x3fcfffff
 8012608:	3ff00000 	.word	0x3ff00000
 801260c:	3fe00000 	.word	0x3fe00000
 8012610:	7ff00000 	.word	0x7ff00000
 8012614:	7fe00000 	.word	0x7fe00000
 8012618:	7c9fffff 	.word	0x7c9fffff
 801261c:	7fefffff 	.word	0x7fefffff

08012620 <_strtod_r>:
 8012620:	4b01      	ldr	r3, [pc, #4]	; (8012628 <_strtod_r+0x8>)
 8012622:	f7ff ba0d 	b.w	8011a40 <_strtod_l>
 8012626:	bf00      	nop
 8012628:	20000074 	.word	0x20000074

0801262c <_strtol_l.constprop.0>:
 801262c:	2b01      	cmp	r3, #1
 801262e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012632:	d001      	beq.n	8012638 <_strtol_l.constprop.0+0xc>
 8012634:	2b24      	cmp	r3, #36	; 0x24
 8012636:	d906      	bls.n	8012646 <_strtol_l.constprop.0+0x1a>
 8012638:	f7fd fd7c 	bl	8010134 <__errno>
 801263c:	2316      	movs	r3, #22
 801263e:	6003      	str	r3, [r0, #0]
 8012640:	2000      	movs	r0, #0
 8012642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012646:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801272c <_strtol_l.constprop.0+0x100>
 801264a:	460d      	mov	r5, r1
 801264c:	462e      	mov	r6, r5
 801264e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012652:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012656:	f017 0708 	ands.w	r7, r7, #8
 801265a:	d1f7      	bne.n	801264c <_strtol_l.constprop.0+0x20>
 801265c:	2c2d      	cmp	r4, #45	; 0x2d
 801265e:	d132      	bne.n	80126c6 <_strtol_l.constprop.0+0x9a>
 8012660:	782c      	ldrb	r4, [r5, #0]
 8012662:	2701      	movs	r7, #1
 8012664:	1cb5      	adds	r5, r6, #2
 8012666:	2b00      	cmp	r3, #0
 8012668:	d05b      	beq.n	8012722 <_strtol_l.constprop.0+0xf6>
 801266a:	2b10      	cmp	r3, #16
 801266c:	d109      	bne.n	8012682 <_strtol_l.constprop.0+0x56>
 801266e:	2c30      	cmp	r4, #48	; 0x30
 8012670:	d107      	bne.n	8012682 <_strtol_l.constprop.0+0x56>
 8012672:	782c      	ldrb	r4, [r5, #0]
 8012674:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012678:	2c58      	cmp	r4, #88	; 0x58
 801267a:	d14d      	bne.n	8012718 <_strtol_l.constprop.0+0xec>
 801267c:	786c      	ldrb	r4, [r5, #1]
 801267e:	2310      	movs	r3, #16
 8012680:	3502      	adds	r5, #2
 8012682:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012686:	f108 38ff 	add.w	r8, r8, #4294967295
 801268a:	f04f 0e00 	mov.w	lr, #0
 801268e:	fbb8 f9f3 	udiv	r9, r8, r3
 8012692:	4676      	mov	r6, lr
 8012694:	fb03 8a19 	mls	sl, r3, r9, r8
 8012698:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801269c:	f1bc 0f09 	cmp.w	ip, #9
 80126a0:	d816      	bhi.n	80126d0 <_strtol_l.constprop.0+0xa4>
 80126a2:	4664      	mov	r4, ip
 80126a4:	42a3      	cmp	r3, r4
 80126a6:	dd24      	ble.n	80126f2 <_strtol_l.constprop.0+0xc6>
 80126a8:	f1be 3fff 	cmp.w	lr, #4294967295
 80126ac:	d008      	beq.n	80126c0 <_strtol_l.constprop.0+0x94>
 80126ae:	45b1      	cmp	r9, r6
 80126b0:	d31c      	bcc.n	80126ec <_strtol_l.constprop.0+0xc0>
 80126b2:	d101      	bne.n	80126b8 <_strtol_l.constprop.0+0x8c>
 80126b4:	45a2      	cmp	sl, r4
 80126b6:	db19      	blt.n	80126ec <_strtol_l.constprop.0+0xc0>
 80126b8:	fb06 4603 	mla	r6, r6, r3, r4
 80126bc:	f04f 0e01 	mov.w	lr, #1
 80126c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126c4:	e7e8      	b.n	8012698 <_strtol_l.constprop.0+0x6c>
 80126c6:	2c2b      	cmp	r4, #43	; 0x2b
 80126c8:	bf04      	itt	eq
 80126ca:	782c      	ldrbeq	r4, [r5, #0]
 80126cc:	1cb5      	addeq	r5, r6, #2
 80126ce:	e7ca      	b.n	8012666 <_strtol_l.constprop.0+0x3a>
 80126d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80126d4:	f1bc 0f19 	cmp.w	ip, #25
 80126d8:	d801      	bhi.n	80126de <_strtol_l.constprop.0+0xb2>
 80126da:	3c37      	subs	r4, #55	; 0x37
 80126dc:	e7e2      	b.n	80126a4 <_strtol_l.constprop.0+0x78>
 80126de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80126e2:	f1bc 0f19 	cmp.w	ip, #25
 80126e6:	d804      	bhi.n	80126f2 <_strtol_l.constprop.0+0xc6>
 80126e8:	3c57      	subs	r4, #87	; 0x57
 80126ea:	e7db      	b.n	80126a4 <_strtol_l.constprop.0+0x78>
 80126ec:	f04f 3eff 	mov.w	lr, #4294967295
 80126f0:	e7e6      	b.n	80126c0 <_strtol_l.constprop.0+0x94>
 80126f2:	f1be 3fff 	cmp.w	lr, #4294967295
 80126f6:	d105      	bne.n	8012704 <_strtol_l.constprop.0+0xd8>
 80126f8:	2322      	movs	r3, #34	; 0x22
 80126fa:	6003      	str	r3, [r0, #0]
 80126fc:	4646      	mov	r6, r8
 80126fe:	b942      	cbnz	r2, 8012712 <_strtol_l.constprop.0+0xe6>
 8012700:	4630      	mov	r0, r6
 8012702:	e79e      	b.n	8012642 <_strtol_l.constprop.0+0x16>
 8012704:	b107      	cbz	r7, 8012708 <_strtol_l.constprop.0+0xdc>
 8012706:	4276      	negs	r6, r6
 8012708:	2a00      	cmp	r2, #0
 801270a:	d0f9      	beq.n	8012700 <_strtol_l.constprop.0+0xd4>
 801270c:	f1be 0f00 	cmp.w	lr, #0
 8012710:	d000      	beq.n	8012714 <_strtol_l.constprop.0+0xe8>
 8012712:	1e69      	subs	r1, r5, #1
 8012714:	6011      	str	r1, [r2, #0]
 8012716:	e7f3      	b.n	8012700 <_strtol_l.constprop.0+0xd4>
 8012718:	2430      	movs	r4, #48	; 0x30
 801271a:	2b00      	cmp	r3, #0
 801271c:	d1b1      	bne.n	8012682 <_strtol_l.constprop.0+0x56>
 801271e:	2308      	movs	r3, #8
 8012720:	e7af      	b.n	8012682 <_strtol_l.constprop.0+0x56>
 8012722:	2c30      	cmp	r4, #48	; 0x30
 8012724:	d0a5      	beq.n	8012672 <_strtol_l.constprop.0+0x46>
 8012726:	230a      	movs	r3, #10
 8012728:	e7ab      	b.n	8012682 <_strtol_l.constprop.0+0x56>
 801272a:	bf00      	nop
 801272c:	08015959 	.word	0x08015959

08012730 <_strtol_r>:
 8012730:	f7ff bf7c 	b.w	801262c <_strtol_l.constprop.0>

08012734 <__ssputs_r>:
 8012734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012738:	688e      	ldr	r6, [r1, #8]
 801273a:	461f      	mov	r7, r3
 801273c:	42be      	cmp	r6, r7
 801273e:	680b      	ldr	r3, [r1, #0]
 8012740:	4682      	mov	sl, r0
 8012742:	460c      	mov	r4, r1
 8012744:	4690      	mov	r8, r2
 8012746:	d82c      	bhi.n	80127a2 <__ssputs_r+0x6e>
 8012748:	898a      	ldrh	r2, [r1, #12]
 801274a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801274e:	d026      	beq.n	801279e <__ssputs_r+0x6a>
 8012750:	6965      	ldr	r5, [r4, #20]
 8012752:	6909      	ldr	r1, [r1, #16]
 8012754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012758:	eba3 0901 	sub.w	r9, r3, r1
 801275c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012760:	1c7b      	adds	r3, r7, #1
 8012762:	444b      	add	r3, r9
 8012764:	106d      	asrs	r5, r5, #1
 8012766:	429d      	cmp	r5, r3
 8012768:	bf38      	it	cc
 801276a:	461d      	movcc	r5, r3
 801276c:	0553      	lsls	r3, r2, #21
 801276e:	d527      	bpl.n	80127c0 <__ssputs_r+0x8c>
 8012770:	4629      	mov	r1, r5
 8012772:	f7fe fc0f 	bl	8010f94 <_malloc_r>
 8012776:	4606      	mov	r6, r0
 8012778:	b360      	cbz	r0, 80127d4 <__ssputs_r+0xa0>
 801277a:	6921      	ldr	r1, [r4, #16]
 801277c:	464a      	mov	r2, r9
 801277e:	f7fd fd06 	bl	801018e <memcpy>
 8012782:	89a3      	ldrh	r3, [r4, #12]
 8012784:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801278c:	81a3      	strh	r3, [r4, #12]
 801278e:	6126      	str	r6, [r4, #16]
 8012790:	6165      	str	r5, [r4, #20]
 8012792:	444e      	add	r6, r9
 8012794:	eba5 0509 	sub.w	r5, r5, r9
 8012798:	6026      	str	r6, [r4, #0]
 801279a:	60a5      	str	r5, [r4, #8]
 801279c:	463e      	mov	r6, r7
 801279e:	42be      	cmp	r6, r7
 80127a0:	d900      	bls.n	80127a4 <__ssputs_r+0x70>
 80127a2:	463e      	mov	r6, r7
 80127a4:	6820      	ldr	r0, [r4, #0]
 80127a6:	4632      	mov	r2, r6
 80127a8:	4641      	mov	r1, r8
 80127aa:	f000 fd5c 	bl	8013266 <memmove>
 80127ae:	68a3      	ldr	r3, [r4, #8]
 80127b0:	1b9b      	subs	r3, r3, r6
 80127b2:	60a3      	str	r3, [r4, #8]
 80127b4:	6823      	ldr	r3, [r4, #0]
 80127b6:	4433      	add	r3, r6
 80127b8:	6023      	str	r3, [r4, #0]
 80127ba:	2000      	movs	r0, #0
 80127bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127c0:	462a      	mov	r2, r5
 80127c2:	f001 f922 	bl	8013a0a <_realloc_r>
 80127c6:	4606      	mov	r6, r0
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d1e0      	bne.n	801278e <__ssputs_r+0x5a>
 80127cc:	6921      	ldr	r1, [r4, #16]
 80127ce:	4650      	mov	r0, sl
 80127d0:	f7fe fb6c 	bl	8010eac <_free_r>
 80127d4:	230c      	movs	r3, #12
 80127d6:	f8ca 3000 	str.w	r3, [sl]
 80127da:	89a3      	ldrh	r3, [r4, #12]
 80127dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127e0:	81a3      	strh	r3, [r4, #12]
 80127e2:	f04f 30ff 	mov.w	r0, #4294967295
 80127e6:	e7e9      	b.n	80127bc <__ssputs_r+0x88>

080127e8 <_svfiprintf_r>:
 80127e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	4698      	mov	r8, r3
 80127ee:	898b      	ldrh	r3, [r1, #12]
 80127f0:	061b      	lsls	r3, r3, #24
 80127f2:	b09d      	sub	sp, #116	; 0x74
 80127f4:	4607      	mov	r7, r0
 80127f6:	460d      	mov	r5, r1
 80127f8:	4614      	mov	r4, r2
 80127fa:	d50e      	bpl.n	801281a <_svfiprintf_r+0x32>
 80127fc:	690b      	ldr	r3, [r1, #16]
 80127fe:	b963      	cbnz	r3, 801281a <_svfiprintf_r+0x32>
 8012800:	2140      	movs	r1, #64	; 0x40
 8012802:	f7fe fbc7 	bl	8010f94 <_malloc_r>
 8012806:	6028      	str	r0, [r5, #0]
 8012808:	6128      	str	r0, [r5, #16]
 801280a:	b920      	cbnz	r0, 8012816 <_svfiprintf_r+0x2e>
 801280c:	230c      	movs	r3, #12
 801280e:	603b      	str	r3, [r7, #0]
 8012810:	f04f 30ff 	mov.w	r0, #4294967295
 8012814:	e0d0      	b.n	80129b8 <_svfiprintf_r+0x1d0>
 8012816:	2340      	movs	r3, #64	; 0x40
 8012818:	616b      	str	r3, [r5, #20]
 801281a:	2300      	movs	r3, #0
 801281c:	9309      	str	r3, [sp, #36]	; 0x24
 801281e:	2320      	movs	r3, #32
 8012820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012824:	f8cd 800c 	str.w	r8, [sp, #12]
 8012828:	2330      	movs	r3, #48	; 0x30
 801282a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80129d0 <_svfiprintf_r+0x1e8>
 801282e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012832:	f04f 0901 	mov.w	r9, #1
 8012836:	4623      	mov	r3, r4
 8012838:	469a      	mov	sl, r3
 801283a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801283e:	b10a      	cbz	r2, 8012844 <_svfiprintf_r+0x5c>
 8012840:	2a25      	cmp	r2, #37	; 0x25
 8012842:	d1f9      	bne.n	8012838 <_svfiprintf_r+0x50>
 8012844:	ebba 0b04 	subs.w	fp, sl, r4
 8012848:	d00b      	beq.n	8012862 <_svfiprintf_r+0x7a>
 801284a:	465b      	mov	r3, fp
 801284c:	4622      	mov	r2, r4
 801284e:	4629      	mov	r1, r5
 8012850:	4638      	mov	r0, r7
 8012852:	f7ff ff6f 	bl	8012734 <__ssputs_r>
 8012856:	3001      	adds	r0, #1
 8012858:	f000 80a9 	beq.w	80129ae <_svfiprintf_r+0x1c6>
 801285c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801285e:	445a      	add	r2, fp
 8012860:	9209      	str	r2, [sp, #36]	; 0x24
 8012862:	f89a 3000 	ldrb.w	r3, [sl]
 8012866:	2b00      	cmp	r3, #0
 8012868:	f000 80a1 	beq.w	80129ae <_svfiprintf_r+0x1c6>
 801286c:	2300      	movs	r3, #0
 801286e:	f04f 32ff 	mov.w	r2, #4294967295
 8012872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012876:	f10a 0a01 	add.w	sl, sl, #1
 801287a:	9304      	str	r3, [sp, #16]
 801287c:	9307      	str	r3, [sp, #28]
 801287e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012882:	931a      	str	r3, [sp, #104]	; 0x68
 8012884:	4654      	mov	r4, sl
 8012886:	2205      	movs	r2, #5
 8012888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801288c:	4850      	ldr	r0, [pc, #320]	; (80129d0 <_svfiprintf_r+0x1e8>)
 801288e:	f7ed fcc7 	bl	8000220 <memchr>
 8012892:	9a04      	ldr	r2, [sp, #16]
 8012894:	b9d8      	cbnz	r0, 80128ce <_svfiprintf_r+0xe6>
 8012896:	06d0      	lsls	r0, r2, #27
 8012898:	bf44      	itt	mi
 801289a:	2320      	movmi	r3, #32
 801289c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128a0:	0711      	lsls	r1, r2, #28
 80128a2:	bf44      	itt	mi
 80128a4:	232b      	movmi	r3, #43	; 0x2b
 80128a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128aa:	f89a 3000 	ldrb.w	r3, [sl]
 80128ae:	2b2a      	cmp	r3, #42	; 0x2a
 80128b0:	d015      	beq.n	80128de <_svfiprintf_r+0xf6>
 80128b2:	9a07      	ldr	r2, [sp, #28]
 80128b4:	4654      	mov	r4, sl
 80128b6:	2000      	movs	r0, #0
 80128b8:	f04f 0c0a 	mov.w	ip, #10
 80128bc:	4621      	mov	r1, r4
 80128be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128c2:	3b30      	subs	r3, #48	; 0x30
 80128c4:	2b09      	cmp	r3, #9
 80128c6:	d94d      	bls.n	8012964 <_svfiprintf_r+0x17c>
 80128c8:	b1b0      	cbz	r0, 80128f8 <_svfiprintf_r+0x110>
 80128ca:	9207      	str	r2, [sp, #28]
 80128cc:	e014      	b.n	80128f8 <_svfiprintf_r+0x110>
 80128ce:	eba0 0308 	sub.w	r3, r0, r8
 80128d2:	fa09 f303 	lsl.w	r3, r9, r3
 80128d6:	4313      	orrs	r3, r2
 80128d8:	9304      	str	r3, [sp, #16]
 80128da:	46a2      	mov	sl, r4
 80128dc:	e7d2      	b.n	8012884 <_svfiprintf_r+0x9c>
 80128de:	9b03      	ldr	r3, [sp, #12]
 80128e0:	1d19      	adds	r1, r3, #4
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	9103      	str	r1, [sp, #12]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	bfbb      	ittet	lt
 80128ea:	425b      	neglt	r3, r3
 80128ec:	f042 0202 	orrlt.w	r2, r2, #2
 80128f0:	9307      	strge	r3, [sp, #28]
 80128f2:	9307      	strlt	r3, [sp, #28]
 80128f4:	bfb8      	it	lt
 80128f6:	9204      	strlt	r2, [sp, #16]
 80128f8:	7823      	ldrb	r3, [r4, #0]
 80128fa:	2b2e      	cmp	r3, #46	; 0x2e
 80128fc:	d10c      	bne.n	8012918 <_svfiprintf_r+0x130>
 80128fe:	7863      	ldrb	r3, [r4, #1]
 8012900:	2b2a      	cmp	r3, #42	; 0x2a
 8012902:	d134      	bne.n	801296e <_svfiprintf_r+0x186>
 8012904:	9b03      	ldr	r3, [sp, #12]
 8012906:	1d1a      	adds	r2, r3, #4
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	9203      	str	r2, [sp, #12]
 801290c:	2b00      	cmp	r3, #0
 801290e:	bfb8      	it	lt
 8012910:	f04f 33ff 	movlt.w	r3, #4294967295
 8012914:	3402      	adds	r4, #2
 8012916:	9305      	str	r3, [sp, #20]
 8012918:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80129e0 <_svfiprintf_r+0x1f8>
 801291c:	7821      	ldrb	r1, [r4, #0]
 801291e:	2203      	movs	r2, #3
 8012920:	4650      	mov	r0, sl
 8012922:	f7ed fc7d 	bl	8000220 <memchr>
 8012926:	b138      	cbz	r0, 8012938 <_svfiprintf_r+0x150>
 8012928:	9b04      	ldr	r3, [sp, #16]
 801292a:	eba0 000a 	sub.w	r0, r0, sl
 801292e:	2240      	movs	r2, #64	; 0x40
 8012930:	4082      	lsls	r2, r0
 8012932:	4313      	orrs	r3, r2
 8012934:	3401      	adds	r4, #1
 8012936:	9304      	str	r3, [sp, #16]
 8012938:	f814 1b01 	ldrb.w	r1, [r4], #1
 801293c:	4825      	ldr	r0, [pc, #148]	; (80129d4 <_svfiprintf_r+0x1ec>)
 801293e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012942:	2206      	movs	r2, #6
 8012944:	f7ed fc6c 	bl	8000220 <memchr>
 8012948:	2800      	cmp	r0, #0
 801294a:	d038      	beq.n	80129be <_svfiprintf_r+0x1d6>
 801294c:	4b22      	ldr	r3, [pc, #136]	; (80129d8 <_svfiprintf_r+0x1f0>)
 801294e:	bb1b      	cbnz	r3, 8012998 <_svfiprintf_r+0x1b0>
 8012950:	9b03      	ldr	r3, [sp, #12]
 8012952:	3307      	adds	r3, #7
 8012954:	f023 0307 	bic.w	r3, r3, #7
 8012958:	3308      	adds	r3, #8
 801295a:	9303      	str	r3, [sp, #12]
 801295c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801295e:	4433      	add	r3, r6
 8012960:	9309      	str	r3, [sp, #36]	; 0x24
 8012962:	e768      	b.n	8012836 <_svfiprintf_r+0x4e>
 8012964:	fb0c 3202 	mla	r2, ip, r2, r3
 8012968:	460c      	mov	r4, r1
 801296a:	2001      	movs	r0, #1
 801296c:	e7a6      	b.n	80128bc <_svfiprintf_r+0xd4>
 801296e:	2300      	movs	r3, #0
 8012970:	3401      	adds	r4, #1
 8012972:	9305      	str	r3, [sp, #20]
 8012974:	4619      	mov	r1, r3
 8012976:	f04f 0c0a 	mov.w	ip, #10
 801297a:	4620      	mov	r0, r4
 801297c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012980:	3a30      	subs	r2, #48	; 0x30
 8012982:	2a09      	cmp	r2, #9
 8012984:	d903      	bls.n	801298e <_svfiprintf_r+0x1a6>
 8012986:	2b00      	cmp	r3, #0
 8012988:	d0c6      	beq.n	8012918 <_svfiprintf_r+0x130>
 801298a:	9105      	str	r1, [sp, #20]
 801298c:	e7c4      	b.n	8012918 <_svfiprintf_r+0x130>
 801298e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012992:	4604      	mov	r4, r0
 8012994:	2301      	movs	r3, #1
 8012996:	e7f0      	b.n	801297a <_svfiprintf_r+0x192>
 8012998:	ab03      	add	r3, sp, #12
 801299a:	9300      	str	r3, [sp, #0]
 801299c:	462a      	mov	r2, r5
 801299e:	4b0f      	ldr	r3, [pc, #60]	; (80129dc <_svfiprintf_r+0x1f4>)
 80129a0:	a904      	add	r1, sp, #16
 80129a2:	4638      	mov	r0, r7
 80129a4:	f7fc fbe2 	bl	800f16c <_printf_float>
 80129a8:	1c42      	adds	r2, r0, #1
 80129aa:	4606      	mov	r6, r0
 80129ac:	d1d6      	bne.n	801295c <_svfiprintf_r+0x174>
 80129ae:	89ab      	ldrh	r3, [r5, #12]
 80129b0:	065b      	lsls	r3, r3, #25
 80129b2:	f53f af2d 	bmi.w	8012810 <_svfiprintf_r+0x28>
 80129b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129b8:	b01d      	add	sp, #116	; 0x74
 80129ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129be:	ab03      	add	r3, sp, #12
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	462a      	mov	r2, r5
 80129c4:	4b05      	ldr	r3, [pc, #20]	; (80129dc <_svfiprintf_r+0x1f4>)
 80129c6:	a904      	add	r1, sp, #16
 80129c8:	4638      	mov	r0, r7
 80129ca:	f7fc fe73 	bl	800f6b4 <_printf_i>
 80129ce:	e7eb      	b.n	80129a8 <_svfiprintf_r+0x1c0>
 80129d0:	08015a59 	.word	0x08015a59
 80129d4:	08015a63 	.word	0x08015a63
 80129d8:	0800f16d 	.word	0x0800f16d
 80129dc:	08012735 	.word	0x08012735
 80129e0:	08015a5f 	.word	0x08015a5f

080129e4 <_sungetc_r>:
 80129e4:	b538      	push	{r3, r4, r5, lr}
 80129e6:	1c4b      	adds	r3, r1, #1
 80129e8:	4614      	mov	r4, r2
 80129ea:	d103      	bne.n	80129f4 <_sungetc_r+0x10>
 80129ec:	f04f 35ff 	mov.w	r5, #4294967295
 80129f0:	4628      	mov	r0, r5
 80129f2:	bd38      	pop	{r3, r4, r5, pc}
 80129f4:	8993      	ldrh	r3, [r2, #12]
 80129f6:	f023 0320 	bic.w	r3, r3, #32
 80129fa:	8193      	strh	r3, [r2, #12]
 80129fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129fe:	6852      	ldr	r2, [r2, #4]
 8012a00:	b2cd      	uxtb	r5, r1
 8012a02:	b18b      	cbz	r3, 8012a28 <_sungetc_r+0x44>
 8012a04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012a06:	4293      	cmp	r3, r2
 8012a08:	dd08      	ble.n	8012a1c <_sungetc_r+0x38>
 8012a0a:	6823      	ldr	r3, [r4, #0]
 8012a0c:	1e5a      	subs	r2, r3, #1
 8012a0e:	6022      	str	r2, [r4, #0]
 8012a10:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012a14:	6863      	ldr	r3, [r4, #4]
 8012a16:	3301      	adds	r3, #1
 8012a18:	6063      	str	r3, [r4, #4]
 8012a1a:	e7e9      	b.n	80129f0 <_sungetc_r+0xc>
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	f000 fbe8 	bl	80131f2 <__submore>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	d0f1      	beq.n	8012a0a <_sungetc_r+0x26>
 8012a26:	e7e1      	b.n	80129ec <_sungetc_r+0x8>
 8012a28:	6921      	ldr	r1, [r4, #16]
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	b151      	cbz	r1, 8012a44 <_sungetc_r+0x60>
 8012a2e:	4299      	cmp	r1, r3
 8012a30:	d208      	bcs.n	8012a44 <_sungetc_r+0x60>
 8012a32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012a36:	42a9      	cmp	r1, r5
 8012a38:	d104      	bne.n	8012a44 <_sungetc_r+0x60>
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	3201      	adds	r2, #1
 8012a3e:	6023      	str	r3, [r4, #0]
 8012a40:	6062      	str	r2, [r4, #4]
 8012a42:	e7d5      	b.n	80129f0 <_sungetc_r+0xc>
 8012a44:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8012a4e:	2303      	movs	r3, #3
 8012a50:	63a3      	str	r3, [r4, #56]	; 0x38
 8012a52:	4623      	mov	r3, r4
 8012a54:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012a58:	6023      	str	r3, [r4, #0]
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e7dc      	b.n	8012a18 <_sungetc_r+0x34>

08012a5e <__ssrefill_r>:
 8012a5e:	b510      	push	{r4, lr}
 8012a60:	460c      	mov	r4, r1
 8012a62:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012a64:	b169      	cbz	r1, 8012a82 <__ssrefill_r+0x24>
 8012a66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a6a:	4299      	cmp	r1, r3
 8012a6c:	d001      	beq.n	8012a72 <__ssrefill_r+0x14>
 8012a6e:	f7fe fa1d 	bl	8010eac <_free_r>
 8012a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a74:	6063      	str	r3, [r4, #4]
 8012a76:	2000      	movs	r0, #0
 8012a78:	6360      	str	r0, [r4, #52]	; 0x34
 8012a7a:	b113      	cbz	r3, 8012a82 <__ssrefill_r+0x24>
 8012a7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012a7e:	6023      	str	r3, [r4, #0]
 8012a80:	bd10      	pop	{r4, pc}
 8012a82:	6923      	ldr	r3, [r4, #16]
 8012a84:	6023      	str	r3, [r4, #0]
 8012a86:	2300      	movs	r3, #0
 8012a88:	6063      	str	r3, [r4, #4]
 8012a8a:	89a3      	ldrh	r3, [r4, #12]
 8012a8c:	f043 0320 	orr.w	r3, r3, #32
 8012a90:	81a3      	strh	r3, [r4, #12]
 8012a92:	f04f 30ff 	mov.w	r0, #4294967295
 8012a96:	e7f3      	b.n	8012a80 <__ssrefill_r+0x22>

08012a98 <__ssvfiscanf_r>:
 8012a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a9c:	460c      	mov	r4, r1
 8012a9e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012aa8:	49a6      	ldr	r1, [pc, #664]	; (8012d44 <__ssvfiscanf_r+0x2ac>)
 8012aaa:	91a0      	str	r1, [sp, #640]	; 0x280
 8012aac:	f10d 0804 	add.w	r8, sp, #4
 8012ab0:	49a5      	ldr	r1, [pc, #660]	; (8012d48 <__ssvfiscanf_r+0x2b0>)
 8012ab2:	4fa6      	ldr	r7, [pc, #664]	; (8012d4c <__ssvfiscanf_r+0x2b4>)
 8012ab4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8012d50 <__ssvfiscanf_r+0x2b8>
 8012ab8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012abc:	4606      	mov	r6, r0
 8012abe:	91a1      	str	r1, [sp, #644]	; 0x284
 8012ac0:	9300      	str	r3, [sp, #0]
 8012ac2:	7813      	ldrb	r3, [r2, #0]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	f000 815a 	beq.w	8012d7e <__ssvfiscanf_r+0x2e6>
 8012aca:	5cf9      	ldrb	r1, [r7, r3]
 8012acc:	f011 0108 	ands.w	r1, r1, #8
 8012ad0:	f102 0501 	add.w	r5, r2, #1
 8012ad4:	d019      	beq.n	8012b0a <__ssvfiscanf_r+0x72>
 8012ad6:	6863      	ldr	r3, [r4, #4]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	dd0f      	ble.n	8012afc <__ssvfiscanf_r+0x64>
 8012adc:	6823      	ldr	r3, [r4, #0]
 8012ade:	781a      	ldrb	r2, [r3, #0]
 8012ae0:	5cba      	ldrb	r2, [r7, r2]
 8012ae2:	0712      	lsls	r2, r2, #28
 8012ae4:	d401      	bmi.n	8012aea <__ssvfiscanf_r+0x52>
 8012ae6:	462a      	mov	r2, r5
 8012ae8:	e7eb      	b.n	8012ac2 <__ssvfiscanf_r+0x2a>
 8012aea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012aec:	3201      	adds	r2, #1
 8012aee:	9245      	str	r2, [sp, #276]	; 0x114
 8012af0:	6862      	ldr	r2, [r4, #4]
 8012af2:	3301      	adds	r3, #1
 8012af4:	3a01      	subs	r2, #1
 8012af6:	6062      	str	r2, [r4, #4]
 8012af8:	6023      	str	r3, [r4, #0]
 8012afa:	e7ec      	b.n	8012ad6 <__ssvfiscanf_r+0x3e>
 8012afc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012afe:	4621      	mov	r1, r4
 8012b00:	4630      	mov	r0, r6
 8012b02:	4798      	blx	r3
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d0e9      	beq.n	8012adc <__ssvfiscanf_r+0x44>
 8012b08:	e7ed      	b.n	8012ae6 <__ssvfiscanf_r+0x4e>
 8012b0a:	2b25      	cmp	r3, #37	; 0x25
 8012b0c:	d012      	beq.n	8012b34 <__ssvfiscanf_r+0x9c>
 8012b0e:	469a      	mov	sl, r3
 8012b10:	6863      	ldr	r3, [r4, #4]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f340 8091 	ble.w	8012c3a <__ssvfiscanf_r+0x1a2>
 8012b18:	6822      	ldr	r2, [r4, #0]
 8012b1a:	7813      	ldrb	r3, [r2, #0]
 8012b1c:	4553      	cmp	r3, sl
 8012b1e:	f040 812e 	bne.w	8012d7e <__ssvfiscanf_r+0x2e6>
 8012b22:	6863      	ldr	r3, [r4, #4]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	6063      	str	r3, [r4, #4]
 8012b28:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012b2a:	3201      	adds	r2, #1
 8012b2c:	3301      	adds	r3, #1
 8012b2e:	6022      	str	r2, [r4, #0]
 8012b30:	9345      	str	r3, [sp, #276]	; 0x114
 8012b32:	e7d8      	b.n	8012ae6 <__ssvfiscanf_r+0x4e>
 8012b34:	9141      	str	r1, [sp, #260]	; 0x104
 8012b36:	9143      	str	r1, [sp, #268]	; 0x10c
 8012b38:	7853      	ldrb	r3, [r2, #1]
 8012b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8012b3c:	bf02      	ittt	eq
 8012b3e:	2310      	moveq	r3, #16
 8012b40:	1c95      	addeq	r5, r2, #2
 8012b42:	9341      	streq	r3, [sp, #260]	; 0x104
 8012b44:	220a      	movs	r2, #10
 8012b46:	46aa      	mov	sl, r5
 8012b48:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012b4c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012b50:	2b09      	cmp	r3, #9
 8012b52:	d91c      	bls.n	8012b8e <__ssvfiscanf_r+0xf6>
 8012b54:	487e      	ldr	r0, [pc, #504]	; (8012d50 <__ssvfiscanf_r+0x2b8>)
 8012b56:	2203      	movs	r2, #3
 8012b58:	f7ed fb62 	bl	8000220 <memchr>
 8012b5c:	b138      	cbz	r0, 8012b6e <__ssvfiscanf_r+0xd6>
 8012b5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012b60:	eba0 0009 	sub.w	r0, r0, r9
 8012b64:	2301      	movs	r3, #1
 8012b66:	4083      	lsls	r3, r0
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	9341      	str	r3, [sp, #260]	; 0x104
 8012b6c:	4655      	mov	r5, sl
 8012b6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012b72:	2b78      	cmp	r3, #120	; 0x78
 8012b74:	d806      	bhi.n	8012b84 <__ssvfiscanf_r+0xec>
 8012b76:	2b57      	cmp	r3, #87	; 0x57
 8012b78:	d810      	bhi.n	8012b9c <__ssvfiscanf_r+0x104>
 8012b7a:	2b25      	cmp	r3, #37	; 0x25
 8012b7c:	d0c7      	beq.n	8012b0e <__ssvfiscanf_r+0x76>
 8012b7e:	d857      	bhi.n	8012c30 <__ssvfiscanf_r+0x198>
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d065      	beq.n	8012c50 <__ssvfiscanf_r+0x1b8>
 8012b84:	2303      	movs	r3, #3
 8012b86:	9347      	str	r3, [sp, #284]	; 0x11c
 8012b88:	230a      	movs	r3, #10
 8012b8a:	9342      	str	r3, [sp, #264]	; 0x108
 8012b8c:	e076      	b.n	8012c7c <__ssvfiscanf_r+0x1e4>
 8012b8e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012b90:	fb02 1103 	mla	r1, r2, r3, r1
 8012b94:	3930      	subs	r1, #48	; 0x30
 8012b96:	9143      	str	r1, [sp, #268]	; 0x10c
 8012b98:	4655      	mov	r5, sl
 8012b9a:	e7d4      	b.n	8012b46 <__ssvfiscanf_r+0xae>
 8012b9c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012ba0:	2a20      	cmp	r2, #32
 8012ba2:	d8ef      	bhi.n	8012b84 <__ssvfiscanf_r+0xec>
 8012ba4:	a101      	add	r1, pc, #4	; (adr r1, 8012bac <__ssvfiscanf_r+0x114>)
 8012ba6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012baa:	bf00      	nop
 8012bac:	08012c5f 	.word	0x08012c5f
 8012bb0:	08012b85 	.word	0x08012b85
 8012bb4:	08012b85 	.word	0x08012b85
 8012bb8:	08012cbd 	.word	0x08012cbd
 8012bbc:	08012b85 	.word	0x08012b85
 8012bc0:	08012b85 	.word	0x08012b85
 8012bc4:	08012b85 	.word	0x08012b85
 8012bc8:	08012b85 	.word	0x08012b85
 8012bcc:	08012b85 	.word	0x08012b85
 8012bd0:	08012b85 	.word	0x08012b85
 8012bd4:	08012b85 	.word	0x08012b85
 8012bd8:	08012cd3 	.word	0x08012cd3
 8012bdc:	08012cb9 	.word	0x08012cb9
 8012be0:	08012c37 	.word	0x08012c37
 8012be4:	08012c37 	.word	0x08012c37
 8012be8:	08012c37 	.word	0x08012c37
 8012bec:	08012b85 	.word	0x08012b85
 8012bf0:	08012c75 	.word	0x08012c75
 8012bf4:	08012b85 	.word	0x08012b85
 8012bf8:	08012b85 	.word	0x08012b85
 8012bfc:	08012b85 	.word	0x08012b85
 8012c00:	08012b85 	.word	0x08012b85
 8012c04:	08012ce3 	.word	0x08012ce3
 8012c08:	08012cb1 	.word	0x08012cb1
 8012c0c:	08012c57 	.word	0x08012c57
 8012c10:	08012b85 	.word	0x08012b85
 8012c14:	08012b85 	.word	0x08012b85
 8012c18:	08012cdf 	.word	0x08012cdf
 8012c1c:	08012b85 	.word	0x08012b85
 8012c20:	08012cb9 	.word	0x08012cb9
 8012c24:	08012b85 	.word	0x08012b85
 8012c28:	08012b85 	.word	0x08012b85
 8012c2c:	08012c5f 	.word	0x08012c5f
 8012c30:	3b45      	subs	r3, #69	; 0x45
 8012c32:	2b02      	cmp	r3, #2
 8012c34:	d8a6      	bhi.n	8012b84 <__ssvfiscanf_r+0xec>
 8012c36:	2305      	movs	r3, #5
 8012c38:	e01f      	b.n	8012c7a <__ssvfiscanf_r+0x1e2>
 8012c3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012c3c:	4621      	mov	r1, r4
 8012c3e:	4630      	mov	r0, r6
 8012c40:	4798      	blx	r3
 8012c42:	2800      	cmp	r0, #0
 8012c44:	f43f af68 	beq.w	8012b18 <__ssvfiscanf_r+0x80>
 8012c48:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	f040 808d 	bne.w	8012d6a <__ssvfiscanf_r+0x2d2>
 8012c50:	f04f 30ff 	mov.w	r0, #4294967295
 8012c54:	e08f      	b.n	8012d76 <__ssvfiscanf_r+0x2de>
 8012c56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012c58:	f042 0220 	orr.w	r2, r2, #32
 8012c5c:	9241      	str	r2, [sp, #260]	; 0x104
 8012c5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c64:	9241      	str	r2, [sp, #260]	; 0x104
 8012c66:	2210      	movs	r2, #16
 8012c68:	2b6f      	cmp	r3, #111	; 0x6f
 8012c6a:	9242      	str	r2, [sp, #264]	; 0x108
 8012c6c:	bf34      	ite	cc
 8012c6e:	2303      	movcc	r3, #3
 8012c70:	2304      	movcs	r3, #4
 8012c72:	e002      	b.n	8012c7a <__ssvfiscanf_r+0x1e2>
 8012c74:	2300      	movs	r3, #0
 8012c76:	9342      	str	r3, [sp, #264]	; 0x108
 8012c78:	2303      	movs	r3, #3
 8012c7a:	9347      	str	r3, [sp, #284]	; 0x11c
 8012c7c:	6863      	ldr	r3, [r4, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	dd3d      	ble.n	8012cfe <__ssvfiscanf_r+0x266>
 8012c82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012c84:	0659      	lsls	r1, r3, #25
 8012c86:	d404      	bmi.n	8012c92 <__ssvfiscanf_r+0x1fa>
 8012c88:	6823      	ldr	r3, [r4, #0]
 8012c8a:	781a      	ldrb	r2, [r3, #0]
 8012c8c:	5cba      	ldrb	r2, [r7, r2]
 8012c8e:	0712      	lsls	r2, r2, #28
 8012c90:	d43c      	bmi.n	8012d0c <__ssvfiscanf_r+0x274>
 8012c92:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012c94:	2b02      	cmp	r3, #2
 8012c96:	dc4b      	bgt.n	8012d30 <__ssvfiscanf_r+0x298>
 8012c98:	466b      	mov	r3, sp
 8012c9a:	4622      	mov	r2, r4
 8012c9c:	a941      	add	r1, sp, #260	; 0x104
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f000 f872 	bl	8012d88 <_scanf_chars>
 8012ca4:	2801      	cmp	r0, #1
 8012ca6:	d06a      	beq.n	8012d7e <__ssvfiscanf_r+0x2e6>
 8012ca8:	2802      	cmp	r0, #2
 8012caa:	f47f af1c 	bne.w	8012ae6 <__ssvfiscanf_r+0x4e>
 8012cae:	e7cb      	b.n	8012c48 <__ssvfiscanf_r+0x1b0>
 8012cb0:	2308      	movs	r3, #8
 8012cb2:	9342      	str	r3, [sp, #264]	; 0x108
 8012cb4:	2304      	movs	r3, #4
 8012cb6:	e7e0      	b.n	8012c7a <__ssvfiscanf_r+0x1e2>
 8012cb8:	220a      	movs	r2, #10
 8012cba:	e7d5      	b.n	8012c68 <__ssvfiscanf_r+0x1d0>
 8012cbc:	4629      	mov	r1, r5
 8012cbe:	4640      	mov	r0, r8
 8012cc0:	f000 fa5e 	bl	8013180 <__sccl>
 8012cc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cca:	9341      	str	r3, [sp, #260]	; 0x104
 8012ccc:	4605      	mov	r5, r0
 8012cce:	2301      	movs	r3, #1
 8012cd0:	e7d3      	b.n	8012c7a <__ssvfiscanf_r+0x1e2>
 8012cd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cd8:	9341      	str	r3, [sp, #260]	; 0x104
 8012cda:	2300      	movs	r3, #0
 8012cdc:	e7cd      	b.n	8012c7a <__ssvfiscanf_r+0x1e2>
 8012cde:	2302      	movs	r3, #2
 8012ce0:	e7cb      	b.n	8012c7a <__ssvfiscanf_r+0x1e2>
 8012ce2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012ce4:	06c3      	lsls	r3, r0, #27
 8012ce6:	f53f aefe 	bmi.w	8012ae6 <__ssvfiscanf_r+0x4e>
 8012cea:	9b00      	ldr	r3, [sp, #0]
 8012cec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012cee:	1d19      	adds	r1, r3, #4
 8012cf0:	9100      	str	r1, [sp, #0]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	07c0      	lsls	r0, r0, #31
 8012cf6:	bf4c      	ite	mi
 8012cf8:	801a      	strhmi	r2, [r3, #0]
 8012cfa:	601a      	strpl	r2, [r3, #0]
 8012cfc:	e6f3      	b.n	8012ae6 <__ssvfiscanf_r+0x4e>
 8012cfe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012d00:	4621      	mov	r1, r4
 8012d02:	4630      	mov	r0, r6
 8012d04:	4798      	blx	r3
 8012d06:	2800      	cmp	r0, #0
 8012d08:	d0bb      	beq.n	8012c82 <__ssvfiscanf_r+0x1ea>
 8012d0a:	e79d      	b.n	8012c48 <__ssvfiscanf_r+0x1b0>
 8012d0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012d0e:	3201      	adds	r2, #1
 8012d10:	9245      	str	r2, [sp, #276]	; 0x114
 8012d12:	6862      	ldr	r2, [r4, #4]
 8012d14:	3a01      	subs	r2, #1
 8012d16:	2a00      	cmp	r2, #0
 8012d18:	6062      	str	r2, [r4, #4]
 8012d1a:	dd02      	ble.n	8012d22 <__ssvfiscanf_r+0x28a>
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	6023      	str	r3, [r4, #0]
 8012d20:	e7b2      	b.n	8012c88 <__ssvfiscanf_r+0x1f0>
 8012d22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012d24:	4621      	mov	r1, r4
 8012d26:	4630      	mov	r0, r6
 8012d28:	4798      	blx	r3
 8012d2a:	2800      	cmp	r0, #0
 8012d2c:	d0ac      	beq.n	8012c88 <__ssvfiscanf_r+0x1f0>
 8012d2e:	e78b      	b.n	8012c48 <__ssvfiscanf_r+0x1b0>
 8012d30:	2b04      	cmp	r3, #4
 8012d32:	dc0f      	bgt.n	8012d54 <__ssvfiscanf_r+0x2bc>
 8012d34:	466b      	mov	r3, sp
 8012d36:	4622      	mov	r2, r4
 8012d38:	a941      	add	r1, sp, #260	; 0x104
 8012d3a:	4630      	mov	r0, r6
 8012d3c:	f000 f87e 	bl	8012e3c <_scanf_i>
 8012d40:	e7b0      	b.n	8012ca4 <__ssvfiscanf_r+0x20c>
 8012d42:	bf00      	nop
 8012d44:	080129e5 	.word	0x080129e5
 8012d48:	08012a5f 	.word	0x08012a5f
 8012d4c:	08015959 	.word	0x08015959
 8012d50:	08015a5f 	.word	0x08015a5f
 8012d54:	4b0b      	ldr	r3, [pc, #44]	; (8012d84 <__ssvfiscanf_r+0x2ec>)
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	f43f aec5 	beq.w	8012ae6 <__ssvfiscanf_r+0x4e>
 8012d5c:	466b      	mov	r3, sp
 8012d5e:	4622      	mov	r2, r4
 8012d60:	a941      	add	r1, sp, #260	; 0x104
 8012d62:	4630      	mov	r0, r6
 8012d64:	f7fc fdc8 	bl	800f8f8 <_scanf_float>
 8012d68:	e79c      	b.n	8012ca4 <__ssvfiscanf_r+0x20c>
 8012d6a:	89a3      	ldrh	r3, [r4, #12]
 8012d6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012d70:	bf18      	it	ne
 8012d72:	f04f 30ff 	movne.w	r0, #4294967295
 8012d76:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d7e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012d80:	e7f9      	b.n	8012d76 <__ssvfiscanf_r+0x2de>
 8012d82:	bf00      	nop
 8012d84:	0800f8f9 	.word	0x0800f8f9

08012d88 <_scanf_chars>:
 8012d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d8c:	4615      	mov	r5, r2
 8012d8e:	688a      	ldr	r2, [r1, #8]
 8012d90:	4680      	mov	r8, r0
 8012d92:	460c      	mov	r4, r1
 8012d94:	b932      	cbnz	r2, 8012da4 <_scanf_chars+0x1c>
 8012d96:	698a      	ldr	r2, [r1, #24]
 8012d98:	2a00      	cmp	r2, #0
 8012d9a:	bf0c      	ite	eq
 8012d9c:	2201      	moveq	r2, #1
 8012d9e:	f04f 32ff 	movne.w	r2, #4294967295
 8012da2:	608a      	str	r2, [r1, #8]
 8012da4:	6822      	ldr	r2, [r4, #0]
 8012da6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8012e38 <_scanf_chars+0xb0>
 8012daa:	06d1      	lsls	r1, r2, #27
 8012dac:	bf5f      	itttt	pl
 8012dae:	681a      	ldrpl	r2, [r3, #0]
 8012db0:	1d11      	addpl	r1, r2, #4
 8012db2:	6019      	strpl	r1, [r3, #0]
 8012db4:	6816      	ldrpl	r6, [r2, #0]
 8012db6:	2700      	movs	r7, #0
 8012db8:	69a0      	ldr	r0, [r4, #24]
 8012dba:	b188      	cbz	r0, 8012de0 <_scanf_chars+0x58>
 8012dbc:	2801      	cmp	r0, #1
 8012dbe:	d107      	bne.n	8012dd0 <_scanf_chars+0x48>
 8012dc0:	682a      	ldr	r2, [r5, #0]
 8012dc2:	7811      	ldrb	r1, [r2, #0]
 8012dc4:	6962      	ldr	r2, [r4, #20]
 8012dc6:	5c52      	ldrb	r2, [r2, r1]
 8012dc8:	b952      	cbnz	r2, 8012de0 <_scanf_chars+0x58>
 8012dca:	2f00      	cmp	r7, #0
 8012dcc:	d031      	beq.n	8012e32 <_scanf_chars+0xaa>
 8012dce:	e022      	b.n	8012e16 <_scanf_chars+0x8e>
 8012dd0:	2802      	cmp	r0, #2
 8012dd2:	d120      	bne.n	8012e16 <_scanf_chars+0x8e>
 8012dd4:	682b      	ldr	r3, [r5, #0]
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012ddc:	071b      	lsls	r3, r3, #28
 8012dde:	d41a      	bmi.n	8012e16 <_scanf_chars+0x8e>
 8012de0:	6823      	ldr	r3, [r4, #0]
 8012de2:	06da      	lsls	r2, r3, #27
 8012de4:	bf5e      	ittt	pl
 8012de6:	682b      	ldrpl	r3, [r5, #0]
 8012de8:	781b      	ldrbpl	r3, [r3, #0]
 8012dea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012dee:	682a      	ldr	r2, [r5, #0]
 8012df0:	686b      	ldr	r3, [r5, #4]
 8012df2:	3201      	adds	r2, #1
 8012df4:	602a      	str	r2, [r5, #0]
 8012df6:	68a2      	ldr	r2, [r4, #8]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	3a01      	subs	r2, #1
 8012dfc:	606b      	str	r3, [r5, #4]
 8012dfe:	3701      	adds	r7, #1
 8012e00:	60a2      	str	r2, [r4, #8]
 8012e02:	b142      	cbz	r2, 8012e16 <_scanf_chars+0x8e>
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	dcd7      	bgt.n	8012db8 <_scanf_chars+0x30>
 8012e08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012e0c:	4629      	mov	r1, r5
 8012e0e:	4640      	mov	r0, r8
 8012e10:	4798      	blx	r3
 8012e12:	2800      	cmp	r0, #0
 8012e14:	d0d0      	beq.n	8012db8 <_scanf_chars+0x30>
 8012e16:	6823      	ldr	r3, [r4, #0]
 8012e18:	f013 0310 	ands.w	r3, r3, #16
 8012e1c:	d105      	bne.n	8012e2a <_scanf_chars+0xa2>
 8012e1e:	68e2      	ldr	r2, [r4, #12]
 8012e20:	3201      	adds	r2, #1
 8012e22:	60e2      	str	r2, [r4, #12]
 8012e24:	69a2      	ldr	r2, [r4, #24]
 8012e26:	b102      	cbz	r2, 8012e2a <_scanf_chars+0xa2>
 8012e28:	7033      	strb	r3, [r6, #0]
 8012e2a:	6923      	ldr	r3, [r4, #16]
 8012e2c:	443b      	add	r3, r7
 8012e2e:	6123      	str	r3, [r4, #16]
 8012e30:	2000      	movs	r0, #0
 8012e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e36:	bf00      	nop
 8012e38:	08015959 	.word	0x08015959

08012e3c <_scanf_i>:
 8012e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e40:	4698      	mov	r8, r3
 8012e42:	4b74      	ldr	r3, [pc, #464]	; (8013014 <_scanf_i+0x1d8>)
 8012e44:	460c      	mov	r4, r1
 8012e46:	4682      	mov	sl, r0
 8012e48:	4616      	mov	r6, r2
 8012e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e4e:	b087      	sub	sp, #28
 8012e50:	ab03      	add	r3, sp, #12
 8012e52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012e56:	4b70      	ldr	r3, [pc, #448]	; (8013018 <_scanf_i+0x1dc>)
 8012e58:	69a1      	ldr	r1, [r4, #24]
 8012e5a:	4a70      	ldr	r2, [pc, #448]	; (801301c <_scanf_i+0x1e0>)
 8012e5c:	2903      	cmp	r1, #3
 8012e5e:	bf18      	it	ne
 8012e60:	461a      	movne	r2, r3
 8012e62:	68a3      	ldr	r3, [r4, #8]
 8012e64:	9201      	str	r2, [sp, #4]
 8012e66:	1e5a      	subs	r2, r3, #1
 8012e68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012e6c:	bf88      	it	hi
 8012e6e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012e72:	4627      	mov	r7, r4
 8012e74:	bf82      	ittt	hi
 8012e76:	eb03 0905 	addhi.w	r9, r3, r5
 8012e7a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012e7e:	60a3      	strhi	r3, [r4, #8]
 8012e80:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012e84:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012e88:	bf98      	it	ls
 8012e8a:	f04f 0900 	movls.w	r9, #0
 8012e8e:	6023      	str	r3, [r4, #0]
 8012e90:	463d      	mov	r5, r7
 8012e92:	f04f 0b00 	mov.w	fp, #0
 8012e96:	6831      	ldr	r1, [r6, #0]
 8012e98:	ab03      	add	r3, sp, #12
 8012e9a:	7809      	ldrb	r1, [r1, #0]
 8012e9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012ea0:	2202      	movs	r2, #2
 8012ea2:	f7ed f9bd 	bl	8000220 <memchr>
 8012ea6:	b328      	cbz	r0, 8012ef4 <_scanf_i+0xb8>
 8012ea8:	f1bb 0f01 	cmp.w	fp, #1
 8012eac:	d159      	bne.n	8012f62 <_scanf_i+0x126>
 8012eae:	6862      	ldr	r2, [r4, #4]
 8012eb0:	b92a      	cbnz	r2, 8012ebe <_scanf_i+0x82>
 8012eb2:	6822      	ldr	r2, [r4, #0]
 8012eb4:	2308      	movs	r3, #8
 8012eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012eba:	6063      	str	r3, [r4, #4]
 8012ebc:	6022      	str	r2, [r4, #0]
 8012ebe:	6822      	ldr	r2, [r4, #0]
 8012ec0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012ec4:	6022      	str	r2, [r4, #0]
 8012ec6:	68a2      	ldr	r2, [r4, #8]
 8012ec8:	1e51      	subs	r1, r2, #1
 8012eca:	60a1      	str	r1, [r4, #8]
 8012ecc:	b192      	cbz	r2, 8012ef4 <_scanf_i+0xb8>
 8012ece:	6832      	ldr	r2, [r6, #0]
 8012ed0:	1c51      	adds	r1, r2, #1
 8012ed2:	6031      	str	r1, [r6, #0]
 8012ed4:	7812      	ldrb	r2, [r2, #0]
 8012ed6:	f805 2b01 	strb.w	r2, [r5], #1
 8012eda:	6872      	ldr	r2, [r6, #4]
 8012edc:	3a01      	subs	r2, #1
 8012ede:	2a00      	cmp	r2, #0
 8012ee0:	6072      	str	r2, [r6, #4]
 8012ee2:	dc07      	bgt.n	8012ef4 <_scanf_i+0xb8>
 8012ee4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012ee8:	4631      	mov	r1, r6
 8012eea:	4650      	mov	r0, sl
 8012eec:	4790      	blx	r2
 8012eee:	2800      	cmp	r0, #0
 8012ef0:	f040 8085 	bne.w	8012ffe <_scanf_i+0x1c2>
 8012ef4:	f10b 0b01 	add.w	fp, fp, #1
 8012ef8:	f1bb 0f03 	cmp.w	fp, #3
 8012efc:	d1cb      	bne.n	8012e96 <_scanf_i+0x5a>
 8012efe:	6863      	ldr	r3, [r4, #4]
 8012f00:	b90b      	cbnz	r3, 8012f06 <_scanf_i+0xca>
 8012f02:	230a      	movs	r3, #10
 8012f04:	6063      	str	r3, [r4, #4]
 8012f06:	6863      	ldr	r3, [r4, #4]
 8012f08:	4945      	ldr	r1, [pc, #276]	; (8013020 <_scanf_i+0x1e4>)
 8012f0a:	6960      	ldr	r0, [r4, #20]
 8012f0c:	1ac9      	subs	r1, r1, r3
 8012f0e:	f000 f937 	bl	8013180 <__sccl>
 8012f12:	f04f 0b00 	mov.w	fp, #0
 8012f16:	68a3      	ldr	r3, [r4, #8]
 8012f18:	6822      	ldr	r2, [r4, #0]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d03d      	beq.n	8012f9a <_scanf_i+0x15e>
 8012f1e:	6831      	ldr	r1, [r6, #0]
 8012f20:	6960      	ldr	r0, [r4, #20]
 8012f22:	f891 c000 	ldrb.w	ip, [r1]
 8012f26:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d035      	beq.n	8012f9a <_scanf_i+0x15e>
 8012f2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012f32:	d124      	bne.n	8012f7e <_scanf_i+0x142>
 8012f34:	0510      	lsls	r0, r2, #20
 8012f36:	d522      	bpl.n	8012f7e <_scanf_i+0x142>
 8012f38:	f10b 0b01 	add.w	fp, fp, #1
 8012f3c:	f1b9 0f00 	cmp.w	r9, #0
 8012f40:	d003      	beq.n	8012f4a <_scanf_i+0x10e>
 8012f42:	3301      	adds	r3, #1
 8012f44:	f109 39ff 	add.w	r9, r9, #4294967295
 8012f48:	60a3      	str	r3, [r4, #8]
 8012f4a:	6873      	ldr	r3, [r6, #4]
 8012f4c:	3b01      	subs	r3, #1
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	6073      	str	r3, [r6, #4]
 8012f52:	dd1b      	ble.n	8012f8c <_scanf_i+0x150>
 8012f54:	6833      	ldr	r3, [r6, #0]
 8012f56:	3301      	adds	r3, #1
 8012f58:	6033      	str	r3, [r6, #0]
 8012f5a:	68a3      	ldr	r3, [r4, #8]
 8012f5c:	3b01      	subs	r3, #1
 8012f5e:	60a3      	str	r3, [r4, #8]
 8012f60:	e7d9      	b.n	8012f16 <_scanf_i+0xda>
 8012f62:	f1bb 0f02 	cmp.w	fp, #2
 8012f66:	d1ae      	bne.n	8012ec6 <_scanf_i+0x8a>
 8012f68:	6822      	ldr	r2, [r4, #0]
 8012f6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012f6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012f72:	d1bf      	bne.n	8012ef4 <_scanf_i+0xb8>
 8012f74:	2310      	movs	r3, #16
 8012f76:	6063      	str	r3, [r4, #4]
 8012f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f7c:	e7a2      	b.n	8012ec4 <_scanf_i+0x88>
 8012f7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012f82:	6022      	str	r2, [r4, #0]
 8012f84:	780b      	ldrb	r3, [r1, #0]
 8012f86:	f805 3b01 	strb.w	r3, [r5], #1
 8012f8a:	e7de      	b.n	8012f4a <_scanf_i+0x10e>
 8012f8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012f90:	4631      	mov	r1, r6
 8012f92:	4650      	mov	r0, sl
 8012f94:	4798      	blx	r3
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d0df      	beq.n	8012f5a <_scanf_i+0x11e>
 8012f9a:	6823      	ldr	r3, [r4, #0]
 8012f9c:	05d9      	lsls	r1, r3, #23
 8012f9e:	d50d      	bpl.n	8012fbc <_scanf_i+0x180>
 8012fa0:	42bd      	cmp	r5, r7
 8012fa2:	d909      	bls.n	8012fb8 <_scanf_i+0x17c>
 8012fa4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012fa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fac:	4632      	mov	r2, r6
 8012fae:	4650      	mov	r0, sl
 8012fb0:	4798      	blx	r3
 8012fb2:	f105 39ff 	add.w	r9, r5, #4294967295
 8012fb6:	464d      	mov	r5, r9
 8012fb8:	42bd      	cmp	r5, r7
 8012fba:	d028      	beq.n	801300e <_scanf_i+0x1d2>
 8012fbc:	6822      	ldr	r2, [r4, #0]
 8012fbe:	f012 0210 	ands.w	r2, r2, #16
 8012fc2:	d113      	bne.n	8012fec <_scanf_i+0x1b0>
 8012fc4:	702a      	strb	r2, [r5, #0]
 8012fc6:	6863      	ldr	r3, [r4, #4]
 8012fc8:	9e01      	ldr	r6, [sp, #4]
 8012fca:	4639      	mov	r1, r7
 8012fcc:	4650      	mov	r0, sl
 8012fce:	47b0      	blx	r6
 8012fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8012fd4:	6821      	ldr	r1, [r4, #0]
 8012fd6:	1d1a      	adds	r2, r3, #4
 8012fd8:	f8c8 2000 	str.w	r2, [r8]
 8012fdc:	f011 0f20 	tst.w	r1, #32
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	d00f      	beq.n	8013004 <_scanf_i+0x1c8>
 8012fe4:	6018      	str	r0, [r3, #0]
 8012fe6:	68e3      	ldr	r3, [r4, #12]
 8012fe8:	3301      	adds	r3, #1
 8012fea:	60e3      	str	r3, [r4, #12]
 8012fec:	6923      	ldr	r3, [r4, #16]
 8012fee:	1bed      	subs	r5, r5, r7
 8012ff0:	445d      	add	r5, fp
 8012ff2:	442b      	add	r3, r5
 8012ff4:	6123      	str	r3, [r4, #16]
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	b007      	add	sp, #28
 8012ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ffe:	f04f 0b00 	mov.w	fp, #0
 8013002:	e7ca      	b.n	8012f9a <_scanf_i+0x15e>
 8013004:	07ca      	lsls	r2, r1, #31
 8013006:	bf4c      	ite	mi
 8013008:	8018      	strhmi	r0, [r3, #0]
 801300a:	6018      	strpl	r0, [r3, #0]
 801300c:	e7eb      	b.n	8012fe6 <_scanf_i+0x1aa>
 801300e:	2001      	movs	r0, #1
 8013010:	e7f2      	b.n	8012ff8 <_scanf_i+0x1bc>
 8013012:	bf00      	nop
 8013014:	080156bc 	.word	0x080156bc
 8013018:	08013b4d 	.word	0x08013b4d
 801301c:	08012731 	.word	0x08012731
 8013020:	08015a7a 	.word	0x08015a7a

08013024 <__sflush_r>:
 8013024:	898a      	ldrh	r2, [r1, #12]
 8013026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302a:	4605      	mov	r5, r0
 801302c:	0710      	lsls	r0, r2, #28
 801302e:	460c      	mov	r4, r1
 8013030:	d458      	bmi.n	80130e4 <__sflush_r+0xc0>
 8013032:	684b      	ldr	r3, [r1, #4]
 8013034:	2b00      	cmp	r3, #0
 8013036:	dc05      	bgt.n	8013044 <__sflush_r+0x20>
 8013038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801303a:	2b00      	cmp	r3, #0
 801303c:	dc02      	bgt.n	8013044 <__sflush_r+0x20>
 801303e:	2000      	movs	r0, #0
 8013040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013046:	2e00      	cmp	r6, #0
 8013048:	d0f9      	beq.n	801303e <__sflush_r+0x1a>
 801304a:	2300      	movs	r3, #0
 801304c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013050:	682f      	ldr	r7, [r5, #0]
 8013052:	6a21      	ldr	r1, [r4, #32]
 8013054:	602b      	str	r3, [r5, #0]
 8013056:	d032      	beq.n	80130be <__sflush_r+0x9a>
 8013058:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801305a:	89a3      	ldrh	r3, [r4, #12]
 801305c:	075a      	lsls	r2, r3, #29
 801305e:	d505      	bpl.n	801306c <__sflush_r+0x48>
 8013060:	6863      	ldr	r3, [r4, #4]
 8013062:	1ac0      	subs	r0, r0, r3
 8013064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013066:	b10b      	cbz	r3, 801306c <__sflush_r+0x48>
 8013068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801306a:	1ac0      	subs	r0, r0, r3
 801306c:	2300      	movs	r3, #0
 801306e:	4602      	mov	r2, r0
 8013070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013072:	6a21      	ldr	r1, [r4, #32]
 8013074:	4628      	mov	r0, r5
 8013076:	47b0      	blx	r6
 8013078:	1c43      	adds	r3, r0, #1
 801307a:	89a3      	ldrh	r3, [r4, #12]
 801307c:	d106      	bne.n	801308c <__sflush_r+0x68>
 801307e:	6829      	ldr	r1, [r5, #0]
 8013080:	291d      	cmp	r1, #29
 8013082:	d82b      	bhi.n	80130dc <__sflush_r+0xb8>
 8013084:	4a29      	ldr	r2, [pc, #164]	; (801312c <__sflush_r+0x108>)
 8013086:	410a      	asrs	r2, r1
 8013088:	07d6      	lsls	r6, r2, #31
 801308a:	d427      	bmi.n	80130dc <__sflush_r+0xb8>
 801308c:	2200      	movs	r2, #0
 801308e:	6062      	str	r2, [r4, #4]
 8013090:	04d9      	lsls	r1, r3, #19
 8013092:	6922      	ldr	r2, [r4, #16]
 8013094:	6022      	str	r2, [r4, #0]
 8013096:	d504      	bpl.n	80130a2 <__sflush_r+0x7e>
 8013098:	1c42      	adds	r2, r0, #1
 801309a:	d101      	bne.n	80130a0 <__sflush_r+0x7c>
 801309c:	682b      	ldr	r3, [r5, #0]
 801309e:	b903      	cbnz	r3, 80130a2 <__sflush_r+0x7e>
 80130a0:	6560      	str	r0, [r4, #84]	; 0x54
 80130a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130a4:	602f      	str	r7, [r5, #0]
 80130a6:	2900      	cmp	r1, #0
 80130a8:	d0c9      	beq.n	801303e <__sflush_r+0x1a>
 80130aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130ae:	4299      	cmp	r1, r3
 80130b0:	d002      	beq.n	80130b8 <__sflush_r+0x94>
 80130b2:	4628      	mov	r0, r5
 80130b4:	f7fd fefa 	bl	8010eac <_free_r>
 80130b8:	2000      	movs	r0, #0
 80130ba:	6360      	str	r0, [r4, #52]	; 0x34
 80130bc:	e7c0      	b.n	8013040 <__sflush_r+0x1c>
 80130be:	2301      	movs	r3, #1
 80130c0:	4628      	mov	r0, r5
 80130c2:	47b0      	blx	r6
 80130c4:	1c41      	adds	r1, r0, #1
 80130c6:	d1c8      	bne.n	801305a <__sflush_r+0x36>
 80130c8:	682b      	ldr	r3, [r5, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d0c5      	beq.n	801305a <__sflush_r+0x36>
 80130ce:	2b1d      	cmp	r3, #29
 80130d0:	d001      	beq.n	80130d6 <__sflush_r+0xb2>
 80130d2:	2b16      	cmp	r3, #22
 80130d4:	d101      	bne.n	80130da <__sflush_r+0xb6>
 80130d6:	602f      	str	r7, [r5, #0]
 80130d8:	e7b1      	b.n	801303e <__sflush_r+0x1a>
 80130da:	89a3      	ldrh	r3, [r4, #12]
 80130dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130e0:	81a3      	strh	r3, [r4, #12]
 80130e2:	e7ad      	b.n	8013040 <__sflush_r+0x1c>
 80130e4:	690f      	ldr	r7, [r1, #16]
 80130e6:	2f00      	cmp	r7, #0
 80130e8:	d0a9      	beq.n	801303e <__sflush_r+0x1a>
 80130ea:	0793      	lsls	r3, r2, #30
 80130ec:	680e      	ldr	r6, [r1, #0]
 80130ee:	bf08      	it	eq
 80130f0:	694b      	ldreq	r3, [r1, #20]
 80130f2:	600f      	str	r7, [r1, #0]
 80130f4:	bf18      	it	ne
 80130f6:	2300      	movne	r3, #0
 80130f8:	eba6 0807 	sub.w	r8, r6, r7
 80130fc:	608b      	str	r3, [r1, #8]
 80130fe:	f1b8 0f00 	cmp.w	r8, #0
 8013102:	dd9c      	ble.n	801303e <__sflush_r+0x1a>
 8013104:	6a21      	ldr	r1, [r4, #32]
 8013106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013108:	4643      	mov	r3, r8
 801310a:	463a      	mov	r2, r7
 801310c:	4628      	mov	r0, r5
 801310e:	47b0      	blx	r6
 8013110:	2800      	cmp	r0, #0
 8013112:	dc06      	bgt.n	8013122 <__sflush_r+0xfe>
 8013114:	89a3      	ldrh	r3, [r4, #12]
 8013116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801311a:	81a3      	strh	r3, [r4, #12]
 801311c:	f04f 30ff 	mov.w	r0, #4294967295
 8013120:	e78e      	b.n	8013040 <__sflush_r+0x1c>
 8013122:	4407      	add	r7, r0
 8013124:	eba8 0800 	sub.w	r8, r8, r0
 8013128:	e7e9      	b.n	80130fe <__sflush_r+0xda>
 801312a:	bf00      	nop
 801312c:	dfbffffe 	.word	0xdfbffffe

08013130 <_fflush_r>:
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	690b      	ldr	r3, [r1, #16]
 8013134:	4605      	mov	r5, r0
 8013136:	460c      	mov	r4, r1
 8013138:	b913      	cbnz	r3, 8013140 <_fflush_r+0x10>
 801313a:	2500      	movs	r5, #0
 801313c:	4628      	mov	r0, r5
 801313e:	bd38      	pop	{r3, r4, r5, pc}
 8013140:	b118      	cbz	r0, 801314a <_fflush_r+0x1a>
 8013142:	6a03      	ldr	r3, [r0, #32]
 8013144:	b90b      	cbnz	r3, 801314a <_fflush_r+0x1a>
 8013146:	f7fc fe73 	bl	800fe30 <__sinit>
 801314a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d0f3      	beq.n	801313a <_fflush_r+0xa>
 8013152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013154:	07d0      	lsls	r0, r2, #31
 8013156:	d404      	bmi.n	8013162 <_fflush_r+0x32>
 8013158:	0599      	lsls	r1, r3, #22
 801315a:	d402      	bmi.n	8013162 <_fflush_r+0x32>
 801315c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801315e:	f7fd f814 	bl	801018a <__retarget_lock_acquire_recursive>
 8013162:	4628      	mov	r0, r5
 8013164:	4621      	mov	r1, r4
 8013166:	f7ff ff5d 	bl	8013024 <__sflush_r>
 801316a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801316c:	07da      	lsls	r2, r3, #31
 801316e:	4605      	mov	r5, r0
 8013170:	d4e4      	bmi.n	801313c <_fflush_r+0xc>
 8013172:	89a3      	ldrh	r3, [r4, #12]
 8013174:	059b      	lsls	r3, r3, #22
 8013176:	d4e1      	bmi.n	801313c <_fflush_r+0xc>
 8013178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801317a:	f7fd f807 	bl	801018c <__retarget_lock_release_recursive>
 801317e:	e7dd      	b.n	801313c <_fflush_r+0xc>

08013180 <__sccl>:
 8013180:	b570      	push	{r4, r5, r6, lr}
 8013182:	780b      	ldrb	r3, [r1, #0]
 8013184:	4604      	mov	r4, r0
 8013186:	2b5e      	cmp	r3, #94	; 0x5e
 8013188:	bf0b      	itete	eq
 801318a:	784b      	ldrbeq	r3, [r1, #1]
 801318c:	1c4a      	addne	r2, r1, #1
 801318e:	1c8a      	addeq	r2, r1, #2
 8013190:	2100      	movne	r1, #0
 8013192:	bf08      	it	eq
 8013194:	2101      	moveq	r1, #1
 8013196:	3801      	subs	r0, #1
 8013198:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801319c:	f800 1f01 	strb.w	r1, [r0, #1]!
 80131a0:	42a8      	cmp	r0, r5
 80131a2:	d1fb      	bne.n	801319c <__sccl+0x1c>
 80131a4:	b90b      	cbnz	r3, 80131aa <__sccl+0x2a>
 80131a6:	1e50      	subs	r0, r2, #1
 80131a8:	bd70      	pop	{r4, r5, r6, pc}
 80131aa:	f081 0101 	eor.w	r1, r1, #1
 80131ae:	54e1      	strb	r1, [r4, r3]
 80131b0:	4610      	mov	r0, r2
 80131b2:	4602      	mov	r2, r0
 80131b4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80131b8:	2d2d      	cmp	r5, #45	; 0x2d
 80131ba:	d005      	beq.n	80131c8 <__sccl+0x48>
 80131bc:	2d5d      	cmp	r5, #93	; 0x5d
 80131be:	d016      	beq.n	80131ee <__sccl+0x6e>
 80131c0:	2d00      	cmp	r5, #0
 80131c2:	d0f1      	beq.n	80131a8 <__sccl+0x28>
 80131c4:	462b      	mov	r3, r5
 80131c6:	e7f2      	b.n	80131ae <__sccl+0x2e>
 80131c8:	7846      	ldrb	r6, [r0, #1]
 80131ca:	2e5d      	cmp	r6, #93	; 0x5d
 80131cc:	d0fa      	beq.n	80131c4 <__sccl+0x44>
 80131ce:	42b3      	cmp	r3, r6
 80131d0:	dcf8      	bgt.n	80131c4 <__sccl+0x44>
 80131d2:	3002      	adds	r0, #2
 80131d4:	461a      	mov	r2, r3
 80131d6:	3201      	adds	r2, #1
 80131d8:	4296      	cmp	r6, r2
 80131da:	54a1      	strb	r1, [r4, r2]
 80131dc:	dcfb      	bgt.n	80131d6 <__sccl+0x56>
 80131de:	1af2      	subs	r2, r6, r3
 80131e0:	3a01      	subs	r2, #1
 80131e2:	1c5d      	adds	r5, r3, #1
 80131e4:	42b3      	cmp	r3, r6
 80131e6:	bfa8      	it	ge
 80131e8:	2200      	movge	r2, #0
 80131ea:	18ab      	adds	r3, r5, r2
 80131ec:	e7e1      	b.n	80131b2 <__sccl+0x32>
 80131ee:	4610      	mov	r0, r2
 80131f0:	e7da      	b.n	80131a8 <__sccl+0x28>

080131f2 <__submore>:
 80131f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f6:	460c      	mov	r4, r1
 80131f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80131fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131fe:	4299      	cmp	r1, r3
 8013200:	d11d      	bne.n	801323e <__submore+0x4c>
 8013202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013206:	f7fd fec5 	bl	8010f94 <_malloc_r>
 801320a:	b918      	cbnz	r0, 8013214 <__submore+0x22>
 801320c:	f04f 30ff 	mov.w	r0, #4294967295
 8013210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013218:	63a3      	str	r3, [r4, #56]	; 0x38
 801321a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801321e:	6360      	str	r0, [r4, #52]	; 0x34
 8013220:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013224:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013228:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801322c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013230:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013234:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013238:	6020      	str	r0, [r4, #0]
 801323a:	2000      	movs	r0, #0
 801323c:	e7e8      	b.n	8013210 <__submore+0x1e>
 801323e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013240:	0077      	lsls	r7, r6, #1
 8013242:	463a      	mov	r2, r7
 8013244:	f000 fbe1 	bl	8013a0a <_realloc_r>
 8013248:	4605      	mov	r5, r0
 801324a:	2800      	cmp	r0, #0
 801324c:	d0de      	beq.n	801320c <__submore+0x1a>
 801324e:	eb00 0806 	add.w	r8, r0, r6
 8013252:	4601      	mov	r1, r0
 8013254:	4632      	mov	r2, r6
 8013256:	4640      	mov	r0, r8
 8013258:	f7fc ff99 	bl	801018e <memcpy>
 801325c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013260:	f8c4 8000 	str.w	r8, [r4]
 8013264:	e7e9      	b.n	801323a <__submore+0x48>

08013266 <memmove>:
 8013266:	4288      	cmp	r0, r1
 8013268:	b510      	push	{r4, lr}
 801326a:	eb01 0402 	add.w	r4, r1, r2
 801326e:	d902      	bls.n	8013276 <memmove+0x10>
 8013270:	4284      	cmp	r4, r0
 8013272:	4623      	mov	r3, r4
 8013274:	d807      	bhi.n	8013286 <memmove+0x20>
 8013276:	1e43      	subs	r3, r0, #1
 8013278:	42a1      	cmp	r1, r4
 801327a:	d008      	beq.n	801328e <memmove+0x28>
 801327c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013280:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013284:	e7f8      	b.n	8013278 <memmove+0x12>
 8013286:	4402      	add	r2, r0
 8013288:	4601      	mov	r1, r0
 801328a:	428a      	cmp	r2, r1
 801328c:	d100      	bne.n	8013290 <memmove+0x2a>
 801328e:	bd10      	pop	{r4, pc}
 8013290:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013294:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013298:	e7f7      	b.n	801328a <memmove+0x24>
	...

0801329c <_sbrk_r>:
 801329c:	b538      	push	{r3, r4, r5, lr}
 801329e:	4d06      	ldr	r5, [pc, #24]	; (80132b8 <_sbrk_r+0x1c>)
 80132a0:	2300      	movs	r3, #0
 80132a2:	4604      	mov	r4, r0
 80132a4:	4608      	mov	r0, r1
 80132a6:	602b      	str	r3, [r5, #0]
 80132a8:	f7f0 fbc4 	bl	8003a34 <_sbrk>
 80132ac:	1c43      	adds	r3, r0, #1
 80132ae:	d102      	bne.n	80132b6 <_sbrk_r+0x1a>
 80132b0:	682b      	ldr	r3, [r5, #0]
 80132b2:	b103      	cbz	r3, 80132b6 <_sbrk_r+0x1a>
 80132b4:	6023      	str	r3, [r4, #0]
 80132b6:	bd38      	pop	{r3, r4, r5, pc}
 80132b8:	20004ad4 	.word	0x20004ad4
 80132bc:	00000000 	.word	0x00000000

080132c0 <nan>:
 80132c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80132c8 <nan+0x8>
 80132c4:	4770      	bx	lr
 80132c6:	bf00      	nop
 80132c8:	00000000 	.word	0x00000000
 80132cc:	7ff80000 	.word	0x7ff80000

080132d0 <__assert_func>:
 80132d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80132d2:	4614      	mov	r4, r2
 80132d4:	461a      	mov	r2, r3
 80132d6:	4b09      	ldr	r3, [pc, #36]	; (80132fc <__assert_func+0x2c>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	4605      	mov	r5, r0
 80132dc:	68d8      	ldr	r0, [r3, #12]
 80132de:	b14c      	cbz	r4, 80132f4 <__assert_func+0x24>
 80132e0:	4b07      	ldr	r3, [pc, #28]	; (8013300 <__assert_func+0x30>)
 80132e2:	9100      	str	r1, [sp, #0]
 80132e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80132e8:	4906      	ldr	r1, [pc, #24]	; (8013304 <__assert_func+0x34>)
 80132ea:	462b      	mov	r3, r5
 80132ec:	f000 fc3e 	bl	8013b6c <fiprintf>
 80132f0:	f000 fc4e 	bl	8013b90 <abort>
 80132f4:	4b04      	ldr	r3, [pc, #16]	; (8013308 <__assert_func+0x38>)
 80132f6:	461c      	mov	r4, r3
 80132f8:	e7f3      	b.n	80132e2 <__assert_func+0x12>
 80132fa:	bf00      	nop
 80132fc:	20000070 	.word	0x20000070
 8013300:	08015a8d 	.word	0x08015a8d
 8013304:	08015a9a 	.word	0x08015a9a
 8013308:	08015ac8 	.word	0x08015ac8

0801330c <_calloc_r>:
 801330c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801330e:	fba1 2402 	umull	r2, r4, r1, r2
 8013312:	b94c      	cbnz	r4, 8013328 <_calloc_r+0x1c>
 8013314:	4611      	mov	r1, r2
 8013316:	9201      	str	r2, [sp, #4]
 8013318:	f7fd fe3c 	bl	8010f94 <_malloc_r>
 801331c:	9a01      	ldr	r2, [sp, #4]
 801331e:	4605      	mov	r5, r0
 8013320:	b930      	cbnz	r0, 8013330 <_calloc_r+0x24>
 8013322:	4628      	mov	r0, r5
 8013324:	b003      	add	sp, #12
 8013326:	bd30      	pop	{r4, r5, pc}
 8013328:	220c      	movs	r2, #12
 801332a:	6002      	str	r2, [r0, #0]
 801332c:	2500      	movs	r5, #0
 801332e:	e7f8      	b.n	8013322 <_calloc_r+0x16>
 8013330:	4621      	mov	r1, r4
 8013332:	f7fc fe44 	bl	800ffbe <memset>
 8013336:	e7f4      	b.n	8013322 <_calloc_r+0x16>

08013338 <rshift>:
 8013338:	6903      	ldr	r3, [r0, #16]
 801333a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801333e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013342:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013346:	f100 0414 	add.w	r4, r0, #20
 801334a:	dd45      	ble.n	80133d8 <rshift+0xa0>
 801334c:	f011 011f 	ands.w	r1, r1, #31
 8013350:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013354:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013358:	d10c      	bne.n	8013374 <rshift+0x3c>
 801335a:	f100 0710 	add.w	r7, r0, #16
 801335e:	4629      	mov	r1, r5
 8013360:	42b1      	cmp	r1, r6
 8013362:	d334      	bcc.n	80133ce <rshift+0x96>
 8013364:	1a9b      	subs	r3, r3, r2
 8013366:	009b      	lsls	r3, r3, #2
 8013368:	1eea      	subs	r2, r5, #3
 801336a:	4296      	cmp	r6, r2
 801336c:	bf38      	it	cc
 801336e:	2300      	movcc	r3, #0
 8013370:	4423      	add	r3, r4
 8013372:	e015      	b.n	80133a0 <rshift+0x68>
 8013374:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013378:	f1c1 0820 	rsb	r8, r1, #32
 801337c:	40cf      	lsrs	r7, r1
 801337e:	f105 0e04 	add.w	lr, r5, #4
 8013382:	46a1      	mov	r9, r4
 8013384:	4576      	cmp	r6, lr
 8013386:	46f4      	mov	ip, lr
 8013388:	d815      	bhi.n	80133b6 <rshift+0x7e>
 801338a:	1a9a      	subs	r2, r3, r2
 801338c:	0092      	lsls	r2, r2, #2
 801338e:	3a04      	subs	r2, #4
 8013390:	3501      	adds	r5, #1
 8013392:	42ae      	cmp	r6, r5
 8013394:	bf38      	it	cc
 8013396:	2200      	movcc	r2, #0
 8013398:	18a3      	adds	r3, r4, r2
 801339a:	50a7      	str	r7, [r4, r2]
 801339c:	b107      	cbz	r7, 80133a0 <rshift+0x68>
 801339e:	3304      	adds	r3, #4
 80133a0:	1b1a      	subs	r2, r3, r4
 80133a2:	42a3      	cmp	r3, r4
 80133a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80133a8:	bf08      	it	eq
 80133aa:	2300      	moveq	r3, #0
 80133ac:	6102      	str	r2, [r0, #16]
 80133ae:	bf08      	it	eq
 80133b0:	6143      	streq	r3, [r0, #20]
 80133b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133b6:	f8dc c000 	ldr.w	ip, [ip]
 80133ba:	fa0c fc08 	lsl.w	ip, ip, r8
 80133be:	ea4c 0707 	orr.w	r7, ip, r7
 80133c2:	f849 7b04 	str.w	r7, [r9], #4
 80133c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80133ca:	40cf      	lsrs	r7, r1
 80133cc:	e7da      	b.n	8013384 <rshift+0x4c>
 80133ce:	f851 cb04 	ldr.w	ip, [r1], #4
 80133d2:	f847 cf04 	str.w	ip, [r7, #4]!
 80133d6:	e7c3      	b.n	8013360 <rshift+0x28>
 80133d8:	4623      	mov	r3, r4
 80133da:	e7e1      	b.n	80133a0 <rshift+0x68>

080133dc <__hexdig_fun>:
 80133dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80133e0:	2b09      	cmp	r3, #9
 80133e2:	d802      	bhi.n	80133ea <__hexdig_fun+0xe>
 80133e4:	3820      	subs	r0, #32
 80133e6:	b2c0      	uxtb	r0, r0
 80133e8:	4770      	bx	lr
 80133ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80133ee:	2b05      	cmp	r3, #5
 80133f0:	d801      	bhi.n	80133f6 <__hexdig_fun+0x1a>
 80133f2:	3847      	subs	r0, #71	; 0x47
 80133f4:	e7f7      	b.n	80133e6 <__hexdig_fun+0xa>
 80133f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80133fa:	2b05      	cmp	r3, #5
 80133fc:	d801      	bhi.n	8013402 <__hexdig_fun+0x26>
 80133fe:	3827      	subs	r0, #39	; 0x27
 8013400:	e7f1      	b.n	80133e6 <__hexdig_fun+0xa>
 8013402:	2000      	movs	r0, #0
 8013404:	4770      	bx	lr
	...

08013408 <__gethex>:
 8013408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801340c:	4617      	mov	r7, r2
 801340e:	680a      	ldr	r2, [r1, #0]
 8013410:	b085      	sub	sp, #20
 8013412:	f102 0b02 	add.w	fp, r2, #2
 8013416:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801341a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801341e:	4681      	mov	r9, r0
 8013420:	468a      	mov	sl, r1
 8013422:	9302      	str	r3, [sp, #8]
 8013424:	32fe      	adds	r2, #254	; 0xfe
 8013426:	eb02 030b 	add.w	r3, r2, fp
 801342a:	46d8      	mov	r8, fp
 801342c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013430:	9301      	str	r3, [sp, #4]
 8013432:	2830      	cmp	r0, #48	; 0x30
 8013434:	d0f7      	beq.n	8013426 <__gethex+0x1e>
 8013436:	f7ff ffd1 	bl	80133dc <__hexdig_fun>
 801343a:	4604      	mov	r4, r0
 801343c:	2800      	cmp	r0, #0
 801343e:	d138      	bne.n	80134b2 <__gethex+0xaa>
 8013440:	49a7      	ldr	r1, [pc, #668]	; (80136e0 <__gethex+0x2d8>)
 8013442:	2201      	movs	r2, #1
 8013444:	4640      	mov	r0, r8
 8013446:	f7fc fdc2 	bl	800ffce <strncmp>
 801344a:	4606      	mov	r6, r0
 801344c:	2800      	cmp	r0, #0
 801344e:	d169      	bne.n	8013524 <__gethex+0x11c>
 8013450:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013454:	465d      	mov	r5, fp
 8013456:	f7ff ffc1 	bl	80133dc <__hexdig_fun>
 801345a:	2800      	cmp	r0, #0
 801345c:	d064      	beq.n	8013528 <__gethex+0x120>
 801345e:	465a      	mov	r2, fp
 8013460:	7810      	ldrb	r0, [r2, #0]
 8013462:	2830      	cmp	r0, #48	; 0x30
 8013464:	4690      	mov	r8, r2
 8013466:	f102 0201 	add.w	r2, r2, #1
 801346a:	d0f9      	beq.n	8013460 <__gethex+0x58>
 801346c:	f7ff ffb6 	bl	80133dc <__hexdig_fun>
 8013470:	2301      	movs	r3, #1
 8013472:	fab0 f480 	clz	r4, r0
 8013476:	0964      	lsrs	r4, r4, #5
 8013478:	465e      	mov	r6, fp
 801347a:	9301      	str	r3, [sp, #4]
 801347c:	4642      	mov	r2, r8
 801347e:	4615      	mov	r5, r2
 8013480:	3201      	adds	r2, #1
 8013482:	7828      	ldrb	r0, [r5, #0]
 8013484:	f7ff ffaa 	bl	80133dc <__hexdig_fun>
 8013488:	2800      	cmp	r0, #0
 801348a:	d1f8      	bne.n	801347e <__gethex+0x76>
 801348c:	4994      	ldr	r1, [pc, #592]	; (80136e0 <__gethex+0x2d8>)
 801348e:	2201      	movs	r2, #1
 8013490:	4628      	mov	r0, r5
 8013492:	f7fc fd9c 	bl	800ffce <strncmp>
 8013496:	b978      	cbnz	r0, 80134b8 <__gethex+0xb0>
 8013498:	b946      	cbnz	r6, 80134ac <__gethex+0xa4>
 801349a:	1c6e      	adds	r6, r5, #1
 801349c:	4632      	mov	r2, r6
 801349e:	4615      	mov	r5, r2
 80134a0:	3201      	adds	r2, #1
 80134a2:	7828      	ldrb	r0, [r5, #0]
 80134a4:	f7ff ff9a 	bl	80133dc <__hexdig_fun>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d1f8      	bne.n	801349e <__gethex+0x96>
 80134ac:	1b73      	subs	r3, r6, r5
 80134ae:	009e      	lsls	r6, r3, #2
 80134b0:	e004      	b.n	80134bc <__gethex+0xb4>
 80134b2:	2400      	movs	r4, #0
 80134b4:	4626      	mov	r6, r4
 80134b6:	e7e1      	b.n	801347c <__gethex+0x74>
 80134b8:	2e00      	cmp	r6, #0
 80134ba:	d1f7      	bne.n	80134ac <__gethex+0xa4>
 80134bc:	782b      	ldrb	r3, [r5, #0]
 80134be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80134c2:	2b50      	cmp	r3, #80	; 0x50
 80134c4:	d13d      	bne.n	8013542 <__gethex+0x13a>
 80134c6:	786b      	ldrb	r3, [r5, #1]
 80134c8:	2b2b      	cmp	r3, #43	; 0x2b
 80134ca:	d02f      	beq.n	801352c <__gethex+0x124>
 80134cc:	2b2d      	cmp	r3, #45	; 0x2d
 80134ce:	d031      	beq.n	8013534 <__gethex+0x12c>
 80134d0:	1c69      	adds	r1, r5, #1
 80134d2:	f04f 0b00 	mov.w	fp, #0
 80134d6:	7808      	ldrb	r0, [r1, #0]
 80134d8:	f7ff ff80 	bl	80133dc <__hexdig_fun>
 80134dc:	1e42      	subs	r2, r0, #1
 80134de:	b2d2      	uxtb	r2, r2
 80134e0:	2a18      	cmp	r2, #24
 80134e2:	d82e      	bhi.n	8013542 <__gethex+0x13a>
 80134e4:	f1a0 0210 	sub.w	r2, r0, #16
 80134e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80134ec:	f7ff ff76 	bl	80133dc <__hexdig_fun>
 80134f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80134f4:	fa5f fc8c 	uxtb.w	ip, ip
 80134f8:	f1bc 0f18 	cmp.w	ip, #24
 80134fc:	d91d      	bls.n	801353a <__gethex+0x132>
 80134fe:	f1bb 0f00 	cmp.w	fp, #0
 8013502:	d000      	beq.n	8013506 <__gethex+0xfe>
 8013504:	4252      	negs	r2, r2
 8013506:	4416      	add	r6, r2
 8013508:	f8ca 1000 	str.w	r1, [sl]
 801350c:	b1dc      	cbz	r4, 8013546 <__gethex+0x13e>
 801350e:	9b01      	ldr	r3, [sp, #4]
 8013510:	2b00      	cmp	r3, #0
 8013512:	bf14      	ite	ne
 8013514:	f04f 0800 	movne.w	r8, #0
 8013518:	f04f 0806 	moveq.w	r8, #6
 801351c:	4640      	mov	r0, r8
 801351e:	b005      	add	sp, #20
 8013520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013524:	4645      	mov	r5, r8
 8013526:	4626      	mov	r6, r4
 8013528:	2401      	movs	r4, #1
 801352a:	e7c7      	b.n	80134bc <__gethex+0xb4>
 801352c:	f04f 0b00 	mov.w	fp, #0
 8013530:	1ca9      	adds	r1, r5, #2
 8013532:	e7d0      	b.n	80134d6 <__gethex+0xce>
 8013534:	f04f 0b01 	mov.w	fp, #1
 8013538:	e7fa      	b.n	8013530 <__gethex+0x128>
 801353a:	230a      	movs	r3, #10
 801353c:	fb03 0002 	mla	r0, r3, r2, r0
 8013540:	e7d0      	b.n	80134e4 <__gethex+0xdc>
 8013542:	4629      	mov	r1, r5
 8013544:	e7e0      	b.n	8013508 <__gethex+0x100>
 8013546:	eba5 0308 	sub.w	r3, r5, r8
 801354a:	3b01      	subs	r3, #1
 801354c:	4621      	mov	r1, r4
 801354e:	2b07      	cmp	r3, #7
 8013550:	dc0a      	bgt.n	8013568 <__gethex+0x160>
 8013552:	4648      	mov	r0, r9
 8013554:	f7fd fdaa 	bl	80110ac <_Balloc>
 8013558:	4604      	mov	r4, r0
 801355a:	b940      	cbnz	r0, 801356e <__gethex+0x166>
 801355c:	4b61      	ldr	r3, [pc, #388]	; (80136e4 <__gethex+0x2dc>)
 801355e:	4602      	mov	r2, r0
 8013560:	21e4      	movs	r1, #228	; 0xe4
 8013562:	4861      	ldr	r0, [pc, #388]	; (80136e8 <__gethex+0x2e0>)
 8013564:	f7ff feb4 	bl	80132d0 <__assert_func>
 8013568:	3101      	adds	r1, #1
 801356a:	105b      	asrs	r3, r3, #1
 801356c:	e7ef      	b.n	801354e <__gethex+0x146>
 801356e:	f100 0a14 	add.w	sl, r0, #20
 8013572:	2300      	movs	r3, #0
 8013574:	495a      	ldr	r1, [pc, #360]	; (80136e0 <__gethex+0x2d8>)
 8013576:	f8cd a004 	str.w	sl, [sp, #4]
 801357a:	469b      	mov	fp, r3
 801357c:	45a8      	cmp	r8, r5
 801357e:	d342      	bcc.n	8013606 <__gethex+0x1fe>
 8013580:	9801      	ldr	r0, [sp, #4]
 8013582:	f840 bb04 	str.w	fp, [r0], #4
 8013586:	eba0 000a 	sub.w	r0, r0, sl
 801358a:	1080      	asrs	r0, r0, #2
 801358c:	6120      	str	r0, [r4, #16]
 801358e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013592:	4658      	mov	r0, fp
 8013594:	f7fd fe7c 	bl	8011290 <__hi0bits>
 8013598:	683d      	ldr	r5, [r7, #0]
 801359a:	eba8 0000 	sub.w	r0, r8, r0
 801359e:	42a8      	cmp	r0, r5
 80135a0:	dd59      	ble.n	8013656 <__gethex+0x24e>
 80135a2:	eba0 0805 	sub.w	r8, r0, r5
 80135a6:	4641      	mov	r1, r8
 80135a8:	4620      	mov	r0, r4
 80135aa:	f7fe fa0b 	bl	80119c4 <__any_on>
 80135ae:	4683      	mov	fp, r0
 80135b0:	b1b8      	cbz	r0, 80135e2 <__gethex+0x1da>
 80135b2:	f108 33ff 	add.w	r3, r8, #4294967295
 80135b6:	1159      	asrs	r1, r3, #5
 80135b8:	f003 021f 	and.w	r2, r3, #31
 80135bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80135c0:	f04f 0b01 	mov.w	fp, #1
 80135c4:	fa0b f202 	lsl.w	r2, fp, r2
 80135c8:	420a      	tst	r2, r1
 80135ca:	d00a      	beq.n	80135e2 <__gethex+0x1da>
 80135cc:	455b      	cmp	r3, fp
 80135ce:	dd06      	ble.n	80135de <__gethex+0x1d6>
 80135d0:	f1a8 0102 	sub.w	r1, r8, #2
 80135d4:	4620      	mov	r0, r4
 80135d6:	f7fe f9f5 	bl	80119c4 <__any_on>
 80135da:	2800      	cmp	r0, #0
 80135dc:	d138      	bne.n	8013650 <__gethex+0x248>
 80135de:	f04f 0b02 	mov.w	fp, #2
 80135e2:	4641      	mov	r1, r8
 80135e4:	4620      	mov	r0, r4
 80135e6:	f7ff fea7 	bl	8013338 <rshift>
 80135ea:	4446      	add	r6, r8
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	42b3      	cmp	r3, r6
 80135f0:	da41      	bge.n	8013676 <__gethex+0x26e>
 80135f2:	4621      	mov	r1, r4
 80135f4:	4648      	mov	r0, r9
 80135f6:	f7fd fd99 	bl	801112c <_Bfree>
 80135fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135fc:	2300      	movs	r3, #0
 80135fe:	6013      	str	r3, [r2, #0]
 8013600:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013604:	e78a      	b.n	801351c <__gethex+0x114>
 8013606:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801360a:	2a2e      	cmp	r2, #46	; 0x2e
 801360c:	d014      	beq.n	8013638 <__gethex+0x230>
 801360e:	2b20      	cmp	r3, #32
 8013610:	d106      	bne.n	8013620 <__gethex+0x218>
 8013612:	9b01      	ldr	r3, [sp, #4]
 8013614:	f843 bb04 	str.w	fp, [r3], #4
 8013618:	f04f 0b00 	mov.w	fp, #0
 801361c:	9301      	str	r3, [sp, #4]
 801361e:	465b      	mov	r3, fp
 8013620:	7828      	ldrb	r0, [r5, #0]
 8013622:	9303      	str	r3, [sp, #12]
 8013624:	f7ff feda 	bl	80133dc <__hexdig_fun>
 8013628:	9b03      	ldr	r3, [sp, #12]
 801362a:	f000 000f 	and.w	r0, r0, #15
 801362e:	4098      	lsls	r0, r3
 8013630:	ea4b 0b00 	orr.w	fp, fp, r0
 8013634:	3304      	adds	r3, #4
 8013636:	e7a1      	b.n	801357c <__gethex+0x174>
 8013638:	45a8      	cmp	r8, r5
 801363a:	d8e8      	bhi.n	801360e <__gethex+0x206>
 801363c:	2201      	movs	r2, #1
 801363e:	4628      	mov	r0, r5
 8013640:	9303      	str	r3, [sp, #12]
 8013642:	f7fc fcc4 	bl	800ffce <strncmp>
 8013646:	4926      	ldr	r1, [pc, #152]	; (80136e0 <__gethex+0x2d8>)
 8013648:	9b03      	ldr	r3, [sp, #12]
 801364a:	2800      	cmp	r0, #0
 801364c:	d1df      	bne.n	801360e <__gethex+0x206>
 801364e:	e795      	b.n	801357c <__gethex+0x174>
 8013650:	f04f 0b03 	mov.w	fp, #3
 8013654:	e7c5      	b.n	80135e2 <__gethex+0x1da>
 8013656:	da0b      	bge.n	8013670 <__gethex+0x268>
 8013658:	eba5 0800 	sub.w	r8, r5, r0
 801365c:	4621      	mov	r1, r4
 801365e:	4642      	mov	r2, r8
 8013660:	4648      	mov	r0, r9
 8013662:	f7fd ff7d 	bl	8011560 <__lshift>
 8013666:	eba6 0608 	sub.w	r6, r6, r8
 801366a:	4604      	mov	r4, r0
 801366c:	f100 0a14 	add.w	sl, r0, #20
 8013670:	f04f 0b00 	mov.w	fp, #0
 8013674:	e7ba      	b.n	80135ec <__gethex+0x1e4>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	42b3      	cmp	r3, r6
 801367a:	dd73      	ble.n	8013764 <__gethex+0x35c>
 801367c:	1b9e      	subs	r6, r3, r6
 801367e:	42b5      	cmp	r5, r6
 8013680:	dc34      	bgt.n	80136ec <__gethex+0x2e4>
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	2b02      	cmp	r3, #2
 8013686:	d023      	beq.n	80136d0 <__gethex+0x2c8>
 8013688:	2b03      	cmp	r3, #3
 801368a:	d025      	beq.n	80136d8 <__gethex+0x2d0>
 801368c:	2b01      	cmp	r3, #1
 801368e:	d115      	bne.n	80136bc <__gethex+0x2b4>
 8013690:	42b5      	cmp	r5, r6
 8013692:	d113      	bne.n	80136bc <__gethex+0x2b4>
 8013694:	2d01      	cmp	r5, #1
 8013696:	d10b      	bne.n	80136b0 <__gethex+0x2a8>
 8013698:	9a02      	ldr	r2, [sp, #8]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6013      	str	r3, [r2, #0]
 801369e:	2301      	movs	r3, #1
 80136a0:	6123      	str	r3, [r4, #16]
 80136a2:	f8ca 3000 	str.w	r3, [sl]
 80136a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136a8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80136ac:	601c      	str	r4, [r3, #0]
 80136ae:	e735      	b.n	801351c <__gethex+0x114>
 80136b0:	1e69      	subs	r1, r5, #1
 80136b2:	4620      	mov	r0, r4
 80136b4:	f7fe f986 	bl	80119c4 <__any_on>
 80136b8:	2800      	cmp	r0, #0
 80136ba:	d1ed      	bne.n	8013698 <__gethex+0x290>
 80136bc:	4621      	mov	r1, r4
 80136be:	4648      	mov	r0, r9
 80136c0:	f7fd fd34 	bl	801112c <_Bfree>
 80136c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136c6:	2300      	movs	r3, #0
 80136c8:	6013      	str	r3, [r2, #0]
 80136ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 80136ce:	e725      	b.n	801351c <__gethex+0x114>
 80136d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d1f2      	bne.n	80136bc <__gethex+0x2b4>
 80136d6:	e7df      	b.n	8013698 <__gethex+0x290>
 80136d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d1dc      	bne.n	8013698 <__gethex+0x290>
 80136de:	e7ed      	b.n	80136bc <__gethex+0x2b4>
 80136e0:	08015904 	.word	0x08015904
 80136e4:	0801579b 	.word	0x0801579b
 80136e8:	08015ac9 	.word	0x08015ac9
 80136ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80136f0:	f1bb 0f00 	cmp.w	fp, #0
 80136f4:	d133      	bne.n	801375e <__gethex+0x356>
 80136f6:	f1b8 0f00 	cmp.w	r8, #0
 80136fa:	d004      	beq.n	8013706 <__gethex+0x2fe>
 80136fc:	4641      	mov	r1, r8
 80136fe:	4620      	mov	r0, r4
 8013700:	f7fe f960 	bl	80119c4 <__any_on>
 8013704:	4683      	mov	fp, r0
 8013706:	ea4f 1268 	mov.w	r2, r8, asr #5
 801370a:	2301      	movs	r3, #1
 801370c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013710:	f008 081f 	and.w	r8, r8, #31
 8013714:	fa03 f308 	lsl.w	r3, r3, r8
 8013718:	4213      	tst	r3, r2
 801371a:	4631      	mov	r1, r6
 801371c:	4620      	mov	r0, r4
 801371e:	bf18      	it	ne
 8013720:	f04b 0b02 	orrne.w	fp, fp, #2
 8013724:	1bad      	subs	r5, r5, r6
 8013726:	f7ff fe07 	bl	8013338 <rshift>
 801372a:	687e      	ldr	r6, [r7, #4]
 801372c:	f04f 0802 	mov.w	r8, #2
 8013730:	f1bb 0f00 	cmp.w	fp, #0
 8013734:	d04a      	beq.n	80137cc <__gethex+0x3c4>
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2b02      	cmp	r3, #2
 801373a:	d016      	beq.n	801376a <__gethex+0x362>
 801373c:	2b03      	cmp	r3, #3
 801373e:	d018      	beq.n	8013772 <__gethex+0x36a>
 8013740:	2b01      	cmp	r3, #1
 8013742:	d109      	bne.n	8013758 <__gethex+0x350>
 8013744:	f01b 0f02 	tst.w	fp, #2
 8013748:	d006      	beq.n	8013758 <__gethex+0x350>
 801374a:	f8da 3000 	ldr.w	r3, [sl]
 801374e:	ea4b 0b03 	orr.w	fp, fp, r3
 8013752:	f01b 0f01 	tst.w	fp, #1
 8013756:	d10f      	bne.n	8013778 <__gethex+0x370>
 8013758:	f048 0810 	orr.w	r8, r8, #16
 801375c:	e036      	b.n	80137cc <__gethex+0x3c4>
 801375e:	f04f 0b01 	mov.w	fp, #1
 8013762:	e7d0      	b.n	8013706 <__gethex+0x2fe>
 8013764:	f04f 0801 	mov.w	r8, #1
 8013768:	e7e2      	b.n	8013730 <__gethex+0x328>
 801376a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801376c:	f1c3 0301 	rsb	r3, r3, #1
 8013770:	930f      	str	r3, [sp, #60]	; 0x3c
 8013772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013774:	2b00      	cmp	r3, #0
 8013776:	d0ef      	beq.n	8013758 <__gethex+0x350>
 8013778:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801377c:	f104 0214 	add.w	r2, r4, #20
 8013780:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013784:	9301      	str	r3, [sp, #4]
 8013786:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801378a:	2300      	movs	r3, #0
 801378c:	4694      	mov	ip, r2
 801378e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013792:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013796:	d01e      	beq.n	80137d6 <__gethex+0x3ce>
 8013798:	3101      	adds	r1, #1
 801379a:	f8cc 1000 	str.w	r1, [ip]
 801379e:	f1b8 0f02 	cmp.w	r8, #2
 80137a2:	f104 0214 	add.w	r2, r4, #20
 80137a6:	d13d      	bne.n	8013824 <__gethex+0x41c>
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	3b01      	subs	r3, #1
 80137ac:	42ab      	cmp	r3, r5
 80137ae:	d10b      	bne.n	80137c8 <__gethex+0x3c0>
 80137b0:	1169      	asrs	r1, r5, #5
 80137b2:	2301      	movs	r3, #1
 80137b4:	f005 051f 	and.w	r5, r5, #31
 80137b8:	fa03 f505 	lsl.w	r5, r3, r5
 80137bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137c0:	421d      	tst	r5, r3
 80137c2:	bf18      	it	ne
 80137c4:	f04f 0801 	movne.w	r8, #1
 80137c8:	f048 0820 	orr.w	r8, r8, #32
 80137cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137ce:	601c      	str	r4, [r3, #0]
 80137d0:	9b02      	ldr	r3, [sp, #8]
 80137d2:	601e      	str	r6, [r3, #0]
 80137d4:	e6a2      	b.n	801351c <__gethex+0x114>
 80137d6:	4290      	cmp	r0, r2
 80137d8:	f842 3c04 	str.w	r3, [r2, #-4]
 80137dc:	d8d6      	bhi.n	801378c <__gethex+0x384>
 80137de:	68a2      	ldr	r2, [r4, #8]
 80137e0:	4593      	cmp	fp, r2
 80137e2:	db17      	blt.n	8013814 <__gethex+0x40c>
 80137e4:	6861      	ldr	r1, [r4, #4]
 80137e6:	4648      	mov	r0, r9
 80137e8:	3101      	adds	r1, #1
 80137ea:	f7fd fc5f 	bl	80110ac <_Balloc>
 80137ee:	4682      	mov	sl, r0
 80137f0:	b918      	cbnz	r0, 80137fa <__gethex+0x3f2>
 80137f2:	4b1b      	ldr	r3, [pc, #108]	; (8013860 <__gethex+0x458>)
 80137f4:	4602      	mov	r2, r0
 80137f6:	2184      	movs	r1, #132	; 0x84
 80137f8:	e6b3      	b.n	8013562 <__gethex+0x15a>
 80137fa:	6922      	ldr	r2, [r4, #16]
 80137fc:	3202      	adds	r2, #2
 80137fe:	f104 010c 	add.w	r1, r4, #12
 8013802:	0092      	lsls	r2, r2, #2
 8013804:	300c      	adds	r0, #12
 8013806:	f7fc fcc2 	bl	801018e <memcpy>
 801380a:	4621      	mov	r1, r4
 801380c:	4648      	mov	r0, r9
 801380e:	f7fd fc8d 	bl	801112c <_Bfree>
 8013812:	4654      	mov	r4, sl
 8013814:	6922      	ldr	r2, [r4, #16]
 8013816:	1c51      	adds	r1, r2, #1
 8013818:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801381c:	6121      	str	r1, [r4, #16]
 801381e:	2101      	movs	r1, #1
 8013820:	6151      	str	r1, [r2, #20]
 8013822:	e7bc      	b.n	801379e <__gethex+0x396>
 8013824:	6921      	ldr	r1, [r4, #16]
 8013826:	4559      	cmp	r1, fp
 8013828:	dd0b      	ble.n	8013842 <__gethex+0x43a>
 801382a:	2101      	movs	r1, #1
 801382c:	4620      	mov	r0, r4
 801382e:	f7ff fd83 	bl	8013338 <rshift>
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	3601      	adds	r6, #1
 8013836:	42b3      	cmp	r3, r6
 8013838:	f6ff aedb 	blt.w	80135f2 <__gethex+0x1ea>
 801383c:	f04f 0801 	mov.w	r8, #1
 8013840:	e7c2      	b.n	80137c8 <__gethex+0x3c0>
 8013842:	f015 051f 	ands.w	r5, r5, #31
 8013846:	d0f9      	beq.n	801383c <__gethex+0x434>
 8013848:	9b01      	ldr	r3, [sp, #4]
 801384a:	441a      	add	r2, r3
 801384c:	f1c5 0520 	rsb	r5, r5, #32
 8013850:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013854:	f7fd fd1c 	bl	8011290 <__hi0bits>
 8013858:	42a8      	cmp	r0, r5
 801385a:	dbe6      	blt.n	801382a <__gethex+0x422>
 801385c:	e7ee      	b.n	801383c <__gethex+0x434>
 801385e:	bf00      	nop
 8013860:	0801579b 	.word	0x0801579b

08013864 <L_shift>:
 8013864:	f1c2 0208 	rsb	r2, r2, #8
 8013868:	0092      	lsls	r2, r2, #2
 801386a:	b570      	push	{r4, r5, r6, lr}
 801386c:	f1c2 0620 	rsb	r6, r2, #32
 8013870:	6843      	ldr	r3, [r0, #4]
 8013872:	6804      	ldr	r4, [r0, #0]
 8013874:	fa03 f506 	lsl.w	r5, r3, r6
 8013878:	432c      	orrs	r4, r5
 801387a:	40d3      	lsrs	r3, r2
 801387c:	6004      	str	r4, [r0, #0]
 801387e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013882:	4288      	cmp	r0, r1
 8013884:	d3f4      	bcc.n	8013870 <L_shift+0xc>
 8013886:	bd70      	pop	{r4, r5, r6, pc}

08013888 <__match>:
 8013888:	b530      	push	{r4, r5, lr}
 801388a:	6803      	ldr	r3, [r0, #0]
 801388c:	3301      	adds	r3, #1
 801388e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013892:	b914      	cbnz	r4, 801389a <__match+0x12>
 8013894:	6003      	str	r3, [r0, #0]
 8013896:	2001      	movs	r0, #1
 8013898:	bd30      	pop	{r4, r5, pc}
 801389a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801389e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80138a2:	2d19      	cmp	r5, #25
 80138a4:	bf98      	it	ls
 80138a6:	3220      	addls	r2, #32
 80138a8:	42a2      	cmp	r2, r4
 80138aa:	d0f0      	beq.n	801388e <__match+0x6>
 80138ac:	2000      	movs	r0, #0
 80138ae:	e7f3      	b.n	8013898 <__match+0x10>

080138b0 <__hexnan>:
 80138b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b4:	680b      	ldr	r3, [r1, #0]
 80138b6:	6801      	ldr	r1, [r0, #0]
 80138b8:	115e      	asrs	r6, r3, #5
 80138ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80138be:	f013 031f 	ands.w	r3, r3, #31
 80138c2:	b087      	sub	sp, #28
 80138c4:	bf18      	it	ne
 80138c6:	3604      	addne	r6, #4
 80138c8:	2500      	movs	r5, #0
 80138ca:	1f37      	subs	r7, r6, #4
 80138cc:	4682      	mov	sl, r0
 80138ce:	4690      	mov	r8, r2
 80138d0:	9301      	str	r3, [sp, #4]
 80138d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80138d6:	46b9      	mov	r9, r7
 80138d8:	463c      	mov	r4, r7
 80138da:	9502      	str	r5, [sp, #8]
 80138dc:	46ab      	mov	fp, r5
 80138de:	784a      	ldrb	r2, [r1, #1]
 80138e0:	1c4b      	adds	r3, r1, #1
 80138e2:	9303      	str	r3, [sp, #12]
 80138e4:	b342      	cbz	r2, 8013938 <__hexnan+0x88>
 80138e6:	4610      	mov	r0, r2
 80138e8:	9105      	str	r1, [sp, #20]
 80138ea:	9204      	str	r2, [sp, #16]
 80138ec:	f7ff fd76 	bl	80133dc <__hexdig_fun>
 80138f0:	2800      	cmp	r0, #0
 80138f2:	d14f      	bne.n	8013994 <__hexnan+0xe4>
 80138f4:	9a04      	ldr	r2, [sp, #16]
 80138f6:	9905      	ldr	r1, [sp, #20]
 80138f8:	2a20      	cmp	r2, #32
 80138fa:	d818      	bhi.n	801392e <__hexnan+0x7e>
 80138fc:	9b02      	ldr	r3, [sp, #8]
 80138fe:	459b      	cmp	fp, r3
 8013900:	dd13      	ble.n	801392a <__hexnan+0x7a>
 8013902:	454c      	cmp	r4, r9
 8013904:	d206      	bcs.n	8013914 <__hexnan+0x64>
 8013906:	2d07      	cmp	r5, #7
 8013908:	dc04      	bgt.n	8013914 <__hexnan+0x64>
 801390a:	462a      	mov	r2, r5
 801390c:	4649      	mov	r1, r9
 801390e:	4620      	mov	r0, r4
 8013910:	f7ff ffa8 	bl	8013864 <L_shift>
 8013914:	4544      	cmp	r4, r8
 8013916:	d950      	bls.n	80139ba <__hexnan+0x10a>
 8013918:	2300      	movs	r3, #0
 801391a:	f1a4 0904 	sub.w	r9, r4, #4
 801391e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013922:	f8cd b008 	str.w	fp, [sp, #8]
 8013926:	464c      	mov	r4, r9
 8013928:	461d      	mov	r5, r3
 801392a:	9903      	ldr	r1, [sp, #12]
 801392c:	e7d7      	b.n	80138de <__hexnan+0x2e>
 801392e:	2a29      	cmp	r2, #41	; 0x29
 8013930:	d155      	bne.n	80139de <__hexnan+0x12e>
 8013932:	3102      	adds	r1, #2
 8013934:	f8ca 1000 	str.w	r1, [sl]
 8013938:	f1bb 0f00 	cmp.w	fp, #0
 801393c:	d04f      	beq.n	80139de <__hexnan+0x12e>
 801393e:	454c      	cmp	r4, r9
 8013940:	d206      	bcs.n	8013950 <__hexnan+0xa0>
 8013942:	2d07      	cmp	r5, #7
 8013944:	dc04      	bgt.n	8013950 <__hexnan+0xa0>
 8013946:	462a      	mov	r2, r5
 8013948:	4649      	mov	r1, r9
 801394a:	4620      	mov	r0, r4
 801394c:	f7ff ff8a 	bl	8013864 <L_shift>
 8013950:	4544      	cmp	r4, r8
 8013952:	d934      	bls.n	80139be <__hexnan+0x10e>
 8013954:	f1a8 0204 	sub.w	r2, r8, #4
 8013958:	4623      	mov	r3, r4
 801395a:	f853 1b04 	ldr.w	r1, [r3], #4
 801395e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013962:	429f      	cmp	r7, r3
 8013964:	d2f9      	bcs.n	801395a <__hexnan+0xaa>
 8013966:	1b3b      	subs	r3, r7, r4
 8013968:	f023 0303 	bic.w	r3, r3, #3
 801396c:	3304      	adds	r3, #4
 801396e:	3e03      	subs	r6, #3
 8013970:	3401      	adds	r4, #1
 8013972:	42a6      	cmp	r6, r4
 8013974:	bf38      	it	cc
 8013976:	2304      	movcc	r3, #4
 8013978:	4443      	add	r3, r8
 801397a:	2200      	movs	r2, #0
 801397c:	f843 2b04 	str.w	r2, [r3], #4
 8013980:	429f      	cmp	r7, r3
 8013982:	d2fb      	bcs.n	801397c <__hexnan+0xcc>
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	b91b      	cbnz	r3, 8013990 <__hexnan+0xe0>
 8013988:	4547      	cmp	r7, r8
 801398a:	d126      	bne.n	80139da <__hexnan+0x12a>
 801398c:	2301      	movs	r3, #1
 801398e:	603b      	str	r3, [r7, #0]
 8013990:	2005      	movs	r0, #5
 8013992:	e025      	b.n	80139e0 <__hexnan+0x130>
 8013994:	3501      	adds	r5, #1
 8013996:	2d08      	cmp	r5, #8
 8013998:	f10b 0b01 	add.w	fp, fp, #1
 801399c:	dd06      	ble.n	80139ac <__hexnan+0xfc>
 801399e:	4544      	cmp	r4, r8
 80139a0:	d9c3      	bls.n	801392a <__hexnan+0x7a>
 80139a2:	2300      	movs	r3, #0
 80139a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80139a8:	2501      	movs	r5, #1
 80139aa:	3c04      	subs	r4, #4
 80139ac:	6822      	ldr	r2, [r4, #0]
 80139ae:	f000 000f 	and.w	r0, r0, #15
 80139b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80139b6:	6020      	str	r0, [r4, #0]
 80139b8:	e7b7      	b.n	801392a <__hexnan+0x7a>
 80139ba:	2508      	movs	r5, #8
 80139bc:	e7b5      	b.n	801392a <__hexnan+0x7a>
 80139be:	9b01      	ldr	r3, [sp, #4]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d0df      	beq.n	8013984 <__hexnan+0xd4>
 80139c4:	f1c3 0320 	rsb	r3, r3, #32
 80139c8:	f04f 32ff 	mov.w	r2, #4294967295
 80139cc:	40da      	lsrs	r2, r3
 80139ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80139d2:	4013      	ands	r3, r2
 80139d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80139d8:	e7d4      	b.n	8013984 <__hexnan+0xd4>
 80139da:	3f04      	subs	r7, #4
 80139dc:	e7d2      	b.n	8013984 <__hexnan+0xd4>
 80139de:	2004      	movs	r0, #4
 80139e0:	b007      	add	sp, #28
 80139e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080139e6 <__ascii_mbtowc>:
 80139e6:	b082      	sub	sp, #8
 80139e8:	b901      	cbnz	r1, 80139ec <__ascii_mbtowc+0x6>
 80139ea:	a901      	add	r1, sp, #4
 80139ec:	b142      	cbz	r2, 8013a00 <__ascii_mbtowc+0x1a>
 80139ee:	b14b      	cbz	r3, 8013a04 <__ascii_mbtowc+0x1e>
 80139f0:	7813      	ldrb	r3, [r2, #0]
 80139f2:	600b      	str	r3, [r1, #0]
 80139f4:	7812      	ldrb	r2, [r2, #0]
 80139f6:	1e10      	subs	r0, r2, #0
 80139f8:	bf18      	it	ne
 80139fa:	2001      	movne	r0, #1
 80139fc:	b002      	add	sp, #8
 80139fe:	4770      	bx	lr
 8013a00:	4610      	mov	r0, r2
 8013a02:	e7fb      	b.n	80139fc <__ascii_mbtowc+0x16>
 8013a04:	f06f 0001 	mvn.w	r0, #1
 8013a08:	e7f8      	b.n	80139fc <__ascii_mbtowc+0x16>

08013a0a <_realloc_r>:
 8013a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a0e:	4680      	mov	r8, r0
 8013a10:	4614      	mov	r4, r2
 8013a12:	460e      	mov	r6, r1
 8013a14:	b921      	cbnz	r1, 8013a20 <_realloc_r+0x16>
 8013a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a1a:	4611      	mov	r1, r2
 8013a1c:	f7fd baba 	b.w	8010f94 <_malloc_r>
 8013a20:	b92a      	cbnz	r2, 8013a2e <_realloc_r+0x24>
 8013a22:	f7fd fa43 	bl	8010eac <_free_r>
 8013a26:	4625      	mov	r5, r4
 8013a28:	4628      	mov	r0, r5
 8013a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a2e:	f000 f8b6 	bl	8013b9e <_malloc_usable_size_r>
 8013a32:	4284      	cmp	r4, r0
 8013a34:	4607      	mov	r7, r0
 8013a36:	d802      	bhi.n	8013a3e <_realloc_r+0x34>
 8013a38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a3c:	d812      	bhi.n	8013a64 <_realloc_r+0x5a>
 8013a3e:	4621      	mov	r1, r4
 8013a40:	4640      	mov	r0, r8
 8013a42:	f7fd faa7 	bl	8010f94 <_malloc_r>
 8013a46:	4605      	mov	r5, r0
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	d0ed      	beq.n	8013a28 <_realloc_r+0x1e>
 8013a4c:	42bc      	cmp	r4, r7
 8013a4e:	4622      	mov	r2, r4
 8013a50:	4631      	mov	r1, r6
 8013a52:	bf28      	it	cs
 8013a54:	463a      	movcs	r2, r7
 8013a56:	f7fc fb9a 	bl	801018e <memcpy>
 8013a5a:	4631      	mov	r1, r6
 8013a5c:	4640      	mov	r0, r8
 8013a5e:	f7fd fa25 	bl	8010eac <_free_r>
 8013a62:	e7e1      	b.n	8013a28 <_realloc_r+0x1e>
 8013a64:	4635      	mov	r5, r6
 8013a66:	e7df      	b.n	8013a28 <_realloc_r+0x1e>

08013a68 <_strtoul_l.constprop.0>:
 8013a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a6c:	4f36      	ldr	r7, [pc, #216]	; (8013b48 <_strtoul_l.constprop.0+0xe0>)
 8013a6e:	4686      	mov	lr, r0
 8013a70:	460d      	mov	r5, r1
 8013a72:	4628      	mov	r0, r5
 8013a74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a78:	5d3e      	ldrb	r6, [r7, r4]
 8013a7a:	f016 0608 	ands.w	r6, r6, #8
 8013a7e:	d1f8      	bne.n	8013a72 <_strtoul_l.constprop.0+0xa>
 8013a80:	2c2d      	cmp	r4, #45	; 0x2d
 8013a82:	d130      	bne.n	8013ae6 <_strtoul_l.constprop.0+0x7e>
 8013a84:	782c      	ldrb	r4, [r5, #0]
 8013a86:	2601      	movs	r6, #1
 8013a88:	1c85      	adds	r5, r0, #2
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d057      	beq.n	8013b3e <_strtoul_l.constprop.0+0xd6>
 8013a8e:	2b10      	cmp	r3, #16
 8013a90:	d109      	bne.n	8013aa6 <_strtoul_l.constprop.0+0x3e>
 8013a92:	2c30      	cmp	r4, #48	; 0x30
 8013a94:	d107      	bne.n	8013aa6 <_strtoul_l.constprop.0+0x3e>
 8013a96:	7828      	ldrb	r0, [r5, #0]
 8013a98:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013a9c:	2858      	cmp	r0, #88	; 0x58
 8013a9e:	d149      	bne.n	8013b34 <_strtoul_l.constprop.0+0xcc>
 8013aa0:	786c      	ldrb	r4, [r5, #1]
 8013aa2:	2310      	movs	r3, #16
 8013aa4:	3502      	adds	r5, #2
 8013aa6:	f04f 38ff 	mov.w	r8, #4294967295
 8013aaa:	2700      	movs	r7, #0
 8013aac:	fbb8 f8f3 	udiv	r8, r8, r3
 8013ab0:	fb03 f908 	mul.w	r9, r3, r8
 8013ab4:	ea6f 0909 	mvn.w	r9, r9
 8013ab8:	4638      	mov	r0, r7
 8013aba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013abe:	f1bc 0f09 	cmp.w	ip, #9
 8013ac2:	d815      	bhi.n	8013af0 <_strtoul_l.constprop.0+0x88>
 8013ac4:	4664      	mov	r4, ip
 8013ac6:	42a3      	cmp	r3, r4
 8013ac8:	dd23      	ble.n	8013b12 <_strtoul_l.constprop.0+0xaa>
 8013aca:	f1b7 3fff 	cmp.w	r7, #4294967295
 8013ace:	d007      	beq.n	8013ae0 <_strtoul_l.constprop.0+0x78>
 8013ad0:	4580      	cmp	r8, r0
 8013ad2:	d31b      	bcc.n	8013b0c <_strtoul_l.constprop.0+0xa4>
 8013ad4:	d101      	bne.n	8013ada <_strtoul_l.constprop.0+0x72>
 8013ad6:	45a1      	cmp	r9, r4
 8013ad8:	db18      	blt.n	8013b0c <_strtoul_l.constprop.0+0xa4>
 8013ada:	fb00 4003 	mla	r0, r0, r3, r4
 8013ade:	2701      	movs	r7, #1
 8013ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ae4:	e7e9      	b.n	8013aba <_strtoul_l.constprop.0+0x52>
 8013ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8013ae8:	bf04      	itt	eq
 8013aea:	782c      	ldrbeq	r4, [r5, #0]
 8013aec:	1c85      	addeq	r5, r0, #2
 8013aee:	e7cc      	b.n	8013a8a <_strtoul_l.constprop.0+0x22>
 8013af0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013af4:	f1bc 0f19 	cmp.w	ip, #25
 8013af8:	d801      	bhi.n	8013afe <_strtoul_l.constprop.0+0x96>
 8013afa:	3c37      	subs	r4, #55	; 0x37
 8013afc:	e7e3      	b.n	8013ac6 <_strtoul_l.constprop.0+0x5e>
 8013afe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013b02:	f1bc 0f19 	cmp.w	ip, #25
 8013b06:	d804      	bhi.n	8013b12 <_strtoul_l.constprop.0+0xaa>
 8013b08:	3c57      	subs	r4, #87	; 0x57
 8013b0a:	e7dc      	b.n	8013ac6 <_strtoul_l.constprop.0+0x5e>
 8013b0c:	f04f 37ff 	mov.w	r7, #4294967295
 8013b10:	e7e6      	b.n	8013ae0 <_strtoul_l.constprop.0+0x78>
 8013b12:	1c7b      	adds	r3, r7, #1
 8013b14:	d106      	bne.n	8013b24 <_strtoul_l.constprop.0+0xbc>
 8013b16:	2322      	movs	r3, #34	; 0x22
 8013b18:	f8ce 3000 	str.w	r3, [lr]
 8013b1c:	4638      	mov	r0, r7
 8013b1e:	b932      	cbnz	r2, 8013b2e <_strtoul_l.constprop.0+0xc6>
 8013b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b24:	b106      	cbz	r6, 8013b28 <_strtoul_l.constprop.0+0xc0>
 8013b26:	4240      	negs	r0, r0
 8013b28:	2a00      	cmp	r2, #0
 8013b2a:	d0f9      	beq.n	8013b20 <_strtoul_l.constprop.0+0xb8>
 8013b2c:	b107      	cbz	r7, 8013b30 <_strtoul_l.constprop.0+0xc8>
 8013b2e:	1e69      	subs	r1, r5, #1
 8013b30:	6011      	str	r1, [r2, #0]
 8013b32:	e7f5      	b.n	8013b20 <_strtoul_l.constprop.0+0xb8>
 8013b34:	2430      	movs	r4, #48	; 0x30
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d1b5      	bne.n	8013aa6 <_strtoul_l.constprop.0+0x3e>
 8013b3a:	2308      	movs	r3, #8
 8013b3c:	e7b3      	b.n	8013aa6 <_strtoul_l.constprop.0+0x3e>
 8013b3e:	2c30      	cmp	r4, #48	; 0x30
 8013b40:	d0a9      	beq.n	8013a96 <_strtoul_l.constprop.0+0x2e>
 8013b42:	230a      	movs	r3, #10
 8013b44:	e7af      	b.n	8013aa6 <_strtoul_l.constprop.0+0x3e>
 8013b46:	bf00      	nop
 8013b48:	08015959 	.word	0x08015959

08013b4c <_strtoul_r>:
 8013b4c:	f7ff bf8c 	b.w	8013a68 <_strtoul_l.constprop.0>

08013b50 <__ascii_wctomb>:
 8013b50:	b149      	cbz	r1, 8013b66 <__ascii_wctomb+0x16>
 8013b52:	2aff      	cmp	r2, #255	; 0xff
 8013b54:	bf85      	ittet	hi
 8013b56:	238a      	movhi	r3, #138	; 0x8a
 8013b58:	6003      	strhi	r3, [r0, #0]
 8013b5a:	700a      	strbls	r2, [r1, #0]
 8013b5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013b60:	bf98      	it	ls
 8013b62:	2001      	movls	r0, #1
 8013b64:	4770      	bx	lr
 8013b66:	4608      	mov	r0, r1
 8013b68:	4770      	bx	lr
	...

08013b6c <fiprintf>:
 8013b6c:	b40e      	push	{r1, r2, r3}
 8013b6e:	b503      	push	{r0, r1, lr}
 8013b70:	4601      	mov	r1, r0
 8013b72:	ab03      	add	r3, sp, #12
 8013b74:	4805      	ldr	r0, [pc, #20]	; (8013b8c <fiprintf+0x20>)
 8013b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b7a:	6800      	ldr	r0, [r0, #0]
 8013b7c:	9301      	str	r3, [sp, #4]
 8013b7e:	f000 f83f 	bl	8013c00 <_vfiprintf_r>
 8013b82:	b002      	add	sp, #8
 8013b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b88:	b003      	add	sp, #12
 8013b8a:	4770      	bx	lr
 8013b8c:	20000070 	.word	0x20000070

08013b90 <abort>:
 8013b90:	b508      	push	{r3, lr}
 8013b92:	2006      	movs	r0, #6
 8013b94:	f000 fa0c 	bl	8013fb0 <raise>
 8013b98:	2001      	movs	r0, #1
 8013b9a:	f7ef fed3 	bl	8003944 <_exit>

08013b9e <_malloc_usable_size_r>:
 8013b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ba2:	1f18      	subs	r0, r3, #4
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	bfbc      	itt	lt
 8013ba8:	580b      	ldrlt	r3, [r1, r0]
 8013baa:	18c0      	addlt	r0, r0, r3
 8013bac:	4770      	bx	lr

08013bae <__sfputc_r>:
 8013bae:	6893      	ldr	r3, [r2, #8]
 8013bb0:	3b01      	subs	r3, #1
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	b410      	push	{r4}
 8013bb6:	6093      	str	r3, [r2, #8]
 8013bb8:	da08      	bge.n	8013bcc <__sfputc_r+0x1e>
 8013bba:	6994      	ldr	r4, [r2, #24]
 8013bbc:	42a3      	cmp	r3, r4
 8013bbe:	db01      	blt.n	8013bc4 <__sfputc_r+0x16>
 8013bc0:	290a      	cmp	r1, #10
 8013bc2:	d103      	bne.n	8013bcc <__sfputc_r+0x1e>
 8013bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bc8:	f000 b934 	b.w	8013e34 <__swbuf_r>
 8013bcc:	6813      	ldr	r3, [r2, #0]
 8013bce:	1c58      	adds	r0, r3, #1
 8013bd0:	6010      	str	r0, [r2, #0]
 8013bd2:	7019      	strb	r1, [r3, #0]
 8013bd4:	4608      	mov	r0, r1
 8013bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <__sfputs_r>:
 8013bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bde:	4606      	mov	r6, r0
 8013be0:	460f      	mov	r7, r1
 8013be2:	4614      	mov	r4, r2
 8013be4:	18d5      	adds	r5, r2, r3
 8013be6:	42ac      	cmp	r4, r5
 8013be8:	d101      	bne.n	8013bee <__sfputs_r+0x12>
 8013bea:	2000      	movs	r0, #0
 8013bec:	e007      	b.n	8013bfe <__sfputs_r+0x22>
 8013bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bf2:	463a      	mov	r2, r7
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f7ff ffda 	bl	8013bae <__sfputc_r>
 8013bfa:	1c43      	adds	r3, r0, #1
 8013bfc:	d1f3      	bne.n	8013be6 <__sfputs_r+0xa>
 8013bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c00 <_vfiprintf_r>:
 8013c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c04:	460d      	mov	r5, r1
 8013c06:	b09d      	sub	sp, #116	; 0x74
 8013c08:	4614      	mov	r4, r2
 8013c0a:	4698      	mov	r8, r3
 8013c0c:	4606      	mov	r6, r0
 8013c0e:	b118      	cbz	r0, 8013c18 <_vfiprintf_r+0x18>
 8013c10:	6a03      	ldr	r3, [r0, #32]
 8013c12:	b90b      	cbnz	r3, 8013c18 <_vfiprintf_r+0x18>
 8013c14:	f7fc f90c 	bl	800fe30 <__sinit>
 8013c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c1a:	07d9      	lsls	r1, r3, #31
 8013c1c:	d405      	bmi.n	8013c2a <_vfiprintf_r+0x2a>
 8013c1e:	89ab      	ldrh	r3, [r5, #12]
 8013c20:	059a      	lsls	r2, r3, #22
 8013c22:	d402      	bmi.n	8013c2a <_vfiprintf_r+0x2a>
 8013c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c26:	f7fc fab0 	bl	801018a <__retarget_lock_acquire_recursive>
 8013c2a:	89ab      	ldrh	r3, [r5, #12]
 8013c2c:	071b      	lsls	r3, r3, #28
 8013c2e:	d501      	bpl.n	8013c34 <_vfiprintf_r+0x34>
 8013c30:	692b      	ldr	r3, [r5, #16]
 8013c32:	b99b      	cbnz	r3, 8013c5c <_vfiprintf_r+0x5c>
 8013c34:	4629      	mov	r1, r5
 8013c36:	4630      	mov	r0, r6
 8013c38:	f000 f93a 	bl	8013eb0 <__swsetup_r>
 8013c3c:	b170      	cbz	r0, 8013c5c <_vfiprintf_r+0x5c>
 8013c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c40:	07dc      	lsls	r4, r3, #31
 8013c42:	d504      	bpl.n	8013c4e <_vfiprintf_r+0x4e>
 8013c44:	f04f 30ff 	mov.w	r0, #4294967295
 8013c48:	b01d      	add	sp, #116	; 0x74
 8013c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c4e:	89ab      	ldrh	r3, [r5, #12]
 8013c50:	0598      	lsls	r0, r3, #22
 8013c52:	d4f7      	bmi.n	8013c44 <_vfiprintf_r+0x44>
 8013c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c56:	f7fc fa99 	bl	801018c <__retarget_lock_release_recursive>
 8013c5a:	e7f3      	b.n	8013c44 <_vfiprintf_r+0x44>
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8013c60:	2320      	movs	r3, #32
 8013c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c6a:	2330      	movs	r3, #48	; 0x30
 8013c6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013e20 <_vfiprintf_r+0x220>
 8013c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c74:	f04f 0901 	mov.w	r9, #1
 8013c78:	4623      	mov	r3, r4
 8013c7a:	469a      	mov	sl, r3
 8013c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c80:	b10a      	cbz	r2, 8013c86 <_vfiprintf_r+0x86>
 8013c82:	2a25      	cmp	r2, #37	; 0x25
 8013c84:	d1f9      	bne.n	8013c7a <_vfiprintf_r+0x7a>
 8013c86:	ebba 0b04 	subs.w	fp, sl, r4
 8013c8a:	d00b      	beq.n	8013ca4 <_vfiprintf_r+0xa4>
 8013c8c:	465b      	mov	r3, fp
 8013c8e:	4622      	mov	r2, r4
 8013c90:	4629      	mov	r1, r5
 8013c92:	4630      	mov	r0, r6
 8013c94:	f7ff ffa2 	bl	8013bdc <__sfputs_r>
 8013c98:	3001      	adds	r0, #1
 8013c9a:	f000 80a9 	beq.w	8013df0 <_vfiprintf_r+0x1f0>
 8013c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ca0:	445a      	add	r2, fp
 8013ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8013ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	f000 80a1 	beq.w	8013df0 <_vfiprintf_r+0x1f0>
 8013cae:	2300      	movs	r3, #0
 8013cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cb8:	f10a 0a01 	add.w	sl, sl, #1
 8013cbc:	9304      	str	r3, [sp, #16]
 8013cbe:	9307      	str	r3, [sp, #28]
 8013cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8013cc6:	4654      	mov	r4, sl
 8013cc8:	2205      	movs	r2, #5
 8013cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cce:	4854      	ldr	r0, [pc, #336]	; (8013e20 <_vfiprintf_r+0x220>)
 8013cd0:	f7ec faa6 	bl	8000220 <memchr>
 8013cd4:	9a04      	ldr	r2, [sp, #16]
 8013cd6:	b9d8      	cbnz	r0, 8013d10 <_vfiprintf_r+0x110>
 8013cd8:	06d1      	lsls	r1, r2, #27
 8013cda:	bf44      	itt	mi
 8013cdc:	2320      	movmi	r3, #32
 8013cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ce2:	0713      	lsls	r3, r2, #28
 8013ce4:	bf44      	itt	mi
 8013ce6:	232b      	movmi	r3, #43	; 0x2b
 8013ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cec:	f89a 3000 	ldrb.w	r3, [sl]
 8013cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8013cf2:	d015      	beq.n	8013d20 <_vfiprintf_r+0x120>
 8013cf4:	9a07      	ldr	r2, [sp, #28]
 8013cf6:	4654      	mov	r4, sl
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	f04f 0c0a 	mov.w	ip, #10
 8013cfe:	4621      	mov	r1, r4
 8013d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d04:	3b30      	subs	r3, #48	; 0x30
 8013d06:	2b09      	cmp	r3, #9
 8013d08:	d94d      	bls.n	8013da6 <_vfiprintf_r+0x1a6>
 8013d0a:	b1b0      	cbz	r0, 8013d3a <_vfiprintf_r+0x13a>
 8013d0c:	9207      	str	r2, [sp, #28]
 8013d0e:	e014      	b.n	8013d3a <_vfiprintf_r+0x13a>
 8013d10:	eba0 0308 	sub.w	r3, r0, r8
 8013d14:	fa09 f303 	lsl.w	r3, r9, r3
 8013d18:	4313      	orrs	r3, r2
 8013d1a:	9304      	str	r3, [sp, #16]
 8013d1c:	46a2      	mov	sl, r4
 8013d1e:	e7d2      	b.n	8013cc6 <_vfiprintf_r+0xc6>
 8013d20:	9b03      	ldr	r3, [sp, #12]
 8013d22:	1d19      	adds	r1, r3, #4
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	9103      	str	r1, [sp, #12]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	bfbb      	ittet	lt
 8013d2c:	425b      	neglt	r3, r3
 8013d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8013d32:	9307      	strge	r3, [sp, #28]
 8013d34:	9307      	strlt	r3, [sp, #28]
 8013d36:	bfb8      	it	lt
 8013d38:	9204      	strlt	r2, [sp, #16]
 8013d3a:	7823      	ldrb	r3, [r4, #0]
 8013d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8013d3e:	d10c      	bne.n	8013d5a <_vfiprintf_r+0x15a>
 8013d40:	7863      	ldrb	r3, [r4, #1]
 8013d42:	2b2a      	cmp	r3, #42	; 0x2a
 8013d44:	d134      	bne.n	8013db0 <_vfiprintf_r+0x1b0>
 8013d46:	9b03      	ldr	r3, [sp, #12]
 8013d48:	1d1a      	adds	r2, r3, #4
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	9203      	str	r2, [sp, #12]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	bfb8      	it	lt
 8013d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d56:	3402      	adds	r4, #2
 8013d58:	9305      	str	r3, [sp, #20]
 8013d5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013e30 <_vfiprintf_r+0x230>
 8013d5e:	7821      	ldrb	r1, [r4, #0]
 8013d60:	2203      	movs	r2, #3
 8013d62:	4650      	mov	r0, sl
 8013d64:	f7ec fa5c 	bl	8000220 <memchr>
 8013d68:	b138      	cbz	r0, 8013d7a <_vfiprintf_r+0x17a>
 8013d6a:	9b04      	ldr	r3, [sp, #16]
 8013d6c:	eba0 000a 	sub.w	r0, r0, sl
 8013d70:	2240      	movs	r2, #64	; 0x40
 8013d72:	4082      	lsls	r2, r0
 8013d74:	4313      	orrs	r3, r2
 8013d76:	3401      	adds	r4, #1
 8013d78:	9304      	str	r3, [sp, #16]
 8013d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d7e:	4829      	ldr	r0, [pc, #164]	; (8013e24 <_vfiprintf_r+0x224>)
 8013d80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d84:	2206      	movs	r2, #6
 8013d86:	f7ec fa4b 	bl	8000220 <memchr>
 8013d8a:	2800      	cmp	r0, #0
 8013d8c:	d03f      	beq.n	8013e0e <_vfiprintf_r+0x20e>
 8013d8e:	4b26      	ldr	r3, [pc, #152]	; (8013e28 <_vfiprintf_r+0x228>)
 8013d90:	bb1b      	cbnz	r3, 8013dda <_vfiprintf_r+0x1da>
 8013d92:	9b03      	ldr	r3, [sp, #12]
 8013d94:	3307      	adds	r3, #7
 8013d96:	f023 0307 	bic.w	r3, r3, #7
 8013d9a:	3308      	adds	r3, #8
 8013d9c:	9303      	str	r3, [sp, #12]
 8013d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013da0:	443b      	add	r3, r7
 8013da2:	9309      	str	r3, [sp, #36]	; 0x24
 8013da4:	e768      	b.n	8013c78 <_vfiprintf_r+0x78>
 8013da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013daa:	460c      	mov	r4, r1
 8013dac:	2001      	movs	r0, #1
 8013dae:	e7a6      	b.n	8013cfe <_vfiprintf_r+0xfe>
 8013db0:	2300      	movs	r3, #0
 8013db2:	3401      	adds	r4, #1
 8013db4:	9305      	str	r3, [sp, #20]
 8013db6:	4619      	mov	r1, r3
 8013db8:	f04f 0c0a 	mov.w	ip, #10
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013dc2:	3a30      	subs	r2, #48	; 0x30
 8013dc4:	2a09      	cmp	r2, #9
 8013dc6:	d903      	bls.n	8013dd0 <_vfiprintf_r+0x1d0>
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d0c6      	beq.n	8013d5a <_vfiprintf_r+0x15a>
 8013dcc:	9105      	str	r1, [sp, #20]
 8013dce:	e7c4      	b.n	8013d5a <_vfiprintf_r+0x15a>
 8013dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8013dd4:	4604      	mov	r4, r0
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e7f0      	b.n	8013dbc <_vfiprintf_r+0x1bc>
 8013dda:	ab03      	add	r3, sp, #12
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	462a      	mov	r2, r5
 8013de0:	4b12      	ldr	r3, [pc, #72]	; (8013e2c <_vfiprintf_r+0x22c>)
 8013de2:	a904      	add	r1, sp, #16
 8013de4:	4630      	mov	r0, r6
 8013de6:	f7fb f9c1 	bl	800f16c <_printf_float>
 8013dea:	4607      	mov	r7, r0
 8013dec:	1c78      	adds	r0, r7, #1
 8013dee:	d1d6      	bne.n	8013d9e <_vfiprintf_r+0x19e>
 8013df0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013df2:	07d9      	lsls	r1, r3, #31
 8013df4:	d405      	bmi.n	8013e02 <_vfiprintf_r+0x202>
 8013df6:	89ab      	ldrh	r3, [r5, #12]
 8013df8:	059a      	lsls	r2, r3, #22
 8013dfa:	d402      	bmi.n	8013e02 <_vfiprintf_r+0x202>
 8013dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dfe:	f7fc f9c5 	bl	801018c <__retarget_lock_release_recursive>
 8013e02:	89ab      	ldrh	r3, [r5, #12]
 8013e04:	065b      	lsls	r3, r3, #25
 8013e06:	f53f af1d 	bmi.w	8013c44 <_vfiprintf_r+0x44>
 8013e0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e0c:	e71c      	b.n	8013c48 <_vfiprintf_r+0x48>
 8013e0e:	ab03      	add	r3, sp, #12
 8013e10:	9300      	str	r3, [sp, #0]
 8013e12:	462a      	mov	r2, r5
 8013e14:	4b05      	ldr	r3, [pc, #20]	; (8013e2c <_vfiprintf_r+0x22c>)
 8013e16:	a904      	add	r1, sp, #16
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f7fb fc4b 	bl	800f6b4 <_printf_i>
 8013e1e:	e7e4      	b.n	8013dea <_vfiprintf_r+0x1ea>
 8013e20:	08015a59 	.word	0x08015a59
 8013e24:	08015a63 	.word	0x08015a63
 8013e28:	0800f16d 	.word	0x0800f16d
 8013e2c:	08013bdd 	.word	0x08013bdd
 8013e30:	08015a5f 	.word	0x08015a5f

08013e34 <__swbuf_r>:
 8013e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e36:	460e      	mov	r6, r1
 8013e38:	4614      	mov	r4, r2
 8013e3a:	4605      	mov	r5, r0
 8013e3c:	b118      	cbz	r0, 8013e46 <__swbuf_r+0x12>
 8013e3e:	6a03      	ldr	r3, [r0, #32]
 8013e40:	b90b      	cbnz	r3, 8013e46 <__swbuf_r+0x12>
 8013e42:	f7fb fff5 	bl	800fe30 <__sinit>
 8013e46:	69a3      	ldr	r3, [r4, #24]
 8013e48:	60a3      	str	r3, [r4, #8]
 8013e4a:	89a3      	ldrh	r3, [r4, #12]
 8013e4c:	071a      	lsls	r2, r3, #28
 8013e4e:	d525      	bpl.n	8013e9c <__swbuf_r+0x68>
 8013e50:	6923      	ldr	r3, [r4, #16]
 8013e52:	b31b      	cbz	r3, 8013e9c <__swbuf_r+0x68>
 8013e54:	6823      	ldr	r3, [r4, #0]
 8013e56:	6922      	ldr	r2, [r4, #16]
 8013e58:	1a98      	subs	r0, r3, r2
 8013e5a:	6963      	ldr	r3, [r4, #20]
 8013e5c:	b2f6      	uxtb	r6, r6
 8013e5e:	4283      	cmp	r3, r0
 8013e60:	4637      	mov	r7, r6
 8013e62:	dc04      	bgt.n	8013e6e <__swbuf_r+0x3a>
 8013e64:	4621      	mov	r1, r4
 8013e66:	4628      	mov	r0, r5
 8013e68:	f7ff f962 	bl	8013130 <_fflush_r>
 8013e6c:	b9e0      	cbnz	r0, 8013ea8 <__swbuf_r+0x74>
 8013e6e:	68a3      	ldr	r3, [r4, #8]
 8013e70:	3b01      	subs	r3, #1
 8013e72:	60a3      	str	r3, [r4, #8]
 8013e74:	6823      	ldr	r3, [r4, #0]
 8013e76:	1c5a      	adds	r2, r3, #1
 8013e78:	6022      	str	r2, [r4, #0]
 8013e7a:	701e      	strb	r6, [r3, #0]
 8013e7c:	6962      	ldr	r2, [r4, #20]
 8013e7e:	1c43      	adds	r3, r0, #1
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d004      	beq.n	8013e8e <__swbuf_r+0x5a>
 8013e84:	89a3      	ldrh	r3, [r4, #12]
 8013e86:	07db      	lsls	r3, r3, #31
 8013e88:	d506      	bpl.n	8013e98 <__swbuf_r+0x64>
 8013e8a:	2e0a      	cmp	r6, #10
 8013e8c:	d104      	bne.n	8013e98 <__swbuf_r+0x64>
 8013e8e:	4621      	mov	r1, r4
 8013e90:	4628      	mov	r0, r5
 8013e92:	f7ff f94d 	bl	8013130 <_fflush_r>
 8013e96:	b938      	cbnz	r0, 8013ea8 <__swbuf_r+0x74>
 8013e98:	4638      	mov	r0, r7
 8013e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e9c:	4621      	mov	r1, r4
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	f000 f806 	bl	8013eb0 <__swsetup_r>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d0d5      	beq.n	8013e54 <__swbuf_r+0x20>
 8013ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8013eac:	e7f4      	b.n	8013e98 <__swbuf_r+0x64>
	...

08013eb0 <__swsetup_r>:
 8013eb0:	b538      	push	{r3, r4, r5, lr}
 8013eb2:	4b2a      	ldr	r3, [pc, #168]	; (8013f5c <__swsetup_r+0xac>)
 8013eb4:	4605      	mov	r5, r0
 8013eb6:	6818      	ldr	r0, [r3, #0]
 8013eb8:	460c      	mov	r4, r1
 8013eba:	b118      	cbz	r0, 8013ec4 <__swsetup_r+0x14>
 8013ebc:	6a03      	ldr	r3, [r0, #32]
 8013ebe:	b90b      	cbnz	r3, 8013ec4 <__swsetup_r+0x14>
 8013ec0:	f7fb ffb6 	bl	800fe30 <__sinit>
 8013ec4:	89a3      	ldrh	r3, [r4, #12]
 8013ec6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013eca:	0718      	lsls	r0, r3, #28
 8013ecc:	d422      	bmi.n	8013f14 <__swsetup_r+0x64>
 8013ece:	06d9      	lsls	r1, r3, #27
 8013ed0:	d407      	bmi.n	8013ee2 <__swsetup_r+0x32>
 8013ed2:	2309      	movs	r3, #9
 8013ed4:	602b      	str	r3, [r5, #0]
 8013ed6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013eda:	81a3      	strh	r3, [r4, #12]
 8013edc:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee0:	e034      	b.n	8013f4c <__swsetup_r+0x9c>
 8013ee2:	0758      	lsls	r0, r3, #29
 8013ee4:	d512      	bpl.n	8013f0c <__swsetup_r+0x5c>
 8013ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ee8:	b141      	cbz	r1, 8013efc <__swsetup_r+0x4c>
 8013eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013eee:	4299      	cmp	r1, r3
 8013ef0:	d002      	beq.n	8013ef8 <__swsetup_r+0x48>
 8013ef2:	4628      	mov	r0, r5
 8013ef4:	f7fc ffda 	bl	8010eac <_free_r>
 8013ef8:	2300      	movs	r3, #0
 8013efa:	6363      	str	r3, [r4, #52]	; 0x34
 8013efc:	89a3      	ldrh	r3, [r4, #12]
 8013efe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f02:	81a3      	strh	r3, [r4, #12]
 8013f04:	2300      	movs	r3, #0
 8013f06:	6063      	str	r3, [r4, #4]
 8013f08:	6923      	ldr	r3, [r4, #16]
 8013f0a:	6023      	str	r3, [r4, #0]
 8013f0c:	89a3      	ldrh	r3, [r4, #12]
 8013f0e:	f043 0308 	orr.w	r3, r3, #8
 8013f12:	81a3      	strh	r3, [r4, #12]
 8013f14:	6923      	ldr	r3, [r4, #16]
 8013f16:	b94b      	cbnz	r3, 8013f2c <__swsetup_r+0x7c>
 8013f18:	89a3      	ldrh	r3, [r4, #12]
 8013f1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f22:	d003      	beq.n	8013f2c <__swsetup_r+0x7c>
 8013f24:	4621      	mov	r1, r4
 8013f26:	4628      	mov	r0, r5
 8013f28:	f000 f884 	bl	8014034 <__smakebuf_r>
 8013f2c:	89a0      	ldrh	r0, [r4, #12]
 8013f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f32:	f010 0301 	ands.w	r3, r0, #1
 8013f36:	d00a      	beq.n	8013f4e <__swsetup_r+0x9e>
 8013f38:	2300      	movs	r3, #0
 8013f3a:	60a3      	str	r3, [r4, #8]
 8013f3c:	6963      	ldr	r3, [r4, #20]
 8013f3e:	425b      	negs	r3, r3
 8013f40:	61a3      	str	r3, [r4, #24]
 8013f42:	6923      	ldr	r3, [r4, #16]
 8013f44:	b943      	cbnz	r3, 8013f58 <__swsetup_r+0xa8>
 8013f46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f4a:	d1c4      	bne.n	8013ed6 <__swsetup_r+0x26>
 8013f4c:	bd38      	pop	{r3, r4, r5, pc}
 8013f4e:	0781      	lsls	r1, r0, #30
 8013f50:	bf58      	it	pl
 8013f52:	6963      	ldrpl	r3, [r4, #20]
 8013f54:	60a3      	str	r3, [r4, #8]
 8013f56:	e7f4      	b.n	8013f42 <__swsetup_r+0x92>
 8013f58:	2000      	movs	r0, #0
 8013f5a:	e7f7      	b.n	8013f4c <__swsetup_r+0x9c>
 8013f5c:	20000070 	.word	0x20000070

08013f60 <_raise_r>:
 8013f60:	291f      	cmp	r1, #31
 8013f62:	b538      	push	{r3, r4, r5, lr}
 8013f64:	4604      	mov	r4, r0
 8013f66:	460d      	mov	r5, r1
 8013f68:	d904      	bls.n	8013f74 <_raise_r+0x14>
 8013f6a:	2316      	movs	r3, #22
 8013f6c:	6003      	str	r3, [r0, #0]
 8013f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f72:	bd38      	pop	{r3, r4, r5, pc}
 8013f74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013f76:	b112      	cbz	r2, 8013f7e <_raise_r+0x1e>
 8013f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f7c:	b94b      	cbnz	r3, 8013f92 <_raise_r+0x32>
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f000 f830 	bl	8013fe4 <_getpid_r>
 8013f84:	462a      	mov	r2, r5
 8013f86:	4601      	mov	r1, r0
 8013f88:	4620      	mov	r0, r4
 8013f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f8e:	f000 b817 	b.w	8013fc0 <_kill_r>
 8013f92:	2b01      	cmp	r3, #1
 8013f94:	d00a      	beq.n	8013fac <_raise_r+0x4c>
 8013f96:	1c59      	adds	r1, r3, #1
 8013f98:	d103      	bne.n	8013fa2 <_raise_r+0x42>
 8013f9a:	2316      	movs	r3, #22
 8013f9c:	6003      	str	r3, [r0, #0]
 8013f9e:	2001      	movs	r0, #1
 8013fa0:	e7e7      	b.n	8013f72 <_raise_r+0x12>
 8013fa2:	2400      	movs	r4, #0
 8013fa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013fa8:	4628      	mov	r0, r5
 8013faa:	4798      	blx	r3
 8013fac:	2000      	movs	r0, #0
 8013fae:	e7e0      	b.n	8013f72 <_raise_r+0x12>

08013fb0 <raise>:
 8013fb0:	4b02      	ldr	r3, [pc, #8]	; (8013fbc <raise+0xc>)
 8013fb2:	4601      	mov	r1, r0
 8013fb4:	6818      	ldr	r0, [r3, #0]
 8013fb6:	f7ff bfd3 	b.w	8013f60 <_raise_r>
 8013fba:	bf00      	nop
 8013fbc:	20000070 	.word	0x20000070

08013fc0 <_kill_r>:
 8013fc0:	b538      	push	{r3, r4, r5, lr}
 8013fc2:	4d07      	ldr	r5, [pc, #28]	; (8013fe0 <_kill_r+0x20>)
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	4608      	mov	r0, r1
 8013fca:	4611      	mov	r1, r2
 8013fcc:	602b      	str	r3, [r5, #0]
 8013fce:	f7ef fca9 	bl	8003924 <_kill>
 8013fd2:	1c43      	adds	r3, r0, #1
 8013fd4:	d102      	bne.n	8013fdc <_kill_r+0x1c>
 8013fd6:	682b      	ldr	r3, [r5, #0]
 8013fd8:	b103      	cbz	r3, 8013fdc <_kill_r+0x1c>
 8013fda:	6023      	str	r3, [r4, #0]
 8013fdc:	bd38      	pop	{r3, r4, r5, pc}
 8013fde:	bf00      	nop
 8013fe0:	20004ad4 	.word	0x20004ad4

08013fe4 <_getpid_r>:
 8013fe4:	f7ef bc96 	b.w	8003914 <_getpid>

08013fe8 <__swhatbuf_r>:
 8013fe8:	b570      	push	{r4, r5, r6, lr}
 8013fea:	460c      	mov	r4, r1
 8013fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ff0:	2900      	cmp	r1, #0
 8013ff2:	b096      	sub	sp, #88	; 0x58
 8013ff4:	4615      	mov	r5, r2
 8013ff6:	461e      	mov	r6, r3
 8013ff8:	da0d      	bge.n	8014016 <__swhatbuf_r+0x2e>
 8013ffa:	89a3      	ldrh	r3, [r4, #12]
 8013ffc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014000:	f04f 0100 	mov.w	r1, #0
 8014004:	bf0c      	ite	eq
 8014006:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801400a:	2340      	movne	r3, #64	; 0x40
 801400c:	2000      	movs	r0, #0
 801400e:	6031      	str	r1, [r6, #0]
 8014010:	602b      	str	r3, [r5, #0]
 8014012:	b016      	add	sp, #88	; 0x58
 8014014:	bd70      	pop	{r4, r5, r6, pc}
 8014016:	466a      	mov	r2, sp
 8014018:	f000 f848 	bl	80140ac <_fstat_r>
 801401c:	2800      	cmp	r0, #0
 801401e:	dbec      	blt.n	8013ffa <__swhatbuf_r+0x12>
 8014020:	9901      	ldr	r1, [sp, #4]
 8014022:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014026:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801402a:	4259      	negs	r1, r3
 801402c:	4159      	adcs	r1, r3
 801402e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014032:	e7eb      	b.n	801400c <__swhatbuf_r+0x24>

08014034 <__smakebuf_r>:
 8014034:	898b      	ldrh	r3, [r1, #12]
 8014036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014038:	079d      	lsls	r5, r3, #30
 801403a:	4606      	mov	r6, r0
 801403c:	460c      	mov	r4, r1
 801403e:	d507      	bpl.n	8014050 <__smakebuf_r+0x1c>
 8014040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014044:	6023      	str	r3, [r4, #0]
 8014046:	6123      	str	r3, [r4, #16]
 8014048:	2301      	movs	r3, #1
 801404a:	6163      	str	r3, [r4, #20]
 801404c:	b002      	add	sp, #8
 801404e:	bd70      	pop	{r4, r5, r6, pc}
 8014050:	ab01      	add	r3, sp, #4
 8014052:	466a      	mov	r2, sp
 8014054:	f7ff ffc8 	bl	8013fe8 <__swhatbuf_r>
 8014058:	9900      	ldr	r1, [sp, #0]
 801405a:	4605      	mov	r5, r0
 801405c:	4630      	mov	r0, r6
 801405e:	f7fc ff99 	bl	8010f94 <_malloc_r>
 8014062:	b948      	cbnz	r0, 8014078 <__smakebuf_r+0x44>
 8014064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014068:	059a      	lsls	r2, r3, #22
 801406a:	d4ef      	bmi.n	801404c <__smakebuf_r+0x18>
 801406c:	f023 0303 	bic.w	r3, r3, #3
 8014070:	f043 0302 	orr.w	r3, r3, #2
 8014074:	81a3      	strh	r3, [r4, #12]
 8014076:	e7e3      	b.n	8014040 <__smakebuf_r+0xc>
 8014078:	89a3      	ldrh	r3, [r4, #12]
 801407a:	6020      	str	r0, [r4, #0]
 801407c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014080:	81a3      	strh	r3, [r4, #12]
 8014082:	9b00      	ldr	r3, [sp, #0]
 8014084:	6163      	str	r3, [r4, #20]
 8014086:	9b01      	ldr	r3, [sp, #4]
 8014088:	6120      	str	r0, [r4, #16]
 801408a:	b15b      	cbz	r3, 80140a4 <__smakebuf_r+0x70>
 801408c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014090:	4630      	mov	r0, r6
 8014092:	f000 f81d 	bl	80140d0 <_isatty_r>
 8014096:	b128      	cbz	r0, 80140a4 <__smakebuf_r+0x70>
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	f023 0303 	bic.w	r3, r3, #3
 801409e:	f043 0301 	orr.w	r3, r3, #1
 80140a2:	81a3      	strh	r3, [r4, #12]
 80140a4:	89a3      	ldrh	r3, [r4, #12]
 80140a6:	431d      	orrs	r5, r3
 80140a8:	81a5      	strh	r5, [r4, #12]
 80140aa:	e7cf      	b.n	801404c <__smakebuf_r+0x18>

080140ac <_fstat_r>:
 80140ac:	b538      	push	{r3, r4, r5, lr}
 80140ae:	4d07      	ldr	r5, [pc, #28]	; (80140cc <_fstat_r+0x20>)
 80140b0:	2300      	movs	r3, #0
 80140b2:	4604      	mov	r4, r0
 80140b4:	4608      	mov	r0, r1
 80140b6:	4611      	mov	r1, r2
 80140b8:	602b      	str	r3, [r5, #0]
 80140ba:	f7ef fc92 	bl	80039e2 <_fstat>
 80140be:	1c43      	adds	r3, r0, #1
 80140c0:	d102      	bne.n	80140c8 <_fstat_r+0x1c>
 80140c2:	682b      	ldr	r3, [r5, #0]
 80140c4:	b103      	cbz	r3, 80140c8 <_fstat_r+0x1c>
 80140c6:	6023      	str	r3, [r4, #0]
 80140c8:	bd38      	pop	{r3, r4, r5, pc}
 80140ca:	bf00      	nop
 80140cc:	20004ad4 	.word	0x20004ad4

080140d0 <_isatty_r>:
 80140d0:	b538      	push	{r3, r4, r5, lr}
 80140d2:	4d06      	ldr	r5, [pc, #24]	; (80140ec <_isatty_r+0x1c>)
 80140d4:	2300      	movs	r3, #0
 80140d6:	4604      	mov	r4, r0
 80140d8:	4608      	mov	r0, r1
 80140da:	602b      	str	r3, [r5, #0]
 80140dc:	f7ef fc91 	bl	8003a02 <_isatty>
 80140e0:	1c43      	adds	r3, r0, #1
 80140e2:	d102      	bne.n	80140ea <_isatty_r+0x1a>
 80140e4:	682b      	ldr	r3, [r5, #0]
 80140e6:	b103      	cbz	r3, 80140ea <_isatty_r+0x1a>
 80140e8:	6023      	str	r3, [r4, #0]
 80140ea:	bd38      	pop	{r3, r4, r5, pc}
 80140ec:	20004ad4 	.word	0x20004ad4

080140f0 <pow>:
 80140f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140f2:	ed2d 8b02 	vpush	{d8}
 80140f6:	eeb0 8a40 	vmov.f32	s16, s0
 80140fa:	eef0 8a60 	vmov.f32	s17, s1
 80140fe:	ec55 4b11 	vmov	r4, r5, d1
 8014102:	f000 f875 	bl	80141f0 <__ieee754_pow>
 8014106:	4622      	mov	r2, r4
 8014108:	462b      	mov	r3, r5
 801410a:	4620      	mov	r0, r4
 801410c:	4629      	mov	r1, r5
 801410e:	ec57 6b10 	vmov	r6, r7, d0
 8014112:	f7ec fd33 	bl	8000b7c <__aeabi_dcmpun>
 8014116:	2800      	cmp	r0, #0
 8014118:	d13b      	bne.n	8014192 <pow+0xa2>
 801411a:	ec51 0b18 	vmov	r0, r1, d8
 801411e:	2200      	movs	r2, #0
 8014120:	2300      	movs	r3, #0
 8014122:	f7ec fcf9 	bl	8000b18 <__aeabi_dcmpeq>
 8014126:	b1b8      	cbz	r0, 8014158 <pow+0x68>
 8014128:	2200      	movs	r2, #0
 801412a:	2300      	movs	r3, #0
 801412c:	4620      	mov	r0, r4
 801412e:	4629      	mov	r1, r5
 8014130:	f7ec fcf2 	bl	8000b18 <__aeabi_dcmpeq>
 8014134:	2800      	cmp	r0, #0
 8014136:	d146      	bne.n	80141c6 <pow+0xd6>
 8014138:	ec45 4b10 	vmov	d0, r4, r5
 801413c:	f000 f84a 	bl	80141d4 <finite>
 8014140:	b338      	cbz	r0, 8014192 <pow+0xa2>
 8014142:	2200      	movs	r2, #0
 8014144:	2300      	movs	r3, #0
 8014146:	4620      	mov	r0, r4
 8014148:	4629      	mov	r1, r5
 801414a:	f7ec fcef 	bl	8000b2c <__aeabi_dcmplt>
 801414e:	b300      	cbz	r0, 8014192 <pow+0xa2>
 8014150:	f7fb fff0 	bl	8010134 <__errno>
 8014154:	2322      	movs	r3, #34	; 0x22
 8014156:	e01b      	b.n	8014190 <pow+0xa0>
 8014158:	ec47 6b10 	vmov	d0, r6, r7
 801415c:	f000 f83a 	bl	80141d4 <finite>
 8014160:	b9e0      	cbnz	r0, 801419c <pow+0xac>
 8014162:	eeb0 0a48 	vmov.f32	s0, s16
 8014166:	eef0 0a68 	vmov.f32	s1, s17
 801416a:	f000 f833 	bl	80141d4 <finite>
 801416e:	b1a8      	cbz	r0, 801419c <pow+0xac>
 8014170:	ec45 4b10 	vmov	d0, r4, r5
 8014174:	f000 f82e 	bl	80141d4 <finite>
 8014178:	b180      	cbz	r0, 801419c <pow+0xac>
 801417a:	4632      	mov	r2, r6
 801417c:	463b      	mov	r3, r7
 801417e:	4630      	mov	r0, r6
 8014180:	4639      	mov	r1, r7
 8014182:	f7ec fcfb 	bl	8000b7c <__aeabi_dcmpun>
 8014186:	2800      	cmp	r0, #0
 8014188:	d0e2      	beq.n	8014150 <pow+0x60>
 801418a:	f7fb ffd3 	bl	8010134 <__errno>
 801418e:	2321      	movs	r3, #33	; 0x21
 8014190:	6003      	str	r3, [r0, #0]
 8014192:	ecbd 8b02 	vpop	{d8}
 8014196:	ec47 6b10 	vmov	d0, r6, r7
 801419a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801419c:	2200      	movs	r2, #0
 801419e:	2300      	movs	r3, #0
 80141a0:	4630      	mov	r0, r6
 80141a2:	4639      	mov	r1, r7
 80141a4:	f7ec fcb8 	bl	8000b18 <__aeabi_dcmpeq>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d0f2      	beq.n	8014192 <pow+0xa2>
 80141ac:	eeb0 0a48 	vmov.f32	s0, s16
 80141b0:	eef0 0a68 	vmov.f32	s1, s17
 80141b4:	f000 f80e 	bl	80141d4 <finite>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d0ea      	beq.n	8014192 <pow+0xa2>
 80141bc:	ec45 4b10 	vmov	d0, r4, r5
 80141c0:	f000 f808 	bl	80141d4 <finite>
 80141c4:	e7c3      	b.n	801414e <pow+0x5e>
 80141c6:	4f01      	ldr	r7, [pc, #4]	; (80141cc <pow+0xdc>)
 80141c8:	2600      	movs	r6, #0
 80141ca:	e7e2      	b.n	8014192 <pow+0xa2>
 80141cc:	3ff00000 	.word	0x3ff00000

080141d0 <atan2f>:
 80141d0:	f000 bd42 	b.w	8014c58 <__ieee754_atan2f>

080141d4 <finite>:
 80141d4:	b082      	sub	sp, #8
 80141d6:	ed8d 0b00 	vstr	d0, [sp]
 80141da:	9801      	ldr	r0, [sp, #4]
 80141dc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80141e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80141e4:	0fc0      	lsrs	r0, r0, #31
 80141e6:	b002      	add	sp, #8
 80141e8:	4770      	bx	lr
 80141ea:	0000      	movs	r0, r0
 80141ec:	0000      	movs	r0, r0
	...

080141f0 <__ieee754_pow>:
 80141f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f4:	ed2d 8b06 	vpush	{d8-d10}
 80141f8:	b089      	sub	sp, #36	; 0x24
 80141fa:	ed8d 1b00 	vstr	d1, [sp]
 80141fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014202:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014206:	ea58 0102 	orrs.w	r1, r8, r2
 801420a:	ec57 6b10 	vmov	r6, r7, d0
 801420e:	d115      	bne.n	801423c <__ieee754_pow+0x4c>
 8014210:	19b3      	adds	r3, r6, r6
 8014212:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8014216:	4152      	adcs	r2, r2
 8014218:	4299      	cmp	r1, r3
 801421a:	4b89      	ldr	r3, [pc, #548]	; (8014440 <__ieee754_pow+0x250>)
 801421c:	4193      	sbcs	r3, r2
 801421e:	f080 84d1 	bcs.w	8014bc4 <__ieee754_pow+0x9d4>
 8014222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014226:	4630      	mov	r0, r6
 8014228:	4639      	mov	r1, r7
 801422a:	f7ec f857 	bl	80002dc <__adddf3>
 801422e:	ec41 0b10 	vmov	d0, r0, r1
 8014232:	b009      	add	sp, #36	; 0x24
 8014234:	ecbd 8b06 	vpop	{d8-d10}
 8014238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423c:	4b81      	ldr	r3, [pc, #516]	; (8014444 <__ieee754_pow+0x254>)
 801423e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014242:	429c      	cmp	r4, r3
 8014244:	ee10 aa10 	vmov	sl, s0
 8014248:	463d      	mov	r5, r7
 801424a:	dc06      	bgt.n	801425a <__ieee754_pow+0x6a>
 801424c:	d101      	bne.n	8014252 <__ieee754_pow+0x62>
 801424e:	2e00      	cmp	r6, #0
 8014250:	d1e7      	bne.n	8014222 <__ieee754_pow+0x32>
 8014252:	4598      	cmp	r8, r3
 8014254:	dc01      	bgt.n	801425a <__ieee754_pow+0x6a>
 8014256:	d10f      	bne.n	8014278 <__ieee754_pow+0x88>
 8014258:	b172      	cbz	r2, 8014278 <__ieee754_pow+0x88>
 801425a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801425e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8014262:	ea55 050a 	orrs.w	r5, r5, sl
 8014266:	d1dc      	bne.n	8014222 <__ieee754_pow+0x32>
 8014268:	e9dd 3200 	ldrd	r3, r2, [sp]
 801426c:	18db      	adds	r3, r3, r3
 801426e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8014272:	4152      	adcs	r2, r2
 8014274:	429d      	cmp	r5, r3
 8014276:	e7d0      	b.n	801421a <__ieee754_pow+0x2a>
 8014278:	2d00      	cmp	r5, #0
 801427a:	da3b      	bge.n	80142f4 <__ieee754_pow+0x104>
 801427c:	4b72      	ldr	r3, [pc, #456]	; (8014448 <__ieee754_pow+0x258>)
 801427e:	4598      	cmp	r8, r3
 8014280:	dc51      	bgt.n	8014326 <__ieee754_pow+0x136>
 8014282:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014286:	4598      	cmp	r8, r3
 8014288:	f340 84ab 	ble.w	8014be2 <__ieee754_pow+0x9f2>
 801428c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014290:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014294:	2b14      	cmp	r3, #20
 8014296:	dd0f      	ble.n	80142b8 <__ieee754_pow+0xc8>
 8014298:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801429c:	fa22 f103 	lsr.w	r1, r2, r3
 80142a0:	fa01 f303 	lsl.w	r3, r1, r3
 80142a4:	4293      	cmp	r3, r2
 80142a6:	f040 849c 	bne.w	8014be2 <__ieee754_pow+0x9f2>
 80142aa:	f001 0101 	and.w	r1, r1, #1
 80142ae:	f1c1 0302 	rsb	r3, r1, #2
 80142b2:	9304      	str	r3, [sp, #16]
 80142b4:	b182      	cbz	r2, 80142d8 <__ieee754_pow+0xe8>
 80142b6:	e05f      	b.n	8014378 <__ieee754_pow+0x188>
 80142b8:	2a00      	cmp	r2, #0
 80142ba:	d15b      	bne.n	8014374 <__ieee754_pow+0x184>
 80142bc:	f1c3 0314 	rsb	r3, r3, #20
 80142c0:	fa48 f103 	asr.w	r1, r8, r3
 80142c4:	fa01 f303 	lsl.w	r3, r1, r3
 80142c8:	4543      	cmp	r3, r8
 80142ca:	f040 8487 	bne.w	8014bdc <__ieee754_pow+0x9ec>
 80142ce:	f001 0101 	and.w	r1, r1, #1
 80142d2:	f1c1 0302 	rsb	r3, r1, #2
 80142d6:	9304      	str	r3, [sp, #16]
 80142d8:	4b5c      	ldr	r3, [pc, #368]	; (801444c <__ieee754_pow+0x25c>)
 80142da:	4598      	cmp	r8, r3
 80142dc:	d132      	bne.n	8014344 <__ieee754_pow+0x154>
 80142de:	f1b9 0f00 	cmp.w	r9, #0
 80142e2:	f280 8477 	bge.w	8014bd4 <__ieee754_pow+0x9e4>
 80142e6:	4959      	ldr	r1, [pc, #356]	; (801444c <__ieee754_pow+0x25c>)
 80142e8:	4632      	mov	r2, r6
 80142ea:	463b      	mov	r3, r7
 80142ec:	2000      	movs	r0, #0
 80142ee:	f7ec fad5 	bl	800089c <__aeabi_ddiv>
 80142f2:	e79c      	b.n	801422e <__ieee754_pow+0x3e>
 80142f4:	2300      	movs	r3, #0
 80142f6:	9304      	str	r3, [sp, #16]
 80142f8:	2a00      	cmp	r2, #0
 80142fa:	d13d      	bne.n	8014378 <__ieee754_pow+0x188>
 80142fc:	4b51      	ldr	r3, [pc, #324]	; (8014444 <__ieee754_pow+0x254>)
 80142fe:	4598      	cmp	r8, r3
 8014300:	d1ea      	bne.n	80142d8 <__ieee754_pow+0xe8>
 8014302:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014306:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801430a:	ea53 030a 	orrs.w	r3, r3, sl
 801430e:	f000 8459 	beq.w	8014bc4 <__ieee754_pow+0x9d4>
 8014312:	4b4f      	ldr	r3, [pc, #316]	; (8014450 <__ieee754_pow+0x260>)
 8014314:	429c      	cmp	r4, r3
 8014316:	dd08      	ble.n	801432a <__ieee754_pow+0x13a>
 8014318:	f1b9 0f00 	cmp.w	r9, #0
 801431c:	f2c0 8456 	blt.w	8014bcc <__ieee754_pow+0x9dc>
 8014320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014324:	e783      	b.n	801422e <__ieee754_pow+0x3e>
 8014326:	2302      	movs	r3, #2
 8014328:	e7e5      	b.n	80142f6 <__ieee754_pow+0x106>
 801432a:	f1b9 0f00 	cmp.w	r9, #0
 801432e:	f04f 0000 	mov.w	r0, #0
 8014332:	f04f 0100 	mov.w	r1, #0
 8014336:	f6bf af7a 	bge.w	801422e <__ieee754_pow+0x3e>
 801433a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801433e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014342:	e774      	b.n	801422e <__ieee754_pow+0x3e>
 8014344:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014348:	d106      	bne.n	8014358 <__ieee754_pow+0x168>
 801434a:	4632      	mov	r2, r6
 801434c:	463b      	mov	r3, r7
 801434e:	4630      	mov	r0, r6
 8014350:	4639      	mov	r1, r7
 8014352:	f7ec f979 	bl	8000648 <__aeabi_dmul>
 8014356:	e76a      	b.n	801422e <__ieee754_pow+0x3e>
 8014358:	4b3e      	ldr	r3, [pc, #248]	; (8014454 <__ieee754_pow+0x264>)
 801435a:	4599      	cmp	r9, r3
 801435c:	d10c      	bne.n	8014378 <__ieee754_pow+0x188>
 801435e:	2d00      	cmp	r5, #0
 8014360:	db0a      	blt.n	8014378 <__ieee754_pow+0x188>
 8014362:	ec47 6b10 	vmov	d0, r6, r7
 8014366:	b009      	add	sp, #36	; 0x24
 8014368:	ecbd 8b06 	vpop	{d8-d10}
 801436c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014370:	f000 be9c 	b.w	80150ac <__ieee754_sqrt>
 8014374:	2300      	movs	r3, #0
 8014376:	9304      	str	r3, [sp, #16]
 8014378:	ec47 6b10 	vmov	d0, r6, r7
 801437c:	f000 fc62 	bl	8014c44 <fabs>
 8014380:	ec51 0b10 	vmov	r0, r1, d0
 8014384:	f1ba 0f00 	cmp.w	sl, #0
 8014388:	d129      	bne.n	80143de <__ieee754_pow+0x1ee>
 801438a:	b124      	cbz	r4, 8014396 <__ieee754_pow+0x1a6>
 801438c:	4b2f      	ldr	r3, [pc, #188]	; (801444c <__ieee754_pow+0x25c>)
 801438e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014392:	429a      	cmp	r2, r3
 8014394:	d123      	bne.n	80143de <__ieee754_pow+0x1ee>
 8014396:	f1b9 0f00 	cmp.w	r9, #0
 801439a:	da05      	bge.n	80143a8 <__ieee754_pow+0x1b8>
 801439c:	4602      	mov	r2, r0
 801439e:	460b      	mov	r3, r1
 80143a0:	2000      	movs	r0, #0
 80143a2:	492a      	ldr	r1, [pc, #168]	; (801444c <__ieee754_pow+0x25c>)
 80143a4:	f7ec fa7a 	bl	800089c <__aeabi_ddiv>
 80143a8:	2d00      	cmp	r5, #0
 80143aa:	f6bf af40 	bge.w	801422e <__ieee754_pow+0x3e>
 80143ae:	9b04      	ldr	r3, [sp, #16]
 80143b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80143b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80143b8:	431c      	orrs	r4, r3
 80143ba:	d108      	bne.n	80143ce <__ieee754_pow+0x1de>
 80143bc:	4602      	mov	r2, r0
 80143be:	460b      	mov	r3, r1
 80143c0:	4610      	mov	r0, r2
 80143c2:	4619      	mov	r1, r3
 80143c4:	f7eb ff88 	bl	80002d8 <__aeabi_dsub>
 80143c8:	4602      	mov	r2, r0
 80143ca:	460b      	mov	r3, r1
 80143cc:	e78f      	b.n	80142ee <__ieee754_pow+0xfe>
 80143ce:	9b04      	ldr	r3, [sp, #16]
 80143d0:	2b01      	cmp	r3, #1
 80143d2:	f47f af2c 	bne.w	801422e <__ieee754_pow+0x3e>
 80143d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143da:	4619      	mov	r1, r3
 80143dc:	e727      	b.n	801422e <__ieee754_pow+0x3e>
 80143de:	0feb      	lsrs	r3, r5, #31
 80143e0:	3b01      	subs	r3, #1
 80143e2:	9306      	str	r3, [sp, #24]
 80143e4:	9a06      	ldr	r2, [sp, #24]
 80143e6:	9b04      	ldr	r3, [sp, #16]
 80143e8:	4313      	orrs	r3, r2
 80143ea:	d102      	bne.n	80143f2 <__ieee754_pow+0x202>
 80143ec:	4632      	mov	r2, r6
 80143ee:	463b      	mov	r3, r7
 80143f0:	e7e6      	b.n	80143c0 <__ieee754_pow+0x1d0>
 80143f2:	4b19      	ldr	r3, [pc, #100]	; (8014458 <__ieee754_pow+0x268>)
 80143f4:	4598      	cmp	r8, r3
 80143f6:	f340 80fb 	ble.w	80145f0 <__ieee754_pow+0x400>
 80143fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80143fe:	4598      	cmp	r8, r3
 8014400:	4b13      	ldr	r3, [pc, #76]	; (8014450 <__ieee754_pow+0x260>)
 8014402:	dd0c      	ble.n	801441e <__ieee754_pow+0x22e>
 8014404:	429c      	cmp	r4, r3
 8014406:	dc0f      	bgt.n	8014428 <__ieee754_pow+0x238>
 8014408:	f1b9 0f00 	cmp.w	r9, #0
 801440c:	da0f      	bge.n	801442e <__ieee754_pow+0x23e>
 801440e:	2000      	movs	r0, #0
 8014410:	b009      	add	sp, #36	; 0x24
 8014412:	ecbd 8b06 	vpop	{d8-d10}
 8014416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801441a:	f000 be3e 	b.w	801509a <__math_oflow>
 801441e:	429c      	cmp	r4, r3
 8014420:	dbf2      	blt.n	8014408 <__ieee754_pow+0x218>
 8014422:	4b0a      	ldr	r3, [pc, #40]	; (801444c <__ieee754_pow+0x25c>)
 8014424:	429c      	cmp	r4, r3
 8014426:	dd19      	ble.n	801445c <__ieee754_pow+0x26c>
 8014428:	f1b9 0f00 	cmp.w	r9, #0
 801442c:	dcef      	bgt.n	801440e <__ieee754_pow+0x21e>
 801442e:	2000      	movs	r0, #0
 8014430:	b009      	add	sp, #36	; 0x24
 8014432:	ecbd 8b06 	vpop	{d8-d10}
 8014436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801443a:	f000 be25 	b.w	8015088 <__math_uflow>
 801443e:	bf00      	nop
 8014440:	fff00000 	.word	0xfff00000
 8014444:	7ff00000 	.word	0x7ff00000
 8014448:	433fffff 	.word	0x433fffff
 801444c:	3ff00000 	.word	0x3ff00000
 8014450:	3fefffff 	.word	0x3fefffff
 8014454:	3fe00000 	.word	0x3fe00000
 8014458:	41e00000 	.word	0x41e00000
 801445c:	4b60      	ldr	r3, [pc, #384]	; (80145e0 <__ieee754_pow+0x3f0>)
 801445e:	2200      	movs	r2, #0
 8014460:	f7eb ff3a 	bl	80002d8 <__aeabi_dsub>
 8014464:	a354      	add	r3, pc, #336	; (adr r3, 80145b8 <__ieee754_pow+0x3c8>)
 8014466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801446a:	4604      	mov	r4, r0
 801446c:	460d      	mov	r5, r1
 801446e:	f7ec f8eb 	bl	8000648 <__aeabi_dmul>
 8014472:	a353      	add	r3, pc, #332	; (adr r3, 80145c0 <__ieee754_pow+0x3d0>)
 8014474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014478:	4606      	mov	r6, r0
 801447a:	460f      	mov	r7, r1
 801447c:	4620      	mov	r0, r4
 801447e:	4629      	mov	r1, r5
 8014480:	f7ec f8e2 	bl	8000648 <__aeabi_dmul>
 8014484:	4b57      	ldr	r3, [pc, #348]	; (80145e4 <__ieee754_pow+0x3f4>)
 8014486:	4682      	mov	sl, r0
 8014488:	468b      	mov	fp, r1
 801448a:	2200      	movs	r2, #0
 801448c:	4620      	mov	r0, r4
 801448e:	4629      	mov	r1, r5
 8014490:	f7ec f8da 	bl	8000648 <__aeabi_dmul>
 8014494:	4602      	mov	r2, r0
 8014496:	460b      	mov	r3, r1
 8014498:	a14b      	add	r1, pc, #300	; (adr r1, 80145c8 <__ieee754_pow+0x3d8>)
 801449a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801449e:	f7eb ff1b 	bl	80002d8 <__aeabi_dsub>
 80144a2:	4622      	mov	r2, r4
 80144a4:	462b      	mov	r3, r5
 80144a6:	f7ec f8cf 	bl	8000648 <__aeabi_dmul>
 80144aa:	4602      	mov	r2, r0
 80144ac:	460b      	mov	r3, r1
 80144ae:	2000      	movs	r0, #0
 80144b0:	494d      	ldr	r1, [pc, #308]	; (80145e8 <__ieee754_pow+0x3f8>)
 80144b2:	f7eb ff11 	bl	80002d8 <__aeabi_dsub>
 80144b6:	4622      	mov	r2, r4
 80144b8:	4680      	mov	r8, r0
 80144ba:	4689      	mov	r9, r1
 80144bc:	462b      	mov	r3, r5
 80144be:	4620      	mov	r0, r4
 80144c0:	4629      	mov	r1, r5
 80144c2:	f7ec f8c1 	bl	8000648 <__aeabi_dmul>
 80144c6:	4602      	mov	r2, r0
 80144c8:	460b      	mov	r3, r1
 80144ca:	4640      	mov	r0, r8
 80144cc:	4649      	mov	r1, r9
 80144ce:	f7ec f8bb 	bl	8000648 <__aeabi_dmul>
 80144d2:	a33f      	add	r3, pc, #252	; (adr r3, 80145d0 <__ieee754_pow+0x3e0>)
 80144d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d8:	f7ec f8b6 	bl	8000648 <__aeabi_dmul>
 80144dc:	4602      	mov	r2, r0
 80144de:	460b      	mov	r3, r1
 80144e0:	4650      	mov	r0, sl
 80144e2:	4659      	mov	r1, fp
 80144e4:	f7eb fef8 	bl	80002d8 <__aeabi_dsub>
 80144e8:	4602      	mov	r2, r0
 80144ea:	460b      	mov	r3, r1
 80144ec:	4680      	mov	r8, r0
 80144ee:	4689      	mov	r9, r1
 80144f0:	4630      	mov	r0, r6
 80144f2:	4639      	mov	r1, r7
 80144f4:	f7eb fef2 	bl	80002dc <__adddf3>
 80144f8:	2000      	movs	r0, #0
 80144fa:	4632      	mov	r2, r6
 80144fc:	463b      	mov	r3, r7
 80144fe:	4604      	mov	r4, r0
 8014500:	460d      	mov	r5, r1
 8014502:	f7eb fee9 	bl	80002d8 <__aeabi_dsub>
 8014506:	4602      	mov	r2, r0
 8014508:	460b      	mov	r3, r1
 801450a:	4640      	mov	r0, r8
 801450c:	4649      	mov	r1, r9
 801450e:	f7eb fee3 	bl	80002d8 <__aeabi_dsub>
 8014512:	9b04      	ldr	r3, [sp, #16]
 8014514:	9a06      	ldr	r2, [sp, #24]
 8014516:	3b01      	subs	r3, #1
 8014518:	4313      	orrs	r3, r2
 801451a:	4682      	mov	sl, r0
 801451c:	468b      	mov	fp, r1
 801451e:	f040 81e7 	bne.w	80148f0 <__ieee754_pow+0x700>
 8014522:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80145d8 <__ieee754_pow+0x3e8>
 8014526:	eeb0 8a47 	vmov.f32	s16, s14
 801452a:	eef0 8a67 	vmov.f32	s17, s15
 801452e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014532:	2600      	movs	r6, #0
 8014534:	4632      	mov	r2, r6
 8014536:	463b      	mov	r3, r7
 8014538:	e9dd 0100 	ldrd	r0, r1, [sp]
 801453c:	f7eb fecc 	bl	80002d8 <__aeabi_dsub>
 8014540:	4622      	mov	r2, r4
 8014542:	462b      	mov	r3, r5
 8014544:	f7ec f880 	bl	8000648 <__aeabi_dmul>
 8014548:	e9dd 2300 	ldrd	r2, r3, [sp]
 801454c:	4680      	mov	r8, r0
 801454e:	4689      	mov	r9, r1
 8014550:	4650      	mov	r0, sl
 8014552:	4659      	mov	r1, fp
 8014554:	f7ec f878 	bl	8000648 <__aeabi_dmul>
 8014558:	4602      	mov	r2, r0
 801455a:	460b      	mov	r3, r1
 801455c:	4640      	mov	r0, r8
 801455e:	4649      	mov	r1, r9
 8014560:	f7eb febc 	bl	80002dc <__adddf3>
 8014564:	4632      	mov	r2, r6
 8014566:	463b      	mov	r3, r7
 8014568:	4680      	mov	r8, r0
 801456a:	4689      	mov	r9, r1
 801456c:	4620      	mov	r0, r4
 801456e:	4629      	mov	r1, r5
 8014570:	f7ec f86a 	bl	8000648 <__aeabi_dmul>
 8014574:	460b      	mov	r3, r1
 8014576:	4604      	mov	r4, r0
 8014578:	460d      	mov	r5, r1
 801457a:	4602      	mov	r2, r0
 801457c:	4649      	mov	r1, r9
 801457e:	4640      	mov	r0, r8
 8014580:	f7eb feac 	bl	80002dc <__adddf3>
 8014584:	4b19      	ldr	r3, [pc, #100]	; (80145ec <__ieee754_pow+0x3fc>)
 8014586:	4299      	cmp	r1, r3
 8014588:	ec45 4b19 	vmov	d9, r4, r5
 801458c:	4606      	mov	r6, r0
 801458e:	460f      	mov	r7, r1
 8014590:	468b      	mov	fp, r1
 8014592:	f340 82f0 	ble.w	8014b76 <__ieee754_pow+0x986>
 8014596:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801459a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801459e:	4303      	orrs	r3, r0
 80145a0:	f000 81e4 	beq.w	801496c <__ieee754_pow+0x77c>
 80145a4:	ec51 0b18 	vmov	r0, r1, d8
 80145a8:	2200      	movs	r2, #0
 80145aa:	2300      	movs	r3, #0
 80145ac:	f7ec fabe 	bl	8000b2c <__aeabi_dcmplt>
 80145b0:	3800      	subs	r0, #0
 80145b2:	bf18      	it	ne
 80145b4:	2001      	movne	r0, #1
 80145b6:	e72b      	b.n	8014410 <__ieee754_pow+0x220>
 80145b8:	60000000 	.word	0x60000000
 80145bc:	3ff71547 	.word	0x3ff71547
 80145c0:	f85ddf44 	.word	0xf85ddf44
 80145c4:	3e54ae0b 	.word	0x3e54ae0b
 80145c8:	55555555 	.word	0x55555555
 80145cc:	3fd55555 	.word	0x3fd55555
 80145d0:	652b82fe 	.word	0x652b82fe
 80145d4:	3ff71547 	.word	0x3ff71547
 80145d8:	00000000 	.word	0x00000000
 80145dc:	bff00000 	.word	0xbff00000
 80145e0:	3ff00000 	.word	0x3ff00000
 80145e4:	3fd00000 	.word	0x3fd00000
 80145e8:	3fe00000 	.word	0x3fe00000
 80145ec:	408fffff 	.word	0x408fffff
 80145f0:	4bd5      	ldr	r3, [pc, #852]	; (8014948 <__ieee754_pow+0x758>)
 80145f2:	402b      	ands	r3, r5
 80145f4:	2200      	movs	r2, #0
 80145f6:	b92b      	cbnz	r3, 8014604 <__ieee754_pow+0x414>
 80145f8:	4bd4      	ldr	r3, [pc, #848]	; (801494c <__ieee754_pow+0x75c>)
 80145fa:	f7ec f825 	bl	8000648 <__aeabi_dmul>
 80145fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014602:	460c      	mov	r4, r1
 8014604:	1523      	asrs	r3, r4, #20
 8014606:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801460a:	4413      	add	r3, r2
 801460c:	9305      	str	r3, [sp, #20]
 801460e:	4bd0      	ldr	r3, [pc, #832]	; (8014950 <__ieee754_pow+0x760>)
 8014610:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014614:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014618:	429c      	cmp	r4, r3
 801461a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801461e:	dd08      	ble.n	8014632 <__ieee754_pow+0x442>
 8014620:	4bcc      	ldr	r3, [pc, #816]	; (8014954 <__ieee754_pow+0x764>)
 8014622:	429c      	cmp	r4, r3
 8014624:	f340 8162 	ble.w	80148ec <__ieee754_pow+0x6fc>
 8014628:	9b05      	ldr	r3, [sp, #20]
 801462a:	3301      	adds	r3, #1
 801462c:	9305      	str	r3, [sp, #20]
 801462e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014632:	2400      	movs	r4, #0
 8014634:	00e3      	lsls	r3, r4, #3
 8014636:	9307      	str	r3, [sp, #28]
 8014638:	4bc7      	ldr	r3, [pc, #796]	; (8014958 <__ieee754_pow+0x768>)
 801463a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801463e:	ed93 7b00 	vldr	d7, [r3]
 8014642:	4629      	mov	r1, r5
 8014644:	ec53 2b17 	vmov	r2, r3, d7
 8014648:	eeb0 9a47 	vmov.f32	s18, s14
 801464c:	eef0 9a67 	vmov.f32	s19, s15
 8014650:	4682      	mov	sl, r0
 8014652:	f7eb fe41 	bl	80002d8 <__aeabi_dsub>
 8014656:	4652      	mov	r2, sl
 8014658:	4606      	mov	r6, r0
 801465a:	460f      	mov	r7, r1
 801465c:	462b      	mov	r3, r5
 801465e:	ec51 0b19 	vmov	r0, r1, d9
 8014662:	f7eb fe3b 	bl	80002dc <__adddf3>
 8014666:	4602      	mov	r2, r0
 8014668:	460b      	mov	r3, r1
 801466a:	2000      	movs	r0, #0
 801466c:	49bb      	ldr	r1, [pc, #748]	; (801495c <__ieee754_pow+0x76c>)
 801466e:	f7ec f915 	bl	800089c <__aeabi_ddiv>
 8014672:	ec41 0b1a 	vmov	d10, r0, r1
 8014676:	4602      	mov	r2, r0
 8014678:	460b      	mov	r3, r1
 801467a:	4630      	mov	r0, r6
 801467c:	4639      	mov	r1, r7
 801467e:	f7eb ffe3 	bl	8000648 <__aeabi_dmul>
 8014682:	2300      	movs	r3, #0
 8014684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014688:	9302      	str	r3, [sp, #8]
 801468a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801468e:	46ab      	mov	fp, r5
 8014690:	106d      	asrs	r5, r5, #1
 8014692:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014696:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801469a:	ec41 0b18 	vmov	d8, r0, r1
 801469e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80146a2:	2200      	movs	r2, #0
 80146a4:	4640      	mov	r0, r8
 80146a6:	4649      	mov	r1, r9
 80146a8:	4614      	mov	r4, r2
 80146aa:	461d      	mov	r5, r3
 80146ac:	f7eb ffcc 	bl	8000648 <__aeabi_dmul>
 80146b0:	4602      	mov	r2, r0
 80146b2:	460b      	mov	r3, r1
 80146b4:	4630      	mov	r0, r6
 80146b6:	4639      	mov	r1, r7
 80146b8:	f7eb fe0e 	bl	80002d8 <__aeabi_dsub>
 80146bc:	ec53 2b19 	vmov	r2, r3, d9
 80146c0:	4606      	mov	r6, r0
 80146c2:	460f      	mov	r7, r1
 80146c4:	4620      	mov	r0, r4
 80146c6:	4629      	mov	r1, r5
 80146c8:	f7eb fe06 	bl	80002d8 <__aeabi_dsub>
 80146cc:	4602      	mov	r2, r0
 80146ce:	460b      	mov	r3, r1
 80146d0:	4650      	mov	r0, sl
 80146d2:	4659      	mov	r1, fp
 80146d4:	f7eb fe00 	bl	80002d8 <__aeabi_dsub>
 80146d8:	4642      	mov	r2, r8
 80146da:	464b      	mov	r3, r9
 80146dc:	f7eb ffb4 	bl	8000648 <__aeabi_dmul>
 80146e0:	4602      	mov	r2, r0
 80146e2:	460b      	mov	r3, r1
 80146e4:	4630      	mov	r0, r6
 80146e6:	4639      	mov	r1, r7
 80146e8:	f7eb fdf6 	bl	80002d8 <__aeabi_dsub>
 80146ec:	ec53 2b1a 	vmov	r2, r3, d10
 80146f0:	f7eb ffaa 	bl	8000648 <__aeabi_dmul>
 80146f4:	ec53 2b18 	vmov	r2, r3, d8
 80146f8:	ec41 0b19 	vmov	d9, r0, r1
 80146fc:	ec51 0b18 	vmov	r0, r1, d8
 8014700:	f7eb ffa2 	bl	8000648 <__aeabi_dmul>
 8014704:	a37c      	add	r3, pc, #496	; (adr r3, 80148f8 <__ieee754_pow+0x708>)
 8014706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470a:	4604      	mov	r4, r0
 801470c:	460d      	mov	r5, r1
 801470e:	f7eb ff9b 	bl	8000648 <__aeabi_dmul>
 8014712:	a37b      	add	r3, pc, #492	; (adr r3, 8014900 <__ieee754_pow+0x710>)
 8014714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014718:	f7eb fde0 	bl	80002dc <__adddf3>
 801471c:	4622      	mov	r2, r4
 801471e:	462b      	mov	r3, r5
 8014720:	f7eb ff92 	bl	8000648 <__aeabi_dmul>
 8014724:	a378      	add	r3, pc, #480	; (adr r3, 8014908 <__ieee754_pow+0x718>)
 8014726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801472a:	f7eb fdd7 	bl	80002dc <__adddf3>
 801472e:	4622      	mov	r2, r4
 8014730:	462b      	mov	r3, r5
 8014732:	f7eb ff89 	bl	8000648 <__aeabi_dmul>
 8014736:	a376      	add	r3, pc, #472	; (adr r3, 8014910 <__ieee754_pow+0x720>)
 8014738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473c:	f7eb fdce 	bl	80002dc <__adddf3>
 8014740:	4622      	mov	r2, r4
 8014742:	462b      	mov	r3, r5
 8014744:	f7eb ff80 	bl	8000648 <__aeabi_dmul>
 8014748:	a373      	add	r3, pc, #460	; (adr r3, 8014918 <__ieee754_pow+0x728>)
 801474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474e:	f7eb fdc5 	bl	80002dc <__adddf3>
 8014752:	4622      	mov	r2, r4
 8014754:	462b      	mov	r3, r5
 8014756:	f7eb ff77 	bl	8000648 <__aeabi_dmul>
 801475a:	a371      	add	r3, pc, #452	; (adr r3, 8014920 <__ieee754_pow+0x730>)
 801475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014760:	f7eb fdbc 	bl	80002dc <__adddf3>
 8014764:	4622      	mov	r2, r4
 8014766:	4606      	mov	r6, r0
 8014768:	460f      	mov	r7, r1
 801476a:	462b      	mov	r3, r5
 801476c:	4620      	mov	r0, r4
 801476e:	4629      	mov	r1, r5
 8014770:	f7eb ff6a 	bl	8000648 <__aeabi_dmul>
 8014774:	4602      	mov	r2, r0
 8014776:	460b      	mov	r3, r1
 8014778:	4630      	mov	r0, r6
 801477a:	4639      	mov	r1, r7
 801477c:	f7eb ff64 	bl	8000648 <__aeabi_dmul>
 8014780:	4642      	mov	r2, r8
 8014782:	4604      	mov	r4, r0
 8014784:	460d      	mov	r5, r1
 8014786:	464b      	mov	r3, r9
 8014788:	ec51 0b18 	vmov	r0, r1, d8
 801478c:	f7eb fda6 	bl	80002dc <__adddf3>
 8014790:	ec53 2b19 	vmov	r2, r3, d9
 8014794:	f7eb ff58 	bl	8000648 <__aeabi_dmul>
 8014798:	4622      	mov	r2, r4
 801479a:	462b      	mov	r3, r5
 801479c:	f7eb fd9e 	bl	80002dc <__adddf3>
 80147a0:	4642      	mov	r2, r8
 80147a2:	4682      	mov	sl, r0
 80147a4:	468b      	mov	fp, r1
 80147a6:	464b      	mov	r3, r9
 80147a8:	4640      	mov	r0, r8
 80147aa:	4649      	mov	r1, r9
 80147ac:	f7eb ff4c 	bl	8000648 <__aeabi_dmul>
 80147b0:	4b6b      	ldr	r3, [pc, #428]	; (8014960 <__ieee754_pow+0x770>)
 80147b2:	2200      	movs	r2, #0
 80147b4:	4606      	mov	r6, r0
 80147b6:	460f      	mov	r7, r1
 80147b8:	f7eb fd90 	bl	80002dc <__adddf3>
 80147bc:	4652      	mov	r2, sl
 80147be:	465b      	mov	r3, fp
 80147c0:	f7eb fd8c 	bl	80002dc <__adddf3>
 80147c4:	2000      	movs	r0, #0
 80147c6:	4604      	mov	r4, r0
 80147c8:	460d      	mov	r5, r1
 80147ca:	4602      	mov	r2, r0
 80147cc:	460b      	mov	r3, r1
 80147ce:	4640      	mov	r0, r8
 80147d0:	4649      	mov	r1, r9
 80147d2:	f7eb ff39 	bl	8000648 <__aeabi_dmul>
 80147d6:	4b62      	ldr	r3, [pc, #392]	; (8014960 <__ieee754_pow+0x770>)
 80147d8:	4680      	mov	r8, r0
 80147da:	4689      	mov	r9, r1
 80147dc:	2200      	movs	r2, #0
 80147de:	4620      	mov	r0, r4
 80147e0:	4629      	mov	r1, r5
 80147e2:	f7eb fd79 	bl	80002d8 <__aeabi_dsub>
 80147e6:	4632      	mov	r2, r6
 80147e8:	463b      	mov	r3, r7
 80147ea:	f7eb fd75 	bl	80002d8 <__aeabi_dsub>
 80147ee:	4602      	mov	r2, r0
 80147f0:	460b      	mov	r3, r1
 80147f2:	4650      	mov	r0, sl
 80147f4:	4659      	mov	r1, fp
 80147f6:	f7eb fd6f 	bl	80002d8 <__aeabi_dsub>
 80147fa:	ec53 2b18 	vmov	r2, r3, d8
 80147fe:	f7eb ff23 	bl	8000648 <__aeabi_dmul>
 8014802:	4622      	mov	r2, r4
 8014804:	4606      	mov	r6, r0
 8014806:	460f      	mov	r7, r1
 8014808:	462b      	mov	r3, r5
 801480a:	ec51 0b19 	vmov	r0, r1, d9
 801480e:	f7eb ff1b 	bl	8000648 <__aeabi_dmul>
 8014812:	4602      	mov	r2, r0
 8014814:	460b      	mov	r3, r1
 8014816:	4630      	mov	r0, r6
 8014818:	4639      	mov	r1, r7
 801481a:	f7eb fd5f 	bl	80002dc <__adddf3>
 801481e:	4606      	mov	r6, r0
 8014820:	460f      	mov	r7, r1
 8014822:	4602      	mov	r2, r0
 8014824:	460b      	mov	r3, r1
 8014826:	4640      	mov	r0, r8
 8014828:	4649      	mov	r1, r9
 801482a:	f7eb fd57 	bl	80002dc <__adddf3>
 801482e:	a33e      	add	r3, pc, #248	; (adr r3, 8014928 <__ieee754_pow+0x738>)
 8014830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014834:	2000      	movs	r0, #0
 8014836:	4604      	mov	r4, r0
 8014838:	460d      	mov	r5, r1
 801483a:	f7eb ff05 	bl	8000648 <__aeabi_dmul>
 801483e:	4642      	mov	r2, r8
 8014840:	ec41 0b18 	vmov	d8, r0, r1
 8014844:	464b      	mov	r3, r9
 8014846:	4620      	mov	r0, r4
 8014848:	4629      	mov	r1, r5
 801484a:	f7eb fd45 	bl	80002d8 <__aeabi_dsub>
 801484e:	4602      	mov	r2, r0
 8014850:	460b      	mov	r3, r1
 8014852:	4630      	mov	r0, r6
 8014854:	4639      	mov	r1, r7
 8014856:	f7eb fd3f 	bl	80002d8 <__aeabi_dsub>
 801485a:	a335      	add	r3, pc, #212	; (adr r3, 8014930 <__ieee754_pow+0x740>)
 801485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014860:	f7eb fef2 	bl	8000648 <__aeabi_dmul>
 8014864:	a334      	add	r3, pc, #208	; (adr r3, 8014938 <__ieee754_pow+0x748>)
 8014866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486a:	4606      	mov	r6, r0
 801486c:	460f      	mov	r7, r1
 801486e:	4620      	mov	r0, r4
 8014870:	4629      	mov	r1, r5
 8014872:	f7eb fee9 	bl	8000648 <__aeabi_dmul>
 8014876:	4602      	mov	r2, r0
 8014878:	460b      	mov	r3, r1
 801487a:	4630      	mov	r0, r6
 801487c:	4639      	mov	r1, r7
 801487e:	f7eb fd2d 	bl	80002dc <__adddf3>
 8014882:	9a07      	ldr	r2, [sp, #28]
 8014884:	4b37      	ldr	r3, [pc, #220]	; (8014964 <__ieee754_pow+0x774>)
 8014886:	4413      	add	r3, r2
 8014888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488c:	f7eb fd26 	bl	80002dc <__adddf3>
 8014890:	4682      	mov	sl, r0
 8014892:	9805      	ldr	r0, [sp, #20]
 8014894:	468b      	mov	fp, r1
 8014896:	f7eb fe6d 	bl	8000574 <__aeabi_i2d>
 801489a:	9a07      	ldr	r2, [sp, #28]
 801489c:	4b32      	ldr	r3, [pc, #200]	; (8014968 <__ieee754_pow+0x778>)
 801489e:	4413      	add	r3, r2
 80148a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80148a4:	4606      	mov	r6, r0
 80148a6:	460f      	mov	r7, r1
 80148a8:	4652      	mov	r2, sl
 80148aa:	465b      	mov	r3, fp
 80148ac:	ec51 0b18 	vmov	r0, r1, d8
 80148b0:	f7eb fd14 	bl	80002dc <__adddf3>
 80148b4:	4642      	mov	r2, r8
 80148b6:	464b      	mov	r3, r9
 80148b8:	f7eb fd10 	bl	80002dc <__adddf3>
 80148bc:	4632      	mov	r2, r6
 80148be:	463b      	mov	r3, r7
 80148c0:	f7eb fd0c 	bl	80002dc <__adddf3>
 80148c4:	2000      	movs	r0, #0
 80148c6:	4632      	mov	r2, r6
 80148c8:	463b      	mov	r3, r7
 80148ca:	4604      	mov	r4, r0
 80148cc:	460d      	mov	r5, r1
 80148ce:	f7eb fd03 	bl	80002d8 <__aeabi_dsub>
 80148d2:	4642      	mov	r2, r8
 80148d4:	464b      	mov	r3, r9
 80148d6:	f7eb fcff 	bl	80002d8 <__aeabi_dsub>
 80148da:	ec53 2b18 	vmov	r2, r3, d8
 80148de:	f7eb fcfb 	bl	80002d8 <__aeabi_dsub>
 80148e2:	4602      	mov	r2, r0
 80148e4:	460b      	mov	r3, r1
 80148e6:	4650      	mov	r0, sl
 80148e8:	4659      	mov	r1, fp
 80148ea:	e610      	b.n	801450e <__ieee754_pow+0x31e>
 80148ec:	2401      	movs	r4, #1
 80148ee:	e6a1      	b.n	8014634 <__ieee754_pow+0x444>
 80148f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014940 <__ieee754_pow+0x750>
 80148f4:	e617      	b.n	8014526 <__ieee754_pow+0x336>
 80148f6:	bf00      	nop
 80148f8:	4a454eef 	.word	0x4a454eef
 80148fc:	3fca7e28 	.word	0x3fca7e28
 8014900:	93c9db65 	.word	0x93c9db65
 8014904:	3fcd864a 	.word	0x3fcd864a
 8014908:	a91d4101 	.word	0xa91d4101
 801490c:	3fd17460 	.word	0x3fd17460
 8014910:	518f264d 	.word	0x518f264d
 8014914:	3fd55555 	.word	0x3fd55555
 8014918:	db6fabff 	.word	0xdb6fabff
 801491c:	3fdb6db6 	.word	0x3fdb6db6
 8014920:	33333303 	.word	0x33333303
 8014924:	3fe33333 	.word	0x3fe33333
 8014928:	e0000000 	.word	0xe0000000
 801492c:	3feec709 	.word	0x3feec709
 8014930:	dc3a03fd 	.word	0xdc3a03fd
 8014934:	3feec709 	.word	0x3feec709
 8014938:	145b01f5 	.word	0x145b01f5
 801493c:	be3e2fe0 	.word	0xbe3e2fe0
 8014940:	00000000 	.word	0x00000000
 8014944:	3ff00000 	.word	0x3ff00000
 8014948:	7ff00000 	.word	0x7ff00000
 801494c:	43400000 	.word	0x43400000
 8014950:	0003988e 	.word	0x0003988e
 8014954:	000bb679 	.word	0x000bb679
 8014958:	08015b30 	.word	0x08015b30
 801495c:	3ff00000 	.word	0x3ff00000
 8014960:	40080000 	.word	0x40080000
 8014964:	08015b50 	.word	0x08015b50
 8014968:	08015b40 	.word	0x08015b40
 801496c:	a3b3      	add	r3, pc, #716	; (adr r3, 8014c3c <__ieee754_pow+0xa4c>)
 801496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014972:	4640      	mov	r0, r8
 8014974:	4649      	mov	r1, r9
 8014976:	f7eb fcb1 	bl	80002dc <__adddf3>
 801497a:	4622      	mov	r2, r4
 801497c:	ec41 0b1a 	vmov	d10, r0, r1
 8014980:	462b      	mov	r3, r5
 8014982:	4630      	mov	r0, r6
 8014984:	4639      	mov	r1, r7
 8014986:	f7eb fca7 	bl	80002d8 <__aeabi_dsub>
 801498a:	4602      	mov	r2, r0
 801498c:	460b      	mov	r3, r1
 801498e:	ec51 0b1a 	vmov	r0, r1, d10
 8014992:	f7ec f8e9 	bl	8000b68 <__aeabi_dcmpgt>
 8014996:	2800      	cmp	r0, #0
 8014998:	f47f ae04 	bne.w	80145a4 <__ieee754_pow+0x3b4>
 801499c:	4aa2      	ldr	r2, [pc, #648]	; (8014c28 <__ieee754_pow+0xa38>)
 801499e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80149a2:	4293      	cmp	r3, r2
 80149a4:	f340 8107 	ble.w	8014bb6 <__ieee754_pow+0x9c6>
 80149a8:	151b      	asrs	r3, r3, #20
 80149aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80149ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80149b2:	fa4a fa03 	asr.w	sl, sl, r3
 80149b6:	44da      	add	sl, fp
 80149b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80149bc:	489b      	ldr	r0, [pc, #620]	; (8014c2c <__ieee754_pow+0xa3c>)
 80149be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80149c2:	4108      	asrs	r0, r1
 80149c4:	ea00 030a 	and.w	r3, r0, sl
 80149c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80149cc:	f1c1 0114 	rsb	r1, r1, #20
 80149d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80149d4:	fa4a fa01 	asr.w	sl, sl, r1
 80149d8:	f1bb 0f00 	cmp.w	fp, #0
 80149dc:	f04f 0200 	mov.w	r2, #0
 80149e0:	4620      	mov	r0, r4
 80149e2:	4629      	mov	r1, r5
 80149e4:	bfb8      	it	lt
 80149e6:	f1ca 0a00 	rsblt	sl, sl, #0
 80149ea:	f7eb fc75 	bl	80002d8 <__aeabi_dsub>
 80149ee:	ec41 0b19 	vmov	d9, r0, r1
 80149f2:	4642      	mov	r2, r8
 80149f4:	464b      	mov	r3, r9
 80149f6:	ec51 0b19 	vmov	r0, r1, d9
 80149fa:	f7eb fc6f 	bl	80002dc <__adddf3>
 80149fe:	a37a      	add	r3, pc, #488	; (adr r3, 8014be8 <__ieee754_pow+0x9f8>)
 8014a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a04:	2000      	movs	r0, #0
 8014a06:	4604      	mov	r4, r0
 8014a08:	460d      	mov	r5, r1
 8014a0a:	f7eb fe1d 	bl	8000648 <__aeabi_dmul>
 8014a0e:	ec53 2b19 	vmov	r2, r3, d9
 8014a12:	4606      	mov	r6, r0
 8014a14:	460f      	mov	r7, r1
 8014a16:	4620      	mov	r0, r4
 8014a18:	4629      	mov	r1, r5
 8014a1a:	f7eb fc5d 	bl	80002d8 <__aeabi_dsub>
 8014a1e:	4602      	mov	r2, r0
 8014a20:	460b      	mov	r3, r1
 8014a22:	4640      	mov	r0, r8
 8014a24:	4649      	mov	r1, r9
 8014a26:	f7eb fc57 	bl	80002d8 <__aeabi_dsub>
 8014a2a:	a371      	add	r3, pc, #452	; (adr r3, 8014bf0 <__ieee754_pow+0xa00>)
 8014a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a30:	f7eb fe0a 	bl	8000648 <__aeabi_dmul>
 8014a34:	a370      	add	r3, pc, #448	; (adr r3, 8014bf8 <__ieee754_pow+0xa08>)
 8014a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3a:	4680      	mov	r8, r0
 8014a3c:	4689      	mov	r9, r1
 8014a3e:	4620      	mov	r0, r4
 8014a40:	4629      	mov	r1, r5
 8014a42:	f7eb fe01 	bl	8000648 <__aeabi_dmul>
 8014a46:	4602      	mov	r2, r0
 8014a48:	460b      	mov	r3, r1
 8014a4a:	4640      	mov	r0, r8
 8014a4c:	4649      	mov	r1, r9
 8014a4e:	f7eb fc45 	bl	80002dc <__adddf3>
 8014a52:	4604      	mov	r4, r0
 8014a54:	460d      	mov	r5, r1
 8014a56:	4602      	mov	r2, r0
 8014a58:	460b      	mov	r3, r1
 8014a5a:	4630      	mov	r0, r6
 8014a5c:	4639      	mov	r1, r7
 8014a5e:	f7eb fc3d 	bl	80002dc <__adddf3>
 8014a62:	4632      	mov	r2, r6
 8014a64:	463b      	mov	r3, r7
 8014a66:	4680      	mov	r8, r0
 8014a68:	4689      	mov	r9, r1
 8014a6a:	f7eb fc35 	bl	80002d8 <__aeabi_dsub>
 8014a6e:	4602      	mov	r2, r0
 8014a70:	460b      	mov	r3, r1
 8014a72:	4620      	mov	r0, r4
 8014a74:	4629      	mov	r1, r5
 8014a76:	f7eb fc2f 	bl	80002d8 <__aeabi_dsub>
 8014a7a:	4642      	mov	r2, r8
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	460f      	mov	r7, r1
 8014a80:	464b      	mov	r3, r9
 8014a82:	4640      	mov	r0, r8
 8014a84:	4649      	mov	r1, r9
 8014a86:	f7eb fddf 	bl	8000648 <__aeabi_dmul>
 8014a8a:	a35d      	add	r3, pc, #372	; (adr r3, 8014c00 <__ieee754_pow+0xa10>)
 8014a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a90:	4604      	mov	r4, r0
 8014a92:	460d      	mov	r5, r1
 8014a94:	f7eb fdd8 	bl	8000648 <__aeabi_dmul>
 8014a98:	a35b      	add	r3, pc, #364	; (adr r3, 8014c08 <__ieee754_pow+0xa18>)
 8014a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9e:	f7eb fc1b 	bl	80002d8 <__aeabi_dsub>
 8014aa2:	4622      	mov	r2, r4
 8014aa4:	462b      	mov	r3, r5
 8014aa6:	f7eb fdcf 	bl	8000648 <__aeabi_dmul>
 8014aaa:	a359      	add	r3, pc, #356	; (adr r3, 8014c10 <__ieee754_pow+0xa20>)
 8014aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab0:	f7eb fc14 	bl	80002dc <__adddf3>
 8014ab4:	4622      	mov	r2, r4
 8014ab6:	462b      	mov	r3, r5
 8014ab8:	f7eb fdc6 	bl	8000648 <__aeabi_dmul>
 8014abc:	a356      	add	r3, pc, #344	; (adr r3, 8014c18 <__ieee754_pow+0xa28>)
 8014abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac2:	f7eb fc09 	bl	80002d8 <__aeabi_dsub>
 8014ac6:	4622      	mov	r2, r4
 8014ac8:	462b      	mov	r3, r5
 8014aca:	f7eb fdbd 	bl	8000648 <__aeabi_dmul>
 8014ace:	a354      	add	r3, pc, #336	; (adr r3, 8014c20 <__ieee754_pow+0xa30>)
 8014ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad4:	f7eb fc02 	bl	80002dc <__adddf3>
 8014ad8:	4622      	mov	r2, r4
 8014ada:	462b      	mov	r3, r5
 8014adc:	f7eb fdb4 	bl	8000648 <__aeabi_dmul>
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	460b      	mov	r3, r1
 8014ae4:	4640      	mov	r0, r8
 8014ae6:	4649      	mov	r1, r9
 8014ae8:	f7eb fbf6 	bl	80002d8 <__aeabi_dsub>
 8014aec:	4604      	mov	r4, r0
 8014aee:	460d      	mov	r5, r1
 8014af0:	4602      	mov	r2, r0
 8014af2:	460b      	mov	r3, r1
 8014af4:	4640      	mov	r0, r8
 8014af6:	4649      	mov	r1, r9
 8014af8:	f7eb fda6 	bl	8000648 <__aeabi_dmul>
 8014afc:	2200      	movs	r2, #0
 8014afe:	ec41 0b19 	vmov	d9, r0, r1
 8014b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b06:	4620      	mov	r0, r4
 8014b08:	4629      	mov	r1, r5
 8014b0a:	f7eb fbe5 	bl	80002d8 <__aeabi_dsub>
 8014b0e:	4602      	mov	r2, r0
 8014b10:	460b      	mov	r3, r1
 8014b12:	ec51 0b19 	vmov	r0, r1, d9
 8014b16:	f7eb fec1 	bl	800089c <__aeabi_ddiv>
 8014b1a:	4632      	mov	r2, r6
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	460d      	mov	r5, r1
 8014b20:	463b      	mov	r3, r7
 8014b22:	4640      	mov	r0, r8
 8014b24:	4649      	mov	r1, r9
 8014b26:	f7eb fd8f 	bl	8000648 <__aeabi_dmul>
 8014b2a:	4632      	mov	r2, r6
 8014b2c:	463b      	mov	r3, r7
 8014b2e:	f7eb fbd5 	bl	80002dc <__adddf3>
 8014b32:	4602      	mov	r2, r0
 8014b34:	460b      	mov	r3, r1
 8014b36:	4620      	mov	r0, r4
 8014b38:	4629      	mov	r1, r5
 8014b3a:	f7eb fbcd 	bl	80002d8 <__aeabi_dsub>
 8014b3e:	4642      	mov	r2, r8
 8014b40:	464b      	mov	r3, r9
 8014b42:	f7eb fbc9 	bl	80002d8 <__aeabi_dsub>
 8014b46:	460b      	mov	r3, r1
 8014b48:	4602      	mov	r2, r0
 8014b4a:	4939      	ldr	r1, [pc, #228]	; (8014c30 <__ieee754_pow+0xa40>)
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	f7eb fbc3 	bl	80002d8 <__aeabi_dsub>
 8014b52:	ec41 0b10 	vmov	d0, r0, r1
 8014b56:	ee10 3a90 	vmov	r3, s1
 8014b5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014b62:	da2b      	bge.n	8014bbc <__ieee754_pow+0x9cc>
 8014b64:	4650      	mov	r0, sl
 8014b66:	f000 f9f3 	bl	8014f50 <scalbn>
 8014b6a:	ec51 0b10 	vmov	r0, r1, d0
 8014b6e:	ec53 2b18 	vmov	r2, r3, d8
 8014b72:	f7ff bbee 	b.w	8014352 <__ieee754_pow+0x162>
 8014b76:	4b2f      	ldr	r3, [pc, #188]	; (8014c34 <__ieee754_pow+0xa44>)
 8014b78:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014b7c:	429e      	cmp	r6, r3
 8014b7e:	f77f af0d 	ble.w	801499c <__ieee754_pow+0x7ac>
 8014b82:	4b2d      	ldr	r3, [pc, #180]	; (8014c38 <__ieee754_pow+0xa48>)
 8014b84:	440b      	add	r3, r1
 8014b86:	4303      	orrs	r3, r0
 8014b88:	d009      	beq.n	8014b9e <__ieee754_pow+0x9ae>
 8014b8a:	ec51 0b18 	vmov	r0, r1, d8
 8014b8e:	2200      	movs	r2, #0
 8014b90:	2300      	movs	r3, #0
 8014b92:	f7eb ffcb 	bl	8000b2c <__aeabi_dcmplt>
 8014b96:	3800      	subs	r0, #0
 8014b98:	bf18      	it	ne
 8014b9a:	2001      	movne	r0, #1
 8014b9c:	e448      	b.n	8014430 <__ieee754_pow+0x240>
 8014b9e:	4622      	mov	r2, r4
 8014ba0:	462b      	mov	r3, r5
 8014ba2:	f7eb fb99 	bl	80002d8 <__aeabi_dsub>
 8014ba6:	4642      	mov	r2, r8
 8014ba8:	464b      	mov	r3, r9
 8014baa:	f7eb ffd3 	bl	8000b54 <__aeabi_dcmpge>
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	f43f aef4 	beq.w	801499c <__ieee754_pow+0x7ac>
 8014bb4:	e7e9      	b.n	8014b8a <__ieee754_pow+0x99a>
 8014bb6:	f04f 0a00 	mov.w	sl, #0
 8014bba:	e71a      	b.n	80149f2 <__ieee754_pow+0x802>
 8014bbc:	ec51 0b10 	vmov	r0, r1, d0
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	e7d4      	b.n	8014b6e <__ieee754_pow+0x97e>
 8014bc4:	491a      	ldr	r1, [pc, #104]	; (8014c30 <__ieee754_pow+0xa40>)
 8014bc6:	2000      	movs	r0, #0
 8014bc8:	f7ff bb31 	b.w	801422e <__ieee754_pow+0x3e>
 8014bcc:	2000      	movs	r0, #0
 8014bce:	2100      	movs	r1, #0
 8014bd0:	f7ff bb2d 	b.w	801422e <__ieee754_pow+0x3e>
 8014bd4:	4630      	mov	r0, r6
 8014bd6:	4639      	mov	r1, r7
 8014bd8:	f7ff bb29 	b.w	801422e <__ieee754_pow+0x3e>
 8014bdc:	9204      	str	r2, [sp, #16]
 8014bde:	f7ff bb7b 	b.w	80142d8 <__ieee754_pow+0xe8>
 8014be2:	2300      	movs	r3, #0
 8014be4:	f7ff bb65 	b.w	80142b2 <__ieee754_pow+0xc2>
 8014be8:	00000000 	.word	0x00000000
 8014bec:	3fe62e43 	.word	0x3fe62e43
 8014bf0:	fefa39ef 	.word	0xfefa39ef
 8014bf4:	3fe62e42 	.word	0x3fe62e42
 8014bf8:	0ca86c39 	.word	0x0ca86c39
 8014bfc:	be205c61 	.word	0xbe205c61
 8014c00:	72bea4d0 	.word	0x72bea4d0
 8014c04:	3e663769 	.word	0x3e663769
 8014c08:	c5d26bf1 	.word	0xc5d26bf1
 8014c0c:	3ebbbd41 	.word	0x3ebbbd41
 8014c10:	af25de2c 	.word	0xaf25de2c
 8014c14:	3f11566a 	.word	0x3f11566a
 8014c18:	16bebd93 	.word	0x16bebd93
 8014c1c:	3f66c16c 	.word	0x3f66c16c
 8014c20:	5555553e 	.word	0x5555553e
 8014c24:	3fc55555 	.word	0x3fc55555
 8014c28:	3fe00000 	.word	0x3fe00000
 8014c2c:	fff00000 	.word	0xfff00000
 8014c30:	3ff00000 	.word	0x3ff00000
 8014c34:	4090cbff 	.word	0x4090cbff
 8014c38:	3f6f3400 	.word	0x3f6f3400
 8014c3c:	652b82fe 	.word	0x652b82fe
 8014c40:	3c971547 	.word	0x3c971547

08014c44 <fabs>:
 8014c44:	ec51 0b10 	vmov	r0, r1, d0
 8014c48:	ee10 2a10 	vmov	r2, s0
 8014c4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c50:	ec43 2b10 	vmov	d0, r2, r3
 8014c54:	4770      	bx	lr
	...

08014c58 <__ieee754_atan2f>:
 8014c58:	ee10 2a90 	vmov	r2, s1
 8014c5c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014c60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014c64:	b510      	push	{r4, lr}
 8014c66:	eef0 7a40 	vmov.f32	s15, s0
 8014c6a:	dc06      	bgt.n	8014c7a <__ieee754_atan2f+0x22>
 8014c6c:	ee10 0a10 	vmov	r0, s0
 8014c70:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014c74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014c78:	dd04      	ble.n	8014c84 <__ieee754_atan2f+0x2c>
 8014c7a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8014c82:	bd10      	pop	{r4, pc}
 8014c84:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014c88:	d103      	bne.n	8014c92 <__ieee754_atan2f+0x3a>
 8014c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c8e:	f000 b883 	b.w	8014d98 <atanf>
 8014c92:	1794      	asrs	r4, r2, #30
 8014c94:	f004 0402 	and.w	r4, r4, #2
 8014c98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014c9c:	b943      	cbnz	r3, 8014cb0 <__ieee754_atan2f+0x58>
 8014c9e:	2c02      	cmp	r4, #2
 8014ca0:	d05e      	beq.n	8014d60 <__ieee754_atan2f+0x108>
 8014ca2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014d74 <__ieee754_atan2f+0x11c>
 8014ca6:	2c03      	cmp	r4, #3
 8014ca8:	bf08      	it	eq
 8014caa:	eef0 7a47 	vmoveq.f32	s15, s14
 8014cae:	e7e6      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014cb0:	b941      	cbnz	r1, 8014cc4 <__ieee754_atan2f+0x6c>
 8014cb2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014d78 <__ieee754_atan2f+0x120>
 8014cb6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014d7c <__ieee754_atan2f+0x124>
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	bfb8      	it	lt
 8014cbe:	eef0 7a47 	vmovlt.f32	s15, s14
 8014cc2:	e7dc      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014cc4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014cc8:	d110      	bne.n	8014cec <__ieee754_atan2f+0x94>
 8014cca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014cce:	f104 34ff 	add.w	r4, r4, #4294967295
 8014cd2:	d107      	bne.n	8014ce4 <__ieee754_atan2f+0x8c>
 8014cd4:	2c02      	cmp	r4, #2
 8014cd6:	d846      	bhi.n	8014d66 <__ieee754_atan2f+0x10e>
 8014cd8:	4b29      	ldr	r3, [pc, #164]	; (8014d80 <__ieee754_atan2f+0x128>)
 8014cda:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014cde:	edd3 7a00 	vldr	s15, [r3]
 8014ce2:	e7cc      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014ce4:	2c02      	cmp	r4, #2
 8014ce6:	d841      	bhi.n	8014d6c <__ieee754_atan2f+0x114>
 8014ce8:	4b26      	ldr	r3, [pc, #152]	; (8014d84 <__ieee754_atan2f+0x12c>)
 8014cea:	e7f6      	b.n	8014cda <__ieee754_atan2f+0x82>
 8014cec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014cf0:	d0df      	beq.n	8014cb2 <__ieee754_atan2f+0x5a>
 8014cf2:	1a5b      	subs	r3, r3, r1
 8014cf4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014cf8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014cfc:	da1a      	bge.n	8014d34 <__ieee754_atan2f+0xdc>
 8014cfe:	2a00      	cmp	r2, #0
 8014d00:	da01      	bge.n	8014d06 <__ieee754_atan2f+0xae>
 8014d02:	313c      	adds	r1, #60	; 0x3c
 8014d04:	db19      	blt.n	8014d3a <__ieee754_atan2f+0xe2>
 8014d06:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014d0a:	f000 f919 	bl	8014f40 <fabsf>
 8014d0e:	f000 f843 	bl	8014d98 <atanf>
 8014d12:	eef0 7a40 	vmov.f32	s15, s0
 8014d16:	2c01      	cmp	r4, #1
 8014d18:	d012      	beq.n	8014d40 <__ieee754_atan2f+0xe8>
 8014d1a:	2c02      	cmp	r4, #2
 8014d1c:	d017      	beq.n	8014d4e <__ieee754_atan2f+0xf6>
 8014d1e:	2c00      	cmp	r4, #0
 8014d20:	d0ad      	beq.n	8014c7e <__ieee754_atan2f+0x26>
 8014d22:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8014d88 <__ieee754_atan2f+0x130>
 8014d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d2a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8014d8c <__ieee754_atan2f+0x134>
 8014d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d32:	e7a4      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014d34:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014d78 <__ieee754_atan2f+0x120>
 8014d38:	e7ed      	b.n	8014d16 <__ieee754_atan2f+0xbe>
 8014d3a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014d90 <__ieee754_atan2f+0x138>
 8014d3e:	e7ea      	b.n	8014d16 <__ieee754_atan2f+0xbe>
 8014d40:	ee17 3a90 	vmov	r3, s15
 8014d44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014d48:	ee07 3a90 	vmov	s15, r3
 8014d4c:	e797      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014d4e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014d88 <__ieee754_atan2f+0x130>
 8014d52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d56:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8014d8c <__ieee754_atan2f+0x134>
 8014d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d5e:	e78e      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014d60:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014d8c <__ieee754_atan2f+0x134>
 8014d64:	e78b      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014d66:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014d94 <__ieee754_atan2f+0x13c>
 8014d6a:	e788      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014d6c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014d90 <__ieee754_atan2f+0x138>
 8014d70:	e785      	b.n	8014c7e <__ieee754_atan2f+0x26>
 8014d72:	bf00      	nop
 8014d74:	c0490fdb 	.word	0xc0490fdb
 8014d78:	3fc90fdb 	.word	0x3fc90fdb
 8014d7c:	bfc90fdb 	.word	0xbfc90fdb
 8014d80:	08015b60 	.word	0x08015b60
 8014d84:	08015b6c 	.word	0x08015b6c
 8014d88:	33bbbd2e 	.word	0x33bbbd2e
 8014d8c:	40490fdb 	.word	0x40490fdb
 8014d90:	00000000 	.word	0x00000000
 8014d94:	3f490fdb 	.word	0x3f490fdb

08014d98 <atanf>:
 8014d98:	b538      	push	{r3, r4, r5, lr}
 8014d9a:	ee10 5a10 	vmov	r5, s0
 8014d9e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014da2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014da6:	eef0 7a40 	vmov.f32	s15, s0
 8014daa:	db10      	blt.n	8014dce <atanf+0x36>
 8014dac:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014db0:	dd04      	ble.n	8014dbc <atanf+0x24>
 8014db2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014db6:	eeb0 0a67 	vmov.f32	s0, s15
 8014dba:	bd38      	pop	{r3, r4, r5, pc}
 8014dbc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014ef4 <atanf+0x15c>
 8014dc0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014ef8 <atanf+0x160>
 8014dc4:	2d00      	cmp	r5, #0
 8014dc6:	bfd8      	it	le
 8014dc8:	eef0 7a47 	vmovle.f32	s15, s14
 8014dcc:	e7f3      	b.n	8014db6 <atanf+0x1e>
 8014dce:	4b4b      	ldr	r3, [pc, #300]	; (8014efc <atanf+0x164>)
 8014dd0:	429c      	cmp	r4, r3
 8014dd2:	dc10      	bgt.n	8014df6 <atanf+0x5e>
 8014dd4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014dd8:	da0a      	bge.n	8014df0 <atanf+0x58>
 8014dda:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014f00 <atanf+0x168>
 8014dde:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014de6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dee:	dce2      	bgt.n	8014db6 <atanf+0x1e>
 8014df0:	f04f 33ff 	mov.w	r3, #4294967295
 8014df4:	e013      	b.n	8014e1e <atanf+0x86>
 8014df6:	f000 f8a3 	bl	8014f40 <fabsf>
 8014dfa:	4b42      	ldr	r3, [pc, #264]	; (8014f04 <atanf+0x16c>)
 8014dfc:	429c      	cmp	r4, r3
 8014dfe:	dc4f      	bgt.n	8014ea0 <atanf+0x108>
 8014e00:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014e04:	429c      	cmp	r4, r3
 8014e06:	dc41      	bgt.n	8014e8c <atanf+0xf4>
 8014e08:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014e0c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014e10:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014e14:	2300      	movs	r3, #0
 8014e16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014e1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014e1e:	1c5a      	adds	r2, r3, #1
 8014e20:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014e24:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014f08 <atanf+0x170>
 8014e28:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014f0c <atanf+0x174>
 8014e2c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014f10 <atanf+0x178>
 8014e30:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014e34:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014e38:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014f14 <atanf+0x17c>
 8014e3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014e40:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014f18 <atanf+0x180>
 8014e44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014e48:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014f1c <atanf+0x184>
 8014e4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014e50:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014f20 <atanf+0x188>
 8014e54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014e58:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014f24 <atanf+0x18c>
 8014e5c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014e60:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014f28 <atanf+0x190>
 8014e64:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014e68:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014f2c <atanf+0x194>
 8014e6c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014e70:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014f30 <atanf+0x198>
 8014e74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014e78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014e7c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014e80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014e84:	d121      	bne.n	8014eca <atanf+0x132>
 8014e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e8a:	e794      	b.n	8014db6 <atanf+0x1e>
 8014e8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e90:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014e94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014e98:	2301      	movs	r3, #1
 8014e9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014e9e:	e7be      	b.n	8014e1e <atanf+0x86>
 8014ea0:	4b24      	ldr	r3, [pc, #144]	; (8014f34 <atanf+0x19c>)
 8014ea2:	429c      	cmp	r4, r3
 8014ea4:	dc0b      	bgt.n	8014ebe <atanf+0x126>
 8014ea6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014eae:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014eb2:	2302      	movs	r3, #2
 8014eb4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014ebc:	e7af      	b.n	8014e1e <atanf+0x86>
 8014ebe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014ec2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014ec6:	2303      	movs	r3, #3
 8014ec8:	e7a9      	b.n	8014e1e <atanf+0x86>
 8014eca:	4a1b      	ldr	r2, [pc, #108]	; (8014f38 <atanf+0x1a0>)
 8014ecc:	491b      	ldr	r1, [pc, #108]	; (8014f3c <atanf+0x1a4>)
 8014ece:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014ed2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014ed6:	edd3 6a00 	vldr	s13, [r3]
 8014eda:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014ede:	2d00      	cmp	r5, #0
 8014ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ee4:	edd2 7a00 	vldr	s15, [r2]
 8014ee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014eec:	bfb8      	it	lt
 8014eee:	eef1 7a67 	vneglt.f32	s15, s15
 8014ef2:	e760      	b.n	8014db6 <atanf+0x1e>
 8014ef4:	3fc90fdb 	.word	0x3fc90fdb
 8014ef8:	bfc90fdb 	.word	0xbfc90fdb
 8014efc:	3edfffff 	.word	0x3edfffff
 8014f00:	7149f2ca 	.word	0x7149f2ca
 8014f04:	3f97ffff 	.word	0x3f97ffff
 8014f08:	3c8569d7 	.word	0x3c8569d7
 8014f0c:	3d4bda59 	.word	0x3d4bda59
 8014f10:	bd6ef16b 	.word	0xbd6ef16b
 8014f14:	3d886b35 	.word	0x3d886b35
 8014f18:	3dba2e6e 	.word	0x3dba2e6e
 8014f1c:	3e124925 	.word	0x3e124925
 8014f20:	3eaaaaab 	.word	0x3eaaaaab
 8014f24:	bd15a221 	.word	0xbd15a221
 8014f28:	bd9d8795 	.word	0xbd9d8795
 8014f2c:	bde38e38 	.word	0xbde38e38
 8014f30:	be4ccccd 	.word	0xbe4ccccd
 8014f34:	401bffff 	.word	0x401bffff
 8014f38:	08015b78 	.word	0x08015b78
 8014f3c:	08015b88 	.word	0x08015b88

08014f40 <fabsf>:
 8014f40:	ee10 3a10 	vmov	r3, s0
 8014f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f48:	ee00 3a10 	vmov	s0, r3
 8014f4c:	4770      	bx	lr
	...

08014f50 <scalbn>:
 8014f50:	b570      	push	{r4, r5, r6, lr}
 8014f52:	ec55 4b10 	vmov	r4, r5, d0
 8014f56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	462b      	mov	r3, r5
 8014f5e:	b999      	cbnz	r1, 8014f88 <scalbn+0x38>
 8014f60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f64:	4323      	orrs	r3, r4
 8014f66:	d03f      	beq.n	8014fe8 <scalbn+0x98>
 8014f68:	4b35      	ldr	r3, [pc, #212]	; (8015040 <scalbn+0xf0>)
 8014f6a:	4629      	mov	r1, r5
 8014f6c:	ee10 0a10 	vmov	r0, s0
 8014f70:	2200      	movs	r2, #0
 8014f72:	f7eb fb69 	bl	8000648 <__aeabi_dmul>
 8014f76:	4b33      	ldr	r3, [pc, #204]	; (8015044 <scalbn+0xf4>)
 8014f78:	429e      	cmp	r6, r3
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	460d      	mov	r5, r1
 8014f7e:	da10      	bge.n	8014fa2 <scalbn+0x52>
 8014f80:	a327      	add	r3, pc, #156	; (adr r3, 8015020 <scalbn+0xd0>)
 8014f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f86:	e01f      	b.n	8014fc8 <scalbn+0x78>
 8014f88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014f8c:	4291      	cmp	r1, r2
 8014f8e:	d10c      	bne.n	8014faa <scalbn+0x5a>
 8014f90:	ee10 2a10 	vmov	r2, s0
 8014f94:	4620      	mov	r0, r4
 8014f96:	4629      	mov	r1, r5
 8014f98:	f7eb f9a0 	bl	80002dc <__adddf3>
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	460d      	mov	r5, r1
 8014fa0:	e022      	b.n	8014fe8 <scalbn+0x98>
 8014fa2:	460b      	mov	r3, r1
 8014fa4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014fa8:	3936      	subs	r1, #54	; 0x36
 8014faa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014fae:	4296      	cmp	r6, r2
 8014fb0:	dd0d      	ble.n	8014fce <scalbn+0x7e>
 8014fb2:	2d00      	cmp	r5, #0
 8014fb4:	a11c      	add	r1, pc, #112	; (adr r1, 8015028 <scalbn+0xd8>)
 8014fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fba:	da02      	bge.n	8014fc2 <scalbn+0x72>
 8014fbc:	a11c      	add	r1, pc, #112	; (adr r1, 8015030 <scalbn+0xe0>)
 8014fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fc2:	a319      	add	r3, pc, #100	; (adr r3, 8015028 <scalbn+0xd8>)
 8014fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc8:	f7eb fb3e 	bl	8000648 <__aeabi_dmul>
 8014fcc:	e7e6      	b.n	8014f9c <scalbn+0x4c>
 8014fce:	1872      	adds	r2, r6, r1
 8014fd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014fd4:	428a      	cmp	r2, r1
 8014fd6:	dcec      	bgt.n	8014fb2 <scalbn+0x62>
 8014fd8:	2a00      	cmp	r2, #0
 8014fda:	dd08      	ble.n	8014fee <scalbn+0x9e>
 8014fdc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014fe0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fe4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014fe8:	ec45 4b10 	vmov	d0, r4, r5
 8014fec:	bd70      	pop	{r4, r5, r6, pc}
 8014fee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014ff2:	da08      	bge.n	8015006 <scalbn+0xb6>
 8014ff4:	2d00      	cmp	r5, #0
 8014ff6:	a10a      	add	r1, pc, #40	; (adr r1, 8015020 <scalbn+0xd0>)
 8014ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ffc:	dac0      	bge.n	8014f80 <scalbn+0x30>
 8014ffe:	a10e      	add	r1, pc, #56	; (adr r1, 8015038 <scalbn+0xe8>)
 8015000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015004:	e7bc      	b.n	8014f80 <scalbn+0x30>
 8015006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801500a:	3236      	adds	r2, #54	; 0x36
 801500c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015010:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015014:	4620      	mov	r0, r4
 8015016:	4b0c      	ldr	r3, [pc, #48]	; (8015048 <scalbn+0xf8>)
 8015018:	2200      	movs	r2, #0
 801501a:	e7d5      	b.n	8014fc8 <scalbn+0x78>
 801501c:	f3af 8000 	nop.w
 8015020:	c2f8f359 	.word	0xc2f8f359
 8015024:	01a56e1f 	.word	0x01a56e1f
 8015028:	8800759c 	.word	0x8800759c
 801502c:	7e37e43c 	.word	0x7e37e43c
 8015030:	8800759c 	.word	0x8800759c
 8015034:	fe37e43c 	.word	0xfe37e43c
 8015038:	c2f8f359 	.word	0xc2f8f359
 801503c:	81a56e1f 	.word	0x81a56e1f
 8015040:	43500000 	.word	0x43500000
 8015044:	ffff3cb0 	.word	0xffff3cb0
 8015048:	3c900000 	.word	0x3c900000

0801504c <with_errno>:
 801504c:	b570      	push	{r4, r5, r6, lr}
 801504e:	4604      	mov	r4, r0
 8015050:	460d      	mov	r5, r1
 8015052:	4616      	mov	r6, r2
 8015054:	f7fb f86e 	bl	8010134 <__errno>
 8015058:	4629      	mov	r1, r5
 801505a:	6006      	str	r6, [r0, #0]
 801505c:	4620      	mov	r0, r4
 801505e:	bd70      	pop	{r4, r5, r6, pc}

08015060 <xflow>:
 8015060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015062:	4614      	mov	r4, r2
 8015064:	461d      	mov	r5, r3
 8015066:	b108      	cbz	r0, 801506c <xflow+0xc>
 8015068:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801506c:	e9cd 2300 	strd	r2, r3, [sp]
 8015070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015074:	4620      	mov	r0, r4
 8015076:	4629      	mov	r1, r5
 8015078:	f7eb fae6 	bl	8000648 <__aeabi_dmul>
 801507c:	2222      	movs	r2, #34	; 0x22
 801507e:	b003      	add	sp, #12
 8015080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015084:	f7ff bfe2 	b.w	801504c <with_errno>

08015088 <__math_uflow>:
 8015088:	b508      	push	{r3, lr}
 801508a:	2200      	movs	r2, #0
 801508c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015090:	f7ff ffe6 	bl	8015060 <xflow>
 8015094:	ec41 0b10 	vmov	d0, r0, r1
 8015098:	bd08      	pop	{r3, pc}

0801509a <__math_oflow>:
 801509a:	b508      	push	{r3, lr}
 801509c:	2200      	movs	r2, #0
 801509e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80150a2:	f7ff ffdd 	bl	8015060 <xflow>
 80150a6:	ec41 0b10 	vmov	d0, r0, r1
 80150aa:	bd08      	pop	{r3, pc}

080150ac <__ieee754_sqrt>:
 80150ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150b0:	ec55 4b10 	vmov	r4, r5, d0
 80150b4:	4e67      	ldr	r6, [pc, #412]	; (8015254 <__ieee754_sqrt+0x1a8>)
 80150b6:	43ae      	bics	r6, r5
 80150b8:	ee10 0a10 	vmov	r0, s0
 80150bc:	ee10 2a10 	vmov	r2, s0
 80150c0:	4629      	mov	r1, r5
 80150c2:	462b      	mov	r3, r5
 80150c4:	d10d      	bne.n	80150e2 <__ieee754_sqrt+0x36>
 80150c6:	f7eb fabf 	bl	8000648 <__aeabi_dmul>
 80150ca:	4602      	mov	r2, r0
 80150cc:	460b      	mov	r3, r1
 80150ce:	4620      	mov	r0, r4
 80150d0:	4629      	mov	r1, r5
 80150d2:	f7eb f903 	bl	80002dc <__adddf3>
 80150d6:	4604      	mov	r4, r0
 80150d8:	460d      	mov	r5, r1
 80150da:	ec45 4b10 	vmov	d0, r4, r5
 80150de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e2:	2d00      	cmp	r5, #0
 80150e4:	dc0b      	bgt.n	80150fe <__ieee754_sqrt+0x52>
 80150e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80150ea:	4326      	orrs	r6, r4
 80150ec:	d0f5      	beq.n	80150da <__ieee754_sqrt+0x2e>
 80150ee:	b135      	cbz	r5, 80150fe <__ieee754_sqrt+0x52>
 80150f0:	f7eb f8f2 	bl	80002d8 <__aeabi_dsub>
 80150f4:	4602      	mov	r2, r0
 80150f6:	460b      	mov	r3, r1
 80150f8:	f7eb fbd0 	bl	800089c <__aeabi_ddiv>
 80150fc:	e7eb      	b.n	80150d6 <__ieee754_sqrt+0x2a>
 80150fe:	1509      	asrs	r1, r1, #20
 8015100:	f000 808d 	beq.w	801521e <__ieee754_sqrt+0x172>
 8015104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015108:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801510c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015110:	07c9      	lsls	r1, r1, #31
 8015112:	bf5c      	itt	pl
 8015114:	005b      	lslpl	r3, r3, #1
 8015116:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801511a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801511e:	bf58      	it	pl
 8015120:	0052      	lslpl	r2, r2, #1
 8015122:	2500      	movs	r5, #0
 8015124:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015128:	1076      	asrs	r6, r6, #1
 801512a:	0052      	lsls	r2, r2, #1
 801512c:	f04f 0e16 	mov.w	lr, #22
 8015130:	46ac      	mov	ip, r5
 8015132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015136:	eb0c 0001 	add.w	r0, ip, r1
 801513a:	4298      	cmp	r0, r3
 801513c:	bfde      	ittt	le
 801513e:	1a1b      	suble	r3, r3, r0
 8015140:	eb00 0c01 	addle.w	ip, r0, r1
 8015144:	186d      	addle	r5, r5, r1
 8015146:	005b      	lsls	r3, r3, #1
 8015148:	f1be 0e01 	subs.w	lr, lr, #1
 801514c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015150:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015154:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015158:	d1ed      	bne.n	8015136 <__ieee754_sqrt+0x8a>
 801515a:	4674      	mov	r4, lr
 801515c:	2720      	movs	r7, #32
 801515e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015162:	4563      	cmp	r3, ip
 8015164:	eb01 000e 	add.w	r0, r1, lr
 8015168:	dc02      	bgt.n	8015170 <__ieee754_sqrt+0xc4>
 801516a:	d113      	bne.n	8015194 <__ieee754_sqrt+0xe8>
 801516c:	4290      	cmp	r0, r2
 801516e:	d811      	bhi.n	8015194 <__ieee754_sqrt+0xe8>
 8015170:	2800      	cmp	r0, #0
 8015172:	eb00 0e01 	add.w	lr, r0, r1
 8015176:	da57      	bge.n	8015228 <__ieee754_sqrt+0x17c>
 8015178:	f1be 0f00 	cmp.w	lr, #0
 801517c:	db54      	blt.n	8015228 <__ieee754_sqrt+0x17c>
 801517e:	f10c 0801 	add.w	r8, ip, #1
 8015182:	eba3 030c 	sub.w	r3, r3, ip
 8015186:	4290      	cmp	r0, r2
 8015188:	bf88      	it	hi
 801518a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801518e:	1a12      	subs	r2, r2, r0
 8015190:	440c      	add	r4, r1
 8015192:	46c4      	mov	ip, r8
 8015194:	005b      	lsls	r3, r3, #1
 8015196:	3f01      	subs	r7, #1
 8015198:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801519c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80151a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80151a4:	d1dd      	bne.n	8015162 <__ieee754_sqrt+0xb6>
 80151a6:	4313      	orrs	r3, r2
 80151a8:	d01b      	beq.n	80151e2 <__ieee754_sqrt+0x136>
 80151aa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015258 <__ieee754_sqrt+0x1ac>
 80151ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801525c <__ieee754_sqrt+0x1b0>
 80151b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80151b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80151ba:	f7eb f88d 	bl	80002d8 <__aeabi_dsub>
 80151be:	e9da 8900 	ldrd	r8, r9, [sl]
 80151c2:	4602      	mov	r2, r0
 80151c4:	460b      	mov	r3, r1
 80151c6:	4640      	mov	r0, r8
 80151c8:	4649      	mov	r1, r9
 80151ca:	f7eb fcb9 	bl	8000b40 <__aeabi_dcmple>
 80151ce:	b140      	cbz	r0, 80151e2 <__ieee754_sqrt+0x136>
 80151d0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80151d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80151d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80151dc:	d126      	bne.n	801522c <__ieee754_sqrt+0x180>
 80151de:	3501      	adds	r5, #1
 80151e0:	463c      	mov	r4, r7
 80151e2:	106a      	asrs	r2, r5, #1
 80151e4:	0863      	lsrs	r3, r4, #1
 80151e6:	07e9      	lsls	r1, r5, #31
 80151e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80151ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80151f0:	bf48      	it	mi
 80151f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80151f6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80151fa:	461c      	mov	r4, r3
 80151fc:	e76d      	b.n	80150da <__ieee754_sqrt+0x2e>
 80151fe:	0ad3      	lsrs	r3, r2, #11
 8015200:	3815      	subs	r0, #21
 8015202:	0552      	lsls	r2, r2, #21
 8015204:	2b00      	cmp	r3, #0
 8015206:	d0fa      	beq.n	80151fe <__ieee754_sqrt+0x152>
 8015208:	02dc      	lsls	r4, r3, #11
 801520a:	d50a      	bpl.n	8015222 <__ieee754_sqrt+0x176>
 801520c:	f1c1 0420 	rsb	r4, r1, #32
 8015210:	fa22 f404 	lsr.w	r4, r2, r4
 8015214:	1e4d      	subs	r5, r1, #1
 8015216:	408a      	lsls	r2, r1
 8015218:	4323      	orrs	r3, r4
 801521a:	1b41      	subs	r1, r0, r5
 801521c:	e772      	b.n	8015104 <__ieee754_sqrt+0x58>
 801521e:	4608      	mov	r0, r1
 8015220:	e7f0      	b.n	8015204 <__ieee754_sqrt+0x158>
 8015222:	005b      	lsls	r3, r3, #1
 8015224:	3101      	adds	r1, #1
 8015226:	e7ef      	b.n	8015208 <__ieee754_sqrt+0x15c>
 8015228:	46e0      	mov	r8, ip
 801522a:	e7aa      	b.n	8015182 <__ieee754_sqrt+0xd6>
 801522c:	f7eb f856 	bl	80002dc <__adddf3>
 8015230:	e9da 8900 	ldrd	r8, r9, [sl]
 8015234:	4602      	mov	r2, r0
 8015236:	460b      	mov	r3, r1
 8015238:	4640      	mov	r0, r8
 801523a:	4649      	mov	r1, r9
 801523c:	f7eb fc76 	bl	8000b2c <__aeabi_dcmplt>
 8015240:	b120      	cbz	r0, 801524c <__ieee754_sqrt+0x1a0>
 8015242:	1ca0      	adds	r0, r4, #2
 8015244:	bf08      	it	eq
 8015246:	3501      	addeq	r5, #1
 8015248:	3402      	adds	r4, #2
 801524a:	e7ca      	b.n	80151e2 <__ieee754_sqrt+0x136>
 801524c:	3401      	adds	r4, #1
 801524e:	f024 0401 	bic.w	r4, r4, #1
 8015252:	e7c6      	b.n	80151e2 <__ieee754_sqrt+0x136>
 8015254:	7ff00000 	.word	0x7ff00000
 8015258:	200001e0 	.word	0x200001e0
 801525c:	200001e8 	.word	0x200001e8

08015260 <_init>:
 8015260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015262:	bf00      	nop
 8015264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015266:	bc08      	pop	{r3}
 8015268:	469e      	mov	lr, r3
 801526a:	4770      	bx	lr

0801526c <_fini>:
 801526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801526e:	bf00      	nop
 8015270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015272:	bc08      	pop	{r3}
 8015274:	469e      	mov	lr, r3
 8015276:	4770      	bx	lr
