
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b824  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  0801ba08  0801ba08  0002ba08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c8d0  0801c8d0  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c8d0  0801c8d0  0002c8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c8d8  0801c8d8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c8d8  0801c8d8  0002c8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c8dc  0801c8dc  0002c8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801c8e0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008eb0  200001f0  0801cad0  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200090a0  0801cad0  000390a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c0bc  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006365  00000000  00000000  0005c31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa8  00000000  00000000  00062688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001873  00000000  00000000  00064630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b669  00000000  00000000  00065ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e2ee  00000000  00000000  0009150c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeea5  00000000  00000000  000bf7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a0cc  00000000  00000000  001ae6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001b876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b9ec 	.word	0x0801b9ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0801b9ec 	.word	0x0801b9ec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"
#include <stdint.h>

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->integrator = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prev_error = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
	pid->prev_measurement = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c

	// Clear output
	pid->out = 0.0f;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	641a      	str	r2, [r3, #64]	; 0x40

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edd3 7a03 	vldr	s15, [r3, #12]
 800111e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001132:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a05 	vldr	s15, [r3, #20]
 800113c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edd3 7a03 	vldr	s15, [r3, #12]
 8001146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a06 	vstr	s15, [r3, #24]

	// Reset lastTick
	pid->lastTick = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float reference, float measurement)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	ed87 0a02 	vstr	s0, [r7, #8]
 8001174:	edc7 0a01 	vstr	s1, [r7, #4]
	// Check if enough time has passed for the T sample time
	bool run = false;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currentTick = xTaskGetTickCount();
 800117e:	f012 f80d 	bl	801319c <xTaskGetTickCount>
 8001182:	4603      	mov	r3, r0
 8001184:	623b      	str	r3, [r7, #32]
	// First run after initialization
	if (pid->lastTick == 0)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d106      	bne.n	800119c <PIDController_Update+0x34>
	{
		run = true;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pid->lastTick = currentTick;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a3a      	ldr	r2, [r7, #32]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	e01a      	b.n	80011d2 <PIDController_Update+0x6a>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->lastTick >= (pid->T * 1000))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	6a3a      	ldr	r2, [r7, #32]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b2:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800135c <PIDController_Update+0x1f4>
 80011b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	db03      	blt.n	80011cc <PIDController_Update+0x64>
		run = true;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011ca:	e002      	b.n	80011d2 <PIDController_Update+0x6a>
	// If it is too early
	else
		run = false;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	pid->lastTick = currentTick;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6a3a      	ldr	r2, [r7, #32]
 80011d6:	611a      	str	r2, [r3, #16]

	// PID algorithm
	if (run)
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80b7 	beq.w	8001350 <PIDController_Update+0x1e8>
	{
		//Error signal
		float error = reference - measurement;
 80011e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ee:	edc7 7a07 	vstr	s15, [r7, #28]

		// Proportional
		float proportional_result = pid->Kp * error;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	edc7 7a06 	vstr	s15, [r7, #24]

		// Integral with Anti-windup
		if (!pid->antiWindup)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800120a:	f083 0301 	eor.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d019      	beq.n	8001248 <PIDController_Update+0xe0>
		{
			pid->integrator = pid->integrator + error * pid->T;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001220:	edd7 7a07 	vldr	s15, [r7, #28]
 8001224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->integrator_result = pid->Ki * pid->integrator;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	ed93 7a01 	vldr	s14, [r3, #4]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800123e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->differentiator = -(measurement - pid->prev_measurement) / pid->T;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800124e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001256:	eef1 6a67 	vneg.f32	s13, s15
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->differentiator_result = pid->Kd * pid->differentiator;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->prev_measurement = measurement;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	63da      	str	r2, [r3, #60]	; 0x3c
		// Store previous measurement for later use
		//pid->prev_measurement = measurement;


		// Compute output
		pid->out = proportional_result + pid->integrator_result + pid->differentiator_result;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800128c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800129a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float pre_saturation_output = pid->out;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	617b      	str	r3, [r7, #20]

		// Saturating (clamping) the output
		if (pid->out > pid->limMax)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80012b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	dd04      	ble.n	80012ca <PIDController_Update+0x162>
			pid->out = pid->limMax;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a1a      	ldr	r2, [r3, #32]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
 80012c8:	e00e      	b.n	80012e8 <PIDController_Update+0x180>
		else if (pid->out < pid->limMin)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80012d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	d503      	bpl.n	80012e8 <PIDController_Update+0x180>
			pid->out = pid->limMin;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	69da      	ldr	r2, [r3, #28]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (pre_saturation_output != pid->out
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80012ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80012f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	d020      	beq.n	800133e <PIDController_Update+0x1d6>
				// ...and if the integrator is trying to make saturation worse
				&& ((pre_saturation_output > 0 && error > 0) || (pre_saturation_output < 0 && error < 0)))
 80012fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	dd06      	ble.n	8001318 <PIDController_Update+0x1b0>
 800130a:	edd7 7a07 	vldr	s15, [r7, #28]
 800130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	dc0d      	bgt.n	8001334 <PIDController_Update+0x1cc>
 8001318:	edd7 7a05 	vldr	s15, [r7, #20]
 800131c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	d50b      	bpl.n	800133e <PIDController_Update+0x1d6>
 8001326:	edd7 7a07 	vldr	s15, [r7, #28]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d504      	bpl.n	800133e <PIDController_Update+0x1d6>
			pid->antiWindup = true;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800133c:	e003      	b.n	8001346 <PIDController_Update+0x1de>
		else
			pid->antiWindup = false;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	e7ff      	b.n	8001350 <PIDController_Update+0x1e8>
	}
}
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	447a0000 	.word	0x447a0000

08001360 <DoublePIDController_Init>:

void DoublePIDController_Init(DoublePIDController *pid)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->outer.antiWindup = false;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pid->inner.antiWindup = false;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->outer.integrator = 0.0f;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	66da      	str	r2, [r3, #108]	; 0x6c
	pid->inner.integrator = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
	pid->outer.differentiator  = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	679a      	str	r2, [r3, #120]	; 0x78
	pid->inner.differentiator  = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	; 0x34

	pid->outer.prev_measurement = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pid->inner.prev_measurement = 0.0f;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	63da      	str	r2, [r3, #60]	; 0x3c

	// Clear output
	pid->outer.out = 0.0f;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	pid->inner.out = 0.0f;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
	// Calculate low-pass filter parameters
	//pid->tau = 5 * pid->T;
	//pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );

	// Reset lastTick
	pid->outer.lastTick = 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54
	pid->inner.lastTick = 0;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DoublePIDController_Update>:

float DoublePIDController_Update(DoublePIDController *pid, float outer_reference, float outer_measurement, float inner_measurement)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80013e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80013e4:	ed87 1a00 	vstr	s2, [r7]
	// Check if enough time has passed for the T sample time
	// I use the outer PID's properties for that
	bool run = false;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentTick = xTaskGetTickCount();
 80013ee:	f011 fed5 	bl	801319c <xTaskGetTickCount>
 80013f2:	4603      	mov	r3, r0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
	// First run after initialization
	if (pid->outer.lastTick == 0)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <DoublePIDController_Update+0x38>
	{
		run = true;
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		pid->outer.lastTick = currentTick;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
 800140a:	e01a      	b.n	8001442 <DoublePIDController_Update+0x6e>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->outer.lastTick >= (pid->outer.T * 1000))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001422:	eddf 6abe 	vldr	s13, [pc, #760]	; 800171c <DoublePIDController_Update+0x348>
 8001426:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800142a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	db03      	blt.n	800143c <DoublePIDController_Update+0x68>
		run = true;
 8001434:	2301      	movs	r3, #1
 8001436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800143a:	e002      	b.n	8001442 <DoublePIDController_Update+0x6e>
	// If it is too early
	else
		run = false;
 800143c:	2300      	movs	r3, #0
 800143e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	pid->outer.lastTick = currentTick;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001446:	655a      	str	r2, [r3, #84]	; 0x54

	// PID algorithm
	if (run)
 8001448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8160 	beq.w	8001712 <DoublePIDController_Update+0x33e>
	{
		// Outer PID Controller
		//Error signal
		float outer_error = outer_reference - outer_measurement;
 8001452:	ed97 7a02 	vldr	s14, [r7, #8]
 8001456:	edd7 7a01 	vldr	s15, [r7, #4]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Proportional
		float outer_proportional_result = pid->outer.Kp * outer_error;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001468:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	edc7 7a08 	vstr	s15, [r7, #32]

		// Integral with Anti-windup
		if (!pid->outer.antiWindup)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800147a:	f083 0301 	eor.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d019      	beq.n	80014b8 <DoublePIDController_Update+0xe4>
		{
			pid->outer.integrator = pid->outer.integrator + outer_error * pid->outer.T;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001490:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			pid->outer.integrator_result = pid->outer.Ki * pid->outer.integrator;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		}

		// Derivative
		pid->outer.differentiator = -inner_measurement;
 80014b8:	edd7 7a00 	vldr	s15, [r7]
 80014bc:	eef1 7a67 	vneg.f32	s15, s15
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		// Derivative with low-pass filter
		//pid->outer.differentiator = 0.4f * pid->outer.differentiator + 0.6f * (-inner_measurement);
		//pid->outer.differentiator_result = pid->outer.Kd * pid->outer.differentiator;

		// Compute output
		pid->outer.out = outer_proportional_result + pid->outer.integrator_result + pid->outer.differentiator_result;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80014e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80014f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		float outer_pre_saturation_output = pid->outer.out;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001500:	61fb      	str	r3, [r7, #28]

		// Saturating (clamping) the output
		if (pid->outer.out > pid->outer.limMax)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800150e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	dd05      	ble.n	8001524 <DoublePIDController_Update+0x150>
			pid->outer.out = pid->outer.limMax;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001522:	e00f      	b.n	8001544 <DoublePIDController_Update+0x170>
		else if (pid->outer.out < pid->outer.limMin)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	d504      	bpl.n	8001544 <DoublePIDController_Update+0x170>
			pid->outer.out = pid->outer.limMin;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		// Anti-windup check
		// If clamping had an effect...
		if (outer_pre_saturation_output != pid->outer.out
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800154a:	ed97 7a07 	vldr	s14, [r7, #28]
 800154e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d020      	beq.n	800159a <DoublePIDController_Update+0x1c6>
				// ...and if the integrator is trying to make saturation worse
				&& ((outer_pre_saturation_output > 0 && outer_error > 0) || (outer_pre_saturation_output < 0 && outer_error < 0)))
 8001558:	edd7 7a07 	vldr	s15, [r7, #28]
 800155c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	dd06      	ble.n	8001574 <DoublePIDController_Update+0x1a0>
 8001566:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800156a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	dc0d      	bgt.n	8001590 <DoublePIDController_Update+0x1bc>
 8001574:	edd7 7a07 	vldr	s15, [r7, #28]
 8001578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	d50b      	bpl.n	800159a <DoublePIDController_Update+0x1c6>
 8001582:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	d504      	bpl.n	800159a <DoublePIDController_Update+0x1c6>
			pid->outer.antiWindup = true;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001598:	e003      	b.n	80015a2 <DoublePIDController_Update+0x1ce>
		else
			pid->outer.antiWindup = false;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68



		// Inner PID Controller
		//Error signal
		float inner_error = pid->outer.out - inner_measurement;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80015a8:	edd7 7a00 	vldr	s15, [r7]
 80015ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b0:	edc7 7a06 	vstr	s15, [r7, #24]

		// Proportional
		float inner_proportional_result = pid->inner.Kp * inner_error;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80015be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c2:	edc7 7a05 	vstr	s15, [r7, #20]

		// Integral with Anti-windup
		if (!pid->inner.antiWindup)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d019      	beq.n	800160a <DoublePIDController_Update+0x236>
		{
			pid->inner.integrator = pid->inner.integrator + inner_error * pid->inner.T;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	edd3 6a03 	vldr	s13, [r3, #12]
 80015e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			pid->inner.integrator_result = pid->inner.Ki * pid->inner.integrator;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}

		// Derivative
		pid->inner.differentiator =-(inner_measurement - pid->inner.prev_measurement) / pid->inner.T;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001610:	ed97 7a00 	vldr	s14, [r7]
 8001614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001618:	eef1 6a67 	vneg.f32	s13, s15
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// Store previous measurement for later use
		pid->inner.prev_measurement = inner_measurement;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	63da      	str	r2, [r3, #60]	; 0x3c
		//pid->inner.differentiator_result = pid->inner.Kd * pid->inner.differentiator;
		// Store previous measurement for later use
		//pid->inner.prev_measurement = inner_measurement;

		// Compute output
		pid->inner.out = inner_proportional_result + pid->inner.integrator_result + pid->inner.differentiator_result;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800164e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		float inner_pre_saturation_output = pid->inner.out;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	613b      	str	r3, [r7, #16]

		// Saturating (clamping) the output
		if (pid->inner.out > pid->inner.limMax)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	edd3 7a08 	vldr	s15, [r3, #32]
 8001678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	dd04      	ble.n	800168c <DoublePIDController_Update+0x2b8>
			pid->inner.out = pid->inner.limMax;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a1a      	ldr	r2, [r3, #32]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
 800168a:	e00e      	b.n	80016aa <DoublePIDController_Update+0x2d6>
		else if (pid->inner.out < pid->inner.limMin)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	edd3 7a07 	vldr	s15, [r3, #28]
 8001698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	d503      	bpl.n	80016aa <DoublePIDController_Update+0x2d6>
			pid->inner.out = pid->inner.limMin;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40

		// Anti-windup check
		// If clamping had an effect...
		if (inner_pre_saturation_output != pid->inner.out
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80016b4:	eeb4 7a67 	vcmp.f32	s14, s15
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	d020      	beq.n	8001700 <DoublePIDController_Update+0x32c>
				// ...and if the integrator is trying to make saturation worse
				&& ((inner_pre_saturation_output > 0 && inner_error > 0) || (inner_pre_saturation_output < 0 && inner_error < 0)))
 80016be:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	dd06      	ble.n	80016da <DoublePIDController_Update+0x306>
 80016cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80016d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	dc0d      	bgt.n	80016f6 <DoublePIDController_Update+0x322>
 80016da:	edd7 7a04 	vldr	s15, [r7, #16]
 80016de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	d50b      	bpl.n	8001700 <DoublePIDController_Update+0x32c>
 80016e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	d504      	bpl.n	8001700 <DoublePIDController_Update+0x32c>
			pid->inner.antiWindup = true;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016fe:	e003      	b.n	8001708 <DoublePIDController_Update+0x334>
		else
			pid->inner.antiWindup = false;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24


		return 0;
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	e7ff      	b.n	8001712 <DoublePIDController_Update+0x33e>
	}
}
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	3730      	adds	r7, #48	; 0x30
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	447a0000 	.word	0x447a0000

08001720 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b09c      	sub	sp, #112	; 0x70
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <Log+0x44>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d014      	beq.n	800175a <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	490c      	ldr	r1, [pc, #48]	; (8001768 <Log+0x48>)
 8001738:	4618      	mov	r0, r3
 800173a:	f013 fddf 	bl	80152fc <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fdbc 	bl	80002c0 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	b29a      	uxth	r2, r3
 800174c:	f107 010c 	add.w	r1, r7, #12
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <Log+0x4c>)
 8001756:	f00e fc55 	bl	8010004 <HAL_UART_Transmit>
	}
}
 800175a:	bf00      	nop
 800175c:	3770      	adds	r7, #112	; 0x70
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000020c 	.word	0x2000020c
 8001768:	0801ba08 	.word	0x0801ba08
 800176c:	20000c88 	.word	0x20000c88

08001770 <FloatToUint8s>:

volatile uint8_t Spi1Buffer[64] = { 0 };
volatile uint8_t Spi1ReceivedData[64] = { 0 };

void FloatToUint8s(float* src, uint8_t* array, int position)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(float));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4413      	add	r3, r2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <FloatFromUint8s>:

void FloatFromUint8s(uint8_t* array, int position, float* dest)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  memcpy(dest, array+position, sizeof(float));
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <Uint16ToUint8s>:

void Uint16ToUint8s(uint16_t* src, uint8_t* array, int position)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(uint16_t));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	4413      	add	r3, r2
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	8812      	ldrh	r2, [r2, #0]
 80017d0:	b292      	uxth	r2, r2
 80017d2:	801a      	strh	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <Int16ToUint8s>:

void Int16ToUint8s(int16_t* src, uint8_t* array, int position)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	memcpy(array+position, src, sizeof(int16_t));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	b292      	uxth	r2, r2
 80017f8:	801a      	strh	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LPF_Init>:
#include "LPF.h"

void LPF_Init(LPF *lpf)
{
 8001806:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	lpf->prevU = 0.0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
	lpf->prevY = 0.0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	605a      	str	r2, [r3, #4]

	lpf->tau = 1.0 / lpf->f_cutoff;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	ed93 7a03 	vldr	s14, [r3, #12]
 8001826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800182a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edc3 7a04 	vstr	s15, [r3, #16]

	lpf->alpha = lpf->T / (2.0 * lpf->tau + lpf->T);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fead 	bl	8000598 <__aeabi_f2d>
 800183e:	4604      	mov	r4, r0
 8001840:	460d      	mov	r5, r1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fea6 	bl	8000598 <__aeabi_f2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	f7fe fd44 	bl	80002dc <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4690      	mov	r8, r2
 800185a:	4699      	mov	r9, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe99 	bl	8000598 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4640      	mov	r0, r8
 800186c:	4649      	mov	r1, r9
 800186e:	f7fe fd35 	bl	80002dc <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7ff f80f 	bl	800089c <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f9d7 	bl	8000c38 <__aeabi_d2f>
 800188a:	4602      	mov	r2, r0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	615a      	str	r2, [r3, #20]
	lpf->beta = (2.0 * lpf->tau - lpf->T) / (2.0 * lpf->tau + lpf->T);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe7f 	bl	8000598 <__aeabi_f2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	f7fe fd1d 	bl	80002dc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4614      	mov	r4, r2
 80018a8:	461d      	mov	r5, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe72 	bl	8000598 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fd0c 	bl	80002d8 <__aeabi_dsub>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4614      	mov	r4, r2
 80018c6:	461d      	mov	r5, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe63 	bl	8000598 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	f7fe fd01 	bl	80002dc <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4690      	mov	r8, r2
 80018e0:	4699      	mov	r9, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe56 	bl	8000598 <__aeabi_f2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4640      	mov	r0, r8
 80018f2:	4649      	mov	r1, r9
 80018f4:	f7fe fcf2 	bl	80002dc <__adddf3>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe ffcc 	bl	800089c <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f994 	bl	8000c38 <__aeabi_d2f>
 8001910:	4602      	mov	r2, r0
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001920 <LPF_Calculate>:

float LPF_Calculate(LPF *lpf, float U)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	ed87 0a00 	vstr	s0, [r7]
	float Y = lpf->alpha * (U + lpf->prevU) + lpf->beta * lpf->prevY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edd3 6a00 	vldr	s13, [r3]
 8001938:	edd7 7a00 	vldr	s15, [r7]
 800193c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	edd3 6a06 	vldr	s13, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	edc7 7a03 	vstr	s15, [r7, #12]

	lpf->prevU = U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	601a      	str	r2, [r3, #0]
	lpf->prevY = Y;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	605a      	str	r2, [r3, #4]

	return Y;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	ee07 3a90 	vmov	s15, r3
}
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <TaskController>:
extern osMutexId ImuMutexHandle;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskController(void const *argument)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8001984:	23c8      	movs	r3, #200	; 0xc8
 8001986:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	613b      	str	r3, [r7, #16]

	// Roll
	// Outer
	DPID_Roll.outer.Kp = 5;
 8001994:	4baf      	ldr	r3, [pc, #700]	; (8001c54 <TaskController+0x2d8>)
 8001996:	4ab0      	ldr	r2, [pc, #704]	; (8001c58 <TaskController+0x2dc>)
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Roll.outer.Ki = 8;
 800199a:	4bae      	ldr	r3, [pc, #696]	; (8001c54 <TaskController+0x2d8>)
 800199c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80019a0:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Roll.outer.Kd = 0.15;
 80019a2:	4bac      	ldr	r3, [pc, #688]	; (8001c54 <TaskController+0x2d8>)
 80019a4:	4aad      	ldr	r2, [pc, #692]	; (8001c5c <TaskController+0x2e0>)
 80019a6:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Roll.outer.T = 1.0f / xFrequency;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ba:	4ba6      	ldr	r3, [pc, #664]	; (8001c54 <TaskController+0x2d8>)
 80019bc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	DPID_Roll.outer.limMin = -50;
 80019c0:	4ba4      	ldr	r3, [pc, #656]	; (8001c54 <TaskController+0x2d8>)
 80019c2:	4aa7      	ldr	r2, [pc, #668]	; (8001c60 <TaskController+0x2e4>)
 80019c4:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Roll.outer.limMax = 50;
 80019c6:	4ba3      	ldr	r3, [pc, #652]	; (8001c54 <TaskController+0x2d8>)
 80019c8:	4aa6      	ldr	r2, [pc, #664]	; (8001c64 <TaskController+0x2e8>)
 80019ca:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Roll.inner.Kp = 1.5;
 80019cc:	4ba1      	ldr	r3, [pc, #644]	; (8001c54 <TaskController+0x2d8>)
 80019ce:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80019d2:	601a      	str	r2, [r3, #0]
	DPID_Roll.inner.Ki = 0;
 80019d4:	4b9f      	ldr	r3, [pc, #636]	; (8001c54 <TaskController+0x2d8>)
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
	DPID_Roll.inner.Kd = 0.1;
 80019dc:	4b9d      	ldr	r3, [pc, #628]	; (8001c54 <TaskController+0x2d8>)
 80019de:	4aa2      	ldr	r2, [pc, #648]	; (8001c68 <TaskController+0x2ec>)
 80019e0:	609a      	str	r2, [r3, #8]
	DPID_Roll.inner.T = 1.0f / xFrequency;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	4b97      	ldr	r3, [pc, #604]	; (8001c54 <TaskController+0x2d8>)
 80019f6:	edc3 7a03 	vstr	s15, [r3, #12]
	DPID_Roll.inner.limMin = -500;
 80019fa:	4b96      	ldr	r3, [pc, #600]	; (8001c54 <TaskController+0x2d8>)
 80019fc:	4a9b      	ldr	r2, [pc, #620]	; (8001c6c <TaskController+0x2f0>)
 80019fe:	61da      	str	r2, [r3, #28]
	DPID_Roll.inner.limMax = 500;
 8001a00:	4b94      	ldr	r3, [pc, #592]	; (8001c54 <TaskController+0x2d8>)
 8001a02:	4a9b      	ldr	r2, [pc, #620]	; (8001c70 <TaskController+0x2f4>)
 8001a04:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Roll);
 8001a06:	4893      	ldr	r0, [pc, #588]	; (8001c54 <TaskController+0x2d8>)
 8001a08:	f7ff fcaa 	bl	8001360 <DoublePIDController_Init>

	// Pitch
	// Outer
	DPID_Pitch.outer.Kp = 0;
 8001a0c:	4b99      	ldr	r3, [pc, #612]	; (8001c74 <TaskController+0x2f8>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44
	DPID_Pitch.outer.Ki = 0;
 8001a14:	4b97      	ldr	r3, [pc, #604]	; (8001c74 <TaskController+0x2f8>)
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	649a      	str	r2, [r3, #72]	; 0x48
	DPID_Pitch.outer.Kd = 0;
 8001a1c:	4b95      	ldr	r3, [pc, #596]	; (8001c74 <TaskController+0x2f8>)
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	64da      	str	r2, [r3, #76]	; 0x4c
	DPID_Pitch.outer.T = 1.0f / xFrequency;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a36:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <TaskController+0x2f8>)
 8001a38:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	DPID_Pitch.outer.limMin = -50;
 8001a3c:	4b8d      	ldr	r3, [pc, #564]	; (8001c74 <TaskController+0x2f8>)
 8001a3e:	4a88      	ldr	r2, [pc, #544]	; (8001c60 <TaskController+0x2e4>)
 8001a40:	661a      	str	r2, [r3, #96]	; 0x60
	DPID_Pitch.outer.limMax = 50;
 8001a42:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <TaskController+0x2f8>)
 8001a44:	4a87      	ldr	r2, [pc, #540]	; (8001c64 <TaskController+0x2e8>)
 8001a46:	665a      	str	r2, [r3, #100]	; 0x64
	// Inner
	DPID_Pitch.inner.Kp = 0;
 8001a48:	4b8a      	ldr	r3, [pc, #552]	; (8001c74 <TaskController+0x2f8>)
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
	DPID_Pitch.inner.Ki = 0;
 8001a50:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <TaskController+0x2f8>)
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
	DPID_Pitch.inner.Kd = 0;
 8001a58:	4b86      	ldr	r3, [pc, #536]	; (8001c74 <TaskController+0x2f8>)
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
	DPID_Pitch.inner.T = 1.0f / xFrequency;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a72:	4b80      	ldr	r3, [pc, #512]	; (8001c74 <TaskController+0x2f8>)
 8001a74:	edc3 7a03 	vstr	s15, [r3, #12]
	DPID_Pitch.inner.limMin = -500;
 8001a78:	4b7e      	ldr	r3, [pc, #504]	; (8001c74 <TaskController+0x2f8>)
 8001a7a:	4a7c      	ldr	r2, [pc, #496]	; (8001c6c <TaskController+0x2f0>)
 8001a7c:	61da      	str	r2, [r3, #28]
	DPID_Pitch.inner.limMax = 500;
 8001a7e:	4b7d      	ldr	r3, [pc, #500]	; (8001c74 <TaskController+0x2f8>)
 8001a80:	4a7b      	ldr	r2, [pc, #492]	; (8001c70 <TaskController+0x2f4>)
 8001a82:	621a      	str	r2, [r3, #32]
	// Init
	DoublePIDController_Init(&DPID_Pitch);
 8001a84:	487b      	ldr	r0, [pc, #492]	; (8001c74 <TaskController+0x2f8>)
 8001a86:	f7ff fc6b 	bl	8001360 <DoublePIDController_Init>

	// Yaw
	PID_Yaw.Kp = 0;
 8001a8a:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <TaskController+0x2fc>)
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
	PID_Yaw.Ki = 0;
 8001a92:	4b79      	ldr	r3, [pc, #484]	; (8001c78 <TaskController+0x2fc>)
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
	PID_Yaw.Kd = 0;
 8001a9a:	4b77      	ldr	r3, [pc, #476]	; (8001c78 <TaskController+0x2fc>)
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
	PID_Yaw.T = 1.0f / xFrequency;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab4:	4b70      	ldr	r3, [pc, #448]	; (8001c78 <TaskController+0x2fc>)
 8001ab6:	edc3 7a03 	vstr	s15, [r3, #12]
	PID_Yaw.limMin = -500;
 8001aba:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <TaskController+0x2fc>)
 8001abc:	4a6b      	ldr	r2, [pc, #428]	; (8001c6c <TaskController+0x2f0>)
 8001abe:	61da      	str	r2, [r3, #28]
	PID_Yaw.limMax = 500;
 8001ac0:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <TaskController+0x2fc>)
 8001ac2:	4a6b      	ldr	r2, [pc, #428]	; (8001c70 <TaskController+0x2f4>)
 8001ac4:	621a      	str	r2, [r3, #32]
	// Init
	PIDController_Init(&PID_Yaw);
 8001ac6:	486c      	ldr	r0, [pc, #432]	; (8001c78 <TaskController+0x2fc>)
 8001ac8:	f7ff fb0a 	bl	80010e0 <PIDController_Init>


	xLastWakeTime = xTaskGetTickCount();
 8001acc:	f011 fb66 	bl	801319c <xTaskGetTickCount>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60bb      	str	r3, [r7, #8]
	// Infinite loop
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	6939      	ldr	r1, [r7, #16]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f011 f98a 	bl	8012df4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001ae0:	f011 fb5c 	bl	801319c <xTaskGetTickCount>
 8001ae4:	60f8      	str	r0, [r7, #12]

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 8001ae6:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <TaskController+0x300>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f04f 31ff 	mov.w	r1, #4294967295
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00f ffbc 	bl	8011a6c <osMutexWait>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 815f 	bne.w	8001dba <TaskController+0x43e>
				&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK
 8001afc:	4b60      	ldr	r3, [pc, #384]	; (8001c80 <TaskController+0x304>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00f ffb1 	bl	8011a6c <osMutexWait>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 8154 	bne.w	8001dba <TaskController+0x43e>
				&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001b12:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <TaskController+0x308>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00f ffa6 	bl	8011a6c <osMutexWait>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 8149 	bne.w	8001dba <TaskController+0x43e>
		{
			if (SWC > 490)
 8001b28:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <TaskController+0x30c>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001b30:	d913      	bls.n	8001b5a <TaskController+0x1de>
			{
				DPID_Roll.outer.integrator = 0.0f;
 8001b32:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <TaskController+0x2d8>)
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Roll.inner.integrator = 0.0f;
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <TaskController+0x2d8>)
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
				DPID_Pitch.outer.integrator = 0.0f;
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <TaskController+0x2f8>)
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	66da      	str	r2, [r3, #108]	; 0x6c
				DPID_Pitch.inner.integrator = 0.0f;
 8001b4a:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <TaskController+0x2f8>)
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
				PID_Yaw.integrator = 0.0f;
 8001b52:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <TaskController+0x2fc>)
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
			}

			if (Tune_single_true_double_false)
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <TaskController+0x310>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80ac 	beq.w	8001cbc <TaskController+0x340>
			{
				DPID_Roll.outer.Kd = VRA / 200.0f;
 8001b64:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <TaskController+0x314>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b70:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001c94 <TaskController+0x318>
 8001b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <TaskController+0x2d8>)
 8001b7a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
				DPID_Roll.inner.Kd = VRB / 1000.0f;
 8001b7e:	4b46      	ldr	r3, [pc, #280]	; (8001c98 <TaskController+0x31c>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8a:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001c9c <TaskController+0x320>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <TaskController+0x2d8>)
 8001b94:	edc3 7a02 	vstr	s15, [r3, #8]

				// Roll
				PIDController_Update(&DPID_Roll.inner, (Roll_in / 10.0f), GyroData[0]);
 8001b98:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <TaskController+0x324>)
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001baa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <TaskController+0x328>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eef0 0a67 	vmov.f32	s1, s15
 8001bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbc:	4825      	ldr	r0, [pc, #148]	; (8001c54 <TaskController+0x2d8>)
 8001bbe:	f7ff fad3 	bl	8001168 <PIDController_Update>
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <TaskController+0x2d8>)
 8001bc4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bcc:	ee17 3a90 	vmov	r3, s15
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <TaskController+0x32c>)
 8001bd4:	801a      	strh	r2, [r3, #0]

				// Pitch
				PIDController_Update(&DPID_Pitch.inner, (Pitch_in / 10.0f), GyroData[1]);
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <TaskController+0x330>)
 8001bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001be8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <TaskController+0x328>)
 8001bee:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bf2:	eef0 0a67 	vmov.f32	s1, s15
 8001bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bfa:	481e      	ldr	r0, [pc, #120]	; (8001c74 <TaskController+0x2f8>)
 8001bfc:	f7ff fab4 	bl	8001168 <PIDController_Update>
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <TaskController+0x2f8>)
 8001c02:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0a:	ee17 3a90 	vmov	r3, s15
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <TaskController+0x334>)
 8001c12:	801a      	strh	r2, [r3, #0]

				// Yaw
				PIDController_Update(&PID_Yaw, (Yaw_in / 10.0f), GyroData[2]);
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <TaskController+0x338>)
 8001c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c22:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <TaskController+0x328>)
 8001c2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c30:	eef0 0a67 	vmov.f32	s1, s15
 8001c34:	eeb0 0a47 	vmov.f32	s0, s14
 8001c38:	480f      	ldr	r0, [pc, #60]	; (8001c78 <TaskController+0x2fc>)
 8001c3a:	f7ff fa95 	bl	8001168 <PIDController_Update>
				Yaw_controlled = (int16_t)(PID_Yaw.out);
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <TaskController+0x2fc>)
 8001c40:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <TaskController+0x33c>)
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	e0b2      	b.n	8001dba <TaskController+0x43e>
 8001c54:	20000218 	.word	0x20000218
 8001c58:	40a00000 	.word	0x40a00000
 8001c5c:	3e19999a 	.word	0x3e19999a
 8001c60:	c2480000 	.word	0xc2480000
 8001c64:	42480000 	.word	0x42480000
 8001c68:	3dcccccd 	.word	0x3dcccccd
 8001c6c:	c3fa0000 	.word	0xc3fa0000
 8001c70:	43fa0000 	.word	0x43fa0000
 8001c74:	200002a0 	.word	0x200002a0
 8001c78:	20000328 	.word	0x20000328
 8001c7c:	20000da4 	.word	0x20000da4
 8001c80:	20000d90 	.word	0x20000d90
 8001c84:	20000d94 	.word	0x20000d94
 8001c88:	2000037e 	.word	0x2000037e
 8001c8c:	2000020d 	.word	0x2000020d
 8001c90:	20000382 	.word	0x20000382
 8001c94:	43480000 	.word	0x43480000
 8001c98:	20000384 	.word	0x20000384
 8001c9c:	447a0000 	.word	0x447a0000
 8001ca0:	2000036e 	.word	0x2000036e
 8001ca4:	2000040c 	.word	0x2000040c
 8001ca8:	20000370 	.word	0x20000370
 8001cac:	20000372 	.word	0x20000372
 8001cb0:	20000374 	.word	0x20000374
 8001cb4:	20000376 	.word	0x20000376
 8001cb8:	20000378 	.word	0x20000378
			}
			else
			{
				DPID_Roll.outer.Kd = VRA / 200.0f;
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <TaskController+0x460>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001de0 <TaskController+0x464>
 8001ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd0:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <TaskController+0x468>)
 8001cd2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
				DPID_Roll.inner.Kd = VRB / 1000.0f;
 8001cd6:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <TaskController+0x46c>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce2:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001dec <TaskController+0x470>
 8001ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <TaskController+0x468>)
 8001cec:	edc3 7a02 	vstr	s15, [r3, #8]

				// Roll
				//DoublePIDController_Update(&DPID_Roll, (Roll_in / 25.0f), Fusion_output.angle.roll, GyroData[0]);
				DoublePIDController_Update(&DPID_Roll, (SWD / 70.0f), Fusion_output.angle.roll, GyroData[0]);
 8001cf0:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <TaskController+0x474>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001df4 <TaskController+0x478>
 8001d00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d04:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <TaskController+0x47c>)
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <TaskController+0x480>)
 8001d0c:	edd3 6a00 	vldr	s13, [r3]
 8001d10:	eeb0 1a66 	vmov.f32	s2, s13
 8001d14:	eef0 0a67 	vmov.f32	s1, s15
 8001d18:	eeb0 0a47 	vmov.f32	s0, s14
 8001d1c:	4831      	ldr	r0, [pc, #196]	; (8001de4 <TaskController+0x468>)
 8001d1e:	f7ff fb59 	bl	80013d4 <DoublePIDController_Update>
				Roll_controlled = (int16_t)(DPID_Roll.inner.out);
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <TaskController+0x468>)
 8001d24:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2c:	ee17 3a90 	vmov	r3, s15
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <TaskController+0x484>)
 8001d34:	801a      	strh	r2, [r3, #0]

				// Pitch
				//DoublePIDController_Update(&DPID_Pitch, (Pitch_in / 25.0f), Fusion_output.angle.pitch, GyroData[1]);
				DoublePIDController_Update(&DPID_Pitch, (SWD / 70.0f), Fusion_output.angle.pitch, GyroData[1]);
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <TaskController+0x474>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d42:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001df4 <TaskController+0x478>
 8001d46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <TaskController+0x47c>)
 8001d4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <TaskController+0x480>)
 8001d52:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d56:	eeb0 1a66 	vmov.f32	s2, s13
 8001d5a:	eef0 0a67 	vmov.f32	s1, s15
 8001d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d62:	4828      	ldr	r0, [pc, #160]	; (8001e04 <TaskController+0x488>)
 8001d64:	f7ff fb36 	bl	80013d4 <DoublePIDController_Update>
				Pitch_controlled = (int16_t)(DPID_Pitch.inner.out);
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <TaskController+0x488>)
 8001d6a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d72:	ee17 3a90 	vmov	r3, s15
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <TaskController+0x48c>)
 8001d7a:	801a      	strh	r2, [r3, #0]

				// Yaw
				PIDController_Update(&PID_Yaw, (Yaw_in / 10.0f), GyroData[2]);
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <TaskController+0x490>)
 8001d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <TaskController+0x480>)
 8001d94:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d98:	eef0 0a67 	vmov.f32	s1, s15
 8001d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001da0:	481b      	ldr	r0, [pc, #108]	; (8001e10 <TaskController+0x494>)
 8001da2:	f7ff f9e1 	bl	8001168 <PIDController_Update>
				Yaw_controlled = (int16_t)(PID_Yaw.out);
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <TaskController+0x494>)
 8001da8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001db0:	ee17 3a90 	vmov	r3, s15
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <TaskController+0x498>)
 8001db8:	801a      	strh	r2, [r3, #0]
			}
		}
		osMutexRelease(ControllerMutexHandle);
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <TaskController+0x49c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00f fea2 	bl	8011b08 <osMutexRelease>
		osMutexRelease(RemoteDataMutexHandle);
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <TaskController+0x4a0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00f fe9d 	bl	8011b08 <osMutexRelease>
		osMutexRelease(ImuMutexHandle);
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <TaskController+0x4a4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00f fe98 	bl	8011b08 <osMutexRelease>
	{
 8001dd8:	e67c      	b.n	8001ad4 <TaskController+0x158>
 8001dda:	bf00      	nop
 8001ddc:	20000382 	.word	0x20000382
 8001de0:	43480000 	.word	0x43480000
 8001de4:	20000218 	.word	0x20000218
 8001de8:	20000384 	.word	0x20000384
 8001dec:	447a0000 	.word	0x447a0000
 8001df0:	20000380 	.word	0x20000380
 8001df4:	428c0000 	.word	0x428c0000
 8001df8:	20000424 	.word	0x20000424
 8001dfc:	2000040c 	.word	0x2000040c
 8001e00:	20000370 	.word	0x20000370
 8001e04:	200002a0 	.word	0x200002a0
 8001e08:	20000374 	.word	0x20000374
 8001e0c:	20000376 	.word	0x20000376
 8001e10:	20000328 	.word	0x20000328
 8001e14:	20000378 	.word	0x20000378
 8001e18:	20000da4 	.word	0x20000da4
 8001e1c:	20000d90 	.word	0x20000d90
 8001e20:	20000d94 	.word	0x20000d94

08001e24 <TaskDiagnostics>:
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskDiagnostics(void const *argument)
{
 8001e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e28:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8001e2c:	af14      	add	r7, sp, #80	; 0x50
 8001e2e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e32:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001e36:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5; //Hz
 8001e38:	2305      	movs	r3, #5
 8001e3a:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e42:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	char UARTstr[512];
	uint8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (uint8_t)('i');
 8001e4e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e52:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001e56:	2269      	movs	r2, #105	; 0x69
 8001e58:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 8001e5a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e5e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001e62:	2266      	movs	r2, #102	; 0x66
 8001e64:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 8001e66:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001e6a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001e6e:	2267      	movs	r2, #103	; 0x67
 8001e70:	701a      	strb	r2, [r3, #0]

	xLastWakeTime = xTaskGetTickCount();
 8001e72:	f011 f993 	bl	801319c <xTaskGetTickCount>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001e7c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001e80:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8001e84:	4618      	mov	r0, r3
 8001e86:	f010 ffb5 	bl	8012df4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001e8a:	f011 f987 	bl	801319c <xTaskGetTickCount>
 8001e8e:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c

		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001e92:	4bc3      	ldr	r3, [pc, #780]	; (80021a0 <TaskDiagnostics+0x37c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00f fde6 	bl	8011a6c <osMutexWait>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 811d 	bne.w	80020e2 <TaskDiagnostics+0x2be>
		{
			uint16_t Throttle1 = (uint16_t)(TIM1->CCR1-1000);
 8001ea8:	4bbe      	ldr	r3, [pc, #760]	; (80021a4 <TaskDiagnostics+0x380>)
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001eb8:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001ebc:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle2 = (uint16_t)(TIM1->CCR2-1000);
 8001ebe:	4bb9      	ldr	r3, [pc, #740]	; (80021a4 <TaskDiagnostics+0x380>)
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001ece:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001ed2:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle3 = (uint16_t)(TIM1->CCR3-1000);
 8001ed4:	4bb3      	ldr	r3, [pc, #716]	; (80021a4 <TaskDiagnostics+0x380>)
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001ee4:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001ee8:	801a      	strh	r2, [r3, #0]
			uint16_t Throttle4 = (uint16_t)(TIM1->CCR4-1000);
 8001eea:	4bae      	ldr	r3, [pc, #696]	; (80021a4 <TaskDiagnostics+0x380>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001efa:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001efe:	801a      	strh	r2, [r3, #0]

			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, Throttle1, Throttle2, Throttle3, Throttle4);
 8001f00:	4ba9      	ldr	r3, [pc, #676]	; (80021a8 <TaskDiagnostics+0x384>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	461c      	mov	r4, r3
 8001f06:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f0a:	f2a3 23d2 	subw	r3, r3, #722	; 0x2d2
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	461d      	mov	r5, r3
 8001f12:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f16:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f22:	f2a3 23d6 	subw	r3, r3, #726	; 0x2d6
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001f2e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f38:	9302      	str	r3, [sp, #8]
 8001f3a:	9101      	str	r1, [sp, #4]
 8001f3c:	9200      	str	r2, [sp, #0]
 8001f3e:	462b      	mov	r3, r5
 8001f40:	4622      	mov	r2, r4
 8001f42:	499a      	ldr	r1, [pc, #616]	; (80021ac <TaskDiagnostics+0x388>)
 8001f44:	f004 fc4e 	bl	80067e4 <sprintf_>
			Uint16ToUint8s(&Throttle_in, SpiIntData, 1);
 8001f48:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4895      	ldr	r0, [pc, #596]	; (80021a8 <TaskDiagnostics+0x384>)
 8001f52:	f7ff fc32 	bl	80017ba <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle1, SpiIntData, 3);
 8001f56:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f5a:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fc2a 	bl	80017ba <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle2, SpiIntData, 5);
 8001f66:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f6e:	2205      	movs	r2, #5
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fc22 	bl	80017ba <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle3, SpiIntData, 7);
 8001f76:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f7a:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc1a 	bl	80017ba <Uint16ToUint8s>
			Uint16ToUint8s(&Throttle4, SpiIntData, 9);
 8001f86:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f8e:	2209      	movs	r2, #9
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc12 	bl	80017ba <Uint16ToUint8s>

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 8001f96:	4b86      	ldr	r3, [pc, #536]	; (80021b0 <TaskDiagnostics+0x38c>)
 8001f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001fa0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001fa4:	4983      	ldr	r1, [pc, #524]	; (80021b4 <TaskDiagnostics+0x390>)
 8001fa6:	f004 fc1d 	bl	80067e4 <sprintf_>
			Int16ToUint8s(&Pitch_in, SpiIntData, 11);
 8001faa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fae:	220b      	movs	r2, #11
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	487f      	ldr	r0, [pc, #508]	; (80021b0 <TaskDiagnostics+0x38c>)
 8001fb4:	f7ff fc14 	bl	80017e0 <Int16ToUint8s>

			int16_t Roll_in_devided = Roll_in / 10;
 8001fb8:	4b7f      	ldr	r3, [pc, #508]	; (80021b8 <TaskDiagnostics+0x394>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	4a7f      	ldr	r2, [pc, #508]	; (80021bc <TaskDiagnostics+0x398>)
 8001fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc4:	1092      	asrs	r2, r2, #2
 8001fc6:	17db      	asrs	r3, r3, #31
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fd0:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001fd4:	801a      	strh	r2, [r3, #0]
			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in_devided);
 8001fd6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001fda:	f2a3 23da 	subw	r3, r3, #730	; 0x2da
 8001fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001fe6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001fea:	4975      	ldr	r1, [pc, #468]	; (80021c0 <TaskDiagnostics+0x39c>)
 8001fec:	f004 fbfa 	bl	80067e4 <sprintf_>
			Int16ToUint8s(&Roll_in_devided, SpiIntData, 13);
 8001ff0:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001ff4:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001ff8:	220d      	movs	r2, #13
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fbf0 	bl	80017e0 <Int16ToUint8s>

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 8002000:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <TaskDiagnostics+0x3a0>)
 8002002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002006:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800200a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800200e:	496e      	ldr	r1, [pc, #440]	; (80021c8 <TaskDiagnostics+0x3a4>)
 8002010:	f004 fbe8 	bl	80067e4 <sprintf_>
			Int16ToUint8s(&Yaw_in, SpiIntData, 15);
 8002014:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002018:	220f      	movs	r2, #15
 800201a:	4619      	mov	r1, r3
 800201c:	4869      	ldr	r0, [pc, #420]	; (80021c4 <TaskDiagnostics+0x3a0>)
 800201e:	f7ff fbdf 	bl	80017e0 <Int16ToUint8s>

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8002022:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <TaskDiagnostics+0x3a8>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800202a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800202e:	4968      	ldr	r1, [pc, #416]	; (80021d0 <TaskDiagnostics+0x3ac>)
 8002030:	f004 fbd8 	bl	80067e4 <sprintf_>
			Uint16ToUint8s(&SWA, SpiIntData, 17);
 8002034:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002038:	2211      	movs	r2, #17
 800203a:	4619      	mov	r1, r3
 800203c:	4863      	ldr	r0, [pc, #396]	; (80021cc <TaskDiagnostics+0x3a8>)
 800203e:	f7ff fbbc 	bl	80017ba <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <TaskDiagnostics+0x3b0>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800204a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800204e:	4962      	ldr	r1, [pc, #392]	; (80021d8 <TaskDiagnostics+0x3b4>)
 8002050:	f004 fbc8 	bl	80067e4 <sprintf_>
			Uint16ToUint8s(&SWB, SpiIntData, 19);
 8002054:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002058:	2213      	movs	r2, #19
 800205a:	4619      	mov	r1, r3
 800205c:	485d      	ldr	r0, [pc, #372]	; (80021d4 <TaskDiagnostics+0x3b0>)
 800205e:	f7ff fbac 	bl	80017ba <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 8002062:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <TaskDiagnostics+0x3b8>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800206a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800206e:	495c      	ldr	r1, [pc, #368]	; (80021e0 <TaskDiagnostics+0x3bc>)
 8002070:	f004 fbb8 	bl	80067e4 <sprintf_>
			Uint16ToUint8s(&SWC, SpiIntData, 21);
 8002074:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002078:	2215      	movs	r2, #21
 800207a:	4619      	mov	r1, r3
 800207c:	4857      	ldr	r0, [pc, #348]	; (80021dc <TaskDiagnostics+0x3b8>)
 800207e:	f7ff fb9c 	bl	80017ba <Uint16ToUint8s>

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 8002082:	4b58      	ldr	r3, [pc, #352]	; (80021e4 <TaskDiagnostics+0x3c0>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800208a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800208e:	4956      	ldr	r1, [pc, #344]	; (80021e8 <TaskDiagnostics+0x3c4>)
 8002090:	f004 fba8 	bl	80067e4 <sprintf_>
			Uint16ToUint8s(&SWD, SpiIntData, 23);
 8002094:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002098:	2217      	movs	r2, #23
 800209a:	4619      	mov	r1, r3
 800209c:	4851      	ldr	r0, [pc, #324]	; (80021e4 <TaskDiagnostics+0x3c0>)
 800209e:	f7ff fb8c 	bl	80017ba <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 80020a2:	4b52      	ldr	r3, [pc, #328]	; (80021ec <TaskDiagnostics+0x3c8>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80020aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80020ae:	4950      	ldr	r1, [pc, #320]	; (80021f0 <TaskDiagnostics+0x3cc>)
 80020b0:	f004 fb98 	bl	80067e4 <sprintf_>
			Uint16ToUint8s(&VRA, SpiIntData, 25);
 80020b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020b8:	2219      	movs	r2, #25
 80020ba:	4619      	mov	r1, r3
 80020bc:	484b      	ldr	r0, [pc, #300]	; (80021ec <TaskDiagnostics+0x3c8>)
 80020be:	f7ff fb7c 	bl	80017ba <Uint16ToUint8s>

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 80020c2:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <TaskDiagnostics+0x3d0>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80020ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80020ce:	494a      	ldr	r1, [pc, #296]	; (80021f8 <TaskDiagnostics+0x3d4>)
 80020d0:	f004 fb88 	bl	80067e4 <sprintf_>
			Uint16ToUint8s(&VRB, SpiIntData, 27);
 80020d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020d8:	221b      	movs	r2, #27
 80020da:	4619      	mov	r1, r3
 80020dc:	4845      	ldr	r0, [pc, #276]	; (80021f4 <TaskDiagnostics+0x3d0>)
 80020de:	f7ff fb6c 	bl	80017ba <Uint16ToUint8s>
		}
		osMutexRelease(RemoteDataMutexHandle);
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <TaskDiagnostics+0x37c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00f fd0e 	bl	8011b08 <osMutexRelease>

		if (IsImuAvailable)
 80020ec:	4b43      	ldr	r3, [pc, #268]	; (80021fc <TaskDiagnostics+0x3d8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8127 	beq.w	8002344 <TaskDiagnostics+0x520>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80020f6:	4b42      	ldr	r3, [pc, #264]	; (8002200 <TaskDiagnostics+0x3dc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f04f 31ff 	mov.w	r1, #4294967295
 80020fe:	4618      	mov	r0, r3
 8002100:	f00f fcb4 	bl	8011a6c <osMutexWait>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 8117 	bne.w	800233a <TaskDiagnostics+0x516>
			{
				sprintf(UARTstr,
 800210c:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <TaskDiagnostics+0x3e0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fa41 	bl	8000598 <__aeabi_f2d>
 8002116:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 800211a:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <TaskDiagnostics+0x3e4>)
 800211c:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa3a 	bl	8000598 <__aeabi_f2d>
 8002124:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 8002128:	4b37      	ldr	r3, [pc, #220]	; (8002208 <TaskDiagnostics+0x3e4>)
 800212a:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa33 	bl	8000598 <__aeabi_f2d>
 8002132:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <TaskDiagnostics+0x3e4>)
 8002138:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fa2c 	bl	8000598 <__aeabi_f2d>
 8002140:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 8002144:	4b31      	ldr	r3, [pc, #196]	; (800220c <TaskDiagnostics+0x3e8>)
 8002146:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fa25 	bl	8000598 <__aeabi_f2d>
 800214e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 8002152:	4b2e      	ldr	r3, [pc, #184]	; (800220c <TaskDiagnostics+0x3e8>)
 8002154:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fa1e 	bl	8000598 <__aeabi_f2d>
 800215c:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 8002160:	4b2a      	ldr	r3, [pc, #168]	; (800220c <TaskDiagnostics+0x3e8>)
 8002162:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fa17 	bl	8000598 <__aeabi_f2d>
 800216a:	4682      	mov	sl, r0
 800216c:	468b      	mov	fp, r1
 800216e:	4b28      	ldr	r3, [pc, #160]	; (8002210 <TaskDiagnostics+0x3ec>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fa10 	bl	8000598 <__aeabi_f2d>
 8002178:	4680      	mov	r8, r0
 800217a:	4689      	mov	r9, r1
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <TaskDiagnostics+0x3f0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fa09 	bl	8000598 <__aeabi_f2d>
 8002186:	4604      	mov	r4, r0
 8002188:	460d      	mov	r5, r1
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <TaskDiagnostics+0x3f4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fa02 	bl	8000598 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800219c:	e03e      	b.n	800221c <TaskDiagnostics+0x3f8>
 800219e:	bf00      	nop
 80021a0:	20000d90 	.word	0x20000d90
 80021a4:	40010000 	.word	0x40010000
 80021a8:	2000036c 	.word	0x2000036c
 80021ac:	0801ba18 	.word	0x0801ba18
 80021b0:	20000372 	.word	0x20000372
 80021b4:	0801ba38 	.word	0x0801ba38
 80021b8:	2000036e 	.word	0x2000036e
 80021bc:	66666667 	.word	0x66666667
 80021c0:	0801ba48 	.word	0x0801ba48
 80021c4:	20000376 	.word	0x20000376
 80021c8:	0801ba58 	.word	0x0801ba58
 80021cc:	2000037a 	.word	0x2000037a
 80021d0:	0801ba64 	.word	0x0801ba64
 80021d4:	2000037c 	.word	0x2000037c
 80021d8:	0801ba70 	.word	0x0801ba70
 80021dc:	2000037e 	.word	0x2000037e
 80021e0:	0801ba7c 	.word	0x0801ba7c
 80021e4:	20000380 	.word	0x20000380
 80021e8:	0801ba88 	.word	0x0801ba88
 80021ec:	20000382 	.word	0x20000382
 80021f0:	0801ba94 	.word	0x0801ba94
 80021f4:	20000384 	.word	0x20000384
 80021f8:	0801baa0 	.word	0x0801baa0
 80021fc:	20000214 	.word	0x20000214
 8002200:	20000d94 	.word	0x20000d94
 8002204:	20000408 	.word	0x20000408
 8002208:	200003fc 	.word	0x200003fc
 800220c:	2000040c 	.word	0x2000040c
 8002210:	20000418 	.word	0x20000418
 8002214:	2000041c 	.word	0x2000041c
 8002218:	20000420 	.word	0x20000420
 800221c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002220:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8002224:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8002228:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800222c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8002230:	ed97 7b00 	vldr	d7, [r7]
 8002234:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002238:	ed97 7b02 	vldr	d7, [r7, #8]
 800223c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002240:	ed97 7b04 	vldr	d7, [r7, #16]
 8002244:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002248:	ed97 7b06 	vldr	d7, [r7, #24]
 800224c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002250:	ed97 7b08 	vldr	d7, [r7, #32]
 8002254:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002258:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800225c:	ed8d 7b00 	vstr	d7, [sp]
 8002260:	460a      	mov	r2, r1
 8002262:	4998      	ldr	r1, [pc, #608]	; (80024c4 <TaskDiagnostics+0x6a0>)
 8002264:	f004 fabe 	bl	80067e4 <sprintf_>
						Roll_measured, Pitch_measured, Yaw_measured);
				FloatToUint8s(&TempData, SpiFloatData1, 1);
 8002268:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800226c:	2201      	movs	r2, #1
 800226e:	4619      	mov	r1, r3
 8002270:	4895      	ldr	r0, [pc, #596]	; (80024c8 <TaskDiagnostics+0x6a4>)
 8002272:	f7ff fa7d 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(AccData, SpiFloatData1, 5);
 8002276:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800227a:	2205      	movs	r2, #5
 800227c:	4619      	mov	r1, r3
 800227e:	4893      	ldr	r0, [pc, #588]	; (80024cc <TaskDiagnostics+0x6a8>)
 8002280:	f7ff fa76 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(AccData+1, SpiFloatData1, 9);
 8002284:	4892      	ldr	r0, [pc, #584]	; (80024d0 <TaskDiagnostics+0x6ac>)
 8002286:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800228a:	2209      	movs	r2, #9
 800228c:	4619      	mov	r1, r3
 800228e:	f7ff fa6f 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(AccData+2, SpiFloatData1, 13);
 8002292:	4890      	ldr	r0, [pc, #576]	; (80024d4 <TaskDiagnostics+0x6b0>)
 8002294:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002298:	220d      	movs	r2, #13
 800229a:	4619      	mov	r1, r3
 800229c:	f7ff fa68 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(GyroData, SpiFloatData1, 17);
 80022a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022a4:	2211      	movs	r2, #17
 80022a6:	4619      	mov	r1, r3
 80022a8:	488b      	ldr	r0, [pc, #556]	; (80024d8 <TaskDiagnostics+0x6b4>)
 80022aa:	f7ff fa61 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(GyroData+1, SpiFloatData1, 21);
 80022ae:	488b      	ldr	r0, [pc, #556]	; (80024dc <TaskDiagnostics+0x6b8>)
 80022b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022b4:	2215      	movs	r2, #21
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7ff fa5a 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(GyroData+2, SpiFloatData1, 25);
 80022bc:	4888      	ldr	r0, [pc, #544]	; (80024e0 <TaskDiagnostics+0x6bc>)
 80022be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022c2:	2219      	movs	r2, #25
 80022c4:	4619      	mov	r1, r3
 80022c6:	f7ff fa53 	bl	8001770 <FloatToUint8s>

				sprintf(UARTstr,
 80022ca:	4b86      	ldr	r3, [pc, #536]	; (80024e4 <TaskDiagnostics+0x6c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f962 	bl	8000598 <__aeabi_f2d>
 80022d4:	4604      	mov	r4, r0
 80022d6:	460d      	mov	r5, r1
 80022d8:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <TaskDiagnostics+0x6c4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f95b 	bl	8000598 <__aeabi_f2d>
 80022e2:	4680      	mov	r8, r0
 80022e4:	4689      	mov	r9, r1
 80022e6:	4b81      	ldr	r3, [pc, #516]	; (80024ec <TaskDiagnostics+0x6c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f954 	bl	8000598 <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80022f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80022fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002300:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002304:	e9cd 4500 	strd	r4, r5, [sp]
 8002308:	460a      	mov	r2, r1
 800230a:	4979      	ldr	r1, [pc, #484]	; (80024f0 <TaskDiagnostics+0x6cc>)
 800230c:	f004 fa6a 	bl	80067e4 <sprintf_>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				FloatToUint8s(&BMP_Temp, SpiFloatData1, 29);
 8002310:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002314:	221d      	movs	r2, #29
 8002316:	4619      	mov	r1, r3
 8002318:	4872      	ldr	r0, [pc, #456]	; (80024e4 <TaskDiagnostics+0x6c0>)
 800231a:	f7ff fa29 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&BMP_Pres, SpiFloatData1, 33);
 800231e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002322:	2221      	movs	r2, #33	; 0x21
 8002324:	4619      	mov	r1, r3
 8002326:	4870      	ldr	r0, [pc, #448]	; (80024e8 <TaskDiagnostics+0x6c4>)
 8002328:	f7ff fa22 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&BMP_Alt, SpiFloatData1, 37);
 800232c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002330:	2225      	movs	r2, #37	; 0x25
 8002332:	4619      	mov	r1, r3
 8002334:	486d      	ldr	r0, [pc, #436]	; (80024ec <TaskDiagnostics+0x6c8>)
 8002336:	f7ff fa1b 	bl	8001770 <FloatToUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 800233a:	4b6e      	ldr	r3, [pc, #440]	; (80024f4 <TaskDiagnostics+0x6d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f00f fbe2 	bl	8011b08 <osMutexRelease>
		}

		if (IsMagnAvailable)
 8002344:	4b6c      	ldr	r3, [pc, #432]	; (80024f8 <TaskDiagnostics+0x6d4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d056      	beq.n	80023fa <TaskDiagnostics+0x5d6>
		{
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 800234c:	4b6b      	ldr	r3, [pc, #428]	; (80024fc <TaskDiagnostics+0x6d8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	4618      	mov	r0, r3
 8002356:	f00f fb89 	bl	8011a6c <osMutexWait>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d147      	bne.n	80023f0 <TaskDiagnostics+0x5cc>
			{
				sprintf(UARTstr,
 8002360:	4b67      	ldr	r3, [pc, #412]	; (8002500 <TaskDiagnostics+0x6dc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f917 	bl	8000598 <__aeabi_f2d>
 800236a:	4604      	mov	r4, r0
 800236c:	460d      	mov	r5, r1
 800236e:	4b65      	ldr	r3, [pc, #404]	; (8002504 <TaskDiagnostics+0x6e0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f910 	bl	8000598 <__aeabi_f2d>
 8002378:	4680      	mov	r8, r0
 800237a:	4689      	mov	r9, r1
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <TaskDiagnostics+0x6e4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f909 	bl	8000598 <__aeabi_f2d>
 8002386:	4682      	mov	sl, r0
 8002388:	468b      	mov	fp, r1
 800238a:	4b60      	ldr	r3, [pc, #384]	; (800250c <TaskDiagnostics+0x6e8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f902 	bl	8000598 <__aeabi_f2d>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800239c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80023a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80023a4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80023a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023ac:	e9cd 4500 	strd	r4, r5, [sp]
 80023b0:	460a      	mov	r2, r1
 80023b2:	4957      	ldr	r1, [pc, #348]	; (8002510 <TaskDiagnostics+0x6ec>)
 80023b4:	f004 fa16 	bl	80067e4 <sprintf_>
						"%sMAG_X_RAW: %.4f\r\nMAG_Y_RAW: %.4f\r\nMAG_Z_RAW: %.4f\r\ndir: %.4f\r\n",
						UARTstr,
						MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW, MAG_dir);
				FloatToUint8s(&MAG_X_RAW, SpiFloatData1, 41);
 80023b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023bc:	2229      	movs	r2, #41	; 0x29
 80023be:	4619      	mov	r1, r3
 80023c0:	484f      	ldr	r0, [pc, #316]	; (8002500 <TaskDiagnostics+0x6dc>)
 80023c2:	f7ff f9d5 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&MAG_Y_RAW, SpiFloatData1, 45);
 80023c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023ca:	222d      	movs	r2, #45	; 0x2d
 80023cc:	4619      	mov	r1, r3
 80023ce:	484d      	ldr	r0, [pc, #308]	; (8002504 <TaskDiagnostics+0x6e0>)
 80023d0:	f7ff f9ce 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&MAG_Z_RAW, SpiFloatData1, 49);
 80023d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023d8:	2231      	movs	r2, #49	; 0x31
 80023da:	4619      	mov	r1, r3
 80023dc:	484a      	ldr	r0, [pc, #296]	; (8002508 <TaskDiagnostics+0x6e4>)
 80023de:	f7ff f9c7 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&MAG_dir, SpiFloatData1, 53);
 80023e2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023e6:	2235      	movs	r2, #53	; 0x35
 80023e8:	4619      	mov	r1, r3
 80023ea:	4848      	ldr	r0, [pc, #288]	; (800250c <TaskDiagnostics+0x6e8>)
 80023ec:	f7ff f9c0 	bl	8001770 <FloatToUint8s>
			}
			osMutexRelease(MagnMutexHandle);
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <TaskDiagnostics+0x6d8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00f fb87 	bl	8011b08 <osMutexRelease>
		}

		if (IsDistAvailable)
 80023fa:	4b46      	ldr	r3, [pc, #280]	; (8002514 <TaskDiagnostics+0x6f0>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d026      	beq.n	8002450 <TaskDiagnostics+0x62c>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8002402:	4b45      	ldr	r3, [pc, #276]	; (8002518 <TaskDiagnostics+0x6f4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f04f 31ff 	mov.w	r1, #4294967295
 800240a:	4618      	mov	r0, r3
 800240c:	f00f fb2e 	bl	8011a6c <osMutexWait>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d117      	bne.n	8002446 <TaskDiagnostics+0x622>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <TaskDiagnostics+0x6f8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f8bc 	bl	8000598 <__aeabi_f2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002428:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800242c:	e9cd 2300 	strd	r2, r3, [sp]
 8002430:	460a      	mov	r2, r1
 8002432:	493b      	ldr	r1, [pc, #236]	; (8002520 <TaskDiagnostics+0x6fc>)
 8002434:	f004 f9d6 	bl	80067e4 <sprintf_>
				FloatToUint8s(&Distance, SpiFloatData1, 57);
 8002438:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800243c:	2239      	movs	r2, #57	; 0x39
 800243e:	4619      	mov	r1, r3
 8002440:	4836      	ldr	r0, [pc, #216]	; (800251c <TaskDiagnostics+0x6f8>)
 8002442:	f7ff f995 	bl	8001770 <FloatToUint8s>
			}
			osMutexRelease(DistMutexHandle);
 8002446:	4b34      	ldr	r3, [pc, #208]	; (8002518 <TaskDiagnostics+0x6f4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f00f fb5c 	bl	8011b08 <osMutexRelease>
				SpiIntData[32] = (uint8_t)GPS.altitude_unit;
			}
			osMutexRelease(GpsDataMutexHandle);
		}

		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8002450:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002458:	4932      	ldr	r1, [pc, #200]	; (8002524 <TaskDiagnostics+0x700>)
 800245a:	4618      	mov	r0, r3
 800245c:	f004 f9c2 	bl	80067e4 <sprintf_>

		// Sending log info
		if (Diag)
 8002460:	4b31      	ldr	r3, [pc, #196]	; (8002528 <TaskDiagnostics+0x704>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f43f ad09 	beq.w	8001e7c <TaskDiagnostics+0x58>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 800246a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800246e:	4618      	mov	r0, r3
 8002470:	f7fd ff26 	bl	80002c0 <strlen>
 8002474:	4603      	mov	r3, r0
 8002476:	b29a      	uxth	r2, r3
 8002478:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
 8002480:	482a      	ldr	r0, [pc, #168]	; (800252c <TaskDiagnostics+0x708>)
 8002482:	f00d fdbf 	bl	8010004 <HAL_UART_Transmit>

			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8002486:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	4827      	ldr	r0, [pc, #156]	; (8002530 <TaskDiagnostics+0x70c>)
 8002492:	f00b f8d2 	bl	800d63a <HAL_SPI_Transmit>
			osDelay(10);
 8002496:	200a      	movs	r0, #10
 8002498:	f00f fabb 	bl	8011a12 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 800249c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
 80024a4:	2240      	movs	r2, #64	; 0x40
 80024a6:	4822      	ldr	r0, [pc, #136]	; (8002530 <TaskDiagnostics+0x70c>)
 80024a8:	f00b f8c7 	bl	800d63a <HAL_SPI_Transmit>
			osDelay(10);
 80024ac:	200a      	movs	r0, #10
 80024ae:	f00f fab0 	bl	8011a12 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 80024b2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	481c      	ldr	r0, [pc, #112]	; (8002530 <TaskDiagnostics+0x70c>)
 80024be:	f00b f8bc 	bl	800d63a <HAL_SPI_Transmit>
	{
 80024c2:	e4db      	b.n	8001e7c <TaskDiagnostics+0x58>
 80024c4:	0801baac 	.word	0x0801baac
 80024c8:	20000408 	.word	0x20000408
 80024cc:	200003fc 	.word	0x200003fc
 80024d0:	20000400 	.word	0x20000400
 80024d4:	20000404 	.word	0x20000404
 80024d8:	2000040c 	.word	0x2000040c
 80024dc:	20000410 	.word	0x20000410
 80024e0:	20000414 	.word	0x20000414
 80024e4:	20000460 	.word	0x20000460
 80024e8:	20000464 	.word	0x20000464
 80024ec:	20000468 	.word	0x20000468
 80024f0:	0801bb28 	.word	0x0801bb28
 80024f4:	20000d94 	.word	0x20000d94
 80024f8:	20000215 	.word	0x20000215
 80024fc:	20000d8c 	.word	0x20000d8c
 8002500:	20000484 	.word	0x20000484
 8002504:	20000488 	.word	0x20000488
 8002508:	2000048c 	.word	0x2000048c
 800250c:	20000490 	.word	0x20000490
 8002510:	0801bb5c 	.word	0x0801bb5c
 8002514:	20000216 	.word	0x20000216
 8002518:	20000d9c 	.word	0x20000d9c
 800251c:	200004cc 	.word	0x200004cc
 8002520:	0801bba0 	.word	0x0801bba0
 8002524:	0801bbb8 	.word	0x0801bbb8
 8002528:	20000000 	.word	0x20000000
 800252c:	20000c88 	.word	0x20000c88
 8002530:	20000a18 	.word	0x20000a18

08002534 <ConvertToPwm>:
extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

uint32_t ConvertToPwm(int32_t raw)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	// Norm raw data to 0-1000
	if (raw < 0)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	da02      	bge.n	8002548 <ConvertToPwm+0x14>
		raw = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	e006      	b.n	8002556 <ConvertToPwm+0x22>
	else if (raw > 1000)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800254e:	dd02      	ble.n	8002556 <ConvertToPwm+0x22>
		raw = 1000;
 8002550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002554:	607b      	str	r3, [r7, #4]

	// Add 50, so the range will be 1000-2000
	return (uint32_t)(raw + 1000);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <TaskMotor>:

void TaskMotor(void const *argument)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b08b      	sub	sp, #44	; 0x2c
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8002570:	23c8      	movs	r3, #200	; 0xc8
 8002572:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8002574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002580:	2100      	movs	r1, #0
 8002582:	4879      	ldr	r0, [pc, #484]	; (8002768 <TaskMotor+0x200>)
 8002584:	f00c f840 	bl	800e608 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002588:	2104      	movs	r1, #4
 800258a:	4877      	ldr	r0, [pc, #476]	; (8002768 <TaskMotor+0x200>)
 800258c:	f00c f83c 	bl	800e608 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002590:	2108      	movs	r1, #8
 8002592:	4875      	ldr	r0, [pc, #468]	; (8002768 <TaskMotor+0x200>)
 8002594:	f00c f838 	bl	800e608 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002598:	210c      	movs	r1, #12
 800259a:	4873      	ldr	r0, [pc, #460]	; (8002768 <TaskMotor+0x200>)
 800259c:	f00c f834 	bl	800e608 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 80025a0:	4b72      	ldr	r3, [pc, #456]	; (800276c <TaskMotor+0x204>)
 80025a2:	2232      	movs	r2, #50	; 0x32
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 80025a6:	4b71      	ldr	r3, [pc, #452]	; (800276c <TaskMotor+0x204>)
 80025a8:	2232      	movs	r2, #50	; 0x32
 80025aa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 80025ac:	4b6f      	ldr	r3, [pc, #444]	; (800276c <TaskMotor+0x204>)
 80025ae:	2232      	movs	r2, #50	; 0x32
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 80025b2:	4b6e      	ldr	r3, [pc, #440]	; (800276c <TaskMotor+0x204>)
 80025b4:	2232      	movs	r2, #50	; 0x32
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40

	xLastWakeTime = xTaskGetTickCount();
 80025b8:	f010 fdf0 	bl	801319c <xTaskGetTickCount>
 80025bc:	4603      	mov	r3, r0
 80025be:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	6939      	ldr	r1, [r7, #16]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f010 fc14 	bl	8012df4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80025cc:	f010 fde6 	bl	801319c <xTaskGetTickCount>
 80025d0:	60f8      	str	r0, [r7, #12]

		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <TaskMotor+0x208>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f04f 31ff 	mov.w	r1, #4294967295
 80025da:	4618      	mov	r0, r3
 80025dc:	f00f fa46 	bl	8011a6c <osMutexWait>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 80ba 	bne.w	800275c <TaskMotor+0x1f4>
		{
			// Hardware safety
			if (SWA < 10)
 80025e8:	4b62      	ldr	r3, [pc, #392]	; (8002774 <TaskMotor+0x20c>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d806      	bhi.n	80025fe <TaskMotor+0x96>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 80025f0:	2201      	movs	r2, #1
 80025f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f6:	4860      	ldr	r0, [pc, #384]	; (8002778 <TaskMotor+0x210>)
 80025f8:	f009 f914 	bl	800b824 <HAL_GPIO_WritePin>
 80025fc:	e005      	b.n	800260a <TaskMotor+0xa2>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 80025fe:	2200      	movs	r2, #0
 8002600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002604:	485c      	ldr	r0, [pc, #368]	; (8002778 <TaskMotor+0x210>)
 8002606:	f009 f90d 	bl	800b824 <HAL_GPIO_WritePin>

			// Software safety
			if (SWB < 10)
 800260a:	4b5c      	ldr	r3, [pc, #368]	; (800277c <TaskMotor+0x214>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	2b09      	cmp	r3, #9
 8002610:	d803      	bhi.n	800261a <TaskMotor+0xb2>
				Rotors = false;
 8002612:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <TaskMotor+0x218>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e002      	b.n	8002620 <TaskMotor+0xb8>
			else
				Rotors = true;
 800261a:	4b59      	ldr	r3, [pc, #356]	; (8002780 <TaskMotor+0x218>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]

			// Setting PWM speed
			if (Rotors)
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <TaskMotor+0x218>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8081 	beq.w	800272c <TaskMotor+0x1c4>
				int32_t ESC1_Speed;
				int32_t ESC2_Speed;
				int32_t ESC3_Speed;
				int32_t ESC4_Speed;

				if (Throttle_in > 10)
 800262a:	4b56      	ldr	r3, [pc, #344]	; (8002784 <TaskMotor+0x21c>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	2b0a      	cmp	r3, #10
 8002630:	d95b      	bls.n	80026ea <TaskMotor+0x182>
				{
					if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8002632:	4b55      	ldr	r3, [pc, #340]	; (8002788 <TaskMotor+0x220>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f04f 31ff 	mov.w	r1, #4294967295
 800263a:	4618      	mov	r0, r3
 800263c:	f00f fa16 	bl	8011a6c <osMutexWait>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d14b      	bne.n	80026de <TaskMotor+0x176>
					{
						ESC1_Speed = Throttle_in + Roll_controlled  - (Pitch_in/5); //- (Yaw_in/5);
 8002646:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <TaskMotor+0x21c>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	4b4f      	ldr	r3, [pc, #316]	; (800278c <TaskMotor+0x224>)
 800264e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002652:	441a      	add	r2, r3
 8002654:	4b4e      	ldr	r3, [pc, #312]	; (8002790 <TaskMotor+0x228>)
 8002656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265a:	494e      	ldr	r1, [pc, #312]	; (8002794 <TaskMotor+0x22c>)
 800265c:	fb81 0103 	smull	r0, r1, r1, r3
 8002660:	1049      	asrs	r1, r1, #1
 8002662:	17db      	asrs	r3, r3, #31
 8002664:	1acb      	subs	r3, r1, r3
 8002666:	b21b      	sxth	r3, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
						ESC2_Speed = Throttle_in - Roll_controlled - (Pitch_in/5); //+ (Yaw_in/5);
 800266c:	4b45      	ldr	r3, [pc, #276]	; (8002784 <TaskMotor+0x21c>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b46      	ldr	r3, [pc, #280]	; (800278c <TaskMotor+0x224>)
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	1ad2      	subs	r2, r2, r3
 800267a:	4b45      	ldr	r3, [pc, #276]	; (8002790 <TaskMotor+0x228>)
 800267c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002680:	4944      	ldr	r1, [pc, #272]	; (8002794 <TaskMotor+0x22c>)
 8002682:	fb81 0103 	smull	r0, r1, r1, r3
 8002686:	1049      	asrs	r1, r1, #1
 8002688:	17db      	asrs	r3, r3, #31
 800268a:	1acb      	subs	r3, r1, r3
 800268c:	b21b      	sxth	r3, r3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	623b      	str	r3, [r7, #32]
						ESC3_Speed = Throttle_in - Roll_controlled  + (Pitch_in/5); //- (Yaw_in/5);
 8002692:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <TaskMotor+0x21c>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b3c      	ldr	r3, [pc, #240]	; (800278c <TaskMotor+0x224>)
 800269a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269e:	1ad2      	subs	r2, r2, r3
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <TaskMotor+0x228>)
 80026a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a6:	493b      	ldr	r1, [pc, #236]	; (8002794 <TaskMotor+0x22c>)
 80026a8:	fb81 0103 	smull	r0, r1, r1, r3
 80026ac:	1049      	asrs	r1, r1, #1
 80026ae:	17db      	asrs	r3, r3, #31
 80026b0:	1acb      	subs	r3, r1, r3
 80026b2:	b21b      	sxth	r3, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]
						ESC4_Speed = Throttle_in + Roll_controlled  + (Pitch_in/5); // + (Yaw_in/5);
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <TaskMotor+0x21c>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <TaskMotor+0x224>)
 80026c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c4:	441a      	add	r2, r3
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <TaskMotor+0x228>)
 80026c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026cc:	4931      	ldr	r1, [pc, #196]	; (8002794 <TaskMotor+0x22c>)
 80026ce:	fb81 0103 	smull	r0, r1, r1, r3
 80026d2:	1049      	asrs	r1, r1, #1
 80026d4:	17db      	asrs	r3, r3, #31
 80026d6:	1acb      	subs	r3, r1, r3
 80026d8:	b21b      	sxth	r3, r3
 80026da:	4413      	add	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
					}
					osMutexRelease(ControllerMutexHandle);
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <TaskMotor+0x220>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f00f fa10 	bl	8011b08 <osMutexRelease>
 80026e8:	e007      	b.n	80026fa <TaskMotor+0x192>
				}
				else
				{
					ESC1_Speed = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
					ESC2_Speed = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
					ESC3_Speed = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
					ESC4_Speed = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
				}

				TIM1->CCR1 = ConvertToPwm(ESC1_Speed);
 80026fa:	4c1c      	ldr	r4, [pc, #112]	; (800276c <TaskMotor+0x204>)
 80026fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026fe:	f7ff ff19 	bl	8002534 <ConvertToPwm>
 8002702:	4603      	mov	r3, r0
 8002704:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(ESC2_Speed);
 8002706:	4c19      	ldr	r4, [pc, #100]	; (800276c <TaskMotor+0x204>)
 8002708:	6a38      	ldr	r0, [r7, #32]
 800270a:	f7ff ff13 	bl	8002534 <ConvertToPwm>
 800270e:	4603      	mov	r3, r0
 8002710:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(ESC3_Speed);
 8002712:	4c16      	ldr	r4, [pc, #88]	; (800276c <TaskMotor+0x204>)
 8002714:	69f8      	ldr	r0, [r7, #28]
 8002716:	f7ff ff0d 	bl	8002534 <ConvertToPwm>
 800271a:	4603      	mov	r3, r0
 800271c:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(ESC4_Speed);
 800271e:	4c13      	ldr	r4, [pc, #76]	; (800276c <TaskMotor+0x204>)
 8002720:	69b8      	ldr	r0, [r7, #24]
 8002722:	f7ff ff07 	bl	8002534 <ConvertToPwm>
 8002726:	4603      	mov	r3, r0
 8002728:	6423      	str	r3, [r4, #64]	; 0x40
 800272a:	e017      	b.n	800275c <TaskMotor+0x1f4>
			}
			else
			{
				TIM1->CCR1 = ConvertToPwm(0);
 800272c:	4c0f      	ldr	r4, [pc, #60]	; (800276c <TaskMotor+0x204>)
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff ff00 	bl	8002534 <ConvertToPwm>
 8002734:	4603      	mov	r3, r0
 8002736:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(0);
 8002738:	4c0c      	ldr	r4, [pc, #48]	; (800276c <TaskMotor+0x204>)
 800273a:	2000      	movs	r0, #0
 800273c:	f7ff fefa 	bl	8002534 <ConvertToPwm>
 8002740:	4603      	mov	r3, r0
 8002742:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(0);
 8002744:	4c09      	ldr	r4, [pc, #36]	; (800276c <TaskMotor+0x204>)
 8002746:	2000      	movs	r0, #0
 8002748:	f7ff fef4 	bl	8002534 <ConvertToPwm>
 800274c:	4603      	mov	r3, r0
 800274e:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(0);
 8002750:	4c06      	ldr	r4, [pc, #24]	; (800276c <TaskMotor+0x204>)
 8002752:	2000      	movs	r0, #0
 8002754:	f7ff feee 	bl	8002534 <ConvertToPwm>
 8002758:	4603      	mov	r3, r0
 800275a:	6423      	str	r3, [r4, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <TaskMotor+0x208>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f00f f9d1 	bl	8011b08 <osMutexRelease>
	{
 8002766:	e72b      	b.n	80025c0 <TaskMotor+0x58>
 8002768:	20000ae0 	.word	0x20000ae0
 800276c:	40010000 	.word	0x40010000
 8002770:	20000d90 	.word	0x20000d90
 8002774:	2000037a 	.word	0x2000037a
 8002778:	40021000 	.word	0x40021000
 800277c:	2000037c 	.word	0x2000037c
 8002780:	20000002 	.word	0x20000002
 8002784:	2000036c 	.word	0x2000036c
 8002788:	20000da4 	.word	0x20000da4
 800278c:	20000370 	.word	0x20000370
 8002790:	20000372 	.word	0x20000372
 8002794:	66666667 	.word	0x66666667

08002798 <TaskPower>:
#include "Globals.h"

void TaskPower(void const *argument)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1; //Hz
 80027a0:	2301      	movs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 80027a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	613b      	str	r3, [r7, #16]

	// ...

	xLastWakeTime = xTaskGetTickCount();
 80027b0:	f010 fcf4 	bl	801319c <xTaskGetTickCount>
 80027b4:	4603      	mov	r3, r0
 80027b6:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	6939      	ldr	r1, [r7, #16]
 80027be:	4618      	mov	r0, r3
 80027c0:	f010 fb18 	bl	8012df4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80027c4:	f010 fcea 	bl	801319c <xTaskGetTickCount>
 80027c8:	60f8      	str	r0, [r7, #12]
	{
 80027ca:	e7f5      	b.n	80027b8 <TaskPower+0x20>

080027cc <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50; //Hz
 80027d4:	2332      	movs	r3, #50	; 0x32
 80027d6:	61bb      	str	r3, [r7, #24]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 80027d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	617b      	str	r3, [r7, #20]

	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 80027e4:	2240      	movs	r2, #64	; 0x40
 80027e6:	496b      	ldr	r1, [pc, #428]	; (8002994 <TaskRemote+0x1c8>)
 80027e8:	486b      	ldr	r0, [pc, #428]	; (8002998 <TaskRemote+0x1cc>)
 80027ea:	f00d fcd2 	bl	8010192 <HAL_UART_Receive_DMA>

	xLastWakeTime = xTaskGetTickCount();
 80027ee:	f010 fcd5 	bl	801319c <xTaskGetTickCount>
 80027f2:	4603      	mov	r3, r0
 80027f4:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	while (1)
	{
		//Log("R-WS");
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80027f6:	f107 030c 	add.w	r3, r7, #12
 80027fa:	6979      	ldr	r1, [r7, #20]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f010 faf9 	bl	8012df4 <vTaskDelayUntil>
		//Log("R-WE");

		TickType_t time = xTaskGetTickCount();
 8002802:	f010 fccb 	bl	801319c <xTaskGetTickCount>
 8002806:	6138      	str	r0, [r7, #16]

		//Log("R-RBFS-WS");
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 8002808:	4b64      	ldr	r3, [pc, #400]	; (800299c <TaskRemote+0x1d0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	4618      	mov	r0, r3
 8002812:	f00f f9e1 	bl	8011bd8 <osSemaphoreWait>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ec      	bne.n	80027f6 <TaskRemote+0x2a>
		{
			//Log("R-RBFS-WE");

			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			//Log("R-RBM-WS");
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <TaskRemote+0x1d4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	4618      	mov	r0, r3
 8002826:	f00f f921 	bl	8011a6c <osMutexWait>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d12f      	bne.n	8002890 <TaskRemote+0xc4>
			{
				//Log("R-RBM-WE");

				for (int i = 32; i >= 0; i--)
 8002830:	2320      	movs	r3, #32
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	e024      	b.n	8002880 <TaskRemote+0xb4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <TaskRemote+0x1d8>)
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	d11a      	bne.n	800287a <TaskRemote+0xae>
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3301      	adds	r3, #1
 8002848:	4a56      	ldr	r2, [pc, #344]	; (80029a4 <TaskRemote+0x1d8>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d113      	bne.n	800287a <TaskRemote+0xae>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
 8002856:	e00d      	b.n	8002874 <TaskRemote+0xa8>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 8002858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	4413      	add	r3, r2
 800285e:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <TaskRemote+0x1d8>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	b2d9      	uxtb	r1, r3
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <TaskRemote+0x1dc>)
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	4413      	add	r3, r2
 800286a:	460a      	mov	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	3301      	adds	r3, #1
 8002872:	623b      	str	r3, [r7, #32]
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	2b1f      	cmp	r3, #31
 8002878:	ddee      	ble.n	8002858 <TaskRemote+0x8c>
				for (int i = 32; i >= 0; i--)
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	3b01      	subs	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	2b00      	cmp	r3, #0
 8002884:	dad7      	bge.n	8002836 <TaskRemote+0x6a>
					}
				}

				//Log("R-RBM-RS");
				osMutexRelease(RemoteBufferMutexHandle);
 8002886:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <TaskRemote+0x1d4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f00f f93c 	bl	8011b08 <osMutexRelease>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	e018      	b.n	80028c8 <TaskRemote+0xfc>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	3303      	adds	r3, #3
 800289c:	4a42      	ldr	r2, [pc, #264]	; (80029a8 <TaskRemote+0x1dc>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	3301      	adds	r3, #1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	493e      	ldr	r1, [pc, #248]	; (80029a8 <TaskRemote+0x1dc>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	b299      	uxth	r1, r3
 80028ba:	4a3c      	ldr	r2, [pc, #240]	; (80029ac <TaskRemote+0x1e0>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	dde3      	ble.n	8002896 <TaskRemote+0xca>

			// Setting the speed
			//Log("R-RDM-WS");
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <TaskRemote+0x1e4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f04f 31ff 	mov.w	r1, #4294967295
 80028d6:	4618      	mov	r0, r3
 80028d8:	f00f f8c8 	bl	8011a6c <osMutexWait>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d151      	bne.n	8002986 <TaskRemote+0x1ba>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = channelValues[THROTTLE_CHANNEL] - 1000;
 80028e2:	4b32      	ldr	r3, [pc, #200]	; (80029ac <TaskRemote+0x1e0>)
 80028e4:	889b      	ldrh	r3, [r3, #4]
 80028e6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <TaskRemote+0x1e8>)
 80028ee:	801a      	strh	r2, [r3, #0]
				// Limit input Throttle, so the Controllers can keep the drone stable at high RPM, too
				if (Throttle_in > 800)
 80028f0:	4b30      	ldr	r3, [pc, #192]	; (80029b4 <TaskRemote+0x1e8>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80028f8:	d903      	bls.n	8002902 <TaskRemote+0x136>
					Throttle_in = 800;
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <TaskRemote+0x1e8>)
 80028fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002900:	801a      	strh	r2, [r3, #0]

				Pitch_in = channelValues[PITCH_CHANNEL] - 1500;
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <TaskRemote+0x1e0>)
 8002904:	885b      	ldrh	r3, [r3, #2]
 8002906:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800290a:	b29b      	uxth	r3, r3
 800290c:	b21a      	sxth	r2, r3
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <TaskRemote+0x1ec>)
 8002910:	801a      	strh	r2, [r3, #0]
				Roll_in = channelValues[ROLL_CHANNEL] - 1500;
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <TaskRemote+0x1e0>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800291a:	b29b      	uxth	r3, r3
 800291c:	b21a      	sxth	r2, r3
 800291e:	4b27      	ldr	r3, [pc, #156]	; (80029bc <TaskRemote+0x1f0>)
 8002920:	801a      	strh	r2, [r3, #0]
				Yaw_in = channelValues[YAW_CHANNEL] - 1500;
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <TaskRemote+0x1e0>)
 8002924:	88db      	ldrh	r3, [r3, #6]
 8002926:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800292a:	b29b      	uxth	r3, r3
 800292c:	b21a      	sxth	r2, r3
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <TaskRemote+0x1f4>)
 8002930:	801a      	strh	r2, [r3, #0]

				SWA = channelValues[SWA_CHANNEL] - 1000;
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <TaskRemote+0x1e0>)
 8002934:	891b      	ldrh	r3, [r3, #8]
 8002936:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800293a:	b29a      	uxth	r2, r3
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <TaskRemote+0x1f8>)
 800293e:	801a      	strh	r2, [r3, #0]
				SWB = channelValues[SWB_CHANNEL] - 1000;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <TaskRemote+0x1e0>)
 8002942:	895b      	ldrh	r3, [r3, #10]
 8002944:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002948:	b29a      	uxth	r2, r3
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <TaskRemote+0x1fc>)
 800294c:	801a      	strh	r2, [r3, #0]
				SWC = channelValues[SWC_CHANNEL] - 1000;
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <TaskRemote+0x1e0>)
 8002950:	899b      	ldrh	r3, [r3, #12]
 8002952:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <TaskRemote+0x200>)
 800295a:	801a      	strh	r2, [r3, #0]
				SWD = channelValues[SWD_CHANNEL] - 1000;
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <TaskRemote+0x1e0>)
 800295e:	89db      	ldrh	r3, [r3, #14]
 8002960:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002964:	b29a      	uxth	r2, r3
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <TaskRemote+0x204>)
 8002968:	801a      	strh	r2, [r3, #0]
				VRA = channelValues[VRA_CHANNEL] - 1000;
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <TaskRemote+0x1e0>)
 800296c:	8a1b      	ldrh	r3, [r3, #16]
 800296e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <TaskRemote+0x208>)
 8002976:	801a      	strh	r2, [r3, #0]
				VRB = channelValues[VRB_CHANNEL] - 1000;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <TaskRemote+0x1e0>)
 800297a:	8a5b      	ldrh	r3, [r3, #18]
 800297c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002980:	b29a      	uxth	r2, r3
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <TaskRemote+0x20c>)
 8002984:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);


			}
			//Log("R-RDM-RS");
			osMutexRelease(RemoteDataMutexHandle);
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <TaskRemote+0x1e4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f00f f8bc 	bl	8011b08 <osMutexRelease>
	{
 8002990:	e731      	b.n	80027f6 <TaskRemote+0x2a>
 8002992:	bf00      	nop
 8002994:	200004d0 	.word	0x200004d0
 8002998:	20000c00 	.word	0x20000c00
 800299c:	20000db0 	.word	0x20000db0
 80029a0:	20000da0 	.word	0x20000da0
 80029a4:	20000510 	.word	0x20000510
 80029a8:	20000550 	.word	0x20000550
 80029ac:	20000710 	.word	0x20000710
 80029b0:	20000d90 	.word	0x20000d90
 80029b4:	2000036c 	.word	0x2000036c
 80029b8:	20000372 	.word	0x20000372
 80029bc:	2000036e 	.word	0x2000036e
 80029c0:	20000376 	.word	0x20000376
 80029c4:	2000037a 	.word	0x2000037a
 80029c8:	2000037c 	.word	0x2000037c
 80029cc:	2000037e 	.word	0x2000037e
 80029d0:	20000380 	.word	0x20000380
 80029d4:	20000382 	.word	0x20000382
 80029d8:	20000384 	.word	0x20000384

080029dc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80029e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002a00 <FusionRadiansToDegrees+0x24>
 80029ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80029f2:	eeb0 0a67 	vmov.f32	s0, s15
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	42652ee0 	.word	0x42652ee0

08002a04 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8002a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	d802      	bhi.n	8002a26 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8002a20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002a54 <FusionAsin+0x50>
 8002a24:	e011      	b.n	8002a4a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8002a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	db02      	blt.n	8002a3e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8002a38:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002a58 <FusionAsin+0x54>
 8002a3c:	e005      	b.n	8002a4a <FusionAsin+0x46>
    }
    return asinf(value);
 8002a3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a42:	f016 fdf5 	bl	8019630 <asinf>
 8002a46:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	bfc90fdb 	.word	0xbfc90fdb
 8002a58:	3fc90fdb 	.word	0x3fc90fdb

08002a5c <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b091      	sub	sp, #68	; 0x44
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	eeb0 5a40 	vmov.f32	s10, s0
 8002a66:	eef0 5a60 	vmov.f32	s11, s1
 8002a6a:	eeb0 6a41 	vmov.f32	s12, s2
 8002a6e:	eef0 6a61 	vmov.f32	s13, s3
 8002a72:	eeb0 7a42 	vmov.f32	s14, s4
 8002a76:	eef0 7a62 	vmov.f32	s15, s5
 8002a7a:	ed87 5a07 	vstr	s10, [r7, #28]
 8002a7e:	edc7 5a08 	vstr	s11, [r7, #32]
 8002a82:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002a86:	edc7 6a04 	vstr	s13, [r7, #16]
 8002a8a:	ed87 7a05 	vstr	s14, [r7, #20]
 8002a8e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8002a92:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002a9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8002aa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002aa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002aae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8002ab2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ab6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002abe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8002ac2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ac6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ad0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad6:	ee06 1a90 	vmov	s13, r1
 8002ada:	ee07 2a10 	vmov	s14, r2
 8002ade:	ee07 3a90 	vmov	s15, r3
}
 8002ae2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ae6:	eef0 0a47 	vmov.f32	s1, s14
 8002aea:	eeb0 1a67 	vmov.f32	s2, s15
 8002aee:	3744      	adds	r7, #68	; 0x44
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002af8:	b480      	push	{r7}
 8002afa:	b091      	sub	sp, #68	; 0x44
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	eeb0 5a40 	vmov.f32	s10, s0
 8002b02:	eef0 5a60 	vmov.f32	s11, s1
 8002b06:	eeb0 6a41 	vmov.f32	s12, s2
 8002b0a:	eef0 6a61 	vmov.f32	s13, s3
 8002b0e:	eeb0 7a42 	vmov.f32	s14, s4
 8002b12:	eef0 7a62 	vmov.f32	s15, s5
 8002b16:	ed87 5a07 	vstr	s10, [r7, #28]
 8002b1a:	edc7 5a08 	vstr	s11, [r7, #32]
 8002b1e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002b22:	edc7 6a04 	vstr	s13, [r7, #16]
 8002b26:	ed87 7a05 	vstr	s14, [r7, #20]
 8002b2a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 8002b2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b32:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b36:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002b3a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8002b3e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b46:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002b4a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8002b4e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002b52:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002b5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8002b5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b66:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b72:	ee06 1a90 	vmov	s13, r1
 8002b76:	ee07 2a10 	vmov	s14, r2
 8002b7a:	ee07 3a90 	vmov	s15, r3
}
 8002b7e:	eeb0 0a66 	vmov.f32	s0, s13
 8002b82:	eef0 0a47 	vmov.f32	s1, s14
 8002b86:	eeb0 1a67 	vmov.f32	s2, s15
 8002b8a:	3744      	adds	r7, #68	; 0x44
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8002b94:	b084      	sub	sp, #16
 8002b96:	b480      	push	{r7}
 8002b98:	b08f      	sub	sp, #60	; 0x3c
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8002ba0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002ba4:	eef0 6a40 	vmov.f32	s13, s0
 8002ba8:	eeb0 7a60 	vmov.f32	s14, s1
 8002bac:	eef0 7a41 	vmov.f32	s15, s2
 8002bb0:	edc7 6a05 	vstr	s13, [r7, #20]
 8002bb4:	ed87 7a06 	vstr	s14, [r7, #24]
 8002bb8:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 8002bbc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002bdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002be8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 8002bec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002bf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002bfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c08:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c14:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002c18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 8002c1c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c28:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002c2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c38:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002c3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c44:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002c48:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 8002c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c50:	f107 0220 	add.w	r2, r7, #32
 8002c54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c60:	ee06 1a90 	vmov	s13, r1
 8002c64:	ee07 2a10 	vmov	s14, r2
 8002c68:	ee07 3a90 	vmov	s15, r3
#undef R
}
 8002c6c:	eeb0 0a66 	vmov.f32	s0, s13
 8002c70:	eef0 0a47 	vmov.f32	s1, s14
 8002c74:	eeb0 1a67 	vmov.f32	s2, s15
 8002c78:	373c      	adds	r7, #60	; 0x3c
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	b004      	add	sp, #16
 8002c82:	4770      	bx	lr

08002c84 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b090      	sub	sp, #64	; 0x40
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	eeb0 6a40 	vmov.f32	s12, s0
 8002c8e:	eef0 6a60 	vmov.f32	s13, s1
 8002c92:	eeb0 7a41 	vmov.f32	s14, s2
 8002c96:	eef0 7a61 	vmov.f32	s15, s3
 8002c9a:	ed87 6a04 	vstr	s12, [r7, #16]
 8002c9e:	edc7 6a05 	vstr	s13, [r7, #20]
 8002ca2:	ed87 7a06 	vstr	s14, [r7, #24]
 8002ca6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8002caa:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cae:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cbe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 8002cc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cce:	edd7 6a06 	vldr	s13, [r7, #24]
 8002cd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cda:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002cde:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ce2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf2:	eef0 0a67 	vmov.f32	s1, s15
 8002cf6:	eeb0 0a66 	vmov.f32	s0, s13
 8002cfa:	f016 fcc5 	bl	8019688 <atan2f>
 8002cfe:	eef0 7a40 	vmov.f32	s15, s0
 8002d02:	eeb0 0a67 	vmov.f32	s0, s15
 8002d06:	f7ff fe69 	bl	80029dc <FusionRadiansToDegrees>
 8002d0a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002d0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8002d12:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d16:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d22:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d32:	eeb0 0a67 	vmov.f32	s0, s15
 8002d36:	f7ff fe65 	bl	8002a04 <FusionAsin>
 8002d3a:	eef0 7a40 	vmov.f32	s15, s0
 8002d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d42:	f7ff fe4b 	bl	80029dc <FusionRadiansToDegrees>
 8002d46:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002d4a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 8002d4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d52:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5a:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d66:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002d6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d76:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7e:	eef0 0a67 	vmov.f32	s1, s15
 8002d82:	eeb0 0a66 	vmov.f32	s0, s13
 8002d86:	f016 fc7f 	bl	8019688 <atan2f>
 8002d8a:	eef0 7a40 	vmov.f32	s15, s0
 8002d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d92:	f7ff fe23 	bl	80029dc <FusionRadiansToDegrees>
 8002d96:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8002d9a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8002d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002da2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	ee06 1a90 	vmov	s13, r1
 8002db6:	ee07 2a10 	vmov	s14, r2
 8002dba:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8002dbe:	eeb0 0a66 	vmov.f32	s0, s13
 8002dc2:	eef0 0a47 	vmov.f32	s1, s14
 8002dc6:	eeb0 1a67 	vmov.f32	s2, s15
 8002dca:	3740      	adds	r7, #64	; 0x40
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	b5b0      	push	{r4, r5, r7, lr}
 8002dd4:	b09e      	sub	sp, #120	; 0x78
 8002dd6:	af06      	add	r7, sp, #24
 8002dd8:	eef0 4a41 	vmov.f32	s9, s2
 8002ddc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002de4:	eeb0 5a61 	vmov.f32	s10, s3
 8002de8:	eef0 5a42 	vmov.f32	s11, s4
 8002dec:	eeb0 6a62 	vmov.f32	s12, s5
 8002df0:	eef0 6a43 	vmov.f32	s13, s6
 8002df4:	eeb0 7a63 	vmov.f32	s14, s7
 8002df8:	eef0 7a44 	vmov.f32	s15, s8
 8002dfc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8002e00:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8002e04:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8002e08:	ed87 5a08 	vstr	s10, [r7, #32]
 8002e0c:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8002e10:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8002e14:	edc7 6a05 	vstr	s13, [r7, #20]
 8002e18:	ed87 7a06 	vstr	s14, [r7, #24]
 8002e1c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8002e20:	ed97 5a05 	vldr	s10, [r7, #20]
 8002e24:	edd7 5a06 	vldr	s11, [r7, #24]
 8002e28:	ed97 6a07 	vldr	s12, [r7, #28]
 8002e2c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002e30:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002e34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e38:	eef0 1a45 	vmov.f32	s3, s10
 8002e3c:	eeb0 2a65 	vmov.f32	s4, s11
 8002e40:	eef0 2a46 	vmov.f32	s5, s12
 8002e44:	eeb0 0a66 	vmov.f32	s0, s13
 8002e48:	eef0 0a47 	vmov.f32	s1, s14
 8002e4c:	eeb0 1a67 	vmov.f32	s2, s15
 8002e50:	f7ff fe04 	bl	8002a5c <FusionVectorSubtract>
 8002e54:	eef0 6a40 	vmov.f32	s13, s0
 8002e58:	eeb0 7a60 	vmov.f32	s14, s1
 8002e5c:	eef0 7a41 	vmov.f32	s15, s2
 8002e60:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8002e64:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8002e68:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002e6c:	ed97 5a08 	vldr	s10, [r7, #32]
 8002e70:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8002e74:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8002e78:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002e7c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002e80:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002e84:	eef0 1a45 	vmov.f32	s3, s10
 8002e88:	eeb0 2a65 	vmov.f32	s4, s11
 8002e8c:	eef0 2a46 	vmov.f32	s5, s12
 8002e90:	eeb0 0a66 	vmov.f32	s0, s13
 8002e94:	eef0 0a47 	vmov.f32	s1, s14
 8002e98:	eeb0 1a67 	vmov.f32	s2, s15
 8002e9c:	f7ff fe2c 	bl	8002af8 <FusionVectorHadamardProduct>
 8002ea0:	eef0 6a40 	vmov.f32	s13, s0
 8002ea4:	eeb0 7a60 	vmov.f32	s14, s1
 8002ea8:	eef0 7a41 	vmov.f32	s15, s2
 8002eac:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 8002eb0:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 8002eb4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8002eb8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002ebc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002ec0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ec4:	466d      	mov	r5, sp
 8002ec6:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	602b      	str	r3, [r5, #0]
 8002ed2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ed8:	eeb0 0a66 	vmov.f32	s0, s13
 8002edc:	eef0 0a47 	vmov.f32	s1, s14
 8002ee0:	eeb0 1a67 	vmov.f32	s2, s15
 8002ee4:	f7ff fe56 	bl	8002b94 <FusionMatrixMultiplyVector>
 8002ee8:	eef0 6a40 	vmov.f32	s13, s0
 8002eec:	eeb0 7a60 	vmov.f32	s14, s1
 8002ef0:	eef0 7a41 	vmov.f32	s15, s2
 8002ef4:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8002ef8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8002efc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8002f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f06:	ee06 1a90 	vmov	s13, r1
 8002f0a:	ee07 2a10 	vmov	s14, r2
 8002f0e:	ee07 3a90 	vmov	s15, r3
}
 8002f12:	eeb0 0a66 	vmov.f32	s0, s13
 8002f16:	eef0 0a47 	vmov.f32	s1, s14
 8002f1a:	eeb0 1a67 	vmov.f32	s2, s15
 8002f1e:	3760      	adds	r7, #96	; 0x60
 8002f20:	46bd      	mov	sp, r7
 8002f22:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002f26:	b004      	add	sp, #16
 8002f28:	4770      	bx	lr

08002f2a <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b096      	sub	sp, #88	; 0x58
 8002f30:	af06      	add	r7, sp, #24
 8002f32:	eeb0 5a40 	vmov.f32	s10, s0
 8002f36:	eef0 5a60 	vmov.f32	s11, s1
 8002f3a:	eeb0 6a41 	vmov.f32	s12, s2
 8002f3e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002f42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f46:	eef0 6a61 	vmov.f32	s13, s3
 8002f4a:	eeb0 7a42 	vmov.f32	s14, s4
 8002f4e:	eef0 7a62 	vmov.f32	s15, s5
 8002f52:	ed87 5a07 	vstr	s10, [r7, #28]
 8002f56:	edc7 5a08 	vstr	s11, [r7, #32]
 8002f5a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002f5e:	edc7 6a04 	vstr	s13, [r7, #16]
 8002f62:	ed87 7a05 	vstr	s14, [r7, #20]
 8002f66:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionMatrixMultiplyVector(softIronMatrix, FusionVectorSubtract(uncalibrated, hardIronOffset));
 8002f6a:	ed97 5a04 	vldr	s10, [r7, #16]
 8002f6e:	edd7 5a05 	vldr	s11, [r7, #20]
 8002f72:	ed97 6a06 	vldr	s12, [r7, #24]
 8002f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f82:	eef0 1a45 	vmov.f32	s3, s10
 8002f86:	eeb0 2a65 	vmov.f32	s4, s11
 8002f8a:	eef0 2a46 	vmov.f32	s5, s12
 8002f8e:	eeb0 0a66 	vmov.f32	s0, s13
 8002f92:	eef0 0a47 	vmov.f32	s1, s14
 8002f96:	eeb0 1a67 	vmov.f32	s2, s15
 8002f9a:	f7ff fd5f 	bl	8002a5c <FusionVectorSubtract>
 8002f9e:	eef0 6a40 	vmov.f32	s13, s0
 8002fa2:	eeb0 7a60 	vmov.f32	s14, s1
 8002fa6:	eef0 7a41 	vmov.f32	s15, s2
 8002faa:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8002fae:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8002fb2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8002fb6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002fba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002fbe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002fc2:	466d      	mov	r5, sp
 8002fc4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	602b      	str	r3, [r5, #0]
 8002fd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fd6:	eeb0 0a66 	vmov.f32	s0, s13
 8002fda:	eef0 0a47 	vmov.f32	s1, s14
 8002fde:	eeb0 1a67 	vmov.f32	s2, s15
 8002fe2:	f7ff fdd7 	bl	8002b94 <FusionMatrixMultiplyVector>
 8002fe6:	eef0 6a40 	vmov.f32	s13, s0
 8002fea:	eeb0 7a60 	vmov.f32	s14, s1
 8002fee:	eef0 7a41 	vmov.f32	s15, s2
 8002ff2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8002ff6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8002ffa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	ee06 1a90 	vmov	s13, r1
 8003008:	ee07 2a10 	vmov	s14, r2
 800300c:	ee07 3a90 	vmov	s15, r3
}
 8003010:	eeb0 0a66 	vmov.f32	s0, s13
 8003014:	eef0 0a47 	vmov.f32	s1, s14
 8003018:	eeb0 1a67 	vmov.f32	s2, s15
 800301c:	3740      	adds	r7, #64	; 0x40
 800301e:	46bd      	mov	sp, r7
 8003020:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003024:	b004      	add	sp, #16
 8003026:	4770      	bx	lr

08003028 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	b0e5      	sub	sp, #404	; 0x194
 800302c:	af06      	add	r7, sp, #24
 800302e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003032:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003036:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8003038:	23c8      	movs	r3, #200	; 0xc8
 800303a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 800303e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003042:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	bool Recalibrate = false;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177


	LPF GyroLPF[3];

	GyroLPF[0].T = 1.0 / xFrequency;
 8003054:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8003058:	f7fd fa7c 	bl	8000554 <__aeabi_ui2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	49cd      	ldr	r1, [pc, #820]	; (800339c <TaskSensorData+0x374>)
 8003066:	f7fd fc19 	bl	800089c <__aeabi_ddiv>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	f7fd fde1 	bl	8000c38 <__aeabi_d2f>
 8003076:	4603      	mov	r3, r0
 8003078:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	GyroLPF[0].f_cutoff = 40;
 800307c:	4bc8      	ldr	r3, [pc, #800]	; (80033a0 <TaskSensorData+0x378>)
 800307e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	LPF_Init(&(GyroLPF[0]));
 8003082:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fbbd 	bl	8001806 <LPF_Init>

	GyroLPF[1].T = 1.0 / xFrequency;
 800308c:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8003090:	f7fd fa60 	bl	8000554 <__aeabi_ui2d>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	f04f 0000 	mov.w	r0, #0
 800309c:	49bf      	ldr	r1, [pc, #764]	; (800339c <TaskSensorData+0x374>)
 800309e:	f7fd fbfd 	bl	800089c <__aeabi_ddiv>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fdc5 	bl	8000c38 <__aeabi_d2f>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	GyroLPF[1].f_cutoff = 40;
 80030b4:	4bba      	ldr	r3, [pc, #744]	; (80033a0 <TaskSensorData+0x378>)
 80030b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	LPF_Init(&(GyroLPF[1]));
 80030ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030be:	331c      	adds	r3, #28
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fba0 	bl	8001806 <LPF_Init>

	GyroLPF[2].T = 1.0 / xFrequency;
 80030c6:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 80030ca:	f7fd fa43 	bl	8000554 <__aeabi_ui2d>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	49b1      	ldr	r1, [pc, #708]	; (800339c <TaskSensorData+0x374>)
 80030d8:	f7fd fbe0 	bl	800089c <__aeabi_ddiv>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7fd fda8 	bl	8000c38 <__aeabi_d2f>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	GyroLPF[2].f_cutoff = 40;
 80030ee:	4bac      	ldr	r3, [pc, #688]	; (80033a0 <TaskSensorData+0x378>)
 80030f0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	LPF_Init(&(GyroLPF[2]));
 80030f4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030f8:	3338      	adds	r3, #56	; 0x38
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fb83 	bl	8001806 <LPF_Init>
	// Fusion algorithm

	// Define calibration (replace with actual calibration data if available)
	const FusionMatrix gyroscopeMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector gyroscopeSensitivity = {1.0f, 1.0f, 1.0f};
	const FusionVector gyroscopeOffset = {0.0f, 0.0f, 0.0f};
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	const FusionMatrix accelerometerMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector accelerometerSensitivity = {1.0f, 1.0f, 1.0f};
	const FusionVector accelerometerOffset = {0.0f, 0.0f, 0.0f};
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	const FusionMatrix softIronMatrix = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
	const FusionVector hardIronOffset = {0.0f, 0.0f, 0.0f};
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	// Initialize
	FusionOffset offset;
	FusionAhrs ahrs;

	FusionOffsetInitialise(&offset, xFrequency);
 8003148:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800314c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003150:	4618      	mov	r0, r3
 8003152:	f005 fc73 	bl	8008a3c <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8003156:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800315a:	4618      	mov	r0, r3
 800315c:	f004 fc0c 	bl	8007978 <FusionAhrsInitialise>

	// Set AHRS algorithm settings
	FusionAhrsSettings fusionSettings;
	fusionSettings.convention = FusionConventionNwu;
 8003160:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003164:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
	fusionSettings.gain = 0.5f;
 800316c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003170:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003174:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003178:	605a      	str	r2, [r3, #4]
	fusionSettings.gyroscopeRange = 2000.0f;
 800317a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800317e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003182:	4a88      	ldr	r2, [pc, #544]	; (80033a4 <TaskSensorData+0x37c>)
 8003184:	609a      	str	r2, [r3, #8]
	fusionSettings.accelerationRejection = 10.0f;
 8003186:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800318a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800318e:	4a86      	ldr	r2, [pc, #536]	; (80033a8 <TaskSensorData+0x380>)
 8003190:	60da      	str	r2, [r3, #12]
	fusionSettings.magneticRejection = 10.0f;
 8003192:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003196:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800319a:	4a83      	ldr	r2, [pc, #524]	; (80033a8 <TaskSensorData+0x380>)
 800319c:	611a      	str	r2, [r3, #16]
	fusionSettings.recoveryTriggerPeriod = 5.0f * xFrequency;
 800319e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80031ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b6:	ee17 2a90 	vmov	r2, s15
 80031ba:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80031be:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031c2:	615a      	str	r2, [r3, #20]
	FusionAhrsSetSettings(&ahrs, &fusionSettings);
 80031c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 fc54 	bl	8007a7c <FusionAhrsSetSettings>



	xLastWakeTime = xTaskGetTickCount();
 80031d4:	f00f ffe2 	bl	801319c <xTaskGetTickCount>
 80031d8:	4603      	mov	r3, r0
 80031da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80031de:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80031e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80031e6:	4618      	mov	r0, r3
 80031e8:	f00f fe04 	bl	8012df4 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80031ec:	f00f ffd6 	bl	801319c <xTaskGetTickCount>
 80031f0:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

		// IMU Data
		if (IsImuAvailable)
 80031f4:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <TaskSensorData+0x384>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a4 	beq.w	8003346 <TaskSensorData+0x31e>
		{
			Log("SD-RDM-WS");
 80031fe:	486c      	ldr	r0, [pc, #432]	; (80033b0 <TaskSensorData+0x388>)
 8003200:	f7fe fa8e 	bl	8001720 <Log>
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8003204:	4b6b      	ldr	r3, [pc, #428]	; (80033b4 <TaskSensorData+0x38c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f04f 31ff 	mov.w	r1, #4294967295
 800320c:	4618      	mov	r0, r3
 800320e:	f00e fc2d 	bl	8011a6c <osMutexWait>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <TaskSensorData+0x208>
			{
				Log("SD-RDM-WE");
 8003218:	4867      	ldr	r0, [pc, #412]	; (80033b8 <TaskSensorData+0x390>)
 800321a:	f7fe fa81 	bl	8001720 <Log>
				if (SWC > 990)
 800321e:	4b67      	ldr	r3, [pc, #412]	; (80033bc <TaskSensorData+0x394>)
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	f240 32de 	movw	r2, #990	; 0x3de
 8003226:	4293      	cmp	r3, r2
 8003228:	d902      	bls.n	8003230 <TaskSensorData+0x208>
				{
					Recalibrate = true;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
				}
			}
			Log("SD-RDM-RS");
 8003230:	4863      	ldr	r0, [pc, #396]	; (80033c0 <TaskSensorData+0x398>)
 8003232:	f7fe fa75 	bl	8001720 <Log>
			osMutexRelease(RemoteDataMutexHandle);
 8003236:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <TaskSensorData+0x38c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f00e fc64 	bl	8011b08 <osMutexRelease>
			Log("SD-RDM-RE");
 8003240:	4860      	ldr	r0, [pc, #384]	; (80033c4 <TaskSensorData+0x39c>)
 8003242:	f7fe fa6d 	bl	8001720 <Log>

			//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
			//MPU_readRawData(&hspi2, &MPU9250);
			MPU_readProcessedData(&hspi2, &MPU9250);
 8003246:	4960      	ldr	r1, [pc, #384]	; (80033c8 <TaskSensorData+0x3a0>)
 8003248:	4860      	ldr	r0, [pc, #384]	; (80033cc <TaskSensorData+0x3a4>)
 800324a:	f007 f97d 	bl	800a548 <MPU_readProcessedData>
			//MPU_calcAttitude(&hspi2, &MPU9250);

			BMP280_measure(&BMP280);
 800324e:	4860      	ldr	r0, [pc, #384]	; (80033d0 <TaskSensorData+0x3a8>)
 8003250:	f006 f9ea 	bl	8009628 <BMP280_measure>

			Log("SD-IM-WS");
 8003254:	485f      	ldr	r0, [pc, #380]	; (80033d4 <TaskSensorData+0x3ac>)
 8003256:	f7fe fa63 	bl	8001720 <Log>
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 800325a:	4b5f      	ldr	r3, [pc, #380]	; (80033d8 <TaskSensorData+0x3b0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f04f 31ff 	mov.w	r1, #4294967295
 8003262:	4618      	mov	r0, r3
 8003264:	f00e fc02 	bl	8011a6c <osMutexWait>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d160      	bne.n	8003330 <TaskSensorData+0x308>
			{
				Log("SD-IM-WE");
 800326e:	485b      	ldr	r0, [pc, #364]	; (80033dc <TaskSensorData+0x3b4>)
 8003270:	f7fe fa56 	bl	8001720 <Log>
				if (Recalibrate)
 8003274:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00e      	beq.n	800329a <TaskSensorData+0x272>
				{
					HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 800327c:	f04f 33ff 	mov.w	r3, #4294967295
 8003280:	2210      	movs	r2, #16
 8003282:	4957      	ldr	r1, [pc, #348]	; (80033e0 <TaskSensorData+0x3b8>)
 8003284:	4857      	ldr	r0, [pc, #348]	; (80033e4 <TaskSensorData+0x3bc>)
 8003286:	f00c febd 	bl	8010004 <HAL_UART_Transmit>
					MPU_calibrateGyro(&hspi2, &MPU9250, 20);
 800328a:	2214      	movs	r2, #20
 800328c:	494e      	ldr	r1, [pc, #312]	; (80033c8 <TaskSensorData+0x3a0>)
 800328e:	484f      	ldr	r0, [pc, #316]	; (80033cc <TaskSensorData+0x3a4>)
 8003290:	f006 ff5f 	bl	800a152 <MPU_calibrateGyro>

					Recalibrate = false;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
				}

				AccData[0] = MPU9250.sensorData.ax;
 800329a:	4b4b      	ldr	r3, [pc, #300]	; (80033c8 <TaskSensorData+0x3a0>)
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <TaskSensorData+0x3c0>)
 80032a0:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 80032a2:	4b49      	ldr	r3, [pc, #292]	; (80033c8 <TaskSensorData+0x3a0>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a50      	ldr	r2, [pc, #320]	; (80033e8 <TaskSensorData+0x3c0>)
 80032a8:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <TaskSensorData+0x3a0>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a4e      	ldr	r2, [pc, #312]	; (80033e8 <TaskSensorData+0x3c0>)
 80032b0:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 80032b2:	4b45      	ldr	r3, [pc, #276]	; (80033c8 <TaskSensorData+0x3a0>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	4a4d      	ldr	r2, [pc, #308]	; (80033ec <TaskSensorData+0x3c4>)
 80032b8:	6013      	str	r3, [r2, #0]
				//GyroData[0] = MPU9250.sensorData.gx;
				//GyroData[1] = MPU9250.sensorData.gy;
				//GyroData[2] = MPU9250.sensorData.gz;
				GyroData[0] = LPF_Calculate(&(GyroLPF[0]), MPU9250.sensorData.gx);
 80032ba:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <TaskSensorData+0x3a0>)
 80032bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80032c0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032c4:	eeb0 0a67 	vmov.f32	s0, s15
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fb29 	bl	8001920 <LPF_Calculate>
 80032ce:	eef0 7a40 	vmov.f32	s15, s0
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <TaskSensorData+0x3c8>)
 80032d4:	edc3 7a00 	vstr	s15, [r3]
				GyroData[1] = LPF_Calculate(&(GyroLPF[1]), MPU9250.sensorData.gy);
 80032d8:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <TaskSensorData+0x3a0>)
 80032da:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80032de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032e2:	331c      	adds	r3, #28
 80032e4:	eeb0 0a67 	vmov.f32	s0, s15
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fb19 	bl	8001920 <LPF_Calculate>
 80032ee:	eef0 7a40 	vmov.f32	s15, s0
 80032f2:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <TaskSensorData+0x3c8>)
 80032f4:	edc3 7a01 	vstr	s15, [r3, #4]
				GyroData[2] = LPF_Calculate(&(GyroLPF[2]), MPU9250.sensorData.gz);
 80032f8:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <TaskSensorData+0x3a0>)
 80032fa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80032fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003302:	3338      	adds	r3, #56	; 0x38
 8003304:	eeb0 0a67 	vmov.f32	s0, s15
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fb09 	bl	8001920 <LPF_Calculate>
 800330e:	eef0 7a40 	vmov.f32	s15, s0
 8003312:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <TaskSensorData+0x3c8>)
 8003314:	edc3 7a02 	vstr	s15, [r3, #8]
				//Roll_measured = MPU9250.attitude.roll;
				//Pitch_measured = MPU9250.attitude.pitch;
				//Yaw_measured = MPU9250.attitude.yaw;

				BMP_Temp = BMP280.measurement.temperature;
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <TaskSensorData+0x3a8>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a35      	ldr	r2, [pc, #212]	; (80033f4 <TaskSensorData+0x3cc>)
 800331e:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 8003320:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <TaskSensorData+0x3a8>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	4a34      	ldr	r2, [pc, #208]	; (80033f8 <TaskSensorData+0x3d0>)
 8003326:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 8003328:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <TaskSensorData+0x3a8>)
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	4a33      	ldr	r2, [pc, #204]	; (80033fc <TaskSensorData+0x3d4>)
 800332e:	6013      	str	r3, [r2, #0]

			}
			Log("SD-IM-RS");
 8003330:	4833      	ldr	r0, [pc, #204]	; (8003400 <TaskSensorData+0x3d8>)
 8003332:	f7fe f9f5 	bl	8001720 <Log>
			osMutexRelease(ImuMutexHandle);
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <TaskSensorData+0x3b0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f00e fbe4 	bl	8011b08 <osMutexRelease>
			Log("SD-IM-RE");
 8003340:	4830      	ldr	r0, [pc, #192]	; (8003404 <TaskSensorData+0x3dc>)
 8003342:	f7fe f9ed 	bl	8001720 <Log>
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <TaskSensorData+0x3e0>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8157 	beq.w	80035fe <TaskSensorData+0x5d6>
		{
			Log("SD-MM-WS");
 8003350:	482e      	ldr	r0, [pc, #184]	; (800340c <TaskSensorData+0x3e4>)
 8003352:	f7fe f9e5 	bl	8001720 <Log>
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8003356:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <TaskSensorData+0x3e8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f04f 31ff 	mov.w	r1, #4294967295
 800335e:	4618      	mov	r0, r3
 8003360:	f00e fb84 	bl	8011a6c <osMutexWait>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 813e 	bne.w	80035e8 <TaskSensorData+0x5c0>
			{
				Log("SD-MM-WE");
 800336c:	4829      	ldr	r0, [pc, #164]	; (8003414 <TaskSensorData+0x3ec>)
 800336e:	f7fe f9d7 	bl	8001720 <Log>

				struct Vector res = HMC5883L_readRaw();
 8003372:	f005 fe3b 	bl	8008fec <HMC5883L_readRaw>
 8003376:	eef0 6a40 	vmov.f32	s13, s0
 800337a:	eeb0 7a60 	vmov.f32	s14, s1
 800337e:	eef0 7a41 	vmov.f32	s15, s2
 8003382:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003386:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800338a:	edc3 6a00 	vstr	s13, [r3]
 800338e:	ed83 7a01 	vstr	s14, [r3, #4]
 8003392:	edc3 7a02 	vstr	s15, [r3, #8]
				MAG_X_RAW = res.XAxis;
 8003396:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800339a:	e03d      	b.n	8003418 <TaskSensorData+0x3f0>
 800339c:	3ff00000 	.word	0x3ff00000
 80033a0:	42200000 	.word	0x42200000
 80033a4:	44fa0000 	.word	0x44fa0000
 80033a8:	41200000 	.word	0x41200000
 80033ac:	20000214 	.word	0x20000214
 80033b0:	0801bbc0 	.word	0x0801bbc0
 80033b4:	20000d90 	.word	0x20000d90
 80033b8:	0801bbcc 	.word	0x0801bbcc
 80033bc:	2000037e 	.word	0x2000037e
 80033c0:	0801bbd8 	.word	0x0801bbd8
 80033c4:	0801bbe4 	.word	0x0801bbe4
 80033c8:	20000388 	.word	0x20000388
 80033cc:	20000a7c 	.word	0x20000a7c
 80033d0:	20000430 	.word	0x20000430
 80033d4:	0801bbf0 	.word	0x0801bbf0
 80033d8:	20000d94 	.word	0x20000d94
 80033dc:	0801bbfc 	.word	0x0801bbfc
 80033e0:	0801bc08 	.word	0x0801bc08
 80033e4:	20000c88 	.word	0x20000c88
 80033e8:	200003fc 	.word	0x200003fc
 80033ec:	20000408 	.word	0x20000408
 80033f0:	2000040c 	.word	0x2000040c
 80033f4:	20000460 	.word	0x20000460
 80033f8:	20000464 	.word	0x20000464
 80033fc:	20000468 	.word	0x20000468
 8003400:	0801bc1c 	.word	0x0801bc1c
 8003404:	0801bc28 	.word	0x0801bc28
 8003408:	20000215 	.word	0x20000215
 800340c:	0801bc34 	.word	0x0801bc34
 8003410:	20000d8c 	.word	0x20000d8c
 8003414:	0801bc40 	.word	0x0801bc40
 8003418:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4e      	ldr	r2, [pc, #312]	; (8003558 <TaskSensorData+0x530>)
 8003420:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 8003422:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003426:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a4b      	ldr	r2, [pc, #300]	; (800355c <TaskSensorData+0x534>)
 800342e:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 8003430:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003434:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4a49      	ldr	r2, [pc, #292]	; (8003560 <TaskSensorData+0x538>)
 800343c:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <TaskSensorData+0x534>)
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344c:	d067      	beq.n	800351e <TaskSensorData+0x4f6>
				{
					if (MAG_Y_RAW > 0)
 800344e:	4b43      	ldr	r3, [pc, #268]	; (800355c <TaskSensorData+0x534>)
 8003450:	edd3 7a00 	vldr	s15, [r3]
 8003454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	dd2b      	ble.n	80034b6 <TaskSensorData+0x48e>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 800345e:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <TaskSensorData+0x530>)
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <TaskSensorData+0x534>)
 8003466:	ed93 7a00 	vldr	s14, [r3]
 800346a:	eef0 0a47 	vmov.f32	s1, s14
 800346e:	eeb0 0a67 	vmov.f32	s0, s15
 8003472:	f016 f909 	bl	8019688 <atan2f>
 8003476:	eef0 7a40 	vmov.f32	s15, s0
 800347a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003564 <TaskSensorData+0x53c>
 800347e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003482:	ee17 0a90 	vmov	r0, s15
 8003486:	f7fd f887 	bl	8000598 <__aeabi_f2d>
 800348a:	a32f      	add	r3, pc, #188	; (adr r3, 8003548 <TaskSensorData+0x520>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f7fd fa04 	bl	800089c <__aeabi_ddiv>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	f04f 0000 	mov.w	r0, #0
 800349c:	4932      	ldr	r1, [pc, #200]	; (8003568 <TaskSensorData+0x540>)
 800349e:	f7fc ff1b 	bl	80002d8 <__aeabi_dsub>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	f7fd fbc5 	bl	8000c38 <__aeabi_d2f>
 80034ae:	4603      	mov	r3, r0
 80034b0:	4a2e      	ldr	r2, [pc, #184]	; (800356c <TaskSensorData+0x544>)
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	e067      	b.n	8003586 <TaskSensorData+0x55e>
					else if (MAG_Y_RAW < 0)
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <TaskSensorData+0x534>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	d55f      	bpl.n	8003586 <TaskSensorData+0x55e>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <TaskSensorData+0x530>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	4b23      	ldr	r3, [pc, #140]	; (800355c <TaskSensorData+0x534>)
 80034ce:	ed93 7a00 	vldr	s14, [r3]
 80034d2:	eef0 0a47 	vmov.f32	s1, s14
 80034d6:	eeb0 0a67 	vmov.f32	s0, s15
 80034da:	f016 f8d5 	bl	8019688 <atan2f>
 80034de:	eef0 7a40 	vmov.f32	s15, s0
 80034e2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003564 <TaskSensorData+0x53c>
 80034e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ea:	ee17 0a90 	vmov	r0, s15
 80034ee:	f7fd f853 	bl	8000598 <__aeabi_f2d>
 80034f2:	a315      	add	r3, pc, #84	; (adr r3, 8003548 <TaskSensorData+0x520>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fd f9d0 	bl	800089c <__aeabi_ddiv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	a113      	add	r1, pc, #76	; (adr r1, 8003550 <TaskSensorData+0x528>)
 8003502:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003506:	f7fc fee7 	bl	80002d8 <__aeabi_dsub>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	f7fd fb91 	bl	8000c38 <__aeabi_d2f>
 8003516:	4603      	mov	r3, r0
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <TaskSensorData+0x544>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e033      	b.n	8003586 <TaskSensorData+0x55e>
				}
				else if (MAG_Y_RAW == 0)
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <TaskSensorData+0x534>)
 8003520:	edd3 7a00 	vldr	s15, [r3]
 8003524:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	d12b      	bne.n	8003586 <TaskSensorData+0x55e>
				{
					if (MAG_X_RAW > 0)
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <TaskSensorData+0x530>)
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353c:	dd18      	ble.n	8003570 <TaskSensorData+0x548>
						MAG_dir = 0.0f;
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <TaskSensorData+0x544>)
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e01e      	b.n	8003586 <TaskSensorData+0x55e>
 8003548:	54442d18 	.word	0x54442d18
 800354c:	400921fb 	.word	0x400921fb
 8003550:	00000000 	.word	0x00000000
 8003554:	4070e000 	.word	0x4070e000
 8003558:	20000484 	.word	0x20000484
 800355c:	20000488 	.word	0x20000488
 8003560:	2000048c 	.word	0x2000048c
 8003564:	43340000 	.word	0x43340000
 8003568:	40568000 	.word	0x40568000
 800356c:	20000490 	.word	0x20000490
					else if (MAG_X_RAW < 0)
 8003570:	4bd8      	ldr	r3, [pc, #864]	; (80038d4 <TaskSensorData+0x8ac>)
 8003572:	edd3 7a00 	vldr	s15, [r3]
 8003576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	d502      	bpl.n	8003586 <TaskSensorData+0x55e>
						MAG_dir = 180.0f;
 8003580:	4bd5      	ldr	r3, [pc, #852]	; (80038d8 <TaskSensorData+0x8b0>)
 8003582:	4ad6      	ldr	r2, [pc, #856]	; (80038dc <TaskSensorData+0x8b4>)
 8003584:	601a      	str	r2, [r3, #0]
				}

				MAG_dir += declination;
 8003586:	4bd4      	ldr	r3, [pc, #848]	; (80038d8 <TaskSensorData+0x8b0>)
 8003588:	ed93 7a00 	vldr	s14, [r3]
 800358c:	4bd4      	ldr	r3, [pc, #848]	; (80038e0 <TaskSensorData+0x8b8>)
 800358e:	edd3 7a00 	vldr	s15, [r3]
 8003592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003596:	4bd0      	ldr	r3, [pc, #832]	; (80038d8 <TaskSensorData+0x8b0>)
 8003598:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 800359c:	4bce      	ldr	r3, [pc, #824]	; (80038d8 <TaskSensorData+0x8b0>)
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035aa:	d509      	bpl.n	80035c0 <TaskSensorData+0x598>
					MAG_dir += 360.0f;
 80035ac:	4bca      	ldr	r3, [pc, #808]	; (80038d8 <TaskSensorData+0x8b0>)
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80038e4 <TaskSensorData+0x8bc>
 80035b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ba:	4bc7      	ldr	r3, [pc, #796]	; (80038d8 <TaskSensorData+0x8b0>)
 80035bc:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 80035c0:	4bc5      	ldr	r3, [pc, #788]	; (80038d8 <TaskSensorData+0x8b0>)
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80038e4 <TaskSensorData+0x8bc>
 80035ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	dd09      	ble.n	80035e8 <TaskSensorData+0x5c0>
					MAG_dir -= 360.0f;
 80035d4:	4bc0      	ldr	r3, [pc, #768]	; (80038d8 <TaskSensorData+0x8b0>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80038e4 <TaskSensorData+0x8bc>
 80035de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035e2:	4bbd      	ldr	r3, [pc, #756]	; (80038d8 <TaskSensorData+0x8b0>)
 80035e4:	edc3 7a00 	vstr	s15, [r3]
			}
			Log("SD-MM-RS");
 80035e8:	48bf      	ldr	r0, [pc, #764]	; (80038e8 <TaskSensorData+0x8c0>)
 80035ea:	f7fe f899 	bl	8001720 <Log>
			osMutexRelease(MagnMutexHandle);
 80035ee:	4bbf      	ldr	r3, [pc, #764]	; (80038ec <TaskSensorData+0x8c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f00e fa88 	bl	8011b08 <osMutexRelease>
			Log("SD-MM-RE");
 80035f8:	48bd      	ldr	r0, [pc, #756]	; (80038f0 <TaskSensorData+0x8c8>)
 80035fa:	f7fe f891 	bl	8001720 <Log>
		}

		// Calculate Fusion algorithm
		if ((osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80035fe:	4bbd      	ldr	r3, [pc, #756]	; (80038f4 <TaskSensorData+0x8cc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f04f 31ff 	mov.w	r1, #4294967295
 8003606:	4618      	mov	r0, r3
 8003608:	f00e fa30 	bl	8011a6c <osMutexWait>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 81c3 	bne.w	800399a <TaskSensorData+0x972>
			&& (osMutexWait(MagnMutexHandle, osWaitForever) == osOK))
 8003614:	4bb5      	ldr	r3, [pc, #724]	; (80038ec <TaskSensorData+0x8c4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	4618      	mov	r0, r3
 800361e:	f00e fa25 	bl	8011a6c <osMutexWait>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	f040 81b8 	bne.w	800399a <TaskSensorData+0x972>
		{
			// Acquire latest sensor data
			//const clock_t timestamp = clock(); // replace this with actual gyroscope timestamp

			FusionVector accelerometer = {AccData[0], AccData[1], AccData[2]}; // accelerometer data in g
 800362a:	4bb3      	ldr	r3, [pc, #716]	; (80038f8 <TaskSensorData+0x8d0>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003632:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	4baf      	ldr	r3, [pc, #700]	; (80038f8 <TaskSensorData+0x8d0>)
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003640:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	4bac      	ldr	r3, [pc, #688]	; (80038f8 <TaskSensorData+0x8d0>)
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800364e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003652:	609a      	str	r2, [r3, #8]
			FusionVector gyroscope = {GyroData[0], GyroData[1], GyroData[2]}; // gyroscope data in degrees/s
 8003654:	4ba9      	ldr	r3, [pc, #676]	; (80038fc <TaskSensorData+0x8d4>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800365c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	4ba6      	ldr	r3, [pc, #664]	; (80038fc <TaskSensorData+0x8d4>)
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800366a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	4ba2      	ldr	r3, [pc, #648]	; (80038fc <TaskSensorData+0x8d4>)
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003678:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800367c:	609a      	str	r2, [r3, #8]
			FusionVector magnetometer = {MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW}; // magnetometer data in arbitrary units
 800367e:	4b95      	ldr	r3, [pc, #596]	; (80038d4 <TaskSensorData+0x8ac>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003686:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	4b9c      	ldr	r3, [pc, #624]	; (8003900 <TaskSensorData+0x8d8>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003694:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	4b9a      	ldr	r3, [pc, #616]	; (8003904 <TaskSensorData+0x8dc>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80036a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036a6:	609a      	str	r2, [r3, #8]

			// Apply run-time calibration
			gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 80036a8:	edd7 3a3d 	vldr	s7, [r7, #244]	; 0xf4
 80036ac:	ed97 4a3e 	vldr	s8, [r7, #248]	; 0xf8
 80036b0:	edd7 4a3f 	vldr	s9, [r7, #252]	; 0xfc
 80036b4:	4b94      	ldr	r3, [pc, #592]	; (8003908 <TaskSensorData+0x8e0>)
 80036b6:	ed93 5a00 	vldr	s10, [r3]
 80036ba:	edd3 5a01 	vldr	s11, [r3, #4]
 80036be:	ed93 6a02 	vldr	s12, [r3, #8]
 80036c2:	4e92      	ldr	r6, [pc, #584]	; (800390c <TaskSensorData+0x8e4>)
 80036c4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80036c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80036cc:	edd3 6a00 	vldr	s13, [r3]
 80036d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80036d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80036d8:	466d      	mov	r5, sp
 80036da:	f106 0410 	add.w	r4, r6, #16
 80036de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80036ea:	eeb0 3a63 	vmov.f32	s6, s7
 80036ee:	eef0 3a44 	vmov.f32	s7, s8
 80036f2:	eeb0 4a64 	vmov.f32	s8, s9
 80036f6:	eef0 1a45 	vmov.f32	s3, s10
 80036fa:	eeb0 2a65 	vmov.f32	s4, s11
 80036fe:	eef0 2a46 	vmov.f32	s5, s12
 8003702:	eeb0 0a66 	vmov.f32	s0, s13
 8003706:	eef0 0a47 	vmov.f32	s1, s14
 800370a:	eeb0 1a67 	vmov.f32	s2, s15
 800370e:	f7ff fb5f 	bl	8002dd0 <FusionCalibrationInertial>
 8003712:	eef0 6a40 	vmov.f32	s13, s0
 8003716:	eeb0 7a60 	vmov.f32	s14, s1
 800371a:	eef0 7a41 	vmov.f32	s15, s2
 800371e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003722:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003726:	edc3 6a00 	vstr	s13, [r3]
 800372a:	ed83 7a01 	vstr	s14, [r3, #4]
 800372e:	edc3 7a02 	vstr	s15, [r3, #8]
			accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 8003732:	edd7 3a3a 	vldr	s7, [r7, #232]	; 0xe8
 8003736:	ed97 4a3b 	vldr	s8, [r7, #236]	; 0xec
 800373a:	edd7 4a3c 	vldr	s9, [r7, #240]	; 0xf0
 800373e:	4b74      	ldr	r3, [pc, #464]	; (8003910 <TaskSensorData+0x8e8>)
 8003740:	ed93 5a00 	vldr	s10, [r3]
 8003744:	edd3 5a01 	vldr	s11, [r3, #4]
 8003748:	ed93 6a02 	vldr	s12, [r3, #8]
 800374c:	4e71      	ldr	r6, [pc, #452]	; (8003914 <TaskSensorData+0x8ec>)
 800374e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003752:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003756:	edd3 6a00 	vldr	s13, [r3]
 800375a:	ed93 7a01 	vldr	s14, [r3, #4]
 800375e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003762:	466d      	mov	r5, sp
 8003764:	f106 0410 	add.w	r4, r6, #16
 8003768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800376a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003774:	eeb0 3a63 	vmov.f32	s6, s7
 8003778:	eef0 3a44 	vmov.f32	s7, s8
 800377c:	eeb0 4a64 	vmov.f32	s8, s9
 8003780:	eef0 1a45 	vmov.f32	s3, s10
 8003784:	eeb0 2a65 	vmov.f32	s4, s11
 8003788:	eef0 2a46 	vmov.f32	s5, s12
 800378c:	eeb0 0a66 	vmov.f32	s0, s13
 8003790:	eef0 0a47 	vmov.f32	s1, s14
 8003794:	eeb0 1a67 	vmov.f32	s2, s15
 8003798:	f7ff fb1a 	bl	8002dd0 <FusionCalibrationInertial>
 800379c:	eef0 6a40 	vmov.f32	s13, s0
 80037a0:	eeb0 7a60 	vmov.f32	s14, s1
 80037a4:	eef0 7a41 	vmov.f32	s15, s2
 80037a8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80037ac:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80037b0:	edc3 6a00 	vstr	s13, [r3]
 80037b4:	ed83 7a01 	vstr	s14, [r3, #4]
 80037b8:	edc3 7a02 	vstr	s15, [r3, #8]
			magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 80037bc:	ed97 5a37 	vldr	s10, [r7, #220]	; 0xdc
 80037c0:	edd7 5a38 	vldr	s11, [r7, #224]	; 0xe0
 80037c4:	ed97 6a39 	vldr	s12, [r7, #228]	; 0xe4
 80037c8:	4e53      	ldr	r6, [pc, #332]	; (8003918 <TaskSensorData+0x8f0>)
 80037ca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80037ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80037d2:	edd3 6a00 	vldr	s13, [r3]
 80037d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80037da:	edd3 7a02 	vldr	s15, [r3, #8]
 80037de:	466d      	mov	r5, sp
 80037e0:	f106 0410 	add.w	r4, r6, #16
 80037e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80037f0:	eef0 1a45 	vmov.f32	s3, s10
 80037f4:	eeb0 2a65 	vmov.f32	s4, s11
 80037f8:	eef0 2a46 	vmov.f32	s5, s12
 80037fc:	eeb0 0a66 	vmov.f32	s0, s13
 8003800:	eef0 0a47 	vmov.f32	s1, s14
 8003804:	eeb0 1a67 	vmov.f32	s2, s15
 8003808:	f7ff fb8f 	bl	8002f2a <FusionCalibrationMagnetic>
 800380c:	eef0 6a40 	vmov.f32	s13, s0
 8003810:	eeb0 7a60 	vmov.f32	s14, s1
 8003814:	eef0 7a41 	vmov.f32	s15, s2
 8003818:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800381c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003820:	edc3 6a00 	vstr	s13, [r3]
 8003824:	ed83 7a01 	vstr	s14, [r3, #4]
 8003828:	edc3 7a02 	vstr	s15, [r3, #8]

			// Update gyroscope offset correction algorithm
			gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 800382c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003830:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003834:	edd3 6a00 	vldr	s13, [r3]
 8003838:	ed93 7a01 	vldr	s14, [r3, #4]
 800383c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003840:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003844:	eeb0 0a66 	vmov.f32	s0, s13
 8003848:	eef0 0a47 	vmov.f32	s1, s14
 800384c:	eeb0 1a67 	vmov.f32	s2, s15
 8003850:	4618      	mov	r0, r3
 8003852:	f005 f925 	bl	8008aa0 <FusionOffsetUpdate>
 8003856:	eef0 6a40 	vmov.f32	s13, s0
 800385a:	eeb0 7a60 	vmov.f32	s14, s1
 800385e:	eef0 7a41 	vmov.f32	s15, s2
 8003862:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003866:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800386a:	edc3 6a00 	vstr	s13, [r3]
 800386e:	ed83 7a01 	vstr	s14, [r3, #4]
 8003872:	edc3 7a02 	vstr	s15, [r3, #8]
			//static clock_t previousTimestamp;
			//const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
			//previousTimestamp = timestamp;

			// Update gyroscope AHRS algorithm
			FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, 1.0f / xFrequency);
 8003876:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003886:	eec7 4a27 	vdiv.f32	s9, s14, s15
 800388a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800388e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003892:	ed93 3a00 	vldr	s6, [r3]
 8003896:	edd3 3a01 	vldr	s7, [r3, #4]
 800389a:	ed93 4a02 	vldr	s8, [r3, #8]
 800389e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80038a2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80038a6:	ed93 5a00 	vldr	s10, [r3]
 80038aa:	edd3 5a01 	vldr	s11, [r3, #4]
 80038ae:	ed93 6a02 	vldr	s12, [r3, #8]
 80038b2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80038b6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80038ba:	edd3 6a00 	vldr	s13, [r3]
 80038be:	ed93 7a01 	vldr	s14, [r3, #4]
 80038c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80038c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038ca:	eef0 1a45 	vmov.f32	s3, s10
 80038ce:	eeb0 2a65 	vmov.f32	s4, s11
 80038d2:	e023      	b.n	800391c <TaskSensorData+0x8f4>
 80038d4:	20000484 	.word	0x20000484
 80038d8:	20000490 	.word	0x20000490
 80038dc:	43340000 	.word	0x43340000
 80038e0:	20000004 	.word	0x20000004
 80038e4:	43b40000 	.word	0x43b40000
 80038e8:	0801bc4c 	.word	0x0801bc4c
 80038ec:	20000d8c 	.word	0x20000d8c
 80038f0:	0801bc58 	.word	0x0801bc58
 80038f4:	20000d94 	.word	0x20000d94
 80038f8:	200003fc 	.word	0x200003fc
 80038fc:	2000040c 	.word	0x2000040c
 8003900:	20000488 	.word	0x20000488
 8003904:	2000048c 	.word	0x2000048c
 8003908:	0801bf68 	.word	0x0801bf68
 800390c:	0801bf44 	.word	0x0801bf44
 8003910:	0801bf98 	.word	0x0801bf98
 8003914:	0801bf74 	.word	0x0801bf74
 8003918:	0801bfa4 	.word	0x0801bfa4
 800391c:	eef0 2a46 	vmov.f32	s5, s12
 8003920:	eeb0 0a66 	vmov.f32	s0, s13
 8003924:	eef0 0a47 	vmov.f32	s1, s14
 8003928:	eeb0 1a67 	vmov.f32	s2, s15
 800392c:	4618      	mov	r0, r3
 800392e:	f004 f95d 	bl	8007bec <FusionAhrsUpdate>
			//FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, 1.0f / xFrequency);

			// Algorithm outputs
			Fusion_output = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8003932:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003936:	4618      	mov	r0, r3
 8003938:	f004 ff7c 	bl	8008834 <FusionAhrsGetQuaternion>
 800393c:	eeb0 6a40 	vmov.f32	s12, s0
 8003940:	eef0 6a60 	vmov.f32	s13, s1
 8003944:	eeb0 7a41 	vmov.f32	s14, s2
 8003948:	eef0 7a61 	vmov.f32	s15, s3
 800394c:	ed87 6a56 	vstr	s12, [r7, #344]	; 0x158
 8003950:	edc7 6a57 	vstr	s13, [r7, #348]	; 0x15c
 8003954:	ed87 7a58 	vstr	s14, [r7, #352]	; 0x160
 8003958:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
 800395c:	ed97 6a56 	vldr	s12, [r7, #344]	; 0x158
 8003960:	edd7 6a57 	vldr	s13, [r7, #348]	; 0x15c
 8003964:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 8003968:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 800396c:	eeb0 0a46 	vmov.f32	s0, s12
 8003970:	eef0 0a66 	vmov.f32	s1, s13
 8003974:	eeb0 1a47 	vmov.f32	s2, s14
 8003978:	eef0 1a67 	vmov.f32	s3, s15
 800397c:	f7ff f982 	bl	8002c84 <FusionQuaternionToEuler>
 8003980:	eef0 6a40 	vmov.f32	s13, s0
 8003984:	eeb0 7a60 	vmov.f32	s14, s1
 8003988:	eef0 7a41 	vmov.f32	s15, s2
 800398c:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <TaskSensorData+0xa8c>)
 800398e:	edc3 6a00 	vstr	s13, [r3]
 8003992:	ed83 7a01 	vstr	s14, [r3, #4]
 8003996:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		osMutexRelease(ImuMutexHandle);
 800399a:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <TaskSensorData+0xa90>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f00e f8b2 	bl	8011b08 <osMutexRelease>
		osMutexRelease(MagnMutexHandle);
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <TaskSensorData+0xa94>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f00e f8ad 	bl	8011b08 <osMutexRelease>

		// Distance Data
		if (IsDistAvailable)
 80039ae:	4b44      	ldr	r3, [pc, #272]	; (8003ac0 <TaskSensorData+0xa98>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d046      	beq.n	8003a44 <TaskSensorData+0xa1c>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 80039b6:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <TaskSensorData+0xa9c>)
 80039b8:	7d1b      	ldrb	r3, [r3, #20]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d006      	beq.n	80039d2 <TaskSensorData+0x9aa>
			{
				HCSR04_Trigger(&HCSR04);
 80039c4:	483f      	ldr	r0, [pc, #252]	; (8003ac4 <TaskSensorData+0xa9c>)
 80039c6:	f007 f801 	bl	800a9cc <HCSR04_Trigger>
				HCSR04.Triggered = true;
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <TaskSensorData+0xa9c>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	751a      	strb	r2, [r3, #20]
 80039d0:	e038      	b.n	8003a44 <TaskSensorData+0xa1c>
			}
			else if (HCSR04.Triggered)
 80039d2:	4b3c      	ldr	r3, [pc, #240]	; (8003ac4 <TaskSensorData+0xa9c>)
 80039d4:	7d1b      	ldrb	r3, [r3, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d034      	beq.n	8003a44 <TaskSensorData+0xa1c>
			{
				Log("SD-DS-WS");
 80039da:	483b      	ldr	r0, [pc, #236]	; (8003ac8 <TaskSensorData+0xaa0>)
 80039dc:	f7fd fea0 	bl	8001720 <Log>
				if (osSemaphoreWait(DistSemaphoreHandle, 0) == osOK)
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <TaskSensorData+0xaa4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f00e f8f6 	bl	8011bd8 <osSemaphoreWait>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d128      	bne.n	8003a44 <TaskSensorData+0xa1c>
				{
					Log("SD-DS-WE");
 80039f2:	4837      	ldr	r0, [pc, #220]	; (8003ad0 <TaskSensorData+0xaa8>)
 80039f4:	f7fd fe94 	bl	8001720 <Log>
					Log("SD-DM-WS");
 80039f8:	4836      	ldr	r0, [pc, #216]	; (8003ad4 <TaskSensorData+0xaac>)
 80039fa:	f7fd fe91 	bl	8001720 <Log>
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80039fe:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <TaskSensorData+0xab0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f04f 31ff 	mov.w	r1, #4294967295
 8003a06:	4618      	mov	r0, r3
 8003a08:	f00e f830 	bl	8011a6c <osMutexWait>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <TaskSensorData+0xa00>
					{
						Log("SD-DM-WE");
 8003a12:	4832      	ldr	r0, [pc, #200]	; (8003adc <TaskSensorData+0xab4>)
 8003a14:	f7fd fe84 	bl	8001720 <Log>

						Distance = HCSR04_Read(&HCSR04);
 8003a18:	482a      	ldr	r0, [pc, #168]	; (8003ac4 <TaskSensorData+0xa9c>)
 8003a1a:	f006 fff2 	bl	800aa02 <HCSR04_Read>
 8003a1e:	eef0 7a40 	vmov.f32	s15, s0
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <TaskSensorData+0xab8>)
 8003a24:	edc3 7a00 	vstr	s15, [r3]
					}
					Log("SD-DM-RS");
 8003a28:	482e      	ldr	r0, [pc, #184]	; (8003ae4 <TaskSensorData+0xabc>)
 8003a2a:	f7fd fe79 	bl	8001720 <Log>
					osMutexRelease(DistMutexHandle);
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <TaskSensorData+0xab0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f00e f868 	bl	8011b08 <osMutexRelease>
					Log("SD-DM-RE");
 8003a38:	482b      	ldr	r0, [pc, #172]	; (8003ae8 <TaskSensorData+0xac0>)
 8003a3a:	f7fd fe71 	bl	8001720 <Log>

					HCSR04.Triggered = false;
 8003a3e:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <TaskSensorData+0xa9c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <TaskSensorData+0xac4>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f43f abc8 	beq.w	80031de <TaskSensorData+0x1b6>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 8003a4e:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <TaskSensorData+0xac8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f04f 31ff 	mov.w	r1, #4294967295
 8003a56:	4618      	mov	r0, r3
 8003a58:	f00e f8be 	bl	8011bd8 <osSemaphoreWait>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f47f abbd 	bne.w	80031de <TaskSensorData+0x1b6>
			{
				if (ProcessGPSPackageBuffer)
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <TaskSensorData+0xacc>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f43f abb7 	beq.w	80031de <TaskSensorData+0x1b6>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <TaskSensorData+0xad0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f00d fff7 	bl	8011a6c <osMutexWait>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <TaskSensorData+0xa78>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 8003a84:	481d      	ldr	r0, [pc, #116]	; (8003afc <TaskSensorData+0xad4>)
 8003a86:	f005 f8e1 	bl	8008c4c <GPS_validate>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <TaskSensorData+0xa6e>
							GPS_parse((char*) GPSPackageBuffer);
 8003a90:	481a      	ldr	r0, [pc, #104]	; (8003afc <TaskSensorData+0xad4>)
 8003a92:	f005 f93d 	bl	8008d10 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4818      	ldr	r0, [pc, #96]	; (8003afc <TaskSensorData+0xad4>)
 8003a9c:	f011 fcbf 	bl	801541e <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 8003aa0:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <TaskSensorData+0xad0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f00e f82f 	bl	8011b08 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <TaskSensorData+0xacc>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
	{
 8003ab0:	f7ff bb95 	b.w	80031de <TaskSensorData+0x1b6>
 8003ab4:	20000424 	.word	0x20000424
 8003ab8:	20000d94 	.word	0x20000d94
 8003abc:	20000d8c 	.word	0x20000d8c
 8003ac0:	20000216 	.word	0x20000216
 8003ac4:	20000494 	.word	0x20000494
 8003ac8:	0801bc64 	.word	0x0801bc64
 8003acc:	20000da8 	.word	0x20000da8
 8003ad0:	0801bc70 	.word	0x0801bc70
 8003ad4:	0801bc7c 	.word	0x0801bc7c
 8003ad8:	20000d9c 	.word	0x20000d9c
 8003adc:	0801bc88 	.word	0x0801bc88
 8003ae0:	200004cc 	.word	0x200004cc
 8003ae4:	0801bc94 	.word	0x0801bc94
 8003ae8:	0801bca0 	.word	0x0801bca0
 8003aec:	20000217 	.word	0x20000217
 8003af0:	20000dac 	.word	0x20000dac
 8003af4:	200006cf 	.word	0x200006cf
 8003af8:	20000d98 	.word	0x20000d98
 8003afc:	200005d0 	.word	0x200005d0

08003b00 <TaskTune>:
extern osMutexId ImuMutexHandle;;
extern osMutexId RemoteDataMutexHandle;


void TaskTune(void const *argument)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b0be      	sub	sp, #248	; 0xf8
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100; //Hz
 8003b08:	2364      	movs	r3, #100	; 0x64
 8003b0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8003b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	//HAL_SPI_Receive_IT(&hspi1, Spi1Buffer, 64);

	uint8_t SpiTuneData1[64];
	uint8_t SpiTuneData2[64];
	SpiTuneData1[0] = (uint8_t)('t');
 8003b1e:	2374      	movs	r3, #116	; 0x74
 8003b20:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	SpiTuneData2[0] = (uint8_t)('u');
 8003b24:	2375      	movs	r3, #117	; 0x75
 8003b26:	f887 3020 	strb.w	r3, [r7, #32]


	// PID controllers to be tuned
	PIDController* PID_Ro = &DPID_Roll.outer;
 8003b2a:	4bb9      	ldr	r3, [pc, #740]	; (8003e10 <TaskTune+0x310>)
 8003b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	int16_t PID_Ro_ref_devided; // Calculated in every cycle
	float PID_Ro_ref_devided_float; // Needed only for single loop tuning
	float* PID_Ro_meas = &(Fusion_output.angle.roll);
 8003b30:	4bb8      	ldr	r3, [pc, #736]	; (8003e14 <TaskTune+0x314>)
 8003b32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float* PID_Ro_out = &(PID_Ro->out);
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3a:	3340      	adds	r3, #64	; 0x40
 8003b3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	PIDController* PID_Ri = &DPID_Roll.inner;
 8003b40:	4bb5      	ldr	r3, [pc, #724]	; (8003e18 <TaskTune+0x318>)
 8003b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	float* PID_Ri_ref = &(PID_Ro->out);
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	3340      	adds	r3, #64	; 0x40
 8003b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	//float* PID_Ri_ref = &(Fusion_output.angle.roll);
	float* PID_Ri_meas = GyroData;
 8003b50:	4bb2      	ldr	r3, [pc, #712]	; (8003e1c <TaskTune+0x31c>)
 8003b52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	//float* PID_Ri_meas = &Roll_measured;
	int16_t* PID_Ri_out = &Roll_controlled;
 8003b56:	4bb2      	ldr	r3, [pc, #712]	; (8003e20 <TaskTune+0x320>)
 8003b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	PIDController* PID_Po = &DPID_Pitch.outer;
 8003b5c:	4bb1      	ldr	r3, [pc, #708]	; (8003e24 <TaskTune+0x324>)
 8003b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	int16_t PID_Po_ref_devided; // Calculated in every cycle
	float PID_Po_ref_devided_float; // Needed only for single loop tuning
	float* PID_Po_meas = &(Fusion_output.angle.pitch);
 8003b62:	4bb1      	ldr	r3, [pc, #708]	; (8003e28 <TaskTune+0x328>)
 8003b64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float* PID_Po_out = &(PID_Po->out);
 8003b68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b6c:	3340      	adds	r3, #64	; 0x40
 8003b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	PIDController* PID_Pi = &DPID_Pitch.inner;
 8003b72:	4bae      	ldr	r3, [pc, #696]	; (8003e2c <TaskTune+0x32c>)
 8003b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float* PID_Pi_ref = &(PID_Po->out);
 8003b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b7c:	3340      	adds	r3, #64	; 0x40
 8003b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float* PID_Pi_meas = GyroData+1;
 8003b82:	4bab      	ldr	r3, [pc, #684]	; (8003e30 <TaskTune+0x330>)
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int16_t* PID_Pi_out = &Pitch_controlled;
 8003b88:	4baa      	ldr	r3, [pc, #680]	; (8003e34 <TaskTune+0x334>)
 8003b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	PIDController* PID_Y = &PID_Yaw;
 8003b8e:	4baa      	ldr	r3, [pc, #680]	; (8003e38 <TaskTune+0x338>)
 8003b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int16_t PID_Y_ref_devided; // Calculated in every cycle
	float* PID_Y_meas = GyroData+2;
 8003b94:	4ba9      	ldr	r3, [pc, #676]	; (8003e3c <TaskTune+0x33c>)
 8003b96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int16_t* PID_Y_out = &Yaw_controlled;
 8003b9a:	4ba9      	ldr	r3, [pc, #676]	; (8003e40 <TaskTune+0x340>)
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4


	xLastWakeTime = xTaskGetTickCount();
 8003ba0:	f00f fafc 	bl	801319c <xTaskGetTickCount>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8003baa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bae:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f00f f91e 	bl	8012df4 <vTaskDelayUntil>

		if (Tune)
 8003bb8:	4ba2      	ldr	r3, [pc, #648]	; (8003e44 <TaskTune+0x344>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 81bb 	beq.w	8003f38 <TaskTune+0x438>
		{
			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 8003bc2:	4ba1      	ldr	r3, [pc, #644]	; (8003e48 <TaskTune+0x348>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f00d ff4e 	bl	8011a6c <osMutexWait>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 81a1 	bne.w	8003f1a <TaskTune+0x41a>
					&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK
 8003bd8:	4b9c      	ldr	r3, [pc, #624]	; (8003e4c <TaskTune+0x34c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003be0:	4618      	mov	r0, r3
 8003be2:	f00d ff43 	bl	8011a6c <osMutexWait>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f040 8196 	bne.w	8003f1a <TaskTune+0x41a>
					&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8003bee:	4b98      	ldr	r3, [pc, #608]	; (8003e50 <TaskTune+0x350>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f00d ff38 	bl	8011a6c <osMutexWait>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 818b 	bne.w	8003f1a <TaskTune+0x41a>
//				else
//					Tune_single_true_double_false = true;

				// Pack PID_Ro data
				//Gains
				FloatToUint8s(&(PID_Ro->Kp), SpiTuneData1, 1);
 8003c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c08:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fdae 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Ro->Ki), SpiTuneData1, 5);
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c18:	3304      	adds	r3, #4
 8003c1a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003c1e:	2205      	movs	r2, #5
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fd fda5 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Ro->Kd), SpiTuneData1, 9);
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003c30:	2209      	movs	r2, #9
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd fd9c 	bl	8001770 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				//PID1_ref_devided = Roll_in / 25;
				PID_Ro_ref_devided = SWD / 70;
 8003c38:	4b86      	ldr	r3, [pc, #536]	; (8003e54 <TaskTune+0x354>)
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	4a86      	ldr	r2, [pc, #536]	; (8003e58 <TaskTune+0x358>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	b21b      	sxth	r3, r3
 8003c4a:	83fb      	strh	r3, [r7, #30]
				Int16ToUint8s(&PID_Ro_ref_devided, SpiTuneData1, 13);
 8003c4c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003c50:	f107 031e 	add.w	r3, r7, #30
 8003c54:	220d      	movs	r2, #13
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd fdc2 	bl	80017e0 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Ro_meas, SpiTuneData1, 15);
 8003c5c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c60:	220f      	movs	r2, #15
 8003c62:	4619      	mov	r1, r3
 8003c64:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8003c68:	f7fd fd82 	bl	8001770 <FloatToUint8s>
				// Output
				FloatToUint8s(PID_Ro_out, SpiTuneData1, 19);
 8003c6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c70:	2213      	movs	r2, #19
 8003c72:	4619      	mov	r1, r3
 8003c74:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003c78:	f7fd fd7a 	bl	8001770 <FloatToUint8s>


				// Pack PID_Ri data
				// Gains
				FloatToUint8s(&(PID_Ri->Kp), SpiTuneData1, 23);
 8003c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c80:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003c84:	2217      	movs	r2, #23
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd fd72 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Ri->Ki), SpiTuneData1, 27);
 8003c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c90:	3304      	adds	r3, #4
 8003c92:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003c96:	221b      	movs	r2, #27
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd fd69 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Ri->Kd), SpiTuneData1, 31);
 8003c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ca8:	221f      	movs	r2, #31
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd fd60 	bl	8001770 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <TaskTune+0x35c>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01b      	beq.n	8003cf0 <TaskTune+0x1f0>
				{
					PID_Ro_ref_devided_float = Roll_in / 10.0;
 8003cb8:	4b69      	ldr	r3, [pc, #420]	; (8003e60 <TaskTune+0x360>)
 8003cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fc58 	bl	8000574 <__aeabi_i2d>
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <TaskTune+0x364>)
 8003cca:	f7fc fde7 	bl	800089c <__aeabi_ddiv>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7fc ffaf 	bl	8000c38 <__aeabi_d2f>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	61bb      	str	r3, [r7, #24]
					FloatToUint8s(&PID_Ro_ref_devided_float, SpiTuneData1, 35);
 8003cde:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ce2:	f107 0318 	add.w	r3, r7, #24
 8003ce6:	2223      	movs	r2, #35	; 0x23
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd fd41 	bl	8001770 <FloatToUint8s>
 8003cee:	e007      	b.n	8003d00 <TaskTune+0x200>
				}
				else
					FloatToUint8s(PID_Ri_ref, SpiTuneData1, 35);
 8003cf0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cf4:	2223      	movs	r2, #35	; 0x23
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003cfc:	f7fd fd38 	bl	8001770 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID_Ri_meas, SpiTuneData1, 39);
 8003d00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d04:	2227      	movs	r2, #39	; 0x27
 8003d06:	4619      	mov	r1, r3
 8003d08:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003d0c:	f7fd fd30 	bl	8001770 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Ri_out, SpiTuneData1, 43);
 8003d10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d14:	222b      	movs	r2, #43	; 0x2b
 8003d16:	4619      	mov	r1, r3
 8003d18:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8003d1c:	f7fd fd60 	bl	80017e0 <Int16ToUint8s>


				// Pack PID_Po data
				//Gains
				FloatToUint8s(&(PID_Po->Kp), SpiTuneData2, 1);
 8003d20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d24:	f107 0120 	add.w	r1, r7, #32
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd fd20 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Po->Ki), SpiTuneData2, 5);
 8003d30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d34:	3304      	adds	r3, #4
 8003d36:	f107 0120 	add.w	r1, r7, #32
 8003d3a:	2205      	movs	r2, #5
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd fd17 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Po->Kd), SpiTuneData2, 9);
 8003d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d46:	3308      	adds	r3, #8
 8003d48:	f107 0120 	add.w	r1, r7, #32
 8003d4c:	2209      	movs	r2, #9
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd fd0e 	bl	8001770 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_Po_ref_devided = Pitch_in / 25;
 8003d54:	4b44      	ldr	r3, [pc, #272]	; (8003e68 <TaskTune+0x368>)
 8003d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d5a:	4a44      	ldr	r2, [pc, #272]	; (8003e6c <TaskTune+0x36c>)
 8003d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8003d60:	10d2      	asrs	r2, r2, #3
 8003d62:	17db      	asrs	r3, r3, #31
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	82fb      	strh	r3, [r7, #22]
				Int16ToUint8s(&PID_Po_ref_devided, SpiTuneData2, 13);
 8003d6a:	f107 0120 	add.w	r1, r7, #32
 8003d6e:	f107 0316 	add.w	r3, r7, #22
 8003d72:	220d      	movs	r2, #13
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fd fd33 	bl	80017e0 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Po_meas, SpiTuneData2, 15);
 8003d7a:	f107 0320 	add.w	r3, r7, #32
 8003d7e:	220f      	movs	r2, #15
 8003d80:	4619      	mov	r1, r3
 8003d82:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8003d86:	f7fd fcf3 	bl	8001770 <FloatToUint8s>
				// Output
				FloatToUint8s(PID_Po_out, SpiTuneData2, 19);
 8003d8a:	f107 0320 	add.w	r3, r7, #32
 8003d8e:	2213      	movs	r2, #19
 8003d90:	4619      	mov	r1, r3
 8003d92:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003d96:	f7fd fceb 	bl	8001770 <FloatToUint8s>


				// Pack PID_Pi data
				// Gains
				FloatToUint8s(&(PID_Pi->Kp), SpiTuneData2, 23);
 8003d9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d9e:	f107 0120 	add.w	r1, r7, #32
 8003da2:	2217      	movs	r2, #23
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fd fce3 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Pi->Ki), SpiTuneData2, 27);
 8003daa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dae:	3304      	adds	r3, #4
 8003db0:	f107 0120 	add.w	r1, r7, #32
 8003db4:	221b      	movs	r2, #27
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd fcda 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Pi->Kd), SpiTuneData2, 31);
 8003dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	f107 0120 	add.w	r1, r7, #32
 8003dc6:	221f      	movs	r2, #31
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd fcd1 	bl	8001770 <FloatToUint8s>
				// Reference
				if (Tune_single_true_double_false)
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <TaskTune+0x35c>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d04c      	beq.n	8003e70 <TaskTune+0x370>
				{
					PID_Po_ref_devided_float = Pitch_in / 10.0;
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <TaskTune+0x368>)
 8003dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc fbc9 	bl	8000574 <__aeabi_i2d>
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <TaskTune+0x364>)
 8003de8:	f7fc fd58 	bl	800089c <__aeabi_ddiv>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7fc ff20 	bl	8000c38 <__aeabi_d2f>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	613b      	str	r3, [r7, #16]
					FloatToUint8s(&PID_Po_ref_devided_float, SpiTuneData2, 35);
 8003dfc:	f107 0120 	add.w	r1, r7, #32
 8003e00:	f107 0310 	add.w	r3, r7, #16
 8003e04:	2223      	movs	r2, #35	; 0x23
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd fcb2 	bl	8001770 <FloatToUint8s>
 8003e0c:	e038      	b.n	8003e80 <TaskTune+0x380>
 8003e0e:	bf00      	nop
 8003e10:	2000025c 	.word	0x2000025c
 8003e14:	20000424 	.word	0x20000424
 8003e18:	20000218 	.word	0x20000218
 8003e1c:	2000040c 	.word	0x2000040c
 8003e20:	20000370 	.word	0x20000370
 8003e24:	200002e4 	.word	0x200002e4
 8003e28:	20000428 	.word	0x20000428
 8003e2c:	200002a0 	.word	0x200002a0
 8003e30:	20000410 	.word	0x20000410
 8003e34:	20000374 	.word	0x20000374
 8003e38:	20000328 	.word	0x20000328
 8003e3c:	20000414 	.word	0x20000414
 8003e40:	20000378 	.word	0x20000378
 8003e44:	20000001 	.word	0x20000001
 8003e48:	20000da4 	.word	0x20000da4
 8003e4c:	20000d94 	.word	0x20000d94
 8003e50:	20000d90 	.word	0x20000d90
 8003e54:	20000380 	.word	0x20000380
 8003e58:	ea0ea0eb 	.word	0xea0ea0eb
 8003e5c:	2000020d 	.word	0x2000020d
 8003e60:	2000036e 	.word	0x2000036e
 8003e64:	40240000 	.word	0x40240000
 8003e68:	20000372 	.word	0x20000372
 8003e6c:	51eb851f 	.word	0x51eb851f
				}
				else
					FloatToUint8s(PID_Pi_ref, SpiTuneData2, 35);
 8003e70:	f107 0320 	add.w	r3, r7, #32
 8003e74:	2223      	movs	r2, #35	; 0x23
 8003e76:	4619      	mov	r1, r3
 8003e78:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8003e7c:	f7fd fc78 	bl	8001770 <FloatToUint8s>
				// Measurement
				FloatToUint8s(PID_Pi_meas, SpiTuneData2, 39);
 8003e80:	f107 0320 	add.w	r3, r7, #32
 8003e84:	2227      	movs	r2, #39	; 0x27
 8003e86:	4619      	mov	r1, r3
 8003e88:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003e8c:	f7fd fc70 	bl	8001770 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Pi_out, SpiTuneData2, 43);
 8003e90:	f107 0320 	add.w	r3, r7, #32
 8003e94:	222b      	movs	r2, #43	; 0x2b
 8003e96:	4619      	mov	r1, r3
 8003e98:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003e9c:	f7fd fca0 	bl	80017e0 <Int16ToUint8s>


				// Pack PID_Y data
				// Gains
				FloatToUint8s(&(PID_Y->Kp), SpiTuneData1, 45);
 8003ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ea4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ea8:	222d      	movs	r2, #45	; 0x2d
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fc60 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Y->Ki), SpiTuneData1, 49);
 8003eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003eba:	2231      	movs	r2, #49	; 0x31
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd fc57 	bl	8001770 <FloatToUint8s>
				FloatToUint8s(&(PID_Y->Kd), SpiTuneData1, 53);
 8003ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003ecc:	2235      	movs	r2, #53	; 0x35
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd fc4e 	bl	8001770 <FloatToUint8s>
				// Reference -> Calculated in every cycle
				PID_Y_ref_devided = Yaw_in / 10;
 8003ed4:	4b89      	ldr	r3, [pc, #548]	; (80040fc <TaskTune+0x5fc>)
 8003ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eda:	4a89      	ldr	r2, [pc, #548]	; (8004100 <TaskTune+0x600>)
 8003edc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ee0:	1092      	asrs	r2, r2, #2
 8003ee2:	17db      	asrs	r3, r3, #31
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	81fb      	strh	r3, [r7, #14]
				Int16ToUint8s(&PID_Y_ref_devided, SpiTuneData2, 45);
 8003eea:	f107 0120 	add.w	r1, r7, #32
 8003eee:	f107 030e 	add.w	r3, r7, #14
 8003ef2:	222d      	movs	r2, #45	; 0x2d
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fd fc73 	bl	80017e0 <Int16ToUint8s>
				// Measurement
				FloatToUint8s(PID_Y_meas, SpiTuneData2, 47);
 8003efa:	f107 0320 	add.w	r3, r7, #32
 8003efe:	222f      	movs	r2, #47	; 0x2f
 8003f00:	4619      	mov	r1, r3
 8003f02:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003f06:	f7fd fc33 	bl	8001770 <FloatToUint8s>
				// Output
				Int16ToUint8s(PID_Y_out, SpiTuneData2, 51);
 8003f0a:	f107 0320 	add.w	r3, r7, #32
 8003f0e:	2233      	movs	r2, #51	; 0x33
 8003f10:	4619      	mov	r1, r3
 8003f12:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003f16:	f7fd fc63 	bl	80017e0 <Int16ToUint8s>

			}
			osMutexRelease(ControllerMutexHandle);
 8003f1a:	4b7a      	ldr	r3, [pc, #488]	; (8004104 <TaskTune+0x604>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f00d fdf2 	bl	8011b08 <osMutexRelease>
			osMutexRelease(ImuMutexHandle);
 8003f24:	4b78      	ldr	r3, [pc, #480]	; (8004108 <TaskTune+0x608>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f00d fded 	bl	8011b08 <osMutexRelease>
			osMutexRelease(RemoteDataMutexHandle);
 8003f2e:	4b77      	ldr	r3, [pc, #476]	; (800410c <TaskTune+0x60c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f00d fde8 	bl	8011b08 <osMutexRelease>
		}

		// Send packed data and receive tune data
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData1, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003f38:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2340      	movs	r3, #64	; 0x40
 8003f44:	4a72      	ldr	r2, [pc, #456]	; (8004110 <TaskTune+0x610>)
 8003f46:	4873      	ldr	r0, [pc, #460]	; (8004114 <TaskTune+0x614>)
 8003f48:	f009 fe15 	bl	800db76 <HAL_SPI_TransmitReceive>
		osDelay(5);
 8003f4c:	2005      	movs	r0, #5
 8003f4e:	f00d fd60 	bl	8011a12 <osDelay>
		HAL_SPI_TransmitReceive(&hspi1, SpiTuneData2, Spi1Buffer, 64, HAL_MAX_DELAY);
 8003f52:	f107 0120 	add.w	r1, r7, #32
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2340      	movs	r3, #64	; 0x40
 8003f5e:	4a6c      	ldr	r2, [pc, #432]	; (8004110 <TaskTune+0x610>)
 8003f60:	486c      	ldr	r0, [pc, #432]	; (8004114 <TaskTune+0x614>)
 8003f62:	f009 fe08 	bl	800db76 <HAL_SPI_TransmitReceive>

		// Tune controllers based on the received data
		float float_value = 0;
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
		FloatFromUint8s(Spi1Buffer, 3, &float_value);
 8003f6c:	f107 0308 	add.w	r3, r7, #8
 8003f70:	461a      	mov	r2, r3
 8003f72:	2103      	movs	r1, #3
 8003f74:	4866      	ldr	r0, [pc, #408]	; (8004110 <TaskTune+0x610>)
 8003f76:	f7fd fc0d 	bl	8001794 <FloatFromUint8s>

		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8003f7a:	4b62      	ldr	r3, [pc, #392]	; (8004104 <TaskTune+0x604>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f82:	4618      	mov	r0, r3
 8003f84:	f00d fd72 	bl	8011a6c <osMutexWait>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 80af 	bne.w	80040ee <TaskTune+0x5ee>
		{
			if (Spi1Buffer[1] == 1) // PID_Ro
 8003f90:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <TaskTune+0x610>)
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d11e      	bne.n	8003fd8 <TaskTune+0x4d8>
			{
				if (Spi1Buffer[2] == 'p')
 8003f9a:	4b5d      	ldr	r3, [pc, #372]	; (8004110 <TaskTune+0x610>)
 8003f9c:	789b      	ldrb	r3, [r3, #2]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b70      	cmp	r3, #112	; 0x70
 8003fa2:	d104      	bne.n	8003fae <TaskTune+0x4ae>
					PID_Ro->Kp = float_value;
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e09f      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'i')
 8003fae:	4b58      	ldr	r3, [pc, #352]	; (8004110 <TaskTune+0x610>)
 8003fb0:	789b      	ldrb	r3, [r3, #2]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b69      	cmp	r3, #105	; 0x69
 8003fb6:	d104      	bne.n	8003fc2 <TaskTune+0x4c2>
					PID_Ro->Ki = float_value;
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	e095      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'd')
 8003fc2:	4b53      	ldr	r3, [pc, #332]	; (8004110 <TaskTune+0x610>)
 8003fc4:	789b      	ldrb	r3, [r3, #2]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b64      	cmp	r3, #100	; 0x64
 8003fca:	f040 8090 	bne.w	80040ee <TaskTune+0x5ee>
					PID_Ro->Kd = float_value;
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	e08a      	b.n	80040ee <TaskTune+0x5ee>
			}
			else if (Spi1Buffer[1] == 2) // PID_Ri
 8003fd8:	4b4d      	ldr	r3, [pc, #308]	; (8004110 <TaskTune+0x610>)
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d11d      	bne.n	800401e <TaskTune+0x51e>
			{
				if (Spi1Buffer[2] == 'p')
 8003fe2:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <TaskTune+0x610>)
 8003fe4:	789b      	ldrb	r3, [r3, #2]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b70      	cmp	r3, #112	; 0x70
 8003fea:	d104      	bne.n	8003ff6 <TaskTune+0x4f6>
					PID_Ri->Kp = float_value;
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	e07b      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'i')
 8003ff6:	4b46      	ldr	r3, [pc, #280]	; (8004110 <TaskTune+0x610>)
 8003ff8:	789b      	ldrb	r3, [r3, #2]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b69      	cmp	r3, #105	; 0x69
 8003ffe:	d104      	bne.n	800400a <TaskTune+0x50a>
					PID_Ri->Ki = float_value;
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004006:	605a      	str	r2, [r3, #4]
 8004008:	e071      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'd')
 800400a:	4b41      	ldr	r3, [pc, #260]	; (8004110 <TaskTune+0x610>)
 800400c:	789b      	ldrb	r3, [r3, #2]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b64      	cmp	r3, #100	; 0x64
 8004012:	d16c      	bne.n	80040ee <TaskTune+0x5ee>
					PID_Ri->Kd = float_value;
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	e067      	b.n	80040ee <TaskTune+0x5ee>
			}
			else if (Spi1Buffer[1] == 3) // PID_Po
 800401e:	4b3c      	ldr	r3, [pc, #240]	; (8004110 <TaskTune+0x610>)
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b03      	cmp	r3, #3
 8004026:	d11d      	bne.n	8004064 <TaskTune+0x564>
			{
				if (Spi1Buffer[2] == 'p')
 8004028:	4b39      	ldr	r3, [pc, #228]	; (8004110 <TaskTune+0x610>)
 800402a:	789b      	ldrb	r3, [r3, #2]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b70      	cmp	r3, #112	; 0x70
 8004030:	d104      	bne.n	800403c <TaskTune+0x53c>
					PID_Po->Kp = float_value;
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e058      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'i')
 800403c:	4b34      	ldr	r3, [pc, #208]	; (8004110 <TaskTune+0x610>)
 800403e:	789b      	ldrb	r3, [r3, #2]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b69      	cmp	r3, #105	; 0x69
 8004044:	d104      	bne.n	8004050 <TaskTune+0x550>
					PID_Po->Ki = float_value;
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	e04e      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'd')
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <TaskTune+0x610>)
 8004052:	789b      	ldrb	r3, [r3, #2]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d149      	bne.n	80040ee <TaskTune+0x5ee>
					PID_Po->Kd = float_value;
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	e044      	b.n	80040ee <TaskTune+0x5ee>
			}
			else if (Spi1Buffer[1] == 4) // PID_Pi
 8004064:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <TaskTune+0x610>)
 8004066:	785b      	ldrb	r3, [r3, #1]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b04      	cmp	r3, #4
 800406c:	d11d      	bne.n	80040aa <TaskTune+0x5aa>
			{
				if (Spi1Buffer[2] == 'p')
 800406e:	4b28      	ldr	r3, [pc, #160]	; (8004110 <TaskTune+0x610>)
 8004070:	789b      	ldrb	r3, [r3, #2]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b70      	cmp	r3, #112	; 0x70
 8004076:	d104      	bne.n	8004082 <TaskTune+0x582>
					PID_Pi->Kp = float_value;
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e035      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'i')
 8004082:	4b23      	ldr	r3, [pc, #140]	; (8004110 <TaskTune+0x610>)
 8004084:	789b      	ldrb	r3, [r3, #2]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b69      	cmp	r3, #105	; 0x69
 800408a:	d104      	bne.n	8004096 <TaskTune+0x596>
					PID_Pi->Ki = float_value;
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	e02b      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'd')
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <TaskTune+0x610>)
 8004098:	789b      	ldrb	r3, [r3, #2]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b64      	cmp	r3, #100	; 0x64
 800409e:	d126      	bne.n	80040ee <TaskTune+0x5ee>
					PID_Pi->Kd = float_value;
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	e021      	b.n	80040ee <TaskTune+0x5ee>
			}
			else if (Spi1Buffer[1] == 5) // PID_Y
 80040aa:	4b19      	ldr	r3, [pc, #100]	; (8004110 <TaskTune+0x610>)
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d11c      	bne.n	80040ee <TaskTune+0x5ee>
			{
				if (Spi1Buffer[2] == 'p')
 80040b4:	4b16      	ldr	r3, [pc, #88]	; (8004110 <TaskTune+0x610>)
 80040b6:	789b      	ldrb	r3, [r3, #2]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b70      	cmp	r3, #112	; 0x70
 80040bc:	d104      	bne.n	80040c8 <TaskTune+0x5c8>
					PID_Y->Kp = float_value;
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e012      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'i')
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <TaskTune+0x610>)
 80040ca:	789b      	ldrb	r3, [r3, #2]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b69      	cmp	r3, #105	; 0x69
 80040d0:	d104      	bne.n	80040dc <TaskTune+0x5dc>
					PID_Y->Ki = float_value;
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	e008      	b.n	80040ee <TaskTune+0x5ee>
				else if (Spi1Buffer[2] == 'd')
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <TaskTune+0x610>)
 80040de:	789b      	ldrb	r3, [r3, #2]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d103      	bne.n	80040ee <TaskTune+0x5ee>
					PID_Y->Kd = float_value;
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040ec:	609a      	str	r2, [r3, #8]
			}
		}
		osMutexRelease(ControllerMutexHandle);
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <TaskTune+0x604>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f00d fd08 	bl	8011b08 <osMutexRelease>
	{
 80040f8:	e557      	b.n	8003baa <TaskTune+0xaa>
 80040fa:	bf00      	nop
 80040fc:	20000376 	.word	0x20000376
 8004100:	66666667 	.word	0x66666667
 8004104:	20000da4 	.word	0x20000da4
 8004108:	20000d94 	.word	0x20000d94
 800410c:	20000d90 	.word	0x20000d90
 8004110:	200006d0 	.word	0x200006d0
 8004114:	20000a18 	.word	0x20000a18

08004118 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a07      	ldr	r2, [pc, #28]	; (8004144 <vApplicationGetIdleTaskMemory+0x2c>)
 8004128:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4a06      	ldr	r2, [pc, #24]	; (8004148 <vApplicationGetIdleTaskMemory+0x30>)
 800412e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2280      	movs	r2, #128	; 0x80
 8004134:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000724 	.word	0x20000724
 8004148:	200007c4 	.word	0x200007c4

0800414c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a42      	ldr	r2, [pc, #264]	; (8004260 <HAL_UART_RxCpltCallback+0x114>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d130      	bne.n	80041be <HAL_UART_RxCpltCallback+0x72>
	{
		//Log("U2CB");
		Uart2CallbackCounter++;
 800415c:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_UART_RxCpltCallback+0x118>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	4a40      	ldr	r2, [pc, #256]	; (8004264 <HAL_UART_RxCpltCallback+0x118>)
 8004164:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8004166:	4b40      	ldr	r3, [pc, #256]	; (8004268 <HAL_UART_RxCpltCallback+0x11c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f00d fc7d 	bl	8011a6c <osMutexWait>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11c      	bne.n	80041b2 <HAL_UART_RxCpltCallback+0x66>
		{
			//Log("U2CB-RBM-WE");
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e00c      	b.n	8004198 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 800417e:	4a3b      	ldr	r2, [pc, #236]	; (800426c <HAL_UART_RxCpltCallback+0x120>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b2d9      	uxtb	r1, r3
 8004188:	4a39      	ldr	r2, [pc, #228]	; (8004270 <HAL_UART_RxCpltCallback+0x124>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	460a      	mov	r2, r1
 8004190:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b3f      	cmp	r3, #63	; 0x3f
 800419c:	ddef      	ble.n	800417e <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 800419e:	4b32      	ldr	r3, [pc, #200]	; (8004268 <HAL_UART_RxCpltCallback+0x11c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f00d fcb0 	bl	8011b08 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 80041a8:	4b32      	ldr	r3, [pc, #200]	; (8004274 <HAL_UART_RxCpltCallback+0x128>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f00d fd61 	bl	8011c74 <osSemaphoreRelease>
//				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
//				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//			}
//		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 80041b2:	2240      	movs	r2, #64	; 0x40
 80041b4:	492d      	ldr	r1, [pc, #180]	; (800426c <HAL_UART_RxCpltCallback+0x120>)
 80041b6:	482a      	ldr	r0, [pc, #168]	; (8004260 <HAL_UART_RxCpltCallback+0x114>)
 80041b8:	f00b ffa7 	bl	801010a <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 80041bc:	e04b      	b.n	8004256 <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <HAL_UART_RxCpltCallback+0x12c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d147      	bne.n	8004256 <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 80041c6:	4b2d      	ldr	r3, [pc, #180]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d104      	bne.n	80041da <HAL_UART_RxCpltCallback+0x8e>
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_UART_RxCpltCallback+0x134>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b24      	cmp	r3, #36	; 0x24
 80041d8:	d013      	beq.n	8004202 <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 80041da:	4b28      	ldr	r3, [pc, #160]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d104      	bne.n	80041ee <HAL_UART_RxCpltCallback+0xa2>
 80041e4:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_UART_RxCpltCallback+0x134>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b47      	cmp	r3, #71	; 0x47
 80041ec:	d009      	beq.n	8004202 <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d926      	bls.n	8004246 <HAL_UART_RxCpltCallback+0xfa>
 80041f8:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2bff      	cmp	r3, #255	; 0xff
 8004200:	d021      	beq.n	8004246 <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_UART_RxCpltCallback+0x134>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2d9      	uxtb	r1, r3
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_UART_RxCpltCallback+0x138>)
 8004212:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2bfd      	cmp	r3, #253	; 0xfd
 800421c:	d807      	bhi.n	800422e <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b14      	ldr	r3, [pc, #80]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 800422a:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 800422c:	e00e      	b.n	800424c <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 8004234:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_UART_RxCpltCallback+0x13c>)
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <HAL_UART_RxCpltCallback+0x140>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f00d fd18 	bl	8011c74 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8004244:	e002      	b.n	800424c <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_UART_RxCpltCallback+0x130>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 800424c:	2201      	movs	r2, #1
 800424e:	490c      	ldr	r1, [pc, #48]	; (8004280 <HAL_UART_RxCpltCallback+0x134>)
 8004250:	4809      	ldr	r0, [pc, #36]	; (8004278 <HAL_UART_RxCpltCallback+0x12c>)
 8004252:	f00b ff9e 	bl	8010192 <HAL_UART_Receive_DMA>
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000c00 	.word	0x20000c00
 8004264:	20000210 	.word	0x20000210
 8004268:	20000da0 	.word	0x20000da0
 800426c:	200004d0 	.word	0x200004d0
 8004270:	20000510 	.word	0x20000510
 8004274:	20000db0 	.word	0x20000db0
 8004278:	20000b78 	.word	0x20000b78
 800427c:	200005cd 	.word	0x200005cd
 8004280:	200005cc 	.word	0x200005cc
 8004284:	200005d0 	.word	0x200005d0
 8004288:	200006cf 	.word	0x200006cf
 800428c:	20000dac 	.word	0x20000dac

08004290 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a23      	ldr	r2, [pc, #140]	; (8004328 <HAL_UART_ErrorCallback+0x98>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d11c      	bne.n	80042da <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d03a      	beq.n	8004320 <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	491d      	ldr	r1, [pc, #116]	; (800432c <HAL_UART_ErrorCallback+0x9c>)
 80042b6:	4618      	mov	r0, r3
 80042b8:	f002 fa94 	bl	80067e4 <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80042bc:	f107 0308 	add.w	r3, r7, #8
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fb fffd 	bl	80002c0 <strlen>
 80042c6:	4603      	mov	r3, r0
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	f107 0108 	add.w	r1, r7, #8
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	4817      	ldr	r0, [pc, #92]	; (8004330 <HAL_UART_ErrorCallback+0xa0>)
 80042d4:	f00b fe96 	bl	8010004 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 80042d8:	e022      	b.n	8004320 <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_UART_ErrorCallback+0xa4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d11e      	bne.n	8004320 <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d019      	beq.n	8004320 <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <HAL_UART_ErrorCallback+0xa8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042f8:	f107 0308 	add.w	r3, r7, #8
 80042fc:	490f      	ldr	r1, [pc, #60]	; (800433c <HAL_UART_ErrorCallback+0xac>)
 80042fe:	4618      	mov	r0, r3
 8004300:	f002 fa70 	bl	80067e4 <sprintf_>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8004304:	f107 0308 	add.w	r3, r7, #8
 8004308:	4618      	mov	r0, r3
 800430a:	f7fb ffd9 	bl	80002c0 <strlen>
 800430e:	4603      	mov	r3, r0
 8004310:	b29a      	uxth	r2, r3
 8004312:	f107 0108 	add.w	r1, r7, #8
 8004316:	f04f 33ff 	mov.w	r3, #4294967295
 800431a:	4805      	ldr	r0, [pc, #20]	; (8004330 <HAL_UART_ErrorCallback+0xa0>)
 800431c:	f00b fe72 	bl	8010004 <HAL_UART_Transmit>
}
 8004320:	bf00      	nop
 8004322:	3728      	adds	r7, #40	; 0x28
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000c00 	.word	0x20000c00
 800432c:	0801bcac 	.word	0x0801bcac
 8004330:	20000c88 	.word	0x20000c88
 8004334:	20000b78 	.word	0x20000b78
 8004338:	20000000 	.word	0x20000000
 800433c:	0801bcc8 	.word	0x0801bcc8

08004340 <HAL_TIM_IC_CaptureCallback>:
			}
		}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a05      	ldr	r2, [pc, #20]	; (8004360 <HAL_TIM_IC_CaptureCallback+0x20>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d103      	bne.n	8004358 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4804      	ldr	r0, [pc, #16]	; (8004364 <HAL_TIM_IC_CaptureCallback+0x24>)
 8004354:	f006 f9f4 	bl	800a740 <HCSR04_TMR_IC_ISR>
	}
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000b2c 	.word	0x20000b2c
 8004364:	20000494 	.word	0x20000494

08004368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004368:	b5b0      	push	{r4, r5, r7, lr}
 800436a:	b0c6      	sub	sp, #280	; 0x118
 800436c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800436e:	f006 fb80 	bl	800aa72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004372:	f000 f9eb 	bl	800474c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004376:	f000 fce7 	bl	8004d48 <MX_GPIO_Init>
  MX_DMA_Init();
 800437a:	f000 fcc7 	bl	8004d0c <MX_DMA_Init>
  MX_SPI1_Init();
 800437e:	f000 fa91 	bl	80048a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004382:	f000 facd 	bl	8004920 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004386:	f000 fb09 	bl	800499c <MX_TIM1_Init>
  MX_TIM3_Init();
 800438a:	f000 fbd7 	bl	8004b3c <MX_TIM3_Init>
  MX_UART4_Init();
 800438e:	f000 fc29 	bl	8004be4 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8004392:	f000 fc57 	bl	8004c44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004396:	f000 fa45 	bl	8004824 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800439a:	f000 fc87 	bl	8004cac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 800439e:	4916      	ldr	r1, [pc, #88]	; (80043f8 <main+0x90>)
 80043a0:	4816      	ldr	r0, [pc, #88]	; (80043fc <main+0x94>)
 80043a2:	f005 fdd9 	bl	8009f58 <MPU_Init>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <main+0x5a>
 80043ac:	4914      	ldr	r1, [pc, #80]	; (8004400 <main+0x98>)
 80043ae:	4813      	ldr	r0, [pc, #76]	; (80043fc <main+0x94>)
 80043b0:	f004 ff84 	bl	80092bc <BMP280_initialize>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <main+0x5a>
  		IsImuAvailable = true;
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <main+0x9c>)
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e002      	b.n	80043c8 <main+0x60>
  	else
  		IsImuAvailable = false;
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <main+0x9c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 80043c8:	f004 fdfa 	bl	8008fc0 <HMC5883L_Init>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <main+0x72>
  		IsMagnAvailable = true;
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <main+0xa0>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	e002      	b.n	80043e0 <main+0x78>
  	else
  		IsMagnAvailable = false;
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <main+0xa0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 80043e0:	490a      	ldr	r1, [pc, #40]	; (800440c <main+0xa4>)
 80043e2:	480b      	ldr	r0, [pc, #44]	; (8004410 <main+0xa8>)
 80043e4:	f006 f95e 	bl	800a6a4 <HCSR04_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d114      	bne.n	8004418 <main+0xb0>
  		IsDistAvailable = false;
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <main+0xac>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e013      	b.n	800441e <main+0xb6>
 80043f6:	bf00      	nop
 80043f8:	20000388 	.word	0x20000388
 80043fc:	20000a7c 	.word	0x20000a7c
 8004400:	20000430 	.word	0x20000430
 8004404:	20000214 	.word	0x20000214
 8004408:	20000215 	.word	0x20000215
 800440c:	20000b2c 	.word	0x20000b2c
 8004410:	20000494 	.word	0x20000494
 8004414:	20000216 	.word	0x20000216
  	else
  		IsDistAvailable = false;
 8004418:	4bb3      	ldr	r3, [pc, #716]	; (80046e8 <main+0x380>)
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 800441e:	2300      	movs	r3, #0
 8004420:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 800442a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800442e:	4618      	mov	r0, r3
 8004430:	f00d fb03 	bl	8011a3a <osMutexCreate>
 8004434:	4603      	mov	r3, r0
 8004436:	4aad      	ldr	r2, [pc, #692]	; (80046ec <main+0x384>)
 8004438:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 8004446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800444a:	4618      	mov	r0, r3
 800444c:	f00d faf5 	bl	8011a3a <osMutexCreate>
 8004450:	4603      	mov	r3, r0
 8004452:	4aa7      	ldr	r2, [pc, #668]	; (80046f0 <main+0x388>)
 8004454:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 8004462:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004466:	4618      	mov	r0, r3
 8004468:	f00d fae7 	bl	8011a3a <osMutexCreate>
 800446c:	4603      	mov	r3, r0
 800446e:	4aa1      	ldr	r2, [pc, #644]	; (80046f4 <main+0x38c>)
 8004470:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 800447e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004482:	4618      	mov	r0, r3
 8004484:	f00d fad9 	bl	8011a3a <osMutexCreate>
 8004488:	4603      	mov	r3, r0
 800448a:	4a9b      	ldr	r2, [pc, #620]	; (80046f8 <main+0x390>)
 800448c:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 800448e:	2300      	movs	r3, #0
 8004490:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 800449a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800449e:	4618      	mov	r0, r3
 80044a0:	f00d facb 	bl	8011a3a <osMutexCreate>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4a95      	ldr	r2, [pc, #596]	; (80046fc <main+0x394>)
 80044a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 80044b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80044ba:	4618      	mov	r0, r3
 80044bc:	f00d fabd 	bl	8011a3a <osMutexCreate>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4a8f      	ldr	r2, [pc, #572]	; (8004700 <main+0x398>)
 80044c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerMutex */
  osMutexDef(ControllerMutex);
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ControllerMutexHandle = osMutexCreate(osMutex(ControllerMutex));
 80044d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f00d faaf 	bl	8011a3a <osMutexCreate>
 80044dc:	4603      	mov	r3, r0
 80044de:	4a89      	ldr	r2, [pc, #548]	; (8004704 <main+0x39c>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 80044e2:	4b82      	ldr	r3, [pc, #520]	; (80046ec <main+0x384>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f00d fb0e 	bl	8011b08 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 80044ec:	4b80      	ldr	r3, [pc, #512]	; (80046f0 <main+0x388>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f00d fb09 	bl	8011b08 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 80044f6:	4b7f      	ldr	r3, [pc, #508]	; (80046f4 <main+0x38c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f00d fb04 	bl	8011b08 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 8004500:	4b7d      	ldr	r3, [pc, #500]	; (80046f8 <main+0x390>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f00d faff 	bl	8011b08 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 800450a:	4b7d      	ldr	r3, [pc, #500]	; (8004700 <main+0x398>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f00d fafa 	bl	8011b08 <osMutexRelease>
	osMutexRelease(ControllerMutexHandle);
 8004514:	4b7b      	ldr	r3, [pc, #492]	; (8004704 <main+0x39c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f00d faf5 	bl	8011b08 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 800451e:	2300      	movs	r3, #0
 8004520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 800452a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800452e:	2101      	movs	r1, #1
 8004530:	4618      	mov	r0, r3
 8004532:	f00d fb1f 	bl	8011b74 <osSemaphoreCreate>
 8004536:	4603      	mov	r3, r0
 8004538:	4a73      	ldr	r2, [pc, #460]	; (8004708 <main+0x3a0>)
 800453a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 8004548:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800454c:	2101      	movs	r1, #1
 800454e:	4618      	mov	r0, r3
 8004550:	f00d fb10 	bl	8011b74 <osSemaphoreCreate>
 8004554:	4603      	mov	r3, r0
 8004556:	4a6d      	ldr	r2, [pc, #436]	; (800470c <main+0x3a4>)
 8004558:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 8004566:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f00d fb01 	bl	8011b74 <osSemaphoreCreate>
 8004572:	4603      	mov	r3, r0
 8004574:	4a66      	ldr	r2, [pc, #408]	; (8004710 <main+0x3a8>)
 8004576:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 8004578:	4b63      	ldr	r3, [pc, #396]	; (8004708 <main+0x3a0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f00d fbaf 	bl	8011ce0 <osSemaphoreGetCount>
 8004582:	4603      	mov	r3, r0
 8004584:	2b01      	cmp	r3, #1
 8004586:	d106      	bne.n	8004596 <main+0x22e>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8004588:	4b5f      	ldr	r3, [pc, #380]	; (8004708 <main+0x3a0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f04f 31ff 	mov.w	r1, #4294967295
 8004590:	4618      	mov	r0, r3
 8004592:	f00d fb21 	bl	8011bd8 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <main+0x3a4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f00d fba0 	bl	8011ce0 <osSemaphoreGetCount>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d106      	bne.n	80045b4 <main+0x24c>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 80045a6:	4b59      	ldr	r3, [pc, #356]	; (800470c <main+0x3a4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f04f 31ff 	mov.w	r1, #4294967295
 80045ae:	4618      	mov	r0, r3
 80045b0:	f00d fb12 	bl	8011bd8 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 80045b4:	4b56      	ldr	r3, [pc, #344]	; (8004710 <main+0x3a8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f00d fb91 	bl	8011ce0 <osSemaphoreGetCount>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d106      	bne.n	80045d2 <main+0x26a>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 80045c4:	4b52      	ldr	r3, [pc, #328]	; (8004710 <main+0x3a8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	4618      	mov	r0, r3
 80045ce:	f00d fb03 	bl	8011bd8 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityHigh, 0, 512);
 80045d2:	4b50      	ldr	r3, [pc, #320]	; (8004714 <main+0x3ac>)
 80045d4:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80045d8:	461d      	mov	r5, r3
 80045da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 80045e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f00d f9c4 	bl	801197a <osThreadCreate>
 80045f2:	4603      	mov	r3, r0
 80045f4:	4a48      	ldr	r2, [pc, #288]	; (8004718 <main+0x3b0>)
 80045f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 512);
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <main+0x3b4>)
 80045fa:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80045fe:	461d      	mov	r5, r3
 8004600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 800460c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f00d f9b1 	bl	801197a <osThreadCreate>
 8004618:	4603      	mov	r3, r0
 800461a:	4a41      	ldr	r2, [pc, #260]	; (8004720 <main+0x3b8>)
 800461c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityRealtime, 0, 512);
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <main+0x3bc>)
 8004620:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8004624:	461d      	mov	r5, r3
 8004626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800462a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800462e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 8004632:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f00d f99e 	bl	801197a <osThreadCreate>
 800463e:	4603      	mov	r3, r0
 8004640:	4a39      	ldr	r2, [pc, #228]	; (8004728 <main+0x3c0>)
 8004642:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 256);
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <main+0x3c4>)
 8004646:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800464a:	461d      	mov	r5, r3
 800464c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800464e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 8004658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f00d f98b 	bl	801197a <osThreadCreate>
 8004664:	4603      	mov	r3, r0
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <main+0x3c8>)
 8004668:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 256);
 800466a:	4b32      	ldr	r3, [pc, #200]	; (8004734 <main+0x3cc>)
 800466c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8004670:	461d      	mov	r5, r3
 8004672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800467a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 800467e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f00d f978 	bl	801197a <osThreadCreate>
 800468a:	4603      	mov	r3, r0
 800468c:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <main+0x3d0>)
 800468e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 2048);
 8004690:	4b2a      	ldr	r3, [pc, #168]	; (800473c <main+0x3d4>)
 8004692:	f107 0420 	add.w	r4, r7, #32
 8004696:	461d      	mov	r5, r3
 8004698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800469a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800469c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 80046a4:	f107 0320 	add.w	r3, r7, #32
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f00d f965 	bl	801197a <osThreadCreate>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4a23      	ldr	r2, [pc, #140]	; (8004740 <main+0x3d8>)
 80046b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTune */
  osThreadDef(TaskTune, RunTaskTune, osPriorityBelowNormal, 0, 512);
 80046b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80046ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <main+0x3dc>)
 80046c0:	461c      	mov	r4, r3
 80046c2:	4615      	mov	r5, r2
 80046c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTuneHandle = osThreadCreate(osThread(TaskTune), NULL);
 80046d0:	1d3b      	adds	r3, r7, #4
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f00d f950 	bl	801197a <osThreadCreate>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <main+0x3e0>)
 80046de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80046e0:	f00d f944 	bl	801196c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80046e4:	e7fe      	b.n	80046e4 <main+0x37c>
 80046e6:	bf00      	nop
 80046e8:	20000216 	.word	0x20000216
 80046ec:	20000d8c 	.word	0x20000d8c
 80046f0:	20000d90 	.word	0x20000d90
 80046f4:	20000d94 	.word	0x20000d94
 80046f8:	20000d98 	.word	0x20000d98
 80046fc:	20000d9c 	.word	0x20000d9c
 8004700:	20000da0 	.word	0x20000da0
 8004704:	20000da4 	.word	0x20000da4
 8004708:	20000da8 	.word	0x20000da8
 800470c:	20000dac 	.word	0x20000dac
 8004710:	20000db0 	.word	0x20000db0
 8004714:	0801bd10 	.word	0x0801bd10
 8004718:	20000d70 	.word	0x20000d70
 800471c:	0801bd3c 	.word	0x0801bd3c
 8004720:	20000d74 	.word	0x20000d74
 8004724:	0801bd64 	.word	0x0801bd64
 8004728:	20000d78 	.word	0x20000d78
 800472c:	0801bd8c 	.word	0x0801bd8c
 8004730:	20000d7c 	.word	0x20000d7c
 8004734:	0801bdb4 	.word	0x0801bdb4
 8004738:	20000d80 	.word	0x20000d80
 800473c:	0801bde0 	.word	0x0801bde0
 8004740:	20000d84 	.word	0x20000d84
 8004744:	0801be08 	.word	0x0801be08
 8004748:	20000d88 	.word	0x20000d88

0800474c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b094      	sub	sp, #80	; 0x50
 8004750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004752:	f107 0320 	add.w	r3, r7, #32
 8004756:	2230      	movs	r2, #48	; 0x30
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f010 fe5f 	bl	801541e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004760:	f107 030c 	add.w	r3, r7, #12
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004770:	4b2a      	ldr	r3, [pc, #168]	; (800481c <SystemClock_Config+0xd0>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	4a29      	ldr	r2, [pc, #164]	; (800481c <SystemClock_Config+0xd0>)
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477a:	6413      	str	r3, [r2, #64]	; 0x40
 800477c:	4b27      	ldr	r3, [pc, #156]	; (800481c <SystemClock_Config+0xd0>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <SystemClock_Config+0xd4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a24      	ldr	r2, [pc, #144]	; (8004820 <SystemClock_Config+0xd4>)
 800478e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b22      	ldr	r3, [pc, #136]	; (8004820 <SystemClock_Config+0xd4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047a0:	2302      	movs	r3, #2
 80047a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047a4:	2301      	movs	r3, #1
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047a8:	2310      	movs	r3, #16
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047ac:	2302      	movs	r3, #2
 80047ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047b0:	2300      	movs	r3, #0
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80047b4:	2308      	movs	r3, #8
 80047b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80047b8:	23d8      	movs	r3, #216	; 0xd8
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047bc:	2302      	movs	r3, #2
 80047be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80047c0:	2302      	movs	r3, #2
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047c4:	f107 0320 	add.w	r3, r7, #32
 80047c8:	4618      	mov	r0, r3
 80047ca:	f007 fe85 	bl	800c4d8 <HAL_RCC_OscConfig>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80047d4:	f000 fbac 	bl	8004f30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80047d8:	f007 fe2e 	bl	800c438 <HAL_PWREx_EnableOverDrive>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80047e2:	f000 fba5 	bl	8004f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047e6:	230f      	movs	r3, #15
 80047e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047ea:	2302      	movs	r3, #2
 80047ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80047f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	2107      	movs	r1, #7
 8004804:	4618      	mov	r0, r3
 8004806:	f008 f90b 	bl	800ca20 <HAL_RCC_ClockConfig>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004810:	f000 fb8e 	bl	8004f30 <Error_Handler>
  }
}
 8004814:	bf00      	nop
 8004816:	3750      	adds	r7, #80	; 0x50
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	40007000 	.word	0x40007000

08004824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <MX_I2C1_Init+0x74>)
 800482a:	4a1c      	ldr	r2, [pc, #112]	; (800489c <MX_I2C1_Init+0x78>)
 800482c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0404E72;
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <MX_I2C1_Init+0x74>)
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <MX_I2C1_Init+0x7c>)
 8004832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004834:	4b18      	ldr	r3, [pc, #96]	; (8004898 <MX_I2C1_Init+0x74>)
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800483a:	4b17      	ldr	r3, [pc, #92]	; (8004898 <MX_I2C1_Init+0x74>)
 800483c:	2201      	movs	r2, #1
 800483e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004840:	4b15      	ldr	r3, [pc, #84]	; (8004898 <MX_I2C1_Init+0x74>)
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <MX_I2C1_Init+0x74>)
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <MX_I2C1_Init+0x74>)
 800484e:	2200      	movs	r2, #0
 8004850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <MX_I2C1_Init+0x74>)
 8004854:	2200      	movs	r2, #0
 8004856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <MX_I2C1_Init+0x74>)
 800485a:	2200      	movs	r2, #0
 800485c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800485e:	480e      	ldr	r0, [pc, #56]	; (8004898 <MX_I2C1_Init+0x74>)
 8004860:	f006 fffa 	bl	800b858 <HAL_I2C_Init>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800486a:	f000 fb61 	bl	8004f30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800486e:	2100      	movs	r1, #0
 8004870:	4809      	ldr	r0, [pc, #36]	; (8004898 <MX_I2C1_Init+0x74>)
 8004872:	f007 fd49 	bl	800c308 <HAL_I2CEx_ConfigAnalogFilter>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800487c:	f000 fb58 	bl	8004f30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004880:	2100      	movs	r1, #0
 8004882:	4805      	ldr	r0, [pc, #20]	; (8004898 <MX_I2C1_Init+0x74>)
 8004884:	f007 fd8b 	bl	800c39e <HAL_I2CEx_ConfigDigitalFilter>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800488e:	f000 fb4f 	bl	8004f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	200009c4 	.word	0x200009c4
 800489c:	40005400 	.word	0x40005400
 80048a0:	a0404e72 	.word	0xa0404e72

080048a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <MX_SPI1_Init+0x74>)
 80048aa:	4a1c      	ldr	r2, [pc, #112]	; (800491c <MX_SPI1_Init+0x78>)
 80048ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80048ae:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <MX_SPI1_Init+0x74>)
 80048b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80048b6:	4b18      	ldr	r3, [pc, #96]	; (8004918 <MX_SPI1_Init+0x74>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80048bc:	4b16      	ldr	r3, [pc, #88]	; (8004918 <MX_SPI1_Init+0x74>)
 80048be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <MX_SPI1_Init+0x74>)
 80048c6:	2202      	movs	r2, #2
 80048c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <MX_SPI1_Init+0x74>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <MX_SPI1_Init+0x74>)
 80048d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80048d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <MX_SPI1_Init+0x74>)
 80048da:	2220      	movs	r2, #32
 80048dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <MX_SPI1_Init+0x74>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <MX_SPI1_Init+0x74>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <MX_SPI1_Init+0x74>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <MX_SPI1_Init+0x74>)
 80048f2:	2207      	movs	r2, #7
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <MX_SPI1_Init+0x74>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <MX_SPI1_Init+0x74>)
 80048fe:	2200      	movs	r2, #0
 8004900:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004902:	4805      	ldr	r0, [pc, #20]	; (8004918 <MX_SPI1_Init+0x74>)
 8004904:	f008 fdee 	bl	800d4e4 <HAL_SPI_Init>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800490e:	f000 fb0f 	bl	8004f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000a18 	.word	0x20000a18
 800491c:	40013000 	.word	0x40013000

08004920 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <MX_SPI2_Init+0x74>)
 8004926:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <MX_SPI2_Init+0x78>)
 8004928:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800492a:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <MX_SPI2_Init+0x74>)
 800492c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004930:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <MX_SPI2_Init+0x74>)
 8004934:	2200      	movs	r2, #0
 8004936:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004938:	4b16      	ldr	r3, [pc, #88]	; (8004994 <MX_SPI2_Init+0x74>)
 800493a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800493e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004940:	4b14      	ldr	r3, [pc, #80]	; (8004994 <MX_SPI2_Init+0x74>)
 8004942:	2202      	movs	r2, #2
 8004944:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <MX_SPI2_Init+0x74>)
 8004948:	2201      	movs	r2, #1
 800494a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800494c:	4b11      	ldr	r3, [pc, #68]	; (8004994 <MX_SPI2_Init+0x74>)
 800494e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004952:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004954:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <MX_SPI2_Init+0x74>)
 8004956:	2228      	movs	r2, #40	; 0x28
 8004958:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800495a:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <MX_SPI2_Init+0x74>)
 800495c:	2200      	movs	r2, #0
 800495e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <MX_SPI2_Init+0x74>)
 8004962:	2200      	movs	r2, #0
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <MX_SPI2_Init+0x74>)
 8004968:	2200      	movs	r2, #0
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800496c:	4b09      	ldr	r3, [pc, #36]	; (8004994 <MX_SPI2_Init+0x74>)
 800496e:	2207      	movs	r2, #7
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <MX_SPI2_Init+0x74>)
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <MX_SPI2_Init+0x74>)
 800497a:	2200      	movs	r2, #0
 800497c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800497e:	4805      	ldr	r0, [pc, #20]	; (8004994 <MX_SPI2_Init+0x74>)
 8004980:	f008 fdb0 	bl	800d4e4 <HAL_SPI_Init>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800498a:	f000 fad1 	bl	8004f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000a7c 	.word	0x20000a7c
 8004998:	40003800 	.word	0x40003800

0800499c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b09a      	sub	sp, #104	; 0x68
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	611a      	str	r2, [r3, #16]
 80049cc:	615a      	str	r2, [r3, #20]
 80049ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049d0:	1d3b      	adds	r3, r7, #4
 80049d2:	222c      	movs	r2, #44	; 0x2c
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f010 fd21 	bl	801541e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049dc:	4b55      	ldr	r3, [pc, #340]	; (8004b34 <MX_TIM1_Init+0x198>)
 80049de:	4a56      	ldr	r2, [pc, #344]	; (8004b38 <MX_TIM1_Init+0x19c>)
 80049e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 80049e2:	4b54      	ldr	r3, [pc, #336]	; (8004b34 <MX_TIM1_Init+0x198>)
 80049e4:	22d7      	movs	r2, #215	; 0xd7
 80049e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049e8:	4b52      	ldr	r3, [pc, #328]	; (8004b34 <MX_TIM1_Init+0x198>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80049ee:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <MX_TIM1_Init+0x198>)
 80049f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80049f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f6:	4b4f      	ldr	r3, [pc, #316]	; (8004b34 <MX_TIM1_Init+0x198>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049fc:	4b4d      	ldr	r3, [pc, #308]	; (8004b34 <MX_TIM1_Init+0x198>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a02:	4b4c      	ldr	r3, [pc, #304]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004a04:	2280      	movs	r2, #128	; 0x80
 8004a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a08:	484a      	ldr	r0, [pc, #296]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004a0a:	f009 fccb 	bl	800e3a4 <HAL_TIM_Base_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004a14:	f000 fa8c 	bl	8004f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a22:	4619      	mov	r1, r3
 8004a24:	4843      	ldr	r0, [pc, #268]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004a26:	f00a fb61 	bl	800f0ec <HAL_TIM_ConfigClockSource>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004a30:	f000 fa7e 	bl	8004f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a34:	483f      	ldr	r0, [pc, #252]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004a36:	f009 fd85 	bl	800e544 <HAL_TIM_PWM_Init>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004a40:	f000 fa76 	bl	8004f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a44:	2300      	movs	r3, #0
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a54:	4619      	mov	r1, r3
 8004a56:	4837      	ldr	r0, [pc, #220]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004a58:	f00b f95c 	bl	800fd14 <HAL_TIMEx_MasterConfigSynchronization>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004a62:	f000 fa65 	bl	8004f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a66:	2360      	movs	r3, #96	; 0x60
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a72:	2300      	movs	r3, #0
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004a76:	2304      	movs	r3, #4
 8004a78:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a86:	2200      	movs	r2, #0
 8004a88:	4619      	mov	r1, r3
 8004a8a:	482a      	ldr	r0, [pc, #168]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004a8c:	f00a fa1a 	bl	800eec4 <HAL_TIM_PWM_ConfigChannel>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004a96:	f000 fa4b 	bl	8004f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4824      	ldr	r0, [pc, #144]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004aa4:	f00a fa0e 	bl	800eec4 <HAL_TIM_PWM_ConfigChannel>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004aae:	f000 fa3f 	bl	8004f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	4619      	mov	r1, r3
 8004aba:	481e      	ldr	r0, [pc, #120]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004abc:	f00a fa02 	bl	800eec4 <HAL_TIM_PWM_ConfigChannel>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004ac6:	f000 fa33 	bl	8004f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004aca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ace:	220c      	movs	r2, #12
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4818      	ldr	r0, [pc, #96]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004ad4:	f00a f9f6 	bl	800eec4 <HAL_TIM_PWM_ConfigChannel>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8004ade:	f000 fa27 	bl	8004f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004afa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4807      	ldr	r0, [pc, #28]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004b18:	f00b f98a 	bl	800fe30 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8004b22:	f000 fa05 	bl	8004f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b26:	4803      	ldr	r0, [pc, #12]	; (8004b34 <MX_TIM1_Init+0x198>)
 8004b28:	f001 ffe2 	bl	8006af0 <HAL_TIM_MspPostInit>

}
 8004b2c:	bf00      	nop
 8004b2e:	3768      	adds	r7, #104	; 0x68
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000ae0 	.word	0x20000ae0
 8004b38:	40010000 	.word	0x40010000

08004b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b42:	f107 0314 	add.w	r3, r7, #20
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004b4e:	1d3b      	adds	r3, r7, #4
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b5a:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004b5c:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <MX_TIM3_Init+0xa4>)
 8004b5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8004b60:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004b62:	226b      	movs	r2, #107	; 0x6b
 8004b64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8004b6c:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004b6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004b80:	4816      	ldr	r0, [pc, #88]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004b82:	f009 fe3b 	bl	800e7fc <HAL_TIM_IC_Init>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004b8c:	f000 f9d0 	bl	8004f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	480f      	ldr	r0, [pc, #60]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004ba0:	f00b f8b8 	bl	800fd14 <HAL_TIMEx_MasterConfigSynchronization>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8004baa:	f000 f9c1 	bl	8004f30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4805      	ldr	r0, [pc, #20]	; (8004bdc <MX_TIM3_Init+0xa0>)
 8004bc6:	f00a f8e0 	bl	800ed8a <HAL_TIM_IC_ConfigChannel>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004bd0:	f000 f9ae 	bl	8004f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004bd4:	bf00      	nop
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000b2c 	.word	0x20000b2c
 8004be0:	40000400 	.word	0x40000400

08004be4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <MX_UART4_Init+0x58>)
 8004bea:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <MX_UART4_Init+0x5c>)
 8004bec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004bee:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <MX_UART4_Init+0x58>)
 8004bf0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004bf4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <MX_UART4_Init+0x58>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <MX_UART4_Init+0x58>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <MX_UART4_Init+0x58>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <MX_UART4_Init+0x58>)
 8004c0a:	220c      	movs	r2, #12
 8004c0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <MX_UART4_Init+0x58>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <MX_UART4_Init+0x58>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c1a:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <MX_UART4_Init+0x58>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <MX_UART4_Init+0x58>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004c26:	4805      	ldr	r0, [pc, #20]	; (8004c3c <MX_UART4_Init+0x58>)
 8004c28:	f00b f99e 	bl	800ff68 <HAL_UART_Init>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004c32:	f000 f97d 	bl	8004f30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000b78 	.word	0x20000b78
 8004c40:	40004c00 	.word	0x40004c00

08004c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c48:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <MX_USART2_UART_Init+0x64>)
 8004c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004c4e:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004c80:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c82:	2210      	movs	r2, #16
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004c86:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <MX_USART2_UART_Init+0x60>)
 8004c90:	f00b f96a 	bl	800ff68 <HAL_UART_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8004c9a:	f000 f949 	bl	8004f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000c00 	.word	0x20000c00
 8004ca8:	40004400 	.word	0x40004400

08004cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004cb0:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cb2:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <MX_USART3_UART_Init+0x5c>)
 8004cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8004cb6:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cb8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004cee:	4805      	ldr	r0, [pc, #20]	; (8004d04 <MX_USART3_UART_Init+0x58>)
 8004cf0:	f00b f93a 	bl	800ff68 <HAL_UART_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004cfa:	f000 f919 	bl	8004f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000c88 	.word	0x20000c88
 8004d08:	40004800 	.word	0x40004800

08004d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <MX_DMA_Init+0x38>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	4a0b      	ldr	r2, [pc, #44]	; (8004d44 <MX_DMA_Init+0x38>)
 8004d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <MX_DMA_Init+0x38>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d26:	607b      	str	r3, [r7, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2108      	movs	r1, #8
 8004d2e:	2010      	movs	r0, #16
 8004d30:	f005 ffa8 	bl	800ac84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004d34:	2010      	movs	r0, #16
 8004d36:	f005 ffc1 	bl	800acbc <HAL_NVIC_EnableIRQ>

}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800

08004d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4e:	f107 0314 	add.w	r3, r7, #20
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	60da      	str	r2, [r3, #12]
 8004d5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d5e:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	4a40      	ldr	r2, [pc, #256]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6313      	str	r3, [r2, #48]	; 0x30
 8004d6a:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d76:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	4a3a      	ldr	r2, [pc, #232]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d7c:	f043 0310 	orr.w	r3, r3, #16
 8004d80:	6313      	str	r3, [r2, #48]	; 0x30
 8004d82:	4b38      	ldr	r3, [pc, #224]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d8e:	4b35      	ldr	r3, [pc, #212]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	4a34      	ldr	r2, [pc, #208]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9a:	4b32      	ldr	r3, [pc, #200]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	4a2e      	ldr	r2, [pc, #184]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004dac:	f043 0308 	orr.w	r3, r3, #8
 8004db0:	6313      	str	r3, [r2, #48]	; 0x30
 8004db2:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dbe:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	4a28      	ldr	r2, [pc, #160]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dca:	4b26      	ldr	r3, [pc, #152]	; (8004e64 <MX_GPIO_Init+0x11c>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ddc:	4822      	ldr	r0, [pc, #136]	; (8004e68 <MX_GPIO_Init+0x120>)
 8004dde:	f006 fd21 	bl	800b824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8004de2:	2200      	movs	r2, #0
 8004de4:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8004de8:	4820      	ldr	r0, [pc, #128]	; (8004e6c <MX_GPIO_Init+0x124>)
 8004dea:	f006 fd1b 	bl	800b824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 8004dee:	2304      	movs	r3, #4
 8004df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 8004dfa:	f107 0314 	add.w	r3, r7, #20
 8004dfe:	4619      	mov	r1, r3
 8004e00:	481b      	ldr	r0, [pc, #108]	; (8004e70 <MX_GPIO_Init+0x128>)
 8004e02:	f006 fb73 	bl	800b4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e14:	2300      	movs	r3, #0
 8004e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 8004e18:	f107 0314 	add.w	r3, r7, #20
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4812      	ldr	r0, [pc, #72]	; (8004e68 <MX_GPIO_Init+0x120>)
 8004e20:	f006 fb64 	bl	800b4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 8004e24:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8004e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e32:	2300      	movs	r3, #0
 8004e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	480b      	ldr	r0, [pc, #44]	; (8004e6c <MX_GPIO_Init+0x124>)
 8004e3e:	f006 fb55 	bl	800b4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 8004e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 8004e50:	f107 0314 	add.w	r3, r7, #20
 8004e54:	4619      	mov	r1, r3
 8004e56:	4807      	ldr	r0, [pc, #28]	; (8004e74 <MX_GPIO_Init+0x12c>)
 8004e58:	f006 fb48 	bl	800b4ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004e5c:	bf00      	nop
 8004e5e:	3728      	adds	r7, #40	; 0x28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40020c00 	.word	0x40020c00
 8004e70:	40020000 	.word	0x40020000
 8004e74:	40020400 	.word	0x40020400

08004e78 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fe f8d1 	bl	8003028 <TaskSensorData>
  /* USER CODE END 5 */
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fc fd70 	bl	800197c <TaskController>
  /* USER CODE END RunTaskController */
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fd fc8d 	bl	80027cc <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fd fb50 	bl	8002568 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fd fc5d 	bl	8002798 <TaskPower>
  /* USER CODE END RunTaskPower */
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc ff98 	bl	8001e24 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <RunTaskTune>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskTune */
void RunTaskTune(void const * argument)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskTune */
	TaskTune(argument);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fe fdfb 	bl	8003b00 <TaskTune>
  /* USER CODE END RunTaskTune */
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f24:	f005 fdb2 	bl	800aa8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f34:	b672      	cpsid	i
}
 8004f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f38:	e7fe      	b.n	8004f38 <Error_Handler+0x8>

08004f3a <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d204      	bcs.n	8004f5c <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	701a      	strb	r2, [r3, #0]
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e002      	b.n	8004f9a <_strnlen_s+0x16>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <_strnlen_s+0x28>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	1e5a      	subs	r2, r3, #1
 8004fa6:	603a      	str	r2, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f3      	bne.n	8004f94 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	1ad3      	subs	r3, r2, r3
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	2b2f      	cmp	r3, #47	; 0x2f
 8004fcc:	d904      	bls.n	8004fd8 <_is_digit+0x1a>
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	2b39      	cmp	r3, #57	; 0x39
 8004fd2:	d801      	bhi.n	8004fd8 <_is_digit+0x1a>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <_is_digit+0x1c>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	b2db      	uxtb	r3, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004ff8:	e00e      	b.n	8005018 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4618      	mov	r0, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1c59      	adds	r1, r3, #1
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6011      	str	r1, [r2, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	4403      	add	r3, r0
 8005014:	3b30      	subs	r3, #48	; 0x30
 8005016:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff ffcd 	bl	8004fbe <_is_digit>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e7      	bne.n	8004ffa <_atoi+0xe>
  }
  return i;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8005046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d125      	bne.n	800509c <_out_rev+0x68>
 8005050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d120      	bne.n	800509c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e00a      	b.n	8005076 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	1c53      	adds	r3, r2, #1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	68fc      	ldr	r4, [r7, #12]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	2020      	movs	r0, #32
 800506e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3301      	adds	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	429a      	cmp	r2, r3
 800507c:	d3f0      	bcc.n	8005060 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800507e:	e00d      	b.n	800509c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	3b01      	subs	r3, #1
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	4413      	add	r3, r2
 800508c:	7818      	ldrb	r0, [r3, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	1c53      	adds	r3, r2, #1
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	68fc      	ldr	r4, [r7, #12]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	47a0      	blx	r4
  while (len) {
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1ee      	bne.n	8005080 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <_out_rev+0x96>
    while (idx - start_idx < width) {
 80050ac:	e007      	b.n	80050be <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	1c53      	adds	r3, r2, #1
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	68fc      	ldr	r4, [r7, #12]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	2020      	movs	r0, #32
 80050bc:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d8f1      	bhi.n	80050ae <_out_rev+0x7a>
    }
  }

  return idx;
 80050ca:	687b      	ldr	r3, [r7, #4]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd90      	pop	{r4, r7, pc}

080050d4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af04      	add	r7, sp, #16
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d136      	bne.n	800515a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <_ntoa_format+0x50>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d013      	beq.n	8005124 <_ntoa_format+0x50>
 80050fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <_ntoa_format+0x3a>
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <_ntoa_format+0x50>
      width--;
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	3b01      	subs	r3, #1
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005114:	e006      	b.n	8005124 <_ntoa_format+0x50>
      buf[len++] = '0';
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	61fa      	str	r2, [r7, #28]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4413      	add	r3, r2
 8005120:	2230      	movs	r2, #48	; 0x30
 8005122:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	429a      	cmp	r2, r3
 800512a:	d20a      	bcs.n	8005142 <_ntoa_format+0x6e>
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b1f      	cmp	r3, #31
 8005130:	d9f1      	bls.n	8005116 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005132:	e006      	b.n	8005142 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	61fa      	str	r2, [r7, #28]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4413      	add	r3, r2
 800513e:	2230      	movs	r2, #48	; 0x30
 8005140:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d006      	beq.n	800515a <_ntoa_format+0x86>
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	429a      	cmp	r2, r3
 8005152:	d202      	bcs.n	800515a <_ntoa_format+0x86>
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b1f      	cmp	r3, #31
 8005158:	d9ec      	bls.n	8005134 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d058      	beq.n	8005216 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516a:	2b00      	cmp	r3, #0
 800516c:	d116      	bne.n	800519c <_ntoa_format+0xc8>
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <_ntoa_format+0xc8>
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	429a      	cmp	r2, r3
 800517a:	d003      	beq.n	8005184 <_ntoa_format+0xb0>
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d10b      	bne.n	800519c <_ntoa_format+0xc8>
      len--;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3b01      	subs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <_ntoa_format+0xc8>
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	2b10      	cmp	r3, #16
 8005194:	d102      	bne.n	800519c <_ntoa_format+0xc8>
        len--;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3b01      	subs	r3, #1
 800519a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d10f      	bne.n	80051c2 <_ntoa_format+0xee>
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <_ntoa_format+0xee>
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b1f      	cmp	r3, #31
 80051b0:	d807      	bhi.n	80051c2 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	61fa      	str	r2, [r7, #28]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4413      	add	r3, r2
 80051bc:	2278      	movs	r2, #120	; 0x78
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e01f      	b.n	8005202 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d10f      	bne.n	80051e8 <_ntoa_format+0x114>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <_ntoa_format+0x114>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b1f      	cmp	r3, #31
 80051d6:	d807      	bhi.n	80051e8 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	61fa      	str	r2, [r7, #28]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4413      	add	r3, r2
 80051e2:	2258      	movs	r2, #88	; 0x58
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e00c      	b.n	8005202 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d109      	bne.n	8005202 <_ntoa_format+0x12e>
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2b1f      	cmp	r3, #31
 80051f2:	d806      	bhi.n	8005202 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	61fa      	str	r2, [r7, #28]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4413      	add	r3, r2
 80051fe:	2262      	movs	r2, #98	; 0x62
 8005200:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	2b1f      	cmp	r3, #31
 8005206:	d806      	bhi.n	8005216 <_ntoa_format+0x142>
      buf[len++] = '0';
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	61fa      	str	r2, [r7, #28]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4413      	add	r3, r2
 8005212:	2230      	movs	r2, #48	; 0x30
 8005214:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2b1f      	cmp	r3, #31
 800521a:	d824      	bhi.n	8005266 <_ntoa_format+0x192>
    if (negative) {
 800521c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <_ntoa_format+0x160>
      buf[len++] = '-';
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4413      	add	r3, r2
 800522e:	222d      	movs	r2, #45	; 0x2d
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e018      	b.n	8005266 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	61fa      	str	r2, [r7, #28]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4413      	add	r3, r2
 8005248:	222b      	movs	r2, #43	; 0x2b
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e00b      	b.n	8005266 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4413      	add	r3, r2
 8005262:	2220      	movs	r2, #32
 8005264:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	9302      	str	r3, [sp, #8]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff fed9 	bl	8005034 <_out_rev>
 8005282:	4603      	mov	r3, r0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b096      	sub	sp, #88	; 0x58
 8005290:	af08      	add	r7, sp, #32
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800529e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80052a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a6:	f023 0310 	bic.w	r3, r3, #16
 80052aa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80052ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <_ntoa_long+0x30>
 80052b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d032      	beq.n	8005322 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80052bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80052c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052c6:	fb01 f202 	mul.w	r2, r1, r2
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80052d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052d4:	2b09      	cmp	r3, #9
 80052d6:	d804      	bhi.n	80052e2 <_ntoa_long+0x56>
 80052d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052dc:	3330      	adds	r3, #48	; 0x30
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	e00d      	b.n	80052fe <_ntoa_long+0x72>
 80052e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <_ntoa_long+0x64>
 80052ec:	2241      	movs	r2, #65	; 0x41
 80052ee:	e000      	b.n	80052f2 <_ntoa_long+0x66>
 80052f0:	2261      	movs	r2, #97	; 0x61
 80052f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052f6:	4413      	add	r3, r2
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	3b0a      	subs	r3, #10
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	1c59      	adds	r1, r3, #1
 8005302:	6379      	str	r1, [r7, #52]	; 0x34
 8005304:	3338      	adds	r3, #56	; 0x38
 8005306:	443b      	add	r3, r7
 8005308:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800530c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800530e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8005316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <_ntoa_long+0x96>
 800531c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531e:	2b1f      	cmp	r3, #31
 8005320:	d9cc      	bls.n	80052bc <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8005322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005324:	9306      	str	r3, [sp, #24]
 8005326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005328:	9305      	str	r3, [sp, #20]
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005336:	9302      	str	r3, [sp, #8]
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	f107 0310 	add.w	r3, r7, #16
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fec3 	bl	80050d4 <_ntoa_format>
 800534e:	4603      	mov	r3, r0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3738      	adds	r7, #56	; 0x38
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b096      	sub	sp, #88	; 0x58
 800535c:	af08      	add	r7, sp, #32
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800536a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800536e:	4313      	orrs	r3, r2
 8005370:	d103      	bne.n	800537a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8005372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005374:	f023 0310 	bic.w	r3, r3, #16
 8005378:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800537a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <_ntoa_long_long+0x34>
 8005384:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005388:	4313      	orrs	r3, r2
 800538a:	d037      	beq.n	80053fc <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800538c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005394:	f7fb fcf0 	bl	8000d78 <__aeabi_uldivmod>
 8005398:	4613      	mov	r3, r2
 800539a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800539e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053a2:	2b09      	cmp	r3, #9
 80053a4:	d804      	bhi.n	80053b0 <_ntoa_long_long+0x58>
 80053a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053aa:	3330      	adds	r3, #48	; 0x30
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	e00d      	b.n	80053cc <_ntoa_long_long+0x74>
 80053b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <_ntoa_long_long+0x66>
 80053ba:	2241      	movs	r2, #65	; 0x41
 80053bc:	e000      	b.n	80053c0 <_ntoa_long_long+0x68>
 80053be:	2261      	movs	r2, #97	; 0x61
 80053c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053c4:	4413      	add	r3, r2
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	3b0a      	subs	r3, #10
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	6379      	str	r1, [r7, #52]	; 0x34
 80053d2:	3338      	adds	r3, #56	; 0x38
 80053d4:	443b      	add	r3, r7
 80053d6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80053da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80053e2:	f7fb fcc9 	bl	8000d78 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80053ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053f2:	4313      	orrs	r3, r2
 80053f4:	d002      	beq.n	80053fc <_ntoa_long_long+0xa4>
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	2b1f      	cmp	r3, #31
 80053fa:	d9c7      	bls.n	800538c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80053fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005400:	9206      	str	r2, [sp, #24]
 8005402:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005404:	9205      	str	r2, [sp, #20]
 8005406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005408:	9204      	str	r2, [sp, #16]
 800540a:	9303      	str	r3, [sp, #12]
 800540c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005410:	9302      	str	r3, [sp, #8]
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	f107 0310 	add.w	r3, r7, #16
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff fe56 	bl	80050d4 <_ntoa_format>
 8005428:	4603      	mov	r3, r0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3738      	adds	r7, #56	; 0x38
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	0000      	movs	r0, r0
 8005434:	0000      	movs	r0, r0
	...

08005438 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b09d      	sub	sp, #116	; 0x74
 800543c:	af04      	add	r7, sp, #16
 800543e:	6178      	str	r0, [r7, #20]
 8005440:	6139      	str	r1, [r7, #16]
 8005442:	60fa      	str	r2, [r7, #12]
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800545a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800545e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005462:	f7fb fb59 	bl	8000b18 <__aeabi_dcmpeq>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800546c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800546e:	9303      	str	r3, [sp, #12]
 8005470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005472:	9302      	str	r3, [sp, #8]
 8005474:	2303      	movs	r3, #3
 8005476:	9301      	str	r3, [sp, #4]
 8005478:	4ba7      	ldr	r3, [pc, #668]	; (8005718 <_ftoa+0x2e0>)
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	6939      	ldr	r1, [r7, #16]
 8005482:	6978      	ldr	r0, [r7, #20]
 8005484:	f7ff fdd6 	bl	8005034 <_out_rev>
 8005488:	4603      	mov	r3, r0
 800548a:	e222      	b.n	80058d2 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005498:	f7fb fb48 	bl	8000b2c <__aeabi_dcmplt>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00f      	beq.n	80054c2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80054a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a8:	9302      	str	r3, [sp, #8]
 80054aa:	2304      	movs	r3, #4
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	4b9b      	ldr	r3, [pc, #620]	; (800571c <_ftoa+0x2e4>)
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6939      	ldr	r1, [r7, #16]
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	f7ff fdbb 	bl	8005034 <_out_rev>
 80054be:	4603      	mov	r3, r0
 80054c0:	e207      	b.n	80058d2 <_ftoa+0x49a>
  if (value > DBL_MAX)
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	4b96      	ldr	r3, [pc, #600]	; (8005720 <_ftoa+0x2e8>)
 80054c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054cc:	f7fb fb4c 	bl	8000b68 <__aeabi_dcmpgt>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01d      	beq.n	8005512 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80054d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <_ftoa+0xac>
 80054e0:	4b90      	ldr	r3, [pc, #576]	; (8005724 <_ftoa+0x2ec>)
 80054e2:	e000      	b.n	80054e6 <_ftoa+0xae>
 80054e4:	4b90      	ldr	r3, [pc, #576]	; (8005728 <_ftoa+0x2f0>)
 80054e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054e8:	f002 0204 	and.w	r2, r2, #4
 80054ec:	2a00      	cmp	r2, #0
 80054ee:	d001      	beq.n	80054f4 <_ftoa+0xbc>
 80054f0:	2204      	movs	r2, #4
 80054f2:	e000      	b.n	80054f6 <_ftoa+0xbe>
 80054f4:	2203      	movs	r2, #3
 80054f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80054f8:	9103      	str	r1, [sp, #12]
 80054fa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80054fc:	9102      	str	r1, [sp, #8]
 80054fe:	9201      	str	r2, [sp, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	6939      	ldr	r1, [r7, #16]
 8005508:	6978      	ldr	r0, [r7, #20]
 800550a:	f7ff fd93 	bl	8005034 <_out_rev>
 800550e:	4603      	mov	r3, r0
 8005510:	e1df      	b.n	80058d2 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8005512:	a37d      	add	r3, pc, #500	; (adr r3, 8005708 <_ftoa+0x2d0>)
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800551c:	f7fb fb24 	bl	8000b68 <__aeabi_dcmpgt>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <_ftoa+0x102>
 8005526:	a37a      	add	r3, pc, #488	; (adr r3, 8005710 <_ftoa+0x2d8>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005530:	f7fb fafc 	bl	8000b2c <__aeabi_dcmplt>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00f      	beq.n	800555a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800553a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800553c:	9302      	str	r3, [sp, #8]
 800553e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	ed97 0b00 	vldr	d0, [r7]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	6939      	ldr	r1, [r7, #16]
 8005550:	6978      	ldr	r0, [r7, #20]
 8005552:	f000 f9c9 	bl	80058e8 <_etoa>
 8005556:	4603      	mov	r3, r0
 8005558:	e1bb      	b.n	80058d2 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800556c:	f7fb fade 	bl	8000b2c <__aeabi_dcmplt>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <_ftoa+0x15c>
    negative = true;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800557c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005580:	f04f 0000 	mov.w	r0, #0
 8005584:	f04f 0100 	mov.w	r1, #0
 8005588:	f7fa fea6 	bl	80002d8 <__aeabi_dsub>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8005594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800559e:	2306      	movs	r3, #6
 80055a0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80055a2:	e00a      	b.n	80055ba <_ftoa+0x182>
    buf[len++] = '0';
 80055a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055aa:	3360      	adds	r3, #96	; 0x60
 80055ac:	443b      	add	r3, r7
 80055ae:	2230      	movs	r2, #48	; 0x30
 80055b0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80055b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b6:	3b01      	subs	r3, #1
 80055b8:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80055ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055bc:	2b1f      	cmp	r3, #31
 80055be:	d802      	bhi.n	80055c6 <_ftoa+0x18e>
 80055c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c2:	2b09      	cmp	r3, #9
 80055c4:	d8ee      	bhi.n	80055a4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 80055c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ca:	f7fb faed 	bl	8000ba8 <__aeabi_d2iz>
 80055ce:	4603      	mov	r3, r0
 80055d0:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80055d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80055d4:	f7fa ffce 	bl	8000574 <__aeabi_i2d>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055e0:	f7fa fe7a 	bl	80002d8 <__aeabi_dsub>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	4a4f      	ldr	r2, [pc, #316]	; (800572c <_ftoa+0x2f4>)
 80055ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	4413      	add	r3, r2
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fb f826 	bl	8000648 <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8005604:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005608:	f7fb faf6 	bl	8000bf8 <__aeabi_d2uiz>
 800560c:	4603      	mov	r3, r0
 800560e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8005610:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005612:	f7fa ff9f 	bl	8000554 <__aeabi_ui2d>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800561e:	f7fa fe5b 	bl	80002d8 <__aeabi_dsub>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	4b40      	ldr	r3, [pc, #256]	; (8005730 <_ftoa+0x2f8>)
 8005630:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005634:	f7fb fa98 	bl	8000b68 <__aeabi_dcmpgt>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <_ftoa+0x234>
    ++frac;
 800563e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005640:	3301      	adds	r3, #1
 8005642:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8005644:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005646:	f7fa ff85 	bl	8000554 <__aeabi_ui2d>
 800564a:	4a38      	ldr	r2, [pc, #224]	; (800572c <_ftoa+0x2f4>)
 800564c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f7fb fa7d 	bl	8000b54 <__aeabi_dcmpge>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01a      	beq.n	8005696 <_ftoa+0x25e>
      frac = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8005664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005666:	3301      	adds	r3, #1
 8005668:	657b      	str	r3, [r7, #84]	; 0x54
 800566a:	e014      	b.n	8005696 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <_ftoa+0x2f8>)
 8005672:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005676:	f7fb fa59 	bl	8000b2c <__aeabi_dcmplt>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8005680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <_ftoa+0x258>
 8005686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8005690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005692:	3301      	adds	r3, #1
 8005694:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8005696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005698:	2b00      	cmp	r3, #0
 800569a:	d14b      	bne.n	8005734 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800569c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800569e:	f7fa ff69 	bl	8000574 <__aeabi_i2d>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056aa:	f7fa fe15 	bl	80002d8 <__aeabi_dsub>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80056b6:	2301      	movs	r3, #1
 80056b8:	461c      	mov	r4, r3
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <_ftoa+0x2f8>)
 80056c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80056c4:	f7fb fa32 	bl	8000b2c <__aeabi_dcmplt>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <_ftoa+0x29a>
 80056ce:	2300      	movs	r3, #0
 80056d0:	461c      	mov	r4, r3
 80056d2:	b2e3      	uxtb	r3, r4
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <_ftoa+0x2ba>
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	4b13      	ldr	r3, [pc, #76]	; (8005730 <_ftoa+0x2f8>)
 80056e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80056e8:	f7fb fa3e 	bl	8000b68 <__aeabi_dcmpgt>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d064      	beq.n	80057bc <_ftoa+0x384>
 80056f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8081 	beq.w	8005800 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80056fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005700:	3301      	adds	r3, #1
 8005702:	657b      	str	r3, [r7, #84]	; 0x54
 8005704:	e07c      	b.n	8005800 <_ftoa+0x3c8>
 8005706:	bf00      	nop
 8005708:	00000000 	.word	0x00000000
 800570c:	41cdcd65 	.word	0x41cdcd65
 8005710:	00000000 	.word	0x00000000
 8005714:	c1cdcd65 	.word	0xc1cdcd65
 8005718:	0801be24 	.word	0x0801be24
 800571c:	0801be28 	.word	0x0801be28
 8005720:	7fefffff 	.word	0x7fefffff
 8005724:	0801be30 	.word	0x0801be30
 8005728:	0801be38 	.word	0x0801be38
 800572c:	0801bfc8 	.word	0x0801bfc8
 8005730:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8005734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005738:	e01f      	b.n	800577a <_ftoa+0x342>
      --count;
 800573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573c:	3b01      	subs	r3, #1
 800573e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8005740:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005742:	4b66      	ldr	r3, [pc, #408]	; (80058dc <_ftoa+0x4a4>)
 8005744:	fba3 2301 	umull	r2, r3, r3, r1
 8005748:	08da      	lsrs	r2, r3, #3
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	1aca      	subs	r2, r1, r3
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800575c:	3230      	adds	r2, #48	; 0x30
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	3360      	adds	r3, #96	; 0x60
 8005762:	443b      	add	r3, r7
 8005764:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8005768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576a:	4a5c      	ldr	r2, [pc, #368]	; (80058dc <_ftoa+0x4a4>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	08db      	lsrs	r3, r3, #3
 8005772:	653b      	str	r3, [r7, #80]	; 0x50
 8005774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800577a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577c:	2b1f      	cmp	r3, #31
 800577e:	d9dc      	bls.n	800573a <_ftoa+0x302>
 8005780:	e009      	b.n	8005796 <_ftoa+0x35e>
        break;
 8005782:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8005784:	e007      	b.n	8005796 <_ftoa+0x35e>
      buf[len++] = '0';
 8005786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800578c:	3360      	adds	r3, #96	; 0x60
 800578e:	443b      	add	r3, r7
 8005790:	2230      	movs	r2, #48	; 0x30
 8005792:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8005796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005798:	2b1f      	cmp	r3, #31
 800579a:	d804      	bhi.n	80057a6 <_ftoa+0x36e>
 800579c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579e:	1e5a      	subs	r2, r3, #1
 80057a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ef      	bne.n	8005786 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a8:	2b1f      	cmp	r3, #31
 80057aa:	d829      	bhi.n	8005800 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80057ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80057b2:	3360      	adds	r3, #96	; 0x60
 80057b4:	443b      	add	r3, r7
 80057b6:	222e      	movs	r2, #46	; 0x2e
 80057b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057bc:	e020      	b.n	8005800 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80057be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057c0:	4b47      	ldr	r3, [pc, #284]	; (80058e0 <_ftoa+0x4a8>)
 80057c2:	fb83 1302 	smull	r1, r3, r3, r2
 80057c6:	1099      	asrs	r1, r3, #2
 80057c8:	17d3      	asrs	r3, r2, #31
 80057ca:	1ac9      	subs	r1, r1, r3
 80057cc:	460b      	mov	r3, r1
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	1ad1      	subs	r1, r2, r3
 80057d6:	b2ca      	uxtb	r2, r1
 80057d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80057de:	3230      	adds	r2, #48	; 0x30
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	3360      	adds	r3, #96	; 0x60
 80057e4:	443b      	add	r3, r7
 80057e6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80057ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ec:	4a3c      	ldr	r2, [pc, #240]	; (80058e0 <_ftoa+0x4a8>)
 80057ee:	fb82 1203 	smull	r1, r2, r2, r3
 80057f2:	1092      	asrs	r2, r2, #2
 80057f4:	17db      	asrs	r3, r3, #31
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	657b      	str	r3, [r7, #84]	; 0x54
 80057fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005802:	2b1f      	cmp	r3, #31
 8005804:	d9db      	bls.n	80057be <_ftoa+0x386>
 8005806:	e000      	b.n	800580a <_ftoa+0x3d2>
      break;
 8005808:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800580a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d123      	bne.n	800585c <_ftoa+0x424>
 8005814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01e      	beq.n	800585c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800581e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005820:	2b00      	cmp	r3, #0
 8005822:	d014      	beq.n	800584e <_ftoa+0x416>
 8005824:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <_ftoa+0x3fe>
 800582c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <_ftoa+0x416>
      width--;
 8005836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005838:	3b01      	subs	r3, #1
 800583a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800583c:	e007      	b.n	800584e <_ftoa+0x416>
      buf[len++] = '0';
 800583e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005844:	3360      	adds	r3, #96	; 0x60
 8005846:	443b      	add	r3, r7
 8005848:	2230      	movs	r2, #48	; 0x30
 800584a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800584e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005852:	429a      	cmp	r2, r3
 8005854:	d202      	bcs.n	800585c <_ftoa+0x424>
 8005856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005858:	2b1f      	cmp	r3, #31
 800585a:	d9f0      	bls.n	800583e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800585c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585e:	2b1f      	cmp	r3, #31
 8005860:	d827      	bhi.n	80058b2 <_ftoa+0x47a>
    if (negative) {
 8005862:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <_ftoa+0x444>
      buf[len++] = '-';
 800586a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005870:	3360      	adds	r3, #96	; 0x60
 8005872:	443b      	add	r3, r7
 8005874:	222d      	movs	r2, #45	; 0x2d
 8005876:	f803 2c48 	strb.w	r2, [r3, #-72]
 800587a:	e01a      	b.n	80058b2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800587c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8005886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800588c:	3360      	adds	r3, #96	; 0x60
 800588e:	443b      	add	r3, r7
 8005890:	222b      	movs	r2, #43	; 0x2b
 8005892:	f803 2c48 	strb.w	r2, [r3, #-72]
 8005896:	e00c      	b.n	80058b2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8005898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <_ftoa+0x47a>
      buf[len++] = ' ';
 80058a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058a8:	3360      	adds	r3, #96	; 0x60
 80058aa:	443b      	add	r3, r7
 80058ac:	2220      	movs	r2, #32
 80058ae:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80058b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b4:	9303      	str	r3, [sp, #12]
 80058b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b8:	9302      	str	r3, [sp, #8]
 80058ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	f107 0318 	add.w	r3, r7, #24
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	6939      	ldr	r1, [r7, #16]
 80058ca:	6978      	ldr	r0, [r7, #20]
 80058cc:	f7ff fbb2 	bl	8005034 <_out_rev>
 80058d0:	4603      	mov	r3, r0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3764      	adds	r7, #100	; 0x64
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd90      	pop	{r4, r7, pc}
 80058da:	bf00      	nop
 80058dc:	cccccccd 	.word	0xcccccccd
 80058e0:	66666667 	.word	0x66666667
 80058e4:	00000000 	.word	0x00000000

080058e8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	b09f      	sub	sp, #124	; 0x7c
 80058ee:	af06      	add	r7, sp, #24
 80058f0:	6278      	str	r0, [r7, #36]	; 0x24
 80058f2:	6239      	str	r1, [r7, #32]
 80058f4:	61fa      	str	r2, [r7, #28]
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80058fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005900:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005904:	f7fb f908 	bl	8000b18 <__aeabi_dcmpeq>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d014      	beq.n	8005938 <_etoa+0x50>
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	4bc1      	ldr	r3, [pc, #772]	; (8005c18 <_etoa+0x330>)
 8005914:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005918:	f7fb f926 	bl	8000b68 <__aeabi_dcmpgt>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <_etoa+0x50>
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800592a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800592e:	f7fb f8fd 	bl	8000b2c <__aeabi_dcmplt>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d012      	beq.n	800595e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800593c:	9302      	str	r3, [sp, #8]
 800593e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	ed97 0b04 	vldr	d0, [r7, #16]
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	6a39      	ldr	r1, [r7, #32]
 8005954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005956:	f7ff fd6f 	bl	8005438 <_ftoa>
 800595a:	4603      	mov	r3, r0
 800595c:	e23f      	b.n	8005dde <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800595e:	2301      	movs	r3, #1
 8005960:	461e      	mov	r6, r3
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800596e:	f7fb f8dd 	bl	8000b2c <__aeabi_dcmplt>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <_etoa+0x94>
 8005978:	2300      	movs	r3, #0
 800597a:	461e      	mov	r6, r3
 800597c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8005980:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <_etoa+0xb4>
    value = -value;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005992:	607b      	str	r3, [r7, #4]
 8005994:	ed97 7b00 	vldr	d7, [r7]
 8005998:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800599c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80059a8:	2306      	movs	r3, #6
 80059aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80059ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80059b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	0d0a      	lsrs	r2, r1, #20
 80059c4:	2300      	movs	r3, #0
 80059c6:	4613      	mov	r3, r2
 80059c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80059d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059d6:	4690      	mov	r8, r2
 80059d8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80059dc:	4644      	mov	r4, r8
 80059de:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80059e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80059e6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80059ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80059ec:	f7fa fdc2 	bl	8000574 <__aeabi_i2d>
 80059f0:	a37d      	add	r3, pc, #500	; (adr r3, 8005be8 <_etoa+0x300>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fa fe27 	bl	8000648 <__aeabi_dmul>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	a37b      	add	r3, pc, #492	; (adr r3, 8005bf0 <_etoa+0x308>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fa fc68 	bl	80002dc <__adddf3>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4614      	mov	r4, r2
 8005a12:	461d      	mov	r5, r3
 8005a14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	4b7f      	ldr	r3, [pc, #508]	; (8005c1c <_etoa+0x334>)
 8005a1e:	f7fa fc5b 	bl	80002d8 <__aeabi_dsub>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	a373      	add	r3, pc, #460	; (adr r3, 8005bf8 <_etoa+0x310>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f7fa fe0a 	bl	8000648 <__aeabi_dmul>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	f7fa fc4e 	bl	80002dc <__adddf3>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4610      	mov	r0, r2
 8005a46:	4619      	mov	r1, r3
 8005a48:	f7fb f8ae 	bl	8000ba8 <__aeabi_d2iz>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005a50:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005a52:	f7fa fd8f 	bl	8000574 <__aeabi_i2d>
 8005a56:	a36a      	add	r3, pc, #424	; (adr r3, 8005c00 <_etoa+0x318>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa fdf4 	bl	8000648 <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	4b6c      	ldr	r3, [pc, #432]	; (8005c20 <_etoa+0x338>)
 8005a6e:	f7fa fc35 	bl	80002dc <__adddf3>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4610      	mov	r0, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f7fb f895 	bl	8000ba8 <__aeabi_d2iz>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005a82:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005a84:	f7fa fd76 	bl	8000574 <__aeabi_i2d>
 8005a88:	a35f      	add	r3, pc, #380	; (adr r3, 8005c08 <_etoa+0x320>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fddb 	bl	8000648 <__aeabi_dmul>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4614      	mov	r4, r2
 8005a98:	461d      	mov	r5, r3
 8005a9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005a9c:	f7fa fd6a 	bl	8000574 <__aeabi_i2d>
 8005aa0:	a35b      	add	r3, pc, #364	; (adr r3, 8005c10 <_etoa+0x328>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f7fa fdcf 	bl	8000648 <__aeabi_dmul>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7fa fc11 	bl	80002d8 <__aeabi_dsub>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8005abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ac2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005ac6:	f7fa fdbf 	bl	8000648 <__aeabi_dmul>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005ad8:	17da      	asrs	r2, r3, #31
 8005ada:	469a      	mov	sl, r3
 8005adc:	4693      	mov	fp, r2
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8005aea:	2200      	movs	r2, #0
 8005aec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005af0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005af4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	f7fa fbee 	bl	80002dc <__adddf3>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4690      	mov	r8, r2
 8005b06:	4699      	mov	r9, r3
 8005b08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b0c:	f04f 0000 	mov.w	r0, #0
 8005b10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b14:	f7fa fbe0 	bl	80002d8 <__aeabi_dsub>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4692      	mov	sl, r2
 8005b1e:	469b      	mov	fp, r3
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	4b3f      	ldr	r3, [pc, #252]	; (8005c24 <_etoa+0x33c>)
 8005b26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b2a:	f7fa feb7 	bl	800089c <__aeabi_ddiv>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4610      	mov	r0, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	4b3b      	ldr	r3, [pc, #236]	; (8005c28 <_etoa+0x340>)
 8005b3c:	f7fa fbce 	bl	80002dc <__adddf3>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b48:	f7fa fea8 	bl	800089c <__aeabi_ddiv>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	4b34      	ldr	r3, [pc, #208]	; (8005c2c <_etoa+0x344>)
 8005b5a:	f7fa fbbf 	bl	80002dc <__adddf3>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b66:	f7fa fe99 	bl	800089c <__aeabi_ddiv>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4650      	mov	r0, sl
 8005b70:	4659      	mov	r1, fp
 8005b72:	f7fa fbb3 	bl	80002dc <__adddf3>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	f7fa fe8d 	bl	800089c <__aeabi_ddiv>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <_etoa+0x348>)
 8005b90:	f7fa fba4 	bl	80002dc <__adddf3>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	f7fa fd54 	bl	8000648 <__aeabi_dmul>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8005ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bb0:	f7fa ffbc 	bl	8000b2c <__aeabi_dcmplt>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <_etoa+0x2ee>
    expval--;
 8005bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8005bc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <_etoa+0x340>)
 8005bca:	f7fa fe67 	bl	800089c <__aeabi_ddiv>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd8:	2b63      	cmp	r3, #99	; 0x63
 8005bda:	dc2b      	bgt.n	8005c34 <_etoa+0x34c>
 8005bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bde:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005be2:	db27      	blt.n	8005c34 <_etoa+0x34c>
 8005be4:	2304      	movs	r3, #4
 8005be6:	e026      	b.n	8005c36 <_etoa+0x34e>
 8005be8:	509f79fb 	.word	0x509f79fb
 8005bec:	3fd34413 	.word	0x3fd34413
 8005bf0:	8b60c8b3 	.word	0x8b60c8b3
 8005bf4:	3fc68a28 	.word	0x3fc68a28
 8005bf8:	636f4361 	.word	0x636f4361
 8005bfc:	3fd287a7 	.word	0x3fd287a7
 8005c00:	0979a371 	.word	0x0979a371
 8005c04:	400a934f 	.word	0x400a934f
 8005c08:	bbb55516 	.word	0xbbb55516
 8005c0c:	40026bb1 	.word	0x40026bb1
 8005c10:	fefa39ef 	.word	0xfefa39ef
 8005c14:	3fe62e42 	.word	0x3fe62e42
 8005c18:	7fefffff 	.word	0x7fefffff
 8005c1c:	3ff80000 	.word	0x3ff80000
 8005c20:	3fe00000 	.word	0x3fe00000
 8005c24:	402c0000 	.word	0x402c0000
 8005c28:	40240000 	.word	0x40240000
 8005c2c:	40180000 	.word	0x40180000
 8005c30:	3ff00000 	.word	0x3ff00000
 8005c34:	2305      	movs	r3, #5
 8005c36:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d03d      	beq.n	8005cc0 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005c44:	a368      	add	r3, pc, #416	; (adr r3, 8005de8 <_etoa+0x500>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c4e:	f7fa ff81 	bl	8000b54 <__aeabi_dcmpge>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d024      	beq.n	8005ca2 <_etoa+0x3ba>
 8005c58:	a365      	add	r3, pc, #404	; (adr r3, 8005df0 <_etoa+0x508>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c62:	f7fa ff63 	bl	8000b2c <__aeabi_dcmplt>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01a      	beq.n	8005ca2 <_etoa+0x3ba>
      if ((int)prec > expval) {
 8005c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c72:	429a      	cmp	r2, r3
 8005c74:	da07      	bge.n	8005c86 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8005c76:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c84:	e002      	b.n	8005c8c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005c8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca0:	e00e      	b.n	8005cc0 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <_etoa+0x3d8>
 8005caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <_etoa+0x3d8>
        --prec;
 8005cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8005cc6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d904      	bls.n	8005cda <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005cd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd8:	e001      	b.n	8005cde <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d004      	beq.n	8005cf4 <_etoa+0x40c>
 8005cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8005cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <_etoa+0x426>
    value /= conv.F;
 8005cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d02:	f7fa fdcb 	bl	800089c <__aeabi_ddiv>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005d12:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <_etoa+0x440>
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e003      	b.n	8005d30 <_etoa+0x448>
 8005d28:	ed97 7b04 	vldr	d7, [r7, #16]
 8005d2c:	ed87 7b02 	vstr	d7, [r7, #8]
 8005d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d38:	9302      	str	r3, [sp, #8]
 8005d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	ed97 0b02 	vldr	d0, [r7, #8]
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	6a39      	ldr	r1, [r7, #32]
 8005d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d50:	f7ff fb72 	bl	8005438 <_ftoa>
 8005d54:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8005d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03f      	beq.n	8005ddc <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <_etoa+0x484>
 8005d68:	2045      	movs	r0, #69	; 0x45
 8005d6a:	e000      	b.n	8005d6e <_etoa+0x486>
 8005d6c:	2065      	movs	r0, #101	; 0x65
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	1c53      	adds	r3, r2, #1
 8005d72:	61fb      	str	r3, [r7, #28]
 8005d74:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	6a39      	ldr	r1, [r7, #32]
 8005d7a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfb8      	it	lt
 8005d82:	425b      	neglt	r3, r3
 8005d84:	4618      	mov	r0, r3
 8005d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d88:	0fdb      	lsrs	r3, r3, #31
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	2105      	movs	r1, #5
 8005d92:	9105      	str	r1, [sp, #20]
 8005d94:	9204      	str	r2, [sp, #16]
 8005d96:	2200      	movs	r2, #0
 8005d98:	9203      	str	r2, [sp, #12]
 8005d9a:	220a      	movs	r2, #10
 8005d9c:	9202      	str	r2, [sp, #8]
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	9000      	str	r0, [sp, #0]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	6a39      	ldr	r1, [r7, #32]
 8005da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005daa:	f7ff fa6f 	bl	800528c <_ntoa_long>
 8005dae:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005db0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00f      	beq.n	8005ddc <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005dbc:	e007      	b.n	8005dce <_etoa+0x4e6>
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	1c53      	adds	r3, r2, #1
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	6a39      	ldr	r1, [r7, #32]
 8005dca:	2020      	movs	r0, #32
 8005dcc:	47a0      	blx	r4
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d8f0      	bhi.n	8005dbe <_etoa+0x4d6>
    }
  }
  return idx;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3764      	adds	r7, #100	; 0x64
 8005de2:	46bd      	mov	sp, r7
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de8:	eb1c432d 	.word	0xeb1c432d
 8005dec:	3f1a36e2 	.word	0x3f1a36e2
 8005df0:	00000000 	.word	0x00000000
 8005df4:	412e8480 	.word	0x412e8480

08005df8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	b0a3      	sub	sp, #140	; 0x8c
 8005dfe:	af0a      	add	r7, sp, #40	; 0x28
 8005e00:	6178      	str	r0, [r7, #20]
 8005e02:	6139      	str	r1, [r7, #16]
 8005e04:	60fa      	str	r2, [r7, #12]
 8005e06:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 84cf 	bne.w	80067b2 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8005e14:	4ba8      	ldr	r3, [pc, #672]	; (80060b8 <_vsnprintf+0x2c0>)
 8005e16:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8005e18:	f000 bccb 	b.w	80067b2 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b25      	cmp	r3, #37	; 0x25
 8005e22:	d00d      	beq.n	8005e40 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	7818      	ldrb	r0, [r3, #0]
 8005e28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e2a:	1c53      	adds	r3, r2, #1
 8005e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2e:	697c      	ldr	r4, [r7, #20]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6939      	ldr	r1, [r7, #16]
 8005e34:	47a0      	blx	r4
      format++;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	60bb      	str	r3, [r7, #8]
      continue;
 8005e3c:	f000 bcb9 	b.w	80067b2 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	3301      	adds	r3, #1
 8005e44:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	3b20      	subs	r3, #32
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d857      	bhi.n	8005f04 <_vsnprintf+0x10c>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <_vsnprintf+0x64>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005edd 	.word	0x08005edd
 8005e60:	08005f05 	.word	0x08005f05
 8005e64:	08005f05 	.word	0x08005f05
 8005e68:	08005ef1 	.word	0x08005ef1
 8005e6c:	08005f05 	.word	0x08005f05
 8005e70:	08005f05 	.word	0x08005f05
 8005e74:	08005f05 	.word	0x08005f05
 8005e78:	08005f05 	.word	0x08005f05
 8005e7c:	08005f05 	.word	0x08005f05
 8005e80:	08005f05 	.word	0x08005f05
 8005e84:	08005f05 	.word	0x08005f05
 8005e88:	08005ec9 	.word	0x08005ec9
 8005e8c:	08005f05 	.word	0x08005f05
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005f05 	.word	0x08005f05
 8005e98:	08005f05 	.word	0x08005f05
 8005e9c:	08005ea1 	.word	0x08005ea1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	2301      	movs	r3, #1
 8005eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb2:	e02a      	b.n	8005f0a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb6:	f043 0302 	orr.w	r3, r3, #2
 8005eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec6:	e020      	b.n	8005f0a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eca:	f043 0304 	orr.w	r3, r3, #4
 8005ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eda:	e016      	b.n	8005f0a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ede:	f043 0308 	orr.w	r3, r3, #8
 8005ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	2301      	movs	r3, #1
 8005eec:	653b      	str	r3, [r7, #80]	; 0x50
 8005eee:	e00c      	b.n	8005f0a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef2:	f043 0310 	orr.w	r3, r3, #16
 8005ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	2301      	movs	r3, #1
 8005f00:	653b      	str	r3, [r7, #80]	; 0x50
 8005f02:	e002      	b.n	8005f0a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8005f04:	2300      	movs	r3, #0
 8005f06:	653b      	str	r3, [r7, #80]	; 0x50
 8005f08:	bf00      	nop
      }
    } while (n);
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d19c      	bne.n	8005e4a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff f850 	bl	8004fbe <_is_digit>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d006      	beq.n	8005f32 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8005f24:	f107 0308 	add.w	r3, r7, #8
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff f85f 	bl	8004fec <_atoi>
 8005f2e:	65b8      	str	r0, [r7, #88]	; 0x58
 8005f30:	e01a      	b.n	8005f68 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b2a      	cmp	r3, #42	; 0x2a
 8005f38:	d116      	bne.n	8005f68 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8005f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da07      	bge.n	8005f5e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8005f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f50:	f043 0302 	orr.w	r3, r3, #2
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	425b      	negs	r3, r3
 8005f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f5c:	e001      	b.n	8005f62 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	3301      	adds	r3, #1
 8005f66:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b2e      	cmp	r3, #46	; 0x2e
 8005f72:	d127      	bne.n	8005fc4 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8005f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff f819 	bl	8004fbe <_is_digit>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d006      	beq.n	8005fa0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8005f92:	f107 0308 	add.w	r3, r7, #8
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff f828 	bl	8004fec <_atoi>
 8005f9c:	6578      	str	r0, [r7, #84]	; 0x54
 8005f9e:	e011      	b.n	8005fc4 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa6:	d10d      	bne.n	8005fc4 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8005fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005fbc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	3b68      	subs	r3, #104	; 0x68
 8005fca:	2b12      	cmp	r3, #18
 8005fcc:	d866      	bhi.n	800609c <_vsnprintf+0x2a4>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <_vsnprintf+0x1dc>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08006047 	.word	0x08006047
 8005fd8:	0800609d 	.word	0x0800609d
 8005fdc:	0800607d 	.word	0x0800607d
 8005fe0:	0800609d 	.word	0x0800609d
 8005fe4:	08006021 	.word	0x08006021
 8005fe8:	0800609d 	.word	0x0800609d
 8005fec:	0800609d 	.word	0x0800609d
 8005ff0:	0800609d 	.word	0x0800609d
 8005ff4:	0800609d 	.word	0x0800609d
 8005ff8:	0800609d 	.word	0x0800609d
 8005ffc:	0800609d 	.word	0x0800609d
 8006000:	0800609d 	.word	0x0800609d
 8006004:	0800606d 	.word	0x0800606d
 8006008:	0800609d 	.word	0x0800609d
 800600c:	0800609d 	.word	0x0800609d
 8006010:	0800609d 	.word	0x0800609d
 8006014:	0800609d 	.word	0x0800609d
 8006018:	0800609d 	.word	0x0800609d
 800601c:	0800608d 	.word	0x0800608d
      case 'l' :
        flags |= FLAGS_LONG;
 8006020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006026:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3301      	adds	r3, #1
 800602c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b6c      	cmp	r3, #108	; 0x6c
 8006034:	d134      	bne.n	80060a0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8006036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800603c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3301      	adds	r3, #1
 8006042:	60bb      	str	r3, [r7, #8]
        }
        break;
 8006044:	e02c      	b.n	80060a0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8006046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3301      	adds	r3, #1
 8006052:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b68      	cmp	r3, #104	; 0x68
 800605a:	d123      	bne.n	80060a4 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 800605c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006062:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	3301      	adds	r3, #1
 8006068:	60bb      	str	r3, [r7, #8]
        }
        break;
 800606a:	e01b      	b.n	80060a4 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800606c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800606e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006072:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	3301      	adds	r3, #1
 8006078:	60bb      	str	r3, [r7, #8]
        break;
 800607a:	e014      	b.n	80060a6 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800607c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800607e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006082:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	3301      	adds	r3, #1
 8006088:	60bb      	str	r3, [r7, #8]
        break;
 800608a:	e00c      	b.n	80060a6 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800608c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800608e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006092:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	3301      	adds	r3, #1
 8006098:	60bb      	str	r3, [r7, #8]
        break;
 800609a:	e004      	b.n	80060a6 <_vsnprintf+0x2ae>
      default :
        break;
 800609c:	bf00      	nop
 800609e:	e002      	b.n	80060a6 <_vsnprintf+0x2ae>
        break;
 80060a0:	bf00      	nop
 80060a2:	e000      	b.n	80060a6 <_vsnprintf+0x2ae>
        break;
 80060a4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b67      	cmp	r3, #103	; 0x67
 80060ac:	f300 80b8 	bgt.w	8006220 <_vsnprintf+0x428>
 80060b0:	2b25      	cmp	r3, #37	; 0x25
 80060b2:	da27      	bge.n	8006104 <_vsnprintf+0x30c>
 80060b4:	e370      	b.n	8006798 <_vsnprintf+0x9a0>
 80060b6:	bf00      	nop
 80060b8:	08004f69 	.word	0x08004f69
 80060bc:	3b69      	subs	r3, #105	; 0x69
 80060be:	2201      	movs	r2, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	f249 0241 	movw	r2, #36929	; 0x9041
 80060c8:	401a      	ands	r2, r3
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	bf14      	ite	ne
 80060ce:	2201      	movne	r2, #1
 80060d0:	2200      	moveq	r2, #0
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	f040 80aa 	bne.w	800622e <_vsnprintf+0x436>
 80060da:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80060de:	2a00      	cmp	r2, #0
 80060e0:	bf14      	ite	ne
 80060e2:	2201      	movne	r2, #1
 80060e4:	2200      	moveq	r2, #0
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	2a00      	cmp	r2, #0
 80060ea:	f040 82fb 	bne.w	80066e4 <_vsnprintf+0x8ec>
 80060ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bf14      	ite	ne
 80060f6:	2301      	movne	r3, #1
 80060f8:	2300      	moveq	r3, #0
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f040 828d 	bne.w	800661c <_vsnprintf+0x824>
 8006102:	e349      	b.n	8006798 <_vsnprintf+0x9a0>
 8006104:	3b25      	subs	r3, #37	; 0x25
 8006106:	2b42      	cmp	r3, #66	; 0x42
 8006108:	f200 8346 	bhi.w	8006798 <_vsnprintf+0x9a0>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <_vsnprintf+0x31c>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006781 	.word	0x08006781
 8006118:	08006799 	.word	0x08006799
 800611c:	08006799 	.word	0x08006799
 8006120:	08006799 	.word	0x08006799
 8006124:	08006799 	.word	0x08006799
 8006128:	08006799 	.word	0x08006799
 800612c:	08006799 	.word	0x08006799
 8006130:	08006799 	.word	0x08006799
 8006134:	08006799 	.word	0x08006799
 8006138:	08006799 	.word	0x08006799
 800613c:	08006799 	.word	0x08006799
 8006140:	08006799 	.word	0x08006799
 8006144:	08006799 	.word	0x08006799
 8006148:	08006799 	.word	0x08006799
 800614c:	08006799 	.word	0x08006799
 8006150:	08006799 	.word	0x08006799
 8006154:	08006799 	.word	0x08006799
 8006158:	08006799 	.word	0x08006799
 800615c:	08006799 	.word	0x08006799
 8006160:	08006799 	.word	0x08006799
 8006164:	08006799 	.word	0x08006799
 8006168:	08006799 	.word	0x08006799
 800616c:	08006799 	.word	0x08006799
 8006170:	08006799 	.word	0x08006799
 8006174:	08006799 	.word	0x08006799
 8006178:	08006799 	.word	0x08006799
 800617c:	08006799 	.word	0x08006799
 8006180:	08006799 	.word	0x08006799
 8006184:	08006799 	.word	0x08006799
 8006188:	08006799 	.word	0x08006799
 800618c:	08006799 	.word	0x08006799
 8006190:	08006799 	.word	0x08006799
 8006194:	08006535 	.word	0x08006535
 8006198:	080064e5 	.word	0x080064e5
 800619c:	08006535 	.word	0x08006535
 80061a0:	08006799 	.word	0x08006799
 80061a4:	08006799 	.word	0x08006799
 80061a8:	08006799 	.word	0x08006799
 80061ac:	08006799 	.word	0x08006799
 80061b0:	08006799 	.word	0x08006799
 80061b4:	08006799 	.word	0x08006799
 80061b8:	08006799 	.word	0x08006799
 80061bc:	08006799 	.word	0x08006799
 80061c0:	08006799 	.word	0x08006799
 80061c4:	08006799 	.word	0x08006799
 80061c8:	08006799 	.word	0x08006799
 80061cc:	08006799 	.word	0x08006799
 80061d0:	08006799 	.word	0x08006799
 80061d4:	08006799 	.word	0x08006799
 80061d8:	08006799 	.word	0x08006799
 80061dc:	08006799 	.word	0x08006799
 80061e0:	0800622f 	.word	0x0800622f
 80061e4:	08006799 	.word	0x08006799
 80061e8:	08006799 	.word	0x08006799
 80061ec:	08006799 	.word	0x08006799
 80061f0:	08006799 	.word	0x08006799
 80061f4:	08006799 	.word	0x08006799
 80061f8:	08006799 	.word	0x08006799
 80061fc:	08006799 	.word	0x08006799
 8006200:	08006799 	.word	0x08006799
 8006204:	08006799 	.word	0x08006799
 8006208:	0800622f 	.word	0x0800622f
 800620c:	080065a5 	.word	0x080065a5
 8006210:	0800622f 	.word	0x0800622f
 8006214:	08006535 	.word	0x08006535
 8006218:	080064e5 	.word	0x080064e5
 800621c:	08006535 	.word	0x08006535
 8006220:	2b78      	cmp	r3, #120	; 0x78
 8006222:	f300 82b9 	bgt.w	8006798 <_vsnprintf+0x9a0>
 8006226:	2b69      	cmp	r3, #105	; 0x69
 8006228:	f6bf af48 	bge.w	80060bc <_vsnprintf+0x2c4>
 800622c:	e2b4      	b.n	8006798 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b78      	cmp	r3, #120	; 0x78
 8006234:	d003      	beq.n	800623e <_vsnprintf+0x446>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b58      	cmp	r3, #88	; 0x58
 800623c:	d102      	bne.n	8006244 <_vsnprintf+0x44c>
          base = 16U;
 800623e:	2310      	movs	r3, #16
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
 8006242:	e013      	b.n	800626c <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b6f      	cmp	r3, #111	; 0x6f
 800624a:	d102      	bne.n	8006252 <_vsnprintf+0x45a>
          base =  8U;
 800624c:	2308      	movs	r3, #8
 800624e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006250:	e00c      	b.n	800626c <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b62      	cmp	r3, #98	; 0x62
 8006258:	d102      	bne.n	8006260 <_vsnprintf+0x468>
          base =  2U;
 800625a:	2302      	movs	r3, #2
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
 800625e:	e005      	b.n	800626c <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8006260:	230a      	movs	r3, #10
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8006264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006266:	f023 0310 	bic.w	r3, r3, #16
 800626a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b58      	cmp	r3, #88	; 0x58
 8006272:	d103      	bne.n	800627c <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8006274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006276:	f043 0320 	orr.w	r3, r3, #32
 800627a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b69      	cmp	r3, #105	; 0x69
 8006282:	d007      	beq.n	8006294 <_vsnprintf+0x49c>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b64      	cmp	r3, #100	; 0x64
 800628a:	d003      	beq.n	8006294 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800628c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800628e:	f023 030c 	bic.w	r3, r3, #12
 8006292:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8006294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 800629e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b69      	cmp	r3, #105	; 0x69
 80062ac:	d004      	beq.n	80062b8 <_vsnprintf+0x4c0>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b64      	cmp	r3, #100	; 0x64
 80062b4:	f040 8098 	bne.w	80063e8 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80062b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d031      	beq.n	8006326 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80062c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062c6:	3307      	adds	r3, #7
 80062c8:	f023 0307 	bic.w	r3, r3, #7
 80062cc:	f103 0208 	add.w	r2, r3, #8
 80062d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80062dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	da06      	bge.n	80062f2 <_vsnprintf+0x4fa>
 80062e4:	2100      	movs	r1, #0
 80062e6:	f1d2 0800 	rsbs	r8, r2, #0
 80062ea:	eb61 0903 	sbc.w	r9, r1, r3
 80062ee:	4642      	mov	r2, r8
 80062f0:	464b      	mov	r3, r9
 80062f2:	69f9      	ldr	r1, [r7, #28]
 80062f4:	0fc9      	lsrs	r1, r1, #31
 80062f6:	b2c9      	uxtb	r1, r1
 80062f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80062fa:	2400      	movs	r4, #0
 80062fc:	4682      	mov	sl, r0
 80062fe:	46a3      	mov	fp, r4
 8006300:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006302:	9008      	str	r0, [sp, #32]
 8006304:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006306:	9007      	str	r0, [sp, #28]
 8006308:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800630a:	9006      	str	r0, [sp, #24]
 800630c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006310:	9102      	str	r1, [sp, #8]
 8006312:	e9cd 2300 	strd	r2, r3, [sp]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800631a:	6939      	ldr	r1, [r7, #16]
 800631c:	6978      	ldr	r0, [r7, #20]
 800631e:	f7ff f81b 	bl	8005358 <_ntoa_long_long>
 8006322:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8006324:	e0da      	b.n	80064dc <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8006326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d020      	beq.n	8006372 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8006330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006334:	1d1a      	adds	r2, r3, #4
 8006336:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	bfb8      	it	lt
 8006344:	425b      	neglt	r3, r3
 8006346:	4619      	mov	r1, r3
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	0fdb      	lsrs	r3, r3, #31
 800634c:	b2db      	uxtb	r3, r3
 800634e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006350:	9205      	str	r2, [sp, #20]
 8006352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006354:	9204      	str	r2, [sp, #16]
 8006356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006358:	9203      	str	r2, [sp, #12]
 800635a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800635c:	9202      	str	r2, [sp, #8]
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	9100      	str	r1, [sp, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006366:	6939      	ldr	r1, [r7, #16]
 8006368:	6978      	ldr	r0, [r7, #20]
 800636a:	f7fe ff8f 	bl	800528c <_ntoa_long>
 800636e:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8006370:	e0b4      	b.n	80064dc <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8006372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <_vsnprintf+0x594>
 800637c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006380:	1d1a      	adds	r2, r3, #4
 8006382:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e012      	b.n	80063b2 <_vsnprintf+0x5ba>
 800638c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <_vsnprintf+0x5ae>
 8006396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800639a:	1d1a      	adds	r2, r3, #4
 800639c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	e005      	b.n	80063b2 <_vsnprintf+0x5ba>
 80063a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063aa:	1d1a      	adds	r2, r3, #4
 80063ac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfb8      	it	lt
 80063ba:	425b      	neglt	r3, r3
 80063bc:	4619      	mov	r1, r3
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	0fdb      	lsrs	r3, r3, #31
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063c6:	9205      	str	r2, [sp, #20]
 80063c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ca:	9204      	str	r2, [sp, #16]
 80063cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063ce:	9203      	str	r2, [sp, #12]
 80063d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063d2:	9202      	str	r2, [sp, #8]
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	9100      	str	r1, [sp, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063dc:	6939      	ldr	r1, [r7, #16]
 80063de:	6978      	ldr	r0, [r7, #20]
 80063e0:	f7fe ff54 	bl	800528c <_ntoa_long>
 80063e4:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80063e6:	e079      	b.n	80064dc <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80063e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d022      	beq.n	8006438 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80063f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063f6:	3307      	adds	r3, #7
 80063f8:	f023 0307 	bic.w	r3, r3, #7
 80063fc:	f103 0208 	add.w	r2, r3, #8
 8006400:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800640a:	2000      	movs	r0, #0
 800640c:	460d      	mov	r5, r1
 800640e:	4606      	mov	r6, r0
 8006410:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006412:	9108      	str	r1, [sp, #32]
 8006414:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006416:	9107      	str	r1, [sp, #28]
 8006418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800641a:	9106      	str	r1, [sp, #24]
 800641c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8006420:	2100      	movs	r1, #0
 8006422:	9102      	str	r1, [sp, #8]
 8006424:	e9cd 2300 	strd	r2, r3, [sp]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800642c:	6939      	ldr	r1, [r7, #16]
 800642e:	6978      	ldr	r0, [r7, #20]
 8006430:	f7fe ff92 	bl	8005358 <_ntoa_long_long>
 8006434:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006436:	e051      	b.n	80064dc <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8006438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d018      	beq.n	8006474 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8006442:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006450:	9205      	str	r2, [sp, #20]
 8006452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006454:	9204      	str	r2, [sp, #16]
 8006456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006458:	9203      	str	r2, [sp, #12]
 800645a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800645c:	9202      	str	r2, [sp, #8]
 800645e:	2200      	movs	r2, #0
 8006460:	9201      	str	r2, [sp, #4]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006468:	6939      	ldr	r1, [r7, #16]
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f7fe ff0e 	bl	800528c <_ntoa_long>
 8006470:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006472:	e033      	b.n	80064dc <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8006474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <_vsnprintf+0x696>
 800647e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006482:	1d1a      	adds	r2, r3, #4
 8006484:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	e012      	b.n	80064b4 <_vsnprintf+0x6bc>
 800648e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <_vsnprintf+0x6b0>
 8006498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800649c:	1d1a      	adds	r2, r3, #4
 800649e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	e005      	b.n	80064b4 <_vsnprintf+0x6bc>
 80064a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064ac:	1d1a      	adds	r2, r3, #4
 80064ae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80064b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c0:	9303      	str	r3, [sp, #12]
 80064c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c4:	9302      	str	r3, [sp, #8]
 80064c6:	2300      	movs	r3, #0
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064d2:	6939      	ldr	r1, [r7, #16]
 80064d4:	6978      	ldr	r0, [r7, #20]
 80064d6:	f7fe fed9 	bl	800528c <_ntoa_long>
 80064da:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	3301      	adds	r3, #1
 80064e0:	60bb      	str	r3, [r7, #8]
        break;
 80064e2:	e166      	b.n	80067b2 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b46      	cmp	r3, #70	; 0x46
 80064ea:	d103      	bne.n	80064f4 <_vsnprintf+0x6fc>
 80064ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ee:	f043 0320 	orr.w	r3, r3, #32
 80064f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80064f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064f8:	3307      	adds	r3, #7
 80064fa:	f023 0307 	bic.w	r3, r3, #7
 80064fe:	f103 0208 	add.w	r2, r3, #8
 8006502:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006506:	ed93 7b00 	vldr	d7, [r3]
 800650a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800650c:	9302      	str	r3, [sp, #8]
 800650e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	eeb0 0a47 	vmov.f32	s0, s14
 800651a:	eef0 0a67 	vmov.f32	s1, s15
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006522:	6939      	ldr	r1, [r7, #16]
 8006524:	6978      	ldr	r0, [r7, #20]
 8006526:	f7fe ff87 	bl	8005438 <_ftoa>
 800652a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	3301      	adds	r3, #1
 8006530:	60bb      	str	r3, [r7, #8]
        break;
 8006532:	e13e      	b.n	80067b2 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b67      	cmp	r3, #103	; 0x67
 800653a:	d003      	beq.n	8006544 <_vsnprintf+0x74c>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b47      	cmp	r3, #71	; 0x47
 8006542:	d103      	bne.n	800654c <_vsnprintf+0x754>
 8006544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006546:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800654a:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b45      	cmp	r3, #69	; 0x45
 8006552:	d003      	beq.n	800655c <_vsnprintf+0x764>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b47      	cmp	r3, #71	; 0x47
 800655a:	d103      	bne.n	8006564 <_vsnprintf+0x76c>
 800655c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800655e:	f043 0320 	orr.w	r3, r3, #32
 8006562:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006568:	3307      	adds	r3, #7
 800656a:	f023 0307 	bic.w	r3, r3, #7
 800656e:	f103 0208 	add.w	r2, r3, #8
 8006572:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006576:	ed93 7b00 	vldr	d7, [r3]
 800657a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800657c:	9302      	str	r3, [sp, #8]
 800657e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	eeb0 0a47 	vmov.f32	s0, s14
 800658a:	eef0 0a67 	vmov.f32	s1, s15
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006592:	6939      	ldr	r1, [r7, #16]
 8006594:	6978      	ldr	r0, [r7, #20]
 8006596:	f7ff f9a7 	bl	80058e8 <_etoa>
 800659a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	3301      	adds	r3, #1
 80065a0:	60bb      	str	r3, [r7, #8]
        break;
 80065a2:	e106      	b.n	80067b2 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80065a4:	2301      	movs	r3, #1
 80065a6:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80065a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10e      	bne.n	80065d0 <_vsnprintf+0x7d8>
          while (l++ < width) {
 80065b2:	e007      	b.n	80065c4 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 80065b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065b6:	1c53      	adds	r3, r2, #1
 80065b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ba:	697c      	ldr	r4, [r7, #20]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6939      	ldr	r1, [r7, #16]
 80065c0:	2020      	movs	r0, #32
 80065c2:	47a0      	blx	r4
          while (l++ < width) {
 80065c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	647a      	str	r2, [r7, #68]	; 0x44
 80065ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d8f1      	bhi.n	80065b4 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80065d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065d4:	1d1a      	adds	r2, r3, #4
 80065d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b2d8      	uxtb	r0, r3
 80065de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065e0:	1c53      	adds	r3, r2, #1
 80065e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e4:	697c      	ldr	r4, [r7, #20]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6939      	ldr	r1, [r7, #16]
 80065ea:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80065ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00e      	beq.n	8006614 <_vsnprintf+0x81c>
          while (l++ < width) {
 80065f6:	e007      	b.n	8006608 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 80065f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065fa:	1c53      	adds	r3, r2, #1
 80065fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fe:	697c      	ldr	r4, [r7, #20]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6939      	ldr	r1, [r7, #16]
 8006604:	2020      	movs	r0, #32
 8006606:	47a0      	blx	r4
          while (l++ < width) {
 8006608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	647a      	str	r2, [r7, #68]	; 0x44
 800660e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006610:	429a      	cmp	r2, r3
 8006612:	d8f1      	bhi.n	80065f8 <_vsnprintf+0x800>
          }
        }
        format++;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3301      	adds	r3, #1
 8006618:	60bb      	str	r3, [r7, #8]
        break;
 800661a:	e0ca      	b.n	80067b2 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800661c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800662a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <_vsnprintf+0x83c>
 8006630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006632:	e001      	b.n	8006638 <_vsnprintf+0x840>
 8006634:	f04f 33ff 	mov.w	r3, #4294967295
 8006638:	4619      	mov	r1, r3
 800663a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800663c:	f7fe fca2 	bl	8004f84 <_strnlen_s>
 8006640:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8006642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 800664c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800664e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006650:	4293      	cmp	r3, r2
 8006652:	bf28      	it	cs
 8006654:	4613      	movcs	r3, r2
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8006658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11a      	bne.n	8006698 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8006662:	e007      	b.n	8006674 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8006664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006666:	1c53      	adds	r3, r2, #1
 8006668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666a:	697c      	ldr	r4, [r7, #20]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6939      	ldr	r1, [r7, #16]
 8006670:	2020      	movs	r0, #32
 8006672:	47a0      	blx	r4
          while (l++ < width) {
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	63fa      	str	r2, [r7, #60]	; 0x3c
 800667a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800667c:	429a      	cmp	r2, r3
 800667e:	d8f1      	bhi.n	8006664 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006680:	e00a      	b.n	8006698 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8006682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	643a      	str	r2, [r7, #64]	; 0x40
 8006688:	7818      	ldrb	r0, [r3, #0]
 800668a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800668c:	1c53      	adds	r3, r2, #1
 800668e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006690:	697c      	ldr	r4, [r7, #20]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6939      	ldr	r1, [r7, #16]
 8006696:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <_vsnprintf+0x8bc>
 80066a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0eb      	beq.n	8006682 <_vsnprintf+0x88a>
 80066aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	657a      	str	r2, [r7, #84]	; 0x54
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e6      	bne.n	8006682 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80066b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00e      	beq.n	80066dc <_vsnprintf+0x8e4>
          while (l++ < width) {
 80066be:	e007      	b.n	80066d0 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 80066c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066c2:	1c53      	adds	r3, r2, #1
 80066c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c6:	697c      	ldr	r4, [r7, #20]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6939      	ldr	r1, [r7, #16]
 80066cc:	2020      	movs	r0, #32
 80066ce:	47a0      	blx	r4
          while (l++ < width) {
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066d8:	429a      	cmp	r2, r3
 80066da:	d8f1      	bhi.n	80066c0 <_vsnprintf+0x8c8>
          }
        }
        format++;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	3301      	adds	r3, #1
 80066e0:	60bb      	str	r3, [r7, #8]
        break;
 80066e2:	e066      	b.n	80067b2 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80066e4:	2308      	movs	r3, #8
 80066e6:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80066e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ea:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80066ee:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80066f0:	2300      	movs	r3, #0
 80066f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80066f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d023      	beq.n	8006746 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80066fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	2300      	movs	r3, #0
 800670e:	603a      	str	r2, [r7, #0]
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006714:	9308      	str	r3, [sp, #32]
 8006716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006718:	9307      	str	r3, [sp, #28]
 800671a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671c:	9306      	str	r3, [sp, #24]
 800671e:	f04f 0210 	mov.w	r2, #16
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800672a:	2300      	movs	r3, #0
 800672c:	9302      	str	r3, [sp, #8]
 800672e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006732:	e9cd 3400 	strd	r3, r4, [sp]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800673a:	6939      	ldr	r1, [r7, #16]
 800673c:	6978      	ldr	r0, [r7, #20]
 800673e:	f7fe fe0b 	bl	8005358 <_ntoa_long_long>
 8006742:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006744:	e018      	b.n	8006778 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8006746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800674a:	1d1a      	adds	r2, r3, #4
 800674c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006756:	9305      	str	r3, [sp, #20]
 8006758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800675e:	9303      	str	r3, [sp, #12]
 8006760:	2310      	movs	r3, #16
 8006762:	9302      	str	r3, [sp, #8]
 8006764:	2300      	movs	r3, #0
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	9200      	str	r2, [sp, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800676e:	6939      	ldr	r1, [r7, #16]
 8006770:	6978      	ldr	r0, [r7, #20]
 8006772:	f7fe fd8b 	bl	800528c <_ntoa_long>
 8006776:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	3301      	adds	r3, #1
 800677c:	60bb      	str	r3, [r7, #8]
        break;
 800677e:	e018      	b.n	80067b2 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8006780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006782:	1c53      	adds	r3, r2, #1
 8006784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006786:	697c      	ldr	r4, [r7, #20]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6939      	ldr	r1, [r7, #16]
 800678c:	2025      	movs	r0, #37	; 0x25
 800678e:	47a0      	blx	r4
        format++;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	3301      	adds	r3, #1
 8006794:	60bb      	str	r3, [r7, #8]
        break;
 8006796:	e00c      	b.n	80067b2 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	7818      	ldrb	r0, [r3, #0]
 800679c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800679e:	1c53      	adds	r3, r2, #1
 80067a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a2:	697c      	ldr	r4, [r7, #20]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6939      	ldr	r1, [r7, #16]
 80067a8:	47a0      	blx	r4
        format++;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60bb      	str	r3, [r7, #8]
        break;
 80067b0:	bf00      	nop
  while (*format)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f47f ab30 	bne.w	8005e1c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80067bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d302      	bcc.n	80067ca <_vsnprintf+0x9d2>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	e000      	b.n	80067cc <_vsnprintf+0x9d4>
 80067ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067cc:	697c      	ldr	r4, [r7, #20]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6939      	ldr	r1, [r7, #16]
 80067d2:	2000      	movs	r0, #0
 80067d4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80067d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3764      	adds	r7, #100	; 0x64
 80067dc:	46bd      	mov	sp, r7
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	bf00      	nop

080067e4 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80067e4:	b40e      	push	{r1, r2, r3}
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b087      	sub	sp, #28
 80067ea:	af02      	add	r7, sp, #8
 80067ec:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80067ee:	f107 0320 	add.w	r3, r7, #32
 80067f2:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f04f 32ff 	mov.w	r2, #4294967295
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4805      	ldr	r0, [pc, #20]	; (8006818 <sprintf_+0x34>)
 8006802:	f7ff faf9 	bl	8005df8 <_vsnprintf>
 8006806:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006814:	b003      	add	sp, #12
 8006816:	4770      	bx	lr
 8006818:	08004f3b 	.word	0x08004f3b

0800681c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006822:	4b11      	ldr	r3, [pc, #68]	; (8006868 <HAL_MspInit+0x4c>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	4a10      	ldr	r2, [pc, #64]	; (8006868 <HAL_MspInit+0x4c>)
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682c:	6413      	str	r3, [r2, #64]	; 0x40
 800682e:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <HAL_MspInit+0x4c>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006836:	607b      	str	r3, [r7, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800683a:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <HAL_MspInit+0x4c>)
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <HAL_MspInit+0x4c>)
 8006840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006844:	6453      	str	r3, [r2, #68]	; 0x44
 8006846:	4b08      	ldr	r3, [pc, #32]	; (8006868 <HAL_MspInit+0x4c>)
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006852:	2200      	movs	r2, #0
 8006854:	210f      	movs	r1, #15
 8006856:	f06f 0001 	mvn.w	r0, #1
 800685a:	f004 fa13 	bl	800ac84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800

0800686c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b0aa      	sub	sp, #168	; 0xa8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006874:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	609a      	str	r2, [r3, #8]
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	2280      	movs	r2, #128	; 0x80
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f00e fdc6 	bl	801541e <memset>
  if(hi2c->Instance==I2C1)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a22      	ldr	r2, [pc, #136]	; (8006920 <HAL_I2C_MspInit+0xb4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d13c      	bne.n	8006916 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800689c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80068a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068a6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068a8:	f107 0314 	add.w	r3, r7, #20
 80068ac:	4618      	mov	r0, r3
 80068ae:	f006 facf 	bl	800ce50 <HAL_RCCEx_PeriphCLKConfig>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80068b8:	f7fe fb3a 	bl	8004f30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <HAL_I2C_MspInit+0xb8>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	4a18      	ldr	r2, [pc, #96]	; (8006924 <HAL_I2C_MspInit+0xb8>)
 80068c2:	f043 0302 	orr.w	r3, r3, #2
 80068c6:	6313      	str	r3, [r2, #48]	; 0x30
 80068c8:	4b16      	ldr	r3, [pc, #88]	; (8006924 <HAL_I2C_MspInit+0xb8>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 80068d4:	23c0      	movs	r3, #192	; 0xc0
 80068d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068da:	2312      	movs	r3, #18
 80068dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e6:	2303      	movs	r3, #3
 80068e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80068ec:	2304      	movs	r3, #4
 80068ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80068f6:	4619      	mov	r1, r3
 80068f8:	480b      	ldr	r0, [pc, #44]	; (8006928 <HAL_I2C_MspInit+0xbc>)
 80068fa:	f004 fdf7 	bl	800b4ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_I2C_MspInit+0xb8>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <HAL_I2C_MspInit+0xb8>)
 8006904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006908:	6413      	str	r3, [r2, #64]	; 0x40
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <HAL_I2C_MspInit+0xb8>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006916:	bf00      	nop
 8006918:	37a8      	adds	r7, #168	; 0xa8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40005400 	.word	0x40005400
 8006924:	40023800 	.word	0x40023800
 8006928:	40020400 	.word	0x40020400

0800692c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08c      	sub	sp, #48	; 0x30
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006934:	f107 031c 	add.w	r3, r7, #28
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a2e      	ldr	r2, [pc, #184]	; (8006a04 <HAL_SPI_MspInit+0xd8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d128      	bne.n	80069a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800694e:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	4a2d      	ldr	r2, [pc, #180]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 8006954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006958:	6453      	str	r3, [r2, #68]	; 0x44
 800695a:	4b2b      	ldr	r3, [pc, #172]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006966:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	4a27      	ldr	r2, [pc, #156]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6313      	str	r3, [r2, #48]	; 0x30
 8006972:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 800697e:	23f0      	movs	r3, #240	; 0xf0
 8006980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006982:	2302      	movs	r3, #2
 8006984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006986:	2300      	movs	r3, #0
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800698a:	2303      	movs	r3, #3
 800698c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800698e:	2305      	movs	r3, #5
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006992:	f107 031c 	add.w	r3, r7, #28
 8006996:	4619      	mov	r1, r3
 8006998:	481c      	ldr	r0, [pc, #112]	; (8006a0c <HAL_SPI_MspInit+0xe0>)
 800699a:	f004 fda7 	bl	800b4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800699e:	e02d      	b.n	80069fc <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1a      	ldr	r2, [pc, #104]	; (8006a10 <HAL_SPI_MspInit+0xe4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d128      	bne.n	80069fc <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80069aa:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	4a16      	ldr	r2, [pc, #88]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 80069b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069b4:	6413      	str	r3, [r2, #64]	; 0x40
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 80069c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c6:	4a10      	ldr	r2, [pc, #64]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 80069c8:	f043 0302 	orr.w	r3, r3, #2
 80069cc:	6313      	str	r3, [r2, #48]	; 0x30
 80069ce:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <HAL_SPI_MspInit+0xdc>)
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 80069da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80069de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e0:	2302      	movs	r3, #2
 80069e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069e8:	2303      	movs	r3, #3
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80069ec:	2305      	movs	r3, #5
 80069ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069f0:	f107 031c 	add.w	r3, r7, #28
 80069f4:	4619      	mov	r1, r3
 80069f6:	4807      	ldr	r0, [pc, #28]	; (8006a14 <HAL_SPI_MspInit+0xe8>)
 80069f8:	f004 fd78 	bl	800b4ec <HAL_GPIO_Init>
}
 80069fc:	bf00      	nop
 80069fe:	3730      	adds	r7, #48	; 0x30
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40013000 	.word	0x40013000
 8006a08:	40023800 	.word	0x40023800
 8006a0c:	40020000 	.word	0x40020000
 8006a10:	40003800 	.word	0x40003800
 8006a14:	40020400 	.word	0x40020400

08006a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <HAL_TIM_Base_MspInit+0x38>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d10b      	bne.n	8006a42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <HAL_TIM_Base_MspInit+0x3c>)
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <HAL_TIM_Base_MspInit+0x3c>)
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	6453      	str	r3, [r2, #68]	; 0x44
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <HAL_TIM_Base_MspInit+0x3c>)
 8006a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40023800 	.word	0x40023800

08006a58 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a60:	f107 0314 	add.w	r3, r7, #20
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a1b      	ldr	r2, [pc, #108]	; (8006ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d12f      	bne.n	8006ada <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <HAL_TIM_IC_MspInit+0x90>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	4a1a      	ldr	r2, [pc, #104]	; (8006ae8 <HAL_TIM_IC_MspInit+0x90>)
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	6413      	str	r3, [r2, #64]	; 0x40
 8006a86:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <HAL_TIM_IC_MspInit+0x90>)
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a92:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <HAL_TIM_IC_MspInit+0x90>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <HAL_TIM_IC_MspInit+0x90>)
 8006a98:	f043 0304 	orr.w	r3, r3, #4
 8006a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <HAL_TIM_IC_MspInit+0x90>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006aba:	2302      	movs	r3, #2
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4809      	ldr	r0, [pc, #36]	; (8006aec <HAL_TIM_IC_MspInit+0x94>)
 8006ac6:	f004 fd11 	bl	800b4ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8006aca:	2200      	movs	r2, #0
 8006acc:	2106      	movs	r1, #6
 8006ace:	201d      	movs	r0, #29
 8006ad0:	f004 f8d8 	bl	800ac84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006ad4:	201d      	movs	r0, #29
 8006ad6:	f004 f8f1 	bl	800acbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006ada:	bf00      	nop
 8006adc:	3728      	adds	r7, #40	; 0x28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	40020800 	.word	0x40020800

08006af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af8:	f107 030c 	add.w	r3, r7, #12
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	609a      	str	r2, [r3, #8]
 8006b04:	60da      	str	r2, [r3, #12]
 8006b06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a11      	ldr	r2, [pc, #68]	; (8006b54 <HAL_TIM_MspPostInit+0x64>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d11c      	bne.n	8006b4c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <HAL_TIM_MspPostInit+0x68>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	4a10      	ldr	r2, [pc, #64]	; (8006b58 <HAL_TIM_MspPostInit+0x68>)
 8006b18:	f043 0310 	orr.w	r3, r3, #16
 8006b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <HAL_TIM_MspPostInit+0x68>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	60bb      	str	r3, [r7, #8]
 8006b28:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 8006b2a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8006b2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b30:	2302      	movs	r3, #2
 8006b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	4619      	mov	r1, r3
 8006b46:	4805      	ldr	r0, [pc, #20]	; (8006b5c <HAL_TIM_MspPostInit+0x6c>)
 8006b48:	f004 fcd0 	bl	800b4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006b4c:	bf00      	nop
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40010000 	.word	0x40010000
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	40021000 	.word	0x40021000

08006b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b0ae      	sub	sp, #184	; 0xb8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	609a      	str	r2, [r3, #8]
 8006b74:	60da      	str	r2, [r3, #12]
 8006b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	2100      	movs	r1, #0
 8006b80:	4618      	mov	r0, r3
 8006b82:	f00e fc4c 	bl	801541e <memset>
  if(huart->Instance==UART4)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a83      	ldr	r2, [pc, #524]	; (8006d98 <HAL_UART_MspInit+0x238>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d144      	bne.n	8006c1a <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8006b96:	2340      	movs	r3, #64	; 0x40
 8006b98:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f006 f956 	bl	800ce50 <HAL_RCCEx_PeriphCLKConfig>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006baa:	f7fe f9c1 	bl	8004f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006bae:	4b7b      	ldr	r3, [pc, #492]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	4a7a      	ldr	r2, [pc, #488]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bba:	4b78      	ldr	r3, [pc, #480]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bc2:	623b      	str	r3, [r7, #32]
 8006bc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bc6:	4b75      	ldr	r3, [pc, #468]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	4a74      	ldr	r2, [pc, #464]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bd2:	4b72      	ldr	r3, [pc, #456]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 8006bde:	2303      	movs	r3, #3
 8006be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be4:	2302      	movs	r3, #2
 8006be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4867      	ldr	r0, [pc, #412]	; (8006da0 <HAL_UART_MspInit+0x240>)
 8006c04:	f004 fc72 	bl	800b4ec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2106      	movs	r1, #6
 8006c0c:	2034      	movs	r0, #52	; 0x34
 8006c0e:	f004 f839 	bl	800ac84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006c12:	2034      	movs	r0, #52	; 0x34
 8006c14:	f004 f852 	bl	800acbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006c18:	e0b9      	b.n	8006d8e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a61      	ldr	r2, [pc, #388]	; (8006da4 <HAL_UART_MspInit+0x244>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d172      	bne.n	8006d0a <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8006c28:	2304      	movs	r3, #4
 8006c2a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c30:	4618      	mov	r0, r3
 8006c32:	f006 f90d 	bl	800ce50 <HAL_RCCEx_PeriphCLKConfig>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8006c3c:	f7fe f978 	bl	8004f30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006c40:	4b56      	ldr	r3, [pc, #344]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	4a55      	ldr	r2, [pc, #340]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8006c4c:	4b53      	ldr	r3, [pc, #332]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c58:	4b50      	ldr	r3, [pc, #320]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	4a4f      	ldr	r2, [pc, #316]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006c5e:	f043 0308 	orr.w	r3, r3, #8
 8006c62:	6313      	str	r3, [r2, #48]	; 0x30
 8006c64:	4b4d      	ldr	r3, [pc, #308]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8006c70:	2360      	movs	r3, #96	; 0x60
 8006c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c76:	2302      	movs	r3, #2
 8006c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c82:	2303      	movs	r3, #3
 8006c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006c88:	2307      	movs	r3, #7
 8006c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4844      	ldr	r0, [pc, #272]	; (8006da8 <HAL_UART_MspInit+0x248>)
 8006c96:	f004 fc29 	bl	800b4ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006c9a:	4b44      	ldr	r3, [pc, #272]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006c9c:	4a44      	ldr	r2, [pc, #272]	; (8006db0 <HAL_UART_MspInit+0x250>)
 8006c9e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006ca0:	4b42      	ldr	r3, [pc, #264]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ca6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ca8:	4b40      	ldr	r3, [pc, #256]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cae:	4b3f      	ldr	r3, [pc, #252]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cb4:	4b3d      	ldr	r3, [pc, #244]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cbc:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cc2:	4b3a      	ldr	r3, [pc, #232]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006cc8:	4b38      	ldr	r3, [pc, #224]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006cce:	4b37      	ldr	r3, [pc, #220]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006cd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cd6:	4b35      	ldr	r3, [pc, #212]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006cdc:	4833      	ldr	r0, [pc, #204]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cde:	f003 fffb 	bl	800acd8 <HAL_DMA_Init>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8006ce8:	f7fe f922 	bl	8004f30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a2f      	ldr	r2, [pc, #188]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cf0:	675a      	str	r2, [r3, #116]	; 0x74
 8006cf2:	4a2e      	ldr	r2, [pc, #184]	; (8006dac <HAL_UART_MspInit+0x24c>)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2107      	movs	r1, #7
 8006cfc:	2026      	movs	r0, #38	; 0x26
 8006cfe:	f003 ffc1 	bl	800ac84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006d02:	2026      	movs	r0, #38	; 0x26
 8006d04:	f003 ffda 	bl	800acbc <HAL_NVIC_EnableIRQ>
}
 8006d08:	e041      	b.n	8006d8e <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a29      	ldr	r2, [pc, #164]	; (8006db4 <HAL_UART_MspInit+0x254>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d13c      	bne.n	8006d8e <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f006 f894 	bl	800ce50 <HAL_RCCEx_PeriphCLKConfig>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8006d2e:	f7fe f8ff 	bl	8004f30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d32:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	4a19      	ldr	r2, [pc, #100]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d3e:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d4a:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006d50:	f043 0304 	orr.w	r3, r3, #4
 8006d54:	6313      	str	r3, [r2, #48]	; 0x30
 8006d56:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <HAL_UART_MspInit+0x23c>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 8006d62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d70:	2300      	movs	r3, #0
 8006d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d76:	2303      	movs	r3, #3
 8006d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006d7c:	2307      	movs	r3, #7
 8006d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006d86:	4619      	mov	r1, r3
 8006d88:	480b      	ldr	r0, [pc, #44]	; (8006db8 <HAL_UART_MspInit+0x258>)
 8006d8a:	f004 fbaf 	bl	800b4ec <HAL_GPIO_Init>
}
 8006d8e:	bf00      	nop
 8006d90:	37b8      	adds	r7, #184	; 0xb8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40004c00 	.word	0x40004c00
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	40020000 	.word	0x40020000
 8006da4:	40004400 	.word	0x40004400
 8006da8:	40020c00 	.word	0x40020c00
 8006dac:	20000d10 	.word	0x20000d10
 8006db0:	40026088 	.word	0x40026088
 8006db4:	40004800 	.word	0x40004800
 8006db8:	40020800 	.word	0x40020800

08006dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08e      	sub	sp, #56	; 0x38
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006dcc:	4b34      	ldr	r3, [pc, #208]	; (8006ea0 <HAL_InitTick+0xe4>)
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	4a33      	ldr	r2, [pc, #204]	; (8006ea0 <HAL_InitTick+0xe4>)
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8006dd8:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <HAL_InitTick+0xe4>)
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006de4:	f107 0210 	add.w	r2, r7, #16
 8006de8:	f107 0314 	add.w	r3, r7, #20
 8006dec:	4611      	mov	r1, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f005 fffc 	bl	800cdec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006dfe:	f005 ffcd 	bl	800cd9c <HAL_RCC_GetPCLK1Freq>
 8006e02:	6378      	str	r0, [r7, #52]	; 0x34
 8006e04:	e004      	b.n	8006e10 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006e06:	f005 ffc9 	bl	800cd9c <HAL_RCC_GetPCLK1Freq>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e12:	4a24      	ldr	r2, [pc, #144]	; (8006ea4 <HAL_InitTick+0xe8>)
 8006e14:	fba2 2303 	umull	r2, r3, r2, r3
 8006e18:	0c9b      	lsrs	r3, r3, #18
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8006e1e:	4b22      	ldr	r3, [pc, #136]	; (8006ea8 <HAL_InitTick+0xec>)
 8006e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8006e26:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <HAL_InitTick+0xec>)
 8006e28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006e2c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8006e2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ea8 <HAL_InitTick+0xec>)
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8006e34:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <HAL_InitTick+0xec>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <HAL_InitTick+0xec>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e40:	4b19      	ldr	r3, [pc, #100]	; (8006ea8 <HAL_InitTick+0xec>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8006e46:	4818      	ldr	r0, [pc, #96]	; (8006ea8 <HAL_InitTick+0xec>)
 8006e48:	f007 faac 	bl	800e3a4 <HAL_TIM_Base_Init>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006e52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d11b      	bne.n	8006e92 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8006e5a:	4813      	ldr	r0, [pc, #76]	; (8006ea8 <HAL_InitTick+0xec>)
 8006e5c:	f007 fafa 	bl	800e454 <HAL_TIM_Base_Start_IT>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006e66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d111      	bne.n	8006e92 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006e6e:	201c      	movs	r0, #28
 8006e70:	f003 ff24 	bl	800acbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b0f      	cmp	r3, #15
 8006e78:	d808      	bhi.n	8006e8c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	201c      	movs	r0, #28
 8006e80:	f003 ff00 	bl	800ac84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006e84:	4a09      	ldr	r2, [pc, #36]	; (8006eac <HAL_InitTick+0xf0>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	e002      	b.n	8006e92 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006e92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3738      	adds	r7, #56	; 0x38
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	431bde83 	.word	0x431bde83
 8006ea8:	20000db4 	.word	0x20000db4
 8006eac:	2000000c 	.word	0x2000000c

08006eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006eb4:	e7fe      	b.n	8006eb4 <NMI_Handler+0x4>

08006eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006eba:	e7fe      	b.n	8006eba <HardFault_Handler+0x4>

08006ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ec0:	e7fe      	b.n	8006ec0 <MemManage_Handler+0x4>

08006ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ec6:	e7fe      	b.n	8006ec6 <BusFault_Handler+0x4>

08006ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ecc:	e7fe      	b.n	8006ecc <UsageFault_Handler+0x4>

08006ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ed2:	bf00      	nop
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006ee0:	4802      	ldr	r0, [pc, #8]	; (8006eec <DMA1_Stream5_IRQHandler+0x10>)
 8006ee2:	f004 f899 	bl	800b018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006ee6:	bf00      	nop
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000d10 	.word	0x20000d10

08006ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ef4:	4802      	ldr	r0, [pc, #8]	; (8006f00 <TIM2_IRQHandler+0x10>)
 8006ef6:	f007 fe29 	bl	800eb4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000db4 	.word	0x20000db4

08006f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006f08:	4802      	ldr	r0, [pc, #8]	; (8006f14 <TIM3_IRQHandler+0x10>)
 8006f0a:	f007 fe1f 	bl	800eb4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000b2c 	.word	0x20000b2c

08006f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006f1c:	4802      	ldr	r0, [pc, #8]	; (8006f28 <USART2_IRQHandler+0x10>)
 8006f1e:	f009 f97d 	bl	801021c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006f22:	bf00      	nop
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000c00 	.word	0x20000c00

08006f2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006f30:	4802      	ldr	r0, [pc, #8]	; (8006f3c <UART4_IRQHandler+0x10>)
 8006f32:	f009 f973 	bl	801021c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006f36:	bf00      	nop
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000b78 	.word	0x20000b78

08006f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  return 1;
 8006f44:	2301      	movs	r3, #1
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <_kill>:

int _kill(int pid, int sig)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006f5a:	f00e fb1b 	bl	8015594 <__errno>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2216      	movs	r2, #22
 8006f62:	601a      	str	r2, [r3, #0]
  return -1;
 8006f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <_exit>:

void _exit (int status)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006f78:	f04f 31ff 	mov.w	r1, #4294967295
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ffe7 	bl	8006f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006f82:	e7fe      	b.n	8006f82 <_exit+0x12>

08006f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e00a      	b.n	8006fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006f96:	f3af 8000 	nop.w
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	60ba      	str	r2, [r7, #8]
 8006fa2:	b2ca      	uxtb	r2, r1
 8006fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	dbf0      	blt.n	8006f96 <_read+0x12>
  }

  return len;
 8006fb4:	687b      	ldr	r3, [r7, #4]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e009      	b.n	8006fe4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	60ba      	str	r2, [r7, #8]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	dbf1      	blt.n	8006fd0 <_write+0x12>
  }
  return len;
 8006fec:	687b      	ldr	r3, [r7, #4]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <_close>:

int _close(int file)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800701e:	605a      	str	r2, [r3, #4]
  return 0;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <_isatty>:

int _isatty(int file)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007036:	2301      	movs	r3, #1
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007068:	4a14      	ldr	r2, [pc, #80]	; (80070bc <_sbrk+0x5c>)
 800706a:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <_sbrk+0x60>)
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007074:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <_sbrk+0x64>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800707c:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <_sbrk+0x64>)
 800707e:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <_sbrk+0x68>)
 8007080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007082:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <_sbrk+0x64>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4413      	add	r3, r2
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	d207      	bcs.n	80070a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007090:	f00e fa80 	bl	8015594 <__errno>
 8007094:	4603      	mov	r3, r0
 8007096:	220c      	movs	r2, #12
 8007098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800709a:	f04f 33ff 	mov.w	r3, #4294967295
 800709e:	e009      	b.n	80070b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80070a0:	4b08      	ldr	r3, [pc, #32]	; (80070c4 <_sbrk+0x64>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80070a6:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <_sbrk+0x64>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4413      	add	r3, r2
 80070ae:	4a05      	ldr	r2, [pc, #20]	; (80070c4 <_sbrk+0x64>)
 80070b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80070b2:	68fb      	ldr	r3, [r7, #12]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20040000 	.word	0x20040000
 80070c0:	00000400 	.word	0x00000400
 80070c4:	20000e00 	.word	0x20000e00
 80070c8:	200090a0 	.word	0x200090a0

080070cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070d0:	4b06      	ldr	r3, [pc, #24]	; (80070ec <SystemInit+0x20>)
 80070d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d6:	4a05      	ldr	r2, [pc, #20]	; (80070ec <SystemInit+0x20>)
 80070d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80070e0:	bf00      	nop
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	e000ed00 	.word	0xe000ed00

080070f0 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80070fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80070fe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007114 <FusionDegreesToRadians+0x24>
 8007102:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007106:	eeb0 0a67 	vmov.f32	s0, s15
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	3c8efa35 	.word	0x3c8efa35

08007118 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	105a      	asrs	r2, r3, #1
 800712a:	4b10      	ldr	r3, [pc, #64]	; (800716c <FusionFastInverseSqrt+0x54>)
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8007130:	ed97 7a03 	vldr	s14, [r7, #12]
 8007134:	edd7 7a01 	vldr	s15, [r7, #4]
 8007138:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8007170 <FusionFastInverseSqrt+0x58>
 800713c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007140:	edd7 7a03 	vldr	s15, [r7, #12]
 8007144:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007148:	edd7 7a03 	vldr	s15, [r7, #12]
 800714c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007150:	eddf 6a08 	vldr	s13, [pc, #32]	; 8007174 <FusionFastInverseSqrt+0x5c>
 8007154:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007158:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800715c:	eeb0 0a67 	vmov.f32	s0, s15
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	5f1f1412 	.word	0x5f1f1412
 8007170:	3f36d312 	.word	0x3f36d312
 8007174:	3fd851ff 	.word	0x3fd851ff

08007178 <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	eef0 6a40 	vmov.f32	s13, s0
 8007182:	eeb0 7a60 	vmov.f32	s14, s1
 8007186:	eef0 7a41 	vmov.f32	s15, s2
 800718a:	edc7 6a01 	vstr	s13, [r7, #4]
 800718e:	ed87 7a02 	vstr	s14, [r7, #8]
 8007192:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8007196:	edd7 7a01 	vldr	s15, [r7, #4]
 800719a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800719e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a2:	d10f      	bne.n	80071c4 <FusionVectorIsZero+0x4c>
 80071a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80071a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b0:	d108      	bne.n	80071c4 <FusionVectorIsZero+0x4c>
 80071b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80071b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071be:	d101      	bne.n	80071c4 <FusionVectorIsZero+0x4c>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <FusionVectorIsZero+0x4e>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	b2db      	uxtb	r3, r3
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 80071d8:	b480      	push	{r7}
 80071da:	b091      	sub	sp, #68	; 0x44
 80071dc:	af00      	add	r7, sp, #0
 80071de:	eeb0 5a40 	vmov.f32	s10, s0
 80071e2:	eef0 5a60 	vmov.f32	s11, s1
 80071e6:	eeb0 6a41 	vmov.f32	s12, s2
 80071ea:	eef0 6a61 	vmov.f32	s13, s3
 80071ee:	eeb0 7a42 	vmov.f32	s14, s4
 80071f2:	eef0 7a62 	vmov.f32	s15, s5
 80071f6:	ed87 5a07 	vstr	s10, [r7, #28]
 80071fa:	edc7 5a08 	vstr	s11, [r7, #32]
 80071fe:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007202:	edc7 6a04 	vstr	s13, [r7, #16]
 8007206:	ed87 7a05 	vstr	s14, [r7, #20]
 800720a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 800720e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007212:	edd7 7a04 	vldr	s15, [r7, #16]
 8007216:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800721a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800721e:	ed97 7a08 	vldr	s14, [r7, #32]
 8007222:	edd7 7a05 	vldr	s15, [r7, #20]
 8007226:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800722a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800722e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007232:	edd7 7a06 	vldr	s15, [r7, #24]
 8007236:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800723a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800723e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007246:	ca07      	ldmia	r2, {r0, r1, r2}
 8007248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800724c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800724e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007252:	ee06 1a90 	vmov	s13, r1
 8007256:	ee07 2a10 	vmov	s14, r2
 800725a:	ee07 3a90 	vmov	s15, r3
}
 800725e:	eeb0 0a66 	vmov.f32	s0, s13
 8007262:	eef0 0a47 	vmov.f32	s1, s14
 8007266:	eeb0 1a67 	vmov.f32	s2, s15
 800726a:	3744      	adds	r7, #68	; 0x44
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	eef0 6a40 	vmov.f32	s13, s0
 800727e:	eeb0 7a60 	vmov.f32	s14, s1
 8007282:	eef0 7a41 	vmov.f32	s15, s2
 8007286:	edc7 6a01 	vstr	s13, [r7, #4]
 800728a:	ed87 7a02 	vstr	s14, [r7, #8]
 800728e:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8007292:	ed97 7a01 	vldr	s14, [r7, #4]
 8007296:	edd7 7a02 	vldr	s15, [r7, #8]
 800729a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800729e:	edd7 7a03 	vldr	s15, [r7, #12]
 80072a2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80072a6:	eeb0 0a67 	vmov.f32	s0, s15
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80072b4:	b480      	push	{r7}
 80072b6:	b08f      	sub	sp, #60	; 0x3c
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	eef0 6a40 	vmov.f32	s13, s0
 80072be:	eeb0 7a60 	vmov.f32	s14, s1
 80072c2:	eef0 7a41 	vmov.f32	s15, s2
 80072c6:	edc7 1a04 	vstr	s3, [r7, #16]
 80072ca:	edc7 6a05 	vstr	s13, [r7, #20]
 80072ce:	ed87 7a06 	vstr	s14, [r7, #24]
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80072d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80072da:	edd7 7a04 	vldr	s15, [r7, #16]
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80072e2:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80072e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80072ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80072f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80072f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80072fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80072fe:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007302:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8007306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800730a:	f107 0220 	add.w	r2, r7, #32
 800730e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007310:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731a:	ee06 1a90 	vmov	s13, r1
 800731e:	ee07 2a10 	vmov	s14, r2
 8007322:	ee07 3a90 	vmov	s15, r3
}
 8007326:	eeb0 0a66 	vmov.f32	s0, s13
 800732a:	eef0 0a47 	vmov.f32	s1, s14
 800732e:	eeb0 1a67 	vmov.f32	s2, s15
 8007332:	373c      	adds	r7, #60	; 0x3c
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800733c:	b480      	push	{r7}
 800733e:	b091      	sub	sp, #68	; 0x44
 8007340:	af00      	add	r7, sp, #0
 8007342:	eeb0 5a40 	vmov.f32	s10, s0
 8007346:	eef0 5a60 	vmov.f32	s11, s1
 800734a:	eeb0 6a41 	vmov.f32	s12, s2
 800734e:	eef0 6a61 	vmov.f32	s13, s3
 8007352:	eeb0 7a42 	vmov.f32	s14, s4
 8007356:	eef0 7a62 	vmov.f32	s15, s5
 800735a:	ed87 5a07 	vstr	s10, [r7, #28]
 800735e:	edc7 5a08 	vstr	s11, [r7, #32]
 8007362:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007366:	edc7 6a04 	vstr	s13, [r7, #16]
 800736a:	ed87 7a05 	vstr	s14, [r7, #20]
 800736e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8007372:	ed97 7a07 	vldr	s14, [r7, #28]
 8007376:	edd7 7a04 	vldr	s15, [r7, #16]
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800737e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8007382:	ed97 7a08 	vldr	s14, [r7, #32]
 8007386:	edd7 7a05 	vldr	s15, [r7, #20]
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800738e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8007392:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007396:	edd7 7a06 	vldr	s15, [r7, #24]
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800739e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80073a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80073a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80073aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80073ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80073b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b6:	ee06 1a90 	vmov	s13, r1
 80073ba:	ee07 2a10 	vmov	s14, r2
 80073be:	ee07 3a90 	vmov	s15, r3
}
 80073c2:	eeb0 0a66 	vmov.f32	s0, s13
 80073c6:	eef0 0a47 	vmov.f32	s1, s14
 80073ca:	eeb0 1a67 	vmov.f32	s2, s15
 80073ce:	3744      	adds	r7, #68	; 0x44
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80073d8:	b480      	push	{r7}
 80073da:	b091      	sub	sp, #68	; 0x44
 80073dc:	af00      	add	r7, sp, #0
 80073de:	eeb0 5a40 	vmov.f32	s10, s0
 80073e2:	eef0 5a60 	vmov.f32	s11, s1
 80073e6:	eeb0 6a41 	vmov.f32	s12, s2
 80073ea:	eef0 6a61 	vmov.f32	s13, s3
 80073ee:	eeb0 7a42 	vmov.f32	s14, s4
 80073f2:	eef0 7a62 	vmov.f32	s15, s5
 80073f6:	ed87 5a07 	vstr	s10, [r7, #28]
 80073fa:	edc7 5a08 	vstr	s11, [r7, #32]
 80073fe:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007402:	edc7 6a04 	vstr	s13, [r7, #16]
 8007406:	ed87 7a05 	vstr	s14, [r7, #20]
 800740a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 800740e:	ed97 7a08 	vldr	s14, [r7, #32]
 8007412:	edd7 7a06 	vldr	s15, [r7, #24]
 8007416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800741a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800741e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007426:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800742a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800742e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007432:	edd7 7a04 	vldr	s15, [r7, #16]
 8007436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800743a:	edd7 6a07 	vldr	s13, [r7, #28]
 800743e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007446:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800744a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800744e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007452:	edd7 7a05 	vldr	s15, [r7, #20]
 8007456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800745a:	edd7 6a08 	vldr	s13, [r7, #32]
 800745e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007466:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800746a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800746e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007476:	ca07      	ldmia	r2, {r0, r1, r2}
 8007478:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800747c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800747e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	ee06 1a90 	vmov	s13, r1
 8007486:	ee07 2a10 	vmov	s14, r2
 800748a:	ee07 3a90 	vmov	s15, r3
}
 800748e:	eeb0 0a66 	vmov.f32	s0, s13
 8007492:	eef0 0a47 	vmov.f32	s1, s14
 8007496:	eeb0 1a67 	vmov.f32	s2, s15
 800749a:	3744      	adds	r7, #68	; 0x44
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <FusionVectorDotProduct>:
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	; 0x28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	eeb0 5a40 	vmov.f32	s10, s0
 80074ae:	eef0 5a60 	vmov.f32	s11, s1
 80074b2:	eeb0 6a41 	vmov.f32	s12, s2
 80074b6:	eef0 6a61 	vmov.f32	s13, s3
 80074ba:	eeb0 7a42 	vmov.f32	s14, s4
 80074be:	eef0 7a62 	vmov.f32	s15, s5
 80074c2:	ed87 5a03 	vstr	s10, [r7, #12]
 80074c6:	edc7 5a04 	vstr	s11, [r7, #16]
 80074ca:	ed87 6a05 	vstr	s12, [r7, #20]
 80074ce:	edc7 6a00 	vstr	s13, [r7]
 80074d2:	ed87 7a01 	vstr	s14, [r7, #4]
 80074d6:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 80074da:	ed97 5a00 	vldr	s10, [r7]
 80074de:	edd7 5a01 	vldr	s11, [r7, #4]
 80074e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e6:	edd7 6a03 	vldr	s13, [r7, #12]
 80074ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80074ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80074f2:	eef0 1a45 	vmov.f32	s3, s10
 80074f6:	eeb0 2a65 	vmov.f32	s4, s11
 80074fa:	eef0 2a46 	vmov.f32	s5, s12
 80074fe:	eeb0 0a66 	vmov.f32	s0, s13
 8007502:	eef0 0a47 	vmov.f32	s1, s14
 8007506:	eeb0 1a67 	vmov.f32	s2, s15
 800750a:	f7ff ff17 	bl	800733c <FusionVectorHadamardProduct>
 800750e:	eef0 6a40 	vmov.f32	s13, s0
 8007512:	eeb0 7a60 	vmov.f32	s14, s1
 8007516:	eef0 7a41 	vmov.f32	s15, s2
 800751a:	edc7 6a07 	vstr	s13, [r7, #28]
 800751e:	ed87 7a08 	vstr	s14, [r7, #32]
 8007522:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8007526:	edd7 6a07 	vldr	s13, [r7, #28]
 800752a:	ed97 7a08 	vldr	s14, [r7, #32]
 800752e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007532:	eeb0 0a66 	vmov.f32	s0, s13
 8007536:	eef0 0a47 	vmov.f32	s1, s14
 800753a:	eeb0 1a67 	vmov.f32	s2, s15
 800753e:	f7ff fe99 	bl	8007274 <FusionVectorSum>
 8007542:	eef0 7a40 	vmov.f32	s15, s0
}
 8007546:	eeb0 0a67 	vmov.f32	s0, s15
 800754a:	3728      	adds	r7, #40	; 0x28
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	eef0 6a40 	vmov.f32	s13, s0
 800755a:	eeb0 7a60 	vmov.f32	s14, s1
 800755e:	eef0 7a41 	vmov.f32	s15, s2
 8007562:	edc7 6a01 	vstr	s13, [r7, #4]
 8007566:	ed87 7a02 	vstr	s14, [r7, #8]
 800756a:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800756e:	ed97 5a01 	vldr	s10, [r7, #4]
 8007572:	edd7 5a02 	vldr	s11, [r7, #8]
 8007576:	ed97 6a03 	vldr	s12, [r7, #12]
 800757a:	edd7 6a01 	vldr	s13, [r7, #4]
 800757e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007582:	edd7 7a03 	vldr	s15, [r7, #12]
 8007586:	eef0 1a45 	vmov.f32	s3, s10
 800758a:	eeb0 2a65 	vmov.f32	s4, s11
 800758e:	eef0 2a46 	vmov.f32	s5, s12
 8007592:	eeb0 0a66 	vmov.f32	s0, s13
 8007596:	eef0 0a47 	vmov.f32	s1, s14
 800759a:	eeb0 1a67 	vmov.f32	s2, s15
 800759e:	f7ff fecd 	bl	800733c <FusionVectorHadamardProduct>
 80075a2:	eef0 6a40 	vmov.f32	s13, s0
 80075a6:	eeb0 7a60 	vmov.f32	s14, s1
 80075aa:	eef0 7a41 	vmov.f32	s15, s2
 80075ae:	edc7 6a05 	vstr	s13, [r7, #20]
 80075b2:	ed87 7a06 	vstr	s14, [r7, #24]
 80075b6:	edc7 7a07 	vstr	s15, [r7, #28]
 80075ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80075be:	ed97 7a06 	vldr	s14, [r7, #24]
 80075c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80075c6:	eeb0 0a66 	vmov.f32	s0, s13
 80075ca:	eef0 0a47 	vmov.f32	s1, s14
 80075ce:	eeb0 1a67 	vmov.f32	s2, s15
 80075d2:	f7ff fe4f 	bl	8007274 <FusionVectorSum>
 80075d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80075da:	eeb0 0a67 	vmov.f32	s0, s15
 80075de:	3720      	adds	r7, #32
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08c      	sub	sp, #48	; 0x30
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	eef0 6a40 	vmov.f32	s13, s0
 80075ee:	eeb0 7a60 	vmov.f32	s14, s1
 80075f2:	eef0 7a41 	vmov.f32	s15, s2
 80075f6:	edc7 6a05 	vstr	s13, [r7, #20]
 80075fa:	ed87 7a06 	vstr	s14, [r7, #24]
 80075fe:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8007602:	edd7 6a05 	vldr	s13, [r7, #20]
 8007606:	ed97 7a06 	vldr	s14, [r7, #24]
 800760a:	edd7 7a07 	vldr	s15, [r7, #28]
 800760e:	eeb0 0a66 	vmov.f32	s0, s13
 8007612:	eef0 0a47 	vmov.f32	s1, s14
 8007616:	eeb0 1a67 	vmov.f32	s2, s15
 800761a:	f7ff ff99 	bl	8007550 <FusionVectorMagnitudeSquared>
 800761e:	eef0 7a40 	vmov.f32	s15, s0
 8007622:	eeb0 0a67 	vmov.f32	s0, s15
 8007626:	f7ff fd77 	bl	8007118 <FusionFastInverseSqrt>
 800762a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800762e:	edd7 6a05 	vldr	s13, [r7, #20]
 8007632:	ed97 7a06 	vldr	s14, [r7, #24]
 8007636:	edd7 7a07 	vldr	s15, [r7, #28]
 800763a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800763e:	eeb0 0a66 	vmov.f32	s0, s13
 8007642:	eef0 0a47 	vmov.f32	s1, s14
 8007646:	eeb0 1a67 	vmov.f32	s2, s15
 800764a:	f7ff fe33 	bl	80072b4 <FusionVectorMultiplyScalar>
 800764e:	eef0 6a40 	vmov.f32	s13, s0
 8007652:	eeb0 7a60 	vmov.f32	s14, s1
 8007656:	eef0 7a41 	vmov.f32	s15, s2
 800765a:	edc7 6a08 	vstr	s13, [r7, #32]
 800765e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8007662:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8007666:	6a39      	ldr	r1, [r7, #32]
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	ee06 1a90 	vmov	s13, r1
 8007670:	ee07 2a10 	vmov	s14, r2
 8007674:	ee07 3a90 	vmov	s15, r3
}
 8007678:	eeb0 0a66 	vmov.f32	s0, s13
 800767c:	eef0 0a47 	vmov.f32	s1, s14
 8007680:	eeb0 1a67 	vmov.f32	s2, s15
 8007684:	3730      	adds	r7, #48	; 0x30
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800768a:	b490      	push	{r4, r7}
 800768c:	b094      	sub	sp, #80	; 0x50
 800768e:	af00      	add	r7, sp, #0
 8007690:	eeb0 4a40 	vmov.f32	s8, s0
 8007694:	eef0 4a60 	vmov.f32	s9, s1
 8007698:	eeb0 5a41 	vmov.f32	s10, s2
 800769c:	eef0 5a61 	vmov.f32	s11, s3
 80076a0:	eeb0 6a42 	vmov.f32	s12, s4
 80076a4:	eef0 6a62 	vmov.f32	s13, s5
 80076a8:	eeb0 7a43 	vmov.f32	s14, s6
 80076ac:	eef0 7a63 	vmov.f32	s15, s7
 80076b0:	ed87 4a08 	vstr	s8, [r7, #32]
 80076b4:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 80076b8:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80076bc:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 80076c0:	ed87 6a04 	vstr	s12, [r7, #16]
 80076c4:	edc7 6a05 	vstr	s13, [r7, #20]
 80076c8:	ed87 7a06 	vstr	s14, [r7, #24]
 80076cc:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 80076d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80076d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80076d8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80076dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 80076e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80076e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80076e8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80076ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 80076f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80076f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80076f8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80076fc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8007700:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007704:	edd7 7a07 	vldr	s15, [r7, #28]
 8007708:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800770c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8007710:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800771a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800771e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007720:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007726:	ee06 0a10 	vmov	s12, r0
 800772a:	ee06 1a90 	vmov	s13, r1
 800772e:	ee07 2a10 	vmov	s14, r2
 8007732:	ee07 3a90 	vmov	s15, r3
}
 8007736:	eeb0 0a46 	vmov.f32	s0, s12
 800773a:	eef0 0a66 	vmov.f32	s1, s13
 800773e:	eeb0 1a47 	vmov.f32	s2, s14
 8007742:	eef0 1a67 	vmov.f32	s3, s15
 8007746:	3750      	adds	r7, #80	; 0x50
 8007748:	46bd      	mov	sp, r7
 800774a:	bc90      	pop	{r4, r7}
 800774c:	4770      	bx	lr

0800774e <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800774e:	b490      	push	{r4, r7}
 8007750:	b094      	sub	sp, #80	; 0x50
 8007752:	af00      	add	r7, sp, #0
 8007754:	eef0 4a40 	vmov.f32	s9, s0
 8007758:	eeb0 5a60 	vmov.f32	s10, s1
 800775c:	eef0 5a41 	vmov.f32	s11, s2
 8007760:	eeb0 6a61 	vmov.f32	s12, s3
 8007764:	eef0 6a42 	vmov.f32	s13, s4
 8007768:	eeb0 7a62 	vmov.f32	s14, s5
 800776c:	eef0 7a43 	vmov.f32	s15, s6
 8007770:	edc7 4a08 	vstr	s9, [r7, #32]
 8007774:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8007778:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800777c:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8007780:	edc7 6a05 	vstr	s13, [r7, #20]
 8007784:	ed87 7a06 	vstr	s14, [r7, #24]
 8007788:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800778c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007790:	eeb1 7a67 	vneg.f32	s14, s15
 8007794:	edd7 7a05 	vldr	s15, [r7, #20]
 8007798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800779c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80077a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80077a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077ac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80077b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80077b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077b8:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80077bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 80077c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80077c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80077c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077cc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80077d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80077d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077dc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80077e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80077e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077e8:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80077ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 80077f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80077f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80077f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007800:	edd7 7a07 	vldr	s15, [r7, #28]
 8007804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007808:	ee37 7a67 	vsub.f32	s14, s14, s15
 800780c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007810:	edd7 7a05 	vldr	s15, [r7, #20]
 8007814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007818:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800781c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8007820:	ed97 7a08 	vldr	s14, [r7, #32]
 8007824:	edd7 7a07 	vldr	s15, [r7, #28]
 8007828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800782c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007830:	edd7 7a06 	vldr	s15, [r7, #24]
 8007834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800783c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007840:	edd7 7a05 	vldr	s15, [r7, #20]
 8007844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007848:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800784c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8007850:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800785a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800785e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007860:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007866:	ee06 0a10 	vmov	s12, r0
 800786a:	ee06 1a90 	vmov	s13, r1
 800786e:	ee07 2a10 	vmov	s14, r2
 8007872:	ee07 3a90 	vmov	s15, r3
}
 8007876:	eeb0 0a46 	vmov.f32	s0, s12
 800787a:	eef0 0a66 	vmov.f32	s1, s13
 800787e:	eeb0 1a47 	vmov.f32	s2, s14
 8007882:	eef0 1a67 	vmov.f32	s3, s15
 8007886:	3750      	adds	r7, #80	; 0x50
 8007888:	46bd      	mov	sp, r7
 800788a:	bc90      	pop	{r4, r7}
 800788c:	4770      	bx	lr

0800788e <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800788e:	b590      	push	{r4, r7, lr}
 8007890:	b093      	sub	sp, #76	; 0x4c
 8007892:	af00      	add	r7, sp, #0
 8007894:	eeb0 6a40 	vmov.f32	s12, s0
 8007898:	eef0 6a60 	vmov.f32	s13, s1
 800789c:	eeb0 7a41 	vmov.f32	s14, s2
 80078a0:	eef0 7a61 	vmov.f32	s15, s3
 80078a4:	ed87 6a04 	vstr	s12, [r7, #16]
 80078a8:	edc7 6a05 	vstr	s13, [r7, #20]
 80078ac:	ed87 7a06 	vstr	s14, [r7, #24]
 80078b0:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80078b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80078b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80078bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80078c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80078c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078d0:	edd7 6a06 	vldr	s13, [r7, #24]
 80078d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80078d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80078e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078f0:	eeb0 0a67 	vmov.f32	s0, s15
 80078f4:	f7ff fc10 	bl	8007118 <FusionFastInverseSqrt>
 80078f8:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 80078fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8007900:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007904:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007908:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800790c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007910:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007914:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007918:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800791c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007920:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007924:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007928:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800792c:	ed97 7a07 	vldr	s14, [r7, #28]
 8007930:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007934:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8007938:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800793c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8007940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800794a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800794c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800794e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007952:	ee06 0a10 	vmov	s12, r0
 8007956:	ee06 1a90 	vmov	s13, r1
 800795a:	ee07 2a10 	vmov	s14, r2
 800795e:	ee07 3a90 	vmov	s15, r3
}
 8007962:	eeb0 0a46 	vmov.f32	s0, s12
 8007966:	eef0 0a66 	vmov.f32	s1, s13
 800796a:	eeb0 1a47 	vmov.f32	s2, s14
 800796e:	eef0 1a67 	vmov.f32	s3, s15
 8007972:	374c      	adds	r7, #76	; 0x4c
 8007974:	46bd      	mov	sp, r7
 8007976:	bd90      	pop	{r4, r7, pc}

08007978 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8007978:	b5b0      	push	{r4, r5, r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <FusionAhrsInitialise+0x38>)
 8007982:	f107 0408 	add.w	r4, r7, #8
 8007986:	461d      	mov	r5, r3
 8007988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800798a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800798c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007990:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8007994:	f107 0308 	add.w	r3, r7, #8
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f86e 	bl	8007a7c <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f807 	bl	80079b4 <FusionAhrsReset>
}
 80079a6:	bf00      	nop
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bdb0      	pop	{r4, r5, r7, pc}
 80079ae:	bf00      	nop
 80079b0:	0801be3c 	.word	0x0801be3c

080079b4 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 80079b4:	b480      	push	{r7}
 80079b6:	b091      	sub	sp, #68	; 0x44
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079c2:	619a      	str	r2, [r3, #24]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f04f 0200 	mov.w	r2, #0
 80079ca:	61da      	str	r2, [r3, #28]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	621a      	str	r2, [r3, #32]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	629a      	str	r2, [r3, #40]	; 0x28
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f04f 0200 	mov.w	r2, #0
 80079f2:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <FusionAhrsReset+0xc4>)
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	645a      	str	r2, [r3, #68]	; 0x44
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	649a      	str	r2, [r3, #72]	; 0x48
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	651a      	str	r2, [r3, #80]	; 0x50
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	655a      	str	r2, [r3, #84]	; 0x54
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	461a      	mov	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007a6a:	bf00      	nop
 8007a6c:	3744      	adds	r7, #68	; 0x44
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	41200000 	.word	0x41200000

08007a7c <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781a      	ldrb	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa4:	d007      	beq.n	8007ab6 <FusionAhrsSetSettings+0x3a>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8007aac:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007be0 <FusionAhrsSetSettings+0x164>
 8007ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ab4:	e001      	b.n	8007aba <FusionAhrsSetSettings+0x3e>
 8007ab6:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8007be4 <FusionAhrsSetSettings+0x168>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ac6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ace:	d01b      	beq.n	8007b08 <FusionAhrsSetSettings+0x8c>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8007ada:	f7ff fb09 	bl	80070f0 <FusionDegreesToRadians>
 8007ade:	eef0 7a40 	vmov.f32	s15, s0
 8007ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ae6:	f011 fe2f 	bl	8019748 <sinf>
 8007aea:	eef0 7a40 	vmov.f32	s15, s0
 8007aee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007af6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007afa:	eeb0 0a67 	vmov.f32	s0, s15
 8007afe:	f011 fdc5 	bl	801968c <powf>
 8007b02:	eef0 7a40 	vmov.f32	s15, s0
 8007b06:	e001      	b.n	8007b0c <FusionAhrsSetSettings+0x90>
 8007b08:	eddf 7a36 	vldr	s15, [pc, #216]	; 8007be4 <FusionAhrsSetSettings+0x168>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	d01b      	beq.n	8007b5a <FusionAhrsSetSettings+0xde>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b28:	eeb0 0a67 	vmov.f32	s0, s15
 8007b2c:	f7ff fae0 	bl	80070f0 <FusionDegreesToRadians>
 8007b30:	eef0 7a40 	vmov.f32	s15, s0
 8007b34:	eeb0 0a67 	vmov.f32	s0, s15
 8007b38:	f011 fe06 	bl	8019748 <sinf>
 8007b3c:	eef0 7a40 	vmov.f32	s15, s0
 8007b40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b48:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b50:	f011 fd9c 	bl	801968c <powf>
 8007b54:	eef0 7a40 	vmov.f32	s15, s0
 8007b58:	e001      	b.n	8007b5e <FusionAhrsSetSettings+0xe2>
 8007b5a:	eddf 7a22 	vldr	s15, [pc, #136]	; 8007be4 <FusionAhrsSetSettings+0x168>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	695a      	ldr	r2, [r3, #20]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8e:	d003      	beq.n	8007b98 <FusionAhrsSetSettings+0x11c>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d105      	bne.n	8007ba4 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a13      	ldr	r2, [pc, #76]	; (8007be8 <FusionAhrsSetSettings+0x16c>)
 8007b9c:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a11      	ldr	r2, [pc, #68]	; (8007be8 <FusionAhrsSetSettings+0x16c>)
 8007ba2:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007baa:	f083 0301 	eor.w	r3, r3, #1
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8007bc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007bca:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	3f7ae148 	.word	0x3f7ae148
 8007be4:	7f7fffff 	.word	0x7f7fffff
 8007be8:	7f7fffff 	.word	0x7f7fffff

08007bec <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b0bf      	sub	sp, #252	; 0xfc
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007bf4:	eeb0 5a61 	vmov.f32	s10, s3
 8007bf8:	eef0 5a42 	vmov.f32	s11, s4
 8007bfc:	eeb0 6a62 	vmov.f32	s12, s5
 8007c00:	eef0 6a43 	vmov.f32	s13, s6
 8007c04:	eeb0 7a63 	vmov.f32	s14, s7
 8007c08:	eef0 7a44 	vmov.f32	s15, s8
 8007c0c:	edc7 4a01 	vstr	s9, [r7, #4]
 8007c10:	ed87 0a08 	vstr	s0, [r7, #32]
 8007c14:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8007c18:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8007c1c:	ed87 5a05 	vstr	s10, [r7, #20]
 8007c20:	edc7 5a06 	vstr	s11, [r7, #24]
 8007c24:	ed87 6a07 	vstr	s12, [r7, #28]
 8007c28:	edc7 6a02 	vstr	s13, [r7, #8]
 8007c2c:	ed87 7a03 	vstr	s14, [r7, #12]
 8007c30:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	3328      	adds	r3, #40	; 0x28
 8007c38:	f107 0214 	add.w	r2, r7, #20
 8007c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 8007c42:	edd7 7a08 	vldr	s15, [r7, #32]
 8007c46:	eeb0 7ae7 	vabs.f32	s14, s15
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c58:	dc17      	bgt.n	8007c8a <FusionAhrsUpdate+0x9e>
 8007c5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007c5e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c70:	dc0b      	bgt.n	8007c8a <FusionAhrsUpdate+0x9e>
 8007c72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007c76:	eeb0 7ae7 	vabs.f32	s14, s15
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c88:	dd15      	ble.n	8007cb6 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 8007c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8007c90:	3318      	adds	r3, #24
 8007c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 8007c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9a:	f7ff fe8b 	bl	80079b4 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca0:	f103 0418 	add.w	r4, r3, #24
 8007ca4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007caa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d02d      	beq.n	8007d1c <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8007ccc:	edd7 7a01 	vldr	s15, [r7, #4]
 8007cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf2:	d407      	bmi.n	8007d04 <FusionAhrsUpdate+0x118>
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d02:	d10b      	bne.n	8007d1c <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8007d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d1e:	f000 faf4 	bl	800830a <HalfGravity>
 8007d22:	eef0 6a40 	vmov.f32	s13, s0
 8007d26:	eeb0 7a60 	vmov.f32	s14, s1
 8007d2a:	eef0 7a41 	vmov.f32	s15, s2
 8007d2e:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8007d32:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 8007d36:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 8007d5a:	edd7 6a05 	vldr	s13, [r7, #20]
 8007d5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d62:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d66:	eeb0 0a66 	vmov.f32	s0, s13
 8007d6a:	eef0 0a47 	vmov.f32	s1, s14
 8007d6e:	eeb0 1a67 	vmov.f32	s2, s15
 8007d72:	f7ff fa01 	bl	8007178 <FusionVectorIsZero>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f083 0301 	eor.w	r3, r3, #1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 809c 	beq.w	8007ebc <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 8007d84:	edd7 6a05 	vldr	s13, [r7, #20]
 8007d88:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d90:	eeb0 0a66 	vmov.f32	s0, s13
 8007d94:	eef0 0a47 	vmov.f32	s1, s14
 8007d98:	eeb0 1a67 	vmov.f32	s2, s15
 8007d9c:	f7ff fc22 	bl	80075e4 <FusionVectorNormalise>
 8007da0:	eef0 6a40 	vmov.f32	s13, s0
 8007da4:	eeb0 7a60 	vmov.f32	s14, s1
 8007da8:	eef0 7a41 	vmov.f32	s15, s2
 8007dac:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8007db0:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8007db4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8007db8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007dba:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8007dbe:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8007dc2:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8007dc6:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8007dca:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007dce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007dd2:	eef0 1a45 	vmov.f32	s3, s10
 8007dd6:	eeb0 2a65 	vmov.f32	s4, s11
 8007dda:	eef0 2a46 	vmov.f32	s5, s12
 8007dde:	eeb0 0a66 	vmov.f32	s0, s13
 8007de2:	eef0 0a47 	vmov.f32	s1, s14
 8007de6:	eeb0 1a67 	vmov.f32	s2, s15
 8007dea:	f000 fc55 	bl	8008698 <Feedback>
 8007dee:	eef0 6a40 	vmov.f32	s13, s0
 8007df2:	eeb0 7a60 	vmov.f32	s14, s1
 8007df6:	eef0 7a41 	vmov.f32	s15, s2
 8007dfa:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 8007dfe:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 8007e02:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d118      	bne.n	8007e42 <FusionAhrsUpdate+0x256>
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8007e16:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8007e1a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8007e1e:	eeb0 0a66 	vmov.f32	s0, s13
 8007e22:	eef0 0a47 	vmov.f32	s1, s14
 8007e26:	eeb0 1a67 	vmov.f32	s2, s15
 8007e2a:	f7ff fb91 	bl	8007550 <FusionVectorMagnitudeSquared>
 8007e2e:	eeb0 7a40 	vmov.f32	s14, s0
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e40:	d80a      	bhi.n	8007e58 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4e:	f1a3 0209 	sub.w	r2, r3, #9
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	661a      	str	r2, [r3, #96]	; 0x60
 8007e56:	e004      	b.n	8007e62 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	dd07      	ble.n	8007e7e <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	2200      	movs	r2, #0
 8007e72:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007e7c:	e004      	b.n	8007e88 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	461a      	mov	r2, r3
 8007e92:	2100      	movs	r1, #0
 8007e94:	f000 fcb5 	bl	8008802 <Clamp>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ea4:	f083 0301 	eor.w	r3, r3, #1
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d006      	beq.n	8007ebc <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8007eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007eb4:	3244      	adds	r2, #68	; 0x44
 8007eb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8007eb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	673b      	str	r3, [r7, #112]	; 0x70
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	677b      	str	r3, [r7, #116]	; 0x74
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 8007ed6:	edd7 6a02 	vldr	s13, [r7, #8]
 8007eda:	ed97 7a03 	vldr	s14, [r7, #12]
 8007ede:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ee2:	eeb0 0a66 	vmov.f32	s0, s13
 8007ee6:	eef0 0a47 	vmov.f32	s1, s14
 8007eea:	eeb0 1a67 	vmov.f32	s2, s15
 8007eee:	f7ff f943 	bl	8007178 <FusionVectorIsZero>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f083 0301 	eor.w	r3, r3, #1
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80d1 	beq.w	80080a2 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8007f00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f02:	f000 fabf 	bl	8008484 <HalfMagnetic>
 8007f06:	eef0 6a40 	vmov.f32	s13, s0
 8007f0a:	eeb0 7a60 	vmov.f32	s14, s1
 8007f0e:	eef0 7a41 	vmov.f32	s15, s2
 8007f12:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8007f16:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8007f1a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8007f1e:	ed97 5a02 	vldr	s10, [r7, #8]
 8007f22:	edd7 5a03 	vldr	s11, [r7, #12]
 8007f26:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f2a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8007f2e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007f32:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007f36:	eef0 1a45 	vmov.f32	s3, s10
 8007f3a:	eeb0 2a65 	vmov.f32	s4, s11
 8007f3e:	eef0 2a46 	vmov.f32	s5, s12
 8007f42:	eeb0 0a66 	vmov.f32	s0, s13
 8007f46:	eef0 0a47 	vmov.f32	s1, s14
 8007f4a:	eeb0 1a67 	vmov.f32	s2, s15
 8007f4e:	f7ff fa43 	bl	80073d8 <FusionVectorCrossProduct>
 8007f52:	eef0 6a40 	vmov.f32	s13, s0
 8007f56:	eeb0 7a60 	vmov.f32	s14, s1
 8007f5a:	eef0 7a41 	vmov.f32	s15, s2
 8007f5e:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 8007f62:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8007f66:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8007f6a:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8007f6e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007f72:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8007f76:	eeb0 0a66 	vmov.f32	s0, s13
 8007f7a:	eef0 0a47 	vmov.f32	s1, s14
 8007f7e:	eeb0 1a67 	vmov.f32	s2, s15
 8007f82:	f7ff fb2f 	bl	80075e4 <FusionVectorNormalise>
 8007f86:	eef0 6a40 	vmov.f32	s13, s0
 8007f8a:	eeb0 7a60 	vmov.f32	s14, s1
 8007f8e:	eef0 7a41 	vmov.f32	s15, s2
 8007f92:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8007f96:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8007f9a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8007f9e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007fa0:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8007fa4:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8007fa8:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8007fac:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8007fb0:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8007fb4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007fb8:	eef0 1a45 	vmov.f32	s3, s10
 8007fbc:	eeb0 2a65 	vmov.f32	s4, s11
 8007fc0:	eef0 2a46 	vmov.f32	s5, s12
 8007fc4:	eeb0 0a66 	vmov.f32	s0, s13
 8007fc8:	eef0 0a47 	vmov.f32	s1, s14
 8007fcc:	eeb0 1a67 	vmov.f32	s2, s15
 8007fd0:	f000 fb62 	bl	8008698 <Feedback>
 8007fd4:	eef0 6a40 	vmov.f32	s13, s0
 8007fd8:	eeb0 7a60 	vmov.f32	s14, s1
 8007fdc:	eef0 7a41 	vmov.f32	s15, s2
 8007fe0:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 8007fe4:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8007fe8:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d118      	bne.n	8008028 <FusionAhrsUpdate+0x43c>
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8007ffc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008000:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008004:	eeb0 0a66 	vmov.f32	s0, s13
 8008008:	eef0 0a47 	vmov.f32	s1, s14
 800800c:	eeb0 1a67 	vmov.f32	s2, s15
 8008010:	f7ff fa9e 	bl	8007550 <FusionVectorMagnitudeSquared>
 8008014:	eeb0 7a40 	vmov.f32	s14, s0
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	edd3 7a04 	vldr	s15, [r3, #16]
 800801e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008026:	d80a      	bhi.n	800803e <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008034:	f1a3 0209 	sub.w	r2, r3, #9
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	66da      	str	r2, [r3, #108]	; 0x6c
 800803c:	e004      	b.n	8008048 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008050:	429a      	cmp	r2, r3
 8008052:	dd07      	ble.n	8008064 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	2200      	movs	r2, #0
 8008058:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8008062:	e004      	b.n	800806e <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	461a      	mov	r2, r3
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	461a      	mov	r2, r3
 8008078:	2100      	movs	r1, #0
 800807a:	f000 fbc2 	bl	8008802 <Clamp>
 800807e:	4602      	mov	r2, r0
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800808a:	f083 0301 	eor.w	r3, r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d006      	beq.n	80080a2 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8008094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008096:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800809a:	3250      	adds	r2, #80	; 0x50
 800809c:	ca07      	ldmia	r2, {r0, r1, r2}
 800809e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 80080a2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80080a6:	f7ff f823 	bl	80070f0 <FusionDegreesToRadians>
 80080aa:	eeb0 6a40 	vmov.f32	s12, s0
 80080ae:	edd7 6a08 	vldr	s13, [r7, #32]
 80080b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80080b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80080ba:	eef0 1a46 	vmov.f32	s3, s12
 80080be:	eeb0 0a66 	vmov.f32	s0, s13
 80080c2:	eef0 0a47 	vmov.f32	s1, s14
 80080c6:	eeb0 1a67 	vmov.f32	s2, s15
 80080ca:	f7ff f8f3 	bl	80072b4 <FusionVectorMultiplyScalar>
 80080ce:	eef0 6a40 	vmov.f32	s13, s0
 80080d2:	eeb0 7a60 	vmov.f32	s14, s1
 80080d6:	eef0 7a41 	vmov.f32	s15, s2
 80080da:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80080de:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80080e2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80080e6:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80080ea:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80080ee:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 80080f2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80080f6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80080fa:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80080fe:	eef0 1a45 	vmov.f32	s3, s10
 8008102:	eeb0 2a65 	vmov.f32	s4, s11
 8008106:	eef0 2a46 	vmov.f32	s5, s12
 800810a:	eeb0 0a66 	vmov.f32	s0, s13
 800810e:	eef0 0a47 	vmov.f32	s1, s14
 8008112:	eeb0 1a67 	vmov.f32	s2, s15
 8008116:	f7ff f85f 	bl	80071d8 <FusionVectorAdd>
 800811a:	eef0 6a40 	vmov.f32	s13, s0
 800811e:	eeb0 7a60 	vmov.f32	s14, s1
 8008122:	eef0 7a41 	vmov.f32	s15, s2
 8008126:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800812a:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800812e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8008138:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800813c:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8008140:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8008144:	eef0 1a46 	vmov.f32	s3, s12
 8008148:	eeb0 0a66 	vmov.f32	s0, s13
 800814c:	eef0 0a47 	vmov.f32	s1, s14
 8008150:	eeb0 1a67 	vmov.f32	s2, s15
 8008154:	f7ff f8ae 	bl	80072b4 <FusionVectorMultiplyScalar>
 8008158:	eef0 6a40 	vmov.f32	s13, s0
 800815c:	eeb0 7a60 	vmov.f32	s14, s1
 8008160:	eef0 7a41 	vmov.f32	s15, s2
 8008164:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8008168:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800816c:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8008170:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8008174:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8008178:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800817c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8008180:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008184:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008188:	eef0 1a45 	vmov.f32	s3, s10
 800818c:	eeb0 2a65 	vmov.f32	s4, s11
 8008190:	eef0 2a46 	vmov.f32	s5, s12
 8008194:	eeb0 0a66 	vmov.f32	s0, s13
 8008198:	eef0 0a47 	vmov.f32	s1, s14
 800819c:	eeb0 1a67 	vmov.f32	s2, s15
 80081a0:	f7ff f81a 	bl	80071d8 <FusionVectorAdd>
 80081a4:	eef0 6a40 	vmov.f32	s13, s0
 80081a8:	eeb0 7a60 	vmov.f32	s14, s1
 80081ac:	eef0 7a41 	vmov.f32	s15, s2
 80081b0:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 80081b4:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 80081b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 80081bc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80081c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80081c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80081c8:	edd7 1a01 	vldr	s3, [r7, #4]
 80081cc:	eeb0 0a66 	vmov.f32	s0, s13
 80081d0:	eef0 0a47 	vmov.f32	s1, s14
 80081d4:	eeb0 1a67 	vmov.f32	s2, s15
 80081d8:	f7ff f86c 	bl	80072b4 <FusionVectorMultiplyScalar>
 80081dc:	eef0 6a40 	vmov.f32	s13, s0
 80081e0:	eeb0 7a60 	vmov.f32	s14, s1
 80081e4:	eef0 7a41 	vmov.f32	s15, s2
 80081e8:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80081ec:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80081f0:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80081f4:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80081f8:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80081fc:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	ed93 6a06 	vldr	s12, [r3, #24]
 8008206:	edd3 6a07 	vldr	s13, [r3, #28]
 800820a:	ed93 7a08 	vldr	s14, [r3, #32]
 800820e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008212:	eeb0 2a64 	vmov.f32	s4, s9
 8008216:	eef0 2a45 	vmov.f32	s5, s10
 800821a:	eeb0 3a65 	vmov.f32	s6, s11
 800821e:	eeb0 0a46 	vmov.f32	s0, s12
 8008222:	eef0 0a66 	vmov.f32	s1, s13
 8008226:	eeb0 1a47 	vmov.f32	s2, s14
 800822a:	eef0 1a67 	vmov.f32	s3, s15
 800822e:	f7ff fa8e 	bl	800774e <FusionQuaternionMultiplyVector>
 8008232:	eeb0 6a40 	vmov.f32	s12, s0
 8008236:	eef0 6a60 	vmov.f32	s13, s1
 800823a:	eeb0 7a41 	vmov.f32	s14, s2
 800823e:	eef0 7a61 	vmov.f32	s15, s3
 8008242:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8008246:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800824a:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800824e:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8008252:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8008254:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8008258:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800825c:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8008260:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008266:	ed93 6a06 	vldr	s12, [r3, #24]
 800826a:	edd3 6a07 	vldr	s13, [r3, #28]
 800826e:	ed93 7a08 	vldr	s14, [r3, #32]
 8008272:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008276:	eeb0 2a44 	vmov.f32	s4, s8
 800827a:	eef0 2a64 	vmov.f32	s5, s9
 800827e:	eeb0 3a45 	vmov.f32	s6, s10
 8008282:	eef0 3a65 	vmov.f32	s7, s11
 8008286:	eeb0 0a46 	vmov.f32	s0, s12
 800828a:	eef0 0a66 	vmov.f32	s1, s13
 800828e:	eeb0 1a47 	vmov.f32	s2, s14
 8008292:	eef0 1a67 	vmov.f32	s3, s15
 8008296:	f7ff f9f8 	bl	800768a <FusionQuaternionAdd>
 800829a:	eeb0 6a40 	vmov.f32	s12, s0
 800829e:	eef0 6a60 	vmov.f32	s13, s1
 80082a2:	eeb0 7a41 	vmov.f32	s14, s2
 80082a6:	eef0 7a61 	vmov.f32	s15, s3
 80082aa:	ed84 6a06 	vstr	s12, [r4, #24]
 80082ae:	edc4 6a07 	vstr	s13, [r4, #28]
 80082b2:	ed84 7a08 	vstr	s14, [r4, #32]
 80082b6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 80082ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	ed93 6a06 	vldr	s12, [r3, #24]
 80082c2:	edd3 6a07 	vldr	s13, [r3, #28]
 80082c6:	ed93 7a08 	vldr	s14, [r3, #32]
 80082ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80082ce:	eeb0 0a46 	vmov.f32	s0, s12
 80082d2:	eef0 0a66 	vmov.f32	s1, s13
 80082d6:	eeb0 1a47 	vmov.f32	s2, s14
 80082da:	eef0 1a67 	vmov.f32	s3, s15
 80082de:	f7ff fad6 	bl	800788e <FusionQuaternionNormalise>
 80082e2:	eeb0 6a40 	vmov.f32	s12, s0
 80082e6:	eef0 6a60 	vmov.f32	s13, s1
 80082ea:	eeb0 7a41 	vmov.f32	s14, s2
 80082ee:	eef0 7a61 	vmov.f32	s15, s3
 80082f2:	ed84 6a06 	vstr	s12, [r4, #24]
 80082f6:	edc4 6a07 	vstr	s13, [r4, #28]
 80082fa:	ed84 7a08 	vstr	s14, [r4, #32]
 80082fe:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 8008302:	bf00      	nop
 8008304:	37fc      	adds	r7, #252	; 0xfc
 8008306:	46bd      	mov	sp, r7
 8008308:	bd90      	pop	{r4, r7, pc}

0800830a <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800830a:	b480      	push	{r7}
 800830c:	b093      	sub	sp, #76	; 0x4c
 800830e:	af00      	add	r7, sp, #0
 8008310:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b01      	cmp	r3, #1
 8008318:	dc02      	bgt.n	8008320 <HalfGravity+0x16>
 800831a:	2b00      	cmp	r3, #0
 800831c:	da03      	bge.n	8008326 <HalfGravity+0x1c>
 800831e:	e094      	b.n	800844a <HalfGravity+0x140>
 8008320:	2b02      	cmp	r3, #2
 8008322:	d048      	beq.n	80083b6 <HalfGravity+0xac>
 8008324:	e091      	b.n	800844a <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	ed93 7a07 	vldr	s14, [r3, #28]
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	edd3 6a06 	vldr	s13, [r3, #24]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008346:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800834a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	ed93 7a08 	vldr	s14, [r3, #32]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800835a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	edd3 6a06 	vldr	s13, [r3, #24]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	edd3 7a07 	vldr	s15, [r3, #28]
 800836a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800836e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8008372:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	ed93 7a06 	vldr	s14, [r3, #24]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008386:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800838a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800839a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800839e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80083a2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 80083a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80083ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80083b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083b4:	e052      	b.n	800845c <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	edd3 7a08 	vldr	s15, [r3, #32]
 80083c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	edd3 6a07 	vldr	s13, [r3, #28]
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80083d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083d6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80083da:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80083ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	edd3 6a06 	vldr	s13, [r3, #24]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80083fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008402:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8008406:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	edd3 7a06 	vldr	s15, [r3, #24]
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800841e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800842e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008432:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8008436:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800843a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800843e:	f107 0218 	add.w	r2, r7, #24
 8008442:	ca07      	ldmia	r2, {r0, r1, r2}
 8008444:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008448:	e008      	b.n	800845c <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800844a:	f04f 0300 	mov.w	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	643b      	str	r3, [r7, #64]	; 0x40
 8008456:	f04f 0300 	mov.w	r3, #0
 800845a:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800845c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800845e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008462:	ee06 1a90 	vmov	s13, r1
 8008466:	ee07 2a10 	vmov	s14, r2
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eeb0 0a66 	vmov.f32	s0, s13
 8008472:	eef0 0a47 	vmov.f32	s1, s14
 8008476:	eeb0 1a67 	vmov.f32	s2, s15
 800847a:	374c      	adds	r7, #76	; 0x4c
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8008484:	b480      	push	{r7}
 8008486:	b097      	sub	sp, #92	; 0x5c
 8008488:	af00      	add	r7, sp, #0
 800848a:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b02      	cmp	r3, #2
 8008492:	f000 809a 	beq.w	80085ca <HalfMagnetic+0x146>
 8008496:	2b02      	cmp	r3, #2
 8008498:	f300 80e1 	bgt.w	800865e <HalfMagnetic+0x1da>
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <HalfMagnetic+0x22>
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d048      	beq.n	8008536 <HalfMagnetic+0xb2>
 80084a4:	e0db      	b.n	800865e <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80084b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	edd3 6a06 	vldr	s13, [r3, #24]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80084c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084c6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80084ca:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80084da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	edd3 6a08 	vldr	s13, [r3, #32]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80084f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084f6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80084fa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	ed93 7a08 	vldr	s14, [r3, #32]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800850a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	edd3 6a06 	vldr	s13, [r3, #24]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	edd3 7a07 	vldr	s15, [r3, #28]
 800851a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800851e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008522:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8008526:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800852a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800852e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008530:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008534:	e09c      	b.n	8008670 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	ed93 7a06 	vldr	s14, [r3, #24]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008546:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800854a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	edd3 6a07 	vldr	s13, [r3, #28]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	edd3 7a07 	vldr	s15, [r3, #28]
 800855a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800855e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008562:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	ed93 7a06 	vldr	s14, [r3, #24]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008572:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	edd3 6a07 	vldr	s13, [r3, #28]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008586:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800858a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	ed93 7a07 	vldr	s14, [r3, #28]
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800859a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	edd3 6a06 	vldr	s13, [r3, #24]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80085aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085b2:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 80085b6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 80085ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80085be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80085c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80085c8:	e052      	b.n	8008670 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	ed93 7a07 	vldr	s14, [r3, #28]
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80085d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	edd3 6a06 	vldr	s13, [r3, #24]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80085e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ee:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 80085f2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800860a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	edd3 6a08 	vldr	s13, [r3, #32]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	edd3 7a08 	vldr	s15, [r3, #32]
 800861a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800861e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8008622:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	ed93 7a06 	vldr	s14, [r3, #24]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	edd3 6a08 	vldr	s13, [r3, #32]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008646:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800864a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800864e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008652:	f107 021c 	add.w	r2, r7, #28
 8008656:	ca07      	ldmia	r2, {r0, r1, r2}
 8008658:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800865c:	e008      	b.n	8008670 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	653b      	str	r3, [r7, #80]	; 0x50
 800866a:	f04f 0300 	mov.w	r3, #0
 800866e:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8008670:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008672:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008676:	ee06 1a90 	vmov	s13, r1
 800867a:	ee07 2a10 	vmov	s14, r2
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eeb0 0a66 	vmov.f32	s0, s13
 8008686:	eef0 0a47 	vmov.f32	s1, s14
 800868a:	eeb0 1a67 	vmov.f32	s2, s15
 800868e:	375c      	adds	r7, #92	; 0x5c
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 8008698:	b580      	push	{r7, lr}
 800869a:	b090      	sub	sp, #64	; 0x40
 800869c:	af00      	add	r7, sp, #0
 800869e:	eeb0 5a40 	vmov.f32	s10, s0
 80086a2:	eef0 5a60 	vmov.f32	s11, s1
 80086a6:	eeb0 6a41 	vmov.f32	s12, s2
 80086aa:	eef0 6a61 	vmov.f32	s13, s3
 80086ae:	eeb0 7a42 	vmov.f32	s14, s4
 80086b2:	eef0 7a62 	vmov.f32	s15, s5
 80086b6:	ed87 5a07 	vstr	s10, [r7, #28]
 80086ba:	edc7 5a08 	vstr	s11, [r7, #32]
 80086be:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80086c2:	edc7 6a04 	vstr	s13, [r7, #16]
 80086c6:	ed87 7a05 	vstr	s14, [r7, #20]
 80086ca:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 80086ce:	ed97 5a04 	vldr	s10, [r7, #16]
 80086d2:	edd7 5a05 	vldr	s11, [r7, #20]
 80086d6:	ed97 6a06 	vldr	s12, [r7, #24]
 80086da:	edd7 6a07 	vldr	s13, [r7, #28]
 80086de:	ed97 7a08 	vldr	s14, [r7, #32]
 80086e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086e6:	eef0 1a45 	vmov.f32	s3, s10
 80086ea:	eeb0 2a65 	vmov.f32	s4, s11
 80086ee:	eef0 2a46 	vmov.f32	s5, s12
 80086f2:	eeb0 0a66 	vmov.f32	s0, s13
 80086f6:	eef0 0a47 	vmov.f32	s1, s14
 80086fa:	eeb0 1a67 	vmov.f32	s2, s15
 80086fe:	f7fe fed1 	bl	80074a4 <FusionVectorDotProduct>
 8008702:	eef0 7a40 	vmov.f32	s15, s0
 8008706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800870a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870e:	d540      	bpl.n	8008792 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 8008710:	ed97 5a04 	vldr	s10, [r7, #16]
 8008714:	edd7 5a05 	vldr	s11, [r7, #20]
 8008718:	ed97 6a06 	vldr	s12, [r7, #24]
 800871c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008720:	ed97 7a08 	vldr	s14, [r7, #32]
 8008724:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008728:	eef0 1a45 	vmov.f32	s3, s10
 800872c:	eeb0 2a65 	vmov.f32	s4, s11
 8008730:	eef0 2a46 	vmov.f32	s5, s12
 8008734:	eeb0 0a66 	vmov.f32	s0, s13
 8008738:	eef0 0a47 	vmov.f32	s1, s14
 800873c:	eeb0 1a67 	vmov.f32	s2, s15
 8008740:	f7fe fe4a 	bl	80073d8 <FusionVectorCrossProduct>
 8008744:	eef0 6a40 	vmov.f32	s13, s0
 8008748:	eeb0 7a60 	vmov.f32	s14, s1
 800874c:	eef0 7a41 	vmov.f32	s15, s2
 8008750:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8008754:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8008758:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800875c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8008760:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008764:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008768:	eeb0 0a66 	vmov.f32	s0, s13
 800876c:	eef0 0a47 	vmov.f32	s1, s14
 8008770:	eeb0 1a67 	vmov.f32	s2, s15
 8008774:	f7fe ff36 	bl	80075e4 <FusionVectorNormalise>
 8008778:	eef0 6a40 	vmov.f32	s13, s0
 800877c:	eeb0 7a60 	vmov.f32	s14, s1
 8008780:	eef0 7a41 	vmov.f32	s15, s2
 8008784:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8008788:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800878c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8008790:	e025      	b.n	80087de <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 8008792:	ed97 5a04 	vldr	s10, [r7, #16]
 8008796:	edd7 5a05 	vldr	s11, [r7, #20]
 800879a:	ed97 6a06 	vldr	s12, [r7, #24]
 800879e:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80087a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80087aa:	eef0 1a45 	vmov.f32	s3, s10
 80087ae:	eeb0 2a65 	vmov.f32	s4, s11
 80087b2:	eef0 2a46 	vmov.f32	s5, s12
 80087b6:	eeb0 0a66 	vmov.f32	s0, s13
 80087ba:	eef0 0a47 	vmov.f32	s1, s14
 80087be:	eeb0 1a67 	vmov.f32	s2, s15
 80087c2:	f7fe fe09 	bl	80073d8 <FusionVectorCrossProduct>
 80087c6:	eef0 6a40 	vmov.f32	s13, s0
 80087ca:	eeb0 7a60 	vmov.f32	s14, s1
 80087ce:	eef0 7a41 	vmov.f32	s15, s2
 80087d2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80087d6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80087da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 80087de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	ee06 1a90 	vmov	s13, r1
 80087e8:	ee07 2a10 	vmov	s14, r2
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eeb0 0a66 	vmov.f32	s0, s13
 80087f4:	eef0 0a47 	vmov.f32	s1, s14
 80087f8:	eeb0 1a67 	vmov.f32	s2, s15
 80087fc:	3740      	adds	r7, #64	; 0x40
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	429a      	cmp	r2, r3
 8008814:	da01      	bge.n	800881a <Clamp+0x18>
        return min;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	e006      	b.n	8008828 <Clamp+0x26>
    }
    if (value > max) {
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	429a      	cmp	r2, r3
 8008820:	dd01      	ble.n	8008826 <Clamp+0x24>
        return max;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	e000      	b.n	8008828 <Clamp+0x26>
    }
    return value;
 8008826:	68fb      	ldr	r3, [r7, #12]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8008834:	b490      	push	{r4, r7}
 8008836:	b08a      	sub	sp, #40	; 0x28
 8008838:	af00      	add	r7, sp, #0
 800883a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f107 0418 	add.w	r4, r7, #24
 8008842:	3318      	adds	r3, #24
 8008844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800884a:	69b8      	ldr	r0, [r7, #24]
 800884c:	69f9      	ldr	r1, [r7, #28]
 800884e:	6a3a      	ldr	r2, [r7, #32]
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	ee06 0a10 	vmov	s12, r0
 8008856:	ee06 1a90 	vmov	s13, r1
 800885a:	ee07 2a10 	vmov	s14, r2
 800885e:	ee07 3a90 	vmov	s15, r3
}
 8008862:	eeb0 0a46 	vmov.f32	s0, s12
 8008866:	eef0 0a66 	vmov.f32	s1, s13
 800886a:	eeb0 1a47 	vmov.f32	s2, s14
 800886e:	eef0 1a67 	vmov.f32	s3, s15
 8008872:	3728      	adds	r7, #40	; 0x28
 8008874:	46bd      	mov	sp, r7
 8008876:	bc90      	pop	{r4, r7}
 8008878:	4770      	bx	lr

0800887a <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800887a:	b480      	push	{r7}
 800887c:	b091      	sub	sp, #68	; 0x44
 800887e:	af00      	add	r7, sp, #0
 8008880:	eeb0 5a40 	vmov.f32	s10, s0
 8008884:	eef0 5a60 	vmov.f32	s11, s1
 8008888:	eeb0 6a41 	vmov.f32	s12, s2
 800888c:	eef0 6a61 	vmov.f32	s13, s3
 8008890:	eeb0 7a42 	vmov.f32	s14, s4
 8008894:	eef0 7a62 	vmov.f32	s15, s5
 8008898:	ed87 5a07 	vstr	s10, [r7, #28]
 800889c:	edc7 5a08 	vstr	s11, [r7, #32]
 80088a0:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80088a4:	edc7 6a04 	vstr	s13, [r7, #16]
 80088a8:	ed87 7a05 	vstr	s14, [r7, #20]
 80088ac:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80088b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80088b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80088b8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80088bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80088c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80088c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80088c8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80088cc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80088d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80088d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80088d8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80088dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80088e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80088e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80088e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80088ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80088ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f4:	ee06 1a90 	vmov	s13, r1
 80088f8:	ee07 2a10 	vmov	s14, r2
 80088fc:	ee07 3a90 	vmov	s15, r3
}
 8008900:	eeb0 0a66 	vmov.f32	s0, s13
 8008904:	eef0 0a47 	vmov.f32	s1, s14
 8008908:	eeb0 1a67 	vmov.f32	s2, s15
 800890c:	3744      	adds	r7, #68	; 0x44
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8008916:	b480      	push	{r7}
 8008918:	b091      	sub	sp, #68	; 0x44
 800891a:	af00      	add	r7, sp, #0
 800891c:	eeb0 5a40 	vmov.f32	s10, s0
 8008920:	eef0 5a60 	vmov.f32	s11, s1
 8008924:	eeb0 6a41 	vmov.f32	s12, s2
 8008928:	eef0 6a61 	vmov.f32	s13, s3
 800892c:	eeb0 7a42 	vmov.f32	s14, s4
 8008930:	eef0 7a62 	vmov.f32	s15, s5
 8008934:	ed87 5a07 	vstr	s10, [r7, #28]
 8008938:	edc7 5a08 	vstr	s11, [r7, #32]
 800893c:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8008940:	edc7 6a04 	vstr	s13, [r7, #16]
 8008944:	ed87 7a05 	vstr	s14, [r7, #20]
 8008948:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 800894c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008950:	edd7 7a04 	vldr	s15, [r7, #16]
 8008954:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008958:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 800895c:	ed97 7a08 	vldr	s14, [r7, #32]
 8008960:	edd7 7a05 	vldr	s15, [r7, #20]
 8008964:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008968:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 800896c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008970:	edd7 7a06 	vldr	s15, [r7, #24]
 8008974:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008978:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800897c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008980:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008984:	ca07      	ldmia	r2, {r0, r1, r2}
 8008986:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800898a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800898c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800898e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008990:	ee06 1a90 	vmov	s13, r1
 8008994:	ee07 2a10 	vmov	s14, r2
 8008998:	ee07 3a90 	vmov	s15, r3
}
 800899c:	eeb0 0a66 	vmov.f32	s0, s13
 80089a0:	eef0 0a47 	vmov.f32	s1, s14
 80089a4:	eeb0 1a67 	vmov.f32	s2, s15
 80089a8:	3744      	adds	r7, #68	; 0x44
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80089b2:	b480      	push	{r7}
 80089b4:	b08f      	sub	sp, #60	; 0x3c
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	eef0 6a40 	vmov.f32	s13, s0
 80089bc:	eeb0 7a60 	vmov.f32	s14, s1
 80089c0:	eef0 7a41 	vmov.f32	s15, s2
 80089c4:	edc7 1a04 	vstr	s3, [r7, #16]
 80089c8:	edc7 6a05 	vstr	s13, [r7, #20]
 80089cc:	ed87 7a06 	vstr	s14, [r7, #24]
 80089d0:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80089d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80089d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80089dc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80089e0:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80089e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80089e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80089ec:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80089f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80089f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80089f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80089fc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8008a00:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8008a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a08:	f107 0220 	add.w	r2, r7, #32
 8008a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	ee06 1a90 	vmov	s13, r1
 8008a1c:	ee07 2a10 	vmov	s14, r2
 8008a20:	ee07 3a90 	vmov	s15, r3
}
 8008a24:	eeb0 0a66 	vmov.f32	s0, s13
 8008a28:	eef0 0a47 	vmov.f32	s1, s14
 8008a2c:	eeb0 1a67 	vmov.f32	s2, s15
 8008a30:	373c      	adds	r7, #60	; 0x3c
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
	...

08008a3c <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	ee07 3a90 	vmov	s15, r3
 8008a4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a58:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008a9c <FusionOffsetInitialise+0x60>
 8008a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	441a      	add	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	60da      	str	r2, [r3, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	611a      	str	r2, [r3, #16]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	615a      	str	r2, [r3, #20]
}
 8008a90:	bf00      	nop
 8008a92:	371c      	adds	r7, #28
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	3e00adfd 	.word	0x3e00adfd

08008aa0 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8008aa0:	b590      	push	{r4, r7, lr}
 8008aa2:	b08f      	sub	sp, #60	; 0x3c
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	61f8      	str	r0, [r7, #28]
 8008aa8:	eef0 6a40 	vmov.f32	s13, s0
 8008aac:	eeb0 7a60 	vmov.f32	s14, s1
 8008ab0:	eef0 7a41 	vmov.f32	s15, s2
 8008ab4:	edc7 6a04 	vstr	s13, [r7, #16]
 8008ab8:	ed87 7a05 	vstr	s14, [r7, #20]
 8008abc:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	ed93 5a03 	vldr	s10, [r3, #12]
 8008ac6:	edd3 5a04 	vldr	s11, [r3, #16]
 8008aca:	ed93 6a05 	vldr	s12, [r3, #20]
 8008ace:	edd7 6a04 	vldr	s13, [r7, #16]
 8008ad2:	ed97 7a05 	vldr	s14, [r7, #20]
 8008ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ada:	eef0 1a45 	vmov.f32	s3, s10
 8008ade:	eeb0 2a65 	vmov.f32	s4, s11
 8008ae2:	eef0 2a46 	vmov.f32	s5, s12
 8008ae6:	eeb0 0a66 	vmov.f32	s0, s13
 8008aea:	eef0 0a47 	vmov.f32	s1, s14
 8008aee:	eeb0 1a67 	vmov.f32	s2, s15
 8008af2:	f7ff ff10 	bl	8008916 <FusionVectorSubtract>
 8008af6:	eef0 6a40 	vmov.f32	s13, s0
 8008afa:	eeb0 7a60 	vmov.f32	s14, s1
 8008afe:	eef0 7a41 	vmov.f32	s15, s2
 8008b02:	edc7 6a04 	vstr	s13, [r7, #16]
 8008b06:	ed87 7a05 	vstr	s14, [r7, #20]
 8008b0a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8008b0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008b12:	eef0 7ae7 	vabs.f32	s15, s15
 8008b16:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b22:	dc15      	bgt.n	8008b50 <FusionOffsetUpdate+0xb0>
 8008b24:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b28:	eef0 7ae7 	vabs.f32	s15, s15
 8008b2c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b38:	dc0a      	bgt.n	8008b50 <FusionOffsetUpdate+0xb0>
 8008b3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8008b42:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b4e:	dd0a      	ble.n	8008b66 <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	2200      	movs	r2, #0
 8008b54:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8008b56:	f107 0320 	add.w	r3, r7, #32
 8008b5a:	f107 0210 	add.w	r2, r7, #16
 8008b5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b64:	e060      	b.n	8008c28 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	689a      	ldr	r2, [r3, #8]
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d20c      	bcs.n	8008b8c <FusionOffsetUpdate+0xec>
        offset->timer++;
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8008b7c:	f107 0320 	add.w	r3, r7, #32
 8008b80:	f107 0210 	add.w	r2, r7, #16
 8008b84:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b8a:	e04d      	b.n	8008c28 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	ed93 6a00 	vldr	s12, [r3]
 8008b92:	edd7 6a04 	vldr	s13, [r7, #16]
 8008b96:	ed97 7a05 	vldr	s14, [r7, #20]
 8008b9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b9e:	eef0 1a46 	vmov.f32	s3, s12
 8008ba2:	eeb0 0a66 	vmov.f32	s0, s13
 8008ba6:	eef0 0a47 	vmov.f32	s1, s14
 8008baa:	eeb0 1a67 	vmov.f32	s2, s15
 8008bae:	f7ff ff00 	bl	80089b2 <FusionVectorMultiplyScalar>
 8008bb2:	eef0 6a40 	vmov.f32	s13, s0
 8008bb6:	eeb0 7a60 	vmov.f32	s14, s1
 8008bba:	eef0 7a41 	vmov.f32	s15, s2
 8008bbe:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8008bc2:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8008bc6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8008bca:	69fc      	ldr	r4, [r7, #28]
 8008bcc:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8008bd0:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8008bd4:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	edd3 6a03 	vldr	s13, [r3, #12]
 8008bde:	ed93 7a04 	vldr	s14, [r3, #16]
 8008be2:	edd3 7a05 	vldr	s15, [r3, #20]
 8008be6:	eef0 1a45 	vmov.f32	s3, s10
 8008bea:	eeb0 2a65 	vmov.f32	s4, s11
 8008bee:	eef0 2a46 	vmov.f32	s5, s12
 8008bf2:	eeb0 0a66 	vmov.f32	s0, s13
 8008bf6:	eef0 0a47 	vmov.f32	s1, s14
 8008bfa:	eeb0 1a67 	vmov.f32	s2, s15
 8008bfe:	f7ff fe3c 	bl	800887a <FusionVectorAdd>
 8008c02:	eef0 6a40 	vmov.f32	s13, s0
 8008c06:	eeb0 7a60 	vmov.f32	s14, s1
 8008c0a:	eef0 7a41 	vmov.f32	s15, s2
 8008c0e:	edc4 6a03 	vstr	s13, [r4, #12]
 8008c12:	ed84 7a04 	vstr	s14, [r4, #16]
 8008c16:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8008c1a:	f107 0320 	add.w	r3, r7, #32
 8008c1e:	f107 0210 	add.w	r2, r7, #16
 8008c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008c28:	6a39      	ldr	r1, [r7, #32]
 8008c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	ee06 1a90 	vmov	s13, r1
 8008c32:	ee07 2a10 	vmov	s14, r2
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eeb0 0a66 	vmov.f32	s0, s13
 8008c3e:	eef0 0a47 	vmov.f32	s1, s14
 8008c42:	eeb0 1a67 	vmov.f32	s2, s15
 8008c46:	373c      	adds	r7, #60	; 0x3c
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd90      	pop	{r4, r7, pc}

08008c4c <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4413      	add	r3, r2
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b24      	cmp	r3, #36	; 0x24
 8008c66:	d103      	bne.n	8008c70 <GPS_validate+0x24>
		i++;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8008c6e:	e00c      	b.n	8008c8a <GPS_validate+0x3e>
		return 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	e047      	b.n	8008d04 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4053      	eors	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
		i++;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	3301      	adds	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	4413      	add	r3, r2
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d008      	beq.n	8008ca8 <GPS_validate+0x5c>
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca0:	d002      	beq.n	8008ca8 <GPS_validate+0x5c>
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2b4a      	cmp	r3, #74	; 0x4a
 8008ca6:	dde5      	ble.n	8008c74 <GPS_validate+0x28>
	}

	if (i >= 75)
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b4a      	cmp	r3, #74	; 0x4a
 8008cac:	dd01      	ble.n	8008cb2 <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8008cae:	2300      	movs	r3, #0
 8008cb0:	e028      	b.n	8008d04 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b2a      	cmp	r3, #42	; 0x2a
 8008cbc:	d119      	bne.n	8008cf2 <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	3302      	adds	r3, #2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	490a      	ldr	r1, [pc, #40]	; (8008d0c <GPS_validate+0xc0>)
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f00c fb0a 	bl	80152fc <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8008ce8:	7a3a      	ldrb	r2, [r7, #8]
 8008cea:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d108      	bne.n	8008d02 <GPS_validate+0xb6>
 8008cf0:	e001      	b.n	8008cf6 <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e006      	b.n	8008d04 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8008cf6:	7a7a      	ldrb	r2, [r7, #9]
 8008cf8:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d101      	bne.n	8008d02 <GPS_validate+0xb6>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e000      	b.n	8008d04 <GPS_validate+0xb8>
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	0801be54 	.word	0x0801be54

08008d10 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08a      	sub	sp, #40	; 0x28
 8008d14:	af08      	add	r7, sp, #32
 8008d16:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8008d18:	2206      	movs	r2, #6
 8008d1a:	4964      	ldr	r1, [pc, #400]	; (8008eac <GPS_parse+0x19c>)
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f00c fb86 	bl	801542e <strncmp>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d138      	bne.n	8008d9a <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8008d28:	4b61      	ldr	r3, [pc, #388]	; (8008eb0 <GPS_parse+0x1a0>)
 8008d2a:	9307      	str	r3, [sp, #28]
 8008d2c:	4b61      	ldr	r3, [pc, #388]	; (8008eb4 <GPS_parse+0x1a4>)
 8008d2e:	9306      	str	r3, [sp, #24]
 8008d30:	4b61      	ldr	r3, [pc, #388]	; (8008eb8 <GPS_parse+0x1a8>)
 8008d32:	9305      	str	r3, [sp, #20]
 8008d34:	4b61      	ldr	r3, [pc, #388]	; (8008ebc <GPS_parse+0x1ac>)
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	4b61      	ldr	r3, [pc, #388]	; (8008ec0 <GPS_parse+0x1b0>)
 8008d3a:	9303      	str	r3, [sp, #12]
 8008d3c:	4b61      	ldr	r3, [pc, #388]	; (8008ec4 <GPS_parse+0x1b4>)
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	4b61      	ldr	r3, [pc, #388]	; (8008ec8 <GPS_parse+0x1b8>)
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	4b61      	ldr	r3, [pc, #388]	; (8008ecc <GPS_parse+0x1bc>)
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	4b61      	ldr	r3, [pc, #388]	; (8008ed0 <GPS_parse+0x1c0>)
 8008d4a:	4a62      	ldr	r2, [pc, #392]	; (8008ed4 <GPS_parse+0x1c4>)
 8008d4c:	4962      	ldr	r1, [pc, #392]	; (8008ed8 <GPS_parse+0x1c8>)
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f00c faf4 	bl	801533c <siscanf>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f340 80a4 	ble.w	8008ea4 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8008d5c:	4b5f      	ldr	r3, [pc, #380]	; (8008edc <GPS_parse+0x1cc>)
 8008d5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008d62:	4b5e      	ldr	r3, [pc, #376]	; (8008edc <GPS_parse+0x1cc>)
 8008d64:	7d1b      	ldrb	r3, [r3, #20]
 8008d66:	4618      	mov	r0, r3
 8008d68:	eeb0 0a67 	vmov.f32	s0, s15
 8008d6c:	f000 f8da 	bl	8008f24 <GPS_nmea_to_dec>
 8008d70:	eef0 7a40 	vmov.f32	s15, s0
 8008d74:	4b59      	ldr	r3, [pc, #356]	; (8008edc <GPS_parse+0x1cc>)
 8008d76:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8008d7a:	4b58      	ldr	r3, [pc, #352]	; (8008edc <GPS_parse+0x1cc>)
 8008d7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d80:	4b56      	ldr	r3, [pc, #344]	; (8008edc <GPS_parse+0x1cc>)
 8008d82:	7f1b      	ldrb	r3, [r3, #28]
 8008d84:	4618      	mov	r0, r3
 8008d86:	eeb0 0a67 	vmov.f32	s0, s15
 8008d8a:	f000 f8cb 	bl	8008f24 <GPS_nmea_to_dec>
 8008d8e:	eef0 7a40 	vmov.f32	s15, s0
 8008d92:	4b52      	ldr	r3, [pc, #328]	; (8008edc <GPS_parse+0x1cc>)
 8008d94:	edc3 7a00 	vstr	s15, [r3]
			return;
 8008d98:	e084      	b.n	8008ea4 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8008d9a:	2206      	movs	r2, #6
 8008d9c:	4950      	ldr	r1, [pc, #320]	; (8008ee0 <GPS_parse+0x1d0>)
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f00c fb45 	bl	801542e <strncmp>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d123      	bne.n	8008df2 <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8008daa:	4b4e      	ldr	r3, [pc, #312]	; (8008ee4 <GPS_parse+0x1d4>)
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	4b4e      	ldr	r3, [pc, #312]	; (8008ee8 <GPS_parse+0x1d8>)
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	4b4e      	ldr	r3, [pc, #312]	; (8008eec <GPS_parse+0x1dc>)
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	4b43      	ldr	r3, [pc, #268]	; (8008ec4 <GPS_parse+0x1b4>)
 8008db8:	9302      	str	r3, [sp, #8]
 8008dba:	4b43      	ldr	r3, [pc, #268]	; (8008ec8 <GPS_parse+0x1b8>)
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	4b43      	ldr	r3, [pc, #268]	; (8008ecc <GPS_parse+0x1bc>)
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	4b43      	ldr	r3, [pc, #268]	; (8008ed0 <GPS_parse+0x1c0>)
 8008dc4:	4a43      	ldr	r2, [pc, #268]	; (8008ed4 <GPS_parse+0x1c4>)
 8008dc6:	494a      	ldr	r1, [pc, #296]	; (8008ef0 <GPS_parse+0x1e0>)
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f00c fab7 	bl	801533c <siscanf>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dd67      	ble.n	8008ea4 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8008dd4:	4b41      	ldr	r3, [pc, #260]	; (8008edc <GPS_parse+0x1cc>)
 8008dd6:	7d1b      	ldrb	r3, [r3, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d102      	bne.n	8008de2 <GPS_parse+0xd2>
				GPS.ns = ' ';
 8008ddc:	4b3f      	ldr	r3, [pc, #252]	; (8008edc <GPS_parse+0x1cc>)
 8008dde:	2220      	movs	r2, #32
 8008de0:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008de2:	4b3e      	ldr	r3, [pc, #248]	; (8008edc <GPS_parse+0x1cc>)
 8008de4:	7f1b      	ldrb	r3, [r3, #28]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d157      	bne.n	8008e9a <GPS_parse+0x18a>
				GPS.ew = ' ';
 8008dea:	4b3c      	ldr	r3, [pc, #240]	; (8008edc <GPS_parse+0x1cc>)
 8008dec:	2220      	movs	r2, #32
 8008dee:	771a      	strb	r2, [r3, #28]
			return;
 8008df0:	e053      	b.n	8008e9a <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8008df2:	2206      	movs	r2, #6
 8008df4:	493f      	ldr	r1, [pc, #252]	; (8008ef4 <GPS_parse+0x1e4>)
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f00c fb19 	bl	801542e <strncmp>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d11f      	bne.n	8008e42 <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8008e02:	4b3d      	ldr	r3, [pc, #244]	; (8008ef8 <GPS_parse+0x1e8>)
 8008e04:	9303      	str	r3, [sp, #12]
 8008e06:	4b33      	ldr	r3, [pc, #204]	; (8008ed4 <GPS_parse+0x1c4>)
 8008e08:	9302      	str	r3, [sp, #8]
 8008e0a:	4b2e      	ldr	r3, [pc, #184]	; (8008ec4 <GPS_parse+0x1b4>)
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <GPS_parse+0x1b8>)
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <GPS_parse+0x1bc>)
 8008e14:	4a2e      	ldr	r2, [pc, #184]	; (8008ed0 <GPS_parse+0x1c0>)
 8008e16:	4939      	ldr	r1, [pc, #228]	; (8008efc <GPS_parse+0x1ec>)
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f00c fa8f 	bl	801533c <siscanf>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dd3f      	ble.n	8008ea4 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8008e24:	4b2d      	ldr	r3, [pc, #180]	; (8008edc <GPS_parse+0x1cc>)
 8008e26:	7d1b      	ldrb	r3, [r3, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <GPS_parse+0x122>
				GPS.ns = '?';
 8008e2c:	4b2b      	ldr	r3, [pc, #172]	; (8008edc <GPS_parse+0x1cc>)
 8008e2e:	223f      	movs	r2, #63	; 0x3f
 8008e30:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008e32:	4b2a      	ldr	r3, [pc, #168]	; (8008edc <GPS_parse+0x1cc>)
 8008e34:	7f1b      	ldrb	r3, [r3, #28]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d131      	bne.n	8008e9e <GPS_parse+0x18e>
				GPS.ew = '?';
 8008e3a:	4b28      	ldr	r3, [pc, #160]	; (8008edc <GPS_parse+0x1cc>)
 8008e3c:	223f      	movs	r2, #63	; 0x3f
 8008e3e:	771a      	strb	r2, [r3, #28]
			return;
 8008e40:	e02d      	b.n	8008e9e <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8008e42:	2206      	movs	r2, #6
 8008e44:	492e      	ldr	r1, [pc, #184]	; (8008f00 <GPS_parse+0x1f0>)
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f00c faf1 	bl	801542e <strncmp>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d128      	bne.n	8008ea4 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8008e52:	4b2c      	ldr	r3, [pc, #176]	; (8008f04 <GPS_parse+0x1f4>)
 8008e54:	9305      	str	r3, [sp, #20]
 8008e56:	4b2c      	ldr	r3, [pc, #176]	; (8008f08 <GPS_parse+0x1f8>)
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	4b2c      	ldr	r3, [pc, #176]	; (8008f0c <GPS_parse+0x1fc>)
 8008e5c:	9303      	str	r3, [sp, #12]
 8008e5e:	4b23      	ldr	r3, [pc, #140]	; (8008eec <GPS_parse+0x1dc>)
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	4b2b      	ldr	r3, [pc, #172]	; (8008f10 <GPS_parse+0x200>)
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	4b2b      	ldr	r3, [pc, #172]	; (8008f14 <GPS_parse+0x204>)
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	4b2b      	ldr	r3, [pc, #172]	; (8008f18 <GPS_parse+0x208>)
 8008e6c:	4a2b      	ldr	r2, [pc, #172]	; (8008f1c <GPS_parse+0x20c>)
 8008e6e:	492c      	ldr	r1, [pc, #176]	; (8008f20 <GPS_parse+0x210>)
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f00c fa63 	bl	801533c <siscanf>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dd13      	ble.n	8008ea4 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8008e7c:	4b17      	ldr	r3, [pc, #92]	; (8008edc <GPS_parse+0x1cc>)
 8008e7e:	7d1b      	ldrb	r3, [r3, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <GPS_parse+0x17a>
				GPS.ns = '?';
 8008e84:	4b15      	ldr	r3, [pc, #84]	; (8008edc <GPS_parse+0x1cc>)
 8008e86:	223f      	movs	r2, #63	; 0x3f
 8008e88:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8008e8a:	4b14      	ldr	r3, [pc, #80]	; (8008edc <GPS_parse+0x1cc>)
 8008e8c:	7f1b      	ldrb	r3, [r3, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d107      	bne.n	8008ea2 <GPS_parse+0x192>
				GPS.ew = '?';
 8008e92:	4b12      	ldr	r3, [pc, #72]	; (8008edc <GPS_parse+0x1cc>)
 8008e94:	223f      	movs	r2, #63	; 0x3f
 8008e96:	771a      	strb	r2, [r3, #28]
			return;
 8008e98:	e003      	b.n	8008ea2 <GPS_parse+0x192>
			return;
 8008e9a:	bf00      	nop
 8008e9c:	e002      	b.n	8008ea4 <GPS_parse+0x194>
			return;
 8008e9e:	bf00      	nop
 8008ea0:	e000      	b.n	8008ea4 <GPS_parse+0x194>
			return;
 8008ea2:	bf00      	nop
		}
	}
}
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	0801be5c 	.word	0x0801be5c
 8008eb0:	200005a0 	.word	0x200005a0
 8008eb4:	2000059c 	.word	0x2000059c
 8008eb8:	20000598 	.word	0x20000598
 8008ebc:	20000594 	.word	0x20000594
 8008ec0:	20000590 	.word	0x20000590
 8008ec4:	2000058c 	.word	0x2000058c
 8008ec8:	20000588 	.word	0x20000588
 8008ecc:	20000584 	.word	0x20000584
 8008ed0:	20000580 	.word	0x20000580
 8008ed4:	2000057c 	.word	0x2000057c
 8008ed8:	0801be64 	.word	0x0801be64
 8008edc:	20000570 	.word	0x20000570
 8008ee0:	0801be8c 	.word	0x0801be8c
 8008ee4:	200005ac 	.word	0x200005ac
 8008ee8:	200005a8 	.word	0x200005a8
 8008eec:	200005a4 	.word	0x200005a4
 8008ef0:	0801be94 	.word	0x0801be94
 8008ef4:	0801beb4 	.word	0x0801beb4
 8008ef8:	200005b0 	.word	0x200005b0
 8008efc:	0801bebc 	.word	0x0801bebc
 8008f00:	0801bed8 	.word	0x0801bed8
 8008f04:	200005c8 	.word	0x200005c8
 8008f08:	200005c4 	.word	0x200005c4
 8008f0c:	200005c1 	.word	0x200005c1
 8008f10:	200005c0 	.word	0x200005c0
 8008f14:	200005bc 	.word	0x200005bc
 8008f18:	200005b8 	.word	0x200005b8
 8008f1c:	200005b4 	.word	0x200005b4
 8008f20:	0801bee0 	.word	0x0801bee0

08008f24 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f2e:	4603      	mov	r3, r0
 8008f30:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8008f32:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f36:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008fb8 <GPS_nmea_to_dec+0x94>
 8008f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f42:	ee17 3a90 	vmov	r3, s15
 8008f46:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2264      	movs	r2, #100	; 0x64
 8008f4c:	fb02 f303 	mul.w	r3, r2, r3
 8008f50:	ee07 3a90 	vmov	s15, r3
 8008f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f58:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f60:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8008f64:	ed97 7a03 	vldr	s14, [r7, #12]
 8008f68:	eddf 6a14 	vldr	s13, [pc, #80]	; 8008fbc <GPS_nmea_to_dec+0x98>
 8008f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f70:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8008f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f86:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	2b53      	cmp	r3, #83	; 0x53
 8008f8e:	d002      	beq.n	8008f96 <GPS_nmea_to_dec+0x72>
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b57      	cmp	r3, #87	; 0x57
 8008f94:	d105      	bne.n	8008fa2 <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8008f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f9a:	eef1 7a67 	vneg.f32	s15, s15
 8008f9e:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	ee07 3a90 	vmov	s15, r3
}
 8008fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	42c80000 	.word	0x42c80000
 8008fbc:	42700000 	.word	0x42700000

08008fc0 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8008fc4:	2007      	movs	r0, #7
 8008fc6:	f000 f871 	bl	80090ac <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f000 f8c8 	bl	8009160 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_75HZ);
 8008fd0:	2006      	movs	r0, #6
 8008fd2:	f000 f8e0 	bl	8009196 <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8008fd6:	2002      	movs	r0, #2
 8008fd8:	f000 f8fc 	bl	80091d4 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8008fdc:	2100      	movs	r1, #0
 8008fde:	2000      	movs	r0, #0
 8008fe0:	f000 f84e 	bl	8009080 <HMC5883L_setOffset>

	return 0;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8008ff2:	2003      	movs	r0, #3
 8008ff4:	f000 f946 	bl	8009284 <HMC5883L_readRegister16>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	; (8009074 <HMC5883L_readRaw+0x88>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800900a:	4b1b      	ldr	r3, [pc, #108]	; (8009078 <HMC5883L_readRaw+0x8c>)
 800900c:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8009010:	2007      	movs	r0, #7
 8009012:	f000 f937 	bl	8009284 <HMC5883L_readRegister16>
 8009016:	4603      	mov	r3, r0
 8009018:	461a      	mov	r2, r3
 800901a:	4b18      	ldr	r3, [pc, #96]	; (800907c <HMC5883L_readRaw+0x90>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009028:	4b13      	ldr	r3, [pc, #76]	; (8009078 <HMC5883L_readRaw+0x8c>)
 800902a:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 800902e:	2005      	movs	r0, #5
 8009030:	f000 f928 	bl	8009284 <HMC5883L_readRegister16>
 8009034:	4603      	mov	r3, r0
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800903e:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <HMC5883L_readRaw+0x8c>)
 8009040:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8009044:	4a0c      	ldr	r2, [pc, #48]	; (8009078 <HMC5883L_readRaw+0x8c>)
 8009046:	f107 0314 	add.w	r3, r7, #20
 800904a:	ca07      	ldmia	r2, {r0, r1, r2}
 800904c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009050:	6979      	ldr	r1, [r7, #20]
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	ee06 1a90 	vmov	s13, r1
 800905a:	ee07 2a10 	vmov	s14, r2
 800905e:	ee07 3a90 	vmov	s15, r3
}
 8009062:	eeb0 0a66 	vmov.f32	s0, s13
 8009066:	eef0 0a47 	vmov.f32	s1, s14
 800906a:	eeb0 1a67 	vmov.f32	s2, s15
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	2000047c 	.word	0x2000047c
 8009078:	20000470 	.word	0x20000470
 800907c:	20000480 	.word	0x20000480

08009080 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 800908a:	4a06      	ldr	r2, [pc, #24]	; (80090a4 <HMC5883L_setOffset+0x24>)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8009090:	4a05      	ldr	r2, [pc, #20]	; (80090a8 <HMC5883L_setOffset+0x28>)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	6013      	str	r3, [r2, #0]
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	2000047c 	.word	0x2000047c
 80090a8:	20000480 	.word	0x20000480

080090ac <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	71fb      	strb	r3, [r7, #7]
    switch(range)
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	2b07      	cmp	r3, #7
 80090ba:	d833      	bhi.n	8009124 <HMC5883L_setRange+0x78>
 80090bc:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <HMC5883L_setRange+0x18>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090e5 	.word	0x080090e5
 80090c8:	080090ed 	.word	0x080090ed
 80090cc:	080090f5 	.word	0x080090f5
 80090d0:	080090fd 	.word	0x080090fd
 80090d4:	08009105 	.word	0x08009105
 80090d8:	0800910d 	.word	0x0800910d
 80090dc:	08009115 	.word	0x08009115
 80090e0:	0800911d 	.word	0x0800911d
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 80090e4:	4b15      	ldr	r3, [pc, #84]	; (800913c <HMC5883L_setRange+0x90>)
 80090e6:	4a16      	ldr	r2, [pc, #88]	; (8009140 <HMC5883L_setRange+0x94>)
 80090e8:	601a      	str	r2, [r3, #0]
	    break;
 80090ea:	e01c      	b.n	8009126 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 80090ec:	4b13      	ldr	r3, [pc, #76]	; (800913c <HMC5883L_setRange+0x90>)
 80090ee:	4a15      	ldr	r2, [pc, #84]	; (8009144 <HMC5883L_setRange+0x98>)
 80090f0:	601a      	str	r2, [r3, #0]
	    break;
 80090f2:	e018      	b.n	8009126 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 80090f4:	4b11      	ldr	r3, [pc, #68]	; (800913c <HMC5883L_setRange+0x90>)
 80090f6:	4a14      	ldr	r2, [pc, #80]	; (8009148 <HMC5883L_setRange+0x9c>)
 80090f8:	601a      	str	r2, [r3, #0]
	    break;
 80090fa:	e014      	b.n	8009126 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 80090fc:	4b0f      	ldr	r3, [pc, #60]	; (800913c <HMC5883L_setRange+0x90>)
 80090fe:	4a13      	ldr	r2, [pc, #76]	; (800914c <HMC5883L_setRange+0xa0>)
 8009100:	601a      	str	r2, [r3, #0]
	    break;
 8009102:	e010      	b.n	8009126 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8009104:	4b0d      	ldr	r3, [pc, #52]	; (800913c <HMC5883L_setRange+0x90>)
 8009106:	4a12      	ldr	r2, [pc, #72]	; (8009150 <HMC5883L_setRange+0xa4>)
 8009108:	601a      	str	r2, [r3, #0]
	    break;
 800910a:	e00c      	b.n	8009126 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 800910c:	4b0b      	ldr	r3, [pc, #44]	; (800913c <HMC5883L_setRange+0x90>)
 800910e:	4a11      	ldr	r2, [pc, #68]	; (8009154 <HMC5883L_setRange+0xa8>)
 8009110:	601a      	str	r2, [r3, #0]
	    break;
 8009112:	e008      	b.n	8009126 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8009114:	4b09      	ldr	r3, [pc, #36]	; (800913c <HMC5883L_setRange+0x90>)
 8009116:	4a10      	ldr	r2, [pc, #64]	; (8009158 <HMC5883L_setRange+0xac>)
 8009118:	601a      	str	r2, [r3, #0]
	    break;
 800911a:	e004      	b.n	8009126 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <HMC5883L_setRange+0x90>)
 800911e:	4a0f      	ldr	r2, [pc, #60]	; (800915c <HMC5883L_setRange+0xb0>)
 8009120:	601a      	str	r2, [r3, #0]
	    break;
 8009122:	e000      	b.n	8009126 <HMC5883L_setRange+0x7a>

	default:
	    break;
 8009124:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	015b      	lsls	r3, r3, #5
 800912a:	b2db      	uxtb	r3, r3
 800912c:	4619      	mov	r1, r3
 800912e:	2001      	movs	r0, #1
 8009130:	f000 f870 	bl	8009214 <HMC5883L_writeRegister8>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	2000046c 	.word	0x2000046c
 8009140:	3d958106 	.word	0x3d958106
 8009144:	3f6b851f 	.word	0x3f6b851f
 8009148:	3f9c28f6 	.word	0x3f9c28f6
 800914c:	3fc28f5c 	.word	0x3fc28f5c
 8009150:	401147ae 	.word	0x401147ae
 8009154:	4023d70a 	.word	0x4023d70a
 8009158:	4041eb85 	.word	0x4041eb85
 800915c:	408b3333 	.word	0x408b3333

08009160 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 800916a:	2002      	movs	r0, #2
 800916c:	f000 f86e 	bl	800924c <HMC5883L_readRegister8>
 8009170:	4603      	mov	r3, r0
 8009172:	73fb      	strb	r3, [r7, #15]
    // Mask out the lower 2 bits
    value &= 0b11111100;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	73fb      	strb	r3, [r7, #15]
    // Set the lower 2 bits
    value |= mode;
 800917c:	7bfa      	ldrb	r2, [r7, #15]
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	4313      	orrs	r3, r2
 8009182:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	4619      	mov	r1, r3
 8009188:	2002      	movs	r0, #2
 800918a:	f000 f843 	bl	8009214 <HMC5883L_writeRegister8>
}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	4603      	mov	r3, r0
 800919e:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 80091a0:	2000      	movs	r0, #0
 80091a2:	f000 f853 	bl	800924c <HMC5883L_readRegister8>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73fb      	strb	r3, [r7, #15]
    // Mask out bits
    value &= 0b11100011;
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	f023 031c 	bic.w	r3, r3, #28
 80091b0:	73fb      	strb	r3, [r7, #15]
    // Set bits
    value |= (dataRate << 2);
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	b25a      	sxtb	r2, r3
 80091b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091bc:	4313      	orrs	r3, r2
 80091be:	b25b      	sxtb	r3, r3
 80091c0:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	4619      	mov	r1, r3
 80091c6:	2000      	movs	r0, #0
 80091c8:	f000 f824 	bl	8009214 <HMC5883L_writeRegister8>
}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 80091de:	2000      	movs	r0, #0
 80091e0:	f000 f834 	bl	800924c <HMC5883L_readRegister8>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]
    // Mask out bits
    value &= 0b10011111;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80091ee:	73fb      	strb	r3, [r7, #15]
    // Set bits
    value |= (samples << 5);
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	015b      	lsls	r3, r3, #5
 80091f4:	b25a      	sxtb	r2, r3
 80091f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	b25b      	sxtb	r3, r3
 80091fe:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4619      	mov	r1, r3
 8009204:	2000      	movs	r0, #0
 8009206:	f000 f805 	bl	8009214 <HMC5883L_writeRegister8>
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af04      	add	r7, sp, #16
 800921a:	4603      	mov	r3, r0
 800921c:	460a      	mov	r2, r1
 800921e:	71fb      	strb	r3, [r7, #7]
 8009220:	4613      	mov	r3, r2
 8009222:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	b29a      	uxth	r2, r3
 8009228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800922c:	9302      	str	r3, [sp, #8]
 800922e:	2301      	movs	r3, #1
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	1dbb      	adds	r3, r7, #6
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	2301      	movs	r3, #1
 8009238:	213c      	movs	r1, #60	; 0x3c
 800923a:	4803      	ldr	r0, [pc, #12]	; (8009248 <HMC5883L_writeRegister8+0x34>)
 800923c:	f002 fb9c 	bl	800b978 <HAL_I2C_Mem_Write>
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	200009c4 	.word	0x200009c4

0800924c <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af04      	add	r7, sp, #16
 8009252:	4603      	mov	r3, r0
 8009254:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	b29a      	uxth	r2, r3
 800925a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800925e:	9302      	str	r3, [sp, #8]
 8009260:	2301      	movs	r3, #1
 8009262:	9301      	str	r3, [sp, #4]
 8009264:	f107 030f 	add.w	r3, r7, #15
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	2301      	movs	r3, #1
 800926c:	213c      	movs	r1, #60	; 0x3c
 800926e:	4804      	ldr	r0, [pc, #16]	; (8009280 <HMC5883L_readRegister8+0x34>)
 8009270:	f002 fc96 	bl	800bba0 <HAL_I2C_Mem_Read>
    return value;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	200009c4 	.word	0x200009c4

08009284 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af04      	add	r7, sp, #16
 800928a:	4603      	mov	r3, r0
 800928c:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	b29a      	uxth	r2, r3
 8009292:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009296:	9302      	str	r3, [sp, #8]
 8009298:	2302      	movs	r3, #2
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	f107 030e 	add.w	r3, r7, #14
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	2301      	movs	r3, #1
 80092a4:	213c      	movs	r1, #60	; 0x3c
 80092a6:	4804      	ldr	r0, [pc, #16]	; (80092b8 <HMC5883L_readRegister16+0x34>)
 80092a8:	f002 fc7a 	bl	800bba0 <HAL_I2C_Mem_Read>
    return value;
 80092ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	200009c4 	.word	0x200009c4

080092bc <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 80092c6:	2201      	movs	r2, #1
 80092c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092cc:	481a      	ldr	r0, [pc, #104]	; (8009338 <BMP280_initialize+0x7c>)
 80092ce:	f002 faa9 	bl	800b824 <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 80092d8:	6838      	ldr	r0, [r7, #0]
 80092da:	f000 f83c 	bl	8009356 <BMP280_getID>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b58      	cmp	r3, #88	; 0x58
 80092e2:	d001      	beq.n	80092e8 <BMP280_initialize+0x2c>
    {
        return 1;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e023      	b.n	8009330 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 80092e8:	6838      	ldr	r0, [r7, #0]
 80092ea:	f000 f827 	bl	800933c <BMP280_reset>
    HAL_Delay(500);
 80092ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092f2:	f001 fbeb 	bl	800aacc <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 80092f6:	2105      	movs	r1, #5
 80092f8:	6838      	ldr	r0, [r7, #0]
 80092fa:	f000 f8ef 	bl	80094dc <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 80092fe:	2102      	movs	r1, #2
 8009300:	6838      	ldr	r0, [r7, #0]
 8009302:	f000 f90c 	bl	800951e <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 8009306:	2103      	movs	r1, #3
 8009308:	6838      	ldr	r0, [r7, #0]
 800930a:	f000 f929 	bl	8009560 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 800930e:	2104      	movs	r1, #4
 8009310:	6838      	ldr	r0, [r7, #0]
 8009312:	f000 f966 	bl	80095e2 <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 8009316:	2100      	movs	r1, #0
 8009318:	6838      	ldr	r0, [r7, #0]
 800931a:	f000 f941 	bl	80095a0 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 800931e:	6838      	ldr	r0, [r7, #0]
 8009320:	f000 f826 	bl	8009370 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 8009324:	2232      	movs	r2, #50	; 0x32
 8009326:	2164      	movs	r1, #100	; 0x64
 8009328:	6838      	ldr	r0, [r7, #0]
 800932a:	f000 f89e 	bl	800946a <BMP280_setReferencePressure>

    return 0;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	40020c00 	.word	0x40020c00

0800933c <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8009344:	22b6      	movs	r2, #182	; 0xb6
 8009346:	21e0      	movs	r1, #224	; 0xe0
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fa27 	bl	800979c <BMP280_writeRegister>
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 800935e:	21d0      	movs	r1, #208	; 0xd0
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f9ff 	bl	8009764 <BMP280_readRegister>
 8009366:	4603      	mov	r3, r0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 8009378:	f107 0208 	add.w	r2, r7, #8
 800937c:	2318      	movs	r3, #24
 800937e:	2188      	movs	r1, #136	; 0x88
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fa2a 	bl	80097da <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 8009386:	7a7b      	ldrb	r3, [r7, #9]
 8009388:	021b      	lsls	r3, r3, #8
 800938a:	b21a      	sxth	r2, r3
 800938c:	7a3b      	ldrb	r3, [r7, #8]
 800938e:	b21b      	sxth	r3, r3
 8009390:	4313      	orrs	r3, r2
 8009392:	b21b      	sxth	r3, r3
 8009394:	b29a      	uxth	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	021b      	lsls	r3, r3, #8
 800939e:	b21a      	sxth	r2, r3
 80093a0:	7abb      	ldrb	r3, [r7, #10]
 80093a2:	b21b      	sxth	r3, r3
 80093a4:	4313      	orrs	r3, r2
 80093a6:	b21a      	sxth	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 80093ac:	7b7b      	ldrb	r3, [r7, #13]
 80093ae:	021b      	lsls	r3, r3, #8
 80093b0:	b21a      	sxth	r2, r3
 80093b2:	7b3b      	ldrb	r3, [r7, #12]
 80093b4:	b21b      	sxth	r3, r3
 80093b6:	4313      	orrs	r3, r2
 80093b8:	b21a      	sxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	b21a      	sxth	r2, r3
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	b21b      	sxth	r3, r3
 80093c8:	4313      	orrs	r3, r2
 80093ca:	b21b      	sxth	r3, r3
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 80093d2:	7c7b      	ldrb	r3, [r7, #17]
 80093d4:	021b      	lsls	r3, r3, #8
 80093d6:	b21a      	sxth	r2, r3
 80093d8:	7c3b      	ldrb	r3, [r7, #16]
 80093da:	b21b      	sxth	r3, r3
 80093dc:	4313      	orrs	r3, r2
 80093de:	b21a      	sxth	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 80093e4:	7cfb      	ldrb	r3, [r7, #19]
 80093e6:	021b      	lsls	r3, r3, #8
 80093e8:	b21a      	sxth	r2, r3
 80093ea:	7cbb      	ldrb	r3, [r7, #18]
 80093ec:	b21b      	sxth	r3, r3
 80093ee:	4313      	orrs	r3, r2
 80093f0:	b21a      	sxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 80093f6:	7d7b      	ldrb	r3, [r7, #21]
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	b21a      	sxth	r2, r3
 80093fc:	7d3b      	ldrb	r3, [r7, #20]
 80093fe:	b21b      	sxth	r3, r3
 8009400:	4313      	orrs	r3, r2
 8009402:	b21a      	sxth	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	b21a      	sxth	r2, r3
 800940e:	7dbb      	ldrb	r3, [r7, #22]
 8009410:	b21b      	sxth	r3, r3
 8009412:	4313      	orrs	r3, r2
 8009414:	b21a      	sxth	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 800941a:	7e7b      	ldrb	r3, [r7, #25]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	b21a      	sxth	r2, r3
 8009420:	7e3b      	ldrb	r3, [r7, #24]
 8009422:	b21b      	sxth	r3, r3
 8009424:	4313      	orrs	r3, r2
 8009426:	b21a      	sxth	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 800942c:	7efb      	ldrb	r3, [r7, #27]
 800942e:	021b      	lsls	r3, r3, #8
 8009430:	b21a      	sxth	r2, r3
 8009432:	7ebb      	ldrb	r3, [r7, #26]
 8009434:	b21b      	sxth	r3, r3
 8009436:	4313      	orrs	r3, r2
 8009438:	b21a      	sxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 800943e:	7f7b      	ldrb	r3, [r7, #29]
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	b21a      	sxth	r2, r3
 8009444:	7f3b      	ldrb	r3, [r7, #28]
 8009446:	b21b      	sxth	r3, r3
 8009448:	4313      	orrs	r3, r2
 800944a:	b21a      	sxth	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 8009450:	7ffb      	ldrb	r3, [r7, #31]
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	b21a      	sxth	r2, r3
 8009456:	7fbb      	ldrb	r3, [r7, #30]
 8009458:	b21b      	sxth	r3, r3
 800945a:	4313      	orrs	r3, r2
 800945c:	b21a      	sxth	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8009462:	bf00      	nop
 8009464:	3720      	adds	r7, #32
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	807b      	strh	r3, [r7, #2]
 8009476:	4613      	mov	r3, r2
 8009478:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 800947a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800947e:	f001 fb25 	bl	800aacc <HAL_Delay>
    float sum = 0;
 8009482:	f04f 0300 	mov.w	r3, #0
 8009486:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 8009488:	2300      	movs	r3, #0
 800948a:	60bb      	str	r3, [r7, #8]
 800948c:	e012      	b.n	80094b4 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f8ca 	bl	8009628 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	edd3 7a04 	vldr	s15, [r3, #16]
 800949a:	ed97 7a03 	vldr	s14, [r7, #12]
 800949e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094a2:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 80094a6:	787b      	ldrb	r3, [r7, #1]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fb0f 	bl	800aacc <HAL_Delay>
    for (int i = 0; i < samples; i++)
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	3301      	adds	r3, #1
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	887b      	ldrh	r3, [r7, #2]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	dbe8      	blt.n	800948e <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 80094bc:	887b      	ldrh	r3, [r7, #2]
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094c6:	edd7 6a03 	vldr	s13, [r7, #12]
 80094ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80094e8:	21f4      	movs	r1, #244	; 0xf4
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f93a 	bl	8009764 <BMP280_readRegister>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 80094f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094f8:	f023 031c 	bic.w	r3, r3, #28
 80094fc:	b25a      	sxtb	r2, r3
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	b25b      	sxtb	r3, r3
 8009504:	4313      	orrs	r3, r2
 8009506:	b25b      	sxtb	r3, r3
 8009508:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	461a      	mov	r2, r3
 800950e:	21f4      	movs	r1, #244	; 0xf4
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f943 	bl	800979c <BMP280_writeRegister>
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 800952a:	21f4      	movs	r1, #244	; 0xf4
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f919 	bl	8009764 <BMP280_readRegister>
 8009532:	4603      	mov	r3, r0
 8009534:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 8009536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800953a:	f003 031f 	and.w	r3, r3, #31
 800953e:	b25a      	sxtb	r2, r3
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	015b      	lsls	r3, r3, #5
 8009544:	b25b      	sxtb	r3, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	b25b      	sxtb	r3, r3
 800954a:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	461a      	mov	r2, r3
 8009550:	21f4      	movs	r1, #244	; 0xf4
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f922 	bl	800979c <BMP280_writeRegister>
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 800956c:	21f4      	movs	r1, #244	; 0xf4
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f8f8 	bl	8009764 <BMP280_readRegister>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 8009578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800957c:	f023 0303 	bic.w	r3, r3, #3
 8009580:	b25a      	sxtb	r2, r3
 8009582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009586:	4313      	orrs	r3, r2
 8009588:	b25b      	sxtb	r3, r3
 800958a:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	461a      	mov	r2, r3
 8009590:	21f4      	movs	r1, #244	; 0xf4
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f902 	bl	800979c <BMP280_writeRegister>
}
 8009598:	bf00      	nop
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 80095ac:	21f5      	movs	r1, #245	; 0xf5
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f8d8 	bl	8009764 <BMP280_readRegister>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 80095b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095bc:	f003 031f 	and.w	r3, r3, #31
 80095c0:	b25a      	sxtb	r2, r3
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	015b      	lsls	r3, r3, #5
 80095c6:	b25b      	sxtb	r3, r3
 80095c8:	4313      	orrs	r3, r2
 80095ca:	b25b      	sxtb	r3, r3
 80095cc:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	461a      	mov	r2, r3
 80095d2:	21f5      	movs	r1, #245	; 0xf5
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f8e1 	bl	800979c <BMP280_writeRegister>
}
 80095da:	bf00      	nop
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 80095ee:	21f5      	movs	r1, #245	; 0xf5
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f8b7 	bl	8009764 <BMP280_readRegister>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 80095fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095fe:	f023 031c 	bic.w	r3, r3, #28
 8009602:	b25a      	sxtb	r2, r3
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	b25b      	sxtb	r3, r3
 800960a:	4313      	orrs	r3, r2
 800960c:	b25b      	sxtb	r3, r3
 800960e:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	461a      	mov	r2, r3
 8009614:	21f5      	movs	r1, #245	; 0xf5
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f8c0 	bl	800979c <BMP280_writeRegister>
}
 800961c:	bf00      	nop
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	0000      	movs	r0, r0
	...

08009628 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 8009630:	f107 0208 	add.w	r2, r7, #8
 8009634:	2306      	movs	r3, #6
 8009636:	21f7      	movs	r1, #247	; 0xf7
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f8ce 	bl	80097da <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800963e:	7a3b      	ldrb	r3, [r7, #8]
 8009640:	031a      	lsls	r2, r3, #12
 8009642:	7a7b      	ldrb	r3, [r7, #9]
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	4313      	orrs	r3, r2
 8009648:	7aba      	ldrb	r2, [r7, #10]
 800964a:	0912      	lsrs	r2, r2, #4
 800964c:	b2d2      	uxtb	r2, r2
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	031a      	lsls	r2, r3, #12
 8009656:	7b3b      	ldrb	r3, [r7, #12]
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	4313      	orrs	r3, r2
 800965c:	7b7a      	ldrb	r2, [r7, #13]
 800965e:	0912      	lsrs	r2, r2, #4
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	4313      	orrs	r3, r2
 8009664:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 8009666:	6939      	ldr	r1, [r7, #16]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f917 	bl	800989c <BMP280_compensate_temperature>
 800966e:	ee07 0a90 	vmov	s15, r0
 8009672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009676:	ee17 0a90 	vmov	r0, s15
 800967a:	f7f6 ff8d 	bl	8000598 <__aeabi_f2d>
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	4b35      	ldr	r3, [pc, #212]	; (8009758 <BMP280_measure+0x130>)
 8009684:	f7f7 f90a 	bl	800089c <__aeabi_ddiv>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4610      	mov	r0, r2
 800968e:	4619      	mov	r1, r3
 8009690:	f7f7 fad2 	bl	8000c38 <__aeabi_d2f>
 8009694:	4602      	mov	r2, r0
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 800969a:	6979      	ldr	r1, [r7, #20]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f953 	bl	8009948 <BMP280_compensate_pressure>
 80096a2:	ee07 0a90 	vmov	s15, r0
 80096a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096aa:	ee17 0a90 	vmov	r0, s15
 80096ae:	f7f6 ff73 	bl	8000598 <__aeabi_f2d>
 80096b2:	f04f 0200 	mov.w	r2, #0
 80096b6:	4b29      	ldr	r3, [pc, #164]	; (800975c <BMP280_measure+0x134>)
 80096b8:	f7f7 f8f0 	bl	800089c <__aeabi_ddiv>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4610      	mov	r0, r2
 80096c2:	4619      	mov	r1, r3
 80096c4:	f7f7 fab8 	bl	8000c38 <__aeabi_d2f>
 80096c8:	4602      	mov	r2, r0
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80096d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096dc:	dc00      	bgt.n	80096e0 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 80096de:	e02c      	b.n	800973a <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80096ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80096f0:	ee16 0a90 	vmov	r0, s13
 80096f4:	f7f6 ff50 	bl	8000598 <__aeabi_f2d>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8009748 <BMP280_measure+0x120>
 8009700:	ec43 2b10 	vmov	d0, r2, r3
 8009704:	f00f ff24 	bl	8019550 <pow>
 8009708:	ec53 2b10 	vmov	r2, r3, d0
 800970c:	f04f 0000 	mov.w	r0, #0
 8009710:	4913      	ldr	r1, [pc, #76]	; (8009760 <BMP280_measure+0x138>)
 8009712:	f7f6 fde1 	bl	80002d8 <__aeabi_dsub>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4610      	mov	r0, r2
 800971c:	4619      	mov	r1, r3
 800971e:	a30c      	add	r3, pc, #48	; (adr r3, 8009750 <BMP280_measure+0x128>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 ff90 	bl	8000648 <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4610      	mov	r0, r2
 800972e:	4619      	mov	r1, r3
 8009730:	f7f7 fa82 	bl	8000c38 <__aeabi_d2f>
 8009734:	4602      	mov	r2, r0
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	615a      	str	r2, [r3, #20]
}
 800973a:	bf00      	nop
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	f3af 8000 	nop.w
 8009748:	1a36e2eb 	.word	0x1a36e2eb
 800974c:	3fc85bc0 	.word	0x3fc85bc0
 8009750:	00000000 	.word	0x00000000
 8009754:	4150e92d 	.word	0x4150e92d
 8009758:	40590000 	.word	0x40590000
 800975c:	40700000 	.word	0x40700000
 8009760:	3ff00000 	.word	0x3ff00000

08009764 <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f883 	bl	800987c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f855 	bl	800982a <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 8009780:	2100      	movs	r1, #0
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f851 	bl	800982a <BMP280_spiReadWrite>
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f865 	bl	800985c <BMP280_spiCSNhigh>
    return value;
 8009792:	7bfb      	ldrb	r3, [r7, #15]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
 80097a8:	4613      	mov	r3, r2
 80097aa:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f865 	bl	800987c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f834 	bl	800982a <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 80097c2:	78bb      	ldrb	r3, [r7, #2]
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f82f 	bl	800982a <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f845 	bl	800985c <BMP280_spiCSNhigh>
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 80097da:	b590      	push	{r4, r7, lr}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	461a      	mov	r2, r3
 80097e6:	460b      	mov	r3, r1
 80097e8:	72fb      	strb	r3, [r7, #11]
 80097ea:	4613      	mov	r3, r2
 80097ec:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 f844 	bl	800987c <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	4619      	mov	r1, r3
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 f816 	bl	800982a <BMP280_spiReadWrite>
    while (length--)
 80097fe:	e008      	b.n	8009812 <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8009800:	687c      	ldr	r4, [r7, #4]
 8009802:	1c63      	adds	r3, r4, #1
 8009804:	607b      	str	r3, [r7, #4]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 f80e 	bl	800982a <BMP280_spiReadWrite>
 800980e:	4603      	mov	r3, r0
 8009810:	7023      	strb	r3, [r4, #0]
    while (length--)
 8009812:	7abb      	ldrb	r3, [r7, #10]
 8009814:	1e5a      	subs	r2, r3, #1
 8009816:	72ba      	strb	r2, [r7, #10]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1f1      	bne.n	8009800 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f81d 	bl	800985c <BMP280_spiCSNhigh>
}
 8009822:	bf00      	nop
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	bd90      	pop	{r4, r7, pc}

0800982a <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b086      	sub	sp, #24
 800982e:	af02      	add	r7, sp, #8
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 8009836:	23ff      	movs	r3, #255	; 0xff
 8009838:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f107 020f 	add.w	r2, r7, #15
 8009842:	1cf9      	adds	r1, r7, #3
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	2301      	movs	r3, #1
 800984c:	f004 f993 	bl	800db76 <HAL_SPI_TransmitReceive>
    return rx_message;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8009864:	2201      	movs	r2, #1
 8009866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800986a:	4803      	ldr	r0, [pc, #12]	; (8009878 <BMP280_spiCSNhigh+0x1c>)
 800986c:	f001 ffda 	bl	800b824 <HAL_GPIO_WritePin>
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	40020c00 	.word	0x40020c00

0800987c <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 8009884:	2200      	movs	r2, #0
 8009886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800988a:	4803      	ldr	r0, [pc, #12]	; (8009898 <BMP280_spiCSNlow+0x1c>)
 800988c:	f001 ffca 	bl	800b824 <HAL_GPIO_WritePin>
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	40020c00 	.word	0x40020c00

0800989c <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da00      	bge.n	80098ae <BMP280_compensate_temperature+0x12>
 80098ac:	3307      	adds	r3, #7
 80098ae:	10db      	asrs	r3, r3, #3
 80098b0:	461a      	mov	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	8b1b      	ldrh	r3, [r3, #24]
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80098c0:	fb02 f303 	mul.w	r3, r2, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	da01      	bge.n	80098cc <BMP280_compensate_temperature+0x30>
 80098c8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80098cc:	12db      	asrs	r3, r3, #11
 80098ce:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	da00      	bge.n	80098d8 <BMP280_compensate_temperature+0x3c>
 80098d6:	330f      	adds	r3, #15
 80098d8:	111b      	asrs	r3, r3, #4
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	8b1b      	ldrh	r3, [r3, #24]
 80098e0:	1ad2      	subs	r2, r2, r3
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da00      	bge.n	80098ea <BMP280_compensate_temperature+0x4e>
 80098e8:	330f      	adds	r3, #15
 80098ea:	111b      	asrs	r3, r3, #4
 80098ec:	4619      	mov	r1, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	8b1b      	ldrh	r3, [r3, #24]
 80098f2:	1acb      	subs	r3, r1, r3
 80098f4:	fb02 f303 	mul.w	r3, r2, r3
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	da01      	bge.n	8009900 <BMP280_compensate_temperature+0x64>
 80098fc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8009900:	131b      	asrs	r3, r3, #12
 8009902:	461a      	mov	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800990a:	fb02 f303 	mul.w	r3, r2, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	da03      	bge.n	800991a <BMP280_compensate_temperature+0x7e>
 8009912:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009916:	441a      	add	r2, r3
 8009918:	4613      	mov	r3, r2
 800991a:	139b      	asrs	r3, r3, #14
 800991c:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	441a      	add	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	3380      	adds	r3, #128	; 0x80
 8009934:	2b00      	cmp	r3, #0
 8009936:	da00      	bge.n	800993a <BMP280_compensate_temperature+0x9e>
 8009938:	33ff      	adds	r3, #255	; 0xff
 800993a:	121b      	asrs	r3, r3, #8
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 8009948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800994c:	b0d6      	sub	sp, #344	; 0x158
 800994e:	af00      	add	r7, sp, #0
 8009950:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8009954:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 8009958:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	17da      	asrs	r2, r3, #31
 8009960:	461c      	mov	r4, r3
 8009962:	4615      	mov	r5, r2
 8009964:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8009968:	f145 3bff 	adc.w	fp, r5, #4294967295
 800996c:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 8009970:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009974:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009978:	fb03 f102 	mul.w	r1, r3, r2
 800997c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009980:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009984:	fb02 f303 	mul.w	r3, r2, r3
 8009988:	18ca      	adds	r2, r1, r3
 800998a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800998e:	fba3 8903 	umull	r8, r9, r3, r3
 8009992:	eb02 0309 	add.w	r3, r2, r9
 8009996:	4699      	mov	r9, r3
 8009998:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800999c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80099a0:	b21b      	sxth	r3, r3
 80099a2:	17da      	asrs	r2, r3, #31
 80099a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099a8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80099ac:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80099b0:	4603      	mov	r3, r0
 80099b2:	fb03 f209 	mul.w	r2, r3, r9
 80099b6:	460b      	mov	r3, r1
 80099b8:	fb08 f303 	mul.w	r3, r8, r3
 80099bc:	4413      	add	r3, r2
 80099be:	4602      	mov	r2, r0
 80099c0:	fba8 1202 	umull	r1, r2, r8, r2
 80099c4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80099c8:	460a      	mov	r2, r1
 80099ca:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80099ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80099d2:	4413      	add	r3, r2
 80099d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099d8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80099dc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80099e0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 80099e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80099e8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80099ec:	b21b      	sxth	r3, r3
 80099ee:	17da      	asrs	r2, r3, #31
 80099f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099f4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80099f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099fc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8009a00:	462a      	mov	r2, r5
 8009a02:	fb02 f203 	mul.w	r2, r2, r3
 8009a06:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	fb01 f303 	mul.w	r3, r1, r3
 8009a10:	441a      	add	r2, r3
 8009a12:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a16:	4621      	mov	r1, r4
 8009a18:	fba3 1301 	umull	r1, r3, r3, r1
 8009a1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009a20:	460b      	mov	r3, r1
 8009a22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009a26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a2a:	18d3      	adds	r3, r2, r3
 8009a2c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009a30:	f04f 0000 	mov.w	r0, #0
 8009a34:	f04f 0100 	mov.w	r1, #0
 8009a38:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	0459      	lsls	r1, r3, #17
 8009a40:	4623      	mov	r3, r4
 8009a42:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8009a46:	4623      	mov	r3, r4
 8009a48:	0458      	lsls	r0, r3, #17
 8009a4a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009a4e:	1814      	adds	r4, r2, r0
 8009a50:	67bc      	str	r4, [r7, #120]	; 0x78
 8009a52:	414b      	adcs	r3, r1
 8009a54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a56:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8009a5a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 8009a5e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009a62:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8009a66:	b21b      	sxth	r3, r3
 8009a68:	17da      	asrs	r2, r3, #31
 8009a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a72:	f04f 0000 	mov.w	r0, #0
 8009a76:	f04f 0100 	mov.w	r1, #0
 8009a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a7e:	00d9      	lsls	r1, r3, #3
 8009a80:	2000      	movs	r0, #0
 8009a82:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009a86:	1814      	adds	r4, r2, r0
 8009a88:	673c      	str	r4, [r7, #112]	; 0x70
 8009a8a:	414b      	adcs	r3, r1
 8009a8c:	677b      	str	r3, [r7, #116]	; 0x74
 8009a8e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8009a92:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 8009a96:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009a9a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009a9e:	fb03 f102 	mul.w	r1, r3, r2
 8009aa2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009aa6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009aaa:	fb02 f303 	mul.w	r3, r2, r3
 8009aae:	18ca      	adds	r2, r1, r3
 8009ab0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009ab4:	fba3 1303 	umull	r1, r3, r3, r3
 8009ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009abc:	460b      	mov	r3, r1
 8009abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac6:	18d3      	adds	r3, r2, r3
 8009ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009acc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009ad0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8009ad4:	b21b      	sxth	r3, r3
 8009ad6:	17da      	asrs	r2, r3, #31
 8009ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ae0:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009aea:	4642      	mov	r2, r8
 8009aec:	fb02 f203 	mul.w	r2, r2, r3
 8009af0:	464b      	mov	r3, r9
 8009af2:	4621      	mov	r1, r4
 8009af4:	fb01 f303 	mul.w	r3, r1, r3
 8009af8:	4413      	add	r3, r2
 8009afa:	4622      	mov	r2, r4
 8009afc:	4641      	mov	r1, r8
 8009afe:	fba2 1201 	umull	r1, r2, r2, r1
 8009b02:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8009b06:	460a      	mov	r2, r1
 8009b08:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8009b0c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009b10:	4413      	add	r3, r2
 8009b12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009b16:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da07      	bge.n	8009b2e <BMP280_compensate_pressure+0x1e6>
 8009b1e:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8009b22:	66b9      	str	r1, [r7, #104]	; 0x68
 8009b24:	f143 0300 	adc.w	r3, r3, #0
 8009b28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009b2e:	f04f 0000 	mov.w	r0, #0
 8009b32:	f04f 0100 	mov.w	r1, #0
 8009b36:	0a10      	lsrs	r0, r2, #8
 8009b38:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009b3c:	1219      	asrs	r1, r3, #8
 8009b3e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009b42:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009b46:	b21b      	sxth	r3, r3
 8009b48:	17da      	asrs	r2, r3, #31
 8009b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b4e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009b52:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b56:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8009b5a:	464a      	mov	r2, r9
 8009b5c:	fb02 f203 	mul.w	r2, r2, r3
 8009b60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009b64:	4644      	mov	r4, r8
 8009b66:	fb04 f303 	mul.w	r3, r4, r3
 8009b6a:	441a      	add	r2, r3
 8009b6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009b70:	4644      	mov	r4, r8
 8009b72:	fba3 4304 	umull	r4, r3, r3, r4
 8009b76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009b7a:	4623      	mov	r3, r4
 8009b7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b84:	18d3      	adds	r3, r2, r3
 8009b86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009b8a:	f04f 0200 	mov.w	r2, #0
 8009b8e:	f04f 0300 	mov.w	r3, #0
 8009b92:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8009b96:	464c      	mov	r4, r9
 8009b98:	0323      	lsls	r3, r4, #12
 8009b9a:	4644      	mov	r4, r8
 8009b9c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8009ba0:	4644      	mov	r4, r8
 8009ba2:	0322      	lsls	r2, r4, #12
 8009ba4:	1884      	adds	r4, r0, r2
 8009ba6:	663c      	str	r4, [r7, #96]	; 0x60
 8009ba8:	eb41 0303 	adc.w	r3, r1, r3
 8009bac:	667b      	str	r3, [r7, #100]	; 0x64
 8009bae:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8009bb2:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8009bb6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009bba:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8009bbe:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8009bc2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8009bc6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009bca:	8bdb      	ldrh	r3, [r3, #30]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009bd8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8009bdc:	462b      	mov	r3, r5
 8009bde:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009be2:	4642      	mov	r2, r8
 8009be4:	fb02 f203 	mul.w	r2, r2, r3
 8009be8:	464b      	mov	r3, r9
 8009bea:	4621      	mov	r1, r4
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	4641      	mov	r1, r8
 8009bf6:	fba2 1201 	umull	r1, r2, r2, r1
 8009bfa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8009bfe:	460a      	mov	r2, r1
 8009c00:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009c04:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009c08:	4413      	add	r3, r2
 8009c0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009c0e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	da06      	bge.n	8009c24 <BMP280_compensate_pressure+0x2dc>
 8009c16:	1e51      	subs	r1, r2, #1
 8009c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c1a:	f143 0301 	adc.w	r3, r3, #1
 8009c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c24:	f04f 0000 	mov.w	r0, #0
 8009c28:	f04f 0100 	mov.w	r1, #0
 8009c2c:	1058      	asrs	r0, r3, #1
 8009c2e:	17d9      	asrs	r1, r3, #31
 8009c30:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8009c34:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	d101      	bne.n	8009c40 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e182      	b.n	8009f46 <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8009c40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c44:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8009c48:	17da      	asrs	r2, r3, #31
 8009c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8009c4c:	657a      	str	r2, [r7, #84]	; 0x54
 8009c4e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8009c52:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8009c56:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009c5a:	f04f 0000 	mov.w	r0, #0
 8009c5e:	f04f 0100 	mov.w	r1, #0
 8009c62:	07d9      	lsls	r1, r3, #31
 8009c64:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8009c68:	07d0      	lsls	r0, r2, #31
 8009c6a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009c6e:	1a84      	subs	r4, r0, r2
 8009c70:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009c74:	eb61 0303 	sbc.w	r3, r1, r3
 8009c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c7c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8009c80:	4622      	mov	r2, r4
 8009c82:	462b      	mov	r3, r5
 8009c84:	1891      	adds	r1, r2, r2
 8009c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8009c88:	415b      	adcs	r3, r3
 8009c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009c90:	4621      	mov	r1, r4
 8009c92:	1851      	adds	r1, r2, r1
 8009c94:	6439      	str	r1, [r7, #64]	; 0x40
 8009c96:	4629      	mov	r1, r5
 8009c98:	414b      	adcs	r3, r1
 8009c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009ca8:	4649      	mov	r1, r9
 8009caa:	018b      	lsls	r3, r1, #6
 8009cac:	4641      	mov	r1, r8
 8009cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	018a      	lsls	r2, r1, #6
 8009cb6:	4641      	mov	r1, r8
 8009cb8:	1889      	adds	r1, r1, r2
 8009cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8009cbc:	4649      	mov	r1, r9
 8009cbe:	eb43 0101 	adc.w	r1, r3, r1
 8009cc2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009cc4:	f04f 0200 	mov.w	r2, #0
 8009cc8:	f04f 0300 	mov.w	r3, #0
 8009ccc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	008b      	lsls	r3, r1, #2
 8009cd4:	4641      	mov	r1, r8
 8009cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cda:	4641      	mov	r1, r8
 8009cdc:	008a      	lsls	r2, r1, #2
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	189b      	adds	r3, r3, r2
 8009ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8009cea:	460b      	mov	r3, r1
 8009cec:	462a      	mov	r2, r5
 8009cee:	eb42 0303 	adc.w	r3, r2, r3
 8009cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf4:	f04f 0200 	mov.w	r2, #0
 8009cf8:	f04f 0300 	mov.w	r3, #0
 8009cfc:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8009d00:	4649      	mov	r1, r9
 8009d02:	008b      	lsls	r3, r1, #2
 8009d04:	4641      	mov	r1, r8
 8009d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d0a:	4641      	mov	r1, r8
 8009d0c:	008a      	lsls	r2, r1, #2
 8009d0e:	4610      	mov	r0, r2
 8009d10:	4619      	mov	r1, r3
 8009d12:	4603      	mov	r3, r0
 8009d14:	4622      	mov	r2, r4
 8009d16:	189b      	adds	r3, r3, r2
 8009d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d1c:	462b      	mov	r3, r5
 8009d1e:	460a      	mov	r2, r1
 8009d20:	eb42 0303 	adc.w	r3, r2, r3
 8009d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d28:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009d2c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009d30:	f7f6 ffd2 	bl	8000cd8 <__aeabi_ldivmod>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8009d3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009d40:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8009d44:	b21b      	sxth	r3, r3
 8009d46:	17da      	asrs	r2, r3, #31
 8009d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d4c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d50:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	da08      	bge.n	8009d6a <BMP280_compensate_pressure+0x422>
 8009d58:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8009d5c:	1851      	adds	r1, r2, r1
 8009d5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d60:	f143 0300 	adc.w	r3, r3, #0
 8009d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d6a:	f04f 0000 	mov.w	r0, #0
 8009d6e:	f04f 0100 	mov.w	r1, #0
 8009d72:	0b50      	lsrs	r0, r2, #13
 8009d74:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009d78:	1359      	asrs	r1, r3, #13
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8009d82:	4629      	mov	r1, r5
 8009d84:	fb02 f001 	mul.w	r0, r2, r1
 8009d88:	4621      	mov	r1, r4
 8009d8a:	fb01 f103 	mul.w	r1, r1, r3
 8009d8e:	4401      	add	r1, r0
 8009d90:	4620      	mov	r0, r4
 8009d92:	fba0 2302 	umull	r2, r3, r0, r2
 8009d96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009da4:	18cb      	adds	r3, r1, r3
 8009da6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009daa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	da08      	bge.n	8009dc4 <BMP280_compensate_pressure+0x47c>
 8009db2:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8009db6:	1851      	adds	r1, r2, r1
 8009db8:	6239      	str	r1, [r7, #32]
 8009dba:	f143 0300 	adc.w	r3, r3, #0
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8009dc0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dc4:	f04f 0000 	mov.w	r0, #0
 8009dc8:	f04f 0100 	mov.w	r1, #0
 8009dcc:	0b50      	lsrs	r0, r2, #13
 8009dce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009dd2:	1359      	asrs	r1, r3, #13
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8009ddc:	4629      	mov	r1, r5
 8009dde:	fb02 f001 	mul.w	r0, r2, r1
 8009de2:	4621      	mov	r1, r4
 8009de4:	fb01 f103 	mul.w	r1, r1, r3
 8009de8:	4401      	add	r1, r0
 8009dea:	4620      	mov	r0, r4
 8009dec:	fba0 2302 	umull	r2, r3, r0, r2
 8009df0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009df4:	4613      	mov	r3, r2
 8009df6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfe:	18cb      	adds	r3, r1, r3
 8009e00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e04:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da08      	bge.n	8009e1e <BMP280_compensate_pressure+0x4d6>
 8009e0c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8009e10:	1851      	adds	r1, r2, r1
 8009e12:	61b9      	str	r1, [r7, #24]
 8009e14:	f143 0300 	adc.w	r3, r3, #0
 8009e18:	61fb      	str	r3, [r7, #28]
 8009e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e1e:	f04f 0000 	mov.w	r0, #0
 8009e22:	f04f 0100 	mov.w	r1, #0
 8009e26:	0e50      	lsrs	r0, r2, #25
 8009e28:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8009e2c:	1659      	asrs	r1, r3, #25
 8009e2e:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8009e32:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009e36:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8009e3a:	b21b      	sxth	r3, r3
 8009e3c:	17da      	asrs	r2, r3, #31
 8009e3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e42:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009e46:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009e4a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8009e4e:	462a      	mov	r2, r5
 8009e50:	fb02 f203 	mul.w	r2, r2, r3
 8009e54:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e58:	4621      	mov	r1, r4
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	441a      	add	r2, r3
 8009e60:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009e64:	4621      	mov	r1, r4
 8009e66:	fba3 1301 	umull	r1, r3, r3, r1
 8009e6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e6e:	460b      	mov	r3, r1
 8009e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e78:	18d3      	adds	r3, r2, r3
 8009e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e7e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8009e82:	2900      	cmp	r1, #0
 8009e84:	da07      	bge.n	8009e96 <BMP280_compensate_pressure+0x54e>
 8009e86:	4b33      	ldr	r3, [pc, #204]	; (8009f54 <BMP280_compensate_pressure+0x60c>)
 8009e88:	18c3      	adds	r3, r0, r3
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	f141 0300 	adc.w	r3, r1, #0
 8009e90:	617b      	str	r3, [r7, #20]
 8009e92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	0cc2      	lsrs	r2, r0, #19
 8009ea0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8009ea4:	14cb      	asrs	r3, r1, #19
 8009ea6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8009eaa:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009eae:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009eb2:	1884      	adds	r4, r0, r2
 8009eb4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009eb8:	eb41 0303 	adc.w	r3, r1, r3
 8009ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ec0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009ec4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009ec8:	4621      	mov	r1, r4
 8009eca:	1889      	adds	r1, r1, r2
 8009ecc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	eb43 0101 	adc.w	r1, r3, r1
 8009ed6:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8009eda:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da07      	bge.n	8009ef2 <BMP280_compensate_pressure+0x5aa>
 8009ee2:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	f143 0300 	adc.w	r3, r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f04f 0100 	mov.w	r1, #0
 8009efa:	0a10      	lsrs	r0, r2, #8
 8009efc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009f00:	1219      	asrs	r1, r3, #8
 8009f02:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009f06:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8009f0a:	b21b      	sxth	r3, r3
 8009f0c:	17da      	asrs	r2, r3, #31
 8009f0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f12:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009f16:	f04f 0200 	mov.w	r2, #0
 8009f1a:	f04f 0300 	mov.w	r3, #0
 8009f1e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8009f22:	464c      	mov	r4, r9
 8009f24:	0123      	lsls	r3, r4, #4
 8009f26:	4644      	mov	r4, r8
 8009f28:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8009f2c:	4644      	mov	r4, r8
 8009f2e:	0122      	lsls	r2, r4, #4
 8009f30:	1884      	adds	r4, r0, r2
 8009f32:	603c      	str	r4, [r7, #0]
 8009f34:	eb41 0303 	adc.w	r3, r1, r3
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009f3e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 8009f42:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f52:	bf00      	nop
 8009f54:	0007ffff 	.word	0x0007ffff

08009f58 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8009f58:	b5b0      	push	{r4, r5, r7, lr}
 8009f5a:	b09c      	sub	sp, #112	; 0x70
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8009f62:	2201      	movs	r2, #1
 8009f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f68:	482c      	ldr	r0, [pc, #176]	; (800a01c <MPU_Init+0xc4>)
 8009f6a:	f001 fc5b 	bl	800b824 <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_2000DPS;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2203      	movs	r2, #3
 8009f72:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_16G;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2203      	movs	r2, #3
 8009f7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f84:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	4a24      	ldr	r2, [pc, #144]	; (800a01c <MPU_Init+0xc4>)
 8009f8c:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	4a23      	ldr	r2, [pc, #140]	; (800a020 <MPU_Init+0xc8>)
 8009f92:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2200      	movs	r2, #0
 8009f98:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	f04f 0200 	mov.w	r2, #0
 8009fa0:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8009fa2:	6839      	ldr	r1, [r7, #0]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f843 	bl	800a030 <MPU_begin>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d023      	beq.n	8009ff8 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8009fb0:	4b1c      	ldr	r3, [pc, #112]	; (800a024 <MPU_Init+0xcc>)
 8009fb2:	f107 040c 	add.w	r4, r7, #12
 8009fb6:	461d      	mov	r5, r3
 8009fb8:	6828      	ldr	r0, [r5, #0]
 8009fba:	6869      	ldr	r1, [r5, #4]
 8009fbc:	68aa      	ldr	r2, [r5, #8]
 8009fbe:	68eb      	ldr	r3, [r5, #12]
 8009fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fc2:	6928      	ldr	r0, [r5, #16]
 8009fc4:	6969      	ldr	r1, [r5, #20]
 8009fc6:	69aa      	ldr	r2, [r5, #24]
 8009fc8:	c407      	stmia	r4!, {r0, r1, r2}
 8009fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fce:	2248      	movs	r2, #72	; 0x48
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f00b fa23 	bl	801541e <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8009fd8:	f107 030c 	add.w	r3, r7, #12
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7f6 f96f 	bl	80002c0 <strlen>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	f107 010c 	add.w	r1, r7, #12
 8009fea:	f04f 33ff 	mov.w	r3, #4294967295
 8009fee:	480e      	ldr	r0, [pc, #56]	; (800a028 <MPU_Init+0xd0>)
 8009ff0:	f006 f808 	bl	8010004 <HAL_UART_Transmit>
		return 1;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e00c      	b.n	800a012 <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8009ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffc:	2210      	movs	r2, #16
 8009ffe:	490b      	ldr	r1, [pc, #44]	; (800a02c <MPU_Init+0xd4>)
 800a000:	4809      	ldr	r0, [pc, #36]	; (800a028 <MPU_Init+0xd0>)
 800a002:	f005 ffff 	bl	8010004 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 20);
 800a006:	2214      	movs	r2, #20
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f8a1 	bl	800a152 <MPU_calibrateGyro>

	return 0;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3770      	adds	r7, #112	; 0x70
 800a016:	46bd      	mov	sp, r7
 800a018:	bdb0      	pop	{r4, r5, r7, pc}
 800a01a:	bf00      	nop
 800a01c:	40020c00 	.word	0x40020c00
 800a020:	3f7ae148 	.word	0x3f7ae148
 800a024:	0801bf14 	.word	0x0801bf14
 800a028:	20000c88 	.word	0x20000c88
 800a02c:	0801bf00 	.word	0x0801bf00

0800a030 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af02      	add	r7, sp, #8
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 800a03a:	f107 030f 	add.w	r3, r7, #15
 800a03e:	2201      	movs	r2, #1
 800a040:	9200      	str	r2, [sp, #0]
 800a042:	2275      	movs	r2, #117	; 0x75
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f90d 	bl	800a266 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	2b70      	cmp	r3, #112	; 0x70
 800a050:	d17a      	bne.n	800a148 <MPU_begin+0x118>
    {
    	// Reset the sensor
    	addr = PWR_MGMT_1;
 800a052:	236b      	movs	r3, #107	; 0x6b
 800a054:	73bb      	strb	r3, [r7, #14]
        val = 0x80;
 800a056:	2380      	movs	r3, #128	; 0x80
 800a058:	737b      	strb	r3, [r7, #13]
    	MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a05a:	f107 030d 	add.w	r3, r7, #13
 800a05e:	f107 020e 	add.w	r2, r7, #14
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f8dd 	bl	800a224 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a06a:	2032      	movs	r0, #50	; 0x32
 800a06c:	f000 fd2e 	bl	800aacc <HAL_Delay>

        // Startup & use PLL
        addr = PWR_MGMT_1;
 800a070:	236b      	movs	r3, #107	; 0x6b
 800a072:	73bb      	strb	r3, [r7, #14]
        val = 0x01;
 800a074:	2301      	movs	r3, #1
 800a076:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a078:	f107 030d 	add.w	r3, r7, #13
 800a07c:	f107 020e 	add.w	r2, r7, #14
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f8ce 	bl	800a224 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a088:	2032      	movs	r0, #50	; 0x32
 800a08a:	f000 fd1f 	bl	800aacc <HAL_Delay>

        // Enable everything
        addr = PWR_MGMT_2;
 800a08e:	236c      	movs	r3, #108	; 0x6c
 800a090:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 800a092:	2300      	movs	r3, #0
 800a094:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a096:	f107 030d 	add.w	r3, r7, #13
 800a09a:	f107 020e 	add.w	r2, r7, #14
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f8bf 	bl	800a224 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a0a6:	2032      	movs	r0, #50	; 0x32
 800a0a8:	f000 fd10 	bl	800aacc <HAL_Delay>

        // Sample rate is 1000 Hz
		addr = SMPLRT_DIV;
 800a0ac:	2319      	movs	r3, #25
 800a0ae:	73bb      	strb	r3, [r7, #14]
		val = 0x00;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	737b      	strb	r3, [r7, #13]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a0b4:	f107 030d 	add.w	r3, r7, #13
 800a0b8:	f107 020e 	add.w	r2, r7, #14
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f8b0 	bl	800a224 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a0c4:	2032      	movs	r0, #50	; 0x32
 800a0c6:	f000 fd01 	bl	800aacc <HAL_Delay>


    	// Gyro
    	// Set 20 Hz LPF for gyro
		uint8_t addr = CONFIG;
 800a0ca:	231a      	movs	r3, #26
 800a0cc:	733b      	strb	r3, [r7, #12]
		uint8_t val = 0x04;
 800a0ce:	2304      	movs	r3, #4
 800a0d0:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a0d2:	f107 030b 	add.w	r3, r7, #11
 800a0d6:	f107 020c 	add.w	r2, r7, #12
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f8a1 	bl	800a224 <MPU_REG_WRITE>
		HAL_Delay(50);
 800a0e2:	2032      	movs	r0, #50	; 0x32
 800a0e4:	f000 fcf2 	bl	800aacc <HAL_Delay>

		// Set the full scale range for gyro
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f95c 	bl	800a3b0 <MPU_writeGyroFullScaleRange>


		// Accel
		// Set the full scale range for accel
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a0fe:	461a      	mov	r2, r3
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f8ea 	bl	800a2dc <MPU_writeAccFullScaleRange>

        // Set 44.8 Hz LPF for accel
		addr = ACCEL_CONFIG_2;
 800a108:	231d      	movs	r3, #29
 800a10a:	733b      	strb	r3, [r7, #12]
		val = 0x03;
 800a10c:	2303      	movs	r3, #3
 800a10e:	72fb      	strb	r3, [r7, #11]
		MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a110:	f107 030b 	add.w	r3, r7, #11
 800a114:	f107 020c 	add.w	r2, r7, #12
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f882 	bl	800a224 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a120:	2032      	movs	r0, #50	; 0x32
 800a122:	f000 fcd3 	bl	800aacc <HAL_Delay>


        // Disable I2C (SPI only)
        addr = USER_CTRL;
 800a126:	236a      	movs	r3, #106	; 0x6a
 800a128:	733b      	strb	r3, [r7, #12]
        val = 0x10;
 800a12a:	2310      	movs	r3, #16
 800a12c:	72fb      	strb	r3, [r7, #11]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a12e:	f107 030b 	add.w	r3, r7, #11
 800a132:	f107 020c 	add.w	r2, r7, #12
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f873 	bl	800a224 <MPU_REG_WRITE>
    	HAL_Delay(50);
 800a13e:	2032      	movs	r0, #50	; 0x32
 800a140:	f000 fcc4 	bl	800aacc <HAL_Delay>

        return 1;
 800a144:	2301      	movs	r3, #1
 800a146:	e000      	b.n	800a14a <MPU_begin+0x11a>
    }
    else
        return 0;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b088      	sub	sp, #32
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	4613      	mov	r3, r2
 800a15e:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 800a16c:	88fb      	ldrh	r3, [r7, #6]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 800a172:	2301      	movs	r3, #1
 800a174:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800a176:	2300      	movs	r3, #0
 800a178:	827b      	strh	r3, [r7, #18]
 800a17a:	e01e      	b.n	800a1ba <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 f984 	bl	800a48c <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a18a:	461a      	mov	r2, r3
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	4413      	add	r3, r2
 800a190:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a198:	461a      	mov	r2, r3
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	4413      	add	r3, r2
 800a19e:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 800a1ae:	2003      	movs	r0, #3
 800a1b0:	f000 fc8c 	bl	800aacc <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800a1b4:	8a7b      	ldrh	r3, [r7, #18]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	827b      	strh	r3, [r7, #18]
 800a1ba:	8a7a      	ldrh	r2, [r7, #18]
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d3dc      	bcc.n	800a17c <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1cc:	88fb      	ldrh	r3, [r7, #6]
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	ee07 3a90 	vmov	s15, r3
 800a1e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1ea:	88fb      	ldrh	r3, [r7, #6]
 800a1ec:	ee07 3a90 	vmov	s15, r3
 800a1f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a1f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a208:	88fb      	ldrh	r3, [r7, #6]
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 800a21c:	bf00      	nop
 800a21e:	3720      	adds	r7, #32
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 800a232:	2100      	movs	r1, #0
 800a234:	68b8      	ldr	r0, [r7, #8]
 800a236:	f000 f83e 	bl	800a2b6 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 800a23a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a23e:	2201      	movs	r2, #1
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f003 f9f9 	bl	800d63a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 800a248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a24c:	2201      	movs	r2, #1
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f003 f9f2 	bl	800d63a <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 800a256:	2101      	movs	r1, #1
 800a258:	68b8      	ldr	r0, [r7, #8]
 800a25a:	f000 f82c 	bl	800a2b6 <MPU_CS>
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b086      	sub	sp, #24
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	603b      	str	r3, [r7, #0]
 800a272:	4613      	mov	r3, r2
 800a274:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 800a276:	2100      	movs	r1, #0
 800a278:	68b8      	ldr	r0, [r7, #8]
 800a27a:	f000 f81c 	bl	800a2b6 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 800a27e:	79fb      	ldrb	r3, [r7, #7]
 800a280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a284:	b2db      	uxtb	r3, r3
 800a286:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 800a288:	f107 0117 	add.w	r1, r7, #23
 800a28c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a290:	2201      	movs	r2, #1
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f003 f9d1 	bl	800d63a <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 800a298:	8c3a      	ldrh	r2, [r7, #32]
 800a29a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f003 fb38 	bl	800d916 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	68b8      	ldr	r0, [r7, #8]
 800a2aa:	f000 f804 	bl	800a2b6 <MPU_CS>
}
 800a2ae:	bf00      	nop
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	f001 faa8 	bl	800b824 <HAL_GPIO_WritePin>
}
 800a2d4:	bf00      	nop
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 800a2ea:	231c      	movs	r3, #28
 800a2ec:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 800a2ee:	79fb      	ldrb	r3, [r7, #7]
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d847      	bhi.n	800a384 <MPU_writeAccFullScaleRange+0xa8>
 800a2f4:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <MPU_writeAccFullScaleRange+0x20>)
 800a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fa:	bf00      	nop
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a32b 	.word	0x0800a32b
 800a304:	0800a349 	.word	0x0800a349
 800a308:	0800a367 	.word	0x0800a367
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800a312:	615a      	str	r2, [r3, #20]
        val = 0x00;
 800a314:	2300      	movs	r3, #0
 800a316:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a318:	f107 0316 	add.w	r3, r7, #22
 800a31c:	f107 0217 	add.w	r2, r7, #23
 800a320:	68b9      	ldr	r1, [r7, #8]
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f7ff ff7e 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a328:	e03b      	b.n	800a3a2 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a330:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800a332:	2308      	movs	r3, #8
 800a334:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a336:	f107 0316 	add.w	r3, r7, #22
 800a33a:	f107 0217 	add.w	r2, r7, #23
 800a33e:	68b9      	ldr	r1, [r7, #8]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff ff6f 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a346:	e02c      	b.n	800a3a2 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800a34e:	615a      	str	r2, [r3, #20]
        val = 0x10;
 800a350:	2310      	movs	r3, #16
 800a352:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a354:	f107 0316 	add.w	r3, r7, #22
 800a358:	f107 0217 	add.w	r2, r7, #23
 800a35c:	68b9      	ldr	r1, [r7, #8]
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff ff60 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a364:	e01d      	b.n	800a3a2 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800a36c:	615a      	str	r2, [r3, #20]
        val = 0x18;
 800a36e:	2318      	movs	r3, #24
 800a370:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a372:	f107 0316 	add.w	r3, r7, #22
 800a376:	f107 0217 	add.w	r2, r7, #23
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7ff ff51 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a382:	e00e      	b.n	800a3a2 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a38a:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800a38c:	2308      	movs	r3, #8
 800a38e:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a390:	f107 0316 	add.w	r3, r7, #22
 800a394:	f107 0217 	add.w	r2, r7, #23
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7ff ff42 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a3a0:	bf00      	nop
    }
	HAL_Delay(50);
 800a3a2:	2032      	movs	r0, #50	; 0x32
 800a3a4:	f000 fb92 	bl	800aacc <HAL_Delay>
}
 800a3a8:	bf00      	nop
 800a3aa:	3718      	adds	r7, #24
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800a3be:	231b      	movs	r3, #27
 800a3c0:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d843      	bhi.n	800a450 <MPU_writeGyroFullScaleRange+0xa0>
 800a3c8:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <MPU_writeGyroFullScaleRange+0x20>)
 800a3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a3e1 	.word	0x0800a3e1
 800a3d4:	0800a3fd 	.word	0x0800a3fd
 800a3d8:	0800a419 	.word	0x0800a419
 800a3dc:	0800a435 	.word	0x0800a435
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	4a26      	ldr	r2, [pc, #152]	; (800a47c <MPU_writeGyroFullScaleRange+0xcc>)
 800a3e4:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a3ea:	f107 0316 	add.w	r3, r7, #22
 800a3ee:	f107 0217 	add.w	r2, r7, #23
 800a3f2:	68b9      	ldr	r1, [r7, #8]
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7ff ff15 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a3fa:	e037      	b.n	800a46c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	4a20      	ldr	r2, [pc, #128]	; (800a480 <MPU_writeGyroFullScaleRange+0xd0>)
 800a400:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800a402:	2308      	movs	r3, #8
 800a404:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a406:	f107 0316 	add.w	r3, r7, #22
 800a40a:	f107 0217 	add.w	r2, r7, #23
 800a40e:	68b9      	ldr	r1, [r7, #8]
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f7ff ff07 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a416:	e029      	b.n	800a46c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	4a1a      	ldr	r2, [pc, #104]	; (800a484 <MPU_writeGyroFullScaleRange+0xd4>)
 800a41c:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 800a41e:	2310      	movs	r3, #16
 800a420:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a422:	f107 0316 	add.w	r3, r7, #22
 800a426:	f107 0217 	add.w	r2, r7, #23
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff fef9 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a432:	e01b      	b.n	800a46c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4a14      	ldr	r2, [pc, #80]	; (800a488 <MPU_writeGyroFullScaleRange+0xd8>)
 800a438:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 800a43a:	2318      	movs	r3, #24
 800a43c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a43e:	f107 0316 	add.w	r3, r7, #22
 800a442:	f107 0217 	add.w	r2, r7, #23
 800a446:	68b9      	ldr	r1, [r7, #8]
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f7ff feeb 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a44e:	e00d      	b.n	800a46c <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4a0b      	ldr	r2, [pc, #44]	; (800a480 <MPU_writeGyroFullScaleRange+0xd0>)
 800a454:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 800a456:	2308      	movs	r3, #8
 800a458:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800a45a:	f107 0316 	add.w	r3, r7, #22
 800a45e:	f107 0217 	add.w	r2, r7, #23
 800a462:	68b9      	ldr	r1, [r7, #8]
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f7ff fedd 	bl	800a224 <MPU_REG_WRITE>
        break;
 800a46a:	bf00      	nop
    }
	HAL_Delay(50);
 800a46c:	2032      	movs	r0, #50	; 0x32
 800a46e:	f000 fb2d 	bl	800aacc <HAL_Delay>
}
 800a472:	bf00      	nop
 800a474:	3718      	adds	r7, #24
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	43030000 	.word	0x43030000
 800a480:	42830000 	.word	0x42830000
 800a484:	42033333 	.word	0x42033333
 800a488:	41833333 	.word	0x41833333

0800a48c <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08e      	sub	sp, #56	; 0x38
 800a490:	af02      	add	r7, sp, #8
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 800a496:	f107 0308 	add.w	r3, r7, #8
 800a49a:	2226      	movs	r2, #38	; 0x26
 800a49c:	9200      	str	r2, [sp, #0]
 800a49e:	223b      	movs	r2, #59	; 0x3b
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff fedf 	bl	800a266 <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 800a4a8:	7a3b      	ldrb	r3, [r7, #8]
 800a4aa:	021b      	lsls	r3, r3, #8
 800a4ac:	b21a      	sxth	r2, r3
 800a4ae:	7a7b      	ldrb	r3, [r7, #9]
 800a4b0:	b21b      	sxth	r3, r3
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	b21a      	sxth	r2, r3
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 800a4ba:	7abb      	ldrb	r3, [r7, #10]
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	b21a      	sxth	r2, r3
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	b21b      	sxth	r3, r3
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	b21a      	sxth	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 800a4cc:	7b3b      	ldrb	r3, [r7, #12]
 800a4ce:	021b      	lsls	r3, r3, #8
 800a4d0:	b21a      	sxth	r2, r3
 800a4d2:	7b7b      	ldrb	r3, [r7, #13]
 800a4d4:	b21b      	sxth	r3, r3
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	b21a      	sxth	r2, r3
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	021b      	lsls	r3, r3, #8
 800a4e2:	b21a      	sxth	r2, r3
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	b21b      	sxth	r3, r3
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	b21a      	sxth	r2, r3
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 800a4f0:	7c3b      	ldrb	r3, [r7, #16]
 800a4f2:	021b      	lsls	r3, r3, #8
 800a4f4:	b21a      	sxth	r2, r3
 800a4f6:	7c7b      	ldrb	r3, [r7, #17]
 800a4f8:	b21b      	sxth	r3, r3
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	b21b      	sxth	r3, r3
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	425b      	negs	r3, r3
 800a502:	b29b      	uxth	r3, r3
 800a504:	b21a      	sxth	r2, r3
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 800a50a:	7cbb      	ldrb	r3, [r7, #18]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	b21a      	sxth	r2, r3
 800a510:	7cfb      	ldrb	r3, [r7, #19]
 800a512:	b21b      	sxth	r3, r3
 800a514:	4313      	orrs	r3, r2
 800a516:	b21b      	sxth	r3, r3
 800a518:	b29b      	uxth	r3, r3
 800a51a:	425b      	negs	r3, r3
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	b21a      	sxth	r2, r3
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 800a524:	7d3b      	ldrb	r3, [r7, #20]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	b21a      	sxth	r2, r3
 800a52a:	7d7b      	ldrb	r3, [r7, #21]
 800a52c:	b21b      	sxth	r3, r3
 800a52e:	4313      	orrs	r3, r2
 800a530:	b21b      	sxth	r3, r3
 800a532:	b29b      	uxth	r3, r3
 800a534:	425b      	negs	r3, r3
 800a536:	b29b      	uxth	r3, r3
 800a538:	b21a      	sxth	r2, r3
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 800a53e:	bf00      	nop
 800a540:	3730      	adds	r7, #48	; 0x30
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff ff99 	bl	800a48c <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a560:	ee07 3a90 	vmov	s15, r3
 800a564:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	ed93 7a05 	vldr	s14, [r3, #20]
 800a56e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a57e:	ee07 3a90 	vmov	s15, r3
 800a582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	ed93 7a05 	vldr	s14, [r3, #20]
 800a58c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a59c:	ee07 3a90 	vmov	s15, r3
 800a5a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	ed93 7a05 	vldr	s14, [r3, #20]
 800a5aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7f5 ffda 	bl	8000574 <__aeabi_i2d>
 800a5c0:	a336      	add	r3, pc, #216	; (adr r3, 800a69c <MPU_readProcessedData+0x154>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f7f6 f969 	bl	800089c <__aeabi_ddiv>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	f04f 0200 	mov.w	r2, #0
 800a5d6:	4b30      	ldr	r3, [pc, #192]	; (800a698 <MPU_readProcessedData+0x150>)
 800a5d8:	f7f5 fe80 	bl	80002dc <__adddf3>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	f7f6 fb28 	bl	8000c38 <__aeabi_d2f>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800a602:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a620:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a630:	ee07 3a90 	vmov	s15, r3
 800a634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a63e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a66a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	f3af 8000 	nop.w
 800a698:	40350000 	.word	0x40350000
 800a69c:	851eb852 	.word	0x851eb852
 800a6a0:	4074ddeb 	.word	0x4074ddeb

0800a6a4 <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a21      	ldr	r2, [pc, #132]	; (800a738 <HCSR04_Init+0x94>)
 800a6b2:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a6ba:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a1f      	ldr	r2, [pc, #124]	; (800a73c <HCSR04_Init+0x98>)
 800a6c0:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	226c      	movs	r2, #108	; 0x6c
 800a6cc:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d104      	bne.n	800a6e6 <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a6e4:	e019      	b.n	800a71a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	d104      	bne.n	800a6f8 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a6f6:	e010      	b.n	800a71a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d104      	bne.n	800a70a <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2204      	movs	r2, #4
 800a704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a708:	e007      	b.n	800a71a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	2b0c      	cmp	r3, #12
 800a710:	d103      	bne.n	800a71a <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2208      	movs	r2, #8
 800a716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 800a71a:	6838      	ldr	r0, [r7, #0]
 800a71c:	f003 fe9a 	bl	800e454 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	4619      	mov	r1, r3
 800a726:	6838      	ldr	r0, [r7, #0]
 800a728:	f004 f8c0 	bl	800e8ac <HAL_TIM_IC_Start_IT>

	return 0;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	40020c00 	.word	0x40020c00
 800a73c:	40000400 	.word	0x40000400

0800a740 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	429a      	cmp	r2, r3
 800a758:	f040 812e 	bne.w	800a9b8 <HCSR04_TMR_IC_ISR+0x278>
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	7f1a      	ldrb	r2, [r3, #28]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a766:	429a      	cmp	r2, r3
 800a768:	f040 8126 	bne.w	800a9b8 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	7d5b      	ldrb	r3, [r3, #21]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d16d      	bne.n	800a850 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	4619      	mov	r1, r3
 800a77a:	6838      	ldr	r0, [r7, #0]
 800a77c:	f004 fd80 	bl	800f280 <HAL_TIM_ReadCapturedValue>
 800a780:	4602      	mov	r2, r0
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d108      	bne.n	800a7a6 <HCSR04_TMR_IC_ISR+0x66>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6a1a      	ldr	r2, [r3, #32]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 020a 	bic.w	r2, r2, #10
 800a7a2:	621a      	str	r2, [r3, #32]
 800a7a4:	e021      	b.n	800a7ea <HCSR04_TMR_IC_ISR+0xaa>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	d108      	bne.n	800a7c0 <HCSR04_TMR_IC_ISR+0x80>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	6812      	ldr	r2, [r2, #0]
 800a7b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7bc:	6213      	str	r3, [r2, #32]
 800a7be:	e014      	b.n	800a7ea <HCSR04_TMR_IC_ISR+0xaa>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d108      	bne.n	800a7da <HCSR04_TMR_IC_ISR+0x9a>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	6812      	ldr	r2, [r2, #0]
 800a7d2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a7d6:	6213      	str	r3, [r2, #32]
 800a7d8:	e007      	b.n	800a7ea <HCSR04_TMR_IC_ISR+0xaa>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	6a1b      	ldr	r3, [r3, #32]
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	6812      	ldr	r2, [r2, #0]
 800a7e4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a7e8:	6213      	str	r3, [r2, #32]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d108      	bne.n	800a804 <HCSR04_TMR_IC_ISR+0xc4>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6a1a      	ldr	r2, [r3, #32]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f042 0202 	orr.w	r2, r2, #2
 800a800:	621a      	str	r2, [r3, #32]
 800a802:	e021      	b.n	800a848 <HCSR04_TMR_IC_ISR+0x108>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d108      	bne.n	800a81e <HCSR04_TMR_IC_ISR+0xde>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	6812      	ldr	r2, [r2, #0]
 800a816:	f043 0320 	orr.w	r3, r3, #32
 800a81a:	6213      	str	r3, [r2, #32]
 800a81c:	e014      	b.n	800a848 <HCSR04_TMR_IC_ISR+0x108>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	2b08      	cmp	r3, #8
 800a824:	d108      	bne.n	800a838 <HCSR04_TMR_IC_ISR+0xf8>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	6a1b      	ldr	r3, [r3, #32]
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	6812      	ldr	r2, [r2, #0]
 800a830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a834:	6213      	str	r3, [r2, #32]
 800a836:	e007      	b.n	800a848 <HCSR04_TMR_IC_ISR+0x108>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	6812      	ldr	r2, [r2, #0]
 800a842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a846:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 800a84e:	e0b3      	b.n	800a9b8 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7d5b      	ldrb	r3, [r3, #21]
 800a854:	2b01      	cmp	r3, #1
 800a856:	f040 80af 	bne.w	800a9b8 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a860:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	4619      	mov	r1, r3
 800a872:	6838      	ldr	r0, [r7, #0]
 800a874:	f004 fd04 	bl	800f280 <HAL_TIM_ReadCapturedValue>
 800a878:	4602      	mov	r2, r0
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1a      	ldr	r2, [r3, #32]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	429a      	cmp	r2, r3
 800a888:	d207      	bcs.n	800a89a <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	1ad2      	subs	r2, r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	629a      	str	r2, [r3, #40]	; 0x28
 800a898:	e00f      	b.n	800a8ba <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d209      	bcs.n	800a8ba <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	1ad2      	subs	r2, r2, r3
 800a8b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8b4:	4413      	add	r3, r2
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8c6:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800a9c0 <HCSR04_TMR_IC_ISR+0x280>
 800a8ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8ce:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800a9c4 <HCSR04_TMR_IC_ISR+0x284>
 800a8d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a8da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691a      	ldr	r2, [r3, #16]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d108      	bne.n	800a91c <HCSR04_TMR_IC_ISR+0x1dc>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6a1a      	ldr	r2, [r3, #32]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 020a 	bic.w	r2, r2, #10
 800a918:	621a      	str	r2, [r3, #32]
 800a91a:	e021      	b.n	800a960 <HCSR04_TMR_IC_ISR+0x220>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	2b04      	cmp	r3, #4
 800a922:	d108      	bne.n	800a936 <HCSR04_TMR_IC_ISR+0x1f6>
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	6812      	ldr	r2, [r2, #0]
 800a92e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a932:	6213      	str	r3, [r2, #32]
 800a934:	e014      	b.n	800a960 <HCSR04_TMR_IC_ISR+0x220>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	2b08      	cmp	r3, #8
 800a93c:	d108      	bne.n	800a950 <HCSR04_TMR_IC_ISR+0x210>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	6812      	ldr	r2, [r2, #0]
 800a948:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a94c:	6213      	str	r3, [r2, #32]
 800a94e:	e007      	b.n	800a960 <HCSR04_TMR_IC_ISR+0x220>
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	6812      	ldr	r2, [r2, #0]
 800a95a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a95e:	6213      	str	r3, [r2, #32]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d106      	bne.n	800a976 <HCSR04_TMR_IC_ISR+0x236>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6a12      	ldr	r2, [r2, #32]
 800a972:	621a      	str	r2, [r3, #32]
 800a974:	e01b      	b.n	800a9ae <HCSR04_TMR_IC_ISR+0x26e>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	2b04      	cmp	r3, #4
 800a97c:	d106      	bne.n	800a98c <HCSR04_TMR_IC_ISR+0x24c>
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	6812      	ldr	r2, [r2, #0]
 800a986:	6a1b      	ldr	r3, [r3, #32]
 800a988:	6213      	str	r3, [r2, #32]
 800a98a:	e010      	b.n	800a9ae <HCSR04_TMR_IC_ISR+0x26e>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b08      	cmp	r3, #8
 800a992:	d106      	bne.n	800a9a2 <HCSR04_TMR_IC_ISR+0x262>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	6812      	ldr	r2, [r2, #0]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	6213      	str	r3, [r2, #32]
 800a9a0:	e005      	b.n	800a9ae <HCSR04_TMR_IC_ISR+0x26e>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	6812      	ldr	r2, [r2, #0]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 800a9ae:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <HCSR04_TMR_IC_ISR+0x288>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f007 f95e 	bl	8011c74 <osSemaphoreRelease>
}
 800a9b8:	bf00      	nop
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	447a0000 	.word	0x447a0000
 800a9c4:	43aa0000 	.word	0x43aa0000
 800a9c8:	20000da8 	.word	0x20000da8

0800a9cc <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6818      	ldr	r0, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	889b      	ldrh	r3, [r3, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	4619      	mov	r1, r3
 800a9e0:	f000 ff20 	bl	800b824 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800a9e4:	2001      	movs	r0, #1
 800a9e6:	f000 f871 	bl	800aacc <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	889b      	ldrh	r3, [r3, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	f000 ff15 	bl	800b824 <HAL_GPIO_WritePin>
}
 800a9fa:	bf00      	nop
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0e:	ee07 3a90 	vmov	s15, r3
}
 800aa12:	eeb0 0a67 	vmov.f32	s0, s15
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800aa20:	f8df d034 	ldr.w	sp, [pc, #52]	; 800aa58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800aa24:	480d      	ldr	r0, [pc, #52]	; (800aa5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800aa26:	490e      	ldr	r1, [pc, #56]	; (800aa60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800aa28:	4a0e      	ldr	r2, [pc, #56]	; (800aa64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800aa2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aa2c:	e002      	b.n	800aa34 <LoopCopyDataInit>

0800aa2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aa2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aa30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aa32:	3304      	adds	r3, #4

0800aa34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aa34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aa36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aa38:	d3f9      	bcc.n	800aa2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aa3a:	4a0b      	ldr	r2, [pc, #44]	; (800aa68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800aa3c:	4c0b      	ldr	r4, [pc, #44]	; (800aa6c <LoopFillZerobss+0x26>)
  movs r3, #0
 800aa3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aa40:	e001      	b.n	800aa46 <LoopFillZerobss>

0800aa42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aa42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aa44:	3204      	adds	r2, #4

0800aa46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aa46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aa48:	d3fb      	bcc.n	800aa42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800aa4a:	f7fc fb3f 	bl	80070cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aa4e:	f00a fda7 	bl	80155a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800aa52:	f7f9 fc89 	bl	8004368 <main>
  bx  lr    
 800aa56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800aa58:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800aa5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aa60:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800aa64:	0801c8e0 	.word	0x0801c8e0
  ldr r2, =_sbss
 800aa68:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800aa6c:	200090a0 	.word	0x200090a0

0800aa70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aa70:	e7fe      	b.n	800aa70 <ADC_IRQHandler>

0800aa72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aa76:	2003      	movs	r0, #3
 800aa78:	f000 f8f9 	bl	800ac6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800aa7c:	200f      	movs	r0, #15
 800aa7e:	f7fc f99d 	bl	8006dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800aa82:	f7fb fecb 	bl	800681c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aa90:	4b06      	ldr	r3, [pc, #24]	; (800aaac <HAL_IncTick+0x20>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	461a      	mov	r2, r3
 800aa96:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <HAL_IncTick+0x24>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	4a04      	ldr	r2, [pc, #16]	; (800aab0 <HAL_IncTick+0x24>)
 800aa9e:	6013      	str	r3, [r2, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20000010 	.word	0x20000010
 800aab0:	20000e04 	.word	0x20000e04

0800aab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aab4:	b480      	push	{r7}
 800aab6:	af00      	add	r7, sp, #0
  return uwTick;
 800aab8:	4b03      	ldr	r3, [pc, #12]	; (800aac8 <HAL_GetTick+0x14>)
 800aaba:	681b      	ldr	r3, [r3, #0]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	20000e04 	.word	0x20000e04

0800aacc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aad4:	f7ff ffee 	bl	800aab4 <HAL_GetTick>
 800aad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae4:	d005      	beq.n	800aaf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aae6:	4b0a      	ldr	r3, [pc, #40]	; (800ab10 <HAL_Delay+0x44>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4413      	add	r3, r2
 800aaf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aaf2:	bf00      	nop
 800aaf4:	f7ff ffde 	bl	800aab4 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d8f7      	bhi.n	800aaf4 <HAL_Delay+0x28>
  {
  }
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20000010 	.word	0x20000010

0800ab14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab24:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <__NVIC_SetPriorityGrouping+0x40>)
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ab30:	4013      	ands	r3, r2
 800ab32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ab3c:	4b06      	ldr	r3, [pc, #24]	; (800ab58 <__NVIC_SetPriorityGrouping+0x44>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ab42:	4a04      	ldr	r2, [pc, #16]	; (800ab54 <__NVIC_SetPriorityGrouping+0x40>)
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	60d3      	str	r3, [r2, #12]
}
 800ab48:	bf00      	nop
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	e000ed00 	.word	0xe000ed00
 800ab58:	05fa0000 	.word	0x05fa0000

0800ab5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab60:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <__NVIC_GetPriorityGrouping+0x18>)
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	0a1b      	lsrs	r3, r3, #8
 800ab66:	f003 0307 	and.w	r3, r3, #7
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	e000ed00 	.word	0xe000ed00

0800ab78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	4603      	mov	r3, r0
 800ab80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	db0b      	blt.n	800aba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	f003 021f 	and.w	r2, r3, #31
 800ab90:	4907      	ldr	r1, [pc, #28]	; (800abb0 <__NVIC_EnableIRQ+0x38>)
 800ab92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab96:	095b      	lsrs	r3, r3, #5
 800ab98:	2001      	movs	r0, #1
 800ab9a:	fa00 f202 	lsl.w	r2, r0, r2
 800ab9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	e000e100 	.word	0xe000e100

0800abb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	4603      	mov	r3, r0
 800abbc:	6039      	str	r1, [r7, #0]
 800abbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	db0a      	blt.n	800abde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	490c      	ldr	r1, [pc, #48]	; (800ac00 <__NVIC_SetPriority+0x4c>)
 800abce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abd2:	0112      	lsls	r2, r2, #4
 800abd4:	b2d2      	uxtb	r2, r2
 800abd6:	440b      	add	r3, r1
 800abd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800abdc:	e00a      	b.n	800abf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	4908      	ldr	r1, [pc, #32]	; (800ac04 <__NVIC_SetPriority+0x50>)
 800abe4:	79fb      	ldrb	r3, [r7, #7]
 800abe6:	f003 030f 	and.w	r3, r3, #15
 800abea:	3b04      	subs	r3, #4
 800abec:	0112      	lsls	r2, r2, #4
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	440b      	add	r3, r1
 800abf2:	761a      	strb	r2, [r3, #24]
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	e000e100 	.word	0xe000e100
 800ac04:	e000ed00 	.word	0xe000ed00

0800ac08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b089      	sub	sp, #36	; 0x24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f003 0307 	and.w	r3, r3, #7
 800ac1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	f1c3 0307 	rsb	r3, r3, #7
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	bf28      	it	cs
 800ac26:	2304      	movcs	r3, #4
 800ac28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	2b06      	cmp	r3, #6
 800ac30:	d902      	bls.n	800ac38 <NVIC_EncodePriority+0x30>
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	3b03      	subs	r3, #3
 800ac36:	e000      	b.n	800ac3a <NVIC_EncodePriority+0x32>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	fa02 f303 	lsl.w	r3, r2, r3
 800ac46:	43da      	mvns	r2, r3
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	401a      	ands	r2, r3
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ac50:	f04f 31ff 	mov.w	r1, #4294967295
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	fa01 f303 	lsl.w	r3, r1, r3
 800ac5a:	43d9      	mvns	r1, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac60:	4313      	orrs	r3, r2
         );
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3724      	adds	r7, #36	; 0x24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7ff ff4c 	bl	800ab14 <__NVIC_SetPriorityGrouping>
}
 800ac7c:	bf00      	nop
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ac92:	2300      	movs	r3, #0
 800ac94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ac96:	f7ff ff61 	bl	800ab5c <__NVIC_GetPriorityGrouping>
 800ac9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	6978      	ldr	r0, [r7, #20]
 800aca2:	f7ff ffb1 	bl	800ac08 <NVIC_EncodePriority>
 800aca6:	4602      	mov	r2, r0
 800aca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acac:	4611      	mov	r1, r2
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff ff80 	bl	800abb4 <__NVIC_SetPriority>
}
 800acb4:	bf00      	nop
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800acc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff ff54 	bl	800ab78 <__NVIC_EnableIRQ>
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ace4:	f7ff fee6 	bl	800aab4 <HAL_GetTick>
 800ace8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e099      	b.n	800ae28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0201 	bic.w	r2, r2, #1
 800ad12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ad14:	e00f      	b.n	800ad36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad16:	f7ff fecd 	bl	800aab4 <HAL_GetTick>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	2b05      	cmp	r3, #5
 800ad22:	d908      	bls.n	800ad36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2220      	movs	r2, #32
 800ad28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2203      	movs	r2, #3
 800ad2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e078      	b.n	800ae28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e8      	bne.n	800ad16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4b38      	ldr	r3, [pc, #224]	; (800ae30 <HAL_DMA_Init+0x158>)
 800ad50:	4013      	ands	r3, r2
 800ad52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ad62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	2b04      	cmp	r3, #4
 800ad8e:	d107      	bne.n	800ada0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	697a      	ldr	r2, [r7, #20]
 800ada6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f023 0307 	bic.w	r3, r3, #7
 800adb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	d117      	bne.n	800adfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	4313      	orrs	r3, r2
 800add2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00e      	beq.n	800adfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fb09 	bl	800b3f4 <DMA_CheckFifoParam>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d008      	beq.n	800adfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2240      	movs	r2, #64	; 0x40
 800adec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800adf6:	2301      	movs	r3, #1
 800adf8:	e016      	b.n	800ae28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fac0 	bl	800b388 <DMA_CalcBaseAndBitshift>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae10:	223f      	movs	r2, #63	; 0x3f
 800ae12:	409a      	lsls	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	e010803f 	.word	0xe010803f

0800ae34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
 800ae40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d101      	bne.n	800ae5a <HAL_DMA_Start_IT+0x26>
 800ae56:	2302      	movs	r3, #2
 800ae58:	e048      	b.n	800aeec <HAL_DMA_Start_IT+0xb8>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d137      	bne.n	800aede <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	68b9      	ldr	r1, [r7, #8]
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 fa52 	bl	800b32c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae8c:	223f      	movs	r2, #63	; 0x3f
 800ae8e:	409a      	lsls	r2, r3
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f042 0216 	orr.w	r2, r2, #22
 800aea2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	695a      	ldr	r2, [r3, #20]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aeb2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d007      	beq.n	800aecc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f042 0208 	orr.w	r2, r2, #8
 800aeca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f042 0201 	orr.w	r2, r2, #1
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	e005      	b.n	800aeea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800aee6:	2302      	movs	r3, #2
 800aee8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800af02:	f7ff fdd7 	bl	800aab4 <HAL_GetTick>
 800af06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b02      	cmp	r3, #2
 800af12:	d008      	beq.n	800af26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2280      	movs	r2, #128	; 0x80
 800af18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e052      	b.n	800afcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f022 0216 	bic.w	r2, r2, #22
 800af34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	695a      	ldr	r2, [r3, #20]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d103      	bne.n	800af56 <HAL_DMA_Abort+0x62>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af52:	2b00      	cmp	r3, #0
 800af54:	d007      	beq.n	800af66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0208 	bic.w	r2, r2, #8
 800af64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f022 0201 	bic.w	r2, r2, #1
 800af74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800af76:	e013      	b.n	800afa0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800af78:	f7ff fd9c 	bl	800aab4 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	2b05      	cmp	r3, #5
 800af84:	d90c      	bls.n	800afa0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2220      	movs	r2, #32
 800af8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2203      	movs	r2, #3
 800af90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e015      	b.n	800afcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1e4      	bne.n	800af78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afb2:	223f      	movs	r2, #63	; 0x3f
 800afb4:	409a      	lsls	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2201      	movs	r2, #1
 800afbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d004      	beq.n	800aff2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2280      	movs	r2, #128	; 0x80
 800afec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e00c      	b.n	800b00c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2205      	movs	r2, #5
 800aff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f022 0201 	bic.w	r2, r2, #1
 800b008:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b024:	4b8e      	ldr	r3, [pc, #568]	; (800b260 <HAL_DMA_IRQHandler+0x248>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a8e      	ldr	r2, [pc, #568]	; (800b264 <HAL_DMA_IRQHandler+0x24c>)
 800b02a:	fba2 2303 	umull	r2, r3, r2, r3
 800b02e:	0a9b      	lsrs	r3, r3, #10
 800b030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b042:	2208      	movs	r2, #8
 800b044:	409a      	lsls	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4013      	ands	r3, r2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d01a      	beq.n	800b084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d013      	beq.n	800b084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0204 	bic.w	r2, r2, #4
 800b06a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b070:	2208      	movs	r2, #8
 800b072:	409a      	lsls	r2, r3
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07c:	f043 0201 	orr.w	r2, r3, #1
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b088:	2201      	movs	r2, #1
 800b08a:	409a      	lsls	r2, r3
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4013      	ands	r3, r2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d012      	beq.n	800b0ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00b      	beq.n	800b0ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	409a      	lsls	r2, r3
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b2:	f043 0202 	orr.w	r2, r3, #2
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0be:	2204      	movs	r2, #4
 800b0c0:	409a      	lsls	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d012      	beq.n	800b0f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00b      	beq.n	800b0f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0dc:	2204      	movs	r2, #4
 800b0de:	409a      	lsls	r2, r3
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e8:	f043 0204 	orr.w	r2, r3, #4
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0f4:	2210      	movs	r2, #16
 800b0f6:	409a      	lsls	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d043      	beq.n	800b188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0308 	and.w	r3, r3, #8
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d03c      	beq.n	800b188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b112:	2210      	movs	r2, #16
 800b114:	409a      	lsls	r2, r3
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d018      	beq.n	800b15a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d108      	bne.n	800b148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d024      	beq.n	800b188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	4798      	blx	r3
 800b146:	e01f      	b.n	800b188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01b      	beq.n	800b188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	4798      	blx	r3
 800b158:	e016      	b.n	800b188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b164:	2b00      	cmp	r3, #0
 800b166:	d107      	bne.n	800b178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 0208 	bic.w	r2, r2, #8
 800b176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d003      	beq.n	800b188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b18c:	2220      	movs	r2, #32
 800b18e:	409a      	lsls	r2, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	4013      	ands	r3, r2
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 808f 	beq.w	800b2b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 8087 	beq.w	800b2b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	409a      	lsls	r2, r3
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b05      	cmp	r3, #5
 800b1c0:	d136      	bne.n	800b230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f022 0216 	bic.w	r2, r2, #22
 800b1d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	695a      	ldr	r2, [r3, #20]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d103      	bne.n	800b1f2 <HAL_DMA_IRQHandler+0x1da>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d007      	beq.n	800b202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f022 0208 	bic.w	r2, r2, #8
 800b200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b206:	223f      	movs	r2, #63	; 0x3f
 800b208:	409a      	lsls	r2, r3
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b222:	2b00      	cmp	r3, #0
 800b224:	d07e      	beq.n	800b324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	4798      	blx	r3
        }
        return;
 800b22e:	e079      	b.n	800b324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01d      	beq.n	800b27a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10d      	bne.n	800b268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b250:	2b00      	cmp	r3, #0
 800b252:	d031      	beq.n	800b2b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	4798      	blx	r3
 800b25c:	e02c      	b.n	800b2b8 <HAL_DMA_IRQHandler+0x2a0>
 800b25e:	bf00      	nop
 800b260:	20000008 	.word	0x20000008
 800b264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d023      	beq.n	800b2b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	4798      	blx	r3
 800b278:	e01e      	b.n	800b2b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10f      	bne.n	800b2a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f022 0210 	bic.w	r2, r2, #16
 800b296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d032      	beq.n	800b326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d022      	beq.n	800b312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2205      	movs	r2, #5
 800b2d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f022 0201 	bic.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60bb      	str	r3, [r7, #8]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d307      	bcc.n	800b300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f2      	bne.n	800b2e4 <HAL_DMA_IRQHandler+0x2cc>
 800b2fe:	e000      	b.n	800b302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	4798      	blx	r3
 800b322:	e000      	b.n	800b326 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b324:	bf00      	nop
    }
  }
}
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	2b40      	cmp	r3, #64	; 0x40
 800b358:	d108      	bne.n	800b36c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b36a:	e007      	b.n	800b37c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	60da      	str	r2, [r3, #12]
}
 800b37c:	bf00      	nop
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	3b10      	subs	r3, #16
 800b398:	4a13      	ldr	r2, [pc, #76]	; (800b3e8 <DMA_CalcBaseAndBitshift+0x60>)
 800b39a:	fba2 2303 	umull	r2, r3, r2, r3
 800b39e:	091b      	lsrs	r3, r3, #4
 800b3a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b3a2:	4a12      	ldr	r2, [pc, #72]	; (800b3ec <DMA_CalcBaseAndBitshift+0x64>)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d908      	bls.n	800b3c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	4b0c      	ldr	r3, [pc, #48]	; (800b3f0 <DMA_CalcBaseAndBitshift+0x68>)
 800b3be:	4013      	ands	r3, r2
 800b3c0:	1d1a      	adds	r2, r3, #4
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	659a      	str	r2, [r3, #88]	; 0x58
 800b3c6:	e006      	b.n	800b3d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	4b08      	ldr	r3, [pc, #32]	; (800b3f0 <DMA_CalcBaseAndBitshift+0x68>)
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	aaaaaaab 	.word	0xaaaaaaab
 800b3ec:	0801c030 	.word	0x0801c030
 800b3f0:	fffffc00 	.word	0xfffffc00

0800b3f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d11f      	bne.n	800b44e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b03      	cmp	r3, #3
 800b412:	d856      	bhi.n	800b4c2 <DMA_CheckFifoParam+0xce>
 800b414:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <DMA_CheckFifoParam+0x28>)
 800b416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41a:	bf00      	nop
 800b41c:	0800b42d 	.word	0x0800b42d
 800b420:	0800b43f 	.word	0x0800b43f
 800b424:	0800b42d 	.word	0x0800b42d
 800b428:	0800b4c3 	.word	0x0800b4c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d046      	beq.n	800b4c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b43c:	e043      	b.n	800b4c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b446:	d140      	bne.n	800b4ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b44c:	e03d      	b.n	800b4ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b456:	d121      	bne.n	800b49c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d837      	bhi.n	800b4ce <DMA_CheckFifoParam+0xda>
 800b45e:	a201      	add	r2, pc, #4	; (adr r2, 800b464 <DMA_CheckFifoParam+0x70>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b475 	.word	0x0800b475
 800b468:	0800b47b 	.word	0x0800b47b
 800b46c:	0800b475 	.word	0x0800b475
 800b470:	0800b48d 	.word	0x0800b48d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	73fb      	strb	r3, [r7, #15]
      break;
 800b478:	e030      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b482:	2b00      	cmp	r3, #0
 800b484:	d025      	beq.n	800b4d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b48a:	e022      	b.n	800b4d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b490:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b494:	d11f      	bne.n	800b4d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b49a:	e01c      	b.n	800b4d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d903      	bls.n	800b4aa <DMA_CheckFifoParam+0xb6>
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d003      	beq.n	800b4b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b4a8:	e018      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ae:	e015      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00e      	beq.n	800b4da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	73fb      	strb	r3, [r7, #15]
      break;
 800b4c0:	e00b      	b.n	800b4da <DMA_CheckFifoParam+0xe6>
      break;
 800b4c2:	bf00      	nop
 800b4c4:	e00a      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
      break;
 800b4c6:	bf00      	nop
 800b4c8:	e008      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
      break;
 800b4ca:	bf00      	nop
 800b4cc:	e006      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
      break;
 800b4ce:	bf00      	nop
 800b4d0:	e004      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
      break;
 800b4d2:	bf00      	nop
 800b4d4:	e002      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
      break;   
 800b4d6:	bf00      	nop
 800b4d8:	e000      	b.n	800b4dc <DMA_CheckFifoParam+0xe8>
      break;
 800b4da:	bf00      	nop
    }
  } 
  
  return status; 
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop

0800b4ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b089      	sub	sp, #36	; 0x24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b4fe:	2300      	movs	r3, #0
 800b500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b502:	2300      	movs	r3, #0
 800b504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b506:	2300      	movs	r3, #0
 800b508:	61fb      	str	r3, [r7, #28]
 800b50a:	e169      	b.n	800b7e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b50c:	2201      	movs	r2, #1
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	fa02 f303 	lsl.w	r3, r2, r3
 800b514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4013      	ands	r3, r2
 800b51e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	429a      	cmp	r2, r3
 800b526:	f040 8158 	bne.w	800b7da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	2b01      	cmp	r3, #1
 800b534:	d005      	beq.n	800b542 <HAL_GPIO_Init+0x56>
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	f003 0303 	and.w	r3, r3, #3
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d130      	bne.n	800b5a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	2203      	movs	r2, #3
 800b54e:	fa02 f303 	lsl.w	r3, r2, r3
 800b552:	43db      	mvns	r3, r3
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	4013      	ands	r3, r2
 800b558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	68da      	ldr	r2, [r3, #12]
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	fa02 f303 	lsl.w	r3, r2, r3
 800b566:	69ba      	ldr	r2, [r7, #24]
 800b568:	4313      	orrs	r3, r2
 800b56a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b578:	2201      	movs	r2, #1
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	fa02 f303 	lsl.w	r3, r2, r3
 800b580:	43db      	mvns	r3, r3
 800b582:	69ba      	ldr	r2, [r7, #24]
 800b584:	4013      	ands	r3, r2
 800b586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	091b      	lsrs	r3, r3, #4
 800b58e:	f003 0201 	and.w	r2, r3, #1
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	fa02 f303 	lsl.w	r3, r2, r3
 800b598:	69ba      	ldr	r2, [r7, #24]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	f003 0303 	and.w	r3, r3, #3
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d017      	beq.n	800b5e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	2203      	movs	r2, #3
 800b5bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c0:	43db      	mvns	r3, r3
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d4:	69ba      	ldr	r2, [r7, #24]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	69ba      	ldr	r2, [r7, #24]
 800b5de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	f003 0303 	and.w	r3, r3, #3
 800b5e8:	2b02      	cmp	r3, #2
 800b5ea:	d123      	bne.n	800b634 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	08da      	lsrs	r2, r3, #3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3208      	adds	r2, #8
 800b5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	f003 0307 	and.w	r3, r3, #7
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	220f      	movs	r2, #15
 800b604:	fa02 f303 	lsl.w	r3, r2, r3
 800b608:	43db      	mvns	r3, r3
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	4013      	ands	r3, r2
 800b60e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	f003 0307 	and.w	r3, r3, #7
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	fa02 f303 	lsl.w	r3, r2, r3
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	4313      	orrs	r3, r2
 800b624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	08da      	lsrs	r2, r3, #3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	3208      	adds	r2, #8
 800b62e:	69b9      	ldr	r1, [r7, #24]
 800b630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	2203      	movs	r2, #3
 800b640:	fa02 f303 	lsl.w	r3, r2, r3
 800b644:	43db      	mvns	r3, r3
 800b646:	69ba      	ldr	r2, [r7, #24]
 800b648:	4013      	ands	r3, r2
 800b64a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f003 0203 	and.w	r2, r3, #3
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	fa02 f303 	lsl.w	r3, r2, r3
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	4313      	orrs	r3, r2
 800b660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	69ba      	ldr	r2, [r7, #24]
 800b666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 80b2 	beq.w	800b7da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b676:	4b60      	ldr	r3, [pc, #384]	; (800b7f8 <HAL_GPIO_Init+0x30c>)
 800b678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b67a:	4a5f      	ldr	r2, [pc, #380]	; (800b7f8 <HAL_GPIO_Init+0x30c>)
 800b67c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b680:	6453      	str	r3, [r2, #68]	; 0x44
 800b682:	4b5d      	ldr	r3, [pc, #372]	; (800b7f8 <HAL_GPIO_Init+0x30c>)
 800b684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b68a:	60fb      	str	r3, [r7, #12]
 800b68c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b68e:	4a5b      	ldr	r2, [pc, #364]	; (800b7fc <HAL_GPIO_Init+0x310>)
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	089b      	lsrs	r3, r3, #2
 800b694:	3302      	adds	r3, #2
 800b696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b69a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	f003 0303 	and.w	r3, r3, #3
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	220f      	movs	r2, #15
 800b6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6aa:	43db      	mvns	r3, r3
 800b6ac:	69ba      	ldr	r2, [r7, #24]
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a52      	ldr	r2, [pc, #328]	; (800b800 <HAL_GPIO_Init+0x314>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d02b      	beq.n	800b712 <HAL_GPIO_Init+0x226>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a51      	ldr	r2, [pc, #324]	; (800b804 <HAL_GPIO_Init+0x318>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d025      	beq.n	800b70e <HAL_GPIO_Init+0x222>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a50      	ldr	r2, [pc, #320]	; (800b808 <HAL_GPIO_Init+0x31c>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d01f      	beq.n	800b70a <HAL_GPIO_Init+0x21e>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a4f      	ldr	r2, [pc, #316]	; (800b80c <HAL_GPIO_Init+0x320>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d019      	beq.n	800b706 <HAL_GPIO_Init+0x21a>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a4e      	ldr	r2, [pc, #312]	; (800b810 <HAL_GPIO_Init+0x324>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d013      	beq.n	800b702 <HAL_GPIO_Init+0x216>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a4d      	ldr	r2, [pc, #308]	; (800b814 <HAL_GPIO_Init+0x328>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d00d      	beq.n	800b6fe <HAL_GPIO_Init+0x212>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a4c      	ldr	r2, [pc, #304]	; (800b818 <HAL_GPIO_Init+0x32c>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d007      	beq.n	800b6fa <HAL_GPIO_Init+0x20e>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a4b      	ldr	r2, [pc, #300]	; (800b81c <HAL_GPIO_Init+0x330>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d101      	bne.n	800b6f6 <HAL_GPIO_Init+0x20a>
 800b6f2:	2307      	movs	r3, #7
 800b6f4:	e00e      	b.n	800b714 <HAL_GPIO_Init+0x228>
 800b6f6:	2308      	movs	r3, #8
 800b6f8:	e00c      	b.n	800b714 <HAL_GPIO_Init+0x228>
 800b6fa:	2306      	movs	r3, #6
 800b6fc:	e00a      	b.n	800b714 <HAL_GPIO_Init+0x228>
 800b6fe:	2305      	movs	r3, #5
 800b700:	e008      	b.n	800b714 <HAL_GPIO_Init+0x228>
 800b702:	2304      	movs	r3, #4
 800b704:	e006      	b.n	800b714 <HAL_GPIO_Init+0x228>
 800b706:	2303      	movs	r3, #3
 800b708:	e004      	b.n	800b714 <HAL_GPIO_Init+0x228>
 800b70a:	2302      	movs	r3, #2
 800b70c:	e002      	b.n	800b714 <HAL_GPIO_Init+0x228>
 800b70e:	2301      	movs	r3, #1
 800b710:	e000      	b.n	800b714 <HAL_GPIO_Init+0x228>
 800b712:	2300      	movs	r3, #0
 800b714:	69fa      	ldr	r2, [r7, #28]
 800b716:	f002 0203 	and.w	r2, r2, #3
 800b71a:	0092      	lsls	r2, r2, #2
 800b71c:	4093      	lsls	r3, r2
 800b71e:	69ba      	ldr	r2, [r7, #24]
 800b720:	4313      	orrs	r3, r2
 800b722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b724:	4935      	ldr	r1, [pc, #212]	; (800b7fc <HAL_GPIO_Init+0x310>)
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	089b      	lsrs	r3, r3, #2
 800b72a:	3302      	adds	r3, #2
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b732:	4b3b      	ldr	r3, [pc, #236]	; (800b820 <HAL_GPIO_Init+0x334>)
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	43db      	mvns	r3, r3
 800b73c:	69ba      	ldr	r2, [r7, #24]
 800b73e:	4013      	ands	r3, r2
 800b740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b74e:	69ba      	ldr	r2, [r7, #24]
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	4313      	orrs	r3, r2
 800b754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b756:	4a32      	ldr	r2, [pc, #200]	; (800b820 <HAL_GPIO_Init+0x334>)
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b75c:	4b30      	ldr	r3, [pc, #192]	; (800b820 <HAL_GPIO_Init+0x334>)
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	43db      	mvns	r3, r3
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	4013      	ands	r3, r2
 800b76a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d003      	beq.n	800b780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b780:	4a27      	ldr	r2, [pc, #156]	; (800b820 <HAL_GPIO_Init+0x334>)
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b786:	4b26      	ldr	r3, [pc, #152]	; (800b820 <HAL_GPIO_Init+0x334>)
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	43db      	mvns	r3, r3
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	4013      	ands	r3, r2
 800b794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b7a2:	69ba      	ldr	r2, [r7, #24]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b7aa:	4a1d      	ldr	r2, [pc, #116]	; (800b820 <HAL_GPIO_Init+0x334>)
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b7b0:	4b1b      	ldr	r3, [pc, #108]	; (800b820 <HAL_GPIO_Init+0x334>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	43db      	mvns	r3, r3
 800b7ba:	69ba      	ldr	r2, [r7, #24]
 800b7bc:	4013      	ands	r3, r2
 800b7be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b7d4:	4a12      	ldr	r2, [pc, #72]	; (800b820 <HAL_GPIO_Init+0x334>)
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	61fb      	str	r3, [r7, #28]
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	2b0f      	cmp	r3, #15
 800b7e4:	f67f ae92 	bls.w	800b50c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b7e8:	bf00      	nop
 800b7ea:	bf00      	nop
 800b7ec:	3724      	adds	r7, #36	; 0x24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	40023800 	.word	0x40023800
 800b7fc:	40013800 	.word	0x40013800
 800b800:	40020000 	.word	0x40020000
 800b804:	40020400 	.word	0x40020400
 800b808:	40020800 	.word	0x40020800
 800b80c:	40020c00 	.word	0x40020c00
 800b810:	40021000 	.word	0x40021000
 800b814:	40021400 	.word	0x40021400
 800b818:	40021800 	.word	0x40021800
 800b81c:	40021c00 	.word	0x40021c00
 800b820:	40013c00 	.word	0x40013c00

0800b824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	807b      	strh	r3, [r7, #2]
 800b830:	4613      	mov	r3, r2
 800b832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b834:	787b      	ldrb	r3, [r7, #1]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b83a:	887a      	ldrh	r2, [r7, #2]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b840:	e003      	b.n	800b84a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b842:	887b      	ldrh	r3, [r7, #2]
 800b844:	041a      	lsls	r2, r3, #16
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	619a      	str	r2, [r3, #24]
}
 800b84a:	bf00      	nop
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
	...

0800b858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e07f      	b.n	800b96a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7fa fff4 	bl	800686c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2224      	movs	r2, #36	; 0x24
 800b888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f022 0201 	bic.w	r2, r2, #1
 800b89a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b8a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689a      	ldr	r2, [r3, #8]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d107      	bne.n	800b8d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	689a      	ldr	r2, [r3, #8]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8ce:	609a      	str	r2, [r3, #8]
 800b8d0:	e006      	b.n	800b8e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b8de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d104      	bne.n	800b8f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6859      	ldr	r1, [r3, #4]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	4b1d      	ldr	r3, [pc, #116]	; (800b974 <HAL_I2C_Init+0x11c>)
 800b8fe:	430b      	orrs	r3, r1
 800b900:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68da      	ldr	r2, [r3, #12]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b910:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	691a      	ldr	r2, [r3, #16]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	699b      	ldr	r3, [r3, #24]
 800b922:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	430a      	orrs	r2, r1
 800b92a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	69d9      	ldr	r1, [r3, #28]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a1a      	ldr	r2, [r3, #32]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	430a      	orrs	r2, r1
 800b93a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0201 	orr.w	r2, r2, #1
 800b94a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	02008000 	.word	0x02008000

0800b978 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	4608      	mov	r0, r1
 800b982:	4611      	mov	r1, r2
 800b984:	461a      	mov	r2, r3
 800b986:	4603      	mov	r3, r0
 800b988:	817b      	strh	r3, [r7, #10]
 800b98a:	460b      	mov	r3, r1
 800b98c:	813b      	strh	r3, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b20      	cmp	r3, #32
 800b99c:	f040 80f9 	bne.w	800bb92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <HAL_I2C_Mem_Write+0x34>
 800b9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d105      	bne.n	800b9b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e0ed      	b.n	800bb94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d101      	bne.n	800b9c6 <HAL_I2C_Mem_Write+0x4e>
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	e0e6      	b.n	800bb94 <HAL_I2C_Mem_Write+0x21c>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b9ce:	f7ff f871 	bl	800aab4 <HAL_GetTick>
 800b9d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	2319      	movs	r3, #25
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 fac3 	bl	800bf6c <I2C_WaitOnFlagUntilTimeout>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e0d1      	b.n	800bb94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2221      	movs	r2, #33	; 0x21
 800b9f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2240      	movs	r2, #64	; 0x40
 800b9fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6a3a      	ldr	r2, [r7, #32]
 800ba0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ba18:	88f8      	ldrh	r0, [r7, #6]
 800ba1a:	893a      	ldrh	r2, [r7, #8]
 800ba1c:	8979      	ldrh	r1, [r7, #10]
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	4603      	mov	r3, r0
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f000 f9d3 	bl	800bdd4 <I2C_RequestMemoryWrite>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d005      	beq.n	800ba40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e0a9      	b.n	800bb94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	2bff      	cmp	r3, #255	; 0xff
 800ba48:	d90e      	bls.n	800ba68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	22ff      	movs	r2, #255	; 0xff
 800ba4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	8979      	ldrh	r1, [r7, #10]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f000 fc1f 	bl	800c2a4 <I2C_TransferConfig>
 800ba66:	e00f      	b.n	800ba88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	8979      	ldrh	r1, [r7, #10]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fc0e 	bl	800c2a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f000 faad 	bl	800bfec <I2C_WaitOnTXISFlagUntilTimeout>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e07b      	b.n	800bb94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	781a      	ldrb	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	3b01      	subs	r3, #1
 800baba:	b29a      	uxth	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d034      	beq.n	800bb40 <HAL_I2C_Mem_Write+0x1c8>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bada:	2b00      	cmp	r3, #0
 800badc:	d130      	bne.n	800bb40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	2200      	movs	r2, #0
 800bae6:	2180      	movs	r1, #128	; 0x80
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f000 fa3f 	bl	800bf6c <I2C_WaitOnFlagUntilTimeout>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e04d      	b.n	800bb94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	2bff      	cmp	r3, #255	; 0xff
 800bb00:	d90e      	bls.n	800bb20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	22ff      	movs	r2, #255	; 0xff
 800bb06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	8979      	ldrh	r1, [r7, #10]
 800bb10:	2300      	movs	r3, #0
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 fbc3 	bl	800c2a4 <I2C_TransferConfig>
 800bb1e:	e00f      	b.n	800bb40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	8979      	ldrh	r1, [r7, #10]
 800bb32:	2300      	movs	r3, #0
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f000 fbb2 	bl	800c2a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d19e      	bne.n	800ba88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 fa8c 	bl	800c06c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e01a      	b.n	800bb94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2220      	movs	r2, #32
 800bb64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6859      	ldr	r1, [r3, #4]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	4b0a      	ldr	r3, [pc, #40]	; (800bb9c <HAL_I2C_Mem_Write+0x224>)
 800bb72:	400b      	ands	r3, r1
 800bb74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e000      	b.n	800bb94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bb92:	2302      	movs	r3, #2
  }
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	fe00e800 	.word	0xfe00e800

0800bba0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af02      	add	r7, sp, #8
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	461a      	mov	r2, r3
 800bbae:	4603      	mov	r3, r0
 800bbb0:	817b      	strh	r3, [r7, #10]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	813b      	strh	r3, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b20      	cmp	r3, #32
 800bbc4:	f040 80fd 	bne.w	800bdc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <HAL_I2C_Mem_Read+0x34>
 800bbce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d105      	bne.n	800bbe0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e0f1      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d101      	bne.n	800bbee <HAL_I2C_Mem_Read+0x4e>
 800bbea:	2302      	movs	r3, #2
 800bbec:	e0ea      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x224>
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bbf6:	f7fe ff5d 	bl	800aab4 <HAL_GetTick>
 800bbfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	2319      	movs	r3, #25
 800bc02:	2201      	movs	r2, #1
 800bc04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f000 f9af 	bl	800bf6c <I2C_WaitOnFlagUntilTimeout>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e0d5      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2222      	movs	r2, #34	; 0x22
 800bc1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2240      	movs	r2, #64	; 0x40
 800bc24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6a3a      	ldr	r2, [r7, #32]
 800bc32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bc40:	88f8      	ldrh	r0, [r7, #6]
 800bc42:	893a      	ldrh	r2, [r7, #8]
 800bc44:	8979      	ldrh	r1, [r7, #10]
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	4603      	mov	r3, r0
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f000 f913 	bl	800be7c <I2C_RequestMemoryRead>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d005      	beq.n	800bc68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e0ad      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	2bff      	cmp	r3, #255	; 0xff
 800bc70:	d90e      	bls.n	800bc90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	8979      	ldrh	r1, [r7, #10]
 800bc80:	4b52      	ldr	r3, [pc, #328]	; (800bdcc <HAL_I2C_Mem_Read+0x22c>)
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 fb0b 	bl	800c2a4 <I2C_TransferConfig>
 800bc8e:	e00f      	b.n	800bcb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	8979      	ldrh	r1, [r7, #10]
 800bca2:	4b4a      	ldr	r3, [pc, #296]	; (800bdcc <HAL_I2C_Mem_Read+0x22c>)
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 fafa 	bl	800c2a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2104      	movs	r1, #4
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 f956 	bl	800bf6c <I2C_WaitOnFlagUntilTimeout>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e07c      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	b2d2      	uxtb	r2, r2
 800bcd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bce6:	3b01      	subs	r3, #1
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d034      	beq.n	800bd70 <HAL_I2C_Mem_Read+0x1d0>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d130      	bne.n	800bd70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	2200      	movs	r2, #0
 800bd16:	2180      	movs	r1, #128	; 0x80
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f000 f927 	bl	800bf6c <I2C_WaitOnFlagUntilTimeout>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bd24:	2301      	movs	r3, #1
 800bd26:	e04d      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	2bff      	cmp	r3, #255	; 0xff
 800bd30:	d90e      	bls.n	800bd50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	22ff      	movs	r2, #255	; 0xff
 800bd36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	8979      	ldrh	r1, [r7, #10]
 800bd40:	2300      	movs	r3, #0
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f000 faab 	bl	800c2a4 <I2C_TransferConfig>
 800bd4e:	e00f      	b.n	800bd70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	8979      	ldrh	r1, [r7, #10]
 800bd62:	2300      	movs	r3, #0
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f000 fa9a 	bl	800c2a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d19a      	bne.n	800bcb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f000 f974 	bl	800c06c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e01a      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2220      	movs	r2, #32
 800bd94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6859      	ldr	r1, [r3, #4]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <HAL_I2C_Mem_Read+0x230>)
 800bda2:	400b      	ands	r3, r1
 800bda4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	e000      	b.n	800bdc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bdc2:	2302      	movs	r3, #2
  }
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3718      	adds	r7, #24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	80002400 	.word	0x80002400
 800bdd0:	fe00e800 	.word	0xfe00e800

0800bdd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af02      	add	r7, sp, #8
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	4608      	mov	r0, r1
 800bdde:	4611      	mov	r1, r2
 800bde0:	461a      	mov	r2, r3
 800bde2:	4603      	mov	r3, r0
 800bde4:	817b      	strh	r3, [r7, #10]
 800bde6:	460b      	mov	r3, r1
 800bde8:	813b      	strh	r3, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bdee:	88fb      	ldrh	r3, [r7, #6]
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	8979      	ldrh	r1, [r7, #10]
 800bdf4:	4b20      	ldr	r3, [pc, #128]	; (800be78 <I2C_RequestMemoryWrite+0xa4>)
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 fa51 	bl	800c2a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be02:	69fa      	ldr	r2, [r7, #28]
 800be04:	69b9      	ldr	r1, [r7, #24]
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 f8f0 	bl	800bfec <I2C_WaitOnTXISFlagUntilTimeout>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e02c      	b.n	800be70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be16:	88fb      	ldrh	r3, [r7, #6]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d105      	bne.n	800be28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be1c:	893b      	ldrh	r3, [r7, #8]
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	629a      	str	r2, [r3, #40]	; 0x28
 800be26:	e015      	b.n	800be54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be28:	893b      	ldrh	r3, [r7, #8]
 800be2a:	0a1b      	lsrs	r3, r3, #8
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	69b9      	ldr	r1, [r7, #24]
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 f8d6 	bl	800bfec <I2C_WaitOnTXISFlagUntilTimeout>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e012      	b.n	800be70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be4a:	893b      	ldrh	r3, [r7, #8]
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	2200      	movs	r2, #0
 800be5c:	2180      	movs	r1, #128	; 0x80
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f000 f884 	bl	800bf6c <I2C_WaitOnFlagUntilTimeout>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e000      	b.n	800be70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	80002000 	.word	0x80002000

0800be7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af02      	add	r7, sp, #8
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	4608      	mov	r0, r1
 800be86:	4611      	mov	r1, r2
 800be88:	461a      	mov	r2, r3
 800be8a:	4603      	mov	r3, r0
 800be8c:	817b      	strh	r3, [r7, #10]
 800be8e:	460b      	mov	r3, r1
 800be90:	813b      	strh	r3, [r7, #8]
 800be92:	4613      	mov	r3, r2
 800be94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800be96:	88fb      	ldrh	r3, [r7, #6]
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	8979      	ldrh	r1, [r7, #10]
 800be9c:	4b20      	ldr	r3, [pc, #128]	; (800bf20 <I2C_RequestMemoryRead+0xa4>)
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	2300      	movs	r3, #0
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 f9fe 	bl	800c2a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bea8:	69fa      	ldr	r2, [r7, #28]
 800beaa:	69b9      	ldr	r1, [r7, #24]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f000 f89d 	bl	800bfec <I2C_WaitOnTXISFlagUntilTimeout>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d001      	beq.n	800bebc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e02c      	b.n	800bf16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bebc:	88fb      	ldrh	r3, [r7, #6]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d105      	bne.n	800bece <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bec2:	893b      	ldrh	r3, [r7, #8]
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	629a      	str	r2, [r3, #40]	; 0x28
 800becc:	e015      	b.n	800befa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bece:	893b      	ldrh	r3, [r7, #8]
 800bed0:	0a1b      	lsrs	r3, r3, #8
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bedc:	69fa      	ldr	r2, [r7, #28]
 800bede:	69b9      	ldr	r1, [r7, #24]
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f000 f883 	bl	800bfec <I2C_WaitOnTXISFlagUntilTimeout>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	e012      	b.n	800bf16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bef0:	893b      	ldrh	r3, [r7, #8]
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	2200      	movs	r2, #0
 800bf02:	2140      	movs	r1, #64	; 0x40
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 f831 	bl	800bf6c <I2C_WaitOnFlagUntilTimeout>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d001      	beq.n	800bf14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e000      	b.n	800bf16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	80002000 	.word	0x80002000

0800bf24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d103      	bne.n	800bf42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d007      	beq.n	800bf60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	699a      	ldr	r2, [r3, #24]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f042 0201 	orr.w	r2, r2, #1
 800bf5e:	619a      	str	r2, [r3, #24]
  }
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	603b      	str	r3, [r7, #0]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf7c:	e022      	b.n	800bfc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf84:	d01e      	beq.n	800bfc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf86:	f7fe fd95 	bl	800aab4 <HAL_GetTick>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d302      	bcc.n	800bf9c <I2C_WaitOnFlagUntilTimeout+0x30>
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d113      	bne.n	800bfc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa0:	f043 0220 	orr.w	r2, r3, #32
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2220      	movs	r2, #32
 800bfac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e00f      	b.n	800bfe4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	699a      	ldr	r2, [r3, #24]
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	bf0c      	ite	eq
 800bfd4:	2301      	moveq	r3, #1
 800bfd6:	2300      	movne	r3, #0
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	79fb      	ldrb	r3, [r7, #7]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d0cd      	beq.n	800bf7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bff8:	e02c      	b.n	800c054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	68b9      	ldr	r1, [r7, #8]
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f000 f870 	bl	800c0e4 <I2C_IsErrorOccurred>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	e02a      	b.n	800c064 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c014:	d01e      	beq.n	800c054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c016:	f7fe fd4d 	bl	800aab4 <HAL_GetTick>
 800c01a:	4602      	mov	r2, r0
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	429a      	cmp	r2, r3
 800c024:	d302      	bcc.n	800c02c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d113      	bne.n	800c054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c030:	f043 0220 	orr.w	r2, r3, #32
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2220      	movs	r2, #32
 800c03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e007      	b.n	800c064 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d1cb      	bne.n	800bffa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c078:	e028      	b.n	800c0cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	68b9      	ldr	r1, [r7, #8]
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f000 f830 	bl	800c0e4 <I2C_IsErrorOccurred>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e026      	b.n	800c0dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c08e:	f7fe fd11 	bl	800aab4 <HAL_GetTick>
 800c092:	4602      	mov	r2, r0
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	68ba      	ldr	r2, [r7, #8]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d302      	bcc.n	800c0a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d113      	bne.n	800c0cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a8:	f043 0220 	orr.w	r2, r3, #32
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e007      	b.n	800c0dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	f003 0320 	and.w	r3, r3, #32
 800c0d6:	2b20      	cmp	r3, #32
 800c0d8:	d1cf      	bne.n	800c07a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08a      	sub	sp, #40	; 0x28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	699b      	ldr	r3, [r3, #24]
 800c0fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	f003 0310 	and.w	r3, r3, #16
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d068      	beq.n	800c1e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2210      	movs	r2, #16
 800c116:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c118:	e049      	b.n	800c1ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c120:	d045      	beq.n	800c1ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c122:	f7fe fcc7 	bl	800aab4 <HAL_GetTick>
 800c126:	4602      	mov	r2, r0
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d302      	bcc.n	800c138 <I2C_IsErrorOccurred+0x54>
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d13a      	bne.n	800c1ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c142:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c14a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c15a:	d121      	bne.n	800c1a0 <I2C_IsErrorOccurred+0xbc>
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c162:	d01d      	beq.n	800c1a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c164:	7cfb      	ldrb	r3, [r7, #19]
 800c166:	2b20      	cmp	r3, #32
 800c168:	d01a      	beq.n	800c1a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c178:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c17a:	f7fe fc9b 	bl	800aab4 <HAL_GetTick>
 800c17e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c180:	e00e      	b.n	800c1a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c182:	f7fe fc97 	bl	800aab4 <HAL_GetTick>
 800c186:	4602      	mov	r2, r0
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	2b19      	cmp	r3, #25
 800c18e:	d907      	bls.n	800c1a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	f043 0320 	orr.w	r3, r3, #32
 800c196:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c19e:	e006      	b.n	800c1ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	f003 0320 	and.w	r3, r3, #32
 800c1aa:	2b20      	cmp	r3, #32
 800c1ac:	d1e9      	bne.n	800c182 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	f003 0320 	and.w	r3, r3, #32
 800c1b8:	2b20      	cmp	r3, #32
 800c1ba:	d003      	beq.n	800c1c4 <I2C_IsErrorOccurred+0xe0>
 800c1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d0aa      	beq.n	800c11a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	f043 0304 	orr.w	r3, r3, #4
 800c1da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00b      	beq.n	800c20c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	f043 0301 	orr.w	r3, r3, #1
 800c1fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00b      	beq.n	800c22e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c216:	6a3b      	ldr	r3, [r7, #32]
 800c218:	f043 0308 	orr.w	r3, r3, #8
 800c21c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c226:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c238:	6a3b      	ldr	r3, [r7, #32]
 800c23a:	f043 0302 	orr.w	r3, r3, #2
 800c23e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c248:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c254:	2b00      	cmp	r3, #0
 800c256:	d01c      	beq.n	800c292 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f7ff fe63 	bl	800bf24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6859      	ldr	r1, [r3, #4]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	4b0d      	ldr	r3, [pc, #52]	; (800c2a0 <I2C_IsErrorOccurred+0x1bc>)
 800c26a:	400b      	ands	r3, r1
 800c26c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c272:	6a3b      	ldr	r3, [r7, #32]
 800c274:	431a      	orrs	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2220      	movs	r2, #32
 800c27e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c296:	4618      	mov	r0, r3
 800c298:	3728      	adds	r7, #40	; 0x28
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	fe00e800 	.word	0xfe00e800

0800c2a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b087      	sub	sp, #28
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	607b      	str	r3, [r7, #4]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	817b      	strh	r3, [r7, #10]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c2b6:	897b      	ldrh	r3, [r7, #10]
 800c2b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c2bc:	7a7b      	ldrb	r3, [r7, #9]
 800c2be:	041b      	lsls	r3, r3, #16
 800c2c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c2c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	685a      	ldr	r2, [r3, #4]
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	0d5b      	lsrs	r3, r3, #21
 800c2de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c2e2:	4b08      	ldr	r3, [pc, #32]	; (800c304 <I2C_TransferConfig+0x60>)
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	43db      	mvns	r3, r3
 800c2e8:	ea02 0103 	and.w	r1, r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c2f6:	bf00      	nop
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	03ff63ff 	.word	0x03ff63ff

0800c308 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b20      	cmp	r3, #32
 800c31c:	d138      	bne.n	800c390 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c324:	2b01      	cmp	r3, #1
 800c326:	d101      	bne.n	800c32c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c328:	2302      	movs	r3, #2
 800c32a:	e032      	b.n	800c392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2224      	movs	r2, #36	; 0x24
 800c338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f022 0201 	bic.w	r2, r2, #1
 800c34a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c35a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6819      	ldr	r1, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	430a      	orrs	r2, r1
 800c36a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0201 	orr.w	r2, r2, #1
 800c37a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2220      	movs	r2, #32
 800c380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e000      	b.n	800c392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c390:	2302      	movs	r3, #2
  }
}
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b085      	sub	sp, #20
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	2b20      	cmp	r3, #32
 800c3b2:	d139      	bne.n	800c428 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d101      	bne.n	800c3c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e033      	b.n	800c42a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2224      	movs	r2, #36	; 0x24
 800c3ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 0201 	bic.w	r2, r2, #1
 800c3e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c3f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	021b      	lsls	r3, r3, #8
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2220      	movs	r2, #32
 800c418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c424:	2300      	movs	r3, #0
 800c426:	e000      	b.n	800c42a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c428:	2302      	movs	r3, #2
  }
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
	...

0800c438 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c442:	4b23      	ldr	r3, [pc, #140]	; (800c4d0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	4a22      	ldr	r2, [pc, #136]	; (800c4d0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c44c:	6413      	str	r3, [r2, #64]	; 0x40
 800c44e:	4b20      	ldr	r3, [pc, #128]	; (800c4d0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c45a:	4b1e      	ldr	r3, [pc, #120]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a1d      	ldr	r2, [pc, #116]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c464:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c466:	f7fe fb25 	bl	800aab4 <HAL_GetTick>
 800c46a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c46c:	e009      	b.n	800c482 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c46e:	f7fe fb21 	bl	800aab4 <HAL_GetTick>
 800c472:	4602      	mov	r2, r0
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c47c:	d901      	bls.n	800c482 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c47e:	2303      	movs	r3, #3
 800c480:	e022      	b.n	800c4c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c482:	4b14      	ldr	r3, [pc, #80]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c48e:	d1ee      	bne.n	800c46e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c490:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a0f      	ldr	r2, [pc, #60]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c49a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c49c:	f7fe fb0a 	bl	800aab4 <HAL_GetTick>
 800c4a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4a2:	e009      	b.n	800c4b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c4a4:	f7fe fb06 	bl	800aab4 <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4b2:	d901      	bls.n	800c4b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e007      	b.n	800c4c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4b8:	4b06      	ldr	r3, [pc, #24]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4c4:	d1ee      	bne.n	800c4a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	40023800 	.word	0x40023800
 800c4d4:	40007000 	.word	0x40007000

0800c4d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e291      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 8087 	beq.w	800c60a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4fc:	4b96      	ldr	r3, [pc, #600]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f003 030c 	and.w	r3, r3, #12
 800c504:	2b04      	cmp	r3, #4
 800c506:	d00c      	beq.n	800c522 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c508:	4b93      	ldr	r3, [pc, #588]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f003 030c 	and.w	r3, r3, #12
 800c510:	2b08      	cmp	r3, #8
 800c512:	d112      	bne.n	800c53a <HAL_RCC_OscConfig+0x62>
 800c514:	4b90      	ldr	r3, [pc, #576]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c51c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c520:	d10b      	bne.n	800c53a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c522:	4b8d      	ldr	r3, [pc, #564]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d06c      	beq.n	800c608 <HAL_RCC_OscConfig+0x130>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d168      	bne.n	800c608 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e26b      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c542:	d106      	bne.n	800c552 <HAL_RCC_OscConfig+0x7a>
 800c544:	4b84      	ldr	r3, [pc, #528]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a83      	ldr	r2, [pc, #524]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c54a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	e02e      	b.n	800c5b0 <HAL_RCC_OscConfig+0xd8>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10c      	bne.n	800c574 <HAL_RCC_OscConfig+0x9c>
 800c55a:	4b7f      	ldr	r3, [pc, #508]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a7e      	ldr	r2, [pc, #504]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	4b7c      	ldr	r3, [pc, #496]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a7b      	ldr	r2, [pc, #492]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c56c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	e01d      	b.n	800c5b0 <HAL_RCC_OscConfig+0xd8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c57c:	d10c      	bne.n	800c598 <HAL_RCC_OscConfig+0xc0>
 800c57e:	4b76      	ldr	r3, [pc, #472]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a75      	ldr	r2, [pc, #468]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c588:	6013      	str	r3, [r2, #0]
 800c58a:	4b73      	ldr	r3, [pc, #460]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a72      	ldr	r2, [pc, #456]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	e00b      	b.n	800c5b0 <HAL_RCC_OscConfig+0xd8>
 800c598:	4b6f      	ldr	r3, [pc, #444]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a6e      	ldr	r2, [pc, #440]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c59e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	4b6c      	ldr	r3, [pc, #432]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a6b      	ldr	r2, [pc, #428]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c5aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d013      	beq.n	800c5e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b8:	f7fe fa7c 	bl	800aab4 <HAL_GetTick>
 800c5bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5be:	e008      	b.n	800c5d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5c0:	f7fe fa78 	bl	800aab4 <HAL_GetTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	2b64      	cmp	r3, #100	; 0x64
 800c5cc:	d901      	bls.n	800c5d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e21f      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5d2:	4b61      	ldr	r3, [pc, #388]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0f0      	beq.n	800c5c0 <HAL_RCC_OscConfig+0xe8>
 800c5de:	e014      	b.n	800c60a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5e0:	f7fe fa68 	bl	800aab4 <HAL_GetTick>
 800c5e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5e6:	e008      	b.n	800c5fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5e8:	f7fe fa64 	bl	800aab4 <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	2b64      	cmp	r3, #100	; 0x64
 800c5f4:	d901      	bls.n	800c5fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e20b      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5fa:	4b57      	ldr	r3, [pc, #348]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1f0      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x110>
 800c606:	e000      	b.n	800c60a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b00      	cmp	r3, #0
 800c614:	d069      	beq.n	800c6ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c616:	4b50      	ldr	r3, [pc, #320]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f003 030c 	and.w	r3, r3, #12
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00b      	beq.n	800c63a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c622:	4b4d      	ldr	r3, [pc, #308]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	f003 030c 	and.w	r3, r3, #12
 800c62a:	2b08      	cmp	r3, #8
 800c62c:	d11c      	bne.n	800c668 <HAL_RCC_OscConfig+0x190>
 800c62e:	4b4a      	ldr	r3, [pc, #296]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c636:	2b00      	cmp	r3, #0
 800c638:	d116      	bne.n	800c668 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c63a:	4b47      	ldr	r3, [pc, #284]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0302 	and.w	r3, r3, #2
 800c642:	2b00      	cmp	r3, #0
 800c644:	d005      	beq.n	800c652 <HAL_RCC_OscConfig+0x17a>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d001      	beq.n	800c652 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	e1df      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c652:	4b41      	ldr	r3, [pc, #260]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	493d      	ldr	r1, [pc, #244]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c662:	4313      	orrs	r3, r2
 800c664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c666:	e040      	b.n	800c6ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d023      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c670:	4b39      	ldr	r3, [pc, #228]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a38      	ldr	r2, [pc, #224]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c676:	f043 0301 	orr.w	r3, r3, #1
 800c67a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c67c:	f7fe fa1a 	bl	800aab4 <HAL_GetTick>
 800c680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c682:	e008      	b.n	800c696 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c684:	f7fe fa16 	bl	800aab4 <HAL_GetTick>
 800c688:	4602      	mov	r2, r0
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d901      	bls.n	800c696 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e1bd      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c696:	4b30      	ldr	r3, [pc, #192]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0302 	and.w	r3, r3, #2
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d0f0      	beq.n	800c684 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6a2:	4b2d      	ldr	r3, [pc, #180]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	4929      	ldr	r1, [pc, #164]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	600b      	str	r3, [r1, #0]
 800c6b6:	e018      	b.n	800c6ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c6b8:	4b27      	ldr	r3, [pc, #156]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a26      	ldr	r2, [pc, #152]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6be:	f023 0301 	bic.w	r3, r3, #1
 800c6c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6c4:	f7fe f9f6 	bl	800aab4 <HAL_GetTick>
 800c6c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6ca:	e008      	b.n	800c6de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6cc:	f7fe f9f2 	bl	800aab4 <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d901      	bls.n	800c6de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e199      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6de:	4b1e      	ldr	r3, [pc, #120]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 0302 	and.w	r3, r3, #2
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1f0      	bne.n	800c6cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 0308 	and.w	r3, r3, #8
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d038      	beq.n	800c768 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d019      	beq.n	800c732 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c6fe:	4b16      	ldr	r3, [pc, #88]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c702:	4a15      	ldr	r2, [pc, #84]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c704:	f043 0301 	orr.w	r3, r3, #1
 800c708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c70a:	f7fe f9d3 	bl	800aab4 <HAL_GetTick>
 800c70e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c710:	e008      	b.n	800c724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c712:	f7fe f9cf 	bl	800aab4 <HAL_GetTick>
 800c716:	4602      	mov	r2, r0
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d901      	bls.n	800c724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c720:	2303      	movs	r3, #3
 800c722:	e176      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c724:	4b0c      	ldr	r3, [pc, #48]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c728:	f003 0302 	and.w	r3, r3, #2
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d0f0      	beq.n	800c712 <HAL_RCC_OscConfig+0x23a>
 800c730:	e01a      	b.n	800c768 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c732:	4b09      	ldr	r3, [pc, #36]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c736:	4a08      	ldr	r2, [pc, #32]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c738:	f023 0301 	bic.w	r3, r3, #1
 800c73c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c73e:	f7fe f9b9 	bl	800aab4 <HAL_GetTick>
 800c742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c744:	e00a      	b.n	800c75c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c746:	f7fe f9b5 	bl	800aab4 <HAL_GetTick>
 800c74a:	4602      	mov	r2, r0
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	2b02      	cmp	r3, #2
 800c752:	d903      	bls.n	800c75c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c754:	2303      	movs	r3, #3
 800c756:	e15c      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
 800c758:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c75c:	4b91      	ldr	r3, [pc, #580]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c75e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c760:	f003 0302 	and.w	r3, r3, #2
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1ee      	bne.n	800c746 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 80a4 	beq.w	800c8be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c776:	4b8b      	ldr	r3, [pc, #556]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10d      	bne.n	800c79e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c782:	4b88      	ldr	r3, [pc, #544]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c786:	4a87      	ldr	r2, [pc, #540]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c78c:	6413      	str	r3, [r2, #64]	; 0x40
 800c78e:	4b85      	ldr	r3, [pc, #532]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c796:	60bb      	str	r3, [r7, #8]
 800c798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c79a:	2301      	movs	r3, #1
 800c79c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c79e:	4b82      	ldr	r3, [pc, #520]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d118      	bne.n	800c7dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c7aa:	4b7f      	ldr	r3, [pc, #508]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a7e      	ldr	r2, [pc, #504]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c7b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c7b6:	f7fe f97d 	bl	800aab4 <HAL_GetTick>
 800c7ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7bc:	e008      	b.n	800c7d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7be:	f7fe f979 	bl	800aab4 <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	2b64      	cmp	r3, #100	; 0x64
 800c7ca:	d901      	bls.n	800c7d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e120      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7d0:	4b75      	ldr	r3, [pc, #468]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0f0      	beq.n	800c7be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d106      	bne.n	800c7f2 <HAL_RCC_OscConfig+0x31a>
 800c7e4:	4b6f      	ldr	r3, [pc, #444]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e8:	4a6e      	ldr	r2, [pc, #440]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c7ea:	f043 0301 	orr.w	r3, r3, #1
 800c7ee:	6713      	str	r3, [r2, #112]	; 0x70
 800c7f0:	e02d      	b.n	800c84e <HAL_RCC_OscConfig+0x376>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10c      	bne.n	800c814 <HAL_RCC_OscConfig+0x33c>
 800c7fa:	4b6a      	ldr	r3, [pc, #424]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7fe:	4a69      	ldr	r2, [pc, #420]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c800:	f023 0301 	bic.w	r3, r3, #1
 800c804:	6713      	str	r3, [r2, #112]	; 0x70
 800c806:	4b67      	ldr	r3, [pc, #412]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c80a:	4a66      	ldr	r2, [pc, #408]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c80c:	f023 0304 	bic.w	r3, r3, #4
 800c810:	6713      	str	r3, [r2, #112]	; 0x70
 800c812:	e01c      	b.n	800c84e <HAL_RCC_OscConfig+0x376>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	2b05      	cmp	r3, #5
 800c81a:	d10c      	bne.n	800c836 <HAL_RCC_OscConfig+0x35e>
 800c81c:	4b61      	ldr	r3, [pc, #388]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c820:	4a60      	ldr	r2, [pc, #384]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c822:	f043 0304 	orr.w	r3, r3, #4
 800c826:	6713      	str	r3, [r2, #112]	; 0x70
 800c828:	4b5e      	ldr	r3, [pc, #376]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c82a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82c:	4a5d      	ldr	r2, [pc, #372]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c82e:	f043 0301 	orr.w	r3, r3, #1
 800c832:	6713      	str	r3, [r2, #112]	; 0x70
 800c834:	e00b      	b.n	800c84e <HAL_RCC_OscConfig+0x376>
 800c836:	4b5b      	ldr	r3, [pc, #364]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c83a:	4a5a      	ldr	r2, [pc, #360]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c83c:	f023 0301 	bic.w	r3, r3, #1
 800c840:	6713      	str	r3, [r2, #112]	; 0x70
 800c842:	4b58      	ldr	r3, [pc, #352]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c846:	4a57      	ldr	r2, [pc, #348]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c848:	f023 0304 	bic.w	r3, r3, #4
 800c84c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d015      	beq.n	800c882 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c856:	f7fe f92d 	bl	800aab4 <HAL_GetTick>
 800c85a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c85c:	e00a      	b.n	800c874 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c85e:	f7fe f929 	bl	800aab4 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	f241 3288 	movw	r2, #5000	; 0x1388
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d901      	bls.n	800c874 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e0ce      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c874:	4b4b      	ldr	r3, [pc, #300]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c878:	f003 0302 	and.w	r3, r3, #2
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d0ee      	beq.n	800c85e <HAL_RCC_OscConfig+0x386>
 800c880:	e014      	b.n	800c8ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c882:	f7fe f917 	bl	800aab4 <HAL_GetTick>
 800c886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c888:	e00a      	b.n	800c8a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c88a:	f7fe f913 	bl	800aab4 <HAL_GetTick>
 800c88e:	4602      	mov	r2, r0
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	f241 3288 	movw	r2, #5000	; 0x1388
 800c898:	4293      	cmp	r3, r2
 800c89a:	d901      	bls.n	800c8a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c89c:	2303      	movs	r3, #3
 800c89e:	e0b8      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8a0:	4b40      	ldr	r3, [pc, #256]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a4:	f003 0302 	and.w	r3, r3, #2
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1ee      	bne.n	800c88a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d105      	bne.n	800c8be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8b2:	4b3c      	ldr	r3, [pc, #240]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b6:	4a3b      	ldr	r2, [pc, #236]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c8b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 80a4 	beq.w	800ca10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c8c8:	4b36      	ldr	r3, [pc, #216]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	f003 030c 	and.w	r3, r3, #12
 800c8d0:	2b08      	cmp	r3, #8
 800c8d2:	d06b      	beq.n	800c9ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d149      	bne.n	800c970 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8dc:	4b31      	ldr	r3, [pc, #196]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a30      	ldr	r2, [pc, #192]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c8e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8e8:	f7fe f8e4 	bl	800aab4 <HAL_GetTick>
 800c8ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8ee:	e008      	b.n	800c902 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8f0:	f7fe f8e0 	bl	800aab4 <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d901      	bls.n	800c902 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c8fe:	2303      	movs	r3, #3
 800c900:	e087      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c902:	4b28      	ldr	r3, [pc, #160]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1f0      	bne.n	800c8f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	69da      	ldr	r2, [r3, #28]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	431a      	orrs	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91c:	019b      	lsls	r3, r3, #6
 800c91e:	431a      	orrs	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c924:	085b      	lsrs	r3, r3, #1
 800c926:	3b01      	subs	r3, #1
 800c928:	041b      	lsls	r3, r3, #16
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c930:	061b      	lsls	r3, r3, #24
 800c932:	4313      	orrs	r3, r2
 800c934:	4a1b      	ldr	r2, [pc, #108]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c93a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c93c:	4b19      	ldr	r3, [pc, #100]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a18      	ldr	r2, [pc, #96]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c948:	f7fe f8b4 	bl	800aab4 <HAL_GetTick>
 800c94c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c94e:	e008      	b.n	800c962 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c950:	f7fe f8b0 	bl	800aab4 <HAL_GetTick>
 800c954:	4602      	mov	r2, r0
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d901      	bls.n	800c962 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c95e:	2303      	movs	r3, #3
 800c960:	e057      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c962:	4b10      	ldr	r3, [pc, #64]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d0f0      	beq.n	800c950 <HAL_RCC_OscConfig+0x478>
 800c96e:	e04f      	b.n	800ca10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c970:	4b0c      	ldr	r3, [pc, #48]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a0b      	ldr	r2, [pc, #44]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c97a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c97c:	f7fe f89a 	bl	800aab4 <HAL_GetTick>
 800c980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c982:	e008      	b.n	800c996 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c984:	f7fe f896 	bl	800aab4 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d901      	bls.n	800c996 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e03d      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c996:	4b03      	ldr	r3, [pc, #12]	; (800c9a4 <HAL_RCC_OscConfig+0x4cc>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1f0      	bne.n	800c984 <HAL_RCC_OscConfig+0x4ac>
 800c9a2:	e035      	b.n	800ca10 <HAL_RCC_OscConfig+0x538>
 800c9a4:	40023800 	.word	0x40023800
 800c9a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ca1c <HAL_RCC_OscConfig+0x544>)
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	699b      	ldr	r3, [r3, #24]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d028      	beq.n	800ca0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d121      	bne.n	800ca0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d11a      	bne.n	800ca0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c9dc:	4013      	ands	r3, r2
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c9e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d111      	bne.n	800ca0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f2:	085b      	lsrs	r3, r3, #1
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d107      	bne.n	800ca0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d001      	beq.n	800ca10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e000      	b.n	800ca12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	40023800 	.word	0x40023800

0800ca20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	e0d0      	b.n	800cbda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca38:	4b6a      	ldr	r3, [pc, #424]	; (800cbe4 <HAL_RCC_ClockConfig+0x1c4>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 030f 	and.w	r3, r3, #15
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d910      	bls.n	800ca68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca46:	4b67      	ldr	r3, [pc, #412]	; (800cbe4 <HAL_RCC_ClockConfig+0x1c4>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f023 020f 	bic.w	r2, r3, #15
 800ca4e:	4965      	ldr	r1, [pc, #404]	; (800cbe4 <HAL_RCC_ClockConfig+0x1c4>)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca56:	4b63      	ldr	r3, [pc, #396]	; (800cbe4 <HAL_RCC_ClockConfig+0x1c4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f003 030f 	and.w	r3, r3, #15
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d001      	beq.n	800ca68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ca64:	2301      	movs	r3, #1
 800ca66:	e0b8      	b.n	800cbda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d020      	beq.n	800cab6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 0304 	and.w	r3, r3, #4
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d005      	beq.n	800ca8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca80:	4b59      	ldr	r3, [pc, #356]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	4a58      	ldr	r2, [pc, #352]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ca8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 0308 	and.w	r3, r3, #8
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d005      	beq.n	800caa4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ca98:	4b53      	ldr	r3, [pc, #332]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	4a52      	ldr	r2, [pc, #328]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800ca9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800caa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800caa4:	4b50      	ldr	r3, [pc, #320]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	494d      	ldr	r1, [pc, #308]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cab2:	4313      	orrs	r3, r2
 800cab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d040      	beq.n	800cb44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d107      	bne.n	800cada <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800caca:	4b47      	ldr	r3, [pc, #284]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d115      	bne.n	800cb02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e07f      	b.n	800cbda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d107      	bne.n	800caf2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cae2:	4b41      	ldr	r3, [pc, #260]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caea:	2b00      	cmp	r3, #0
 800caec:	d109      	bne.n	800cb02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	e073      	b.n	800cbda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800caf2:	4b3d      	ldr	r3, [pc, #244]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e06b      	b.n	800cbda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb02:	4b39      	ldr	r3, [pc, #228]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	f023 0203 	bic.w	r2, r3, #3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	4936      	ldr	r1, [pc, #216]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb10:	4313      	orrs	r3, r2
 800cb12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb14:	f7fd ffce 	bl	800aab4 <HAL_GetTick>
 800cb18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb1a:	e00a      	b.n	800cb32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb1c:	f7fd ffca 	bl	800aab4 <HAL_GetTick>
 800cb20:	4602      	mov	r2, r0
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d901      	bls.n	800cb32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	e053      	b.n	800cbda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb32:	4b2d      	ldr	r3, [pc, #180]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f003 020c 	and.w	r2, r3, #12
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d1eb      	bne.n	800cb1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb44:	4b27      	ldr	r3, [pc, #156]	; (800cbe4 <HAL_RCC_ClockConfig+0x1c4>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 030f 	and.w	r3, r3, #15
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d210      	bcs.n	800cb74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb52:	4b24      	ldr	r3, [pc, #144]	; (800cbe4 <HAL_RCC_ClockConfig+0x1c4>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f023 020f 	bic.w	r2, r3, #15
 800cb5a:	4922      	ldr	r1, [pc, #136]	; (800cbe4 <HAL_RCC_ClockConfig+0x1c4>)
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb62:	4b20      	ldr	r3, [pc, #128]	; (800cbe4 <HAL_RCC_ClockConfig+0x1c4>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f003 030f 	and.w	r3, r3, #15
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d001      	beq.n	800cb74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e032      	b.n	800cbda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 0304 	and.w	r3, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d008      	beq.n	800cb92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb80:	4b19      	ldr	r3, [pc, #100]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	4916      	ldr	r1, [pc, #88]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 0308 	and.w	r3, r3, #8
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d009      	beq.n	800cbb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cb9e:	4b12      	ldr	r3, [pc, #72]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	490e      	ldr	r1, [pc, #56]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cbb2:	f000 f821 	bl	800cbf8 <HAL_RCC_GetSysClockFreq>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <HAL_RCC_ClockConfig+0x1c8>)
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	091b      	lsrs	r3, r3, #4
 800cbbe:	f003 030f 	and.w	r3, r3, #15
 800cbc2:	490a      	ldr	r1, [pc, #40]	; (800cbec <HAL_RCC_ClockConfig+0x1cc>)
 800cbc4:	5ccb      	ldrb	r3, [r1, r3]
 800cbc6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbca:	4a09      	ldr	r2, [pc, #36]	; (800cbf0 <HAL_RCC_ClockConfig+0x1d0>)
 800cbcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cbce:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <HAL_RCC_ClockConfig+0x1d4>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fa f8f2 	bl	8006dbc <HAL_InitTick>

  return HAL_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	40023c00 	.word	0x40023c00
 800cbe8:	40023800 	.word	0x40023800
 800cbec:	0801c018 	.word	0x0801c018
 800cbf0:	20000008 	.word	0x20000008
 800cbf4:	2000000c 	.word	0x2000000c

0800cbf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cbf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbfc:	b090      	sub	sp, #64	; 0x40
 800cbfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	637b      	str	r3, [r7, #52]	; 0x34
 800cc04:	2300      	movs	r3, #0
 800cc06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc08:	2300      	movs	r3, #0
 800cc0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cc10:	4b59      	ldr	r3, [pc, #356]	; (800cd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	f003 030c 	and.w	r3, r3, #12
 800cc18:	2b08      	cmp	r3, #8
 800cc1a:	d00d      	beq.n	800cc38 <HAL_RCC_GetSysClockFreq+0x40>
 800cc1c:	2b08      	cmp	r3, #8
 800cc1e:	f200 80a1 	bhi.w	800cd64 <HAL_RCC_GetSysClockFreq+0x16c>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <HAL_RCC_GetSysClockFreq+0x34>
 800cc26:	2b04      	cmp	r3, #4
 800cc28:	d003      	beq.n	800cc32 <HAL_RCC_GetSysClockFreq+0x3a>
 800cc2a:	e09b      	b.n	800cd64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cc2c:	4b53      	ldr	r3, [pc, #332]	; (800cd7c <HAL_RCC_GetSysClockFreq+0x184>)
 800cc2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cc30:	e09b      	b.n	800cd6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cc32:	4b53      	ldr	r3, [pc, #332]	; (800cd80 <HAL_RCC_GetSysClockFreq+0x188>)
 800cc34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cc36:	e098      	b.n	800cd6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cc38:	4b4f      	ldr	r3, [pc, #316]	; (800cd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc40:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cc42:	4b4d      	ldr	r3, [pc, #308]	; (800cd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d028      	beq.n	800cca0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cc4e:	4b4a      	ldr	r3, [pc, #296]	; (800cd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	099b      	lsrs	r3, r3, #6
 800cc54:	2200      	movs	r2, #0
 800cc56:	623b      	str	r3, [r7, #32]
 800cc58:	627a      	str	r2, [r7, #36]	; 0x24
 800cc5a:	6a3b      	ldr	r3, [r7, #32]
 800cc5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800cc60:	2100      	movs	r1, #0
 800cc62:	4b47      	ldr	r3, [pc, #284]	; (800cd80 <HAL_RCC_GetSysClockFreq+0x188>)
 800cc64:	fb03 f201 	mul.w	r2, r3, r1
 800cc68:	2300      	movs	r3, #0
 800cc6a:	fb00 f303 	mul.w	r3, r0, r3
 800cc6e:	4413      	add	r3, r2
 800cc70:	4a43      	ldr	r2, [pc, #268]	; (800cd80 <HAL_RCC_GetSysClockFreq+0x188>)
 800cc72:	fba0 1202 	umull	r1, r2, r0, r2
 800cc76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc78:	460a      	mov	r2, r1
 800cc7a:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc7e:	4413      	add	r3, r2
 800cc80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc84:	2200      	movs	r2, #0
 800cc86:	61bb      	str	r3, [r7, #24]
 800cc88:	61fa      	str	r2, [r7, #28]
 800cc8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cc92:	f7f4 f871 	bl	8000d78 <__aeabi_uldivmod>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc9e:	e053      	b.n	800cd48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cca0:	4b35      	ldr	r3, [pc, #212]	; (800cd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	099b      	lsrs	r3, r3, #6
 800cca6:	2200      	movs	r2, #0
 800cca8:	613b      	str	r3, [r7, #16]
 800ccaa:	617a      	str	r2, [r7, #20]
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ccb2:	f04f 0b00 	mov.w	fp, #0
 800ccb6:	4652      	mov	r2, sl
 800ccb8:	465b      	mov	r3, fp
 800ccba:	f04f 0000 	mov.w	r0, #0
 800ccbe:	f04f 0100 	mov.w	r1, #0
 800ccc2:	0159      	lsls	r1, r3, #5
 800ccc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ccc8:	0150      	lsls	r0, r2, #5
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	ebb2 080a 	subs.w	r8, r2, sl
 800ccd2:	eb63 090b 	sbc.w	r9, r3, fp
 800ccd6:	f04f 0200 	mov.w	r2, #0
 800ccda:	f04f 0300 	mov.w	r3, #0
 800ccde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800cce2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800cce6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ccea:	ebb2 0408 	subs.w	r4, r2, r8
 800ccee:	eb63 0509 	sbc.w	r5, r3, r9
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	f04f 0300 	mov.w	r3, #0
 800ccfa:	00eb      	lsls	r3, r5, #3
 800ccfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd00:	00e2      	lsls	r2, r4, #3
 800cd02:	4614      	mov	r4, r2
 800cd04:	461d      	mov	r5, r3
 800cd06:	eb14 030a 	adds.w	r3, r4, sl
 800cd0a:	603b      	str	r3, [r7, #0]
 800cd0c:	eb45 030b 	adc.w	r3, r5, fp
 800cd10:	607b      	str	r3, [r7, #4]
 800cd12:	f04f 0200 	mov.w	r2, #0
 800cd16:	f04f 0300 	mov.w	r3, #0
 800cd1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cd1e:	4629      	mov	r1, r5
 800cd20:	028b      	lsls	r3, r1, #10
 800cd22:	4621      	mov	r1, r4
 800cd24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cd28:	4621      	mov	r1, r4
 800cd2a:	028a      	lsls	r2, r1, #10
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4619      	mov	r1, r3
 800cd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd32:	2200      	movs	r2, #0
 800cd34:	60bb      	str	r3, [r7, #8]
 800cd36:	60fa      	str	r2, [r7, #12]
 800cd38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd3c:	f7f4 f81c 	bl	8000d78 <__aeabi_uldivmod>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4613      	mov	r3, r2
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cd48:	4b0b      	ldr	r3, [pc, #44]	; (800cd78 <HAL_RCC_GetSysClockFreq+0x180>)
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	0c1b      	lsrs	r3, r3, #16
 800cd4e:	f003 0303 	and.w	r3, r3, #3
 800cd52:	3301      	adds	r3, #1
 800cd54:	005b      	lsls	r3, r3, #1
 800cd56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800cd58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cd62:	e002      	b.n	800cd6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cd64:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <HAL_RCC_GetSysClockFreq+0x184>)
 800cd66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800cd68:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3740      	adds	r7, #64	; 0x40
 800cd70:	46bd      	mov	sp, r7
 800cd72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd76:	bf00      	nop
 800cd78:	40023800 	.word	0x40023800
 800cd7c:	00f42400 	.word	0x00f42400
 800cd80:	017d7840 	.word	0x017d7840

0800cd84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd84:	b480      	push	{r7}
 800cd86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cd88:	4b03      	ldr	r3, [pc, #12]	; (800cd98 <HAL_RCC_GetHCLKFreq+0x14>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop
 800cd98:	20000008 	.word	0x20000008

0800cd9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cda0:	f7ff fff0 	bl	800cd84 <HAL_RCC_GetHCLKFreq>
 800cda4:	4602      	mov	r2, r0
 800cda6:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <HAL_RCC_GetPCLK1Freq+0x20>)
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	0a9b      	lsrs	r3, r3, #10
 800cdac:	f003 0307 	and.w	r3, r3, #7
 800cdb0:	4903      	ldr	r1, [pc, #12]	; (800cdc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cdb2:	5ccb      	ldrb	r3, [r1, r3]
 800cdb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	40023800 	.word	0x40023800
 800cdc0:	0801c028 	.word	0x0801c028

0800cdc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cdc8:	f7ff ffdc 	bl	800cd84 <HAL_RCC_GetHCLKFreq>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	0b5b      	lsrs	r3, r3, #13
 800cdd4:	f003 0307 	and.w	r3, r3, #7
 800cdd8:	4903      	ldr	r1, [pc, #12]	; (800cde8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cdda:	5ccb      	ldrb	r3, [r1, r3]
 800cddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	40023800 	.word	0x40023800
 800cde8:	0801c028 	.word	0x0801c028

0800cdec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	220f      	movs	r2, #15
 800cdfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cdfc:	4b12      	ldr	r3, [pc, #72]	; (800ce48 <HAL_RCC_GetClockConfig+0x5c>)
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	f003 0203 	and.w	r2, r3, #3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ce08:	4b0f      	ldr	r3, [pc, #60]	; (800ce48 <HAL_RCC_GetClockConfig+0x5c>)
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ce14:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <HAL_RCC_GetClockConfig+0x5c>)
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ce20:	4b09      	ldr	r3, [pc, #36]	; (800ce48 <HAL_RCC_GetClockConfig+0x5c>)
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	08db      	lsrs	r3, r3, #3
 800ce26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ce2e:	4b07      	ldr	r3, [pc, #28]	; (800ce4c <HAL_RCC_GetClockConfig+0x60>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 020f 	and.w	r2, r3, #15
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	601a      	str	r2, [r3, #0]
}
 800ce3a:	bf00      	nop
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	40023800 	.word	0x40023800
 800ce4c:	40023c00 	.word	0x40023c00

0800ce50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ce64:	2300      	movs	r3, #0
 800ce66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 0301 	and.w	r3, r3, #1
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d012      	beq.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ce74:	4b65      	ldr	r3, [pc, #404]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	4a64      	ldr	r2, [pc, #400]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ce7e:	6093      	str	r3, [r2, #8]
 800ce80:	4b62      	ldr	r3, [pc, #392]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce82:	689a      	ldr	r2, [r3, #8]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce88:	4960      	ldr	r1, [pc, #384]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800ce96:	2301      	movs	r3, #1
 800ce98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d017      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cea6:	4b59      	ldr	r3, [pc, #356]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ceac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceb4:	4955      	ldr	r1, [pc, #340]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cec4:	d101      	bne.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800cec6:	2301      	movs	r3, #1
 800cec8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800ced2:	2301      	movs	r3, #1
 800ced4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d017      	beq.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cee2:	4b4a      	ldr	r3, [pc, #296]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cee8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef0:	4946      	ldr	r1, [pc, #280]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cef2:	4313      	orrs	r3, r2
 800cef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf00:	d101      	bne.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800cf02:	2301      	movs	r3, #1
 800cf04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d101      	bne.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f003 0320 	and.w	r3, r3, #32
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 808b 	beq.w	800d036 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf20:	4b3a      	ldr	r3, [pc, #232]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf24:	4a39      	ldr	r2, [pc, #228]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf2a:	6413      	str	r3, [r2, #64]	; 0x40
 800cf2c:	4b37      	ldr	r3, [pc, #220]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf34:	60fb      	str	r3, [r7, #12]
 800cf36:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cf38:	4b35      	ldr	r3, [pc, #212]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a34      	ldr	r2, [pc, #208]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cf3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf44:	f7fd fdb6 	bl	800aab4 <HAL_GetTick>
 800cf48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cf4a:	e008      	b.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf4c:	f7fd fdb2 	bl	800aab4 <HAL_GetTick>
 800cf50:	4602      	mov	r2, r0
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	2b64      	cmp	r3, #100	; 0x64
 800cf58:	d901      	bls.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e2bc      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cf5e:	4b2c      	ldr	r3, [pc, #176]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0f0      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cf6a:	4b28      	ldr	r3, [pc, #160]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d035      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d02e      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cf88:	4b20      	ldr	r3, [pc, #128]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cf92:	4b1e      	ldr	r3, [pc, #120]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf96:	4a1d      	ldr	r2, [pc, #116]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cf98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cf9e:	4b1b      	ldr	r3, [pc, #108]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa2:	4a1a      	ldr	r2, [pc, #104]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cfa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cfaa:	4a18      	ldr	r2, [pc, #96]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cfb0:	4b16      	ldr	r3, [pc, #88]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d114      	bne.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfbc:	f7fd fd7a 	bl	800aab4 <HAL_GetTick>
 800cfc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfc2:	e00a      	b.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfc4:	f7fd fd76 	bl	800aab4 <HAL_GetTick>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d901      	bls.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	e27e      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfda:	4b0c      	ldr	r3, [pc, #48]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfde:	f003 0302 	and.w	r3, r3, #2
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d0ee      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cff2:	d111      	bne.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800cff4:	4b05      	ldr	r3, [pc, #20]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d000:	4b04      	ldr	r3, [pc, #16]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800d002:	400b      	ands	r3, r1
 800d004:	4901      	ldr	r1, [pc, #4]	; (800d00c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800d006:	4313      	orrs	r3, r2
 800d008:	608b      	str	r3, [r1, #8]
 800d00a:	e00b      	b.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800d00c:	40023800 	.word	0x40023800
 800d010:	40007000 	.word	0x40007000
 800d014:	0ffffcff 	.word	0x0ffffcff
 800d018:	4ba4      	ldr	r3, [pc, #656]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	4aa3      	ldr	r2, [pc, #652]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d01e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d022:	6093      	str	r3, [r2, #8]
 800d024:	4ba1      	ldr	r3, [pc, #644]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d02c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d030:	499e      	ldr	r1, [pc, #632]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d032:	4313      	orrs	r3, r2
 800d034:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 0310 	and.w	r3, r3, #16
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d010      	beq.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d042:	4b9a      	ldr	r3, [pc, #616]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d048:	4a98      	ldr	r2, [pc, #608]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d04a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d04e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d052:	4b96      	ldr	r3, [pc, #600]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d054:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05c:	4993      	ldr	r1, [pc, #588]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d05e:	4313      	orrs	r3, r2
 800d060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00a      	beq.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d070:	4b8e      	ldr	r3, [pc, #568]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d076:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d07e:	498b      	ldr	r1, [pc, #556]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d080:	4313      	orrs	r3, r2
 800d082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00a      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d092:	4b86      	ldr	r3, [pc, #536]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0a0:	4982      	ldr	r1, [pc, #520]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00a      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d0b4:	4b7d      	ldr	r3, [pc, #500]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0c2:	497a      	ldr	r1, [pc, #488]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00a      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d0d6:	4b75      	ldr	r3, [pc, #468]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0dc:	f023 0203 	bic.w	r2, r3, #3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e4:	4971      	ldr	r1, [pc, #452]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00a      	beq.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d0f8:	4b6c      	ldr	r3, [pc, #432]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0fe:	f023 020c 	bic.w	r2, r3, #12
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	4969      	ldr	r1, [pc, #420]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d108:	4313      	orrs	r3, r2
 800d10a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00a      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d11a:	4b64      	ldr	r3, [pc, #400]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d120:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d128:	4960      	ldr	r1, [pc, #384]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d12a:	4313      	orrs	r3, r2
 800d12c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00a      	beq.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d13c:	4b5b      	ldr	r3, [pc, #364]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d142:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d14a:	4958      	ldr	r1, [pc, #352]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d14c:	4313      	orrs	r3, r2
 800d14e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00a      	beq.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d15e:	4b53      	ldr	r3, [pc, #332]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d16c:	494f      	ldr	r1, [pc, #316]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d16e:	4313      	orrs	r3, r2
 800d170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00a      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d180:	4b4a      	ldr	r3, [pc, #296]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d186:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d18e:	4947      	ldr	r1, [pc, #284]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d190:	4313      	orrs	r3, r2
 800d192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00a      	beq.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d1a2:	4b42      	ldr	r3, [pc, #264]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1b0:	493e      	ldr	r1, [pc, #248]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00a      	beq.n	800d1da <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d1c4:	4b39      	ldr	r3, [pc, #228]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1d2:	4936      	ldr	r1, [pc, #216]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d011      	beq.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d1e6:	4b31      	ldr	r3, [pc, #196]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1f4:	492d      	ldr	r1, [pc, #180]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d204:	d101      	bne.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800d206:	2301      	movs	r3, #1
 800d208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d216:	4b25      	ldr	r3, [pc, #148]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d21c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d224:	4921      	ldr	r1, [pc, #132]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d226:	4313      	orrs	r3, r2
 800d228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00a      	beq.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d238:	4b1c      	ldr	r3, [pc, #112]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d23e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d246:	4919      	ldr	r1, [pc, #100]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d248:	4313      	orrs	r3, r2
 800d24a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d25a:	4b14      	ldr	r3, [pc, #80]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d260:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d268:	4910      	ldr	r1, [pc, #64]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d26a:	4313      	orrs	r3, r2
 800d26c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	2b01      	cmp	r3, #1
 800d274:	d006      	beq.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 809d 	beq.w	800d3be <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d284:	4b09      	ldr	r3, [pc, #36]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a08      	ldr	r2, [pc, #32]	; (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800d28a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d28e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d290:	f7fd fc10 	bl	800aab4 <HAL_GetTick>
 800d294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d296:	e00b      	b.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d298:	f7fd fc0c 	bl	800aab4 <HAL_GetTick>
 800d29c:	4602      	mov	r2, r0
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	2b64      	cmp	r3, #100	; 0x64
 800d2a4:	d904      	bls.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	e116      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800d2aa:	bf00      	nop
 800d2ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d2b0:	4b8b      	ldr	r3, [pc, #556]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1ed      	bne.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d017      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d113      	bne.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d2d0:	4b83      	ldr	r3, [pc, #524]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2d6:	0e1b      	lsrs	r3, r3, #24
 800d2d8:	f003 030f 	and.w	r3, r3, #15
 800d2dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	019a      	lsls	r2, r3, #6
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	061b      	lsls	r3, r3, #24
 800d2e8:	431a      	orrs	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	071b      	lsls	r3, r3, #28
 800d2f0:	497b      	ldr	r1, [pc, #492]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d300:	2b00      	cmp	r3, #0
 800d302:	d004      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d30c:	d00a      	beq.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d316:	2b00      	cmp	r3, #0
 800d318:	d024      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d322:	d11f      	bne.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d324:	4b6e      	ldr	r3, [pc, #440]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d32a:	0f1b      	lsrs	r3, r3, #28
 800d32c:	f003 0307 	and.w	r3, r3, #7
 800d330:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	019a      	lsls	r2, r3, #6
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	061b      	lsls	r3, r3, #24
 800d33e:	431a      	orrs	r2, r3
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	071b      	lsls	r3, r3, #28
 800d344:	4966      	ldr	r1, [pc, #408]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d346:	4313      	orrs	r3, r2
 800d348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d34c:	4b64      	ldr	r3, [pc, #400]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d352:	f023 021f 	bic.w	r2, r3, #31
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	69db      	ldr	r3, [r3, #28]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	4960      	ldr	r1, [pc, #384]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d35e:	4313      	orrs	r3, r2
 800d360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00d      	beq.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	019a      	lsls	r2, r3, #6
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	061b      	lsls	r3, r3, #24
 800d37c:	431a      	orrs	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	071b      	lsls	r3, r3, #28
 800d384:	4956      	ldr	r1, [pc, #344]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d386:	4313      	orrs	r3, r2
 800d388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d38c:	4b54      	ldr	r3, [pc, #336]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a53      	ldr	r2, [pc, #332]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d398:	f7fd fb8c 	bl	800aab4 <HAL_GetTick>
 800d39c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d39e:	e008      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d3a0:	f7fd fb88 	bl	800aab4 <HAL_GetTick>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	2b64      	cmp	r3, #100	; 0x64
 800d3ac:	d901      	bls.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3ae:	2303      	movs	r3, #3
 800d3b0:	e092      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d3b2:	4b4b      	ldr	r3, [pc, #300]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d0f0      	beq.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	f040 8088 	bne.w	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d3c6:	4b46      	ldr	r3, [pc, #280]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a45      	ldr	r2, [pc, #276]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3d2:	f7fd fb6f 	bl	800aab4 <HAL_GetTick>
 800d3d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3d8:	e008      	b.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d3da:	f7fd fb6b 	bl	800aab4 <HAL_GetTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	2b64      	cmp	r3, #100	; 0x64
 800d3e6:	d901      	bls.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	e075      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3ec:	4b3c      	ldr	r3, [pc, #240]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3f8:	d0ef      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d402:	2b00      	cmp	r3, #0
 800d404:	d003      	beq.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d009      	beq.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d416:	2b00      	cmp	r3, #0
 800d418:	d024      	beq.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d120      	bne.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d422:	4b2f      	ldr	r3, [pc, #188]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d428:	0c1b      	lsrs	r3, r3, #16
 800d42a:	f003 0303 	and.w	r3, r3, #3
 800d42e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	019a      	lsls	r2, r3, #6
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	041b      	lsls	r3, r3, #16
 800d43a:	431a      	orrs	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	061b      	lsls	r3, r3, #24
 800d442:	4927      	ldr	r1, [pc, #156]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d444:	4313      	orrs	r3, r2
 800d446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d44a:	4b25      	ldr	r3, [pc, #148]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d450:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6a1b      	ldr	r3, [r3, #32]
 800d458:	3b01      	subs	r3, #1
 800d45a:	021b      	lsls	r3, r3, #8
 800d45c:	4920      	ldr	r1, [pc, #128]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d45e:	4313      	orrs	r3, r2
 800d460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d018      	beq.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d478:	d113      	bne.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d47a:	4b19      	ldr	r3, [pc, #100]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d480:	0e1b      	lsrs	r3, r3, #24
 800d482:	f003 030f 	and.w	r3, r3, #15
 800d486:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	019a      	lsls	r2, r3, #6
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	699b      	ldr	r3, [r3, #24]
 800d492:	041b      	lsls	r3, r3, #16
 800d494:	431a      	orrs	r2, r3
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	061b      	lsls	r3, r3, #24
 800d49a:	4911      	ldr	r1, [pc, #68]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d49c:	4313      	orrs	r3, r2
 800d49e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d4a2:	4b0f      	ldr	r3, [pc, #60]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a0e      	ldr	r2, [pc, #56]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d4a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4ae:	f7fd fb01 	bl	800aab4 <HAL_GetTick>
 800d4b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d4b4:	e008      	b.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d4b6:	f7fd fafd 	bl	800aab4 <HAL_GetTick>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	2b64      	cmp	r3, #100	; 0x64
 800d4c2:	d901      	bls.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d4c4:	2303      	movs	r3, #3
 800d4c6:	e007      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d4c8:	4b05      	ldr	r3, [pc, #20]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4d4:	d1ef      	bne.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3720      	adds	r7, #32
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	40023800 	.word	0x40023800

0800d4e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d101      	bne.n	800d4f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e09d      	b.n	800d632 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d108      	bne.n	800d510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d506:	d009      	beq.n	800d51c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	61da      	str	r2, [r3, #28]
 800d50e:	e005      	b.n	800d51c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d106      	bne.n	800d53c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f7f9 f9f8 	bl	800692c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2202      	movs	r2, #2
 800d540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d552:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d55c:	d902      	bls.n	800d564 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d55e:	2300      	movs	r3, #0
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	e002      	b.n	800d56a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d568:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d572:	d007      	beq.n	800d584 <HAL_SPI_Init+0xa0>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d57c:	d002      	beq.n	800d584 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d594:	431a      	orrs	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	f003 0302 	and.w	r3, r3, #2
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	695b      	ldr	r3, [r3, #20]
 800d5a4:	f003 0301 	and.w	r3, r3, #1
 800d5a8:	431a      	orrs	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	699b      	ldr	r3, [r3, #24]
 800d5ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	69db      	ldr	r3, [r3, #28]
 800d5b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5c6:	ea42 0103 	orr.w	r1, r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	699b      	ldr	r3, [r3, #24]
 800d5de:	0c1b      	lsrs	r3, r3, #16
 800d5e0:	f003 0204 	and.w	r2, r3, #4
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e8:	f003 0310 	and.w	r3, r3, #16
 800d5ec:	431a      	orrs	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f2:	f003 0308 	and.w	r3, r3, #8
 800d5f6:	431a      	orrs	r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d600:	ea42 0103 	orr.w	r1, r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	430a      	orrs	r2, r1
 800d610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	69da      	ldr	r2, [r3, #28]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b088      	sub	sp, #32
 800d63e:	af00      	add	r7, sp, #0
 800d640:	60f8      	str	r0, [r7, #12]
 800d642:	60b9      	str	r1, [r7, #8]
 800d644:	603b      	str	r3, [r7, #0]
 800d646:	4613      	mov	r3, r2
 800d648:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d654:	2b01      	cmp	r3, #1
 800d656:	d101      	bne.n	800d65c <HAL_SPI_Transmit+0x22>
 800d658:	2302      	movs	r3, #2
 800d65a:	e158      	b.n	800d90e <HAL_SPI_Transmit+0x2d4>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d664:	f7fd fa26 	bl	800aab4 <HAL_GetTick>
 800d668:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d66a:	88fb      	ldrh	r3, [r7, #6]
 800d66c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b01      	cmp	r3, #1
 800d678:	d002      	beq.n	800d680 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d67a:	2302      	movs	r3, #2
 800d67c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d67e:	e13d      	b.n	800d8fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d002      	beq.n	800d68c <HAL_SPI_Transmit+0x52>
 800d686:	88fb      	ldrh	r3, [r7, #6]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d68c:	2301      	movs	r3, #1
 800d68e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d690:	e134      	b.n	800d8fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2203      	movs	r2, #3
 800d696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	88fa      	ldrh	r2, [r7, #6]
 800d6aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	88fa      	ldrh	r2, [r7, #6]
 800d6b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	689b      	ldr	r3, [r3, #8]
 800d6d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6dc:	d10f      	bne.n	800d6fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d708:	2b40      	cmp	r3, #64	; 0x40
 800d70a:	d007      	beq.n	800d71c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d71a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d724:	d94b      	bls.n	800d7be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d002      	beq.n	800d734 <HAL_SPI_Transmit+0xfa>
 800d72e:	8afb      	ldrh	r3, [r7, #22]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d13e      	bne.n	800d7b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d738:	881a      	ldrh	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d744:	1c9a      	adds	r2, r3, #2
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d74e:	b29b      	uxth	r3, r3
 800d750:	3b01      	subs	r3, #1
 800d752:	b29a      	uxth	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d758:	e02b      	b.n	800d7b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	f003 0302 	and.w	r3, r3, #2
 800d764:	2b02      	cmp	r3, #2
 800d766:	d112      	bne.n	800d78e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76c:	881a      	ldrh	r2, [r3, #0]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d778:	1c9a      	adds	r2, r3, #2
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d782:	b29b      	uxth	r3, r3
 800d784:	3b01      	subs	r3, #1
 800d786:	b29a      	uxth	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d78c:	e011      	b.n	800d7b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d78e:	f7fd f991 	bl	800aab4 <HAL_GetTick>
 800d792:	4602      	mov	r2, r0
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	683a      	ldr	r2, [r7, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d803      	bhi.n	800d7a6 <HAL_SPI_Transmit+0x16c>
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a4:	d102      	bne.n	800d7ac <HAL_SPI_Transmit+0x172>
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d102      	bne.n	800d7b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d7b0:	e0a4      	b.n	800d8fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1ce      	bne.n	800d75a <HAL_SPI_Transmit+0x120>
 800d7bc:	e07c      	b.n	800d8b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <HAL_SPI_Transmit+0x192>
 800d7c6:	8afb      	ldrh	r3, [r7, #22]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d170      	bne.n	800d8ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d912      	bls.n	800d7fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7da:	881a      	ldrh	r2, [r3, #0]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e6:	1c9a      	adds	r2, r3, #2
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	3b02      	subs	r3, #2
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d7fa:	e058      	b.n	800d8ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	330c      	adds	r3, #12
 800d806:	7812      	ldrb	r2, [r2, #0]
 800d808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80e:	1c5a      	adds	r2, r3, #1
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d818:	b29b      	uxth	r3, r3
 800d81a:	3b01      	subs	r3, #1
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d822:	e044      	b.n	800d8ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	f003 0302 	and.w	r3, r3, #2
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d12b      	bne.n	800d88a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d836:	b29b      	uxth	r3, r3
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d912      	bls.n	800d862 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d840:	881a      	ldrh	r2, [r3, #0]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84c:	1c9a      	adds	r2, r3, #2
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d856:	b29b      	uxth	r3, r3
 800d858:	3b02      	subs	r3, #2
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d860:	e025      	b.n	800d8ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	330c      	adds	r3, #12
 800d86c:	7812      	ldrb	r2, [r2, #0]
 800d86e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d874:	1c5a      	adds	r2, r3, #1
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d87e:	b29b      	uxth	r3, r3
 800d880:	3b01      	subs	r3, #1
 800d882:	b29a      	uxth	r2, r3
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d888:	e011      	b.n	800d8ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d88a:	f7fd f913 	bl	800aab4 <HAL_GetTick>
 800d88e:	4602      	mov	r2, r0
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	683a      	ldr	r2, [r7, #0]
 800d896:	429a      	cmp	r2, r3
 800d898:	d803      	bhi.n	800d8a2 <HAL_SPI_Transmit+0x268>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a0:	d102      	bne.n	800d8a8 <HAL_SPI_Transmit+0x26e>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d102      	bne.n	800d8ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d8ac:	e026      	b.n	800d8fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1b5      	bne.n	800d824 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d8b8:	69ba      	ldr	r2, [r7, #24]
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f000 fd07 	bl	800e2d0 <SPI_EndRxTxTransaction>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2220      	movs	r2, #32
 800d8cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10a      	bne.n	800d8ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	613b      	str	r3, [r7, #16]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	613b      	str	r3, [r7, #16]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	613b      	str	r3, [r7, #16]
 800d8ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	77fb      	strb	r3, [r7, #31]
 800d8f8:	e000      	b.n	800d8fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800d8fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d90c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3720      	adds	r7, #32
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b088      	sub	sp, #32
 800d91a:	af02      	add	r7, sp, #8
 800d91c:	60f8      	str	r0, [r7, #12]
 800d91e:	60b9      	str	r1, [r7, #8]
 800d920:	603b      	str	r3, [r7, #0]
 800d922:	4613      	mov	r3, r2
 800d924:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d932:	d112      	bne.n	800d95a <HAL_SPI_Receive+0x44>
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10e      	bne.n	800d95a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2204      	movs	r2, #4
 800d940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d944:	88fa      	ldrh	r2, [r7, #6]
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	4613      	mov	r3, r2
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f000 f910 	bl	800db76 <HAL_SPI_TransmitReceive>
 800d956:	4603      	mov	r3, r0
 800d958:	e109      	b.n	800db6e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d960:	2b01      	cmp	r3, #1
 800d962:	d101      	bne.n	800d968 <HAL_SPI_Receive+0x52>
 800d964:	2302      	movs	r3, #2
 800d966:	e102      	b.n	800db6e <HAL_SPI_Receive+0x258>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d970:	f7fd f8a0 	bl	800aab4 <HAL_GetTick>
 800d974:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d002      	beq.n	800d988 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d982:	2302      	movs	r3, #2
 800d984:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d986:	e0e9      	b.n	800db5c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d002      	beq.n	800d994 <HAL_SPI_Receive+0x7e>
 800d98e:	88fb      	ldrh	r3, [r7, #6]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d102      	bne.n	800d99a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d994:	2301      	movs	r3, #1
 800d996:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d998:	e0e0      	b.n	800db5c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2204      	movs	r2, #4
 800d99e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	88fa      	ldrh	r2, [r7, #6]
 800d9b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	88fa      	ldrh	r2, [r7, #6]
 800d9ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d9e4:	d908      	bls.n	800d9f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d9f4:	605a      	str	r2, [r3, #4]
 800d9f6:	e007      	b.n	800da08 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	685a      	ldr	r2, [r3, #4]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800da06:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da10:	d10f      	bne.n	800da32 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da30:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da3c:	2b40      	cmp	r3, #64	; 0x40
 800da3e:	d007      	beq.n	800da50 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da58:	d867      	bhi.n	800db2a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800da5a:	e030      	b.n	800dabe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	2b01      	cmp	r3, #1
 800da68:	d117      	bne.n	800da9a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f103 020c 	add.w	r2, r3, #12
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da76:	7812      	ldrb	r2, [r2, #0]
 800da78:	b2d2      	uxtb	r2, r2
 800da7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	3b01      	subs	r3, #1
 800da90:	b29a      	uxth	r2, r3
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800da98:	e011      	b.n	800dabe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da9a:	f7fd f80b 	bl	800aab4 <HAL_GetTick>
 800da9e:	4602      	mov	r2, r0
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d803      	bhi.n	800dab2 <HAL_SPI_Receive+0x19c>
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab0:	d102      	bne.n	800dab8 <HAL_SPI_Receive+0x1a2>
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d102      	bne.n	800dabe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800dab8:	2303      	movs	r3, #3
 800daba:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dabc:	e04e      	b.n	800db5c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1c8      	bne.n	800da5c <HAL_SPI_Receive+0x146>
 800daca:	e034      	b.n	800db36 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	f003 0301 	and.w	r3, r3, #1
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d115      	bne.n	800db06 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68da      	ldr	r2, [r3, #12]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae4:	b292      	uxth	r2, r2
 800dae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daec:	1c9a      	adds	r2, r3, #2
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	3b01      	subs	r3, #1
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800db04:	e011      	b.n	800db2a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db06:	f7fc ffd5 	bl	800aab4 <HAL_GetTick>
 800db0a:	4602      	mov	r2, r0
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	d803      	bhi.n	800db1e <HAL_SPI_Receive+0x208>
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1c:	d102      	bne.n	800db24 <HAL_SPI_Receive+0x20e>
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d102      	bne.n	800db2a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800db24:	2303      	movs	r3, #3
 800db26:	75fb      	strb	r3, [r7, #23]
          goto error;
 800db28:	e018      	b.n	800db5c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db30:	b29b      	uxth	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d1ca      	bne.n	800dacc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f000 fb4c 	bl	800e1d8 <SPI_EndRxTransaction>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d002      	beq.n	800db4c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2220      	movs	r2, #32
 800db4a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	75fb      	strb	r3, [r7, #23]
 800db58:	e000      	b.n	800db5c <HAL_SPI_Receive+0x246>
  }

error :
 800db5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800db6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b08a      	sub	sp, #40	; 0x28
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	60b9      	str	r1, [r7, #8]
 800db80:	607a      	str	r2, [r7, #4]
 800db82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db84:	2301      	movs	r3, #1
 800db86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db88:	2300      	movs	r3, #0
 800db8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800db94:	2b01      	cmp	r3, #1
 800db96:	d101      	bne.n	800db9c <HAL_SPI_TransmitReceive+0x26>
 800db98:	2302      	movs	r3, #2
 800db9a:	e1fb      	b.n	800df94 <HAL_SPI_TransmitReceive+0x41e>
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dba4:	f7fc ff86 	bl	800aab4 <HAL_GetTick>
 800dba8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dbb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800dbb8:	887b      	ldrh	r3, [r7, #2]
 800dbba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800dbbc:	887b      	ldrh	r3, [r7, #2]
 800dbbe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dbc0:	7efb      	ldrb	r3, [r7, #27]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d00e      	beq.n	800dbe4 <HAL_SPI_TransmitReceive+0x6e>
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbcc:	d106      	bne.n	800dbdc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d102      	bne.n	800dbdc <HAL_SPI_TransmitReceive+0x66>
 800dbd6:	7efb      	ldrb	r3, [r7, #27]
 800dbd8:	2b04      	cmp	r3, #4
 800dbda:	d003      	beq.n	800dbe4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800dbdc:	2302      	movs	r3, #2
 800dbde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dbe2:	e1cd      	b.n	800df80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d005      	beq.n	800dbf6 <HAL_SPI_TransmitReceive+0x80>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <HAL_SPI_TransmitReceive+0x80>
 800dbf0:	887b      	ldrh	r3, [r7, #2]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d103      	bne.n	800dbfe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dbfc:	e1c0      	b.n	800df80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	2b04      	cmp	r3, #4
 800dc08:	d003      	beq.n	800dc12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2205      	movs	r2, #5
 800dc0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	887a      	ldrh	r2, [r7, #2]
 800dc22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	887a      	ldrh	r2, [r7, #2]
 800dc2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	887a      	ldrh	r2, [r7, #2]
 800dc38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	887a      	ldrh	r2, [r7, #2]
 800dc3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2200      	movs	r2, #0
 800dc44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc54:	d802      	bhi.n	800dc5c <HAL_SPI_TransmitReceive+0xe6>
 800dc56:	8a3b      	ldrh	r3, [r7, #16]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d908      	bls.n	800dc6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	685a      	ldr	r2, [r3, #4]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc6a:	605a      	str	r2, [r3, #4]
 800dc6c:	e007      	b.n	800dc7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc88:	2b40      	cmp	r3, #64	; 0x40
 800dc8a:	d007      	beq.n	800dc9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	68db      	ldr	r3, [r3, #12]
 800dca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dca4:	d97c      	bls.n	800dda0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d002      	beq.n	800dcb4 <HAL_SPI_TransmitReceive+0x13e>
 800dcae:	8a7b      	ldrh	r3, [r7, #18]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d169      	bne.n	800dd88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb8:	881a      	ldrh	r2, [r3, #0]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc4:	1c9a      	adds	r2, r3, #2
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcd8:	e056      	b.n	800dd88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	f003 0302 	and.w	r3, r3, #2
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d11b      	bne.n	800dd20 <HAL_SPI_TransmitReceive+0x1aa>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d016      	beq.n	800dd20 <HAL_SPI_TransmitReceive+0x1aa>
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d113      	bne.n	800dd20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfc:	881a      	ldrh	r2, [r3, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd08:	1c9a      	adds	r2, r3, #2
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	3b01      	subs	r3, #1
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f003 0301 	and.w	r3, r3, #1
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d11c      	bne.n	800dd68 <HAL_SPI_TransmitReceive+0x1f2>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d016      	beq.n	800dd68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68da      	ldr	r2, [r3, #12]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd44:	b292      	uxth	r2, r2
 800dd46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd4c:	1c9a      	adds	r2, r3, #2
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd64:	2301      	movs	r3, #1
 800dd66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd68:	f7fc fea4 	bl	800aab4 <HAL_GetTick>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d807      	bhi.n	800dd88 <HAL_SPI_TransmitReceive+0x212>
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd7e:	d003      	beq.n	800dd88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800dd80:	2303      	movs	r3, #3
 800dd82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dd86:	e0fb      	b.n	800df80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1a3      	bne.n	800dcda <HAL_SPI_TransmitReceive+0x164>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d19d      	bne.n	800dcda <HAL_SPI_TransmitReceive+0x164>
 800dd9e:	e0df      	b.n	800df60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d003      	beq.n	800ddb0 <HAL_SPI_TransmitReceive+0x23a>
 800dda8:	8a7b      	ldrh	r3, [r7, #18]
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	f040 80cb 	bne.w	800df46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d912      	bls.n	800dde0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddbe:	881a      	ldrh	r2, [r3, #0]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddca:	1c9a      	adds	r2, r3, #2
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	3b02      	subs	r3, #2
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ddde:	e0b2      	b.n	800df46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	330c      	adds	r3, #12
 800ddea:	7812      	ldrb	r2, [r2, #0]
 800ddec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf2:	1c5a      	adds	r2, r3, #1
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	3b01      	subs	r3, #1
 800de00:	b29a      	uxth	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de06:	e09e      	b.n	800df46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f003 0302 	and.w	r3, r3, #2
 800de12:	2b02      	cmp	r3, #2
 800de14:	d134      	bne.n	800de80 <HAL_SPI_TransmitReceive+0x30a>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d02f      	beq.n	800de80 <HAL_SPI_TransmitReceive+0x30a>
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	2b01      	cmp	r3, #1
 800de24:	d12c      	bne.n	800de80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d912      	bls.n	800de56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de34:	881a      	ldrh	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	1c9a      	adds	r2, r3, #2
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	3b02      	subs	r3, #2
 800de4e:	b29a      	uxth	r2, r3
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800de54:	e012      	b.n	800de7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	330c      	adds	r3, #12
 800de60:	7812      	ldrb	r2, [r2, #0]
 800de62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de68:	1c5a      	adds	r2, r3, #1
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de72:	b29b      	uxth	r3, r3
 800de74:	3b01      	subs	r3, #1
 800de76:	b29a      	uxth	r2, r3
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800de7c:	2300      	movs	r3, #0
 800de7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	f003 0301 	and.w	r3, r3, #1
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d148      	bne.n	800df20 <HAL_SPI_TransmitReceive+0x3aa>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de94:	b29b      	uxth	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d042      	beq.n	800df20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d923      	bls.n	800deee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68da      	ldr	r2, [r3, #12]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb0:	b292      	uxth	r2, r2
 800deb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb8:	1c9a      	adds	r2, r3, #2
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	3b02      	subs	r3, #2
 800dec8:	b29a      	uxth	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d81f      	bhi.n	800df1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800deea:	605a      	str	r2, [r3, #4]
 800deec:	e016      	b.n	800df1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f103 020c 	add.w	r2, r3, #12
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defa:	7812      	ldrb	r2, [r2, #0]
 800defc:	b2d2      	uxtb	r2, r2
 800defe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df04:	1c5a      	adds	r2, r3, #1
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df10:	b29b      	uxth	r3, r3
 800df12:	3b01      	subs	r3, #1
 800df14:	b29a      	uxth	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800df1c:	2301      	movs	r3, #1
 800df1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800df20:	f7fc fdc8 	bl	800aab4 <HAL_GetTick>
 800df24:	4602      	mov	r2, r0
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d803      	bhi.n	800df38 <HAL_SPI_TransmitReceive+0x3c2>
 800df30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df36:	d102      	bne.n	800df3e <HAL_SPI_TransmitReceive+0x3c8>
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d103      	bne.n	800df46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800df3e:	2303      	movs	r3, #3
 800df40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800df44:	e01c      	b.n	800df80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f47f af5b 	bne.w	800de08 <HAL_SPI_TransmitReceive+0x292>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df58:	b29b      	uxth	r3, r3
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f47f af54 	bne.w	800de08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800df60:	69fa      	ldr	r2, [r7, #28]
 800df62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f000 f9b3 	bl	800e2d0 <SPI_EndRxTxTransaction>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d006      	beq.n	800df7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2220      	movs	r2, #32
 800df7a:	661a      	str	r2, [r3, #96]	; 0x60
 800df7c:	e000      	b.n	800df80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800df7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2200      	movs	r2, #0
 800df8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800df90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800df94:	4618      	mov	r0, r3
 800df96:	3728      	adds	r7, #40	; 0x28
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b088      	sub	sp, #32
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	603b      	str	r3, [r7, #0]
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dfac:	f7fc fd82 	bl	800aab4 <HAL_GetTick>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb4:	1a9b      	subs	r3, r3, r2
 800dfb6:	683a      	ldr	r2, [r7, #0]
 800dfb8:	4413      	add	r3, r2
 800dfba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dfbc:	f7fc fd7a 	bl	800aab4 <HAL_GetTick>
 800dfc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dfc2:	4b39      	ldr	r3, [pc, #228]	; (800e0a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	015b      	lsls	r3, r3, #5
 800dfc8:	0d1b      	lsrs	r3, r3, #20
 800dfca:	69fa      	ldr	r2, [r7, #28]
 800dfcc:	fb02 f303 	mul.w	r3, r2, r3
 800dfd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dfd2:	e054      	b.n	800e07e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfda:	d050      	beq.n	800e07e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dfdc:	f7fc fd6a 	bl	800aab4 <HAL_GetTick>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	69fa      	ldr	r2, [r7, #28]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d902      	bls.n	800dff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d13d      	bne.n	800e06e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e00a:	d111      	bne.n	800e030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e014:	d004      	beq.n	800e020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e01e:	d107      	bne.n	800e030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e02e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e038:	d10f      	bne.n	800e05a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e06a:	2303      	movs	r3, #3
 800e06c:	e017      	b.n	800e09e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d101      	bne.n	800e078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e074:	2300      	movs	r3, #0
 800e076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	3b01      	subs	r3, #1
 800e07c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	689a      	ldr	r2, [r3, #8]
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	4013      	ands	r3, r2
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	bf0c      	ite	eq
 800e08e:	2301      	moveq	r3, #1
 800e090:	2300      	movne	r3, #0
 800e092:	b2db      	uxtb	r3, r3
 800e094:	461a      	mov	r2, r3
 800e096:	79fb      	ldrb	r3, [r7, #7]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d19b      	bne.n	800dfd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3720      	adds	r7, #32
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20000008 	.word	0x20000008

0800e0ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b08a      	sub	sp, #40	; 0x28
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
 800e0b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e0be:	f7fc fcf9 	bl	800aab4 <HAL_GetTick>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c6:	1a9b      	subs	r3, r3, r2
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e0ce:	f7fc fcf1 	bl	800aab4 <HAL_GetTick>
 800e0d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	330c      	adds	r3, #12
 800e0da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e0dc:	4b3d      	ldr	r3, [pc, #244]	; (800e1d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	00da      	lsls	r2, r3, #3
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	0d1b      	lsrs	r3, r3, #20
 800e0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ee:	fb02 f303 	mul.w	r3, r2, r3
 800e0f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e0f4:	e060      	b.n	800e1b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e0fc:	d107      	bne.n	800e10e <SPI_WaitFifoStateUntilTimeout+0x62>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d104      	bne.n	800e10e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e10c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e114:	d050      	beq.n	800e1b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e116:	f7fc fccd 	bl	800aab4 <HAL_GetTick>
 800e11a:	4602      	mov	r2, r0
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e122:	429a      	cmp	r2, r3
 800e124:	d902      	bls.n	800e12c <SPI_WaitFifoStateUntilTimeout+0x80>
 800e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d13d      	bne.n	800e1a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e13a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e144:	d111      	bne.n	800e16a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e14e:	d004      	beq.n	800e15a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e158:	d107      	bne.n	800e16a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e16e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e172:	d10f      	bne.n	800e194 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e182:	601a      	str	r2, [r3, #0]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e1a4:	2303      	movs	r3, #3
 800e1a6:	e010      	b.n	800e1ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d101      	bne.n	800e1b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	689a      	ldr	r2, [r3, #8]
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d196      	bne.n	800e0f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3728      	adds	r7, #40	; 0x28
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20000008 	.word	0x20000008

0800e1d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1ec:	d111      	bne.n	800e212 <SPI_EndRxTransaction+0x3a>
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1f6:	d004      	beq.n	800e202 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e200:	d107      	bne.n	800e212 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e210:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e21a:	d112      	bne.n	800e242 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	9300      	str	r3, [sp, #0]
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	2200      	movs	r2, #0
 800e224:	2180      	movs	r1, #128	; 0x80
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f7ff feb8 	bl	800df9c <SPI_WaitFlagStateUntilTimeout>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d021      	beq.n	800e276 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e236:	f043 0220 	orr.w	r2, r3, #32
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e23e:	2303      	movs	r3, #3
 800e240:	e03d      	b.n	800e2be <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e242:	4b21      	ldr	r3, [pc, #132]	; (800e2c8 <SPI_EndRxTransaction+0xf0>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a21      	ldr	r2, [pc, #132]	; (800e2cc <SPI_EndRxTransaction+0xf4>)
 800e248:	fba2 2303 	umull	r2, r3, r2, r3
 800e24c:	0d5b      	lsrs	r3, r3, #21
 800e24e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e252:	fb02 f303 	mul.w	r3, r2, r3
 800e256:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00a      	beq.n	800e274 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	3b01      	subs	r3, #1
 800e262:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e26e:	2b80      	cmp	r3, #128	; 0x80
 800e270:	d0f2      	beq.n	800e258 <SPI_EndRxTransaction+0x80>
 800e272:	e000      	b.n	800e276 <SPI_EndRxTransaction+0x9e>
        break;
 800e274:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e27e:	d11d      	bne.n	800e2bc <SPI_EndRxTransaction+0xe4>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e288:	d004      	beq.n	800e294 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e292:	d113      	bne.n	800e2bc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f7ff ff03 	bl	800e0ac <SPI_WaitFifoStateUntilTimeout>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d007      	beq.n	800e2bc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2b0:	f043 0220 	orr.w	r2, r3, #32
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	e000      	b.n	800e2be <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800e2bc:	2300      	movs	r3, #0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3718      	adds	r7, #24
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	20000008 	.word	0x20000008
 800e2cc:	165e9f81 	.word	0x165e9f81

0800e2d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b088      	sub	sp, #32
 800e2d4:	af02      	add	r7, sp, #8
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f7ff fedf 	bl	800e0ac <SPI_WaitFifoStateUntilTimeout>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d007      	beq.n	800e304 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2f8:	f043 0220 	orr.w	r2, r3, #32
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e300:	2303      	movs	r3, #3
 800e302:	e046      	b.n	800e392 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e304:	4b25      	ldr	r3, [pc, #148]	; (800e39c <SPI_EndRxTxTransaction+0xcc>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a25      	ldr	r2, [pc, #148]	; (800e3a0 <SPI_EndRxTxTransaction+0xd0>)
 800e30a:	fba2 2303 	umull	r2, r3, r2, r3
 800e30e:	0d5b      	lsrs	r3, r3, #21
 800e310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e314:	fb02 f303 	mul.w	r3, r2, r3
 800e318:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e322:	d112      	bne.n	800e34a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	9300      	str	r3, [sp, #0]
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	2200      	movs	r2, #0
 800e32c:	2180      	movs	r1, #128	; 0x80
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f7ff fe34 	bl	800df9c <SPI_WaitFlagStateUntilTimeout>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d016      	beq.n	800e368 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e33e:	f043 0220 	orr.w	r2, r3, #32
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e346:	2303      	movs	r3, #3
 800e348:	e023      	b.n	800e392 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00a      	beq.n	800e366 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	3b01      	subs	r3, #1
 800e354:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e360:	2b80      	cmp	r3, #128	; 0x80
 800e362:	d0f2      	beq.n	800e34a <SPI_EndRxTxTransaction+0x7a>
 800e364:	e000      	b.n	800e368 <SPI_EndRxTxTransaction+0x98>
        break;
 800e366:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	2200      	movs	r2, #0
 800e370:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7ff fe99 	bl	800e0ac <SPI_WaitFifoStateUntilTimeout>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d007      	beq.n	800e390 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e384:	f043 0220 	orr.w	r2, r3, #32
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e38c:	2303      	movs	r3, #3
 800e38e:	e000      	b.n	800e392 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800e390:	2300      	movs	r3, #0
}
 800e392:	4618      	mov	r0, r3
 800e394:	3718      	adds	r7, #24
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	20000008 	.word	0x20000008
 800e3a0:	165e9f81 	.word	0x165e9f81

0800e3a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e049      	b.n	800e44a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d106      	bne.n	800e3d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7f8 fb24 	bl	8006a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f000 ffae 	bl	800f344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2201      	movs	r2, #1
 800e41c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2201      	movs	r2, #1
 800e424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2201      	movs	r2, #1
 800e434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2201      	movs	r2, #1
 800e444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
	...

0800e454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e462:	b2db      	uxtb	r3, r3
 800e464:	2b01      	cmp	r3, #1
 800e466:	d001      	beq.n	800e46c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e468:	2301      	movs	r3, #1
 800e46a:	e054      	b.n	800e516 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2202      	movs	r2, #2
 800e470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	68da      	ldr	r2, [r3, #12]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f042 0201 	orr.w	r2, r2, #1
 800e482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a26      	ldr	r2, [pc, #152]	; (800e524 <HAL_TIM_Base_Start_IT+0xd0>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d022      	beq.n	800e4d4 <HAL_TIM_Base_Start_IT+0x80>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e496:	d01d      	beq.n	800e4d4 <HAL_TIM_Base_Start_IT+0x80>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a22      	ldr	r2, [pc, #136]	; (800e528 <HAL_TIM_Base_Start_IT+0xd4>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d018      	beq.n	800e4d4 <HAL_TIM_Base_Start_IT+0x80>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a21      	ldr	r2, [pc, #132]	; (800e52c <HAL_TIM_Base_Start_IT+0xd8>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d013      	beq.n	800e4d4 <HAL_TIM_Base_Start_IT+0x80>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a1f      	ldr	r2, [pc, #124]	; (800e530 <HAL_TIM_Base_Start_IT+0xdc>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d00e      	beq.n	800e4d4 <HAL_TIM_Base_Start_IT+0x80>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a1e      	ldr	r2, [pc, #120]	; (800e534 <HAL_TIM_Base_Start_IT+0xe0>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d009      	beq.n	800e4d4 <HAL_TIM_Base_Start_IT+0x80>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a1c      	ldr	r2, [pc, #112]	; (800e538 <HAL_TIM_Base_Start_IT+0xe4>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d004      	beq.n	800e4d4 <HAL_TIM_Base_Start_IT+0x80>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a1b      	ldr	r2, [pc, #108]	; (800e53c <HAL_TIM_Base_Start_IT+0xe8>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d115      	bne.n	800e500 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	689a      	ldr	r2, [r3, #8]
 800e4da:	4b19      	ldr	r3, [pc, #100]	; (800e540 <HAL_TIM_Base_Start_IT+0xec>)
 800e4dc:	4013      	ands	r3, r2
 800e4de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2b06      	cmp	r3, #6
 800e4e4:	d015      	beq.n	800e512 <HAL_TIM_Base_Start_IT+0xbe>
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4ec:	d011      	beq.n	800e512 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f042 0201 	orr.w	r2, r2, #1
 800e4fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4fe:	e008      	b.n	800e512 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	681a      	ldr	r2, [r3, #0]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f042 0201 	orr.w	r2, r2, #1
 800e50e:	601a      	str	r2, [r3, #0]
 800e510:	e000      	b.n	800e514 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3714      	adds	r7, #20
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	40010000 	.word	0x40010000
 800e528:	40000400 	.word	0x40000400
 800e52c:	40000800 	.word	0x40000800
 800e530:	40000c00 	.word	0x40000c00
 800e534:	40010400 	.word	0x40010400
 800e538:	40014000 	.word	0x40014000
 800e53c:	40001800 	.word	0x40001800
 800e540:	00010007 	.word	0x00010007

0800e544 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	e049      	b.n	800e5ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d106      	bne.n	800e570 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f841 	bl	800e5f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2202      	movs	r2, #2
 800e574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	3304      	adds	r3, #4
 800e580:	4619      	mov	r1, r3
 800e582:	4610      	mov	r0, r2
 800e584:	f000 fede 	bl	800f344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2201      	movs	r2, #1
 800e58c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e5f2:	b480      	push	{r7}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e5fa:	bf00      	nop
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
	...

0800e608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d109      	bne.n	800e62c <HAL_TIM_PWM_Start+0x24>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	2b01      	cmp	r3, #1
 800e622:	bf14      	ite	ne
 800e624:	2301      	movne	r3, #1
 800e626:	2300      	moveq	r3, #0
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	e03c      	b.n	800e6a6 <HAL_TIM_PWM_Start+0x9e>
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	2b04      	cmp	r3, #4
 800e630:	d109      	bne.n	800e646 <HAL_TIM_PWM_Start+0x3e>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	bf14      	ite	ne
 800e63e:	2301      	movne	r3, #1
 800e640:	2300      	moveq	r3, #0
 800e642:	b2db      	uxtb	r3, r3
 800e644:	e02f      	b.n	800e6a6 <HAL_TIM_PWM_Start+0x9e>
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	2b08      	cmp	r3, #8
 800e64a:	d109      	bne.n	800e660 <HAL_TIM_PWM_Start+0x58>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b01      	cmp	r3, #1
 800e656:	bf14      	ite	ne
 800e658:	2301      	movne	r3, #1
 800e65a:	2300      	moveq	r3, #0
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	e022      	b.n	800e6a6 <HAL_TIM_PWM_Start+0x9e>
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	2b0c      	cmp	r3, #12
 800e664:	d109      	bne.n	800e67a <HAL_TIM_PWM_Start+0x72>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	2b01      	cmp	r3, #1
 800e670:	bf14      	ite	ne
 800e672:	2301      	movne	r3, #1
 800e674:	2300      	moveq	r3, #0
 800e676:	b2db      	uxtb	r3, r3
 800e678:	e015      	b.n	800e6a6 <HAL_TIM_PWM_Start+0x9e>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2b10      	cmp	r3, #16
 800e67e:	d109      	bne.n	800e694 <HAL_TIM_PWM_Start+0x8c>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e686:	b2db      	uxtb	r3, r3
 800e688:	2b01      	cmp	r3, #1
 800e68a:	bf14      	ite	ne
 800e68c:	2301      	movne	r3, #1
 800e68e:	2300      	moveq	r3, #0
 800e690:	b2db      	uxtb	r3, r3
 800e692:	e008      	b.n	800e6a6 <HAL_TIM_PWM_Start+0x9e>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	bf14      	ite	ne
 800e6a0:	2301      	movne	r3, #1
 800e6a2:	2300      	moveq	r3, #0
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e092      	b.n	800e7d4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d104      	bne.n	800e6be <HAL_TIM_PWM_Start+0xb6>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6bc:	e023      	b.n	800e706 <HAL_TIM_PWM_Start+0xfe>
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2b04      	cmp	r3, #4
 800e6c2:	d104      	bne.n	800e6ce <HAL_TIM_PWM_Start+0xc6>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2202      	movs	r2, #2
 800e6c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6cc:	e01b      	b.n	800e706 <HAL_TIM_PWM_Start+0xfe>
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2b08      	cmp	r3, #8
 800e6d2:	d104      	bne.n	800e6de <HAL_TIM_PWM_Start+0xd6>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2202      	movs	r2, #2
 800e6d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6dc:	e013      	b.n	800e706 <HAL_TIM_PWM_Start+0xfe>
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	2b0c      	cmp	r3, #12
 800e6e2:	d104      	bne.n	800e6ee <HAL_TIM_PWM_Start+0xe6>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6ec:	e00b      	b.n	800e706 <HAL_TIM_PWM_Start+0xfe>
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	2b10      	cmp	r3, #16
 800e6f2:	d104      	bne.n	800e6fe <HAL_TIM_PWM_Start+0xf6>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6fc:	e003      	b.n	800e706 <HAL_TIM_PWM_Start+0xfe>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2202      	movs	r2, #2
 800e702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2201      	movs	r2, #1
 800e70c:	6839      	ldr	r1, [r7, #0]
 800e70e:	4618      	mov	r0, r3
 800e710:	f001 fada 	bl	800fcc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a30      	ldr	r2, [pc, #192]	; (800e7dc <HAL_TIM_PWM_Start+0x1d4>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d004      	beq.n	800e728 <HAL_TIM_PWM_Start+0x120>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4a2f      	ldr	r2, [pc, #188]	; (800e7e0 <HAL_TIM_PWM_Start+0x1d8>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d101      	bne.n	800e72c <HAL_TIM_PWM_Start+0x124>
 800e728:	2301      	movs	r3, #1
 800e72a:	e000      	b.n	800e72e <HAL_TIM_PWM_Start+0x126>
 800e72c:	2300      	movs	r3, #0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d007      	beq.n	800e742 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4a25      	ldr	r2, [pc, #148]	; (800e7dc <HAL_TIM_PWM_Start+0x1d4>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d022      	beq.n	800e792 <HAL_TIM_PWM_Start+0x18a>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e754:	d01d      	beq.n	800e792 <HAL_TIM_PWM_Start+0x18a>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a22      	ldr	r2, [pc, #136]	; (800e7e4 <HAL_TIM_PWM_Start+0x1dc>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d018      	beq.n	800e792 <HAL_TIM_PWM_Start+0x18a>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a20      	ldr	r2, [pc, #128]	; (800e7e8 <HAL_TIM_PWM_Start+0x1e0>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d013      	beq.n	800e792 <HAL_TIM_PWM_Start+0x18a>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a1f      	ldr	r2, [pc, #124]	; (800e7ec <HAL_TIM_PWM_Start+0x1e4>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d00e      	beq.n	800e792 <HAL_TIM_PWM_Start+0x18a>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a19      	ldr	r2, [pc, #100]	; (800e7e0 <HAL_TIM_PWM_Start+0x1d8>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d009      	beq.n	800e792 <HAL_TIM_PWM_Start+0x18a>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	4a1b      	ldr	r2, [pc, #108]	; (800e7f0 <HAL_TIM_PWM_Start+0x1e8>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d004      	beq.n	800e792 <HAL_TIM_PWM_Start+0x18a>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a19      	ldr	r2, [pc, #100]	; (800e7f4 <HAL_TIM_PWM_Start+0x1ec>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d115      	bne.n	800e7be <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	689a      	ldr	r2, [r3, #8]
 800e798:	4b17      	ldr	r3, [pc, #92]	; (800e7f8 <HAL_TIM_PWM_Start+0x1f0>)
 800e79a:	4013      	ands	r3, r2
 800e79c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b06      	cmp	r3, #6
 800e7a2:	d015      	beq.n	800e7d0 <HAL_TIM_PWM_Start+0x1c8>
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7aa:	d011      	beq.n	800e7d0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f042 0201 	orr.w	r2, r2, #1
 800e7ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7bc:	e008      	b.n	800e7d0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f042 0201 	orr.w	r2, r2, #1
 800e7cc:	601a      	str	r2, [r3, #0]
 800e7ce:	e000      	b.n	800e7d2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	40010000 	.word	0x40010000
 800e7e0:	40010400 	.word	0x40010400
 800e7e4:	40000400 	.word	0x40000400
 800e7e8:	40000800 	.word	0x40000800
 800e7ec:	40000c00 	.word	0x40000c00
 800e7f0:	40014000 	.word	0x40014000
 800e7f4:	40001800 	.word	0x40001800
 800e7f8:	00010007 	.word	0x00010007

0800e7fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	e049      	b.n	800e8a2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d106      	bne.n	800e828 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7f8 f918 	bl	8006a58 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2202      	movs	r2, #2
 800e82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	3304      	adds	r3, #4
 800e838:	4619      	mov	r1, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	f000 fd82 	bl	800f344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2201      	movs	r2, #1
 800e884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
	...

0800e8ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d104      	bne.n	800e8ca <HAL_TIM_IC_Start_IT+0x1e>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	e023      	b.n	800e912 <HAL_TIM_IC_Start_IT+0x66>
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	2b04      	cmp	r3, #4
 800e8ce:	d104      	bne.n	800e8da <HAL_TIM_IC_Start_IT+0x2e>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	e01b      	b.n	800e912 <HAL_TIM_IC_Start_IT+0x66>
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	2b08      	cmp	r3, #8
 800e8de:	d104      	bne.n	800e8ea <HAL_TIM_IC_Start_IT+0x3e>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	e013      	b.n	800e912 <HAL_TIM_IC_Start_IT+0x66>
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	2b0c      	cmp	r3, #12
 800e8ee:	d104      	bne.n	800e8fa <HAL_TIM_IC_Start_IT+0x4e>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	e00b      	b.n	800e912 <HAL_TIM_IC_Start_IT+0x66>
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	2b10      	cmp	r3, #16
 800e8fe:	d104      	bne.n	800e90a <HAL_TIM_IC_Start_IT+0x5e>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e906:	b2db      	uxtb	r3, r3
 800e908:	e003      	b.n	800e912 <HAL_TIM_IC_Start_IT+0x66>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e910:	b2db      	uxtb	r3, r3
 800e912:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d104      	bne.n	800e924 <HAL_TIM_IC_Start_IT+0x78>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e920:	b2db      	uxtb	r3, r3
 800e922:	e013      	b.n	800e94c <HAL_TIM_IC_Start_IT+0xa0>
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b04      	cmp	r3, #4
 800e928:	d104      	bne.n	800e934 <HAL_TIM_IC_Start_IT+0x88>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e930:	b2db      	uxtb	r3, r3
 800e932:	e00b      	b.n	800e94c <HAL_TIM_IC_Start_IT+0xa0>
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	2b08      	cmp	r3, #8
 800e938:	d104      	bne.n	800e944 <HAL_TIM_IC_Start_IT+0x98>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e940:	b2db      	uxtb	r3, r3
 800e942:	e003      	b.n	800e94c <HAL_TIM_IC_Start_IT+0xa0>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e94e:	7bbb      	ldrb	r3, [r7, #14]
 800e950:	2b01      	cmp	r3, #1
 800e952:	d102      	bne.n	800e95a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800e954:	7b7b      	ldrb	r3, [r7, #13]
 800e956:	2b01      	cmp	r3, #1
 800e958:	d001      	beq.n	800e95e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e0e2      	b.n	800eb24 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d104      	bne.n	800e96e <HAL_TIM_IC_Start_IT+0xc2>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2202      	movs	r2, #2
 800e968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e96c:	e023      	b.n	800e9b6 <HAL_TIM_IC_Start_IT+0x10a>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2b04      	cmp	r3, #4
 800e972:	d104      	bne.n	800e97e <HAL_TIM_IC_Start_IT+0xd2>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e97c:	e01b      	b.n	800e9b6 <HAL_TIM_IC_Start_IT+0x10a>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b08      	cmp	r3, #8
 800e982:	d104      	bne.n	800e98e <HAL_TIM_IC_Start_IT+0xe2>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2202      	movs	r2, #2
 800e988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e98c:	e013      	b.n	800e9b6 <HAL_TIM_IC_Start_IT+0x10a>
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2b0c      	cmp	r3, #12
 800e992:	d104      	bne.n	800e99e <HAL_TIM_IC_Start_IT+0xf2>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2202      	movs	r2, #2
 800e998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e99c:	e00b      	b.n	800e9b6 <HAL_TIM_IC_Start_IT+0x10a>
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	2b10      	cmp	r3, #16
 800e9a2:	d104      	bne.n	800e9ae <HAL_TIM_IC_Start_IT+0x102>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9ac:	e003      	b.n	800e9b6 <HAL_TIM_IC_Start_IT+0x10a>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2202      	movs	r2, #2
 800e9b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d104      	bne.n	800e9c6 <HAL_TIM_IC_Start_IT+0x11a>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9c4:	e013      	b.n	800e9ee <HAL_TIM_IC_Start_IT+0x142>
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2b04      	cmp	r3, #4
 800e9ca:	d104      	bne.n	800e9d6 <HAL_TIM_IC_Start_IT+0x12a>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2202      	movs	r2, #2
 800e9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9d4:	e00b      	b.n	800e9ee <HAL_TIM_IC_Start_IT+0x142>
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	2b08      	cmp	r3, #8
 800e9da:	d104      	bne.n	800e9e6 <HAL_TIM_IC_Start_IT+0x13a>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2202      	movs	r2, #2
 800e9e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e9e4:	e003      	b.n	800e9ee <HAL_TIM_IC_Start_IT+0x142>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2202      	movs	r2, #2
 800e9ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	2b0c      	cmp	r3, #12
 800e9f2:	d841      	bhi.n	800ea78 <HAL_TIM_IC_Start_IT+0x1cc>
 800e9f4:	a201      	add	r2, pc, #4	; (adr r2, 800e9fc <HAL_TIM_IC_Start_IT+0x150>)
 800e9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fa:	bf00      	nop
 800e9fc:	0800ea31 	.word	0x0800ea31
 800ea00:	0800ea79 	.word	0x0800ea79
 800ea04:	0800ea79 	.word	0x0800ea79
 800ea08:	0800ea79 	.word	0x0800ea79
 800ea0c:	0800ea43 	.word	0x0800ea43
 800ea10:	0800ea79 	.word	0x0800ea79
 800ea14:	0800ea79 	.word	0x0800ea79
 800ea18:	0800ea79 	.word	0x0800ea79
 800ea1c:	0800ea55 	.word	0x0800ea55
 800ea20:	0800ea79 	.word	0x0800ea79
 800ea24:	0800ea79 	.word	0x0800ea79
 800ea28:	0800ea79 	.word	0x0800ea79
 800ea2c:	0800ea67 	.word	0x0800ea67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68da      	ldr	r2, [r3, #12]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f042 0202 	orr.w	r2, r2, #2
 800ea3e:	60da      	str	r2, [r3, #12]
      break;
 800ea40:	e01d      	b.n	800ea7e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	68da      	ldr	r2, [r3, #12]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f042 0204 	orr.w	r2, r2, #4
 800ea50:	60da      	str	r2, [r3, #12]
      break;
 800ea52:	e014      	b.n	800ea7e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	68da      	ldr	r2, [r3, #12]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f042 0208 	orr.w	r2, r2, #8
 800ea62:	60da      	str	r2, [r3, #12]
      break;
 800ea64:	e00b      	b.n	800ea7e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	68da      	ldr	r2, [r3, #12]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f042 0210 	orr.w	r2, r2, #16
 800ea74:	60da      	str	r2, [r3, #12]
      break;
 800ea76:	e002      	b.n	800ea7e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea7c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d14e      	bne.n	800eb22 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f001 f91b 	bl	800fcc8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4a25      	ldr	r2, [pc, #148]	; (800eb2c <HAL_TIM_IC_Start_IT+0x280>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d022      	beq.n	800eae2 <HAL_TIM_IC_Start_IT+0x236>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaa4:	d01d      	beq.n	800eae2 <HAL_TIM_IC_Start_IT+0x236>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4a21      	ldr	r2, [pc, #132]	; (800eb30 <HAL_TIM_IC_Start_IT+0x284>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d018      	beq.n	800eae2 <HAL_TIM_IC_Start_IT+0x236>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	4a1f      	ldr	r2, [pc, #124]	; (800eb34 <HAL_TIM_IC_Start_IT+0x288>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d013      	beq.n	800eae2 <HAL_TIM_IC_Start_IT+0x236>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4a1e      	ldr	r2, [pc, #120]	; (800eb38 <HAL_TIM_IC_Start_IT+0x28c>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d00e      	beq.n	800eae2 <HAL_TIM_IC_Start_IT+0x236>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a1c      	ldr	r2, [pc, #112]	; (800eb3c <HAL_TIM_IC_Start_IT+0x290>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d009      	beq.n	800eae2 <HAL_TIM_IC_Start_IT+0x236>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4a1b      	ldr	r2, [pc, #108]	; (800eb40 <HAL_TIM_IC_Start_IT+0x294>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d004      	beq.n	800eae2 <HAL_TIM_IC_Start_IT+0x236>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a19      	ldr	r2, [pc, #100]	; (800eb44 <HAL_TIM_IC_Start_IT+0x298>)
 800eade:	4293      	cmp	r3, r2
 800eae0:	d115      	bne.n	800eb0e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	689a      	ldr	r2, [r3, #8]
 800eae8:	4b17      	ldr	r3, [pc, #92]	; (800eb48 <HAL_TIM_IC_Start_IT+0x29c>)
 800eaea:	4013      	ands	r3, r2
 800eaec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b06      	cmp	r3, #6
 800eaf2:	d015      	beq.n	800eb20 <HAL_TIM_IC_Start_IT+0x274>
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eafa:	d011      	beq.n	800eb20 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f042 0201 	orr.w	r2, r2, #1
 800eb0a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb0c:	e008      	b.n	800eb20 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f042 0201 	orr.w	r2, r2, #1
 800eb1c:	601a      	str	r2, [r3, #0]
 800eb1e:	e000      	b.n	800eb22 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb20:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	40010000 	.word	0x40010000
 800eb30:	40000400 	.word	0x40000400
 800eb34:	40000800 	.word	0x40000800
 800eb38:	40000c00 	.word	0x40000c00
 800eb3c:	40010400 	.word	0x40010400
 800eb40:	40014000 	.word	0x40014000
 800eb44:	40001800 	.word	0x40001800
 800eb48:	00010007 	.word	0x00010007

0800eb4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d122      	bne.n	800eba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	f003 0302 	and.w	r3, r3, #2
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d11b      	bne.n	800eba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f06f 0202 	mvn.w	r2, #2
 800eb78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	f003 0303 	and.w	r3, r3, #3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d003      	beq.n	800eb96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7f5 fbd6 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 800eb94:	e005      	b.n	800eba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 fbb6 	bl	800f308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fbbd 	bl	800f31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	f003 0304 	and.w	r3, r3, #4
 800ebb2:	2b04      	cmp	r3, #4
 800ebb4:	d122      	bne.n	800ebfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	f003 0304 	and.w	r3, r3, #4
 800ebc0:	2b04      	cmp	r3, #4
 800ebc2:	d11b      	bne.n	800ebfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f06f 0204 	mvn.w	r2, #4
 800ebcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2202      	movs	r2, #2
 800ebd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d003      	beq.n	800ebea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7f5 fbac 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 800ebe8:	e005      	b.n	800ebf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 fb8c 	bl	800f308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 fb93 	bl	800f31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	691b      	ldr	r3, [r3, #16]
 800ec02:	f003 0308 	and.w	r3, r3, #8
 800ec06:	2b08      	cmp	r3, #8
 800ec08:	d122      	bne.n	800ec50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	f003 0308 	and.w	r3, r3, #8
 800ec14:	2b08      	cmp	r3, #8
 800ec16:	d11b      	bne.n	800ec50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f06f 0208 	mvn.w	r2, #8
 800ec20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2204      	movs	r2, #4
 800ec26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	69db      	ldr	r3, [r3, #28]
 800ec2e:	f003 0303 	and.w	r3, r3, #3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7f5 fb82 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 800ec3c:	e005      	b.n	800ec4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 fb62 	bl	800f308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 fb69 	bl	800f31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	691b      	ldr	r3, [r3, #16]
 800ec56:	f003 0310 	and.w	r3, r3, #16
 800ec5a:	2b10      	cmp	r3, #16
 800ec5c:	d122      	bne.n	800eca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	f003 0310 	and.w	r3, r3, #16
 800ec68:	2b10      	cmp	r3, #16
 800ec6a:	d11b      	bne.n	800eca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f06f 0210 	mvn.w	r2, #16
 800ec74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2208      	movs	r2, #8
 800ec7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	69db      	ldr	r3, [r3, #28]
 800ec82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d003      	beq.n	800ec92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7f5 fb58 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 800ec90:	e005      	b.n	800ec9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fb38 	bl	800f308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f000 fb3f 	bl	800f31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d10e      	bne.n	800ecd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	f003 0301 	and.w	r3, r3, #1
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d107      	bne.n	800ecd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f06f 0201 	mvn.w	r2, #1
 800ecc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f7f6 f921 	bl	8004f12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	691b      	ldr	r3, [r3, #16]
 800ecd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecda:	2b80      	cmp	r3, #128	; 0x80
 800ecdc:	d10e      	bne.n	800ecfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece8:	2b80      	cmp	r3, #128	; 0x80
 800ecea:	d107      	bne.n	800ecfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ecf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f001 f922 	bl	800ff40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed0a:	d10e      	bne.n	800ed2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed16:	2b80      	cmp	r3, #128	; 0x80
 800ed18:	d107      	bne.n	800ed2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f001 f915 	bl	800ff54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed34:	2b40      	cmp	r3, #64	; 0x40
 800ed36:	d10e      	bne.n	800ed56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed42:	2b40      	cmp	r3, #64	; 0x40
 800ed44:	d107      	bne.n	800ed56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 faed 	bl	800f330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	f003 0320 	and.w	r3, r3, #32
 800ed60:	2b20      	cmp	r3, #32
 800ed62:	d10e      	bne.n	800ed82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	f003 0320 	and.w	r3, r3, #32
 800ed6e:	2b20      	cmp	r3, #32
 800ed70:	d107      	bne.n	800ed82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f06f 0220 	mvn.w	r2, #32
 800ed7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f001 f8d5 	bl	800ff2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed82:	bf00      	nop
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b086      	sub	sp, #24
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	60f8      	str	r0, [r7, #12]
 800ed92:	60b9      	str	r1, [r7, #8]
 800ed94:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d101      	bne.n	800eda8 <HAL_TIM_IC_ConfigChannel+0x1e>
 800eda4:	2302      	movs	r3, #2
 800eda6:	e088      	b.n	800eeba <HAL_TIM_IC_ConfigChannel+0x130>
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d11b      	bne.n	800edee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800edc6:	f000 fdbb 	bl	800f940 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	699a      	ldr	r2, [r3, #24]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f022 020c 	bic.w	r2, r2, #12
 800edd8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	6999      	ldr	r1, [r3, #24]
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	689a      	ldr	r2, [r3, #8]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	430a      	orrs	r2, r1
 800edea:	619a      	str	r2, [r3, #24]
 800edec:	e060      	b.n	800eeb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2b04      	cmp	r3, #4
 800edf2:	d11c      	bne.n	800ee2e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ee04:	f000 fe3f 	bl	800fa86 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	699a      	ldr	r2, [r3, #24]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ee16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6999      	ldr	r1, [r3, #24]
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	021a      	lsls	r2, r3, #8
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	619a      	str	r2, [r3, #24]
 800ee2c:	e040      	b.n	800eeb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b08      	cmp	r3, #8
 800ee32:	d11b      	bne.n	800ee6c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ee44:	f000 fe8c 	bl	800fb60 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	69da      	ldr	r2, [r3, #28]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f022 020c 	bic.w	r2, r2, #12
 800ee56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	69d9      	ldr	r1, [r3, #28]
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	689a      	ldr	r2, [r3, #8]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	430a      	orrs	r2, r1
 800ee68:	61da      	str	r2, [r3, #28]
 800ee6a:	e021      	b.n	800eeb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b0c      	cmp	r3, #12
 800ee70:	d11c      	bne.n	800eeac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ee82:	f000 fea9 	bl	800fbd8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	69da      	ldr	r2, [r3, #28]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ee94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	69d9      	ldr	r1, [r3, #28]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	021a      	lsls	r2, r3, #8
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	430a      	orrs	r2, r1
 800eea8:	61da      	str	r2, [r3, #28]
 800eeaa:	e001      	b.n	800eeb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800eeac:	2301      	movs	r3, #1
 800eeae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eeb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3718      	adds	r7, #24
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
	...

0800eec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b086      	sub	sp, #24
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eed0:	2300      	movs	r3, #0
 800eed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d101      	bne.n	800eee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eede:	2302      	movs	r3, #2
 800eee0:	e0ff      	b.n	800f0e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2201      	movs	r2, #1
 800eee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b14      	cmp	r3, #20
 800eeee:	f200 80f0 	bhi.w	800f0d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eef2:	a201      	add	r2, pc, #4	; (adr r2, 800eef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef8:	0800ef4d 	.word	0x0800ef4d
 800eefc:	0800f0d3 	.word	0x0800f0d3
 800ef00:	0800f0d3 	.word	0x0800f0d3
 800ef04:	0800f0d3 	.word	0x0800f0d3
 800ef08:	0800ef8d 	.word	0x0800ef8d
 800ef0c:	0800f0d3 	.word	0x0800f0d3
 800ef10:	0800f0d3 	.word	0x0800f0d3
 800ef14:	0800f0d3 	.word	0x0800f0d3
 800ef18:	0800efcf 	.word	0x0800efcf
 800ef1c:	0800f0d3 	.word	0x0800f0d3
 800ef20:	0800f0d3 	.word	0x0800f0d3
 800ef24:	0800f0d3 	.word	0x0800f0d3
 800ef28:	0800f00f 	.word	0x0800f00f
 800ef2c:	0800f0d3 	.word	0x0800f0d3
 800ef30:	0800f0d3 	.word	0x0800f0d3
 800ef34:	0800f0d3 	.word	0x0800f0d3
 800ef38:	0800f051 	.word	0x0800f051
 800ef3c:	0800f0d3 	.word	0x0800f0d3
 800ef40:	0800f0d3 	.word	0x0800f0d3
 800ef44:	0800f0d3 	.word	0x0800f0d3
 800ef48:	0800f091 	.word	0x0800f091
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	68b9      	ldr	r1, [r7, #8]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f000 fa96 	bl	800f484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	699a      	ldr	r2, [r3, #24]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f042 0208 	orr.w	r2, r2, #8
 800ef66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	699a      	ldr	r2, [r3, #24]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f022 0204 	bic.w	r2, r2, #4
 800ef76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6999      	ldr	r1, [r3, #24]
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	691a      	ldr	r2, [r3, #16]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	430a      	orrs	r2, r1
 800ef88:	619a      	str	r2, [r3, #24]
      break;
 800ef8a:	e0a5      	b.n	800f0d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68b9      	ldr	r1, [r7, #8]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f000 fae8 	bl	800f568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699a      	ldr	r2, [r3, #24]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	699a      	ldr	r2, [r3, #24]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	6999      	ldr	r1, [r3, #24]
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	691b      	ldr	r3, [r3, #16]
 800efc2:	021a      	lsls	r2, r3, #8
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	430a      	orrs	r2, r1
 800efca:	619a      	str	r2, [r3, #24]
      break;
 800efcc:	e084      	b.n	800f0d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f000 fb3f 	bl	800f658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	69da      	ldr	r2, [r3, #28]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f042 0208 	orr.w	r2, r2, #8
 800efe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	69da      	ldr	r2, [r3, #28]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f022 0204 	bic.w	r2, r2, #4
 800eff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	69d9      	ldr	r1, [r3, #28]
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	691a      	ldr	r2, [r3, #16]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	430a      	orrs	r2, r1
 800f00a:	61da      	str	r2, [r3, #28]
      break;
 800f00c:	e064      	b.n	800f0d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	4618      	mov	r0, r3
 800f016:	f000 fb95 	bl	800f744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	69da      	ldr	r2, [r3, #28]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	69da      	ldr	r2, [r3, #28]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	69d9      	ldr	r1, [r3, #28]
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	021a      	lsls	r2, r3, #8
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	430a      	orrs	r2, r1
 800f04c:	61da      	str	r2, [r3, #28]
      break;
 800f04e:	e043      	b.n	800f0d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	68b9      	ldr	r1, [r7, #8]
 800f056:	4618      	mov	r0, r3
 800f058:	f000 fbcc 	bl	800f7f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f042 0208 	orr.w	r2, r2, #8
 800f06a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f022 0204 	bic.w	r2, r2, #4
 800f07a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	691a      	ldr	r2, [r3, #16]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	430a      	orrs	r2, r1
 800f08c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f08e:	e023      	b.n	800f0d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	68b9      	ldr	r1, [r7, #8]
 800f096:	4618      	mov	r0, r3
 800f098:	f000 fbfe 	bl	800f898 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	021a      	lsls	r2, r3, #8
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	430a      	orrs	r2, r1
 800f0ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f0d0:	e002      	b.n	800f0d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	75fb      	strb	r3, [r7, #23]
      break;
 800f0d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3718      	adds	r7, #24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop

0800f0ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f100:	2b01      	cmp	r3, #1
 800f102:	d101      	bne.n	800f108 <HAL_TIM_ConfigClockSource+0x1c>
 800f104:	2302      	movs	r3, #2
 800f106:	e0b4      	b.n	800f272 <HAL_TIM_ConfigClockSource+0x186>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2202      	movs	r2, #2
 800f114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	4b56      	ldr	r3, [pc, #344]	; (800f27c <HAL_TIM_ConfigClockSource+0x190>)
 800f124:	4013      	ands	r3, r2
 800f126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f12e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f140:	d03e      	beq.n	800f1c0 <HAL_TIM_ConfigClockSource+0xd4>
 800f142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f146:	f200 8087 	bhi.w	800f258 <HAL_TIM_ConfigClockSource+0x16c>
 800f14a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f14e:	f000 8086 	beq.w	800f25e <HAL_TIM_ConfigClockSource+0x172>
 800f152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f156:	d87f      	bhi.n	800f258 <HAL_TIM_ConfigClockSource+0x16c>
 800f158:	2b70      	cmp	r3, #112	; 0x70
 800f15a:	d01a      	beq.n	800f192 <HAL_TIM_ConfigClockSource+0xa6>
 800f15c:	2b70      	cmp	r3, #112	; 0x70
 800f15e:	d87b      	bhi.n	800f258 <HAL_TIM_ConfigClockSource+0x16c>
 800f160:	2b60      	cmp	r3, #96	; 0x60
 800f162:	d050      	beq.n	800f206 <HAL_TIM_ConfigClockSource+0x11a>
 800f164:	2b60      	cmp	r3, #96	; 0x60
 800f166:	d877      	bhi.n	800f258 <HAL_TIM_ConfigClockSource+0x16c>
 800f168:	2b50      	cmp	r3, #80	; 0x50
 800f16a:	d03c      	beq.n	800f1e6 <HAL_TIM_ConfigClockSource+0xfa>
 800f16c:	2b50      	cmp	r3, #80	; 0x50
 800f16e:	d873      	bhi.n	800f258 <HAL_TIM_ConfigClockSource+0x16c>
 800f170:	2b40      	cmp	r3, #64	; 0x40
 800f172:	d058      	beq.n	800f226 <HAL_TIM_ConfigClockSource+0x13a>
 800f174:	2b40      	cmp	r3, #64	; 0x40
 800f176:	d86f      	bhi.n	800f258 <HAL_TIM_ConfigClockSource+0x16c>
 800f178:	2b30      	cmp	r3, #48	; 0x30
 800f17a:	d064      	beq.n	800f246 <HAL_TIM_ConfigClockSource+0x15a>
 800f17c:	2b30      	cmp	r3, #48	; 0x30
 800f17e:	d86b      	bhi.n	800f258 <HAL_TIM_ConfigClockSource+0x16c>
 800f180:	2b20      	cmp	r3, #32
 800f182:	d060      	beq.n	800f246 <HAL_TIM_ConfigClockSource+0x15a>
 800f184:	2b20      	cmp	r3, #32
 800f186:	d867      	bhi.n	800f258 <HAL_TIM_ConfigClockSource+0x16c>
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d05c      	beq.n	800f246 <HAL_TIM_ConfigClockSource+0x15a>
 800f18c:	2b10      	cmp	r3, #16
 800f18e:	d05a      	beq.n	800f246 <HAL_TIM_ConfigClockSource+0x15a>
 800f190:	e062      	b.n	800f258 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f1a2:	f000 fd71 	bl	800fc88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f1b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	609a      	str	r2, [r3, #8]
      break;
 800f1be:	e04f      	b.n	800f260 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f1d0:	f000 fd5a 	bl	800fc88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	689a      	ldr	r2, [r3, #8]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f1e2:	609a      	str	r2, [r3, #8]
      break;
 800f1e4:	e03c      	b.n	800f260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	f000 fc18 	bl	800fa28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2150      	movs	r1, #80	; 0x50
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 fd27 	bl	800fc52 <TIM_ITRx_SetConfig>
      break;
 800f204:	e02c      	b.n	800f260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f212:	461a      	mov	r2, r3
 800f214:	f000 fc74 	bl	800fb00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	2160      	movs	r1, #96	; 0x60
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fd17 	bl	800fc52 <TIM_ITRx_SetConfig>
      break;
 800f224:	e01c      	b.n	800f260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f232:	461a      	mov	r2, r3
 800f234:	f000 fbf8 	bl	800fa28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2140      	movs	r1, #64	; 0x40
 800f23e:	4618      	mov	r0, r3
 800f240:	f000 fd07 	bl	800fc52 <TIM_ITRx_SetConfig>
      break;
 800f244:	e00c      	b.n	800f260 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4619      	mov	r1, r3
 800f250:	4610      	mov	r0, r2
 800f252:	f000 fcfe 	bl	800fc52 <TIM_ITRx_SetConfig>
      break;
 800f256:	e003      	b.n	800f260 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f258:	2301      	movs	r3, #1
 800f25a:	73fb      	strb	r3, [r7, #15]
      break;
 800f25c:	e000      	b.n	800f260 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f25e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2201      	movs	r2, #1
 800f264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f270:	7bfb      	ldrb	r3, [r7, #15]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	fffeff88 	.word	0xfffeff88

0800f280 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800f28a:	2300      	movs	r3, #0
 800f28c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	2b0c      	cmp	r3, #12
 800f292:	d831      	bhi.n	800f2f8 <HAL_TIM_ReadCapturedValue+0x78>
 800f294:	a201      	add	r2, pc, #4	; (adr r2, 800f29c <HAL_TIM_ReadCapturedValue+0x1c>)
 800f296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29a:	bf00      	nop
 800f29c:	0800f2d1 	.word	0x0800f2d1
 800f2a0:	0800f2f9 	.word	0x0800f2f9
 800f2a4:	0800f2f9 	.word	0x0800f2f9
 800f2a8:	0800f2f9 	.word	0x0800f2f9
 800f2ac:	0800f2db 	.word	0x0800f2db
 800f2b0:	0800f2f9 	.word	0x0800f2f9
 800f2b4:	0800f2f9 	.word	0x0800f2f9
 800f2b8:	0800f2f9 	.word	0x0800f2f9
 800f2bc:	0800f2e5 	.word	0x0800f2e5
 800f2c0:	0800f2f9 	.word	0x0800f2f9
 800f2c4:	0800f2f9 	.word	0x0800f2f9
 800f2c8:	0800f2f9 	.word	0x0800f2f9
 800f2cc:	0800f2ef 	.word	0x0800f2ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d6:	60fb      	str	r3, [r7, #12]

      break;
 800f2d8:	e00f      	b.n	800f2fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e0:	60fb      	str	r3, [r7, #12]

      break;
 800f2e2:	e00a      	b.n	800f2fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ea:	60fb      	str	r3, [r7, #12]

      break;
 800f2ec:	e005      	b.n	800f2fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f4:	60fb      	str	r3, [r7, #12]

      break;
 800f2f6:	e000      	b.n	800f2fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800f2f8:	bf00      	nop
  }

  return tmpreg;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f324:	bf00      	nop
 800f326:	370c      	adds	r7, #12
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f338:	bf00      	nop
 800f33a:	370c      	adds	r7, #12
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a40      	ldr	r2, [pc, #256]	; (800f458 <TIM_Base_SetConfig+0x114>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d013      	beq.n	800f384 <TIM_Base_SetConfig+0x40>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f362:	d00f      	beq.n	800f384 <TIM_Base_SetConfig+0x40>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4a3d      	ldr	r2, [pc, #244]	; (800f45c <TIM_Base_SetConfig+0x118>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d00b      	beq.n	800f384 <TIM_Base_SetConfig+0x40>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4a3c      	ldr	r2, [pc, #240]	; (800f460 <TIM_Base_SetConfig+0x11c>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d007      	beq.n	800f384 <TIM_Base_SetConfig+0x40>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4a3b      	ldr	r2, [pc, #236]	; (800f464 <TIM_Base_SetConfig+0x120>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d003      	beq.n	800f384 <TIM_Base_SetConfig+0x40>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4a3a      	ldr	r2, [pc, #232]	; (800f468 <TIM_Base_SetConfig+0x124>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d108      	bne.n	800f396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f38a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	4313      	orrs	r3, r2
 800f394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a2f      	ldr	r2, [pc, #188]	; (800f458 <TIM_Base_SetConfig+0x114>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d02b      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3a4:	d027      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a2c      	ldr	r2, [pc, #176]	; (800f45c <TIM_Base_SetConfig+0x118>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d023      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a2b      	ldr	r2, [pc, #172]	; (800f460 <TIM_Base_SetConfig+0x11c>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d01f      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a2a      	ldr	r2, [pc, #168]	; (800f464 <TIM_Base_SetConfig+0x120>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d01b      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a29      	ldr	r2, [pc, #164]	; (800f468 <TIM_Base_SetConfig+0x124>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d017      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a28      	ldr	r2, [pc, #160]	; (800f46c <TIM_Base_SetConfig+0x128>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d013      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a27      	ldr	r2, [pc, #156]	; (800f470 <TIM_Base_SetConfig+0x12c>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d00f      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a26      	ldr	r2, [pc, #152]	; (800f474 <TIM_Base_SetConfig+0x130>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d00b      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4a25      	ldr	r2, [pc, #148]	; (800f478 <TIM_Base_SetConfig+0x134>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d007      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4a24      	ldr	r2, [pc, #144]	; (800f47c <TIM_Base_SetConfig+0x138>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d003      	beq.n	800f3f6 <TIM_Base_SetConfig+0xb2>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4a23      	ldr	r2, [pc, #140]	; (800f480 <TIM_Base_SetConfig+0x13c>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d108      	bne.n	800f408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	4313      	orrs	r3, r2
 800f406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	4313      	orrs	r3, r2
 800f414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	689a      	ldr	r2, [r3, #8]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a0a      	ldr	r2, [pc, #40]	; (800f458 <TIM_Base_SetConfig+0x114>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d003      	beq.n	800f43c <TIM_Base_SetConfig+0xf8>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a0c      	ldr	r2, [pc, #48]	; (800f468 <TIM_Base_SetConfig+0x124>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d103      	bne.n	800f444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	691a      	ldr	r2, [r3, #16]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	615a      	str	r2, [r3, #20]
}
 800f44a:	bf00      	nop
 800f44c:	3714      	adds	r7, #20
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr
 800f456:	bf00      	nop
 800f458:	40010000 	.word	0x40010000
 800f45c:	40000400 	.word	0x40000400
 800f460:	40000800 	.word	0x40000800
 800f464:	40000c00 	.word	0x40000c00
 800f468:	40010400 	.word	0x40010400
 800f46c:	40014000 	.word	0x40014000
 800f470:	40014400 	.word	0x40014400
 800f474:	40014800 	.word	0x40014800
 800f478:	40001800 	.word	0x40001800
 800f47c:	40001c00 	.word	0x40001c00
 800f480:	40002000 	.word	0x40002000

0800f484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a1b      	ldr	r3, [r3, #32]
 800f492:	f023 0201 	bic.w	r2, r3, #1
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a1b      	ldr	r3, [r3, #32]
 800f49e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	699b      	ldr	r3, [r3, #24]
 800f4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	4b2b      	ldr	r3, [pc, #172]	; (800f55c <TIM_OC1_SetConfig+0xd8>)
 800f4b0:	4013      	ands	r3, r2
 800f4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f023 0303 	bic.w	r3, r3, #3
 800f4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	f023 0302 	bic.w	r3, r3, #2
 800f4cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	697a      	ldr	r2, [r7, #20]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a21      	ldr	r2, [pc, #132]	; (800f560 <TIM_OC1_SetConfig+0xdc>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d003      	beq.n	800f4e8 <TIM_OC1_SetConfig+0x64>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a20      	ldr	r2, [pc, #128]	; (800f564 <TIM_OC1_SetConfig+0xe0>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d10c      	bne.n	800f502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	f023 0308 	bic.w	r3, r3, #8
 800f4ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	f023 0304 	bic.w	r3, r3, #4
 800f500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a16      	ldr	r2, [pc, #88]	; (800f560 <TIM_OC1_SetConfig+0xdc>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d003      	beq.n	800f512 <TIM_OC1_SetConfig+0x8e>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a15      	ldr	r2, [pc, #84]	; (800f564 <TIM_OC1_SetConfig+0xe0>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d111      	bne.n	800f536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	695b      	ldr	r3, [r3, #20]
 800f526:	693a      	ldr	r2, [r7, #16]
 800f528:	4313      	orrs	r3, r2
 800f52a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	4313      	orrs	r3, r2
 800f534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	693a      	ldr	r2, [r7, #16]
 800f53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	685a      	ldr	r2, [r3, #4]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	697a      	ldr	r2, [r7, #20]
 800f54e:	621a      	str	r2, [r3, #32]
}
 800f550:	bf00      	nop
 800f552:	371c      	adds	r7, #28
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	fffeff8f 	.word	0xfffeff8f
 800f560:	40010000 	.word	0x40010000
 800f564:	40010400 	.word	0x40010400

0800f568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f568:	b480      	push	{r7}
 800f56a:	b087      	sub	sp, #28
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a1b      	ldr	r3, [r3, #32]
 800f576:	f023 0210 	bic.w	r2, r3, #16
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6a1b      	ldr	r3, [r3, #32]
 800f582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	699b      	ldr	r3, [r3, #24]
 800f58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	4b2e      	ldr	r3, [pc, #184]	; (800f64c <TIM_OC2_SetConfig+0xe4>)
 800f594:	4013      	ands	r3, r2
 800f596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	021b      	lsls	r3, r3, #8
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	f023 0320 	bic.w	r3, r3, #32
 800f5b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	011b      	lsls	r3, r3, #4
 800f5ba:	697a      	ldr	r2, [r7, #20]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a23      	ldr	r2, [pc, #140]	; (800f650 <TIM_OC2_SetConfig+0xe8>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d003      	beq.n	800f5d0 <TIM_OC2_SetConfig+0x68>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a22      	ldr	r2, [pc, #136]	; (800f654 <TIM_OC2_SetConfig+0xec>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d10d      	bne.n	800f5ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	011b      	lsls	r3, r3, #4
 800f5de:	697a      	ldr	r2, [r7, #20]
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a18      	ldr	r2, [pc, #96]	; (800f650 <TIM_OC2_SetConfig+0xe8>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d003      	beq.n	800f5fc <TIM_OC2_SetConfig+0x94>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a17      	ldr	r2, [pc, #92]	; (800f654 <TIM_OC2_SetConfig+0xec>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d113      	bne.n	800f624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f60a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	695b      	ldr	r3, [r3, #20]
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	4313      	orrs	r3, r2
 800f616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	699b      	ldr	r3, [r3, #24]
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	4313      	orrs	r3, r2
 800f622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	693a      	ldr	r2, [r7, #16]
 800f628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	685a      	ldr	r2, [r3, #4]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	697a      	ldr	r2, [r7, #20]
 800f63c:	621a      	str	r2, [r3, #32]
}
 800f63e:	bf00      	nop
 800f640:	371c      	adds	r7, #28
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	feff8fff 	.word	0xfeff8fff
 800f650:	40010000 	.word	0x40010000
 800f654:	40010400 	.word	0x40010400

0800f658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f658:	b480      	push	{r7}
 800f65a:	b087      	sub	sp, #28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a1b      	ldr	r3, [r3, #32]
 800f666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6a1b      	ldr	r3, [r3, #32]
 800f672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	69db      	ldr	r3, [r3, #28]
 800f67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	4b2d      	ldr	r3, [pc, #180]	; (800f738 <TIM_OC3_SetConfig+0xe0>)
 800f684:	4013      	ands	r3, r2
 800f686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f023 0303 	bic.w	r3, r3, #3
 800f68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	4313      	orrs	r3, r2
 800f698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	689b      	ldr	r3, [r3, #8]
 800f6a6:	021b      	lsls	r3, r3, #8
 800f6a8:	697a      	ldr	r2, [r7, #20]
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4a22      	ldr	r2, [pc, #136]	; (800f73c <TIM_OC3_SetConfig+0xe4>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d003      	beq.n	800f6be <TIM_OC3_SetConfig+0x66>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4a21      	ldr	r2, [pc, #132]	; (800f740 <TIM_OC3_SetConfig+0xe8>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d10d      	bne.n	800f6da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	021b      	lsls	r3, r3, #8
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f6d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4a17      	ldr	r2, [pc, #92]	; (800f73c <TIM_OC3_SetConfig+0xe4>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d003      	beq.n	800f6ea <TIM_OC3_SetConfig+0x92>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	4a16      	ldr	r2, [pc, #88]	; (800f740 <TIM_OC3_SetConfig+0xe8>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d113      	bne.n	800f712 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	695b      	ldr	r3, [r3, #20]
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	693a      	ldr	r2, [r7, #16]
 800f702:	4313      	orrs	r3, r2
 800f704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	699b      	ldr	r3, [r3, #24]
 800f70a:	011b      	lsls	r3, r3, #4
 800f70c:	693a      	ldr	r2, [r7, #16]
 800f70e:	4313      	orrs	r3, r2
 800f710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	685a      	ldr	r2, [r3, #4]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	697a      	ldr	r2, [r7, #20]
 800f72a:	621a      	str	r2, [r3, #32]
}
 800f72c:	bf00      	nop
 800f72e:	371c      	adds	r7, #28
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr
 800f738:	fffeff8f 	.word	0xfffeff8f
 800f73c:	40010000 	.word	0x40010000
 800f740:	40010400 	.word	0x40010400

0800f744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f744:	b480      	push	{r7}
 800f746:	b087      	sub	sp, #28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6a1b      	ldr	r3, [r3, #32]
 800f752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	69db      	ldr	r3, [r3, #28]
 800f76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	4b1e      	ldr	r3, [pc, #120]	; (800f7e8 <TIM_OC4_SetConfig+0xa4>)
 800f770:	4013      	ands	r3, r2
 800f772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f77a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	021b      	lsls	r3, r3, #8
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	4313      	orrs	r3, r2
 800f786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f78e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	689b      	ldr	r3, [r3, #8]
 800f794:	031b      	lsls	r3, r3, #12
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	4313      	orrs	r3, r2
 800f79a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a13      	ldr	r2, [pc, #76]	; (800f7ec <TIM_OC4_SetConfig+0xa8>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d003      	beq.n	800f7ac <TIM_OC4_SetConfig+0x68>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a12      	ldr	r2, [pc, #72]	; (800f7f0 <TIM_OC4_SetConfig+0xac>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d109      	bne.n	800f7c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	019b      	lsls	r3, r3, #6
 800f7ba:	697a      	ldr	r2, [r7, #20]
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	697a      	ldr	r2, [r7, #20]
 800f7c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	685a      	ldr	r2, [r3, #4]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	621a      	str	r2, [r3, #32]
}
 800f7da:	bf00      	nop
 800f7dc:	371c      	adds	r7, #28
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	feff8fff 	.word	0xfeff8fff
 800f7ec:	40010000 	.word	0x40010000
 800f7f0:	40010400 	.word	0x40010400

0800f7f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6a1b      	ldr	r3, [r3, #32]
 800f80e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	4b1b      	ldr	r3, [pc, #108]	; (800f88c <TIM_OC5_SetConfig+0x98>)
 800f820:	4013      	ands	r3, r2
 800f822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f834:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	041b      	lsls	r3, r3, #16
 800f83c:	693a      	ldr	r2, [r7, #16]
 800f83e:	4313      	orrs	r3, r2
 800f840:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4a12      	ldr	r2, [pc, #72]	; (800f890 <TIM_OC5_SetConfig+0x9c>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d003      	beq.n	800f852 <TIM_OC5_SetConfig+0x5e>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4a11      	ldr	r2, [pc, #68]	; (800f894 <TIM_OC5_SetConfig+0xa0>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d109      	bne.n	800f866 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	695b      	ldr	r3, [r3, #20]
 800f85e:	021b      	lsls	r3, r3, #8
 800f860:	697a      	ldr	r2, [r7, #20]
 800f862:	4313      	orrs	r3, r2
 800f864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	697a      	ldr	r2, [r7, #20]
 800f86a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	685a      	ldr	r2, [r3, #4]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	621a      	str	r2, [r3, #32]
}
 800f880:	bf00      	nop
 800f882:	371c      	adds	r7, #28
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr
 800f88c:	fffeff8f 	.word	0xfffeff8f
 800f890:	40010000 	.word	0x40010000
 800f894:	40010400 	.word	0x40010400

0800f898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f898:	b480      	push	{r7}
 800f89a:	b087      	sub	sp, #28
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a1b      	ldr	r3, [r3, #32]
 800f8a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a1b      	ldr	r3, [r3, #32]
 800f8b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	4b1c      	ldr	r3, [pc, #112]	; (800f934 <TIM_OC6_SetConfig+0x9c>)
 800f8c4:	4013      	ands	r3, r2
 800f8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	021b      	lsls	r3, r3, #8
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	689b      	ldr	r3, [r3, #8]
 800f8e0:	051b      	lsls	r3, r3, #20
 800f8e2:	693a      	ldr	r2, [r7, #16]
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4a13      	ldr	r2, [pc, #76]	; (800f938 <TIM_OC6_SetConfig+0xa0>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d003      	beq.n	800f8f8 <TIM_OC6_SetConfig+0x60>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4a12      	ldr	r2, [pc, #72]	; (800f93c <TIM_OC6_SetConfig+0xa4>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d109      	bne.n	800f90c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f8fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	695b      	ldr	r3, [r3, #20]
 800f904:	029b      	lsls	r3, r3, #10
 800f906:	697a      	ldr	r2, [r7, #20]
 800f908:	4313      	orrs	r3, r2
 800f90a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	697a      	ldr	r2, [r7, #20]
 800f910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	685a      	ldr	r2, [r3, #4]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	621a      	str	r2, [r3, #32]
}
 800f926:	bf00      	nop
 800f928:	371c      	adds	r7, #28
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	feff8fff 	.word	0xfeff8fff
 800f938:	40010000 	.word	0x40010000
 800f93c:	40010400 	.word	0x40010400

0800f940 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f940:	b480      	push	{r7}
 800f942:	b087      	sub	sp, #28
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
 800f94c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	f023 0201 	bic.w	r2, r3, #1
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	699b      	ldr	r3, [r3, #24]
 800f95e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6a1b      	ldr	r3, [r3, #32]
 800f964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	4a28      	ldr	r2, [pc, #160]	; (800fa0c <TIM_TI1_SetConfig+0xcc>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d01b      	beq.n	800f9a6 <TIM_TI1_SetConfig+0x66>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f974:	d017      	beq.n	800f9a6 <TIM_TI1_SetConfig+0x66>
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	4a25      	ldr	r2, [pc, #148]	; (800fa10 <TIM_TI1_SetConfig+0xd0>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d013      	beq.n	800f9a6 <TIM_TI1_SetConfig+0x66>
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	4a24      	ldr	r2, [pc, #144]	; (800fa14 <TIM_TI1_SetConfig+0xd4>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d00f      	beq.n	800f9a6 <TIM_TI1_SetConfig+0x66>
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	4a23      	ldr	r2, [pc, #140]	; (800fa18 <TIM_TI1_SetConfig+0xd8>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d00b      	beq.n	800f9a6 <TIM_TI1_SetConfig+0x66>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	4a22      	ldr	r2, [pc, #136]	; (800fa1c <TIM_TI1_SetConfig+0xdc>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d007      	beq.n	800f9a6 <TIM_TI1_SetConfig+0x66>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	4a21      	ldr	r2, [pc, #132]	; (800fa20 <TIM_TI1_SetConfig+0xe0>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d003      	beq.n	800f9a6 <TIM_TI1_SetConfig+0x66>
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	4a20      	ldr	r2, [pc, #128]	; (800fa24 <TIM_TI1_SetConfig+0xe4>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d101      	bne.n	800f9aa <TIM_TI1_SetConfig+0x6a>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e000      	b.n	800f9ac <TIM_TI1_SetConfig+0x6c>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d008      	beq.n	800f9c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	f023 0303 	bic.w	r3, r3, #3
 800f9b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f9b8:	697a      	ldr	r2, [r7, #20]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	617b      	str	r3, [r7, #20]
 800f9c0:	e003      	b.n	800f9ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	f043 0301 	orr.w	r3, r3, #1
 800f9c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f9d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	011b      	lsls	r3, r3, #4
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	697a      	ldr	r2, [r7, #20]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	f023 030a 	bic.w	r3, r3, #10
 800f9e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	f003 030a 	and.w	r3, r3, #10
 800f9ec:	693a      	ldr	r2, [r7, #16]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	697a      	ldr	r2, [r7, #20]
 800f9f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	693a      	ldr	r2, [r7, #16]
 800f9fc:	621a      	str	r2, [r3, #32]
}
 800f9fe:	bf00      	nop
 800fa00:	371c      	adds	r7, #28
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop
 800fa0c:	40010000 	.word	0x40010000
 800fa10:	40000400 	.word	0x40000400
 800fa14:	40000800 	.word	0x40000800
 800fa18:	40000c00 	.word	0x40000c00
 800fa1c:	40010400 	.word	0x40010400
 800fa20:	40014000 	.word	0x40014000
 800fa24:	40001800 	.word	0x40001800

0800fa28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6a1b      	ldr	r3, [r3, #32]
 800fa38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	6a1b      	ldr	r3, [r3, #32]
 800fa3e:	f023 0201 	bic.w	r2, r3, #1
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	699b      	ldr	r3, [r3, #24]
 800fa4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	011b      	lsls	r3, r3, #4
 800fa58:	693a      	ldr	r2, [r7, #16]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	f023 030a 	bic.w	r3, r3, #10
 800fa64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa66:	697a      	ldr	r2, [r7, #20]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	693a      	ldr	r2, [r7, #16]
 800fa72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	697a      	ldr	r2, [r7, #20]
 800fa78:	621a      	str	r2, [r3, #32]
}
 800fa7a:	bf00      	nop
 800fa7c:	371c      	adds	r7, #28
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr

0800fa86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fa86:	b480      	push	{r7}
 800fa88:	b087      	sub	sp, #28
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	60f8      	str	r0, [r7, #12]
 800fa8e:	60b9      	str	r1, [r7, #8]
 800fa90:	607a      	str	r2, [r7, #4]
 800fa92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6a1b      	ldr	r3, [r3, #32]
 800fa98:	f023 0210 	bic.w	r2, r3, #16
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6a1b      	ldr	r3, [r3, #32]
 800faaa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	021b      	lsls	r3, r3, #8
 800fab8:	697a      	ldr	r2, [r7, #20]
 800faba:	4313      	orrs	r3, r2
 800fabc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	031b      	lsls	r3, r3, #12
 800faca:	b29b      	uxth	r3, r3
 800facc:	697a      	ldr	r2, [r7, #20]
 800face:	4313      	orrs	r3, r2
 800fad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fad8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	011b      	lsls	r3, r3, #4
 800fade:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fae2:	693a      	ldr	r2, [r7, #16]
 800fae4:	4313      	orrs	r3, r2
 800fae6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	693a      	ldr	r2, [r7, #16]
 800faf2:	621a      	str	r2, [r3, #32]
}
 800faf4:	bf00      	nop
 800faf6:	371c      	adds	r7, #28
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b087      	sub	sp, #28
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6a1b      	ldr	r3, [r3, #32]
 800fb10:	f023 0210 	bic.w	r2, r3, #16
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	699b      	ldr	r3, [r3, #24]
 800fb1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6a1b      	ldr	r3, [r3, #32]
 800fb22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fb2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	031b      	lsls	r3, r3, #12
 800fb30:	697a      	ldr	r2, [r7, #20]
 800fb32:	4313      	orrs	r3, r2
 800fb34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fb3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	011b      	lsls	r3, r3, #4
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	4313      	orrs	r3, r2
 800fb46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	697a      	ldr	r2, [r7, #20]
 800fb4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	693a      	ldr	r2, [r7, #16]
 800fb52:	621a      	str	r2, [r3, #32]
}
 800fb54:	bf00      	nop
 800fb56:	371c      	adds	r7, #28
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b087      	sub	sp, #28
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
 800fb6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6a1b      	ldr	r3, [r3, #32]
 800fb72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	69db      	ldr	r3, [r3, #28]
 800fb7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	6a1b      	ldr	r3, [r3, #32]
 800fb84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	f023 0303 	bic.w	r3, r3, #3
 800fb8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4313      	orrs	r3, r2
 800fb94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	011b      	lsls	r3, r3, #4
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	697a      	ldr	r2, [r7, #20]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fbb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	021b      	lsls	r3, r3, #8
 800fbb6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	621a      	str	r2, [r3, #32]
}
 800fbcc:	bf00      	nop
 800fbce:	371c      	adds	r7, #28
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b087      	sub	sp, #28
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
 800fbe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6a1b      	ldr	r3, [r3, #32]
 800fbea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	69db      	ldr	r3, [r3, #28]
 800fbf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	6a1b      	ldr	r3, [r3, #32]
 800fbfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	021b      	lsls	r3, r3, #8
 800fc0a:	697a      	ldr	r2, [r7, #20]
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	031b      	lsls	r3, r3, #12
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	697a      	ldr	r2, [r7, #20]
 800fc20:	4313      	orrs	r3, r2
 800fc22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fc2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	031b      	lsls	r3, r3, #12
 800fc30:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fc34:	693a      	ldr	r2, [r7, #16]
 800fc36:	4313      	orrs	r3, r2
 800fc38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	697a      	ldr	r2, [r7, #20]
 800fc3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	693a      	ldr	r2, [r7, #16]
 800fc44:	621a      	str	r2, [r3, #32]
}
 800fc46:	bf00      	nop
 800fc48:	371c      	adds	r7, #28
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc52:	b480      	push	{r7}
 800fc54:	b085      	sub	sp, #20
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
 800fc5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	f043 0307 	orr.w	r3, r3, #7
 800fc74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	609a      	str	r2, [r3, #8]
}
 800fc7c:	bf00      	nop
 800fc7e:	3714      	adds	r7, #20
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b087      	sub	sp, #28
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
 800fc94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	689b      	ldr	r3, [r3, #8]
 800fc9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	021a      	lsls	r2, r3, #8
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	431a      	orrs	r2, r3
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	697a      	ldr	r2, [r7, #20]
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	697a      	ldr	r2, [r7, #20]
 800fcba:	609a      	str	r2, [r3, #8]
}
 800fcbc:	bf00      	nop
 800fcbe:	371c      	adds	r7, #28
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b087      	sub	sp, #28
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	60f8      	str	r0, [r7, #12]
 800fcd0:	60b9      	str	r1, [r7, #8]
 800fcd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	f003 031f 	and.w	r3, r3, #31
 800fcda:	2201      	movs	r2, #1
 800fcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800fce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	6a1a      	ldr	r2, [r3, #32]
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	43db      	mvns	r3, r3
 800fcea:	401a      	ands	r2, r3
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	6a1a      	ldr	r2, [r3, #32]
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	f003 031f 	and.w	r3, r3, #31
 800fcfa:	6879      	ldr	r1, [r7, #4]
 800fcfc:	fa01 f303 	lsl.w	r3, r1, r3
 800fd00:	431a      	orrs	r2, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	621a      	str	r2, [r3, #32]
}
 800fd06:	bf00      	nop
 800fd08:	371c      	adds	r7, #28
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr
	...

0800fd14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d101      	bne.n	800fd2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd28:	2302      	movs	r3, #2
 800fd2a:	e06d      	b.n	800fe08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2202      	movs	r2, #2
 800fd38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	689b      	ldr	r3, [r3, #8]
 800fd4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a30      	ldr	r2, [pc, #192]	; (800fe14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d004      	beq.n	800fd60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a2f      	ldr	r2, [pc, #188]	; (800fe18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d108      	bne.n	800fd72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	68fa      	ldr	r2, [r7, #12]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	4313      	orrs	r3, r2
 800fd82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a20      	ldr	r2, [pc, #128]	; (800fe14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d022      	beq.n	800fddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd9e:	d01d      	beq.n	800fddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a1d      	ldr	r2, [pc, #116]	; (800fe1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d018      	beq.n	800fddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a1c      	ldr	r2, [pc, #112]	; (800fe20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d013      	beq.n	800fddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a1a      	ldr	r2, [pc, #104]	; (800fe24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d00e      	beq.n	800fddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	4a15      	ldr	r2, [pc, #84]	; (800fe18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d009      	beq.n	800fddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4a16      	ldr	r2, [pc, #88]	; (800fe28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d004      	beq.n	800fddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4a15      	ldr	r2, [pc, #84]	; (800fe2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d10c      	bne.n	800fdf6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fde2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	689b      	ldr	r3, [r3, #8]
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	4313      	orrs	r3, r2
 800fdec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	68ba      	ldr	r2, [r7, #8]
 800fdf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe06:	2300      	movs	r3, #0
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3714      	adds	r7, #20
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr
 800fe14:	40010000 	.word	0x40010000
 800fe18:	40010400 	.word	0x40010400
 800fe1c:	40000400 	.word	0x40000400
 800fe20:	40000800 	.word	0x40000800
 800fe24:	40000c00 	.word	0x40000c00
 800fe28:	40014000 	.word	0x40014000
 800fe2c:	40001800 	.word	0x40001800

0800fe30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b085      	sub	sp, #20
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d101      	bne.n	800fe4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe48:	2302      	movs	r3, #2
 800fe4a:	e065      	b.n	800ff18 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	691b      	ldr	r3, [r3, #16]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	695b      	ldr	r3, [r3, #20]
 800fea4:	4313      	orrs	r3, r2
 800fea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feb2:	4313      	orrs	r3, r2
 800feb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	699b      	ldr	r3, [r3, #24]
 800fec0:	041b      	lsls	r3, r3, #16
 800fec2:	4313      	orrs	r3, r2
 800fec4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a16      	ldr	r2, [pc, #88]	; (800ff24 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d004      	beq.n	800feda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4a14      	ldr	r2, [pc, #80]	; (800ff28 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d115      	bne.n	800ff06 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee4:	051b      	lsls	r3, r3, #20
 800fee6:	4313      	orrs	r3, r2
 800fee8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	69db      	ldr	r3, [r3, #28]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	6a1b      	ldr	r3, [r3, #32]
 800ff02:	4313      	orrs	r3, r2
 800ff04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	40010000 	.word	0x40010000
 800ff28:	40010400 	.word	0x40010400

0800ff2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff5c:	bf00      	nop
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d101      	bne.n	800ff7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff76:	2301      	movs	r3, #1
 800ff78:	e040      	b.n	800fffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d106      	bne.n	800ff90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7f6 fde8 	bl	8006b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2224      	movs	r2, #36	; 0x24
 800ff94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f022 0201 	bic.w	r2, r2, #1
 800ffa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fc2a 	bl	8010800 <UART_SetConfig>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d101      	bne.n	800ffb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e022      	b.n	800fffc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d002      	beq.n	800ffc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fe82 	bl	8010cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	685a      	ldr	r2, [r3, #4]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	689a      	ldr	r2, [r3, #8]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f042 0201 	orr.w	r2, r2, #1
 800fff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 ff09 	bl	8010e0c <UART_CheckIdleState>
 800fffa:	4603      	mov	r3, r0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b08a      	sub	sp, #40	; 0x28
 8010008:	af02      	add	r7, sp, #8
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	603b      	str	r3, [r7, #0]
 8010010:	4613      	mov	r3, r2
 8010012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010018:	2b20      	cmp	r3, #32
 801001a:	d171      	bne.n	8010100 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d002      	beq.n	8010028 <HAL_UART_Transmit+0x24>
 8010022:	88fb      	ldrh	r3, [r7, #6]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d101      	bne.n	801002c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8010028:	2301      	movs	r3, #1
 801002a:	e06a      	b.n	8010102 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2200      	movs	r2, #0
 8010030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2221      	movs	r2, #33	; 0x21
 8010038:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801003a:	f7fa fd3b 	bl	800aab4 <HAL_GetTick>
 801003e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	88fa      	ldrh	r2, [r7, #6]
 8010044:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	88fa      	ldrh	r2, [r7, #6]
 801004c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	689b      	ldr	r3, [r3, #8]
 8010054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010058:	d108      	bne.n	801006c <HAL_UART_Transmit+0x68>
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d104      	bne.n	801006c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	61bb      	str	r3, [r7, #24]
 801006a:	e003      	b.n	8010074 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010070:	2300      	movs	r3, #0
 8010072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010074:	e02c      	b.n	80100d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	2200      	movs	r2, #0
 801007e:	2180      	movs	r1, #128	; 0x80
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f000 fefa 	bl	8010e7a <UART_WaitOnFlagUntilTimeout>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d001      	beq.n	8010090 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801008c:	2303      	movs	r3, #3
 801008e:	e038      	b.n	8010102 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10b      	bne.n	80100ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010096:	69bb      	ldr	r3, [r7, #24]
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	461a      	mov	r2, r3
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80100a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	3302      	adds	r3, #2
 80100aa:	61bb      	str	r3, [r7, #24]
 80100ac:	e007      	b.n	80100be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	781a      	ldrb	r2, [r3, #0]
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	3301      	adds	r3, #1
 80100bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	3b01      	subs	r3, #1
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d1cc      	bne.n	8010076 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	2200      	movs	r2, #0
 80100e4:	2140      	movs	r1, #64	; 0x40
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f000 fec7 	bl	8010e7a <UART_WaitOnFlagUntilTimeout>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d001      	beq.n	80100f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80100f2:	2303      	movs	r3, #3
 80100f4:	e005      	b.n	8010102 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2220      	movs	r2, #32
 80100fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80100fc:	2300      	movs	r3, #0
 80100fe:	e000      	b.n	8010102 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8010100:	2302      	movs	r3, #2
  }
}
 8010102:	4618      	mov	r0, r3
 8010104:	3720      	adds	r7, #32
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b08a      	sub	sp, #40	; 0x28
 801010e:	af00      	add	r7, sp, #0
 8010110:	60f8      	str	r0, [r7, #12]
 8010112:	60b9      	str	r1, [r7, #8]
 8010114:	4613      	mov	r3, r2
 8010116:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801011e:	2b20      	cmp	r3, #32
 8010120:	d132      	bne.n	8010188 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <HAL_UART_Receive_IT+0x24>
 8010128:	88fb      	ldrh	r3, [r7, #6]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801012e:	2301      	movs	r3, #1
 8010130:	e02b      	b.n	801018a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2200      	movs	r2, #0
 8010136:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010142:	2b00      	cmp	r3, #0
 8010144:	d018      	beq.n	8010178 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	e853 3f00 	ldrex	r3, [r3]
 8010152:	613b      	str	r3, [r7, #16]
   return(result);
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801015a:	627b      	str	r3, [r7, #36]	; 0x24
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	461a      	mov	r2, r3
 8010162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010164:	623b      	str	r3, [r7, #32]
 8010166:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010168:	69f9      	ldr	r1, [r7, #28]
 801016a:	6a3a      	ldr	r2, [r7, #32]
 801016c:	e841 2300 	strex	r3, r2, [r1]
 8010170:	61bb      	str	r3, [r7, #24]
   return(result);
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d1e6      	bne.n	8010146 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010178:	88fb      	ldrh	r3, [r7, #6]
 801017a:	461a      	mov	r2, r3
 801017c:	68b9      	ldr	r1, [r7, #8]
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f000 ff42 	bl	8011008 <UART_Start_Receive_IT>
 8010184:	4603      	mov	r3, r0
 8010186:	e000      	b.n	801018a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8010188:	2302      	movs	r3, #2
  }
}
 801018a:	4618      	mov	r0, r3
 801018c:	3728      	adds	r7, #40	; 0x28
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b08a      	sub	sp, #40	; 0x28
 8010196:	af00      	add	r7, sp, #0
 8010198:	60f8      	str	r0, [r7, #12]
 801019a:	60b9      	str	r1, [r7, #8]
 801019c:	4613      	mov	r3, r2
 801019e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101a6:	2b20      	cmp	r3, #32
 80101a8:	d132      	bne.n	8010210 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d002      	beq.n	80101b6 <HAL_UART_Receive_DMA+0x24>
 80101b0:	88fb      	ldrh	r3, [r7, #6]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d101      	bne.n	80101ba <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80101b6:	2301      	movs	r3, #1
 80101b8:	e02b      	b.n	8010212 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2200      	movs	r2, #0
 80101be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d018      	beq.n	8010200 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	e853 3f00 	ldrex	r3, [r3]
 80101da:	613b      	str	r3, [r7, #16]
   return(result);
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	461a      	mov	r2, r3
 80101ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ec:	623b      	str	r3, [r7, #32]
 80101ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f0:	69f9      	ldr	r1, [r7, #28]
 80101f2:	6a3a      	ldr	r2, [r7, #32]
 80101f4:	e841 2300 	strex	r3, r2, [r1]
 80101f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d1e6      	bne.n	80101ce <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010200:	88fb      	ldrh	r3, [r7, #6]
 8010202:	461a      	mov	r2, r3
 8010204:	68b9      	ldr	r1, [r7, #8]
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f000 ffc4 	bl	8011194 <UART_Start_Receive_DMA>
 801020c:	4603      	mov	r3, r0
 801020e:	e000      	b.n	8010212 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8010210:	2302      	movs	r3, #2
  }
}
 8010212:	4618      	mov	r0, r3
 8010214:	3728      	adds	r7, #40	; 0x28
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
	...

0801021c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b0ba      	sub	sp, #232	; 0xe8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	69db      	ldr	r3, [r3, #28]
 801022a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	689b      	ldr	r3, [r3, #8]
 801023e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010242:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010246:	f640 030f 	movw	r3, #2063	; 0x80f
 801024a:	4013      	ands	r3, r2
 801024c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010254:	2b00      	cmp	r3, #0
 8010256:	d115      	bne.n	8010284 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801025c:	f003 0320 	and.w	r3, r3, #32
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00f      	beq.n	8010284 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010268:	f003 0320 	and.w	r3, r3, #32
 801026c:	2b00      	cmp	r3, #0
 801026e:	d009      	beq.n	8010284 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 8297 	beq.w	80107a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	4798      	blx	r3
      }
      return;
 8010282:	e291      	b.n	80107a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010288:	2b00      	cmp	r3, #0
 801028a:	f000 8117 	beq.w	80104bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801028e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801029a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801029e:	4b85      	ldr	r3, [pc, #532]	; (80104b4 <HAL_UART_IRQHandler+0x298>)
 80102a0:	4013      	ands	r3, r2
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	f000 810a 	beq.w	80104bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102ac:	f003 0301 	and.w	r3, r3, #1
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d011      	beq.n	80102d8 <HAL_UART_IRQHandler+0xbc>
 80102b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d00b      	beq.n	80102d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2201      	movs	r2, #1
 80102c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102ce:	f043 0201 	orr.w	r2, r3, #1
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102dc:	f003 0302 	and.w	r3, r3, #2
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d011      	beq.n	8010308 <HAL_UART_IRQHandler+0xec>
 80102e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102e8:	f003 0301 	and.w	r3, r3, #1
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00b      	beq.n	8010308 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	2202      	movs	r2, #2
 80102f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102fe:	f043 0204 	orr.w	r2, r3, #4
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801030c:	f003 0304 	and.w	r3, r3, #4
 8010310:	2b00      	cmp	r3, #0
 8010312:	d011      	beq.n	8010338 <HAL_UART_IRQHandler+0x11c>
 8010314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010318:	f003 0301 	and.w	r3, r3, #1
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00b      	beq.n	8010338 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2204      	movs	r2, #4
 8010326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801032e:	f043 0202 	orr.w	r2, r3, #2
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801033c:	f003 0308 	and.w	r3, r3, #8
 8010340:	2b00      	cmp	r3, #0
 8010342:	d017      	beq.n	8010374 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010348:	f003 0320 	and.w	r3, r3, #32
 801034c:	2b00      	cmp	r3, #0
 801034e:	d105      	bne.n	801035c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010354:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010358:	2b00      	cmp	r3, #0
 801035a:	d00b      	beq.n	8010374 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2208      	movs	r2, #8
 8010362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801036a:	f043 0208 	orr.w	r2, r3, #8
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801037c:	2b00      	cmp	r3, #0
 801037e:	d012      	beq.n	80103a6 <HAL_UART_IRQHandler+0x18a>
 8010380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010388:	2b00      	cmp	r3, #0
 801038a:	d00c      	beq.n	80103a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801039c:	f043 0220 	orr.w	r2, r3, #32
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f000 81fd 	beq.w	80107ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80103b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103b6:	f003 0320 	and.w	r3, r3, #32
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00d      	beq.n	80103da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80103be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103c2:	f003 0320 	and.w	r3, r3, #32
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d007      	beq.n	80103da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d003      	beq.n	80103da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ee:	2b40      	cmp	r3, #64	; 0x40
 80103f0:	d005      	beq.n	80103fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80103f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80103f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d04f      	beq.n	801049e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 ff8e 	bl	8011320 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	689b      	ldr	r3, [r3, #8]
 801040a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801040e:	2b40      	cmp	r3, #64	; 0x40
 8010410:	d141      	bne.n	8010496 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	3308      	adds	r3, #8
 8010418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801041c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010420:	e853 3f00 	ldrex	r3, [r3]
 8010424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801042c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	3308      	adds	r3, #8
 801043a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801043e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801044a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801044e:	e841 2300 	strex	r3, r2, [r1]
 8010452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1d9      	bne.n	8010412 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010462:	2b00      	cmp	r3, #0
 8010464:	d013      	beq.n	801048e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801046a:	4a13      	ldr	r2, [pc, #76]	; (80104b8 <HAL_UART_IRQHandler+0x29c>)
 801046c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010472:	4618      	mov	r0, r3
 8010474:	f7fa fdae 	bl	800afd4 <HAL_DMA_Abort_IT>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d017      	beq.n	80104ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010488:	4610      	mov	r0, r2
 801048a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801048c:	e00f      	b.n	80104ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f7f3 fefe 	bl	8004290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010494:	e00b      	b.n	80104ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7f3 fefa 	bl	8004290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801049c:	e007      	b.n	80104ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f7f3 fef6 	bl	8004290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80104ac:	e17e      	b.n	80107ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ae:	bf00      	nop
    return;
 80104b0:	e17c      	b.n	80107ac <HAL_UART_IRQHandler+0x590>
 80104b2:	bf00      	nop
 80104b4:	04000120 	.word	0x04000120
 80104b8:	080115cd 	.word	0x080115cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	f040 814c 	bne.w	801075e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80104c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104ca:	f003 0310 	and.w	r3, r3, #16
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 8145 	beq.w	801075e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80104d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104d8:	f003 0310 	and.w	r3, r3, #16
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f000 813e 	beq.w	801075e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	2210      	movs	r2, #16
 80104e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104f4:	2b40      	cmp	r3, #64	; 0x40
 80104f6:	f040 80b6 	bne.w	8010666 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010506:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801050a:	2b00      	cmp	r3, #0
 801050c:	f000 8150 	beq.w	80107b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801051a:	429a      	cmp	r2, r3
 801051c:	f080 8148 	bcs.w	80107b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010526:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801052e:	69db      	ldr	r3, [r3, #28]
 8010530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010534:	f000 8086 	beq.w	8010644 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010544:	e853 3f00 	ldrex	r3, [r3]
 8010548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801054c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	461a      	mov	r2, r3
 801055e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010566:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801056a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801056e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010572:	e841 2300 	strex	r3, r2, [r1]
 8010576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801057a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1da      	bne.n	8010538 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	3308      	adds	r3, #8
 8010588:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801058c:	e853 3f00 	ldrex	r3, [r3]
 8010590:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010594:	f023 0301 	bic.w	r3, r3, #1
 8010598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3308      	adds	r3, #8
 80105a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80105a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80105aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80105ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105b2:	e841 2300 	strex	r3, r2, [r1]
 80105b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80105b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d1e1      	bne.n	8010582 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3308      	adds	r3, #8
 80105c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105c8:	e853 3f00 	ldrex	r3, [r3]
 80105cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80105ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	3308      	adds	r3, #8
 80105de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80105e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80105e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80105e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80105ea:	e841 2300 	strex	r3, r2, [r1]
 80105ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80105f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1e3      	bne.n	80105be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2220      	movs	r2, #32
 80105fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2200      	movs	r2, #0
 8010602:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801060c:	e853 3f00 	ldrex	r3, [r3]
 8010610:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010614:	f023 0310 	bic.w	r3, r3, #16
 8010618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	461a      	mov	r2, r3
 8010622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010626:	65bb      	str	r3, [r7, #88]	; 0x58
 8010628:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801062c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801062e:	e841 2300 	strex	r3, r2, [r1]
 8010632:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1e4      	bne.n	8010604 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801063e:	4618      	mov	r0, r3
 8010640:	f7fa fc58 	bl	800aef4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2202      	movs	r2, #2
 8010648:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010656:	b29b      	uxth	r3, r3
 8010658:	1ad3      	subs	r3, r2, r3
 801065a:	b29b      	uxth	r3, r3
 801065c:	4619      	mov	r1, r3
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 f8c2 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010664:	e0a4      	b.n	80107b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010672:	b29b      	uxth	r3, r3
 8010674:	1ad3      	subs	r3, r2, r3
 8010676:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010680:	b29b      	uxth	r3, r3
 8010682:	2b00      	cmp	r3, #0
 8010684:	f000 8096 	beq.w	80107b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8010688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801068c:	2b00      	cmp	r3, #0
 801068e:	f000 8091 	beq.w	80107b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	e853 3f00 	ldrex	r3, [r3]
 801069e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	461a      	mov	r2, r3
 80106b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80106b4:	647b      	str	r3, [r7, #68]	; 0x44
 80106b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106bc:	e841 2300 	strex	r3, r2, [r1]
 80106c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d1e4      	bne.n	8010692 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	3308      	adds	r3, #8
 80106ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d2:	e853 3f00 	ldrex	r3, [r3]
 80106d6:	623b      	str	r3, [r7, #32]
   return(result);
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	f023 0301 	bic.w	r3, r3, #1
 80106de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	3308      	adds	r3, #8
 80106e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80106ec:	633a      	str	r2, [r7, #48]	; 0x30
 80106ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106f4:	e841 2300 	strex	r3, r2, [r1]
 80106f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80106fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d1e3      	bne.n	80106c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2220      	movs	r2, #32
 8010704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2200      	movs	r2, #0
 801070c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	e853 3f00 	ldrex	r3, [r3]
 8010720:	60fb      	str	r3, [r7, #12]
   return(result);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f023 0310 	bic.w	r3, r3, #16
 8010728:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	461a      	mov	r2, r3
 8010732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010736:	61fb      	str	r3, [r7, #28]
 8010738:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073a:	69b9      	ldr	r1, [r7, #24]
 801073c:	69fa      	ldr	r2, [r7, #28]
 801073e:	e841 2300 	strex	r3, r2, [r1]
 8010742:	617b      	str	r3, [r7, #20]
   return(result);
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1e4      	bne.n	8010714 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2202      	movs	r2, #2
 801074e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010754:	4619      	mov	r1, r3
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 f846 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801075c:	e02a      	b.n	80107b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801075e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00e      	beq.n	8010788 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801076a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010772:	2b00      	cmp	r3, #0
 8010774:	d008      	beq.n	8010788 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077a:	2b00      	cmp	r3, #0
 801077c:	d01c      	beq.n	80107b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	4798      	blx	r3
    }
    return;
 8010786:	e017      	b.n	80107b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801078c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010790:	2b00      	cmp	r3, #0
 8010792:	d012      	beq.n	80107ba <HAL_UART_IRQHandler+0x59e>
 8010794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00c      	beq.n	80107ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 ff29 	bl	80115f8 <UART_EndTransmit_IT>
    return;
 80107a6:	e008      	b.n	80107ba <HAL_UART_IRQHandler+0x59e>
      return;
 80107a8:	bf00      	nop
 80107aa:	e006      	b.n	80107ba <HAL_UART_IRQHandler+0x59e>
    return;
 80107ac:	bf00      	nop
 80107ae:	e004      	b.n	80107ba <HAL_UART_IRQHandler+0x59e>
      return;
 80107b0:	bf00      	nop
 80107b2:	e002      	b.n	80107ba <HAL_UART_IRQHandler+0x59e>
      return;
 80107b4:	bf00      	nop
 80107b6:	e000      	b.n	80107ba <HAL_UART_IRQHandler+0x59e>
    return;
 80107b8:	bf00      	nop
  }

}
 80107ba:	37e8      	adds	r7, #232	; 0xe8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80107c8:	bf00      	nop
 80107ca:	370c      	adds	r7, #12
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80107dc:	bf00      	nop
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	460b      	mov	r3, r1
 80107f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107f4:	bf00      	nop
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b088      	sub	sp, #32
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010808:	2300      	movs	r3, #0
 801080a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	689a      	ldr	r2, [r3, #8]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	431a      	orrs	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	695b      	ldr	r3, [r3, #20]
 801081a:	431a      	orrs	r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	69db      	ldr	r3, [r3, #28]
 8010820:	4313      	orrs	r3, r2
 8010822:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	4ba6      	ldr	r3, [pc, #664]	; (8010ac4 <UART_SetConfig+0x2c4>)
 801082c:	4013      	ands	r3, r2
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	6812      	ldr	r2, [r2, #0]
 8010832:	6979      	ldr	r1, [r7, #20]
 8010834:	430b      	orrs	r3, r1
 8010836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	68da      	ldr	r2, [r3, #12]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	430a      	orrs	r2, r1
 801084c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	699b      	ldr	r3, [r3, #24]
 8010852:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6a1b      	ldr	r3, [r3, #32]
 8010858:	697a      	ldr	r2, [r7, #20]
 801085a:	4313      	orrs	r3, r2
 801085c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	689b      	ldr	r3, [r3, #8]
 8010864:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	697a      	ldr	r2, [r7, #20]
 801086e:	430a      	orrs	r2, r1
 8010870:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a94      	ldr	r2, [pc, #592]	; (8010ac8 <UART_SetConfig+0x2c8>)
 8010878:	4293      	cmp	r3, r2
 801087a:	d120      	bne.n	80108be <UART_SetConfig+0xbe>
 801087c:	4b93      	ldr	r3, [pc, #588]	; (8010acc <UART_SetConfig+0x2cc>)
 801087e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010882:	f003 0303 	and.w	r3, r3, #3
 8010886:	2b03      	cmp	r3, #3
 8010888:	d816      	bhi.n	80108b8 <UART_SetConfig+0xb8>
 801088a:	a201      	add	r2, pc, #4	; (adr r2, 8010890 <UART_SetConfig+0x90>)
 801088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010890:	080108a1 	.word	0x080108a1
 8010894:	080108ad 	.word	0x080108ad
 8010898:	080108a7 	.word	0x080108a7
 801089c:	080108b3 	.word	0x080108b3
 80108a0:	2301      	movs	r3, #1
 80108a2:	77fb      	strb	r3, [r7, #31]
 80108a4:	e150      	b.n	8010b48 <UART_SetConfig+0x348>
 80108a6:	2302      	movs	r3, #2
 80108a8:	77fb      	strb	r3, [r7, #31]
 80108aa:	e14d      	b.n	8010b48 <UART_SetConfig+0x348>
 80108ac:	2304      	movs	r3, #4
 80108ae:	77fb      	strb	r3, [r7, #31]
 80108b0:	e14a      	b.n	8010b48 <UART_SetConfig+0x348>
 80108b2:	2308      	movs	r3, #8
 80108b4:	77fb      	strb	r3, [r7, #31]
 80108b6:	e147      	b.n	8010b48 <UART_SetConfig+0x348>
 80108b8:	2310      	movs	r3, #16
 80108ba:	77fb      	strb	r3, [r7, #31]
 80108bc:	e144      	b.n	8010b48 <UART_SetConfig+0x348>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4a83      	ldr	r2, [pc, #524]	; (8010ad0 <UART_SetConfig+0x2d0>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d132      	bne.n	801092e <UART_SetConfig+0x12e>
 80108c8:	4b80      	ldr	r3, [pc, #512]	; (8010acc <UART_SetConfig+0x2cc>)
 80108ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108ce:	f003 030c 	and.w	r3, r3, #12
 80108d2:	2b0c      	cmp	r3, #12
 80108d4:	d828      	bhi.n	8010928 <UART_SetConfig+0x128>
 80108d6:	a201      	add	r2, pc, #4	; (adr r2, 80108dc <UART_SetConfig+0xdc>)
 80108d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108dc:	08010911 	.word	0x08010911
 80108e0:	08010929 	.word	0x08010929
 80108e4:	08010929 	.word	0x08010929
 80108e8:	08010929 	.word	0x08010929
 80108ec:	0801091d 	.word	0x0801091d
 80108f0:	08010929 	.word	0x08010929
 80108f4:	08010929 	.word	0x08010929
 80108f8:	08010929 	.word	0x08010929
 80108fc:	08010917 	.word	0x08010917
 8010900:	08010929 	.word	0x08010929
 8010904:	08010929 	.word	0x08010929
 8010908:	08010929 	.word	0x08010929
 801090c:	08010923 	.word	0x08010923
 8010910:	2300      	movs	r3, #0
 8010912:	77fb      	strb	r3, [r7, #31]
 8010914:	e118      	b.n	8010b48 <UART_SetConfig+0x348>
 8010916:	2302      	movs	r3, #2
 8010918:	77fb      	strb	r3, [r7, #31]
 801091a:	e115      	b.n	8010b48 <UART_SetConfig+0x348>
 801091c:	2304      	movs	r3, #4
 801091e:	77fb      	strb	r3, [r7, #31]
 8010920:	e112      	b.n	8010b48 <UART_SetConfig+0x348>
 8010922:	2308      	movs	r3, #8
 8010924:	77fb      	strb	r3, [r7, #31]
 8010926:	e10f      	b.n	8010b48 <UART_SetConfig+0x348>
 8010928:	2310      	movs	r3, #16
 801092a:	77fb      	strb	r3, [r7, #31]
 801092c:	e10c      	b.n	8010b48 <UART_SetConfig+0x348>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	4a68      	ldr	r2, [pc, #416]	; (8010ad4 <UART_SetConfig+0x2d4>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d120      	bne.n	801097a <UART_SetConfig+0x17a>
 8010938:	4b64      	ldr	r3, [pc, #400]	; (8010acc <UART_SetConfig+0x2cc>)
 801093a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801093e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010942:	2b30      	cmp	r3, #48	; 0x30
 8010944:	d013      	beq.n	801096e <UART_SetConfig+0x16e>
 8010946:	2b30      	cmp	r3, #48	; 0x30
 8010948:	d814      	bhi.n	8010974 <UART_SetConfig+0x174>
 801094a:	2b20      	cmp	r3, #32
 801094c:	d009      	beq.n	8010962 <UART_SetConfig+0x162>
 801094e:	2b20      	cmp	r3, #32
 8010950:	d810      	bhi.n	8010974 <UART_SetConfig+0x174>
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <UART_SetConfig+0x15c>
 8010956:	2b10      	cmp	r3, #16
 8010958:	d006      	beq.n	8010968 <UART_SetConfig+0x168>
 801095a:	e00b      	b.n	8010974 <UART_SetConfig+0x174>
 801095c:	2300      	movs	r3, #0
 801095e:	77fb      	strb	r3, [r7, #31]
 8010960:	e0f2      	b.n	8010b48 <UART_SetConfig+0x348>
 8010962:	2302      	movs	r3, #2
 8010964:	77fb      	strb	r3, [r7, #31]
 8010966:	e0ef      	b.n	8010b48 <UART_SetConfig+0x348>
 8010968:	2304      	movs	r3, #4
 801096a:	77fb      	strb	r3, [r7, #31]
 801096c:	e0ec      	b.n	8010b48 <UART_SetConfig+0x348>
 801096e:	2308      	movs	r3, #8
 8010970:	77fb      	strb	r3, [r7, #31]
 8010972:	e0e9      	b.n	8010b48 <UART_SetConfig+0x348>
 8010974:	2310      	movs	r3, #16
 8010976:	77fb      	strb	r3, [r7, #31]
 8010978:	e0e6      	b.n	8010b48 <UART_SetConfig+0x348>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4a56      	ldr	r2, [pc, #344]	; (8010ad8 <UART_SetConfig+0x2d8>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d120      	bne.n	80109c6 <UART_SetConfig+0x1c6>
 8010984:	4b51      	ldr	r3, [pc, #324]	; (8010acc <UART_SetConfig+0x2cc>)
 8010986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801098a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801098e:	2bc0      	cmp	r3, #192	; 0xc0
 8010990:	d013      	beq.n	80109ba <UART_SetConfig+0x1ba>
 8010992:	2bc0      	cmp	r3, #192	; 0xc0
 8010994:	d814      	bhi.n	80109c0 <UART_SetConfig+0x1c0>
 8010996:	2b80      	cmp	r3, #128	; 0x80
 8010998:	d009      	beq.n	80109ae <UART_SetConfig+0x1ae>
 801099a:	2b80      	cmp	r3, #128	; 0x80
 801099c:	d810      	bhi.n	80109c0 <UART_SetConfig+0x1c0>
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d002      	beq.n	80109a8 <UART_SetConfig+0x1a8>
 80109a2:	2b40      	cmp	r3, #64	; 0x40
 80109a4:	d006      	beq.n	80109b4 <UART_SetConfig+0x1b4>
 80109a6:	e00b      	b.n	80109c0 <UART_SetConfig+0x1c0>
 80109a8:	2300      	movs	r3, #0
 80109aa:	77fb      	strb	r3, [r7, #31]
 80109ac:	e0cc      	b.n	8010b48 <UART_SetConfig+0x348>
 80109ae:	2302      	movs	r3, #2
 80109b0:	77fb      	strb	r3, [r7, #31]
 80109b2:	e0c9      	b.n	8010b48 <UART_SetConfig+0x348>
 80109b4:	2304      	movs	r3, #4
 80109b6:	77fb      	strb	r3, [r7, #31]
 80109b8:	e0c6      	b.n	8010b48 <UART_SetConfig+0x348>
 80109ba:	2308      	movs	r3, #8
 80109bc:	77fb      	strb	r3, [r7, #31]
 80109be:	e0c3      	b.n	8010b48 <UART_SetConfig+0x348>
 80109c0:	2310      	movs	r3, #16
 80109c2:	77fb      	strb	r3, [r7, #31]
 80109c4:	e0c0      	b.n	8010b48 <UART_SetConfig+0x348>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	4a44      	ldr	r2, [pc, #272]	; (8010adc <UART_SetConfig+0x2dc>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d125      	bne.n	8010a1c <UART_SetConfig+0x21c>
 80109d0:	4b3e      	ldr	r3, [pc, #248]	; (8010acc <UART_SetConfig+0x2cc>)
 80109d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80109da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80109de:	d017      	beq.n	8010a10 <UART_SetConfig+0x210>
 80109e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80109e4:	d817      	bhi.n	8010a16 <UART_SetConfig+0x216>
 80109e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109ea:	d00b      	beq.n	8010a04 <UART_SetConfig+0x204>
 80109ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109f0:	d811      	bhi.n	8010a16 <UART_SetConfig+0x216>
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d003      	beq.n	80109fe <UART_SetConfig+0x1fe>
 80109f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109fa:	d006      	beq.n	8010a0a <UART_SetConfig+0x20a>
 80109fc:	e00b      	b.n	8010a16 <UART_SetConfig+0x216>
 80109fe:	2300      	movs	r3, #0
 8010a00:	77fb      	strb	r3, [r7, #31]
 8010a02:	e0a1      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a04:	2302      	movs	r3, #2
 8010a06:	77fb      	strb	r3, [r7, #31]
 8010a08:	e09e      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a0a:	2304      	movs	r3, #4
 8010a0c:	77fb      	strb	r3, [r7, #31]
 8010a0e:	e09b      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a10:	2308      	movs	r3, #8
 8010a12:	77fb      	strb	r3, [r7, #31]
 8010a14:	e098      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a16:	2310      	movs	r3, #16
 8010a18:	77fb      	strb	r3, [r7, #31]
 8010a1a:	e095      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a2f      	ldr	r2, [pc, #188]	; (8010ae0 <UART_SetConfig+0x2e0>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d125      	bne.n	8010a72 <UART_SetConfig+0x272>
 8010a26:	4b29      	ldr	r3, [pc, #164]	; (8010acc <UART_SetConfig+0x2cc>)
 8010a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010a34:	d017      	beq.n	8010a66 <UART_SetConfig+0x266>
 8010a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010a3a:	d817      	bhi.n	8010a6c <UART_SetConfig+0x26c>
 8010a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a40:	d00b      	beq.n	8010a5a <UART_SetConfig+0x25a>
 8010a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a46:	d811      	bhi.n	8010a6c <UART_SetConfig+0x26c>
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d003      	beq.n	8010a54 <UART_SetConfig+0x254>
 8010a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a50:	d006      	beq.n	8010a60 <UART_SetConfig+0x260>
 8010a52:	e00b      	b.n	8010a6c <UART_SetConfig+0x26c>
 8010a54:	2301      	movs	r3, #1
 8010a56:	77fb      	strb	r3, [r7, #31]
 8010a58:	e076      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a5a:	2302      	movs	r3, #2
 8010a5c:	77fb      	strb	r3, [r7, #31]
 8010a5e:	e073      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a60:	2304      	movs	r3, #4
 8010a62:	77fb      	strb	r3, [r7, #31]
 8010a64:	e070      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a66:	2308      	movs	r3, #8
 8010a68:	77fb      	strb	r3, [r7, #31]
 8010a6a:	e06d      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a6c:	2310      	movs	r3, #16
 8010a6e:	77fb      	strb	r3, [r7, #31]
 8010a70:	e06a      	b.n	8010b48 <UART_SetConfig+0x348>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a1b      	ldr	r2, [pc, #108]	; (8010ae4 <UART_SetConfig+0x2e4>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d138      	bne.n	8010aee <UART_SetConfig+0x2ee>
 8010a7c:	4b13      	ldr	r3, [pc, #76]	; (8010acc <UART_SetConfig+0x2cc>)
 8010a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010a86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010a8a:	d017      	beq.n	8010abc <UART_SetConfig+0x2bc>
 8010a8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010a90:	d82a      	bhi.n	8010ae8 <UART_SetConfig+0x2e8>
 8010a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a96:	d00b      	beq.n	8010ab0 <UART_SetConfig+0x2b0>
 8010a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a9c:	d824      	bhi.n	8010ae8 <UART_SetConfig+0x2e8>
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d003      	beq.n	8010aaa <UART_SetConfig+0x2aa>
 8010aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010aa6:	d006      	beq.n	8010ab6 <UART_SetConfig+0x2b6>
 8010aa8:	e01e      	b.n	8010ae8 <UART_SetConfig+0x2e8>
 8010aaa:	2300      	movs	r3, #0
 8010aac:	77fb      	strb	r3, [r7, #31]
 8010aae:	e04b      	b.n	8010b48 <UART_SetConfig+0x348>
 8010ab0:	2302      	movs	r3, #2
 8010ab2:	77fb      	strb	r3, [r7, #31]
 8010ab4:	e048      	b.n	8010b48 <UART_SetConfig+0x348>
 8010ab6:	2304      	movs	r3, #4
 8010ab8:	77fb      	strb	r3, [r7, #31]
 8010aba:	e045      	b.n	8010b48 <UART_SetConfig+0x348>
 8010abc:	2308      	movs	r3, #8
 8010abe:	77fb      	strb	r3, [r7, #31]
 8010ac0:	e042      	b.n	8010b48 <UART_SetConfig+0x348>
 8010ac2:	bf00      	nop
 8010ac4:	efff69f3 	.word	0xefff69f3
 8010ac8:	40011000 	.word	0x40011000
 8010acc:	40023800 	.word	0x40023800
 8010ad0:	40004400 	.word	0x40004400
 8010ad4:	40004800 	.word	0x40004800
 8010ad8:	40004c00 	.word	0x40004c00
 8010adc:	40005000 	.word	0x40005000
 8010ae0:	40011400 	.word	0x40011400
 8010ae4:	40007800 	.word	0x40007800
 8010ae8:	2310      	movs	r3, #16
 8010aea:	77fb      	strb	r3, [r7, #31]
 8010aec:	e02c      	b.n	8010b48 <UART_SetConfig+0x348>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4a72      	ldr	r2, [pc, #456]	; (8010cbc <UART_SetConfig+0x4bc>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d125      	bne.n	8010b44 <UART_SetConfig+0x344>
 8010af8:	4b71      	ldr	r3, [pc, #452]	; (8010cc0 <UART_SetConfig+0x4c0>)
 8010afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010afe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010b02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010b06:	d017      	beq.n	8010b38 <UART_SetConfig+0x338>
 8010b08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010b0c:	d817      	bhi.n	8010b3e <UART_SetConfig+0x33e>
 8010b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b12:	d00b      	beq.n	8010b2c <UART_SetConfig+0x32c>
 8010b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b18:	d811      	bhi.n	8010b3e <UART_SetConfig+0x33e>
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d003      	beq.n	8010b26 <UART_SetConfig+0x326>
 8010b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b22:	d006      	beq.n	8010b32 <UART_SetConfig+0x332>
 8010b24:	e00b      	b.n	8010b3e <UART_SetConfig+0x33e>
 8010b26:	2300      	movs	r3, #0
 8010b28:	77fb      	strb	r3, [r7, #31]
 8010b2a:	e00d      	b.n	8010b48 <UART_SetConfig+0x348>
 8010b2c:	2302      	movs	r3, #2
 8010b2e:	77fb      	strb	r3, [r7, #31]
 8010b30:	e00a      	b.n	8010b48 <UART_SetConfig+0x348>
 8010b32:	2304      	movs	r3, #4
 8010b34:	77fb      	strb	r3, [r7, #31]
 8010b36:	e007      	b.n	8010b48 <UART_SetConfig+0x348>
 8010b38:	2308      	movs	r3, #8
 8010b3a:	77fb      	strb	r3, [r7, #31]
 8010b3c:	e004      	b.n	8010b48 <UART_SetConfig+0x348>
 8010b3e:	2310      	movs	r3, #16
 8010b40:	77fb      	strb	r3, [r7, #31]
 8010b42:	e001      	b.n	8010b48 <UART_SetConfig+0x348>
 8010b44:	2310      	movs	r3, #16
 8010b46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	69db      	ldr	r3, [r3, #28]
 8010b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b50:	d15b      	bne.n	8010c0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8010b52:	7ffb      	ldrb	r3, [r7, #31]
 8010b54:	2b08      	cmp	r3, #8
 8010b56:	d828      	bhi.n	8010baa <UART_SetConfig+0x3aa>
 8010b58:	a201      	add	r2, pc, #4	; (adr r2, 8010b60 <UART_SetConfig+0x360>)
 8010b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b5e:	bf00      	nop
 8010b60:	08010b85 	.word	0x08010b85
 8010b64:	08010b8d 	.word	0x08010b8d
 8010b68:	08010b95 	.word	0x08010b95
 8010b6c:	08010bab 	.word	0x08010bab
 8010b70:	08010b9b 	.word	0x08010b9b
 8010b74:	08010bab 	.word	0x08010bab
 8010b78:	08010bab 	.word	0x08010bab
 8010b7c:	08010bab 	.word	0x08010bab
 8010b80:	08010ba3 	.word	0x08010ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b84:	f7fc f90a 	bl	800cd9c <HAL_RCC_GetPCLK1Freq>
 8010b88:	61b8      	str	r0, [r7, #24]
        break;
 8010b8a:	e013      	b.n	8010bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b8c:	f7fc f91a 	bl	800cdc4 <HAL_RCC_GetPCLK2Freq>
 8010b90:	61b8      	str	r0, [r7, #24]
        break;
 8010b92:	e00f      	b.n	8010bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b94:	4b4b      	ldr	r3, [pc, #300]	; (8010cc4 <UART_SetConfig+0x4c4>)
 8010b96:	61bb      	str	r3, [r7, #24]
        break;
 8010b98:	e00c      	b.n	8010bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b9a:	f7fc f82d 	bl	800cbf8 <HAL_RCC_GetSysClockFreq>
 8010b9e:	61b8      	str	r0, [r7, #24]
        break;
 8010ba0:	e008      	b.n	8010bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ba6:	61bb      	str	r3, [r7, #24]
        break;
 8010ba8:	e004      	b.n	8010bb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8010baa:	2300      	movs	r3, #0
 8010bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	77bb      	strb	r3, [r7, #30]
        break;
 8010bb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010bb4:	69bb      	ldr	r3, [r7, #24]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d074      	beq.n	8010ca4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	005a      	lsls	r2, r3, #1
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	085b      	lsrs	r3, r3, #1
 8010bc4:	441a      	add	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	2b0f      	cmp	r3, #15
 8010bd4:	d916      	bls.n	8010c04 <UART_SetConfig+0x404>
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bdc:	d212      	bcs.n	8010c04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	f023 030f 	bic.w	r3, r3, #15
 8010be6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	085b      	lsrs	r3, r3, #1
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	f003 0307 	and.w	r3, r3, #7
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	89fb      	ldrh	r3, [r7, #14]
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	89fa      	ldrh	r2, [r7, #14]
 8010c00:	60da      	str	r2, [r3, #12]
 8010c02:	e04f      	b.n	8010ca4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	77bb      	strb	r3, [r7, #30]
 8010c08:	e04c      	b.n	8010ca4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010c0a:	7ffb      	ldrb	r3, [r7, #31]
 8010c0c:	2b08      	cmp	r3, #8
 8010c0e:	d828      	bhi.n	8010c62 <UART_SetConfig+0x462>
 8010c10:	a201      	add	r2, pc, #4	; (adr r2, 8010c18 <UART_SetConfig+0x418>)
 8010c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c16:	bf00      	nop
 8010c18:	08010c3d 	.word	0x08010c3d
 8010c1c:	08010c45 	.word	0x08010c45
 8010c20:	08010c4d 	.word	0x08010c4d
 8010c24:	08010c63 	.word	0x08010c63
 8010c28:	08010c53 	.word	0x08010c53
 8010c2c:	08010c63 	.word	0x08010c63
 8010c30:	08010c63 	.word	0x08010c63
 8010c34:	08010c63 	.word	0x08010c63
 8010c38:	08010c5b 	.word	0x08010c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c3c:	f7fc f8ae 	bl	800cd9c <HAL_RCC_GetPCLK1Freq>
 8010c40:	61b8      	str	r0, [r7, #24]
        break;
 8010c42:	e013      	b.n	8010c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c44:	f7fc f8be 	bl	800cdc4 <HAL_RCC_GetPCLK2Freq>
 8010c48:	61b8      	str	r0, [r7, #24]
        break;
 8010c4a:	e00f      	b.n	8010c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c4c:	4b1d      	ldr	r3, [pc, #116]	; (8010cc4 <UART_SetConfig+0x4c4>)
 8010c4e:	61bb      	str	r3, [r7, #24]
        break;
 8010c50:	e00c      	b.n	8010c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c52:	f7fb ffd1 	bl	800cbf8 <HAL_RCC_GetSysClockFreq>
 8010c56:	61b8      	str	r0, [r7, #24]
        break;
 8010c58:	e008      	b.n	8010c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c5e:	61bb      	str	r3, [r7, #24]
        break;
 8010c60:	e004      	b.n	8010c6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010c62:	2300      	movs	r3, #0
 8010c64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010c66:	2301      	movs	r3, #1
 8010c68:	77bb      	strb	r3, [r7, #30]
        break;
 8010c6a:	bf00      	nop
    }

    if (pclk != 0U)
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d018      	beq.n	8010ca4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	085a      	lsrs	r2, r3, #1
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	441a      	add	r2, r3
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	2b0f      	cmp	r3, #15
 8010c8a:	d909      	bls.n	8010ca0 <UART_SetConfig+0x4a0>
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c92:	d205      	bcs.n	8010ca0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	b29a      	uxth	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	60da      	str	r2, [r3, #12]
 8010c9e:	e001      	b.n	8010ca4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8010cb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3720      	adds	r7, #32
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	40007c00 	.word	0x40007c00
 8010cc0:	40023800 	.word	0x40023800
 8010cc4:	00f42400 	.word	0x00f42400

08010cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd4:	f003 0301 	and.w	r3, r3, #1
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d00a      	beq.n	8010cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	430a      	orrs	r2, r1
 8010cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cf6:	f003 0302 	and.w	r3, r3, #2
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d00a      	beq.n	8010d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	430a      	orrs	r2, r1
 8010d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d18:	f003 0304 	and.w	r3, r3, #4
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00a      	beq.n	8010d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	430a      	orrs	r2, r1
 8010d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d3a:	f003 0308 	and.w	r3, r3, #8
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d00a      	beq.n	8010d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	430a      	orrs	r2, r1
 8010d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d5c:	f003 0310 	and.w	r3, r3, #16
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00a      	beq.n	8010d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	689b      	ldr	r3, [r3, #8]
 8010d6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	430a      	orrs	r2, r1
 8010d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d7e:	f003 0320 	and.w	r3, r3, #32
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00a      	beq.n	8010d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	689b      	ldr	r3, [r3, #8]
 8010d8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	430a      	orrs	r2, r1
 8010d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d01a      	beq.n	8010dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	430a      	orrs	r2, r1
 8010dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010dc6:	d10a      	bne.n	8010dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	430a      	orrs	r2, r1
 8010ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00a      	beq.n	8010e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	430a      	orrs	r2, r1
 8010dfe:	605a      	str	r2, [r3, #4]
  }
}
 8010e00:	bf00      	nop
 8010e02:	370c      	adds	r7, #12
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b086      	sub	sp, #24
 8010e10:	af02      	add	r7, sp, #8
 8010e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2200      	movs	r2, #0
 8010e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010e1c:	f7f9 fe4a 	bl	800aab4 <HAL_GetTick>
 8010e20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f003 0308 	and.w	r3, r3, #8
 8010e2c:	2b08      	cmp	r3, #8
 8010e2e:	d10e      	bne.n	8010e4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010e34:	9300      	str	r3, [sp, #0]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f000 f81b 	bl	8010e7a <UART_WaitOnFlagUntilTimeout>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d001      	beq.n	8010e4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e4a:	2303      	movs	r3, #3
 8010e4c:	e011      	b.n	8010e72 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2220      	movs	r2, #32
 8010e52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2220      	movs	r2, #32
 8010e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010e70:	2300      	movs	r3, #0
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}

08010e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010e7a:	b580      	push	{r7, lr}
 8010e7c:	b09c      	sub	sp, #112	; 0x70
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	60f8      	str	r0, [r7, #12]
 8010e82:	60b9      	str	r1, [r7, #8]
 8010e84:	603b      	str	r3, [r7, #0]
 8010e86:	4613      	mov	r3, r2
 8010e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e8a:	e0a7      	b.n	8010fdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e92:	f000 80a3 	beq.w	8010fdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e96:	f7f9 fe0d 	bl	800aab4 <HAL_GetTick>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d302      	bcc.n	8010eac <UART_WaitOnFlagUntilTimeout+0x32>
 8010ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d13f      	bne.n	8010f2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eb4:	e853 3f00 	ldrex	r3, [r3]
 8010eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ebc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010ec0:	667b      	str	r3, [r7, #100]	; 0x64
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ecc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ece:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010ed0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ed2:	e841 2300 	strex	r3, r2, [r1]
 8010ed6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1e6      	bne.n	8010eac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	3308      	adds	r3, #8
 8010ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ee8:	e853 3f00 	ldrex	r3, [r3]
 8010eec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef0:	f023 0301 	bic.w	r3, r3, #1
 8010ef4:	663b      	str	r3, [r7, #96]	; 0x60
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	3308      	adds	r3, #8
 8010efc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010efe:	64ba      	str	r2, [r7, #72]	; 0x48
 8010f00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f06:	e841 2300 	strex	r3, r2, [r1]
 8010f0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1e5      	bne.n	8010ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2220      	movs	r2, #32
 8010f16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2220      	movs	r2, #32
 8010f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8010f28:	2303      	movs	r3, #3
 8010f2a:	e068      	b.n	8010ffe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f003 0304 	and.w	r3, r3, #4
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d050      	beq.n	8010fdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	69db      	ldr	r3, [r3, #28]
 8010f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f48:	d148      	bne.n	8010fdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010f52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5c:	e853 3f00 	ldrex	r3, [r3]
 8010f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	461a      	mov	r2, r3
 8010f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f72:	637b      	str	r3, [r7, #52]	; 0x34
 8010f74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f7a:	e841 2300 	strex	r3, r2, [r1]
 8010f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d1e6      	bne.n	8010f54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	3308      	adds	r3, #8
 8010f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	e853 3f00 	ldrex	r3, [r3]
 8010f94:	613b      	str	r3, [r7, #16]
   return(result);
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	f023 0301 	bic.w	r3, r3, #1
 8010f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	3308      	adds	r3, #8
 8010fa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010fa6:	623a      	str	r2, [r7, #32]
 8010fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010faa:	69f9      	ldr	r1, [r7, #28]
 8010fac:	6a3a      	ldr	r2, [r7, #32]
 8010fae:	e841 2300 	strex	r3, r2, [r1]
 8010fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1e5      	bne.n	8010f86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2220      	movs	r2, #32
 8010fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2220      	movs	r2, #32
 8010fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2220      	movs	r2, #32
 8010fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8010fd8:	2303      	movs	r3, #3
 8010fda:	e010      	b.n	8010ffe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	69da      	ldr	r2, [r3, #28]
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	4013      	ands	r3, r2
 8010fe6:	68ba      	ldr	r2, [r7, #8]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	bf0c      	ite	eq
 8010fec:	2301      	moveq	r3, #1
 8010fee:	2300      	movne	r3, #0
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	79fb      	ldrb	r3, [r7, #7]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	f43f af48 	beq.w	8010e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010ffc:	2300      	movs	r3, #0
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3770      	adds	r7, #112	; 0x70
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
	...

08011008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011008:	b480      	push	{r7}
 801100a:	b097      	sub	sp, #92	; 0x5c
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	4613      	mov	r3, r2
 8011014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	68ba      	ldr	r2, [r7, #8]
 801101a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	88fa      	ldrh	r2, [r7, #6]
 8011020:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	88fa      	ldrh	r2, [r7, #6]
 8011028:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2200      	movs	r2, #0
 8011030:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801103a:	d10e      	bne.n	801105a <UART_Start_Receive_IT+0x52>
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	691b      	ldr	r3, [r3, #16]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d105      	bne.n	8011050 <UART_Start_Receive_IT+0x48>
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f240 12ff 	movw	r2, #511	; 0x1ff
 801104a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801104e:	e02d      	b.n	80110ac <UART_Start_Receive_IT+0xa4>
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	22ff      	movs	r2, #255	; 0xff
 8011054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011058:	e028      	b.n	80110ac <UART_Start_Receive_IT+0xa4>
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	689b      	ldr	r3, [r3, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d10d      	bne.n	801107e <UART_Start_Receive_IT+0x76>
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	691b      	ldr	r3, [r3, #16]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d104      	bne.n	8011074 <UART_Start_Receive_IT+0x6c>
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	22ff      	movs	r2, #255	; 0xff
 801106e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011072:	e01b      	b.n	80110ac <UART_Start_Receive_IT+0xa4>
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	227f      	movs	r2, #127	; 0x7f
 8011078:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801107c:	e016      	b.n	80110ac <UART_Start_Receive_IT+0xa4>
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	689b      	ldr	r3, [r3, #8]
 8011082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011086:	d10d      	bne.n	80110a4 <UART_Start_Receive_IT+0x9c>
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d104      	bne.n	801109a <UART_Start_Receive_IT+0x92>
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	227f      	movs	r2, #127	; 0x7f
 8011094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011098:	e008      	b.n	80110ac <UART_Start_Receive_IT+0xa4>
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	223f      	movs	r2, #63	; 0x3f
 801109e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80110a2:	e003      	b.n	80110ac <UART_Start_Receive_IT+0xa4>
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2200      	movs	r2, #0
 80110a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2200      	movs	r2, #0
 80110b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2222      	movs	r2, #34	; 0x22
 80110b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	3308      	adds	r3, #8
 80110c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110c6:	e853 3f00 	ldrex	r3, [r3]
 80110ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80110cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ce:	f043 0301 	orr.w	r3, r3, #1
 80110d2:	657b      	str	r3, [r7, #84]	; 0x54
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	3308      	adds	r3, #8
 80110da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80110dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80110de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110e4:	e841 2300 	strex	r3, r2, [r1]
 80110e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80110ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d1e5      	bne.n	80110bc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110f8:	d107      	bne.n	801110a <UART_Start_Receive_IT+0x102>
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	691b      	ldr	r3, [r3, #16]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d103      	bne.n	801110a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	4a21      	ldr	r2, [pc, #132]	; (801118c <UART_Start_Receive_IT+0x184>)
 8011106:	669a      	str	r2, [r3, #104]	; 0x68
 8011108:	e002      	b.n	8011110 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	4a20      	ldr	r2, [pc, #128]	; (8011190 <UART_Start_Receive_IT+0x188>)
 801110e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	691b      	ldr	r3, [r3, #16]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d019      	beq.n	801114c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011120:	e853 3f00 	ldrex	r3, [r3]
 8011124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011128:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801112c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	461a      	mov	r2, r3
 8011134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011136:	637b      	str	r3, [r7, #52]	; 0x34
 8011138:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801113a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801113c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801113e:	e841 2300 	strex	r3, r2, [r1]
 8011142:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011146:	2b00      	cmp	r3, #0
 8011148:	d1e6      	bne.n	8011118 <UART_Start_Receive_IT+0x110>
 801114a:	e018      	b.n	801117e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	e853 3f00 	ldrex	r3, [r3]
 8011158:	613b      	str	r3, [r7, #16]
   return(result);
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	f043 0320 	orr.w	r3, r3, #32
 8011160:	653b      	str	r3, [r7, #80]	; 0x50
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	461a      	mov	r2, r3
 8011168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801116a:	623b      	str	r3, [r7, #32]
 801116c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801116e:	69f9      	ldr	r1, [r7, #28]
 8011170:	6a3a      	ldr	r2, [r7, #32]
 8011172:	e841 2300 	strex	r3, r2, [r1]
 8011176:	61bb      	str	r3, [r7, #24]
   return(result);
 8011178:	69bb      	ldr	r3, [r7, #24]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1e6      	bne.n	801114c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801117e:	2300      	movs	r3, #0
}
 8011180:	4618      	mov	r0, r3
 8011182:	375c      	adds	r7, #92	; 0x5c
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr
 801118c:	080117b3 	.word	0x080117b3
 8011190:	0801164d 	.word	0x0801164d

08011194 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b096      	sub	sp, #88	; 0x58
 8011198:	af00      	add	r7, sp, #0
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	60b9      	str	r1, [r7, #8]
 801119e:	4613      	mov	r3, r2
 80111a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	88fa      	ldrh	r2, [r7, #6]
 80111ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2200      	movs	r2, #0
 80111b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2222      	movs	r2, #34	; 0x22
 80111bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d028      	beq.n	801121a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111cc:	4a3e      	ldr	r2, [pc, #248]	; (80112c8 <UART_Start_Receive_DMA+0x134>)
 80111ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111d4:	4a3d      	ldr	r2, [pc, #244]	; (80112cc <UART_Start_Receive_DMA+0x138>)
 80111d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111dc:	4a3c      	ldr	r2, [pc, #240]	; (80112d0 <UART_Start_Receive_DMA+0x13c>)
 80111de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111e4:	2200      	movs	r2, #0
 80111e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	3324      	adds	r3, #36	; 0x24
 80111f2:	4619      	mov	r1, r3
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111f8:	461a      	mov	r2, r3
 80111fa:	88fb      	ldrh	r3, [r7, #6]
 80111fc:	f7f9 fe1a 	bl	800ae34 <HAL_DMA_Start_IT>
 8011200:	4603      	mov	r3, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	d009      	beq.n	801121a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2210      	movs	r2, #16
 801120a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2220      	movs	r2, #32
 8011212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8011216:	2301      	movs	r3, #1
 8011218:	e051      	b.n	80112be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	691b      	ldr	r3, [r3, #16]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d018      	beq.n	8011254 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801122a:	e853 3f00 	ldrex	r3, [r3]
 801122e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011236:	657b      	str	r3, [r7, #84]	; 0x54
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	461a      	mov	r2, r3
 801123e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011240:	64bb      	str	r3, [r7, #72]	; 0x48
 8011242:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011244:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011248:	e841 2300 	strex	r3, r2, [r1]
 801124c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801124e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011250:	2b00      	cmp	r3, #0
 8011252:	d1e6      	bne.n	8011222 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	3308      	adds	r3, #8
 801125a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125e:	e853 3f00 	ldrex	r3, [r3]
 8011262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	f043 0301 	orr.w	r3, r3, #1
 801126a:	653b      	str	r3, [r7, #80]	; 0x50
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	3308      	adds	r3, #8
 8011272:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011274:	637a      	str	r2, [r7, #52]	; 0x34
 8011276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801127a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801127c:	e841 2300 	strex	r3, r2, [r1]
 8011280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011284:	2b00      	cmp	r3, #0
 8011286:	d1e5      	bne.n	8011254 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	3308      	adds	r3, #8
 801128e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	e853 3f00 	ldrex	r3, [r3]
 8011296:	613b      	str	r3, [r7, #16]
   return(result);
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801129e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	3308      	adds	r3, #8
 80112a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112a8:	623a      	str	r2, [r7, #32]
 80112aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ac:	69f9      	ldr	r1, [r7, #28]
 80112ae:	6a3a      	ldr	r2, [r7, #32]
 80112b0:	e841 2300 	strex	r3, r2, [r1]
 80112b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1e5      	bne.n	8011288 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80112bc:	2300      	movs	r3, #0
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3758      	adds	r7, #88	; 0x58
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	080113e9 	.word	0x080113e9
 80112cc:	08011511 	.word	0x08011511
 80112d0:	0801154f 	.word	0x0801154f

080112d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b089      	sub	sp, #36	; 0x24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	e853 3f00 	ldrex	r3, [r3]
 80112e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80112f0:	61fb      	str	r3, [r7, #28]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	461a      	mov	r2, r3
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	61bb      	str	r3, [r7, #24]
 80112fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112fe:	6979      	ldr	r1, [r7, #20]
 8011300:	69ba      	ldr	r2, [r7, #24]
 8011302:	e841 2300 	strex	r3, r2, [r1]
 8011306:	613b      	str	r3, [r7, #16]
   return(result);
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1e6      	bne.n	80112dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2220      	movs	r2, #32
 8011312:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8011314:	bf00      	nop
 8011316:	3724      	adds	r7, #36	; 0x24
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011320:	b480      	push	{r7}
 8011322:	b095      	sub	sp, #84	; 0x54
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011330:	e853 3f00 	ldrex	r3, [r3]
 8011334:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801133c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	461a      	mov	r2, r3
 8011344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011346:	643b      	str	r3, [r7, #64]	; 0x40
 8011348:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801134a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801134c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801134e:	e841 2300 	strex	r3, r2, [r1]
 8011352:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1e6      	bne.n	8011328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	3308      	adds	r3, #8
 8011360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	e853 3f00 	ldrex	r3, [r3]
 8011368:	61fb      	str	r3, [r7, #28]
   return(result);
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	f023 0301 	bic.w	r3, r3, #1
 8011370:	64bb      	str	r3, [r7, #72]	; 0x48
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	3308      	adds	r3, #8
 8011378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801137a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801137c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801137e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011382:	e841 2300 	strex	r3, r2, [r1]
 8011386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138a:	2b00      	cmp	r3, #0
 801138c:	d1e5      	bne.n	801135a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011392:	2b01      	cmp	r3, #1
 8011394:	d118      	bne.n	80113c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	e853 3f00 	ldrex	r3, [r3]
 80113a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	f023 0310 	bic.w	r3, r3, #16
 80113aa:	647b      	str	r3, [r7, #68]	; 0x44
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	461a      	mov	r2, r3
 80113b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113b4:	61bb      	str	r3, [r7, #24]
 80113b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113b8:	6979      	ldr	r1, [r7, #20]
 80113ba:	69ba      	ldr	r2, [r7, #24]
 80113bc:	e841 2300 	strex	r3, r2, [r1]
 80113c0:	613b      	str	r3, [r7, #16]
   return(result);
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d1e6      	bne.n	8011396 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2220      	movs	r2, #32
 80113cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2200      	movs	r2, #0
 80113da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80113dc:	bf00      	nop
 80113de:	3754      	adds	r7, #84	; 0x54
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b09c      	sub	sp, #112	; 0x70
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	69db      	ldr	r3, [r3, #28]
 80113fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113fe:	d071      	beq.n	80114e4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011402:	2200      	movs	r2, #0
 8011404:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801140e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011410:	e853 3f00 	ldrex	r3, [r3]
 8011414:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801141c:	66bb      	str	r3, [r7, #104]	; 0x68
 801141e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	461a      	mov	r2, r3
 8011424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011426:	65bb      	str	r3, [r7, #88]	; 0x58
 8011428:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801142a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801142c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801142e:	e841 2300 	strex	r3, r2, [r1]
 8011432:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1e6      	bne.n	8011408 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801143a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	3308      	adds	r3, #8
 8011440:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011444:	e853 3f00 	ldrex	r3, [r3]
 8011448:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801144a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801144c:	f023 0301 	bic.w	r3, r3, #1
 8011450:	667b      	str	r3, [r7, #100]	; 0x64
 8011452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	3308      	adds	r3, #8
 8011458:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801145a:	647a      	str	r2, [r7, #68]	; 0x44
 801145c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801145e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011462:	e841 2300 	strex	r3, r2, [r1]
 8011466:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801146a:	2b00      	cmp	r3, #0
 801146c:	d1e5      	bne.n	801143a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801146e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	3308      	adds	r3, #8
 8011474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011478:	e853 3f00 	ldrex	r3, [r3]
 801147c:	623b      	str	r3, [r7, #32]
   return(result);
 801147e:	6a3b      	ldr	r3, [r7, #32]
 8011480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011484:	663b      	str	r3, [r7, #96]	; 0x60
 8011486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	3308      	adds	r3, #8
 801148c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801148e:	633a      	str	r2, [r7, #48]	; 0x30
 8011490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011496:	e841 2300 	strex	r3, r2, [r1]
 801149a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d1e5      	bne.n	801146e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80114a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114a4:	2220      	movs	r2, #32
 80114a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	d118      	bne.n	80114e4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	e853 3f00 	ldrex	r3, [r3]
 80114be:	60fb      	str	r3, [r7, #12]
   return(result);
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	f023 0310 	bic.w	r3, r3, #16
 80114c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80114c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	461a      	mov	r2, r3
 80114ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114d0:	61fb      	str	r3, [r7, #28]
 80114d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d4:	69b9      	ldr	r1, [r7, #24]
 80114d6:	69fa      	ldr	r2, [r7, #28]
 80114d8:	e841 2300 	strex	r3, r2, [r1]
 80114dc:	617b      	str	r3, [r7, #20]
   return(result);
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d1e6      	bne.n	80114b2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80114e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114e6:	2200      	movs	r2, #0
 80114e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d107      	bne.n	8011502 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80114f8:	4619      	mov	r1, r3
 80114fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80114fc:	f7ff f974 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011500:	e002      	b.n	8011508 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011502:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011504:	f7f2 fe22 	bl	800414c <HAL_UART_RxCpltCallback>
}
 8011508:	bf00      	nop
 801150a:	3770      	adds	r7, #112	; 0x70
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801151c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2201      	movs	r2, #1
 8011522:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011528:	2b01      	cmp	r3, #1
 801152a:	d109      	bne.n	8011540 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011532:	085b      	lsrs	r3, r3, #1
 8011534:	b29b      	uxth	r3, r3
 8011536:	4619      	mov	r1, r3
 8011538:	68f8      	ldr	r0, [r7, #12]
 801153a:	f7ff f955 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801153e:	e002      	b.n	8011546 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7ff f947 	bl	80107d4 <HAL_UART_RxHalfCpltCallback>
}
 8011546:	bf00      	nop
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b086      	sub	sp, #24
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801155a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011560:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011568:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	689b      	ldr	r3, [r3, #8]
 8011570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011574:	2b80      	cmp	r3, #128	; 0x80
 8011576:	d109      	bne.n	801158c <UART_DMAError+0x3e>
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	2b21      	cmp	r3, #33	; 0x21
 801157c:	d106      	bne.n	801158c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	2200      	movs	r2, #0
 8011582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8011586:	6978      	ldr	r0, [r7, #20]
 8011588:	f7ff fea4 	bl	80112d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	689b      	ldr	r3, [r3, #8]
 8011592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011596:	2b40      	cmp	r3, #64	; 0x40
 8011598:	d109      	bne.n	80115ae <UART_DMAError+0x60>
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2b22      	cmp	r3, #34	; 0x22
 801159e:	d106      	bne.n	80115ae <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80115a8:	6978      	ldr	r0, [r7, #20]
 80115aa:	f7ff feb9 	bl	8011320 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115b4:	f043 0210 	orr.w	r2, r3, #16
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80115be:	6978      	ldr	r0, [r7, #20]
 80115c0:	f7f2 fe66 	bl	8004290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115c4:	bf00      	nop
 80115c6:	3718      	adds	r7, #24
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2200      	movs	r2, #0
 80115de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2200      	movs	r2, #0
 80115e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80115ea:	68f8      	ldr	r0, [r7, #12]
 80115ec:	f7f2 fe50 	bl	8004290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115f0:	bf00      	nop
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b088      	sub	sp, #32
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	e853 3f00 	ldrex	r3, [r3]
 801160c:	60bb      	str	r3, [r7, #8]
   return(result);
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011614:	61fb      	str	r3, [r7, #28]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	461a      	mov	r2, r3
 801161c:	69fb      	ldr	r3, [r7, #28]
 801161e:	61bb      	str	r3, [r7, #24]
 8011620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011622:	6979      	ldr	r1, [r7, #20]
 8011624:	69ba      	ldr	r2, [r7, #24]
 8011626:	e841 2300 	strex	r3, r2, [r1]
 801162a:	613b      	str	r3, [r7, #16]
   return(result);
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1e6      	bne.n	8011600 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2220      	movs	r2, #32
 8011636:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2200      	movs	r2, #0
 801163c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f7ff f8be 	bl	80107c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011644:	bf00      	nop
 8011646:	3720      	adds	r7, #32
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b096      	sub	sp, #88	; 0x58
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801165a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011664:	2b22      	cmp	r3, #34	; 0x22
 8011666:	f040 8098 	bne.w	801179a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011670:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011674:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8011678:	b2d9      	uxtb	r1, r3
 801167a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801167e:	b2da      	uxtb	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011684:	400a      	ands	r2, r1
 8011686:	b2d2      	uxtb	r2, r2
 8011688:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801168e:	1c5a      	adds	r2, r3, #1
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801169a:	b29b      	uxth	r3, r3
 801169c:	3b01      	subs	r3, #1
 801169e:	b29a      	uxth	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d17b      	bne.n	80117aa <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ba:	e853 3f00 	ldrex	r3, [r3]
 80116be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80116c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80116c6:	653b      	str	r3, [r7, #80]	; 0x50
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	461a      	mov	r2, r3
 80116ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d0:	647b      	str	r3, [r7, #68]	; 0x44
 80116d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80116d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116d8:	e841 2300 	strex	r3, r2, [r1]
 80116dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80116de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1e6      	bne.n	80116b2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	3308      	adds	r3, #8
 80116ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ee:	e853 3f00 	ldrex	r3, [r3]
 80116f2:	623b      	str	r3, [r7, #32]
   return(result);
 80116f4:	6a3b      	ldr	r3, [r7, #32]
 80116f6:	f023 0301 	bic.w	r3, r3, #1
 80116fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	3308      	adds	r3, #8
 8011702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011704:	633a      	str	r2, [r7, #48]	; 0x30
 8011706:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801170a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801170c:	e841 2300 	strex	r3, r2, [r1]
 8011710:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011714:	2b00      	cmp	r3, #0
 8011716:	d1e5      	bne.n	80116e4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2220      	movs	r2, #32
 801171c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2200      	movs	r2, #0
 8011724:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011730:	2b01      	cmp	r3, #1
 8011732:	d12e      	bne.n	8011792 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2200      	movs	r2, #0
 8011738:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	e853 3f00 	ldrex	r3, [r3]
 8011746:	60fb      	str	r3, [r7, #12]
   return(result);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f023 0310 	bic.w	r3, r3, #16
 801174e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	461a      	mov	r2, r3
 8011756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011758:	61fb      	str	r3, [r7, #28]
 801175a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801175c:	69b9      	ldr	r1, [r7, #24]
 801175e:	69fa      	ldr	r2, [r7, #28]
 8011760:	e841 2300 	strex	r3, r2, [r1]
 8011764:	617b      	str	r3, [r7, #20]
   return(result);
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d1e6      	bne.n	801173a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	69db      	ldr	r3, [r3, #28]
 8011772:	f003 0310 	and.w	r3, r3, #16
 8011776:	2b10      	cmp	r3, #16
 8011778:	d103      	bne.n	8011782 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	2210      	movs	r2, #16
 8011780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011788:	4619      	mov	r1, r3
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f7ff f82c 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011790:	e00b      	b.n	80117aa <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f7f2 fcda 	bl	800414c <HAL_UART_RxCpltCallback>
}
 8011798:	e007      	b.n	80117aa <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	699a      	ldr	r2, [r3, #24]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f042 0208 	orr.w	r2, r2, #8
 80117a8:	619a      	str	r2, [r3, #24]
}
 80117aa:	bf00      	nop
 80117ac:	3758      	adds	r7, #88	; 0x58
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}

080117b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80117b2:	b580      	push	{r7, lr}
 80117b4:	b096      	sub	sp, #88	; 0x58
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80117c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80117ca:	2b22      	cmp	r3, #34	; 0x22
 80117cc:	f040 8098 	bne.w	8011900 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80117e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80117e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80117e8:	4013      	ands	r3, r2
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117f4:	1c9a      	adds	r2, r3, #2
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011800:	b29b      	uxth	r3, r3
 8011802:	3b01      	subs	r3, #1
 8011804:	b29a      	uxth	r2, r3
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011812:	b29b      	uxth	r3, r3
 8011814:	2b00      	cmp	r3, #0
 8011816:	d17b      	bne.n	8011910 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011820:	e853 3f00 	ldrex	r3, [r3]
 8011824:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801182c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	461a      	mov	r2, r3
 8011834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011836:	643b      	str	r3, [r7, #64]	; 0x40
 8011838:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801183c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801183e:	e841 2300 	strex	r3, r2, [r1]
 8011842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1e6      	bne.n	8011818 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	3308      	adds	r3, #8
 8011850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011852:	6a3b      	ldr	r3, [r7, #32]
 8011854:	e853 3f00 	ldrex	r3, [r3]
 8011858:	61fb      	str	r3, [r7, #28]
   return(result);
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	f023 0301 	bic.w	r3, r3, #1
 8011860:	64bb      	str	r3, [r7, #72]	; 0x48
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	3308      	adds	r3, #8
 8011868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801186a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801186c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801186e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011872:	e841 2300 	strex	r3, r2, [r1]
 8011876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1e5      	bne.n	801184a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2220      	movs	r2, #32
 8011882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2200      	movs	r2, #0
 801188a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011896:	2b01      	cmp	r3, #1
 8011898:	d12e      	bne.n	80118f8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2200      	movs	r2, #0
 801189e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	e853 3f00 	ldrex	r3, [r3]
 80118ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	f023 0310 	bic.w	r3, r3, #16
 80118b4:	647b      	str	r3, [r7, #68]	; 0x44
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	461a      	mov	r2, r3
 80118bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118be:	61bb      	str	r3, [r7, #24]
 80118c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118c2:	6979      	ldr	r1, [r7, #20]
 80118c4:	69ba      	ldr	r2, [r7, #24]
 80118c6:	e841 2300 	strex	r3, r2, [r1]
 80118ca:	613b      	str	r3, [r7, #16]
   return(result);
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1e6      	bne.n	80118a0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	69db      	ldr	r3, [r3, #28]
 80118d8:	f003 0310 	and.w	r3, r3, #16
 80118dc:	2b10      	cmp	r3, #16
 80118de:	d103      	bne.n	80118e8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2210      	movs	r2, #16
 80118e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80118ee:	4619      	mov	r1, r3
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f7fe ff79 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80118f6:	e00b      	b.n	8011910 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f7f2 fc27 	bl	800414c <HAL_UART_RxCpltCallback>
}
 80118fe:	e007      	b.n	8011910 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	699a      	ldr	r2, [r3, #24]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	f042 0208 	orr.w	r2, r2, #8
 801190e:	619a      	str	r2, [r3, #24]
}
 8011910:	bf00      	nop
 8011912:	3758      	adds	r7, #88	; 0x58
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011918:	b480      	push	{r7}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011922:	2300      	movs	r3, #0
 8011924:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801192a:	2b84      	cmp	r3, #132	; 0x84
 801192c:	d005      	beq.n	801193a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	4413      	add	r3, r2
 8011936:	3303      	adds	r3, #3
 8011938:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801193a:	68fb      	ldr	r3, [r7, #12]
}
 801193c:	4618      	mov	r0, r3
 801193e:	3714      	adds	r7, #20
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801194e:	f3ef 8305 	mrs	r3, IPSR
 8011952:	607b      	str	r3, [r7, #4]
  return(result);
 8011954:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011956:	2b00      	cmp	r3, #0
 8011958:	bf14      	ite	ne
 801195a:	2301      	movne	r3, #1
 801195c:	2300      	moveq	r3, #0
 801195e:	b2db      	uxtb	r3, r3
}
 8011960:	4618      	mov	r0, r3
 8011962:	370c      	adds	r7, #12
 8011964:	46bd      	mov	sp, r7
 8011966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196a:	4770      	bx	lr

0801196c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011970:	f001 fafa 	bl	8012f68 <vTaskStartScheduler>
  
  return osOK;
 8011974:	2300      	movs	r3, #0
}
 8011976:	4618      	mov	r0, r3
 8011978:	bd80      	pop	{r7, pc}

0801197a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801197a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801197c:	b089      	sub	sp, #36	; 0x24
 801197e:	af04      	add	r7, sp, #16
 8011980:	6078      	str	r0, [r7, #4]
 8011982:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	695b      	ldr	r3, [r3, #20]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d020      	beq.n	80119ce <osThreadCreate+0x54>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	699b      	ldr	r3, [r3, #24]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d01c      	beq.n	80119ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	685c      	ldr	r4, [r3, #4]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	691e      	ldr	r6, [r3, #16]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7ff ffb6 	bl	8011918 <makeFreeRtosPriority>
 80119ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	695b      	ldr	r3, [r3, #20]
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119b6:	9202      	str	r2, [sp, #8]
 80119b8:	9301      	str	r3, [sp, #4]
 80119ba:	9100      	str	r1, [sp, #0]
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	4632      	mov	r2, r6
 80119c0:	4629      	mov	r1, r5
 80119c2:	4620      	mov	r0, r4
 80119c4:	f001 f864 	bl	8012a90 <xTaskCreateStatic>
 80119c8:	4603      	mov	r3, r0
 80119ca:	60fb      	str	r3, [r7, #12]
 80119cc:	e01c      	b.n	8011a08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	685c      	ldr	r4, [r3, #4]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff ff98 	bl	8011918 <makeFreeRtosPriority>
 80119e8:	4602      	mov	r2, r0
 80119ea:	f107 030c 	add.w	r3, r7, #12
 80119ee:	9301      	str	r3, [sp, #4]
 80119f0:	9200      	str	r2, [sp, #0]
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	4632      	mov	r2, r6
 80119f6:	4629      	mov	r1, r5
 80119f8:	4620      	mov	r0, r4
 80119fa:	f001 f8ac 	bl	8012b56 <xTaskCreate>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d001      	beq.n	8011a08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011a04:	2300      	movs	r3, #0
 8011a06:	e000      	b.n	8011a0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011a08:	68fb      	ldr	r3, [r7, #12]
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3714      	adds	r7, #20
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b084      	sub	sp, #16
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d001      	beq.n	8011a28 <osDelay+0x16>
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	e000      	b.n	8011a2a <osDelay+0x18>
 8011a28:	2301      	movs	r3, #1
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f001 fa66 	bl	8012efc <vTaskDelay>
  
  return osOK;
 8011a30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3710      	adds	r7, #16
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b082      	sub	sp, #8
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d007      	beq.n	8011a5a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	4619      	mov	r1, r3
 8011a50:	2001      	movs	r0, #1
 8011a52:	f000 fb84 	bl	801215e <xQueueCreateMutexStatic>
 8011a56:	4603      	mov	r3, r0
 8011a58:	e003      	b.n	8011a62 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011a5a:	2001      	movs	r0, #1
 8011a5c:	f000 fb67 	bl	801212e <xQueueCreateMutex>
 8011a60:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
	...

08011a6c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011a76:	2300      	movs	r3, #0
 8011a78:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d101      	bne.n	8011a84 <osMutexWait+0x18>
    return osErrorParameter;
 8011a80:	2380      	movs	r3, #128	; 0x80
 8011a82:	e03a      	b.n	8011afa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011a84:	2300      	movs	r3, #0
 8011a86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a8e:	d103      	bne.n	8011a98 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011a90:	f04f 33ff 	mov.w	r3, #4294967295
 8011a94:	60fb      	str	r3, [r7, #12]
 8011a96:	e009      	b.n	8011aac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d006      	beq.n	8011aac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d101      	bne.n	8011aac <osMutexWait+0x40>
      ticks = 1;
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011aac:	f7ff ff4c 	bl	8011948 <inHandlerMode>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d017      	beq.n	8011ae6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011ab6:	f107 0308 	add.w	r3, r7, #8
 8011aba:	461a      	mov	r2, r3
 8011abc:	2100      	movs	r1, #0
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f000 fe18 	bl	80126f4 <xQueueReceiveFromISR>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b01      	cmp	r3, #1
 8011ac8:	d001      	beq.n	8011ace <osMutexWait+0x62>
      return osErrorOS;
 8011aca:	23ff      	movs	r3, #255	; 0xff
 8011acc:	e015      	b.n	8011afa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d011      	beq.n	8011af8 <osMutexWait+0x8c>
 8011ad4:	4b0b      	ldr	r3, [pc, #44]	; (8011b04 <osMutexWait+0x98>)
 8011ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ada:	601a      	str	r2, [r3, #0]
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	e008      	b.n	8011af8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011ae6:	68f9      	ldr	r1, [r7, #12]
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 fcef 	bl	80124cc <xQueueSemaphoreTake>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d001      	beq.n	8011af8 <osMutexWait+0x8c>
    return osErrorOS;
 8011af4:	23ff      	movs	r3, #255	; 0xff
 8011af6:	e000      	b.n	8011afa <osMutexWait+0x8e>
  }
  
  return osOK;
 8011af8:	2300      	movs	r3, #0
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3710      	adds	r7, #16
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop
 8011b04:	e000ed04 	.word	0xe000ed04

08011b08 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011b10:	2300      	movs	r3, #0
 8011b12:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011b14:	2300      	movs	r3, #0
 8011b16:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011b18:	f7ff ff16 	bl	8011948 <inHandlerMode>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d016      	beq.n	8011b50 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011b22:	f107 0308 	add.w	r3, r7, #8
 8011b26:	4619      	mov	r1, r3
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 fc39 	bl	80123a0 <xQueueGiveFromISR>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d001      	beq.n	8011b38 <osMutexRelease+0x30>
      return osErrorOS;
 8011b34:	23ff      	movs	r3, #255	; 0xff
 8011b36:	e017      	b.n	8011b68 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d013      	beq.n	8011b66 <osMutexRelease+0x5e>
 8011b3e:	4b0c      	ldr	r3, [pc, #48]	; (8011b70 <osMutexRelease+0x68>)
 8011b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b44:	601a      	str	r2, [r3, #0]
 8011b46:	f3bf 8f4f 	dsb	sy
 8011b4a:	f3bf 8f6f 	isb	sy
 8011b4e:	e00a      	b.n	8011b66 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011b50:	2300      	movs	r3, #0
 8011b52:	2200      	movs	r2, #0
 8011b54:	2100      	movs	r1, #0
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f000 fb1c 	bl	8012194 <xQueueGenericSend>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d001      	beq.n	8011b66 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011b62:	23ff      	movs	r3, #255	; 0xff
 8011b64:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011b66:	68fb      	ldr	r3, [r7, #12]
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	e000ed04 	.word	0xe000ed04

08011b74 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b086      	sub	sp, #24
 8011b78:	af02      	add	r7, sp, #8
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00f      	beq.n	8011ba6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	2b01      	cmp	r3, #1
 8011b8a:	d10a      	bne.n	8011ba2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	2203      	movs	r2, #3
 8011b92:	9200      	str	r2, [sp, #0]
 8011b94:	2200      	movs	r2, #0
 8011b96:	2100      	movs	r1, #0
 8011b98:	2001      	movs	r0, #1
 8011b9a:	f000 f9cb 	bl	8011f34 <xQueueGenericCreateStatic>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	e016      	b.n	8011bd0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	e014      	b.n	8011bd0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d110      	bne.n	8011bce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011bac:	2203      	movs	r2, #3
 8011bae:	2100      	movs	r1, #0
 8011bb0:	2001      	movs	r0, #1
 8011bb2:	f000 fa41 	bl	8012038 <xQueueGenericCreate>
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d005      	beq.n	8011bca <osSemaphoreCreate+0x56>
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f000 fae5 	bl	8012194 <xQueueGenericSend>
      return sema;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	e000      	b.n	8011bd0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011bce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3710      	adds	r7, #16
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011be2:	2300      	movs	r3, #0
 8011be4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d101      	bne.n	8011bf0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011bec:	2380      	movs	r3, #128	; 0x80
 8011bee:	e03a      	b.n	8011c66 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bfa:	d103      	bne.n	8011c04 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8011c00:	60fb      	str	r3, [r7, #12]
 8011c02:	e009      	b.n	8011c18 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d006      	beq.n	8011c18 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d101      	bne.n	8011c18 <osSemaphoreWait+0x40>
      ticks = 1;
 8011c14:	2301      	movs	r3, #1
 8011c16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011c18:	f7ff fe96 	bl	8011948 <inHandlerMode>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d017      	beq.n	8011c52 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011c22:	f107 0308 	add.w	r3, r7, #8
 8011c26:	461a      	mov	r2, r3
 8011c28:	2100      	movs	r1, #0
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f000 fd62 	bl	80126f4 <xQueueReceiveFromISR>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d001      	beq.n	8011c3a <osSemaphoreWait+0x62>
      return osErrorOS;
 8011c36:	23ff      	movs	r3, #255	; 0xff
 8011c38:	e015      	b.n	8011c66 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d011      	beq.n	8011c64 <osSemaphoreWait+0x8c>
 8011c40:	4b0b      	ldr	r3, [pc, #44]	; (8011c70 <osSemaphoreWait+0x98>)
 8011c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c46:	601a      	str	r2, [r3, #0]
 8011c48:	f3bf 8f4f 	dsb	sy
 8011c4c:	f3bf 8f6f 	isb	sy
 8011c50:	e008      	b.n	8011c64 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011c52:	68f9      	ldr	r1, [r7, #12]
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 fc39 	bl	80124cc <xQueueSemaphoreTake>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d001      	beq.n	8011c64 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011c60:	23ff      	movs	r3, #255	; 0xff
 8011c62:	e000      	b.n	8011c66 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011c64:	2300      	movs	r3, #0
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3710      	adds	r7, #16
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	e000ed04 	.word	0xe000ed04

08011c74 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011c80:	2300      	movs	r3, #0
 8011c82:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011c84:	f7ff fe60 	bl	8011948 <inHandlerMode>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d016      	beq.n	8011cbc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011c8e:	f107 0308 	add.w	r3, r7, #8
 8011c92:	4619      	mov	r1, r3
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fb83 	bl	80123a0 <xQueueGiveFromISR>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d001      	beq.n	8011ca4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011ca0:	23ff      	movs	r3, #255	; 0xff
 8011ca2:	e017      	b.n	8011cd4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d013      	beq.n	8011cd2 <osSemaphoreRelease+0x5e>
 8011caa:	4b0c      	ldr	r3, [pc, #48]	; (8011cdc <osSemaphoreRelease+0x68>)
 8011cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cb0:	601a      	str	r2, [r3, #0]
 8011cb2:	f3bf 8f4f 	dsb	sy
 8011cb6:	f3bf 8f6f 	isb	sy
 8011cba:	e00a      	b.n	8011cd2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f000 fa66 	bl	8012194 <xQueueGenericSend>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d001      	beq.n	8011cd2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011cce:	23ff      	movs	r3, #255	; 0xff
 8011cd0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3710      	adds	r7, #16
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	e000ed04 	.word	0xe000ed04

08011ce0 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 fd89 	bl	8012800 <uxQueueMessagesWaiting>
 8011cee:	4603      	mov	r3, r0
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f103 0208 	add.w	r2, r3, #8
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f103 0208 	add.w	r2, r3, #8
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f103 0208 	add.w	r2, r3, #8
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011d2c:	bf00      	nop
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2200      	movs	r2, #0
 8011d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011d46:	bf00      	nop
 8011d48:	370c      	adds	r7, #12
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d50:	4770      	bx	lr

08011d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d52:	b480      	push	{r7}
 8011d54:	b085      	sub	sp, #20
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	6078      	str	r0, [r7, #4]
 8011d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	68fa      	ldr	r2, [r7, #12]
 8011d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	689a      	ldr	r2, [r3, #8]
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	683a      	ldr	r2, [r7, #0]
 8011d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	687a      	ldr	r2, [r7, #4]
 8011d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	1c5a      	adds	r2, r3, #1
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	601a      	str	r2, [r3, #0]
}
 8011d8e:	bf00      	nop
 8011d90:	3714      	adds	r7, #20
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr

08011d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d9a:	b480      	push	{r7}
 8011d9c:	b085      	sub	sp, #20
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011db0:	d103      	bne.n	8011dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	691b      	ldr	r3, [r3, #16]
 8011db6:	60fb      	str	r3, [r7, #12]
 8011db8:	e00c      	b.n	8011dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	3308      	adds	r3, #8
 8011dbe:	60fb      	str	r3, [r7, #12]
 8011dc0:	e002      	b.n	8011dc8 <vListInsert+0x2e>
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	60fb      	str	r3, [r7, #12]
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	68ba      	ldr	r2, [r7, #8]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d2f6      	bcs.n	8011dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	685a      	ldr	r2, [r3, #4]
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	683a      	ldr	r2, [r7, #0]
 8011de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	68fa      	ldr	r2, [r7, #12]
 8011de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	683a      	ldr	r2, [r7, #0]
 8011dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	1c5a      	adds	r2, r3, #1
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	601a      	str	r2, [r3, #0]
}
 8011e00:	bf00      	nop
 8011e02:	3714      	adds	r7, #20
 8011e04:	46bd      	mov	sp, r7
 8011e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0a:	4770      	bx	lr

08011e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b085      	sub	sp, #20
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	691b      	ldr	r3, [r3, #16]
 8011e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	6892      	ldr	r2, [r2, #8]
 8011e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	689b      	ldr	r3, [r3, #8]
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	6852      	ldr	r2, [r2, #4]
 8011e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d103      	bne.n	8011e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	689a      	ldr	r2, [r3, #8]
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2200      	movs	r2, #0
 8011e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	1e5a      	subs	r2, r3, #1
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3714      	adds	r7, #20
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d10c      	bne.n	8011e8e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e78:	b672      	cpsid	i
 8011e7a:	f383 8811 	msr	BASEPRI, r3
 8011e7e:	f3bf 8f6f 	isb	sy
 8011e82:	f3bf 8f4f 	dsb	sy
 8011e86:	b662      	cpsie	i
 8011e88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011e8a:	bf00      	nop
 8011e8c:	e7fe      	b.n	8011e8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011e8e:	f001 ffed 	bl	8013e6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e9a:	68f9      	ldr	r1, [r7, #12]
 8011e9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011e9e:	fb01 f303 	mul.w	r3, r1, r3
 8011ea2:	441a      	add	r2, r3
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681a      	ldr	r2, [r3, #0]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	68f9      	ldr	r1, [r7, #12]
 8011ec2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ec4:	fb01 f303 	mul.w	r3, r1, r3
 8011ec8:	441a      	add	r2, r3
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	22ff      	movs	r2, #255	; 0xff
 8011ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	22ff      	movs	r2, #255	; 0xff
 8011eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d114      	bne.n	8011f0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	691b      	ldr	r3, [r3, #16]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d01a      	beq.n	8011f22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	3310      	adds	r3, #16
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f001 faa7 	bl	8013444 <xTaskRemoveFromEventList>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d012      	beq.n	8011f22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011efc:	4b0c      	ldr	r3, [pc, #48]	; (8011f30 <xQueueGenericReset+0xd0>)
 8011efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f02:	601a      	str	r2, [r3, #0]
 8011f04:	f3bf 8f4f 	dsb	sy
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	e009      	b.n	8011f22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	3310      	adds	r3, #16
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7ff fef0 	bl	8011cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	3324      	adds	r3, #36	; 0x24
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7ff feeb 	bl	8011cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011f22:	f001 ffd7 	bl	8013ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011f26:	2301      	movs	r3, #1
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3710      	adds	r7, #16
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}
 8011f30:	e000ed04 	.word	0xe000ed04

08011f34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b08e      	sub	sp, #56	; 0x38
 8011f38:	af02      	add	r7, sp, #8
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	607a      	str	r2, [r7, #4]
 8011f40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d10c      	bne.n	8011f62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8011f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f4c:	b672      	cpsid	i
 8011f4e:	f383 8811 	msr	BASEPRI, r3
 8011f52:	f3bf 8f6f 	isb	sy
 8011f56:	f3bf 8f4f 	dsb	sy
 8011f5a:	b662      	cpsie	i
 8011f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011f5e:	bf00      	nop
 8011f60:	e7fe      	b.n	8011f60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d10c      	bne.n	8011f82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8011f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6c:	b672      	cpsid	i
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	b662      	cpsie	i
 8011f7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011f7e:	bf00      	nop
 8011f80:	e7fe      	b.n	8011f80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d002      	beq.n	8011f8e <xQueueGenericCreateStatic+0x5a>
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d001      	beq.n	8011f92 <xQueueGenericCreateStatic+0x5e>
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e000      	b.n	8011f94 <xQueueGenericCreateStatic+0x60>
 8011f92:	2300      	movs	r3, #0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d10c      	bne.n	8011fb2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8011f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9c:	b672      	cpsid	i
 8011f9e:	f383 8811 	msr	BASEPRI, r3
 8011fa2:	f3bf 8f6f 	isb	sy
 8011fa6:	f3bf 8f4f 	dsb	sy
 8011faa:	b662      	cpsie	i
 8011fac:	623b      	str	r3, [r7, #32]
}
 8011fae:	bf00      	nop
 8011fb0:	e7fe      	b.n	8011fb0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d102      	bne.n	8011fbe <xQueueGenericCreateStatic+0x8a>
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d101      	bne.n	8011fc2 <xQueueGenericCreateStatic+0x8e>
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e000      	b.n	8011fc4 <xQueueGenericCreateStatic+0x90>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d10c      	bne.n	8011fe2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8011fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fcc:	b672      	cpsid	i
 8011fce:	f383 8811 	msr	BASEPRI, r3
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	f3bf 8f4f 	dsb	sy
 8011fda:	b662      	cpsie	i
 8011fdc:	61fb      	str	r3, [r7, #28]
}
 8011fde:	bf00      	nop
 8011fe0:	e7fe      	b.n	8011fe0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011fe2:	2348      	movs	r3, #72	; 0x48
 8011fe4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	2b48      	cmp	r3, #72	; 0x48
 8011fea:	d00c      	beq.n	8012006 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8011fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff0:	b672      	cpsid	i
 8011ff2:	f383 8811 	msr	BASEPRI, r3
 8011ff6:	f3bf 8f6f 	isb	sy
 8011ffa:	f3bf 8f4f 	dsb	sy
 8011ffe:	b662      	cpsie	i
 8012000:	61bb      	str	r3, [r7, #24]
}
 8012002:	bf00      	nop
 8012004:	e7fe      	b.n	8012004 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012006:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200e:	2b00      	cmp	r3, #0
 8012010:	d00d      	beq.n	801202e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012014:	2201      	movs	r2, #1
 8012016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801201a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	4613      	mov	r3, r2
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	68b9      	ldr	r1, [r7, #8]
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f000 f847 	bl	80120bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012030:	4618      	mov	r0, r3
 8012032:	3730      	adds	r7, #48	; 0x30
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012038:	b580      	push	{r7, lr}
 801203a:	b08a      	sub	sp, #40	; 0x28
 801203c:	af02      	add	r7, sp, #8
 801203e:	60f8      	str	r0, [r7, #12]
 8012040:	60b9      	str	r1, [r7, #8]
 8012042:	4613      	mov	r3, r2
 8012044:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d10c      	bne.n	8012066 <xQueueGenericCreate+0x2e>
	__asm volatile
 801204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012050:	b672      	cpsid	i
 8012052:	f383 8811 	msr	BASEPRI, r3
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	f3bf 8f4f 	dsb	sy
 801205e:	b662      	cpsie	i
 8012060:	613b      	str	r3, [r7, #16]
}
 8012062:	bf00      	nop
 8012064:	e7fe      	b.n	8012064 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d102      	bne.n	8012072 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801206c:	2300      	movs	r3, #0
 801206e:	61fb      	str	r3, [r7, #28]
 8012070:	e004      	b.n	801207c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	68ba      	ldr	r2, [r7, #8]
 8012076:	fb02 f303 	mul.w	r3, r2, r3
 801207a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	3348      	adds	r3, #72	; 0x48
 8012080:	4618      	mov	r0, r3
 8012082:	f002 f81f 	bl	80140c4 <pvPortMalloc>
 8012086:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012088:	69bb      	ldr	r3, [r7, #24]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d011      	beq.n	80120b2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	3348      	adds	r3, #72	; 0x48
 8012096:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012098:	69bb      	ldr	r3, [r7, #24]
 801209a:	2200      	movs	r2, #0
 801209c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80120a0:	79fa      	ldrb	r2, [r7, #7]
 80120a2:	69bb      	ldr	r3, [r7, #24]
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	4613      	mov	r3, r2
 80120a8:	697a      	ldr	r2, [r7, #20]
 80120aa:	68b9      	ldr	r1, [r7, #8]
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f000 f805 	bl	80120bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80120b2:	69bb      	ldr	r3, [r7, #24]
	}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3720      	adds	r7, #32
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	60b9      	str	r1, [r7, #8]
 80120c6:	607a      	str	r2, [r7, #4]
 80120c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d103      	bne.n	80120d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80120d0:	69bb      	ldr	r3, [r7, #24]
 80120d2:	69ba      	ldr	r2, [r7, #24]
 80120d4:	601a      	str	r2, [r3, #0]
 80120d6:	e002      	b.n	80120de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	68fa      	ldr	r2, [r7, #12]
 80120e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	68ba      	ldr	r2, [r7, #8]
 80120e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80120ea:	2101      	movs	r1, #1
 80120ec:	69b8      	ldr	r0, [r7, #24]
 80120ee:	f7ff feb7 	bl	8011e60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80120f2:	bf00      	nop
 80120f4:	3710      	adds	r7, #16
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b082      	sub	sp, #8
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d00e      	beq.n	8012126 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2200      	movs	r2, #0
 801210c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2200      	movs	r2, #0
 8012112:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2200      	movs	r2, #0
 8012118:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801211a:	2300      	movs	r3, #0
 801211c:	2200      	movs	r2, #0
 801211e:	2100      	movs	r1, #0
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f000 f837 	bl	8012194 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012126:	bf00      	nop
 8012128:	3708      	adds	r7, #8
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}

0801212e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801212e:	b580      	push	{r7, lr}
 8012130:	b086      	sub	sp, #24
 8012132:	af00      	add	r7, sp, #0
 8012134:	4603      	mov	r3, r0
 8012136:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012138:	2301      	movs	r3, #1
 801213a:	617b      	str	r3, [r7, #20]
 801213c:	2300      	movs	r3, #0
 801213e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012140:	79fb      	ldrb	r3, [r7, #7]
 8012142:	461a      	mov	r2, r3
 8012144:	6939      	ldr	r1, [r7, #16]
 8012146:	6978      	ldr	r0, [r7, #20]
 8012148:	f7ff ff76 	bl	8012038 <xQueueGenericCreate>
 801214c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801214e:	68f8      	ldr	r0, [r7, #12]
 8012150:	f7ff ffd3 	bl	80120fa <prvInitialiseMutex>

		return xNewQueue;
 8012154:	68fb      	ldr	r3, [r7, #12]
	}
 8012156:	4618      	mov	r0, r3
 8012158:	3718      	adds	r7, #24
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801215e:	b580      	push	{r7, lr}
 8012160:	b088      	sub	sp, #32
 8012162:	af02      	add	r7, sp, #8
 8012164:	4603      	mov	r3, r0
 8012166:	6039      	str	r1, [r7, #0]
 8012168:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801216a:	2301      	movs	r3, #1
 801216c:	617b      	str	r3, [r7, #20]
 801216e:	2300      	movs	r3, #0
 8012170:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012172:	79fb      	ldrb	r3, [r7, #7]
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	2200      	movs	r2, #0
 801217a:	6939      	ldr	r1, [r7, #16]
 801217c:	6978      	ldr	r0, [r7, #20]
 801217e:	f7ff fed9 	bl	8011f34 <xQueueGenericCreateStatic>
 8012182:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	f7ff ffb8 	bl	80120fa <prvInitialiseMutex>

		return xNewQueue;
 801218a:	68fb      	ldr	r3, [r7, #12]
	}
 801218c:	4618      	mov	r0, r3
 801218e:	3718      	adds	r7, #24
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}

08012194 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b08e      	sub	sp, #56	; 0x38
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
 80121a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80121a2:	2300      	movs	r3, #0
 80121a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10c      	bne.n	80121ca <xQueueGenericSend+0x36>
	__asm volatile
 80121b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b4:	b672      	cpsid	i
 80121b6:	f383 8811 	msr	BASEPRI, r3
 80121ba:	f3bf 8f6f 	isb	sy
 80121be:	f3bf 8f4f 	dsb	sy
 80121c2:	b662      	cpsie	i
 80121c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80121c6:	bf00      	nop
 80121c8:	e7fe      	b.n	80121c8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d103      	bne.n	80121d8 <xQueueGenericSend+0x44>
 80121d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d101      	bne.n	80121dc <xQueueGenericSend+0x48>
 80121d8:	2301      	movs	r3, #1
 80121da:	e000      	b.n	80121de <xQueueGenericSend+0x4a>
 80121dc:	2300      	movs	r3, #0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10c      	bne.n	80121fc <xQueueGenericSend+0x68>
	__asm volatile
 80121e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e6:	b672      	cpsid	i
 80121e8:	f383 8811 	msr	BASEPRI, r3
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	b662      	cpsie	i
 80121f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121f8:	bf00      	nop
 80121fa:	e7fe      	b.n	80121fa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	2b02      	cmp	r3, #2
 8012200:	d103      	bne.n	801220a <xQueueGenericSend+0x76>
 8012202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012206:	2b01      	cmp	r3, #1
 8012208:	d101      	bne.n	801220e <xQueueGenericSend+0x7a>
 801220a:	2301      	movs	r3, #1
 801220c:	e000      	b.n	8012210 <xQueueGenericSend+0x7c>
 801220e:	2300      	movs	r3, #0
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10c      	bne.n	801222e <xQueueGenericSend+0x9a>
	__asm volatile
 8012214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012218:	b672      	cpsid	i
 801221a:	f383 8811 	msr	BASEPRI, r3
 801221e:	f3bf 8f6f 	isb	sy
 8012222:	f3bf 8f4f 	dsb	sy
 8012226:	b662      	cpsie	i
 8012228:	623b      	str	r3, [r7, #32]
}
 801222a:	bf00      	nop
 801222c:	e7fe      	b.n	801222c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801222e:	f001 fad1 	bl	80137d4 <xTaskGetSchedulerState>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d102      	bne.n	801223e <xQueueGenericSend+0xaa>
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d101      	bne.n	8012242 <xQueueGenericSend+0xae>
 801223e:	2301      	movs	r3, #1
 8012240:	e000      	b.n	8012244 <xQueueGenericSend+0xb0>
 8012242:	2300      	movs	r3, #0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d10c      	bne.n	8012262 <xQueueGenericSend+0xce>
	__asm volatile
 8012248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224c:	b672      	cpsid	i
 801224e:	f383 8811 	msr	BASEPRI, r3
 8012252:	f3bf 8f6f 	isb	sy
 8012256:	f3bf 8f4f 	dsb	sy
 801225a:	b662      	cpsie	i
 801225c:	61fb      	str	r3, [r7, #28]
}
 801225e:	bf00      	nop
 8012260:	e7fe      	b.n	8012260 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012262:	f001 fe03 	bl	8013e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801226e:	429a      	cmp	r2, r3
 8012270:	d302      	bcc.n	8012278 <xQueueGenericSend+0xe4>
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	2b02      	cmp	r3, #2
 8012276:	d129      	bne.n	80122cc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012278:	683a      	ldr	r2, [r7, #0]
 801227a:	68b9      	ldr	r1, [r7, #8]
 801227c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801227e:	f000 faf7 	bl	8012870 <prvCopyDataToQueue>
 8012282:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012288:	2b00      	cmp	r3, #0
 801228a:	d010      	beq.n	80122ae <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228e:	3324      	adds	r3, #36	; 0x24
 8012290:	4618      	mov	r0, r3
 8012292:	f001 f8d7 	bl	8013444 <xTaskRemoveFromEventList>
 8012296:	4603      	mov	r3, r0
 8012298:	2b00      	cmp	r3, #0
 801229a:	d013      	beq.n	80122c4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801229c:	4b3f      	ldr	r3, [pc, #252]	; (801239c <xQueueGenericSend+0x208>)
 801229e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122a2:	601a      	str	r2, [r3, #0]
 80122a4:	f3bf 8f4f 	dsb	sy
 80122a8:	f3bf 8f6f 	isb	sy
 80122ac:	e00a      	b.n	80122c4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80122ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d007      	beq.n	80122c4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80122b4:	4b39      	ldr	r3, [pc, #228]	; (801239c <xQueueGenericSend+0x208>)
 80122b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122ba:	601a      	str	r2, [r3, #0]
 80122bc:	f3bf 8f4f 	dsb	sy
 80122c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80122c4:	f001 fe06 	bl	8013ed4 <vPortExitCritical>
				return pdPASS;
 80122c8:	2301      	movs	r3, #1
 80122ca:	e063      	b.n	8012394 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d103      	bne.n	80122da <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80122d2:	f001 fdff 	bl	8013ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80122d6:	2300      	movs	r3, #0
 80122d8:	e05c      	b.n	8012394 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80122da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d106      	bne.n	80122ee <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80122e0:	f107 0314 	add.w	r3, r7, #20
 80122e4:	4618      	mov	r0, r3
 80122e6:	f001 f911 	bl	801350c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80122ea:	2301      	movs	r3, #1
 80122ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80122ee:	f001 fdf1 	bl	8013ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80122f2:	f000 fea7 	bl	8013044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80122f6:	f001 fdb9 	bl	8013e6c <vPortEnterCritical>
 80122fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012300:	b25b      	sxtb	r3, r3
 8012302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012306:	d103      	bne.n	8012310 <xQueueGenericSend+0x17c>
 8012308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230a:	2200      	movs	r2, #0
 801230c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012316:	b25b      	sxtb	r3, r3
 8012318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801231c:	d103      	bne.n	8012326 <xQueueGenericSend+0x192>
 801231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012320:	2200      	movs	r2, #0
 8012322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012326:	f001 fdd5 	bl	8013ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801232a:	1d3a      	adds	r2, r7, #4
 801232c:	f107 0314 	add.w	r3, r7, #20
 8012330:	4611      	mov	r1, r2
 8012332:	4618      	mov	r0, r3
 8012334:	f001 f900 	bl	8013538 <xTaskCheckForTimeOut>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d124      	bne.n	8012388 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801233e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012340:	f000 fb8e 	bl	8012a60 <prvIsQueueFull>
 8012344:	4603      	mov	r3, r0
 8012346:	2b00      	cmp	r3, #0
 8012348:	d018      	beq.n	801237c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234c:	3310      	adds	r3, #16
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	4611      	mov	r1, r2
 8012352:	4618      	mov	r0, r3
 8012354:	f001 f850 	bl	80133f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801235a:	f000 fb19 	bl	8012990 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801235e:	f000 fe7f 	bl	8013060 <xTaskResumeAll>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	f47f af7c 	bne.w	8012262 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801236a:	4b0c      	ldr	r3, [pc, #48]	; (801239c <xQueueGenericSend+0x208>)
 801236c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012370:	601a      	str	r2, [r3, #0]
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	f3bf 8f6f 	isb	sy
 801237a:	e772      	b.n	8012262 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801237c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801237e:	f000 fb07 	bl	8012990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012382:	f000 fe6d 	bl	8013060 <xTaskResumeAll>
 8012386:	e76c      	b.n	8012262 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801238a:	f000 fb01 	bl	8012990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801238e:	f000 fe67 	bl	8013060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012392:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012394:	4618      	mov	r0, r3
 8012396:	3738      	adds	r7, #56	; 0x38
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	e000ed04 	.word	0xe000ed04

080123a0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b08e      	sub	sp, #56	; 0x38
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80123ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10c      	bne.n	80123ce <xQueueGiveFromISR+0x2e>
	__asm volatile
 80123b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b8:	b672      	cpsid	i
 80123ba:	f383 8811 	msr	BASEPRI, r3
 80123be:	f3bf 8f6f 	isb	sy
 80123c2:	f3bf 8f4f 	dsb	sy
 80123c6:	b662      	cpsie	i
 80123c8:	623b      	str	r3, [r7, #32]
}
 80123ca:	bf00      	nop
 80123cc:	e7fe      	b.n	80123cc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d00c      	beq.n	80123f0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80123d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123da:	b672      	cpsid	i
 80123dc:	f383 8811 	msr	BASEPRI, r3
 80123e0:	f3bf 8f6f 	isb	sy
 80123e4:	f3bf 8f4f 	dsb	sy
 80123e8:	b662      	cpsie	i
 80123ea:	61fb      	str	r3, [r7, #28]
}
 80123ec:	bf00      	nop
 80123ee:	e7fe      	b.n	80123ee <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80123f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d103      	bne.n	8012400 <xQueueGiveFromISR+0x60>
 80123f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fa:	689b      	ldr	r3, [r3, #8]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d101      	bne.n	8012404 <xQueueGiveFromISR+0x64>
 8012400:	2301      	movs	r3, #1
 8012402:	e000      	b.n	8012406 <xQueueGiveFromISR+0x66>
 8012404:	2300      	movs	r3, #0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d10c      	bne.n	8012424 <xQueueGiveFromISR+0x84>
	__asm volatile
 801240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240e:	b672      	cpsid	i
 8012410:	f383 8811 	msr	BASEPRI, r3
 8012414:	f3bf 8f6f 	isb	sy
 8012418:	f3bf 8f4f 	dsb	sy
 801241c:	b662      	cpsie	i
 801241e:	61bb      	str	r3, [r7, #24]
}
 8012420:	bf00      	nop
 8012422:	e7fe      	b.n	8012422 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012424:	f001 fe0a 	bl	801403c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012428:	f3ef 8211 	mrs	r2, BASEPRI
 801242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012430:	b672      	cpsid	i
 8012432:	f383 8811 	msr	BASEPRI, r3
 8012436:	f3bf 8f6f 	isb	sy
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	b662      	cpsie	i
 8012440:	617a      	str	r2, [r7, #20]
 8012442:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012444:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012446:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801244c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012454:	429a      	cmp	r2, r3
 8012456:	d22b      	bcs.n	80124b0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801245e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012464:	1c5a      	adds	r2, r3, #1
 8012466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012468:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801246a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012472:	d112      	bne.n	801249a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012478:	2b00      	cmp	r3, #0
 801247a:	d016      	beq.n	80124aa <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247e:	3324      	adds	r3, #36	; 0x24
 8012480:	4618      	mov	r0, r3
 8012482:	f000 ffdf 	bl	8013444 <xTaskRemoveFromEventList>
 8012486:	4603      	mov	r3, r0
 8012488:	2b00      	cmp	r3, #0
 801248a:	d00e      	beq.n	80124aa <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00b      	beq.n	80124aa <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	2201      	movs	r2, #1
 8012496:	601a      	str	r2, [r3, #0]
 8012498:	e007      	b.n	80124aa <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801249a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801249e:	3301      	adds	r3, #1
 80124a0:	b2db      	uxtb	r3, r3
 80124a2:	b25a      	sxtb	r2, r3
 80124a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80124aa:	2301      	movs	r3, #1
 80124ac:	637b      	str	r3, [r7, #52]	; 0x34
 80124ae:	e001      	b.n	80124b4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80124b0:	2300      	movs	r3, #0
 80124b2:	637b      	str	r3, [r7, #52]	; 0x34
 80124b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80124be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80124c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3738      	adds	r7, #56	; 0x38
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
	...

080124cc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b08e      	sub	sp, #56	; 0x38
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80124d6:	2300      	movs	r3, #0
 80124d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80124de:	2300      	movs	r3, #0
 80124e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80124e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d10c      	bne.n	8012502 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80124e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ec:	b672      	cpsid	i
 80124ee:	f383 8811 	msr	BASEPRI, r3
 80124f2:	f3bf 8f6f 	isb	sy
 80124f6:	f3bf 8f4f 	dsb	sy
 80124fa:	b662      	cpsie	i
 80124fc:	623b      	str	r3, [r7, #32]
}
 80124fe:	bf00      	nop
 8012500:	e7fe      	b.n	8012500 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012506:	2b00      	cmp	r3, #0
 8012508:	d00c      	beq.n	8012524 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801250a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801250e:	b672      	cpsid	i
 8012510:	f383 8811 	msr	BASEPRI, r3
 8012514:	f3bf 8f6f 	isb	sy
 8012518:	f3bf 8f4f 	dsb	sy
 801251c:	b662      	cpsie	i
 801251e:	61fb      	str	r3, [r7, #28]
}
 8012520:	bf00      	nop
 8012522:	e7fe      	b.n	8012522 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012524:	f001 f956 	bl	80137d4 <xTaskGetSchedulerState>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d102      	bne.n	8012534 <xQueueSemaphoreTake+0x68>
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d101      	bne.n	8012538 <xQueueSemaphoreTake+0x6c>
 8012534:	2301      	movs	r3, #1
 8012536:	e000      	b.n	801253a <xQueueSemaphoreTake+0x6e>
 8012538:	2300      	movs	r3, #0
 801253a:	2b00      	cmp	r3, #0
 801253c:	d10c      	bne.n	8012558 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 801253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012542:	b672      	cpsid	i
 8012544:	f383 8811 	msr	BASEPRI, r3
 8012548:	f3bf 8f6f 	isb	sy
 801254c:	f3bf 8f4f 	dsb	sy
 8012550:	b662      	cpsie	i
 8012552:	61bb      	str	r3, [r7, #24]
}
 8012554:	bf00      	nop
 8012556:	e7fe      	b.n	8012556 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012558:	f001 fc88 	bl	8013e6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012560:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012564:	2b00      	cmp	r3, #0
 8012566:	d024      	beq.n	80125b2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256a:	1e5a      	subs	r2, r3, #1
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d104      	bne.n	8012582 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012578:	f001 faf2 	bl	8013b60 <pvTaskIncrementMutexHeldCount>
 801257c:	4602      	mov	r2, r0
 801257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012580:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012584:	691b      	ldr	r3, [r3, #16]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d00f      	beq.n	80125aa <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258c:	3310      	adds	r3, #16
 801258e:	4618      	mov	r0, r3
 8012590:	f000 ff58 	bl	8013444 <xTaskRemoveFromEventList>
 8012594:	4603      	mov	r3, r0
 8012596:	2b00      	cmp	r3, #0
 8012598:	d007      	beq.n	80125aa <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801259a:	4b55      	ldr	r3, [pc, #340]	; (80126f0 <xQueueSemaphoreTake+0x224>)
 801259c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125a0:	601a      	str	r2, [r3, #0]
 80125a2:	f3bf 8f4f 	dsb	sy
 80125a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80125aa:	f001 fc93 	bl	8013ed4 <vPortExitCritical>
				return pdPASS;
 80125ae:	2301      	movs	r3, #1
 80125b0:	e099      	b.n	80126e6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d113      	bne.n	80125e0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80125b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d00c      	beq.n	80125d8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80125be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c2:	b672      	cpsid	i
 80125c4:	f383 8811 	msr	BASEPRI, r3
 80125c8:	f3bf 8f6f 	isb	sy
 80125cc:	f3bf 8f4f 	dsb	sy
 80125d0:	b662      	cpsie	i
 80125d2:	617b      	str	r3, [r7, #20]
}
 80125d4:	bf00      	nop
 80125d6:	e7fe      	b.n	80125d6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80125d8:	f001 fc7c 	bl	8013ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80125dc:	2300      	movs	r3, #0
 80125de:	e082      	b.n	80126e6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80125e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80125e6:	f107 030c 	add.w	r3, r7, #12
 80125ea:	4618      	mov	r0, r3
 80125ec:	f000 ff8e 	bl	801350c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80125f0:	2301      	movs	r3, #1
 80125f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80125f4:	f001 fc6e 	bl	8013ed4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80125f8:	f000 fd24 	bl	8013044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125fc:	f001 fc36 	bl	8013e6c <vPortEnterCritical>
 8012600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012606:	b25b      	sxtb	r3, r3
 8012608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801260c:	d103      	bne.n	8012616 <xQueueSemaphoreTake+0x14a>
 801260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012610:	2200      	movs	r2, #0
 8012612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801261c:	b25b      	sxtb	r3, r3
 801261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012622:	d103      	bne.n	801262c <xQueueSemaphoreTake+0x160>
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	2200      	movs	r2, #0
 8012628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801262c:	f001 fc52 	bl	8013ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012630:	463a      	mov	r2, r7
 8012632:	f107 030c 	add.w	r3, r7, #12
 8012636:	4611      	mov	r1, r2
 8012638:	4618      	mov	r0, r3
 801263a:	f000 ff7d 	bl	8013538 <xTaskCheckForTimeOut>
 801263e:	4603      	mov	r3, r0
 8012640:	2b00      	cmp	r3, #0
 8012642:	d132      	bne.n	80126aa <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012646:	f000 f9f5 	bl	8012a34 <prvIsQueueEmpty>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d026      	beq.n	801269e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d109      	bne.n	801266c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8012658:	f001 fc08 	bl	8013e6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	4618      	mov	r0, r3
 8012662:	f001 f8d5 	bl	8013810 <xTaskPriorityInherit>
 8012666:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012668:	f001 fc34 	bl	8013ed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801266e:	3324      	adds	r3, #36	; 0x24
 8012670:	683a      	ldr	r2, [r7, #0]
 8012672:	4611      	mov	r1, r2
 8012674:	4618      	mov	r0, r3
 8012676:	f000 febf 	bl	80133f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801267a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801267c:	f000 f988 	bl	8012990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012680:	f000 fcee 	bl	8013060 <xTaskResumeAll>
 8012684:	4603      	mov	r3, r0
 8012686:	2b00      	cmp	r3, #0
 8012688:	f47f af66 	bne.w	8012558 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 801268c:	4b18      	ldr	r3, [pc, #96]	; (80126f0 <xQueueSemaphoreTake+0x224>)
 801268e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012692:	601a      	str	r2, [r3, #0]
 8012694:	f3bf 8f4f 	dsb	sy
 8012698:	f3bf 8f6f 	isb	sy
 801269c:	e75c      	b.n	8012558 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801269e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126a0:	f000 f976 	bl	8012990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80126a4:	f000 fcdc 	bl	8013060 <xTaskResumeAll>
 80126a8:	e756      	b.n	8012558 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80126aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126ac:	f000 f970 	bl	8012990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80126b0:	f000 fcd6 	bl	8013060 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80126b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126b6:	f000 f9bd 	bl	8012a34 <prvIsQueueEmpty>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f43f af4b 	beq.w	8012558 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00d      	beq.n	80126e4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80126c8:	f001 fbd0 	bl	8013e6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80126cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126ce:	f000 f8b7 	bl	8012840 <prvGetDisinheritPriorityAfterTimeout>
 80126d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80126d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d6:	689b      	ldr	r3, [r3, #8]
 80126d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126da:	4618      	mov	r0, r3
 80126dc:	f001 f9a2 	bl	8013a24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80126e0:	f001 fbf8 	bl	8013ed4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80126e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3738      	adds	r7, #56	; 0x38
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	e000ed04 	.word	0xe000ed04

080126f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b08e      	sub	sp, #56	; 0x38
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012706:	2b00      	cmp	r3, #0
 8012708:	d10c      	bne.n	8012724 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801270a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801270e:	b672      	cpsid	i
 8012710:	f383 8811 	msr	BASEPRI, r3
 8012714:	f3bf 8f6f 	isb	sy
 8012718:	f3bf 8f4f 	dsb	sy
 801271c:	b662      	cpsie	i
 801271e:	623b      	str	r3, [r7, #32]
}
 8012720:	bf00      	nop
 8012722:	e7fe      	b.n	8012722 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d103      	bne.n	8012732 <xQueueReceiveFromISR+0x3e>
 801272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801272e:	2b00      	cmp	r3, #0
 8012730:	d101      	bne.n	8012736 <xQueueReceiveFromISR+0x42>
 8012732:	2301      	movs	r3, #1
 8012734:	e000      	b.n	8012738 <xQueueReceiveFromISR+0x44>
 8012736:	2300      	movs	r3, #0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d10c      	bne.n	8012756 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012740:	b672      	cpsid	i
 8012742:	f383 8811 	msr	BASEPRI, r3
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	b662      	cpsie	i
 8012750:	61fb      	str	r3, [r7, #28]
}
 8012752:	bf00      	nop
 8012754:	e7fe      	b.n	8012754 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012756:	f001 fc71 	bl	801403c <vPortValidateInterruptPriority>
	__asm volatile
 801275a:	f3ef 8211 	mrs	r2, BASEPRI
 801275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012762:	b672      	cpsid	i
 8012764:	f383 8811 	msr	BASEPRI, r3
 8012768:	f3bf 8f6f 	isb	sy
 801276c:	f3bf 8f4f 	dsb	sy
 8012770:	b662      	cpsie	i
 8012772:	61ba      	str	r2, [r7, #24]
 8012774:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012776:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012778:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801277e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012782:	2b00      	cmp	r3, #0
 8012784:	d02f      	beq.n	80127e6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801278c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012790:	68b9      	ldr	r1, [r7, #8]
 8012792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012794:	f000 f8d6 	bl	8012944 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279a:	1e5a      	subs	r2, r3, #1
 801279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80127a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80127a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a8:	d112      	bne.n	80127d0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ac:	691b      	ldr	r3, [r3, #16]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d016      	beq.n	80127e0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b4:	3310      	adds	r3, #16
 80127b6:	4618      	mov	r0, r3
 80127b8:	f000 fe44 	bl	8013444 <xTaskRemoveFromEventList>
 80127bc:	4603      	mov	r3, r0
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00e      	beq.n	80127e0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d00b      	beq.n	80127e0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2201      	movs	r2, #1
 80127cc:	601a      	str	r2, [r3, #0]
 80127ce:	e007      	b.n	80127e0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80127d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127d4:	3301      	adds	r3, #1
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	b25a      	sxtb	r2, r3
 80127da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80127e0:	2301      	movs	r3, #1
 80127e2:	637b      	str	r3, [r7, #52]	; 0x34
 80127e4:	e001      	b.n	80127ea <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80127e6:	2300      	movs	r3, #0
 80127e8:	637b      	str	r3, [r7, #52]	; 0x34
 80127ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	f383 8811 	msr	BASEPRI, r3
}
 80127f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80127f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3738      	adds	r7, #56	; 0x38
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b084      	sub	sp, #16
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d10c      	bne.n	8012828 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 801280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012812:	b672      	cpsid	i
 8012814:	f383 8811 	msr	BASEPRI, r3
 8012818:	f3bf 8f6f 	isb	sy
 801281c:	f3bf 8f4f 	dsb	sy
 8012820:	b662      	cpsie	i
 8012822:	60bb      	str	r3, [r7, #8]
}
 8012824:	bf00      	nop
 8012826:	e7fe      	b.n	8012826 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8012828:	f001 fb20 	bl	8013e6c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012830:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012832:	f001 fb4f 	bl	8013ed4 <vPortExitCritical>

	return uxReturn;
 8012836:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012838:	4618      	mov	r0, r3
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012840:	b480      	push	{r7}
 8012842:	b085      	sub	sp, #20
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801284c:	2b00      	cmp	r3, #0
 801284e:	d006      	beq.n	801285e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f1c3 0307 	rsb	r3, r3, #7
 801285a:	60fb      	str	r3, [r7, #12]
 801285c:	e001      	b.n	8012862 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801285e:	2300      	movs	r3, #0
 8012860:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012862:	68fb      	ldr	r3, [r7, #12]
	}
 8012864:	4618      	mov	r0, r3
 8012866:	3714      	adds	r7, #20
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr

08012870 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b086      	sub	sp, #24
 8012874:	af00      	add	r7, sp, #0
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801287c:	2300      	movs	r3, #0
 801287e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012884:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801288a:	2b00      	cmp	r3, #0
 801288c:	d10d      	bne.n	80128aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d14d      	bne.n	8012932 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	689b      	ldr	r3, [r3, #8]
 801289a:	4618      	mov	r0, r3
 801289c:	f001 f838 	bl	8013910 <xTaskPriorityDisinherit>
 80128a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2200      	movs	r2, #0
 80128a6:	609a      	str	r2, [r3, #8]
 80128a8:	e043      	b.n	8012932 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d119      	bne.n	80128e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	6858      	ldr	r0, [r3, #4]
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b8:	461a      	mov	r2, r3
 80128ba:	68b9      	ldr	r1, [r7, #8]
 80128bc:	f002 fe97 	bl	80155ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	685a      	ldr	r2, [r3, #4]
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c8:	441a      	add	r2, r3
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	685a      	ldr	r2, [r3, #4]
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	689b      	ldr	r3, [r3, #8]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d32b      	bcc.n	8012932 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	681a      	ldr	r2, [r3, #0]
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	605a      	str	r2, [r3, #4]
 80128e2:	e026      	b.n	8012932 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	68d8      	ldr	r0, [r3, #12]
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ec:	461a      	mov	r2, r3
 80128ee:	68b9      	ldr	r1, [r7, #8]
 80128f0:	f002 fe7d 	bl	80155ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	68da      	ldr	r2, [r3, #12]
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128fc:	425b      	negs	r3, r3
 80128fe:	441a      	add	r2, r3
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	68da      	ldr	r2, [r3, #12]
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	429a      	cmp	r2, r3
 801290e:	d207      	bcs.n	8012920 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	689a      	ldr	r2, [r3, #8]
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012918:	425b      	negs	r3, r3
 801291a:	441a      	add	r2, r3
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2b02      	cmp	r3, #2
 8012924:	d105      	bne.n	8012932 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d002      	beq.n	8012932 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	3b01      	subs	r3, #1
 8012930:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	1c5a      	adds	r2, r3, #1
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801293a:	697b      	ldr	r3, [r7, #20]
}
 801293c:	4618      	mov	r0, r3
 801293e:	3718      	adds	r7, #24
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012952:	2b00      	cmp	r3, #0
 8012954:	d018      	beq.n	8012988 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	68da      	ldr	r2, [r3, #12]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801295e:	441a      	add	r2, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	68da      	ldr	r2, [r3, #12]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	689b      	ldr	r3, [r3, #8]
 801296c:	429a      	cmp	r2, r3
 801296e:	d303      	bcc.n	8012978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	68d9      	ldr	r1, [r3, #12]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012980:	461a      	mov	r2, r3
 8012982:	6838      	ldr	r0, [r7, #0]
 8012984:	f002 fe33 	bl	80155ee <memcpy>
	}
}
 8012988:	bf00      	nop
 801298a:	3708      	adds	r7, #8
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012998:	f001 fa68 	bl	8013e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80129a4:	e011      	b.n	80129ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d012      	beq.n	80129d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	3324      	adds	r3, #36	; 0x24
 80129b2:	4618      	mov	r0, r3
 80129b4:	f000 fd46 	bl	8013444 <xTaskRemoveFromEventList>
 80129b8:	4603      	mov	r3, r0
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d001      	beq.n	80129c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80129be:	f000 fe21 	bl	8013604 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80129c2:	7bfb      	ldrb	r3, [r7, #15]
 80129c4:	3b01      	subs	r3, #1
 80129c6:	b2db      	uxtb	r3, r3
 80129c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80129ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	dce9      	bgt.n	80129a6 <prvUnlockQueue+0x16>
 80129d2:	e000      	b.n	80129d6 <prvUnlockQueue+0x46>
					break;
 80129d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	22ff      	movs	r2, #255	; 0xff
 80129da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80129de:	f001 fa79 	bl	8013ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80129e2:	f001 fa43 	bl	8013e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129ee:	e011      	b.n	8012a14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	691b      	ldr	r3, [r3, #16]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d012      	beq.n	8012a1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	3310      	adds	r3, #16
 80129fc:	4618      	mov	r0, r3
 80129fe:	f000 fd21 	bl	8013444 <xTaskRemoveFromEventList>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d001      	beq.n	8012a0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012a08:	f000 fdfc 	bl	8013604 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012a0c:	7bbb      	ldrb	r3, [r7, #14]
 8012a0e:	3b01      	subs	r3, #1
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	dce9      	bgt.n	80129f0 <prvUnlockQueue+0x60>
 8012a1c:	e000      	b.n	8012a20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012a1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	22ff      	movs	r2, #255	; 0xff
 8012a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012a28:	f001 fa54 	bl	8013ed4 <vPortExitCritical>
}
 8012a2c:	bf00      	nop
 8012a2e:	3710      	adds	r7, #16
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b084      	sub	sp, #16
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a3c:	f001 fa16 	bl	8013e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d102      	bne.n	8012a4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012a48:	2301      	movs	r3, #1
 8012a4a:	60fb      	str	r3, [r7, #12]
 8012a4c:	e001      	b.n	8012a52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a52:	f001 fa3f 	bl	8013ed4 <vPortExitCritical>

	return xReturn;
 8012a56:	68fb      	ldr	r3, [r7, #12]
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3710      	adds	r7, #16
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a68:	f001 fa00 	bl	8013e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d102      	bne.n	8012a7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012a78:	2301      	movs	r3, #1
 8012a7a:	60fb      	str	r3, [r7, #12]
 8012a7c:	e001      	b.n	8012a82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a82:	f001 fa27 	bl	8013ed4 <vPortExitCritical>

	return xReturn;
 8012a86:	68fb      	ldr	r3, [r7, #12]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3710      	adds	r7, #16
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b08e      	sub	sp, #56	; 0x38
 8012a94:	af04      	add	r7, sp, #16
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	607a      	str	r2, [r7, #4]
 8012a9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d10c      	bne.n	8012abe <xTaskCreateStatic+0x2e>
	__asm volatile
 8012aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa8:	b672      	cpsid	i
 8012aaa:	f383 8811 	msr	BASEPRI, r3
 8012aae:	f3bf 8f6f 	isb	sy
 8012ab2:	f3bf 8f4f 	dsb	sy
 8012ab6:	b662      	cpsie	i
 8012ab8:	623b      	str	r3, [r7, #32]
}
 8012aba:	bf00      	nop
 8012abc:	e7fe      	b.n	8012abc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d10c      	bne.n	8012ade <xTaskCreateStatic+0x4e>
	__asm volatile
 8012ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac8:	b672      	cpsid	i
 8012aca:	f383 8811 	msr	BASEPRI, r3
 8012ace:	f3bf 8f6f 	isb	sy
 8012ad2:	f3bf 8f4f 	dsb	sy
 8012ad6:	b662      	cpsie	i
 8012ad8:	61fb      	str	r3, [r7, #28]
}
 8012ada:	bf00      	nop
 8012adc:	e7fe      	b.n	8012adc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012ade:	23a0      	movs	r3, #160	; 0xa0
 8012ae0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	2ba0      	cmp	r3, #160	; 0xa0
 8012ae6:	d00c      	beq.n	8012b02 <xTaskCreateStatic+0x72>
	__asm volatile
 8012ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aec:	b672      	cpsid	i
 8012aee:	f383 8811 	msr	BASEPRI, r3
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	f3bf 8f4f 	dsb	sy
 8012afa:	b662      	cpsie	i
 8012afc:	61bb      	str	r3, [r7, #24]
}
 8012afe:	bf00      	nop
 8012b00:	e7fe      	b.n	8012b00 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012b02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d01e      	beq.n	8012b48 <xTaskCreateStatic+0xb8>
 8012b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d01b      	beq.n	8012b48 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1c:	2202      	movs	r2, #2
 8012b1e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012b22:	2300      	movs	r3, #0
 8012b24:	9303      	str	r3, [sp, #12]
 8012b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b28:	9302      	str	r3, [sp, #8]
 8012b2a:	f107 0314 	add.w	r3, r7, #20
 8012b2e:	9301      	str	r3, [sp, #4]
 8012b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b32:	9300      	str	r3, [sp, #0]
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	68b9      	ldr	r1, [r7, #8]
 8012b3a:	68f8      	ldr	r0, [r7, #12]
 8012b3c:	f000 f850 	bl	8012be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b42:	f000 f8ed 	bl	8012d20 <prvAddNewTaskToReadyList>
 8012b46:	e001      	b.n	8012b4c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012b4c:	697b      	ldr	r3, [r7, #20]
	}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3728      	adds	r7, #40	; 0x28
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}

08012b56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012b56:	b580      	push	{r7, lr}
 8012b58:	b08c      	sub	sp, #48	; 0x30
 8012b5a:	af04      	add	r7, sp, #16
 8012b5c:	60f8      	str	r0, [r7, #12]
 8012b5e:	60b9      	str	r1, [r7, #8]
 8012b60:	603b      	str	r3, [r7, #0]
 8012b62:	4613      	mov	r3, r2
 8012b64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012b66:	88fb      	ldrh	r3, [r7, #6]
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f001 faaa 	bl	80140c4 <pvPortMalloc>
 8012b70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00e      	beq.n	8012b96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012b78:	20a0      	movs	r0, #160	; 0xa0
 8012b7a:	f001 faa3 	bl	80140c4 <pvPortMalloc>
 8012b7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d003      	beq.n	8012b8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	697a      	ldr	r2, [r7, #20]
 8012b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8012b8c:	e005      	b.n	8012b9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012b8e:	6978      	ldr	r0, [r7, #20]
 8012b90:	f001 fb62 	bl	8014258 <vPortFree>
 8012b94:	e001      	b.n	8012b9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012b96:	2300      	movs	r3, #0
 8012b98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d017      	beq.n	8012bd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012ba8:	88fa      	ldrh	r2, [r7, #6]
 8012baa:	2300      	movs	r3, #0
 8012bac:	9303      	str	r3, [sp, #12]
 8012bae:	69fb      	ldr	r3, [r7, #28]
 8012bb0:	9302      	str	r3, [sp, #8]
 8012bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb4:	9301      	str	r3, [sp, #4]
 8012bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb8:	9300      	str	r3, [sp, #0]
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	68b9      	ldr	r1, [r7, #8]
 8012bbe:	68f8      	ldr	r0, [r7, #12]
 8012bc0:	f000 f80e 	bl	8012be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012bc4:	69f8      	ldr	r0, [r7, #28]
 8012bc6:	f000 f8ab 	bl	8012d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012bca:	2301      	movs	r3, #1
 8012bcc:	61bb      	str	r3, [r7, #24]
 8012bce:	e002      	b.n	8012bd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012bd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012bd6:	69bb      	ldr	r3, [r7, #24]
	}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3720      	adds	r7, #32
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b088      	sub	sp, #32
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
 8012bec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012bf2:	6879      	ldr	r1, [r7, #4]
 8012bf4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012bf8:	440b      	add	r3, r1
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	4413      	add	r3, r2
 8012bfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012c00:	69bb      	ldr	r3, [r7, #24]
 8012c02:	f023 0307 	bic.w	r3, r3, #7
 8012c06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	f003 0307 	and.w	r3, r3, #7
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00c      	beq.n	8012c2c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8012c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c16:	b672      	cpsid	i
 8012c18:	f383 8811 	msr	BASEPRI, r3
 8012c1c:	f3bf 8f6f 	isb	sy
 8012c20:	f3bf 8f4f 	dsb	sy
 8012c24:	b662      	cpsie	i
 8012c26:	617b      	str	r3, [r7, #20]
}
 8012c28:	bf00      	nop
 8012c2a:	e7fe      	b.n	8012c2a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d01f      	beq.n	8012c72 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c32:	2300      	movs	r3, #0
 8012c34:	61fb      	str	r3, [r7, #28]
 8012c36:	e012      	b.n	8012c5e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012c38:	68ba      	ldr	r2, [r7, #8]
 8012c3a:	69fb      	ldr	r3, [r7, #28]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	7819      	ldrb	r1, [r3, #0]
 8012c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	4413      	add	r3, r2
 8012c46:	3334      	adds	r3, #52	; 0x34
 8012c48:	460a      	mov	r2, r1
 8012c4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012c4c:	68ba      	ldr	r2, [r7, #8]
 8012c4e:	69fb      	ldr	r3, [r7, #28]
 8012c50:	4413      	add	r3, r2
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d006      	beq.n	8012c66 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c58:	69fb      	ldr	r3, [r7, #28]
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	61fb      	str	r3, [r7, #28]
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	2b0f      	cmp	r3, #15
 8012c62:	d9e9      	bls.n	8012c38 <prvInitialiseNewTask+0x58>
 8012c64:	e000      	b.n	8012c68 <prvInitialiseNewTask+0x88>
			{
				break;
 8012c66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012c70:	e003      	b.n	8012c7a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c74:	2200      	movs	r2, #0
 8012c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7c:	2b06      	cmp	r3, #6
 8012c7e:	d901      	bls.n	8012c84 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012c80:	2306      	movs	r3, #6
 8012c82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c92:	2200      	movs	r2, #0
 8012c94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c98:	3304      	adds	r3, #4
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7ff f84c 	bl	8011d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca2:	3318      	adds	r3, #24
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7ff f847 	bl	8011d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb2:	f1c3 0207 	rsb	r2, r3, #7
 8012cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cca:	2200      	movs	r2, #0
 8012ccc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd2:	334c      	adds	r3, #76	; 0x4c
 8012cd4:	224c      	movs	r2, #76	; 0x4c
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f002 fba0 	bl	801541e <memset>
 8012cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce0:	4a0c      	ldr	r2, [pc, #48]	; (8012d14 <prvInitialiseNewTask+0x134>)
 8012ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8012ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce6:	4a0c      	ldr	r2, [pc, #48]	; (8012d18 <prvInitialiseNewTask+0x138>)
 8012ce8:	655a      	str	r2, [r3, #84]	; 0x54
 8012cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cec:	4a0b      	ldr	r2, [pc, #44]	; (8012d1c <prvInitialiseNewTask+0x13c>)
 8012cee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012cf0:	683a      	ldr	r2, [r7, #0]
 8012cf2:	68f9      	ldr	r1, [r7, #12]
 8012cf4:	69b8      	ldr	r0, [r7, #24]
 8012cf6:	f000 ffad 	bl	8013c54 <pxPortInitialiseStack>
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d002      	beq.n	8012d0c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d0c:	bf00      	nop
 8012d0e:	3720      	adds	r7, #32
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}
 8012d14:	20008f54 	.word	0x20008f54
 8012d18:	20008fbc 	.word	0x20008fbc
 8012d1c:	20009024 	.word	0x20009024

08012d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012d28:	f001 f8a0 	bl	8013e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012d2c:	4b2a      	ldr	r3, [pc, #168]	; (8012dd8 <prvAddNewTaskToReadyList+0xb8>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	3301      	adds	r3, #1
 8012d32:	4a29      	ldr	r2, [pc, #164]	; (8012dd8 <prvAddNewTaskToReadyList+0xb8>)
 8012d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012d36:	4b29      	ldr	r3, [pc, #164]	; (8012ddc <prvAddNewTaskToReadyList+0xbc>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d109      	bne.n	8012d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012d3e:	4a27      	ldr	r2, [pc, #156]	; (8012ddc <prvAddNewTaskToReadyList+0xbc>)
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012d44:	4b24      	ldr	r3, [pc, #144]	; (8012dd8 <prvAddNewTaskToReadyList+0xb8>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d110      	bne.n	8012d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012d4c:	f000 fc7e 	bl	801364c <prvInitialiseTaskLists>
 8012d50:	e00d      	b.n	8012d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012d52:	4b23      	ldr	r3, [pc, #140]	; (8012de0 <prvAddNewTaskToReadyList+0xc0>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d109      	bne.n	8012d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012d5a:	4b20      	ldr	r3, [pc, #128]	; (8012ddc <prvAddNewTaskToReadyList+0xbc>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d802      	bhi.n	8012d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012d68:	4a1c      	ldr	r2, [pc, #112]	; (8012ddc <prvAddNewTaskToReadyList+0xbc>)
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012d6e:	4b1d      	ldr	r3, [pc, #116]	; (8012de4 <prvAddNewTaskToReadyList+0xc4>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	3301      	adds	r3, #1
 8012d74:	4a1b      	ldr	r2, [pc, #108]	; (8012de4 <prvAddNewTaskToReadyList+0xc4>)
 8012d76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	409a      	lsls	r2, r3
 8012d80:	4b19      	ldr	r3, [pc, #100]	; (8012de8 <prvAddNewTaskToReadyList+0xc8>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4313      	orrs	r3, r2
 8012d86:	4a18      	ldr	r2, [pc, #96]	; (8012de8 <prvAddNewTaskToReadyList+0xc8>)
 8012d88:	6013      	str	r3, [r2, #0]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d8e:	4613      	mov	r3, r2
 8012d90:	009b      	lsls	r3, r3, #2
 8012d92:	4413      	add	r3, r2
 8012d94:	009b      	lsls	r3, r3, #2
 8012d96:	4a15      	ldr	r2, [pc, #84]	; (8012dec <prvAddNewTaskToReadyList+0xcc>)
 8012d98:	441a      	add	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	3304      	adds	r3, #4
 8012d9e:	4619      	mov	r1, r3
 8012da0:	4610      	mov	r0, r2
 8012da2:	f7fe ffd6 	bl	8011d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012da6:	f001 f895 	bl	8013ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012daa:	4b0d      	ldr	r3, [pc, #52]	; (8012de0 <prvAddNewTaskToReadyList+0xc0>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d00e      	beq.n	8012dd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012db2:	4b0a      	ldr	r3, [pc, #40]	; (8012ddc <prvAddNewTaskToReadyList+0xbc>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d207      	bcs.n	8012dd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012dc0:	4b0b      	ldr	r3, [pc, #44]	; (8012df0 <prvAddNewTaskToReadyList+0xd0>)
 8012dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dc6:	601a      	str	r2, [r3, #0]
 8012dc8:	f3bf 8f4f 	dsb	sy
 8012dcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012dd0:	bf00      	nop
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	20000f08 	.word	0x20000f08
 8012ddc:	20000e08 	.word	0x20000e08
 8012de0:	20000f14 	.word	0x20000f14
 8012de4:	20000f24 	.word	0x20000f24
 8012de8:	20000f10 	.word	0x20000f10
 8012dec:	20000e0c 	.word	0x20000e0c
 8012df0:	e000ed04 	.word	0xe000ed04

08012df4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b08a      	sub	sp, #40	; 0x28
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d10c      	bne.n	8012e22 <vTaskDelayUntil+0x2e>
	__asm volatile
 8012e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e0c:	b672      	cpsid	i
 8012e0e:	f383 8811 	msr	BASEPRI, r3
 8012e12:	f3bf 8f6f 	isb	sy
 8012e16:	f3bf 8f4f 	dsb	sy
 8012e1a:	b662      	cpsie	i
 8012e1c:	617b      	str	r3, [r7, #20]
}
 8012e1e:	bf00      	nop
 8012e20:	e7fe      	b.n	8012e20 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d10c      	bne.n	8012e42 <vTaskDelayUntil+0x4e>
	__asm volatile
 8012e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2c:	b672      	cpsid	i
 8012e2e:	f383 8811 	msr	BASEPRI, r3
 8012e32:	f3bf 8f6f 	isb	sy
 8012e36:	f3bf 8f4f 	dsb	sy
 8012e3a:	b662      	cpsie	i
 8012e3c:	613b      	str	r3, [r7, #16]
}
 8012e3e:	bf00      	nop
 8012e40:	e7fe      	b.n	8012e40 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8012e42:	4b2b      	ldr	r3, [pc, #172]	; (8012ef0 <vTaskDelayUntil+0xfc>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d00c      	beq.n	8012e64 <vTaskDelayUntil+0x70>
	__asm volatile
 8012e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e4e:	b672      	cpsid	i
 8012e50:	f383 8811 	msr	BASEPRI, r3
 8012e54:	f3bf 8f6f 	isb	sy
 8012e58:	f3bf 8f4f 	dsb	sy
 8012e5c:	b662      	cpsie	i
 8012e5e:	60fb      	str	r3, [r7, #12]
}
 8012e60:	bf00      	nop
 8012e62:	e7fe      	b.n	8012e62 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8012e64:	f000 f8ee 	bl	8013044 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012e68:	4b22      	ldr	r3, [pc, #136]	; (8012ef4 <vTaskDelayUntil+0x100>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	4413      	add	r3, r2
 8012e76:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	6a3a      	ldr	r2, [r7, #32]
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d20b      	bcs.n	8012e9a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	69fa      	ldr	r2, [r7, #28]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d211      	bcs.n	8012eb0 <vTaskDelayUntil+0xbc>
 8012e8c:	69fa      	ldr	r2, [r7, #28]
 8012e8e:	6a3b      	ldr	r3, [r7, #32]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d90d      	bls.n	8012eb0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8012e94:	2301      	movs	r3, #1
 8012e96:	627b      	str	r3, [r7, #36]	; 0x24
 8012e98:	e00a      	b.n	8012eb0 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	69fa      	ldr	r2, [r7, #28]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d303      	bcc.n	8012eac <vTaskDelayUntil+0xb8>
 8012ea4:	69fa      	ldr	r2, [r7, #28]
 8012ea6:	6a3b      	ldr	r3, [r7, #32]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d901      	bls.n	8012eb0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8012eac:	2301      	movs	r3, #1
 8012eae:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	69fa      	ldr	r2, [r7, #28]
 8012eb4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d006      	beq.n	8012eca <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012ebc:	69fa      	ldr	r2, [r7, #28]
 8012ebe:	6a3b      	ldr	r3, [r7, #32]
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f000 fe5f 	bl	8013b88 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012eca:	f000 f8c9 	bl	8013060 <xTaskResumeAll>
 8012ece:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d107      	bne.n	8012ee6 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8012ed6:	4b08      	ldr	r3, [pc, #32]	; (8012ef8 <vTaskDelayUntil+0x104>)
 8012ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012edc:	601a      	str	r2, [r3, #0]
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012ee6:	bf00      	nop
 8012ee8:	3728      	adds	r7, #40	; 0x28
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	20000f30 	.word	0x20000f30
 8012ef4:	20000f0c 	.word	0x20000f0c
 8012ef8:	e000ed04 	.word	0xe000ed04

08012efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012f04:	2300      	movs	r3, #0
 8012f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d019      	beq.n	8012f42 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012f0e:	4b14      	ldr	r3, [pc, #80]	; (8012f60 <vTaskDelay+0x64>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00c      	beq.n	8012f30 <vTaskDelay+0x34>
	__asm volatile
 8012f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f1a:	b672      	cpsid	i
 8012f1c:	f383 8811 	msr	BASEPRI, r3
 8012f20:	f3bf 8f6f 	isb	sy
 8012f24:	f3bf 8f4f 	dsb	sy
 8012f28:	b662      	cpsie	i
 8012f2a:	60bb      	str	r3, [r7, #8]
}
 8012f2c:	bf00      	nop
 8012f2e:	e7fe      	b.n	8012f2e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012f30:	f000 f888 	bl	8013044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012f34:	2100      	movs	r1, #0
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f000 fe26 	bl	8013b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012f3c:	f000 f890 	bl	8013060 <xTaskResumeAll>
 8012f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d107      	bne.n	8012f58 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8012f48:	4b06      	ldr	r3, [pc, #24]	; (8012f64 <vTaskDelay+0x68>)
 8012f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f4e:	601a      	str	r2, [r3, #0]
 8012f50:	f3bf 8f4f 	dsb	sy
 8012f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f58:	bf00      	nop
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	20000f30 	.word	0x20000f30
 8012f64:	e000ed04 	.word	0xe000ed04

08012f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b08a      	sub	sp, #40	; 0x28
 8012f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f72:	2300      	movs	r3, #0
 8012f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f76:	463a      	mov	r2, r7
 8012f78:	1d39      	adds	r1, r7, #4
 8012f7a:	f107 0308 	add.w	r3, r7, #8
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7f1 f8ca 	bl	8004118 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f84:	6839      	ldr	r1, [r7, #0]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	68ba      	ldr	r2, [r7, #8]
 8012f8a:	9202      	str	r2, [sp, #8]
 8012f8c:	9301      	str	r3, [sp, #4]
 8012f8e:	2300      	movs	r3, #0
 8012f90:	9300      	str	r3, [sp, #0]
 8012f92:	2300      	movs	r3, #0
 8012f94:	460a      	mov	r2, r1
 8012f96:	4923      	ldr	r1, [pc, #140]	; (8013024 <vTaskStartScheduler+0xbc>)
 8012f98:	4823      	ldr	r0, [pc, #140]	; (8013028 <vTaskStartScheduler+0xc0>)
 8012f9a:	f7ff fd79 	bl	8012a90 <xTaskCreateStatic>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	4a22      	ldr	r2, [pc, #136]	; (801302c <vTaskStartScheduler+0xc4>)
 8012fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012fa4:	4b21      	ldr	r3, [pc, #132]	; (801302c <vTaskStartScheduler+0xc4>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d002      	beq.n	8012fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012fac:	2301      	movs	r3, #1
 8012fae:	617b      	str	r3, [r7, #20]
 8012fb0:	e001      	b.n	8012fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d11d      	bne.n	8012ff8 <vTaskStartScheduler+0x90>
	__asm volatile
 8012fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc0:	b672      	cpsid	i
 8012fc2:	f383 8811 	msr	BASEPRI, r3
 8012fc6:	f3bf 8f6f 	isb	sy
 8012fca:	f3bf 8f4f 	dsb	sy
 8012fce:	b662      	cpsie	i
 8012fd0:	613b      	str	r3, [r7, #16]
}
 8012fd2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012fd4:	4b16      	ldr	r3, [pc, #88]	; (8013030 <vTaskStartScheduler+0xc8>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	334c      	adds	r3, #76	; 0x4c
 8012fda:	4a16      	ldr	r2, [pc, #88]	; (8013034 <vTaskStartScheduler+0xcc>)
 8012fdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012fde:	4b16      	ldr	r3, [pc, #88]	; (8013038 <vTaskStartScheduler+0xd0>)
 8012fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8012fe4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012fe6:	4b15      	ldr	r3, [pc, #84]	; (801303c <vTaskStartScheduler+0xd4>)
 8012fe8:	2201      	movs	r2, #1
 8012fea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012fec:	4b14      	ldr	r3, [pc, #80]	; (8013040 <vTaskStartScheduler+0xd8>)
 8012fee:	2200      	movs	r2, #0
 8012ff0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012ff2:	f000 febd 	bl	8013d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012ff6:	e010      	b.n	801301a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ffe:	d10c      	bne.n	801301a <vTaskStartScheduler+0xb2>
	__asm volatile
 8013000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013004:	b672      	cpsid	i
 8013006:	f383 8811 	msr	BASEPRI, r3
 801300a:	f3bf 8f6f 	isb	sy
 801300e:	f3bf 8f4f 	dsb	sy
 8013012:	b662      	cpsie	i
 8013014:	60fb      	str	r3, [r7, #12]
}
 8013016:	bf00      	nop
 8013018:	e7fe      	b.n	8013018 <vTaskStartScheduler+0xb0>
}
 801301a:	bf00      	nop
 801301c:	3718      	adds	r7, #24
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	0801bf30 	.word	0x0801bf30
 8013028:	0801361d 	.word	0x0801361d
 801302c:	20000f2c 	.word	0x20000f2c
 8013030:	20000e08 	.word	0x20000e08
 8013034:	20000070 	.word	0x20000070
 8013038:	20000f28 	.word	0x20000f28
 801303c:	20000f14 	.word	0x20000f14
 8013040:	20000f0c 	.word	0x20000f0c

08013044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013044:	b480      	push	{r7}
 8013046:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013048:	4b04      	ldr	r3, [pc, #16]	; (801305c <vTaskSuspendAll+0x18>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	3301      	adds	r3, #1
 801304e:	4a03      	ldr	r2, [pc, #12]	; (801305c <vTaskSuspendAll+0x18>)
 8013050:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013052:	bf00      	nop
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr
 801305c:	20000f30 	.word	0x20000f30

08013060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013066:	2300      	movs	r3, #0
 8013068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801306a:	2300      	movs	r3, #0
 801306c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801306e:	4b42      	ldr	r3, [pc, #264]	; (8013178 <xTaskResumeAll+0x118>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d10c      	bne.n	8013090 <xTaskResumeAll+0x30>
	__asm volatile
 8013076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307a:	b672      	cpsid	i
 801307c:	f383 8811 	msr	BASEPRI, r3
 8013080:	f3bf 8f6f 	isb	sy
 8013084:	f3bf 8f4f 	dsb	sy
 8013088:	b662      	cpsie	i
 801308a:	603b      	str	r3, [r7, #0]
}
 801308c:	bf00      	nop
 801308e:	e7fe      	b.n	801308e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013090:	f000 feec 	bl	8013e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013094:	4b38      	ldr	r3, [pc, #224]	; (8013178 <xTaskResumeAll+0x118>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	3b01      	subs	r3, #1
 801309a:	4a37      	ldr	r2, [pc, #220]	; (8013178 <xTaskResumeAll+0x118>)
 801309c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801309e:	4b36      	ldr	r3, [pc, #216]	; (8013178 <xTaskResumeAll+0x118>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d161      	bne.n	801316a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80130a6:	4b35      	ldr	r3, [pc, #212]	; (801317c <xTaskResumeAll+0x11c>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d05d      	beq.n	801316a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130ae:	e02e      	b.n	801310e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130b0:	4b33      	ldr	r3, [pc, #204]	; (8013180 <xTaskResumeAll+0x120>)
 80130b2:	68db      	ldr	r3, [r3, #12]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	3318      	adds	r3, #24
 80130bc:	4618      	mov	r0, r3
 80130be:	f7fe fea5 	bl	8011e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	3304      	adds	r3, #4
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fe fea0 	bl	8011e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130d0:	2201      	movs	r2, #1
 80130d2:	409a      	lsls	r2, r3
 80130d4:	4b2b      	ldr	r3, [pc, #172]	; (8013184 <xTaskResumeAll+0x124>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4313      	orrs	r3, r2
 80130da:	4a2a      	ldr	r2, [pc, #168]	; (8013184 <xTaskResumeAll+0x124>)
 80130dc:	6013      	str	r3, [r2, #0]
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130e2:	4613      	mov	r3, r2
 80130e4:	009b      	lsls	r3, r3, #2
 80130e6:	4413      	add	r3, r2
 80130e8:	009b      	lsls	r3, r3, #2
 80130ea:	4a27      	ldr	r2, [pc, #156]	; (8013188 <xTaskResumeAll+0x128>)
 80130ec:	441a      	add	r2, r3
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	3304      	adds	r3, #4
 80130f2:	4619      	mov	r1, r3
 80130f4:	4610      	mov	r0, r2
 80130f6:	f7fe fe2c 	bl	8011d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130fe:	4b23      	ldr	r3, [pc, #140]	; (801318c <xTaskResumeAll+0x12c>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013104:	429a      	cmp	r2, r3
 8013106:	d302      	bcc.n	801310e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013108:	4b21      	ldr	r3, [pc, #132]	; (8013190 <xTaskResumeAll+0x130>)
 801310a:	2201      	movs	r2, #1
 801310c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801310e:	4b1c      	ldr	r3, [pc, #112]	; (8013180 <xTaskResumeAll+0x120>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d1cc      	bne.n	80130b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d001      	beq.n	8013120 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801311c:	f000 fb3a 	bl	8013794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013120:	4b1c      	ldr	r3, [pc, #112]	; (8013194 <xTaskResumeAll+0x134>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d010      	beq.n	801314e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801312c:	f000 f846 	bl	80131bc <xTaskIncrementTick>
 8013130:	4603      	mov	r3, r0
 8013132:	2b00      	cmp	r3, #0
 8013134:	d002      	beq.n	801313c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013136:	4b16      	ldr	r3, [pc, #88]	; (8013190 <xTaskResumeAll+0x130>)
 8013138:	2201      	movs	r2, #1
 801313a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	3b01      	subs	r3, #1
 8013140:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d1f1      	bne.n	801312c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013148:	4b12      	ldr	r3, [pc, #72]	; (8013194 <xTaskResumeAll+0x134>)
 801314a:	2200      	movs	r2, #0
 801314c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801314e:	4b10      	ldr	r3, [pc, #64]	; (8013190 <xTaskResumeAll+0x130>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d009      	beq.n	801316a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013156:	2301      	movs	r3, #1
 8013158:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801315a:	4b0f      	ldr	r3, [pc, #60]	; (8013198 <xTaskResumeAll+0x138>)
 801315c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013160:	601a      	str	r2, [r3, #0]
 8013162:	f3bf 8f4f 	dsb	sy
 8013166:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801316a:	f000 feb3 	bl	8013ed4 <vPortExitCritical>

	return xAlreadyYielded;
 801316e:	68bb      	ldr	r3, [r7, #8]
}
 8013170:	4618      	mov	r0, r3
 8013172:	3710      	adds	r7, #16
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}
 8013178:	20000f30 	.word	0x20000f30
 801317c:	20000f08 	.word	0x20000f08
 8013180:	20000ec8 	.word	0x20000ec8
 8013184:	20000f10 	.word	0x20000f10
 8013188:	20000e0c 	.word	0x20000e0c
 801318c:	20000e08 	.word	0x20000e08
 8013190:	20000f1c 	.word	0x20000f1c
 8013194:	20000f18 	.word	0x20000f18
 8013198:	e000ed04 	.word	0xe000ed04

0801319c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80131a2:	4b05      	ldr	r3, [pc, #20]	; (80131b8 <xTaskGetTickCount+0x1c>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80131a8:	687b      	ldr	r3, [r7, #4]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	370c      	adds	r7, #12
 80131ae:	46bd      	mov	sp, r7
 80131b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b4:	4770      	bx	lr
 80131b6:	bf00      	nop
 80131b8:	20000f0c 	.word	0x20000f0c

080131bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b086      	sub	sp, #24
 80131c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80131c2:	2300      	movs	r3, #0
 80131c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131c6:	4b4f      	ldr	r3, [pc, #316]	; (8013304 <xTaskIncrementTick+0x148>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f040 808a 	bne.w	80132e4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80131d0:	4b4d      	ldr	r3, [pc, #308]	; (8013308 <xTaskIncrementTick+0x14c>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	3301      	adds	r3, #1
 80131d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80131d8:	4a4b      	ldr	r2, [pc, #300]	; (8013308 <xTaskIncrementTick+0x14c>)
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d122      	bne.n	801322a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80131e4:	4b49      	ldr	r3, [pc, #292]	; (801330c <xTaskIncrementTick+0x150>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d00c      	beq.n	8013208 <xTaskIncrementTick+0x4c>
	__asm volatile
 80131ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f2:	b672      	cpsid	i
 80131f4:	f383 8811 	msr	BASEPRI, r3
 80131f8:	f3bf 8f6f 	isb	sy
 80131fc:	f3bf 8f4f 	dsb	sy
 8013200:	b662      	cpsie	i
 8013202:	603b      	str	r3, [r7, #0]
}
 8013204:	bf00      	nop
 8013206:	e7fe      	b.n	8013206 <xTaskIncrementTick+0x4a>
 8013208:	4b40      	ldr	r3, [pc, #256]	; (801330c <xTaskIncrementTick+0x150>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	60fb      	str	r3, [r7, #12]
 801320e:	4b40      	ldr	r3, [pc, #256]	; (8013310 <xTaskIncrementTick+0x154>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	4a3e      	ldr	r2, [pc, #248]	; (801330c <xTaskIncrementTick+0x150>)
 8013214:	6013      	str	r3, [r2, #0]
 8013216:	4a3e      	ldr	r2, [pc, #248]	; (8013310 <xTaskIncrementTick+0x154>)
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6013      	str	r3, [r2, #0]
 801321c:	4b3d      	ldr	r3, [pc, #244]	; (8013314 <xTaskIncrementTick+0x158>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	3301      	adds	r3, #1
 8013222:	4a3c      	ldr	r2, [pc, #240]	; (8013314 <xTaskIncrementTick+0x158>)
 8013224:	6013      	str	r3, [r2, #0]
 8013226:	f000 fab5 	bl	8013794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801322a:	4b3b      	ldr	r3, [pc, #236]	; (8013318 <xTaskIncrementTick+0x15c>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	693a      	ldr	r2, [r7, #16]
 8013230:	429a      	cmp	r2, r3
 8013232:	d348      	bcc.n	80132c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013234:	4b35      	ldr	r3, [pc, #212]	; (801330c <xTaskIncrementTick+0x150>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d104      	bne.n	8013248 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801323e:	4b36      	ldr	r3, [pc, #216]	; (8013318 <xTaskIncrementTick+0x15c>)
 8013240:	f04f 32ff 	mov.w	r2, #4294967295
 8013244:	601a      	str	r2, [r3, #0]
					break;
 8013246:	e03e      	b.n	80132c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013248:	4b30      	ldr	r3, [pc, #192]	; (801330c <xTaskIncrementTick+0x150>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	68db      	ldr	r3, [r3, #12]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013258:	693a      	ldr	r2, [r7, #16]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	429a      	cmp	r2, r3
 801325e:	d203      	bcs.n	8013268 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013260:	4a2d      	ldr	r2, [pc, #180]	; (8013318 <xTaskIncrementTick+0x15c>)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013266:	e02e      	b.n	80132c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	3304      	adds	r3, #4
 801326c:	4618      	mov	r0, r3
 801326e:	f7fe fdcd 	bl	8011e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013276:	2b00      	cmp	r3, #0
 8013278:	d004      	beq.n	8013284 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	3318      	adds	r3, #24
 801327e:	4618      	mov	r0, r3
 8013280:	f7fe fdc4 	bl	8011e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013288:	2201      	movs	r2, #1
 801328a:	409a      	lsls	r2, r3
 801328c:	4b23      	ldr	r3, [pc, #140]	; (801331c <xTaskIncrementTick+0x160>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4313      	orrs	r3, r2
 8013292:	4a22      	ldr	r2, [pc, #136]	; (801331c <xTaskIncrementTick+0x160>)
 8013294:	6013      	str	r3, [r2, #0]
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801329a:	4613      	mov	r3, r2
 801329c:	009b      	lsls	r3, r3, #2
 801329e:	4413      	add	r3, r2
 80132a0:	009b      	lsls	r3, r3, #2
 80132a2:	4a1f      	ldr	r2, [pc, #124]	; (8013320 <xTaskIncrementTick+0x164>)
 80132a4:	441a      	add	r2, r3
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	3304      	adds	r3, #4
 80132aa:	4619      	mov	r1, r3
 80132ac:	4610      	mov	r0, r2
 80132ae:	f7fe fd50 	bl	8011d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132b6:	4b1b      	ldr	r3, [pc, #108]	; (8013324 <xTaskIncrementTick+0x168>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132bc:	429a      	cmp	r2, r3
 80132be:	d3b9      	bcc.n	8013234 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80132c0:	2301      	movs	r3, #1
 80132c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80132c4:	e7b6      	b.n	8013234 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80132c6:	4b17      	ldr	r3, [pc, #92]	; (8013324 <xTaskIncrementTick+0x168>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132cc:	4914      	ldr	r1, [pc, #80]	; (8013320 <xTaskIncrementTick+0x164>)
 80132ce:	4613      	mov	r3, r2
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	4413      	add	r3, r2
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	440b      	add	r3, r1
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	2b01      	cmp	r3, #1
 80132dc:	d907      	bls.n	80132ee <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80132de:	2301      	movs	r3, #1
 80132e0:	617b      	str	r3, [r7, #20]
 80132e2:	e004      	b.n	80132ee <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80132e4:	4b10      	ldr	r3, [pc, #64]	; (8013328 <xTaskIncrementTick+0x16c>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	3301      	adds	r3, #1
 80132ea:	4a0f      	ldr	r2, [pc, #60]	; (8013328 <xTaskIncrementTick+0x16c>)
 80132ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80132ee:	4b0f      	ldr	r3, [pc, #60]	; (801332c <xTaskIncrementTick+0x170>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d001      	beq.n	80132fa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80132f6:	2301      	movs	r3, #1
 80132f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80132fa:	697b      	ldr	r3, [r7, #20]
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3718      	adds	r7, #24
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}
 8013304:	20000f30 	.word	0x20000f30
 8013308:	20000f0c 	.word	0x20000f0c
 801330c:	20000ec0 	.word	0x20000ec0
 8013310:	20000ec4 	.word	0x20000ec4
 8013314:	20000f20 	.word	0x20000f20
 8013318:	20000f28 	.word	0x20000f28
 801331c:	20000f10 	.word	0x20000f10
 8013320:	20000e0c 	.word	0x20000e0c
 8013324:	20000e08 	.word	0x20000e08
 8013328:	20000f18 	.word	0x20000f18
 801332c:	20000f1c 	.word	0x20000f1c

08013330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013330:	b480      	push	{r7}
 8013332:	b087      	sub	sp, #28
 8013334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013336:	4b2a      	ldr	r3, [pc, #168]	; (80133e0 <vTaskSwitchContext+0xb0>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d003      	beq.n	8013346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801333e:	4b29      	ldr	r3, [pc, #164]	; (80133e4 <vTaskSwitchContext+0xb4>)
 8013340:	2201      	movs	r2, #1
 8013342:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013344:	e046      	b.n	80133d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013346:	4b27      	ldr	r3, [pc, #156]	; (80133e4 <vTaskSwitchContext+0xb4>)
 8013348:	2200      	movs	r2, #0
 801334a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801334c:	4b26      	ldr	r3, [pc, #152]	; (80133e8 <vTaskSwitchContext+0xb8>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	fab3 f383 	clz	r3, r3
 8013358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801335a:	7afb      	ldrb	r3, [r7, #11]
 801335c:	f1c3 031f 	rsb	r3, r3, #31
 8013360:	617b      	str	r3, [r7, #20]
 8013362:	4922      	ldr	r1, [pc, #136]	; (80133ec <vTaskSwitchContext+0xbc>)
 8013364:	697a      	ldr	r2, [r7, #20]
 8013366:	4613      	mov	r3, r2
 8013368:	009b      	lsls	r3, r3, #2
 801336a:	4413      	add	r3, r2
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	440b      	add	r3, r1
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d10c      	bne.n	8013390 <vTaskSwitchContext+0x60>
	__asm volatile
 8013376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801337a:	b672      	cpsid	i
 801337c:	f383 8811 	msr	BASEPRI, r3
 8013380:	f3bf 8f6f 	isb	sy
 8013384:	f3bf 8f4f 	dsb	sy
 8013388:	b662      	cpsie	i
 801338a:	607b      	str	r3, [r7, #4]
}
 801338c:	bf00      	nop
 801338e:	e7fe      	b.n	801338e <vTaskSwitchContext+0x5e>
 8013390:	697a      	ldr	r2, [r7, #20]
 8013392:	4613      	mov	r3, r2
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	4413      	add	r3, r2
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	4a14      	ldr	r2, [pc, #80]	; (80133ec <vTaskSwitchContext+0xbc>)
 801339c:	4413      	add	r3, r2
 801339e:	613b      	str	r3, [r7, #16]
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	685a      	ldr	r2, [r3, #4]
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	605a      	str	r2, [r3, #4]
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	685a      	ldr	r2, [r3, #4]
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	3308      	adds	r3, #8
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d104      	bne.n	80133c0 <vTaskSwitchContext+0x90>
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	685a      	ldr	r2, [r3, #4]
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	605a      	str	r2, [r3, #4]
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	4a0a      	ldr	r2, [pc, #40]	; (80133f0 <vTaskSwitchContext+0xc0>)
 80133c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80133ca:	4b09      	ldr	r3, [pc, #36]	; (80133f0 <vTaskSwitchContext+0xc0>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	334c      	adds	r3, #76	; 0x4c
 80133d0:	4a08      	ldr	r2, [pc, #32]	; (80133f4 <vTaskSwitchContext+0xc4>)
 80133d2:	6013      	str	r3, [r2, #0]
}
 80133d4:	bf00      	nop
 80133d6:	371c      	adds	r7, #28
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr
 80133e0:	20000f30 	.word	0x20000f30
 80133e4:	20000f1c 	.word	0x20000f1c
 80133e8:	20000f10 	.word	0x20000f10
 80133ec:	20000e0c 	.word	0x20000e0c
 80133f0:	20000e08 	.word	0x20000e08
 80133f4:	20000070 	.word	0x20000070

080133f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10c      	bne.n	8013422 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801340c:	b672      	cpsid	i
 801340e:	f383 8811 	msr	BASEPRI, r3
 8013412:	f3bf 8f6f 	isb	sy
 8013416:	f3bf 8f4f 	dsb	sy
 801341a:	b662      	cpsie	i
 801341c:	60fb      	str	r3, [r7, #12]
}
 801341e:	bf00      	nop
 8013420:	e7fe      	b.n	8013420 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013422:	4b07      	ldr	r3, [pc, #28]	; (8013440 <vTaskPlaceOnEventList+0x48>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	3318      	adds	r3, #24
 8013428:	4619      	mov	r1, r3
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f7fe fcb5 	bl	8011d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013430:	2101      	movs	r1, #1
 8013432:	6838      	ldr	r0, [r7, #0]
 8013434:	f000 fba8 	bl	8013b88 <prvAddCurrentTaskToDelayedList>
}
 8013438:	bf00      	nop
 801343a:	3710      	adds	r7, #16
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}
 8013440:	20000e08 	.word	0x20000e08

08013444 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b086      	sub	sp, #24
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	68db      	ldr	r3, [r3, #12]
 8013452:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d10c      	bne.n	8013474 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801345e:	b672      	cpsid	i
 8013460:	f383 8811 	msr	BASEPRI, r3
 8013464:	f3bf 8f6f 	isb	sy
 8013468:	f3bf 8f4f 	dsb	sy
 801346c:	b662      	cpsie	i
 801346e:	60fb      	str	r3, [r7, #12]
}
 8013470:	bf00      	nop
 8013472:	e7fe      	b.n	8013472 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	3318      	adds	r3, #24
 8013478:	4618      	mov	r0, r3
 801347a:	f7fe fcc7 	bl	8011e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801347e:	4b1d      	ldr	r3, [pc, #116]	; (80134f4 <xTaskRemoveFromEventList+0xb0>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d11c      	bne.n	80134c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	3304      	adds	r3, #4
 801348a:	4618      	mov	r0, r3
 801348c:	f7fe fcbe 	bl	8011e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013494:	2201      	movs	r2, #1
 8013496:	409a      	lsls	r2, r3
 8013498:	4b17      	ldr	r3, [pc, #92]	; (80134f8 <xTaskRemoveFromEventList+0xb4>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4313      	orrs	r3, r2
 801349e:	4a16      	ldr	r2, [pc, #88]	; (80134f8 <xTaskRemoveFromEventList+0xb4>)
 80134a0:	6013      	str	r3, [r2, #0]
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a6:	4613      	mov	r3, r2
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	4413      	add	r3, r2
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	4a13      	ldr	r2, [pc, #76]	; (80134fc <xTaskRemoveFromEventList+0xb8>)
 80134b0:	441a      	add	r2, r3
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	3304      	adds	r3, #4
 80134b6:	4619      	mov	r1, r3
 80134b8:	4610      	mov	r0, r2
 80134ba:	f7fe fc4a 	bl	8011d52 <vListInsertEnd>
 80134be:	e005      	b.n	80134cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	3318      	adds	r3, #24
 80134c4:	4619      	mov	r1, r3
 80134c6:	480e      	ldr	r0, [pc, #56]	; (8013500 <xTaskRemoveFromEventList+0xbc>)
 80134c8:	f7fe fc43 	bl	8011d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d0:	4b0c      	ldr	r3, [pc, #48]	; (8013504 <xTaskRemoveFromEventList+0xc0>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d6:	429a      	cmp	r2, r3
 80134d8:	d905      	bls.n	80134e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80134da:	2301      	movs	r3, #1
 80134dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80134de:	4b0a      	ldr	r3, [pc, #40]	; (8013508 <xTaskRemoveFromEventList+0xc4>)
 80134e0:	2201      	movs	r2, #1
 80134e2:	601a      	str	r2, [r3, #0]
 80134e4:	e001      	b.n	80134ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80134e6:	2300      	movs	r3, #0
 80134e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80134ea:	697b      	ldr	r3, [r7, #20]
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3718      	adds	r7, #24
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	20000f30 	.word	0x20000f30
 80134f8:	20000f10 	.word	0x20000f10
 80134fc:	20000e0c 	.word	0x20000e0c
 8013500:	20000ec8 	.word	0x20000ec8
 8013504:	20000e08 	.word	0x20000e08
 8013508:	20000f1c 	.word	0x20000f1c

0801350c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013514:	4b06      	ldr	r3, [pc, #24]	; (8013530 <vTaskInternalSetTimeOutState+0x24>)
 8013516:	681a      	ldr	r2, [r3, #0]
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801351c:	4b05      	ldr	r3, [pc, #20]	; (8013534 <vTaskInternalSetTimeOutState+0x28>)
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	605a      	str	r2, [r3, #4]
}
 8013524:	bf00      	nop
 8013526:	370c      	adds	r7, #12
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr
 8013530:	20000f20 	.word	0x20000f20
 8013534:	20000f0c 	.word	0x20000f0c

08013538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b088      	sub	sp, #32
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d10c      	bne.n	8013562 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8013548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801354c:	b672      	cpsid	i
 801354e:	f383 8811 	msr	BASEPRI, r3
 8013552:	f3bf 8f6f 	isb	sy
 8013556:	f3bf 8f4f 	dsb	sy
 801355a:	b662      	cpsie	i
 801355c:	613b      	str	r3, [r7, #16]
}
 801355e:	bf00      	nop
 8013560:	e7fe      	b.n	8013560 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d10c      	bne.n	8013582 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801356c:	b672      	cpsid	i
 801356e:	f383 8811 	msr	BASEPRI, r3
 8013572:	f3bf 8f6f 	isb	sy
 8013576:	f3bf 8f4f 	dsb	sy
 801357a:	b662      	cpsie	i
 801357c:	60fb      	str	r3, [r7, #12]
}
 801357e:	bf00      	nop
 8013580:	e7fe      	b.n	8013580 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8013582:	f000 fc73 	bl	8013e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013586:	4b1d      	ldr	r3, [pc, #116]	; (80135fc <xTaskCheckForTimeOut+0xc4>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	69ba      	ldr	r2, [r7, #24]
 8013592:	1ad3      	subs	r3, r2, r3
 8013594:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801359e:	d102      	bne.n	80135a6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80135a0:	2300      	movs	r3, #0
 80135a2:	61fb      	str	r3, [r7, #28]
 80135a4:	e023      	b.n	80135ee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	4b15      	ldr	r3, [pc, #84]	; (8013600 <xTaskCheckForTimeOut+0xc8>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d007      	beq.n	80135c2 <xTaskCheckForTimeOut+0x8a>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	69ba      	ldr	r2, [r7, #24]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d302      	bcc.n	80135c2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80135bc:	2301      	movs	r3, #1
 80135be:	61fb      	str	r3, [r7, #28]
 80135c0:	e015      	b.n	80135ee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	697a      	ldr	r2, [r7, #20]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d20b      	bcs.n	80135e4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	1ad2      	subs	r2, r2, r3
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7ff ff97 	bl	801350c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80135de:	2300      	movs	r3, #0
 80135e0:	61fb      	str	r3, [r7, #28]
 80135e2:	e004      	b.n	80135ee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	2200      	movs	r2, #0
 80135e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80135ea:	2301      	movs	r3, #1
 80135ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80135ee:	f000 fc71 	bl	8013ed4 <vPortExitCritical>

	return xReturn;
 80135f2:	69fb      	ldr	r3, [r7, #28]
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3720      	adds	r7, #32
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	20000f0c 	.word	0x20000f0c
 8013600:	20000f20 	.word	0x20000f20

08013604 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013604:	b480      	push	{r7}
 8013606:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013608:	4b03      	ldr	r3, [pc, #12]	; (8013618 <vTaskMissedYield+0x14>)
 801360a:	2201      	movs	r2, #1
 801360c:	601a      	str	r2, [r3, #0]
}
 801360e:	bf00      	nop
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr
 8013618:	20000f1c 	.word	0x20000f1c

0801361c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013624:	f000 f852 	bl	80136cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013628:	4b06      	ldr	r3, [pc, #24]	; (8013644 <prvIdleTask+0x28>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d9f9      	bls.n	8013624 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013630:	4b05      	ldr	r3, [pc, #20]	; (8013648 <prvIdleTask+0x2c>)
 8013632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013636:	601a      	str	r2, [r3, #0]
 8013638:	f3bf 8f4f 	dsb	sy
 801363c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013640:	e7f0      	b.n	8013624 <prvIdleTask+0x8>
 8013642:	bf00      	nop
 8013644:	20000e0c 	.word	0x20000e0c
 8013648:	e000ed04 	.word	0xe000ed04

0801364c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b082      	sub	sp, #8
 8013650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013652:	2300      	movs	r3, #0
 8013654:	607b      	str	r3, [r7, #4]
 8013656:	e00c      	b.n	8013672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	4613      	mov	r3, r2
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	4413      	add	r3, r2
 8013660:	009b      	lsls	r3, r3, #2
 8013662:	4a12      	ldr	r2, [pc, #72]	; (80136ac <prvInitialiseTaskLists+0x60>)
 8013664:	4413      	add	r3, r2
 8013666:	4618      	mov	r0, r3
 8013668:	f7fe fb46 	bl	8011cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	3301      	adds	r3, #1
 8013670:	607b      	str	r3, [r7, #4]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2b06      	cmp	r3, #6
 8013676:	d9ef      	bls.n	8013658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013678:	480d      	ldr	r0, [pc, #52]	; (80136b0 <prvInitialiseTaskLists+0x64>)
 801367a:	f7fe fb3d 	bl	8011cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801367e:	480d      	ldr	r0, [pc, #52]	; (80136b4 <prvInitialiseTaskLists+0x68>)
 8013680:	f7fe fb3a 	bl	8011cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013684:	480c      	ldr	r0, [pc, #48]	; (80136b8 <prvInitialiseTaskLists+0x6c>)
 8013686:	f7fe fb37 	bl	8011cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801368a:	480c      	ldr	r0, [pc, #48]	; (80136bc <prvInitialiseTaskLists+0x70>)
 801368c:	f7fe fb34 	bl	8011cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013690:	480b      	ldr	r0, [pc, #44]	; (80136c0 <prvInitialiseTaskLists+0x74>)
 8013692:	f7fe fb31 	bl	8011cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013696:	4b0b      	ldr	r3, [pc, #44]	; (80136c4 <prvInitialiseTaskLists+0x78>)
 8013698:	4a05      	ldr	r2, [pc, #20]	; (80136b0 <prvInitialiseTaskLists+0x64>)
 801369a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801369c:	4b0a      	ldr	r3, [pc, #40]	; (80136c8 <prvInitialiseTaskLists+0x7c>)
 801369e:	4a05      	ldr	r2, [pc, #20]	; (80136b4 <prvInitialiseTaskLists+0x68>)
 80136a0:	601a      	str	r2, [r3, #0]
}
 80136a2:	bf00      	nop
 80136a4:	3708      	adds	r7, #8
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	20000e0c 	.word	0x20000e0c
 80136b0:	20000e98 	.word	0x20000e98
 80136b4:	20000eac 	.word	0x20000eac
 80136b8:	20000ec8 	.word	0x20000ec8
 80136bc:	20000edc 	.word	0x20000edc
 80136c0:	20000ef4 	.word	0x20000ef4
 80136c4:	20000ec0 	.word	0x20000ec0
 80136c8:	20000ec4 	.word	0x20000ec4

080136cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136d2:	e019      	b.n	8013708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80136d4:	f000 fbca 	bl	8013e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136d8:	4b10      	ldr	r3, [pc, #64]	; (801371c <prvCheckTasksWaitingTermination+0x50>)
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	3304      	adds	r3, #4
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fe fb91 	bl	8011e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80136ea:	4b0d      	ldr	r3, [pc, #52]	; (8013720 <prvCheckTasksWaitingTermination+0x54>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	3b01      	subs	r3, #1
 80136f0:	4a0b      	ldr	r2, [pc, #44]	; (8013720 <prvCheckTasksWaitingTermination+0x54>)
 80136f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80136f4:	4b0b      	ldr	r3, [pc, #44]	; (8013724 <prvCheckTasksWaitingTermination+0x58>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	3b01      	subs	r3, #1
 80136fa:	4a0a      	ldr	r2, [pc, #40]	; (8013724 <prvCheckTasksWaitingTermination+0x58>)
 80136fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80136fe:	f000 fbe9 	bl	8013ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f000 f810 	bl	8013728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013708:	4b06      	ldr	r3, [pc, #24]	; (8013724 <prvCheckTasksWaitingTermination+0x58>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d1e1      	bne.n	80136d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013710:	bf00      	nop
 8013712:	bf00      	nop
 8013714:	3708      	adds	r7, #8
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	20000edc 	.word	0x20000edc
 8013720:	20000f08 	.word	0x20000f08
 8013724:	20000ef0 	.word	0x20000ef0

08013728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	334c      	adds	r3, #76	; 0x4c
 8013734:	4618      	mov	r0, r3
 8013736:	f001 fea1 	bl	801547c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8013740:	2b00      	cmp	r3, #0
 8013742:	d108      	bne.n	8013756 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013748:	4618      	mov	r0, r3
 801374a:	f000 fd85 	bl	8014258 <vPortFree>
				vPortFree( pxTCB );
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f000 fd82 	bl	8014258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013754:	e01a      	b.n	801378c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801375c:	2b01      	cmp	r3, #1
 801375e:	d103      	bne.n	8013768 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f000 fd79 	bl	8014258 <vPortFree>
	}
 8013766:	e011      	b.n	801378c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801376e:	2b02      	cmp	r3, #2
 8013770:	d00c      	beq.n	801378c <prvDeleteTCB+0x64>
	__asm volatile
 8013772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013776:	b672      	cpsid	i
 8013778:	f383 8811 	msr	BASEPRI, r3
 801377c:	f3bf 8f6f 	isb	sy
 8013780:	f3bf 8f4f 	dsb	sy
 8013784:	b662      	cpsie	i
 8013786:	60fb      	str	r3, [r7, #12]
}
 8013788:	bf00      	nop
 801378a:	e7fe      	b.n	801378a <prvDeleteTCB+0x62>
	}
 801378c:	bf00      	nop
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013794:	b480      	push	{r7}
 8013796:	b083      	sub	sp, #12
 8013798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801379a:	4b0c      	ldr	r3, [pc, #48]	; (80137cc <prvResetNextTaskUnblockTime+0x38>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d104      	bne.n	80137ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80137a4:	4b0a      	ldr	r3, [pc, #40]	; (80137d0 <prvResetNextTaskUnblockTime+0x3c>)
 80137a6:	f04f 32ff 	mov.w	r2, #4294967295
 80137aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80137ac:	e008      	b.n	80137c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137ae:	4b07      	ldr	r3, [pc, #28]	; (80137cc <prvResetNextTaskUnblockTime+0x38>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	4a04      	ldr	r2, [pc, #16]	; (80137d0 <prvResetNextTaskUnblockTime+0x3c>)
 80137be:	6013      	str	r3, [r2, #0]
}
 80137c0:	bf00      	nop
 80137c2:	370c      	adds	r7, #12
 80137c4:	46bd      	mov	sp, r7
 80137c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ca:	4770      	bx	lr
 80137cc:	20000ec0 	.word	0x20000ec0
 80137d0:	20000f28 	.word	0x20000f28

080137d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80137da:	4b0b      	ldr	r3, [pc, #44]	; (8013808 <xTaskGetSchedulerState+0x34>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d102      	bne.n	80137e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80137e2:	2301      	movs	r3, #1
 80137e4:	607b      	str	r3, [r7, #4]
 80137e6:	e008      	b.n	80137fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137e8:	4b08      	ldr	r3, [pc, #32]	; (801380c <xTaskGetSchedulerState+0x38>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d102      	bne.n	80137f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80137f0:	2302      	movs	r3, #2
 80137f2:	607b      	str	r3, [r7, #4]
 80137f4:	e001      	b.n	80137fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80137f6:	2300      	movs	r3, #0
 80137f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80137fa:	687b      	ldr	r3, [r7, #4]
	}
 80137fc:	4618      	mov	r0, r3
 80137fe:	370c      	adds	r7, #12
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr
 8013808:	20000f14 	.word	0x20000f14
 801380c:	20000f30 	.word	0x20000f30

08013810 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013810:	b580      	push	{r7, lr}
 8013812:	b084      	sub	sp, #16
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801381c:	2300      	movs	r3, #0
 801381e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d069      	beq.n	80138fa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801382a:	4b36      	ldr	r3, [pc, #216]	; (8013904 <xTaskPriorityInherit+0xf4>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013830:	429a      	cmp	r2, r3
 8013832:	d259      	bcs.n	80138e8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	699b      	ldr	r3, [r3, #24]
 8013838:	2b00      	cmp	r3, #0
 801383a:	db06      	blt.n	801384a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801383c:	4b31      	ldr	r3, [pc, #196]	; (8013904 <xTaskPriorityInherit+0xf4>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013842:	f1c3 0207 	rsb	r2, r3, #7
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	6959      	ldr	r1, [r3, #20]
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013852:	4613      	mov	r3, r2
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	4413      	add	r3, r2
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	4a2b      	ldr	r2, [pc, #172]	; (8013908 <xTaskPriorityInherit+0xf8>)
 801385c:	4413      	add	r3, r2
 801385e:	4299      	cmp	r1, r3
 8013860:	d13a      	bne.n	80138d8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	3304      	adds	r3, #4
 8013866:	4618      	mov	r0, r3
 8013868:	f7fe fad0 	bl	8011e0c <uxListRemove>
 801386c:	4603      	mov	r3, r0
 801386e:	2b00      	cmp	r3, #0
 8013870:	d115      	bne.n	801389e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013876:	4924      	ldr	r1, [pc, #144]	; (8013908 <xTaskPriorityInherit+0xf8>)
 8013878:	4613      	mov	r3, r2
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4413      	add	r3, r2
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	440b      	add	r3, r1
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d10a      	bne.n	801389e <xTaskPriorityInherit+0x8e>
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801388c:	2201      	movs	r2, #1
 801388e:	fa02 f303 	lsl.w	r3, r2, r3
 8013892:	43da      	mvns	r2, r3
 8013894:	4b1d      	ldr	r3, [pc, #116]	; (801390c <xTaskPriorityInherit+0xfc>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	4013      	ands	r3, r2
 801389a:	4a1c      	ldr	r2, [pc, #112]	; (801390c <xTaskPriorityInherit+0xfc>)
 801389c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801389e:	4b19      	ldr	r3, [pc, #100]	; (8013904 <xTaskPriorityInherit+0xf4>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ac:	2201      	movs	r2, #1
 80138ae:	409a      	lsls	r2, r3
 80138b0:	4b16      	ldr	r3, [pc, #88]	; (801390c <xTaskPriorityInherit+0xfc>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	4313      	orrs	r3, r2
 80138b6:	4a15      	ldr	r2, [pc, #84]	; (801390c <xTaskPriorityInherit+0xfc>)
 80138b8:	6013      	str	r3, [r2, #0]
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138be:	4613      	mov	r3, r2
 80138c0:	009b      	lsls	r3, r3, #2
 80138c2:	4413      	add	r3, r2
 80138c4:	009b      	lsls	r3, r3, #2
 80138c6:	4a10      	ldr	r2, [pc, #64]	; (8013908 <xTaskPriorityInherit+0xf8>)
 80138c8:	441a      	add	r2, r3
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	3304      	adds	r3, #4
 80138ce:	4619      	mov	r1, r3
 80138d0:	4610      	mov	r0, r2
 80138d2:	f7fe fa3e 	bl	8011d52 <vListInsertEnd>
 80138d6:	e004      	b.n	80138e2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80138d8:	4b0a      	ldr	r3, [pc, #40]	; (8013904 <xTaskPriorityInherit+0xf4>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80138e2:	2301      	movs	r3, #1
 80138e4:	60fb      	str	r3, [r7, #12]
 80138e6:	e008      	b.n	80138fa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80138ec:	4b05      	ldr	r3, [pc, #20]	; (8013904 <xTaskPriorityInherit+0xf4>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d201      	bcs.n	80138fa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80138f6:	2301      	movs	r3, #1
 80138f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80138fa:	68fb      	ldr	r3, [r7, #12]
	}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3710      	adds	r7, #16
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	20000e08 	.word	0x20000e08
 8013908:	20000e0c 	.word	0x20000e0c
 801390c:	20000f10 	.word	0x20000f10

08013910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013910:	b580      	push	{r7, lr}
 8013912:	b086      	sub	sp, #24
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801391c:	2300      	movs	r3, #0
 801391e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d072      	beq.n	8013a0c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013926:	4b3c      	ldr	r3, [pc, #240]	; (8013a18 <xTaskPriorityDisinherit+0x108>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	693a      	ldr	r2, [r7, #16]
 801392c:	429a      	cmp	r2, r3
 801392e:	d00c      	beq.n	801394a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8013930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013934:	b672      	cpsid	i
 8013936:	f383 8811 	msr	BASEPRI, r3
 801393a:	f3bf 8f6f 	isb	sy
 801393e:	f3bf 8f4f 	dsb	sy
 8013942:	b662      	cpsie	i
 8013944:	60fb      	str	r3, [r7, #12]
}
 8013946:	bf00      	nop
 8013948:	e7fe      	b.n	8013948 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801394e:	2b00      	cmp	r3, #0
 8013950:	d10c      	bne.n	801396c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8013952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013956:	b672      	cpsid	i
 8013958:	f383 8811 	msr	BASEPRI, r3
 801395c:	f3bf 8f6f 	isb	sy
 8013960:	f3bf 8f4f 	dsb	sy
 8013964:	b662      	cpsie	i
 8013966:	60bb      	str	r3, [r7, #8]
}
 8013968:	bf00      	nop
 801396a:	e7fe      	b.n	801396a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013970:	1e5a      	subs	r2, r3, #1
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801397e:	429a      	cmp	r2, r3
 8013980:	d044      	beq.n	8013a0c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013986:	2b00      	cmp	r3, #0
 8013988:	d140      	bne.n	8013a0c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	3304      	adds	r3, #4
 801398e:	4618      	mov	r0, r3
 8013990:	f7fe fa3c 	bl	8011e0c <uxListRemove>
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d115      	bne.n	80139c6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801399e:	491f      	ldr	r1, [pc, #124]	; (8013a1c <xTaskPriorityDisinherit+0x10c>)
 80139a0:	4613      	mov	r3, r2
 80139a2:	009b      	lsls	r3, r3, #2
 80139a4:	4413      	add	r3, r2
 80139a6:	009b      	lsls	r3, r3, #2
 80139a8:	440b      	add	r3, r1
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d10a      	bne.n	80139c6 <xTaskPriorityDisinherit+0xb6>
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b4:	2201      	movs	r2, #1
 80139b6:	fa02 f303 	lsl.w	r3, r2, r3
 80139ba:	43da      	mvns	r2, r3
 80139bc:	4b18      	ldr	r3, [pc, #96]	; (8013a20 <xTaskPriorityDisinherit+0x110>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	4013      	ands	r3, r2
 80139c2:	4a17      	ldr	r2, [pc, #92]	; (8013a20 <xTaskPriorityDisinherit+0x110>)
 80139c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d2:	f1c3 0207 	rsb	r2, r3, #7
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139de:	2201      	movs	r2, #1
 80139e0:	409a      	lsls	r2, r3
 80139e2:	4b0f      	ldr	r3, [pc, #60]	; (8013a20 <xTaskPriorityDisinherit+0x110>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	4313      	orrs	r3, r2
 80139e8:	4a0d      	ldr	r2, [pc, #52]	; (8013a20 <xTaskPriorityDisinherit+0x110>)
 80139ea:	6013      	str	r3, [r2, #0]
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139f0:	4613      	mov	r3, r2
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	4413      	add	r3, r2
 80139f6:	009b      	lsls	r3, r3, #2
 80139f8:	4a08      	ldr	r2, [pc, #32]	; (8013a1c <xTaskPriorityDisinherit+0x10c>)
 80139fa:	441a      	add	r2, r3
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	3304      	adds	r3, #4
 8013a00:	4619      	mov	r1, r3
 8013a02:	4610      	mov	r0, r2
 8013a04:	f7fe f9a5 	bl	8011d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013a0c:	697b      	ldr	r3, [r7, #20]
	}
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3718      	adds	r7, #24
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}
 8013a16:	bf00      	nop
 8013a18:	20000e08 	.word	0x20000e08
 8013a1c:	20000e0c 	.word	0x20000e0c
 8013a20:	20000f10 	.word	0x20000f10

08013a24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b088      	sub	sp, #32
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
 8013a2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013a32:	2301      	movs	r3, #1
 8013a34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	f000 8087 	beq.w	8013b4c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013a3e:	69bb      	ldr	r3, [r7, #24]
 8013a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d10c      	bne.n	8013a60 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8013a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a4a:	b672      	cpsid	i
 8013a4c:	f383 8811 	msr	BASEPRI, r3
 8013a50:	f3bf 8f6f 	isb	sy
 8013a54:	f3bf 8f4f 	dsb	sy
 8013a58:	b662      	cpsie	i
 8013a5a:	60fb      	str	r3, [r7, #12]
}
 8013a5c:	bf00      	nop
 8013a5e:	e7fe      	b.n	8013a5e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013a60:	69bb      	ldr	r3, [r7, #24]
 8013a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a64:	683a      	ldr	r2, [r7, #0]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d902      	bls.n	8013a70 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	61fb      	str	r3, [r7, #28]
 8013a6e:	e002      	b.n	8013a76 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013a76:	69bb      	ldr	r3, [r7, #24]
 8013a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a7a:	69fa      	ldr	r2, [r7, #28]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d065      	beq.n	8013b4c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013a80:	69bb      	ldr	r3, [r7, #24]
 8013a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a84:	697a      	ldr	r2, [r7, #20]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d160      	bne.n	8013b4c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013a8a:	4b32      	ldr	r3, [pc, #200]	; (8013b54 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	69ba      	ldr	r2, [r7, #24]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d10c      	bne.n	8013aae <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8013a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a98:	b672      	cpsid	i
 8013a9a:	f383 8811 	msr	BASEPRI, r3
 8013a9e:	f3bf 8f6f 	isb	sy
 8013aa2:	f3bf 8f4f 	dsb	sy
 8013aa6:	b662      	cpsie	i
 8013aa8:	60bb      	str	r3, [r7, #8]
}
 8013aaa:	bf00      	nop
 8013aac:	e7fe      	b.n	8013aac <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013aae:	69bb      	ldr	r3, [r7, #24]
 8013ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013ab4:	69bb      	ldr	r3, [r7, #24]
 8013ab6:	69fa      	ldr	r2, [r7, #28]
 8013ab8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	699b      	ldr	r3, [r3, #24]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	db04      	blt.n	8013acc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	f1c3 0207 	rsb	r2, r3, #7
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	6959      	ldr	r1, [r3, #20]
 8013ad0:	693a      	ldr	r2, [r7, #16]
 8013ad2:	4613      	mov	r3, r2
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	4413      	add	r3, r2
 8013ad8:	009b      	lsls	r3, r3, #2
 8013ada:	4a1f      	ldr	r2, [pc, #124]	; (8013b58 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013adc:	4413      	add	r3, r2
 8013ade:	4299      	cmp	r1, r3
 8013ae0:	d134      	bne.n	8013b4c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	3304      	adds	r3, #4
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7fe f990 	bl	8011e0c <uxListRemove>
 8013aec:	4603      	mov	r3, r0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d115      	bne.n	8013b1e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013af2:	69bb      	ldr	r3, [r7, #24]
 8013af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013af6:	4918      	ldr	r1, [pc, #96]	; (8013b58 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013af8:	4613      	mov	r3, r2
 8013afa:	009b      	lsls	r3, r3, #2
 8013afc:	4413      	add	r3, r2
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	440b      	add	r3, r1
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d10a      	bne.n	8013b1e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8013b08:	69bb      	ldr	r3, [r7, #24]
 8013b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8013b12:	43da      	mvns	r2, r3
 8013b14:	4b11      	ldr	r3, [pc, #68]	; (8013b5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4013      	ands	r3, r2
 8013b1a:	4a10      	ldr	r2, [pc, #64]	; (8013b5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013b1c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013b1e:	69bb      	ldr	r3, [r7, #24]
 8013b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b22:	2201      	movs	r2, #1
 8013b24:	409a      	lsls	r2, r3
 8013b26:	4b0d      	ldr	r3, [pc, #52]	; (8013b5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	4313      	orrs	r3, r2
 8013b2c:	4a0b      	ldr	r2, [pc, #44]	; (8013b5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013b2e:	6013      	str	r3, [r2, #0]
 8013b30:	69bb      	ldr	r3, [r7, #24]
 8013b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b34:	4613      	mov	r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	4413      	add	r3, r2
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	4a06      	ldr	r2, [pc, #24]	; (8013b58 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013b3e:	441a      	add	r2, r3
 8013b40:	69bb      	ldr	r3, [r7, #24]
 8013b42:	3304      	adds	r3, #4
 8013b44:	4619      	mov	r1, r3
 8013b46:	4610      	mov	r0, r2
 8013b48:	f7fe f903 	bl	8011d52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b4c:	bf00      	nop
 8013b4e:	3720      	adds	r7, #32
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	20000e08 	.word	0x20000e08
 8013b58:	20000e0c 	.word	0x20000e0c
 8013b5c:	20000f10 	.word	0x20000f10

08013b60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013b60:	b480      	push	{r7}
 8013b62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013b64:	4b07      	ldr	r3, [pc, #28]	; (8013b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d004      	beq.n	8013b76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013b6c:	4b05      	ldr	r3, [pc, #20]	; (8013b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013b72:	3201      	adds	r2, #1
 8013b74:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013b76:	4b03      	ldr	r3, [pc, #12]	; (8013b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b78:	681b      	ldr	r3, [r3, #0]
	}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b82:	4770      	bx	lr
 8013b84:	20000e08 	.word	0x20000e08

08013b88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013b92:	4b29      	ldr	r3, [pc, #164]	; (8013c38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b98:	4b28      	ldr	r3, [pc, #160]	; (8013c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	3304      	adds	r3, #4
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fe f934 	bl	8011e0c <uxListRemove>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d10b      	bne.n	8013bc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013baa:	4b24      	ldr	r3, [pc, #144]	; (8013c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8013bb6:	43da      	mvns	r2, r3
 8013bb8:	4b21      	ldr	r3, [pc, #132]	; (8013c40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	4013      	ands	r3, r2
 8013bbe:	4a20      	ldr	r2, [pc, #128]	; (8013c40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013bc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc8:	d10a      	bne.n	8013be0 <prvAddCurrentTaskToDelayedList+0x58>
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d007      	beq.n	8013be0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bd0:	4b1a      	ldr	r3, [pc, #104]	; (8013c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	481a      	ldr	r0, [pc, #104]	; (8013c44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013bda:	f7fe f8ba 	bl	8011d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013bde:	e026      	b.n	8013c2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013be0:	68fa      	ldr	r2, [r7, #12]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	4413      	add	r3, r2
 8013be6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013be8:	4b14      	ldr	r3, [pc, #80]	; (8013c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	68ba      	ldr	r2, [r7, #8]
 8013bee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013bf0:	68ba      	ldr	r2, [r7, #8]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d209      	bcs.n	8013c0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bf8:	4b13      	ldr	r3, [pc, #76]	; (8013c48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	4b0f      	ldr	r3, [pc, #60]	; (8013c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	3304      	adds	r3, #4
 8013c02:	4619      	mov	r1, r3
 8013c04:	4610      	mov	r0, r2
 8013c06:	f7fe f8c8 	bl	8011d9a <vListInsert>
}
 8013c0a:	e010      	b.n	8013c2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c0c:	4b0f      	ldr	r3, [pc, #60]	; (8013c4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	4b0a      	ldr	r3, [pc, #40]	; (8013c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	3304      	adds	r3, #4
 8013c16:	4619      	mov	r1, r3
 8013c18:	4610      	mov	r0, r2
 8013c1a:	f7fe f8be 	bl	8011d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013c1e:	4b0c      	ldr	r3, [pc, #48]	; (8013c50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	68ba      	ldr	r2, [r7, #8]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d202      	bcs.n	8013c2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013c28:	4a09      	ldr	r2, [pc, #36]	; (8013c50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	6013      	str	r3, [r2, #0]
}
 8013c2e:	bf00      	nop
 8013c30:	3710      	adds	r7, #16
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
 8013c36:	bf00      	nop
 8013c38:	20000f0c 	.word	0x20000f0c
 8013c3c:	20000e08 	.word	0x20000e08
 8013c40:	20000f10 	.word	0x20000f10
 8013c44:	20000ef4 	.word	0x20000ef4
 8013c48:	20000ec4 	.word	0x20000ec4
 8013c4c:	20000ec0 	.word	0x20000ec0
 8013c50:	20000f28 	.word	0x20000f28

08013c54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013c54:	b480      	push	{r7}
 8013c56:	b085      	sub	sp, #20
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	60f8      	str	r0, [r7, #12]
 8013c5c:	60b9      	str	r1, [r7, #8]
 8013c5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	3b04      	subs	r3, #4
 8013c64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	3b04      	subs	r3, #4
 8013c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	f023 0201 	bic.w	r2, r3, #1
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	3b04      	subs	r3, #4
 8013c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013c84:	4a0c      	ldr	r2, [pc, #48]	; (8013cb8 <pxPortInitialiseStack+0x64>)
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	3b14      	subs	r3, #20
 8013c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	3b04      	subs	r3, #4
 8013c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	f06f 0202 	mvn.w	r2, #2
 8013ca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	3b20      	subs	r3, #32
 8013ca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013caa:	68fb      	ldr	r3, [r7, #12]
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3714      	adds	r7, #20
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr
 8013cb8:	08013cbd 	.word	0x08013cbd

08013cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b085      	sub	sp, #20
 8013cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013cc6:	4b14      	ldr	r3, [pc, #80]	; (8013d18 <prvTaskExitError+0x5c>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cce:	d00c      	beq.n	8013cea <prvTaskExitError+0x2e>
	__asm volatile
 8013cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd4:	b672      	cpsid	i
 8013cd6:	f383 8811 	msr	BASEPRI, r3
 8013cda:	f3bf 8f6f 	isb	sy
 8013cde:	f3bf 8f4f 	dsb	sy
 8013ce2:	b662      	cpsie	i
 8013ce4:	60fb      	str	r3, [r7, #12]
}
 8013ce6:	bf00      	nop
 8013ce8:	e7fe      	b.n	8013ce8 <prvTaskExitError+0x2c>
	__asm volatile
 8013cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cee:	b672      	cpsid	i
 8013cf0:	f383 8811 	msr	BASEPRI, r3
 8013cf4:	f3bf 8f6f 	isb	sy
 8013cf8:	f3bf 8f4f 	dsb	sy
 8013cfc:	b662      	cpsie	i
 8013cfe:	60bb      	str	r3, [r7, #8]
}
 8013d00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013d02:	bf00      	nop
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d0fc      	beq.n	8013d04 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013d0a:	bf00      	nop
 8013d0c:	bf00      	nop
 8013d0e:	3714      	adds	r7, #20
 8013d10:	46bd      	mov	sp, r7
 8013d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d16:	4770      	bx	lr
 8013d18:	20000014 	.word	0x20000014
 8013d1c:	00000000 	.word	0x00000000

08013d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013d20:	4b07      	ldr	r3, [pc, #28]	; (8013d40 <pxCurrentTCBConst2>)
 8013d22:	6819      	ldr	r1, [r3, #0]
 8013d24:	6808      	ldr	r0, [r1, #0]
 8013d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d2a:	f380 8809 	msr	PSP, r0
 8013d2e:	f3bf 8f6f 	isb	sy
 8013d32:	f04f 0000 	mov.w	r0, #0
 8013d36:	f380 8811 	msr	BASEPRI, r0
 8013d3a:	4770      	bx	lr
 8013d3c:	f3af 8000 	nop.w

08013d40 <pxCurrentTCBConst2>:
 8013d40:	20000e08 	.word	0x20000e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013d44:	bf00      	nop
 8013d46:	bf00      	nop

08013d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013d48:	4808      	ldr	r0, [pc, #32]	; (8013d6c <prvPortStartFirstTask+0x24>)
 8013d4a:	6800      	ldr	r0, [r0, #0]
 8013d4c:	6800      	ldr	r0, [r0, #0]
 8013d4e:	f380 8808 	msr	MSP, r0
 8013d52:	f04f 0000 	mov.w	r0, #0
 8013d56:	f380 8814 	msr	CONTROL, r0
 8013d5a:	b662      	cpsie	i
 8013d5c:	b661      	cpsie	f
 8013d5e:	f3bf 8f4f 	dsb	sy
 8013d62:	f3bf 8f6f 	isb	sy
 8013d66:	df00      	svc	0
 8013d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013d6a:	bf00      	nop
 8013d6c:	e000ed08 	.word	0xe000ed08

08013d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013d76:	4b37      	ldr	r3, [pc, #220]	; (8013e54 <xPortStartScheduler+0xe4>)
 8013d78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	781b      	ldrb	r3, [r3, #0]
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	22ff      	movs	r2, #255	; 0xff
 8013d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	b2db      	uxtb	r3, r3
 8013d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013d90:	78fb      	ldrb	r3, [r7, #3]
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013d98:	b2da      	uxtb	r2, r3
 8013d9a:	4b2f      	ldr	r3, [pc, #188]	; (8013e58 <xPortStartScheduler+0xe8>)
 8013d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013d9e:	4b2f      	ldr	r3, [pc, #188]	; (8013e5c <xPortStartScheduler+0xec>)
 8013da0:	2207      	movs	r2, #7
 8013da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013da4:	e009      	b.n	8013dba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013da6:	4b2d      	ldr	r3, [pc, #180]	; (8013e5c <xPortStartScheduler+0xec>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	3b01      	subs	r3, #1
 8013dac:	4a2b      	ldr	r2, [pc, #172]	; (8013e5c <xPortStartScheduler+0xec>)
 8013dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013db0:	78fb      	ldrb	r3, [r7, #3]
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	005b      	lsls	r3, r3, #1
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013dba:	78fb      	ldrb	r3, [r7, #3]
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013dc2:	2b80      	cmp	r3, #128	; 0x80
 8013dc4:	d0ef      	beq.n	8013da6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013dc6:	4b25      	ldr	r3, [pc, #148]	; (8013e5c <xPortStartScheduler+0xec>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f1c3 0307 	rsb	r3, r3, #7
 8013dce:	2b04      	cmp	r3, #4
 8013dd0:	d00c      	beq.n	8013dec <xPortStartScheduler+0x7c>
	__asm volatile
 8013dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd6:	b672      	cpsid	i
 8013dd8:	f383 8811 	msr	BASEPRI, r3
 8013ddc:	f3bf 8f6f 	isb	sy
 8013de0:	f3bf 8f4f 	dsb	sy
 8013de4:	b662      	cpsie	i
 8013de6:	60bb      	str	r3, [r7, #8]
}
 8013de8:	bf00      	nop
 8013dea:	e7fe      	b.n	8013dea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013dec:	4b1b      	ldr	r3, [pc, #108]	; (8013e5c <xPortStartScheduler+0xec>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	021b      	lsls	r3, r3, #8
 8013df2:	4a1a      	ldr	r2, [pc, #104]	; (8013e5c <xPortStartScheduler+0xec>)
 8013df4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013df6:	4b19      	ldr	r3, [pc, #100]	; (8013e5c <xPortStartScheduler+0xec>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013dfe:	4a17      	ldr	r2, [pc, #92]	; (8013e5c <xPortStartScheduler+0xec>)
 8013e00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	b2da      	uxtb	r2, r3
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013e0a:	4b15      	ldr	r3, [pc, #84]	; (8013e60 <xPortStartScheduler+0xf0>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	4a14      	ldr	r2, [pc, #80]	; (8013e60 <xPortStartScheduler+0xf0>)
 8013e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013e14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013e16:	4b12      	ldr	r3, [pc, #72]	; (8013e60 <xPortStartScheduler+0xf0>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4a11      	ldr	r2, [pc, #68]	; (8013e60 <xPortStartScheduler+0xf0>)
 8013e1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013e20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013e22:	f000 f8dd 	bl	8013fe0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013e26:	4b0f      	ldr	r3, [pc, #60]	; (8013e64 <xPortStartScheduler+0xf4>)
 8013e28:	2200      	movs	r2, #0
 8013e2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013e2c:	f000 f8fc 	bl	8014028 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013e30:	4b0d      	ldr	r3, [pc, #52]	; (8013e68 <xPortStartScheduler+0xf8>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	4a0c      	ldr	r2, [pc, #48]	; (8013e68 <xPortStartScheduler+0xf8>)
 8013e36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013e3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013e3c:	f7ff ff84 	bl	8013d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013e40:	f7ff fa76 	bl	8013330 <vTaskSwitchContext>
	prvTaskExitError();
 8013e44:	f7ff ff3a 	bl	8013cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013e48:	2300      	movs	r3, #0
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3710      	adds	r7, #16
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	e000e400 	.word	0xe000e400
 8013e58:	20000f34 	.word	0x20000f34
 8013e5c:	20000f38 	.word	0x20000f38
 8013e60:	e000ed20 	.word	0xe000ed20
 8013e64:	20000014 	.word	0x20000014
 8013e68:	e000ef34 	.word	0xe000ef34

08013e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	af00      	add	r7, sp, #0
	__asm volatile
 8013e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e76:	b672      	cpsid	i
 8013e78:	f383 8811 	msr	BASEPRI, r3
 8013e7c:	f3bf 8f6f 	isb	sy
 8013e80:	f3bf 8f4f 	dsb	sy
 8013e84:	b662      	cpsie	i
 8013e86:	607b      	str	r3, [r7, #4]
}
 8013e88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013e8a:	4b10      	ldr	r3, [pc, #64]	; (8013ecc <vPortEnterCritical+0x60>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	3301      	adds	r3, #1
 8013e90:	4a0e      	ldr	r2, [pc, #56]	; (8013ecc <vPortEnterCritical+0x60>)
 8013e92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013e94:	4b0d      	ldr	r3, [pc, #52]	; (8013ecc <vPortEnterCritical+0x60>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d111      	bne.n	8013ec0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013e9c:	4b0c      	ldr	r3, [pc, #48]	; (8013ed0 <vPortEnterCritical+0x64>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d00c      	beq.n	8013ec0 <vPortEnterCritical+0x54>
	__asm volatile
 8013ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eaa:	b672      	cpsid	i
 8013eac:	f383 8811 	msr	BASEPRI, r3
 8013eb0:	f3bf 8f6f 	isb	sy
 8013eb4:	f3bf 8f4f 	dsb	sy
 8013eb8:	b662      	cpsie	i
 8013eba:	603b      	str	r3, [r7, #0]
}
 8013ebc:	bf00      	nop
 8013ebe:	e7fe      	b.n	8013ebe <vPortEnterCritical+0x52>
	}
}
 8013ec0:	bf00      	nop
 8013ec2:	370c      	adds	r7, #12
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr
 8013ecc:	20000014 	.word	0x20000014
 8013ed0:	e000ed04 	.word	0xe000ed04

08013ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b083      	sub	sp, #12
 8013ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013eda:	4b13      	ldr	r3, [pc, #76]	; (8013f28 <vPortExitCritical+0x54>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d10c      	bne.n	8013efc <vPortExitCritical+0x28>
	__asm volatile
 8013ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee6:	b672      	cpsid	i
 8013ee8:	f383 8811 	msr	BASEPRI, r3
 8013eec:	f3bf 8f6f 	isb	sy
 8013ef0:	f3bf 8f4f 	dsb	sy
 8013ef4:	b662      	cpsie	i
 8013ef6:	607b      	str	r3, [r7, #4]
}
 8013ef8:	bf00      	nop
 8013efa:	e7fe      	b.n	8013efa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013efc:	4b0a      	ldr	r3, [pc, #40]	; (8013f28 <vPortExitCritical+0x54>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	3b01      	subs	r3, #1
 8013f02:	4a09      	ldr	r2, [pc, #36]	; (8013f28 <vPortExitCritical+0x54>)
 8013f04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013f06:	4b08      	ldr	r3, [pc, #32]	; (8013f28 <vPortExitCritical+0x54>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d105      	bne.n	8013f1a <vPortExitCritical+0x46>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	f383 8811 	msr	BASEPRI, r3
}
 8013f18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013f1a:	bf00      	nop
 8013f1c:	370c      	adds	r7, #12
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f24:	4770      	bx	lr
 8013f26:	bf00      	nop
 8013f28:	20000014 	.word	0x20000014
 8013f2c:	00000000 	.word	0x00000000

08013f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013f30:	f3ef 8009 	mrs	r0, PSP
 8013f34:	f3bf 8f6f 	isb	sy
 8013f38:	4b15      	ldr	r3, [pc, #84]	; (8013f90 <pxCurrentTCBConst>)
 8013f3a:	681a      	ldr	r2, [r3, #0]
 8013f3c:	f01e 0f10 	tst.w	lr, #16
 8013f40:	bf08      	it	eq
 8013f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f4a:	6010      	str	r0, [r2, #0]
 8013f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013f54:	b672      	cpsid	i
 8013f56:	f380 8811 	msr	BASEPRI, r0
 8013f5a:	f3bf 8f4f 	dsb	sy
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	b662      	cpsie	i
 8013f64:	f7ff f9e4 	bl	8013330 <vTaskSwitchContext>
 8013f68:	f04f 0000 	mov.w	r0, #0
 8013f6c:	f380 8811 	msr	BASEPRI, r0
 8013f70:	bc09      	pop	{r0, r3}
 8013f72:	6819      	ldr	r1, [r3, #0]
 8013f74:	6808      	ldr	r0, [r1, #0]
 8013f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f7a:	f01e 0f10 	tst.w	lr, #16
 8013f7e:	bf08      	it	eq
 8013f80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013f84:	f380 8809 	msr	PSP, r0
 8013f88:	f3bf 8f6f 	isb	sy
 8013f8c:	4770      	bx	lr
 8013f8e:	bf00      	nop

08013f90 <pxCurrentTCBConst>:
 8013f90:	20000e08 	.word	0x20000e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013f94:	bf00      	nop
 8013f96:	bf00      	nop

08013f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8013f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa2:	b672      	cpsid	i
 8013fa4:	f383 8811 	msr	BASEPRI, r3
 8013fa8:	f3bf 8f6f 	isb	sy
 8013fac:	f3bf 8f4f 	dsb	sy
 8013fb0:	b662      	cpsie	i
 8013fb2:	607b      	str	r3, [r7, #4]
}
 8013fb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013fb6:	f7ff f901 	bl	80131bc <xTaskIncrementTick>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d003      	beq.n	8013fc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013fc0:	4b06      	ldr	r3, [pc, #24]	; (8013fdc <SysTick_Handler+0x44>)
 8013fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fc6:	601a      	str	r2, [r3, #0]
 8013fc8:	2300      	movs	r3, #0
 8013fca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	f383 8811 	msr	BASEPRI, r3
}
 8013fd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013fd4:	bf00      	nop
 8013fd6:	3708      	adds	r7, #8
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	e000ed04 	.word	0xe000ed04

08013fe0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013fe4:	4b0b      	ldr	r3, [pc, #44]	; (8014014 <vPortSetupTimerInterrupt+0x34>)
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013fea:	4b0b      	ldr	r3, [pc, #44]	; (8014018 <vPortSetupTimerInterrupt+0x38>)
 8013fec:	2200      	movs	r2, #0
 8013fee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013ff0:	4b0a      	ldr	r3, [pc, #40]	; (801401c <vPortSetupTimerInterrupt+0x3c>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	4a0a      	ldr	r2, [pc, #40]	; (8014020 <vPortSetupTimerInterrupt+0x40>)
 8013ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8013ffa:	099b      	lsrs	r3, r3, #6
 8013ffc:	4a09      	ldr	r2, [pc, #36]	; (8014024 <vPortSetupTimerInterrupt+0x44>)
 8013ffe:	3b01      	subs	r3, #1
 8014000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014002:	4b04      	ldr	r3, [pc, #16]	; (8014014 <vPortSetupTimerInterrupt+0x34>)
 8014004:	2207      	movs	r2, #7
 8014006:	601a      	str	r2, [r3, #0]
}
 8014008:	bf00      	nop
 801400a:	46bd      	mov	sp, r7
 801400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014010:	4770      	bx	lr
 8014012:	bf00      	nop
 8014014:	e000e010 	.word	0xe000e010
 8014018:	e000e018 	.word	0xe000e018
 801401c:	20000008 	.word	0x20000008
 8014020:	10624dd3 	.word	0x10624dd3
 8014024:	e000e014 	.word	0xe000e014

08014028 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014028:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014038 <vPortEnableVFP+0x10>
 801402c:	6801      	ldr	r1, [r0, #0]
 801402e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014032:	6001      	str	r1, [r0, #0]
 8014034:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014036:	bf00      	nop
 8014038:	e000ed88 	.word	0xe000ed88

0801403c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801403c:	b480      	push	{r7}
 801403e:	b085      	sub	sp, #20
 8014040:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014042:	f3ef 8305 	mrs	r3, IPSR
 8014046:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	2b0f      	cmp	r3, #15
 801404c:	d916      	bls.n	801407c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801404e:	4a19      	ldr	r2, [pc, #100]	; (80140b4 <vPortValidateInterruptPriority+0x78>)
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	4413      	add	r3, r2
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014058:	4b17      	ldr	r3, [pc, #92]	; (80140b8 <vPortValidateInterruptPriority+0x7c>)
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	7afa      	ldrb	r2, [r7, #11]
 801405e:	429a      	cmp	r2, r3
 8014060:	d20c      	bcs.n	801407c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8014062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014066:	b672      	cpsid	i
 8014068:	f383 8811 	msr	BASEPRI, r3
 801406c:	f3bf 8f6f 	isb	sy
 8014070:	f3bf 8f4f 	dsb	sy
 8014074:	b662      	cpsie	i
 8014076:	607b      	str	r3, [r7, #4]
}
 8014078:	bf00      	nop
 801407a:	e7fe      	b.n	801407a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801407c:	4b0f      	ldr	r3, [pc, #60]	; (80140bc <vPortValidateInterruptPriority+0x80>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014084:	4b0e      	ldr	r3, [pc, #56]	; (80140c0 <vPortValidateInterruptPriority+0x84>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	429a      	cmp	r2, r3
 801408a:	d90c      	bls.n	80140a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014090:	b672      	cpsid	i
 8014092:	f383 8811 	msr	BASEPRI, r3
 8014096:	f3bf 8f6f 	isb	sy
 801409a:	f3bf 8f4f 	dsb	sy
 801409e:	b662      	cpsie	i
 80140a0:	603b      	str	r3, [r7, #0]
}
 80140a2:	bf00      	nop
 80140a4:	e7fe      	b.n	80140a4 <vPortValidateInterruptPriority+0x68>
	}
 80140a6:	bf00      	nop
 80140a8:	3714      	adds	r7, #20
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr
 80140b2:	bf00      	nop
 80140b4:	e000e3f0 	.word	0xe000e3f0
 80140b8:	20000f34 	.word	0x20000f34
 80140bc:	e000ed0c 	.word	0xe000ed0c
 80140c0:	20000f38 	.word	0x20000f38

080140c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b08a      	sub	sp, #40	; 0x28
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80140cc:	2300      	movs	r3, #0
 80140ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80140d0:	f7fe ffb8 	bl	8013044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80140d4:	4b5b      	ldr	r3, [pc, #364]	; (8014244 <pvPortMalloc+0x180>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d101      	bne.n	80140e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80140dc:	f000 f91a 	bl	8014314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80140e0:	4b59      	ldr	r3, [pc, #356]	; (8014248 <pvPortMalloc+0x184>)
 80140e2:	681a      	ldr	r2, [r3, #0]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	4013      	ands	r3, r2
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f040 8092 	bne.w	8014212 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d01f      	beq.n	8014134 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80140f4:	2208      	movs	r2, #8
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	4413      	add	r3, r2
 80140fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f003 0307 	and.w	r3, r3, #7
 8014102:	2b00      	cmp	r3, #0
 8014104:	d016      	beq.n	8014134 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f023 0307 	bic.w	r3, r3, #7
 801410c:	3308      	adds	r3, #8
 801410e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f003 0307 	and.w	r3, r3, #7
 8014116:	2b00      	cmp	r3, #0
 8014118:	d00c      	beq.n	8014134 <pvPortMalloc+0x70>
	__asm volatile
 801411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801411e:	b672      	cpsid	i
 8014120:	f383 8811 	msr	BASEPRI, r3
 8014124:	f3bf 8f6f 	isb	sy
 8014128:	f3bf 8f4f 	dsb	sy
 801412c:	b662      	cpsie	i
 801412e:	617b      	str	r3, [r7, #20]
}
 8014130:	bf00      	nop
 8014132:	e7fe      	b.n	8014132 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d06b      	beq.n	8014212 <pvPortMalloc+0x14e>
 801413a:	4b44      	ldr	r3, [pc, #272]	; (801424c <pvPortMalloc+0x188>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	429a      	cmp	r2, r3
 8014142:	d866      	bhi.n	8014212 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014144:	4b42      	ldr	r3, [pc, #264]	; (8014250 <pvPortMalloc+0x18c>)
 8014146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014148:	4b41      	ldr	r3, [pc, #260]	; (8014250 <pvPortMalloc+0x18c>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801414e:	e004      	b.n	801415a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8014150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	429a      	cmp	r2, r3
 8014162:	d903      	bls.n	801416c <pvPortMalloc+0xa8>
 8014164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d1f1      	bne.n	8014150 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801416c:	4b35      	ldr	r3, [pc, #212]	; (8014244 <pvPortMalloc+0x180>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014172:	429a      	cmp	r2, r3
 8014174:	d04d      	beq.n	8014212 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014176:	6a3b      	ldr	r3, [r7, #32]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	2208      	movs	r2, #8
 801417c:	4413      	add	r3, r2
 801417e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	6a3b      	ldr	r3, [r7, #32]
 8014186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418a:	685a      	ldr	r2, [r3, #4]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	1ad2      	subs	r2, r2, r3
 8014190:	2308      	movs	r3, #8
 8014192:	005b      	lsls	r3, r3, #1
 8014194:	429a      	cmp	r2, r3
 8014196:	d921      	bls.n	80141dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	4413      	add	r3, r2
 801419e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	f003 0307 	and.w	r3, r3, #7
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d00c      	beq.n	80141c4 <pvPortMalloc+0x100>
	__asm volatile
 80141aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ae:	b672      	cpsid	i
 80141b0:	f383 8811 	msr	BASEPRI, r3
 80141b4:	f3bf 8f6f 	isb	sy
 80141b8:	f3bf 8f4f 	dsb	sy
 80141bc:	b662      	cpsie	i
 80141be:	613b      	str	r3, [r7, #16]
}
 80141c0:	bf00      	nop
 80141c2:	e7fe      	b.n	80141c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80141c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c6:	685a      	ldr	r2, [r3, #4]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	1ad2      	subs	r2, r2, r3
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80141d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80141d6:	69b8      	ldr	r0, [r7, #24]
 80141d8:	f000 f8fe 	bl	80143d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80141dc:	4b1b      	ldr	r3, [pc, #108]	; (801424c <pvPortMalloc+0x188>)
 80141de:	681a      	ldr	r2, [r3, #0]
 80141e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	1ad3      	subs	r3, r2, r3
 80141e6:	4a19      	ldr	r2, [pc, #100]	; (801424c <pvPortMalloc+0x188>)
 80141e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80141ea:	4b18      	ldr	r3, [pc, #96]	; (801424c <pvPortMalloc+0x188>)
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	4b19      	ldr	r3, [pc, #100]	; (8014254 <pvPortMalloc+0x190>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d203      	bcs.n	80141fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80141f6:	4b15      	ldr	r3, [pc, #84]	; (801424c <pvPortMalloc+0x188>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	4a16      	ldr	r2, [pc, #88]	; (8014254 <pvPortMalloc+0x190>)
 80141fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80141fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014200:	685a      	ldr	r2, [r3, #4]
 8014202:	4b11      	ldr	r3, [pc, #68]	; (8014248 <pvPortMalloc+0x184>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	431a      	orrs	r2, r3
 8014208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420e:	2200      	movs	r2, #0
 8014210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014212:	f7fe ff25 	bl	8013060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	f003 0307 	and.w	r3, r3, #7
 801421c:	2b00      	cmp	r3, #0
 801421e:	d00c      	beq.n	801423a <pvPortMalloc+0x176>
	__asm volatile
 8014220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014224:	b672      	cpsid	i
 8014226:	f383 8811 	msr	BASEPRI, r3
 801422a:	f3bf 8f6f 	isb	sy
 801422e:	f3bf 8f4f 	dsb	sy
 8014232:	b662      	cpsie	i
 8014234:	60fb      	str	r3, [r7, #12]
}
 8014236:	bf00      	nop
 8014238:	e7fe      	b.n	8014238 <pvPortMalloc+0x174>
	return pvReturn;
 801423a:	69fb      	ldr	r3, [r7, #28]
}
 801423c:	4618      	mov	r0, r3
 801423e:	3728      	adds	r7, #40	; 0x28
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	20008f44 	.word	0x20008f44
 8014248:	20008f50 	.word	0x20008f50
 801424c:	20008f48 	.word	0x20008f48
 8014250:	20008f3c 	.word	0x20008f3c
 8014254:	20008f4c 	.word	0x20008f4c

08014258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b086      	sub	sp, #24
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d04c      	beq.n	8014304 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801426a:	2308      	movs	r3, #8
 801426c:	425b      	negs	r3, r3
 801426e:	697a      	ldr	r2, [r7, #20]
 8014270:	4413      	add	r3, r2
 8014272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	685a      	ldr	r2, [r3, #4]
 801427c:	4b23      	ldr	r3, [pc, #140]	; (801430c <vPortFree+0xb4>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4013      	ands	r3, r2
 8014282:	2b00      	cmp	r3, #0
 8014284:	d10c      	bne.n	80142a0 <vPortFree+0x48>
	__asm volatile
 8014286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801428a:	b672      	cpsid	i
 801428c:	f383 8811 	msr	BASEPRI, r3
 8014290:	f3bf 8f6f 	isb	sy
 8014294:	f3bf 8f4f 	dsb	sy
 8014298:	b662      	cpsie	i
 801429a:	60fb      	str	r3, [r7, #12]
}
 801429c:	bf00      	nop
 801429e:	e7fe      	b.n	801429e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80142a0:	693b      	ldr	r3, [r7, #16]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00c      	beq.n	80142c2 <vPortFree+0x6a>
	__asm volatile
 80142a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142ac:	b672      	cpsid	i
 80142ae:	f383 8811 	msr	BASEPRI, r3
 80142b2:	f3bf 8f6f 	isb	sy
 80142b6:	f3bf 8f4f 	dsb	sy
 80142ba:	b662      	cpsie	i
 80142bc:	60bb      	str	r3, [r7, #8]
}
 80142be:	bf00      	nop
 80142c0:	e7fe      	b.n	80142c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	685a      	ldr	r2, [r3, #4]
 80142c6:	4b11      	ldr	r3, [pc, #68]	; (801430c <vPortFree+0xb4>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	4013      	ands	r3, r2
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d019      	beq.n	8014304 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d115      	bne.n	8014304 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	685a      	ldr	r2, [r3, #4]
 80142dc:	4b0b      	ldr	r3, [pc, #44]	; (801430c <vPortFree+0xb4>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	43db      	mvns	r3, r3
 80142e2:	401a      	ands	r2, r3
 80142e4:	693b      	ldr	r3, [r7, #16]
 80142e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80142e8:	f7fe feac 	bl	8013044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	685a      	ldr	r2, [r3, #4]
 80142f0:	4b07      	ldr	r3, [pc, #28]	; (8014310 <vPortFree+0xb8>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	4413      	add	r3, r2
 80142f6:	4a06      	ldr	r2, [pc, #24]	; (8014310 <vPortFree+0xb8>)
 80142f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80142fa:	6938      	ldr	r0, [r7, #16]
 80142fc:	f000 f86c 	bl	80143d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014300:	f7fe feae 	bl	8013060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014304:	bf00      	nop
 8014306:	3718      	adds	r7, #24
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	20008f50 	.word	0x20008f50
 8014310:	20008f48 	.word	0x20008f48

08014314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014314:	b480      	push	{r7}
 8014316:	b085      	sub	sp, #20
 8014318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801431e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014320:	4b27      	ldr	r3, [pc, #156]	; (80143c0 <prvHeapInit+0xac>)
 8014322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	f003 0307 	and.w	r3, r3, #7
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00c      	beq.n	8014348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	3307      	adds	r3, #7
 8014332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f023 0307 	bic.w	r3, r3, #7
 801433a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801433c:	68ba      	ldr	r2, [r7, #8]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	1ad3      	subs	r3, r2, r3
 8014342:	4a1f      	ldr	r2, [pc, #124]	; (80143c0 <prvHeapInit+0xac>)
 8014344:	4413      	add	r3, r2
 8014346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801434c:	4a1d      	ldr	r2, [pc, #116]	; (80143c4 <prvHeapInit+0xb0>)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014352:	4b1c      	ldr	r3, [pc, #112]	; (80143c4 <prvHeapInit+0xb0>)
 8014354:	2200      	movs	r2, #0
 8014356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	68ba      	ldr	r2, [r7, #8]
 801435c:	4413      	add	r3, r2
 801435e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014360:	2208      	movs	r2, #8
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	1a9b      	subs	r3, r3, r2
 8014366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	f023 0307 	bic.w	r3, r3, #7
 801436e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	4a15      	ldr	r2, [pc, #84]	; (80143c8 <prvHeapInit+0xb4>)
 8014374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014376:	4b14      	ldr	r3, [pc, #80]	; (80143c8 <prvHeapInit+0xb4>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2200      	movs	r2, #0
 801437c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801437e:	4b12      	ldr	r3, [pc, #72]	; (80143c8 <prvHeapInit+0xb4>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	2200      	movs	r2, #0
 8014384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	68fa      	ldr	r2, [r7, #12]
 801438e:	1ad2      	subs	r2, r2, r3
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014394:	4b0c      	ldr	r3, [pc, #48]	; (80143c8 <prvHeapInit+0xb4>)
 8014396:	681a      	ldr	r2, [r3, #0]
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	4a0a      	ldr	r2, [pc, #40]	; (80143cc <prvHeapInit+0xb8>)
 80143a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	4a09      	ldr	r2, [pc, #36]	; (80143d0 <prvHeapInit+0xbc>)
 80143aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80143ac:	4b09      	ldr	r3, [pc, #36]	; (80143d4 <prvHeapInit+0xc0>)
 80143ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80143b2:	601a      	str	r2, [r3, #0]
}
 80143b4:	bf00      	nop
 80143b6:	3714      	adds	r7, #20
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr
 80143c0:	20000f3c 	.word	0x20000f3c
 80143c4:	20008f3c 	.word	0x20008f3c
 80143c8:	20008f44 	.word	0x20008f44
 80143cc:	20008f4c 	.word	0x20008f4c
 80143d0:	20008f48 	.word	0x20008f48
 80143d4:	20008f50 	.word	0x20008f50

080143d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80143d8:	b480      	push	{r7}
 80143da:	b085      	sub	sp, #20
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80143e0:	4b28      	ldr	r3, [pc, #160]	; (8014484 <prvInsertBlockIntoFreeList+0xac>)
 80143e2:	60fb      	str	r3, [r7, #12]
 80143e4:	e002      	b.n	80143ec <prvInsertBlockIntoFreeList+0x14>
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	60fb      	str	r3, [r7, #12]
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	687a      	ldr	r2, [r7, #4]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d8f7      	bhi.n	80143e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	68ba      	ldr	r2, [r7, #8]
 8014400:	4413      	add	r3, r2
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	429a      	cmp	r2, r3
 8014406:	d108      	bne.n	801441a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	685a      	ldr	r2, [r3, #4]
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	441a      	add	r2, r3
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	68ba      	ldr	r2, [r7, #8]
 8014424:	441a      	add	r2, r3
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	429a      	cmp	r2, r3
 801442c:	d118      	bne.n	8014460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	681a      	ldr	r2, [r3, #0]
 8014432:	4b15      	ldr	r3, [pc, #84]	; (8014488 <prvInsertBlockIntoFreeList+0xb0>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	429a      	cmp	r2, r3
 8014438:	d00d      	beq.n	8014456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	685a      	ldr	r2, [r3, #4]
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	441a      	add	r2, r3
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	601a      	str	r2, [r3, #0]
 8014454:	e008      	b.n	8014468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014456:	4b0c      	ldr	r3, [pc, #48]	; (8014488 <prvInsertBlockIntoFreeList+0xb0>)
 8014458:	681a      	ldr	r2, [r3, #0]
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	601a      	str	r2, [r3, #0]
 801445e:	e003      	b.n	8014468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	681a      	ldr	r2, [r3, #0]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014468:	68fa      	ldr	r2, [r7, #12]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	429a      	cmp	r2, r3
 801446e:	d002      	beq.n	8014476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	687a      	ldr	r2, [r7, #4]
 8014474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014476:	bf00      	nop
 8014478:	3714      	adds	r7, #20
 801447a:	46bd      	mov	sp, r7
 801447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014480:	4770      	bx	lr
 8014482:	bf00      	nop
 8014484:	20008f3c 	.word	0x20008f3c
 8014488:	20008f44 	.word	0x20008f44

0801448c <__cvt>:
 801448c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014490:	ec55 4b10 	vmov	r4, r5, d0
 8014494:	2d00      	cmp	r5, #0
 8014496:	460e      	mov	r6, r1
 8014498:	4619      	mov	r1, r3
 801449a:	462b      	mov	r3, r5
 801449c:	bfbb      	ittet	lt
 801449e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80144a2:	461d      	movlt	r5, r3
 80144a4:	2300      	movge	r3, #0
 80144a6:	232d      	movlt	r3, #45	; 0x2d
 80144a8:	700b      	strb	r3, [r1, #0]
 80144aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80144b0:	4691      	mov	r9, r2
 80144b2:	f023 0820 	bic.w	r8, r3, #32
 80144b6:	bfbc      	itt	lt
 80144b8:	4622      	movlt	r2, r4
 80144ba:	4614      	movlt	r4, r2
 80144bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80144c0:	d005      	beq.n	80144ce <__cvt+0x42>
 80144c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80144c6:	d100      	bne.n	80144ca <__cvt+0x3e>
 80144c8:	3601      	adds	r6, #1
 80144ca:	2102      	movs	r1, #2
 80144cc:	e000      	b.n	80144d0 <__cvt+0x44>
 80144ce:	2103      	movs	r1, #3
 80144d0:	ab03      	add	r3, sp, #12
 80144d2:	9301      	str	r3, [sp, #4]
 80144d4:	ab02      	add	r3, sp, #8
 80144d6:	9300      	str	r3, [sp, #0]
 80144d8:	ec45 4b10 	vmov	d0, r4, r5
 80144dc:	4653      	mov	r3, sl
 80144de:	4632      	mov	r2, r6
 80144e0:	f001 f922 	bl	8015728 <_dtoa_r>
 80144e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80144e8:	4607      	mov	r7, r0
 80144ea:	d102      	bne.n	80144f2 <__cvt+0x66>
 80144ec:	f019 0f01 	tst.w	r9, #1
 80144f0:	d022      	beq.n	8014538 <__cvt+0xac>
 80144f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80144f6:	eb07 0906 	add.w	r9, r7, r6
 80144fa:	d110      	bne.n	801451e <__cvt+0x92>
 80144fc:	783b      	ldrb	r3, [r7, #0]
 80144fe:	2b30      	cmp	r3, #48	; 0x30
 8014500:	d10a      	bne.n	8014518 <__cvt+0x8c>
 8014502:	2200      	movs	r2, #0
 8014504:	2300      	movs	r3, #0
 8014506:	4620      	mov	r0, r4
 8014508:	4629      	mov	r1, r5
 801450a:	f7ec fb05 	bl	8000b18 <__aeabi_dcmpeq>
 801450e:	b918      	cbnz	r0, 8014518 <__cvt+0x8c>
 8014510:	f1c6 0601 	rsb	r6, r6, #1
 8014514:	f8ca 6000 	str.w	r6, [sl]
 8014518:	f8da 3000 	ldr.w	r3, [sl]
 801451c:	4499      	add	r9, r3
 801451e:	2200      	movs	r2, #0
 8014520:	2300      	movs	r3, #0
 8014522:	4620      	mov	r0, r4
 8014524:	4629      	mov	r1, r5
 8014526:	f7ec faf7 	bl	8000b18 <__aeabi_dcmpeq>
 801452a:	b108      	cbz	r0, 8014530 <__cvt+0xa4>
 801452c:	f8cd 900c 	str.w	r9, [sp, #12]
 8014530:	2230      	movs	r2, #48	; 0x30
 8014532:	9b03      	ldr	r3, [sp, #12]
 8014534:	454b      	cmp	r3, r9
 8014536:	d307      	bcc.n	8014548 <__cvt+0xbc>
 8014538:	9b03      	ldr	r3, [sp, #12]
 801453a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801453c:	1bdb      	subs	r3, r3, r7
 801453e:	4638      	mov	r0, r7
 8014540:	6013      	str	r3, [r2, #0]
 8014542:	b004      	add	sp, #16
 8014544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014548:	1c59      	adds	r1, r3, #1
 801454a:	9103      	str	r1, [sp, #12]
 801454c:	701a      	strb	r2, [r3, #0]
 801454e:	e7f0      	b.n	8014532 <__cvt+0xa6>

08014550 <__exponent>:
 8014550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014552:	4603      	mov	r3, r0
 8014554:	2900      	cmp	r1, #0
 8014556:	bfb8      	it	lt
 8014558:	4249      	neglt	r1, r1
 801455a:	f803 2b02 	strb.w	r2, [r3], #2
 801455e:	bfb4      	ite	lt
 8014560:	222d      	movlt	r2, #45	; 0x2d
 8014562:	222b      	movge	r2, #43	; 0x2b
 8014564:	2909      	cmp	r1, #9
 8014566:	7042      	strb	r2, [r0, #1]
 8014568:	dd2a      	ble.n	80145c0 <__exponent+0x70>
 801456a:	f10d 0207 	add.w	r2, sp, #7
 801456e:	4617      	mov	r7, r2
 8014570:	260a      	movs	r6, #10
 8014572:	4694      	mov	ip, r2
 8014574:	fb91 f5f6 	sdiv	r5, r1, r6
 8014578:	fb06 1415 	mls	r4, r6, r5, r1
 801457c:	3430      	adds	r4, #48	; 0x30
 801457e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014582:	460c      	mov	r4, r1
 8014584:	2c63      	cmp	r4, #99	; 0x63
 8014586:	f102 32ff 	add.w	r2, r2, #4294967295
 801458a:	4629      	mov	r1, r5
 801458c:	dcf1      	bgt.n	8014572 <__exponent+0x22>
 801458e:	3130      	adds	r1, #48	; 0x30
 8014590:	f1ac 0402 	sub.w	r4, ip, #2
 8014594:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014598:	1c41      	adds	r1, r0, #1
 801459a:	4622      	mov	r2, r4
 801459c:	42ba      	cmp	r2, r7
 801459e:	d30a      	bcc.n	80145b6 <__exponent+0x66>
 80145a0:	f10d 0209 	add.w	r2, sp, #9
 80145a4:	eba2 020c 	sub.w	r2, r2, ip
 80145a8:	42bc      	cmp	r4, r7
 80145aa:	bf88      	it	hi
 80145ac:	2200      	movhi	r2, #0
 80145ae:	4413      	add	r3, r2
 80145b0:	1a18      	subs	r0, r3, r0
 80145b2:	b003      	add	sp, #12
 80145b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80145ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80145be:	e7ed      	b.n	801459c <__exponent+0x4c>
 80145c0:	2330      	movs	r3, #48	; 0x30
 80145c2:	3130      	adds	r1, #48	; 0x30
 80145c4:	7083      	strb	r3, [r0, #2]
 80145c6:	70c1      	strb	r1, [r0, #3]
 80145c8:	1d03      	adds	r3, r0, #4
 80145ca:	e7f1      	b.n	80145b0 <__exponent+0x60>

080145cc <_printf_float>:
 80145cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d0:	ed2d 8b02 	vpush	{d8}
 80145d4:	b08d      	sub	sp, #52	; 0x34
 80145d6:	460c      	mov	r4, r1
 80145d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80145dc:	4616      	mov	r6, r2
 80145de:	461f      	mov	r7, r3
 80145e0:	4605      	mov	r5, r0
 80145e2:	f000 ff37 	bl	8015454 <_localeconv_r>
 80145e6:	f8d0 a000 	ldr.w	sl, [r0]
 80145ea:	4650      	mov	r0, sl
 80145ec:	f7eb fe68 	bl	80002c0 <strlen>
 80145f0:	2300      	movs	r3, #0
 80145f2:	930a      	str	r3, [sp, #40]	; 0x28
 80145f4:	6823      	ldr	r3, [r4, #0]
 80145f6:	9305      	str	r3, [sp, #20]
 80145f8:	f8d8 3000 	ldr.w	r3, [r8]
 80145fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014600:	3307      	adds	r3, #7
 8014602:	f023 0307 	bic.w	r3, r3, #7
 8014606:	f103 0208 	add.w	r2, r3, #8
 801460a:	f8c8 2000 	str.w	r2, [r8]
 801460e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014612:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014616:	9307      	str	r3, [sp, #28]
 8014618:	f8cd 8018 	str.w	r8, [sp, #24]
 801461c:	ee08 0a10 	vmov	s16, r0
 8014620:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8014624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014628:	4b9e      	ldr	r3, [pc, #632]	; (80148a4 <_printf_float+0x2d8>)
 801462a:	f04f 32ff 	mov.w	r2, #4294967295
 801462e:	f7ec faa5 	bl	8000b7c <__aeabi_dcmpun>
 8014632:	bb88      	cbnz	r0, 8014698 <_printf_float+0xcc>
 8014634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014638:	4b9a      	ldr	r3, [pc, #616]	; (80148a4 <_printf_float+0x2d8>)
 801463a:	f04f 32ff 	mov.w	r2, #4294967295
 801463e:	f7ec fa7f 	bl	8000b40 <__aeabi_dcmple>
 8014642:	bb48      	cbnz	r0, 8014698 <_printf_float+0xcc>
 8014644:	2200      	movs	r2, #0
 8014646:	2300      	movs	r3, #0
 8014648:	4640      	mov	r0, r8
 801464a:	4649      	mov	r1, r9
 801464c:	f7ec fa6e 	bl	8000b2c <__aeabi_dcmplt>
 8014650:	b110      	cbz	r0, 8014658 <_printf_float+0x8c>
 8014652:	232d      	movs	r3, #45	; 0x2d
 8014654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014658:	4a93      	ldr	r2, [pc, #588]	; (80148a8 <_printf_float+0x2dc>)
 801465a:	4b94      	ldr	r3, [pc, #592]	; (80148ac <_printf_float+0x2e0>)
 801465c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014660:	bf94      	ite	ls
 8014662:	4690      	movls	r8, r2
 8014664:	4698      	movhi	r8, r3
 8014666:	2303      	movs	r3, #3
 8014668:	6123      	str	r3, [r4, #16]
 801466a:	9b05      	ldr	r3, [sp, #20]
 801466c:	f023 0304 	bic.w	r3, r3, #4
 8014670:	6023      	str	r3, [r4, #0]
 8014672:	f04f 0900 	mov.w	r9, #0
 8014676:	9700      	str	r7, [sp, #0]
 8014678:	4633      	mov	r3, r6
 801467a:	aa0b      	add	r2, sp, #44	; 0x2c
 801467c:	4621      	mov	r1, r4
 801467e:	4628      	mov	r0, r5
 8014680:	f000 f9da 	bl	8014a38 <_printf_common>
 8014684:	3001      	adds	r0, #1
 8014686:	f040 8090 	bne.w	80147aa <_printf_float+0x1de>
 801468a:	f04f 30ff 	mov.w	r0, #4294967295
 801468e:	b00d      	add	sp, #52	; 0x34
 8014690:	ecbd 8b02 	vpop	{d8}
 8014694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014698:	4642      	mov	r2, r8
 801469a:	464b      	mov	r3, r9
 801469c:	4640      	mov	r0, r8
 801469e:	4649      	mov	r1, r9
 80146a0:	f7ec fa6c 	bl	8000b7c <__aeabi_dcmpun>
 80146a4:	b140      	cbz	r0, 80146b8 <_printf_float+0xec>
 80146a6:	464b      	mov	r3, r9
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	bfbc      	itt	lt
 80146ac:	232d      	movlt	r3, #45	; 0x2d
 80146ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80146b2:	4a7f      	ldr	r2, [pc, #508]	; (80148b0 <_printf_float+0x2e4>)
 80146b4:	4b7f      	ldr	r3, [pc, #508]	; (80148b4 <_printf_float+0x2e8>)
 80146b6:	e7d1      	b.n	801465c <_printf_float+0x90>
 80146b8:	6863      	ldr	r3, [r4, #4]
 80146ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80146be:	9206      	str	r2, [sp, #24]
 80146c0:	1c5a      	adds	r2, r3, #1
 80146c2:	d13f      	bne.n	8014744 <_printf_float+0x178>
 80146c4:	2306      	movs	r3, #6
 80146c6:	6063      	str	r3, [r4, #4]
 80146c8:	9b05      	ldr	r3, [sp, #20]
 80146ca:	6861      	ldr	r1, [r4, #4]
 80146cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80146d0:	2300      	movs	r3, #0
 80146d2:	9303      	str	r3, [sp, #12]
 80146d4:	ab0a      	add	r3, sp, #40	; 0x28
 80146d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80146da:	ab09      	add	r3, sp, #36	; 0x24
 80146dc:	ec49 8b10 	vmov	d0, r8, r9
 80146e0:	9300      	str	r3, [sp, #0]
 80146e2:	6022      	str	r2, [r4, #0]
 80146e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80146e8:	4628      	mov	r0, r5
 80146ea:	f7ff fecf 	bl	801448c <__cvt>
 80146ee:	9b06      	ldr	r3, [sp, #24]
 80146f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146f2:	2b47      	cmp	r3, #71	; 0x47
 80146f4:	4680      	mov	r8, r0
 80146f6:	d108      	bne.n	801470a <_printf_float+0x13e>
 80146f8:	1cc8      	adds	r0, r1, #3
 80146fa:	db02      	blt.n	8014702 <_printf_float+0x136>
 80146fc:	6863      	ldr	r3, [r4, #4]
 80146fe:	4299      	cmp	r1, r3
 8014700:	dd41      	ble.n	8014786 <_printf_float+0x1ba>
 8014702:	f1ab 0302 	sub.w	r3, fp, #2
 8014706:	fa5f fb83 	uxtb.w	fp, r3
 801470a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801470e:	d820      	bhi.n	8014752 <_printf_float+0x186>
 8014710:	3901      	subs	r1, #1
 8014712:	465a      	mov	r2, fp
 8014714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014718:	9109      	str	r1, [sp, #36]	; 0x24
 801471a:	f7ff ff19 	bl	8014550 <__exponent>
 801471e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014720:	1813      	adds	r3, r2, r0
 8014722:	2a01      	cmp	r2, #1
 8014724:	4681      	mov	r9, r0
 8014726:	6123      	str	r3, [r4, #16]
 8014728:	dc02      	bgt.n	8014730 <_printf_float+0x164>
 801472a:	6822      	ldr	r2, [r4, #0]
 801472c:	07d2      	lsls	r2, r2, #31
 801472e:	d501      	bpl.n	8014734 <_printf_float+0x168>
 8014730:	3301      	adds	r3, #1
 8014732:	6123      	str	r3, [r4, #16]
 8014734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014738:	2b00      	cmp	r3, #0
 801473a:	d09c      	beq.n	8014676 <_printf_float+0xaa>
 801473c:	232d      	movs	r3, #45	; 0x2d
 801473e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014742:	e798      	b.n	8014676 <_printf_float+0xaa>
 8014744:	9a06      	ldr	r2, [sp, #24]
 8014746:	2a47      	cmp	r2, #71	; 0x47
 8014748:	d1be      	bne.n	80146c8 <_printf_float+0xfc>
 801474a:	2b00      	cmp	r3, #0
 801474c:	d1bc      	bne.n	80146c8 <_printf_float+0xfc>
 801474e:	2301      	movs	r3, #1
 8014750:	e7b9      	b.n	80146c6 <_printf_float+0xfa>
 8014752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014756:	d118      	bne.n	801478a <_printf_float+0x1be>
 8014758:	2900      	cmp	r1, #0
 801475a:	6863      	ldr	r3, [r4, #4]
 801475c:	dd0b      	ble.n	8014776 <_printf_float+0x1aa>
 801475e:	6121      	str	r1, [r4, #16]
 8014760:	b913      	cbnz	r3, 8014768 <_printf_float+0x19c>
 8014762:	6822      	ldr	r2, [r4, #0]
 8014764:	07d0      	lsls	r0, r2, #31
 8014766:	d502      	bpl.n	801476e <_printf_float+0x1a2>
 8014768:	3301      	adds	r3, #1
 801476a:	440b      	add	r3, r1
 801476c:	6123      	str	r3, [r4, #16]
 801476e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014770:	f04f 0900 	mov.w	r9, #0
 8014774:	e7de      	b.n	8014734 <_printf_float+0x168>
 8014776:	b913      	cbnz	r3, 801477e <_printf_float+0x1b2>
 8014778:	6822      	ldr	r2, [r4, #0]
 801477a:	07d2      	lsls	r2, r2, #31
 801477c:	d501      	bpl.n	8014782 <_printf_float+0x1b6>
 801477e:	3302      	adds	r3, #2
 8014780:	e7f4      	b.n	801476c <_printf_float+0x1a0>
 8014782:	2301      	movs	r3, #1
 8014784:	e7f2      	b.n	801476c <_printf_float+0x1a0>
 8014786:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801478a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801478c:	4299      	cmp	r1, r3
 801478e:	db05      	blt.n	801479c <_printf_float+0x1d0>
 8014790:	6823      	ldr	r3, [r4, #0]
 8014792:	6121      	str	r1, [r4, #16]
 8014794:	07d8      	lsls	r0, r3, #31
 8014796:	d5ea      	bpl.n	801476e <_printf_float+0x1a2>
 8014798:	1c4b      	adds	r3, r1, #1
 801479a:	e7e7      	b.n	801476c <_printf_float+0x1a0>
 801479c:	2900      	cmp	r1, #0
 801479e:	bfd4      	ite	le
 80147a0:	f1c1 0202 	rsble	r2, r1, #2
 80147a4:	2201      	movgt	r2, #1
 80147a6:	4413      	add	r3, r2
 80147a8:	e7e0      	b.n	801476c <_printf_float+0x1a0>
 80147aa:	6823      	ldr	r3, [r4, #0]
 80147ac:	055a      	lsls	r2, r3, #21
 80147ae:	d407      	bmi.n	80147c0 <_printf_float+0x1f4>
 80147b0:	6923      	ldr	r3, [r4, #16]
 80147b2:	4642      	mov	r2, r8
 80147b4:	4631      	mov	r1, r6
 80147b6:	4628      	mov	r0, r5
 80147b8:	47b8      	blx	r7
 80147ba:	3001      	adds	r0, #1
 80147bc:	d12c      	bne.n	8014818 <_printf_float+0x24c>
 80147be:	e764      	b.n	801468a <_printf_float+0xbe>
 80147c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80147c4:	f240 80e0 	bls.w	8014988 <_printf_float+0x3bc>
 80147c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80147cc:	2200      	movs	r2, #0
 80147ce:	2300      	movs	r3, #0
 80147d0:	f7ec f9a2 	bl	8000b18 <__aeabi_dcmpeq>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	d034      	beq.n	8014842 <_printf_float+0x276>
 80147d8:	4a37      	ldr	r2, [pc, #220]	; (80148b8 <_printf_float+0x2ec>)
 80147da:	2301      	movs	r3, #1
 80147dc:	4631      	mov	r1, r6
 80147de:	4628      	mov	r0, r5
 80147e0:	47b8      	blx	r7
 80147e2:	3001      	adds	r0, #1
 80147e4:	f43f af51 	beq.w	801468a <_printf_float+0xbe>
 80147e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80147ec:	429a      	cmp	r2, r3
 80147ee:	db02      	blt.n	80147f6 <_printf_float+0x22a>
 80147f0:	6823      	ldr	r3, [r4, #0]
 80147f2:	07d8      	lsls	r0, r3, #31
 80147f4:	d510      	bpl.n	8014818 <_printf_float+0x24c>
 80147f6:	ee18 3a10 	vmov	r3, s16
 80147fa:	4652      	mov	r2, sl
 80147fc:	4631      	mov	r1, r6
 80147fe:	4628      	mov	r0, r5
 8014800:	47b8      	blx	r7
 8014802:	3001      	adds	r0, #1
 8014804:	f43f af41 	beq.w	801468a <_printf_float+0xbe>
 8014808:	f04f 0800 	mov.w	r8, #0
 801480c:	f104 091a 	add.w	r9, r4, #26
 8014810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014812:	3b01      	subs	r3, #1
 8014814:	4543      	cmp	r3, r8
 8014816:	dc09      	bgt.n	801482c <_printf_float+0x260>
 8014818:	6823      	ldr	r3, [r4, #0]
 801481a:	079b      	lsls	r3, r3, #30
 801481c:	f100 8107 	bmi.w	8014a2e <_printf_float+0x462>
 8014820:	68e0      	ldr	r0, [r4, #12]
 8014822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014824:	4298      	cmp	r0, r3
 8014826:	bfb8      	it	lt
 8014828:	4618      	movlt	r0, r3
 801482a:	e730      	b.n	801468e <_printf_float+0xc2>
 801482c:	2301      	movs	r3, #1
 801482e:	464a      	mov	r2, r9
 8014830:	4631      	mov	r1, r6
 8014832:	4628      	mov	r0, r5
 8014834:	47b8      	blx	r7
 8014836:	3001      	adds	r0, #1
 8014838:	f43f af27 	beq.w	801468a <_printf_float+0xbe>
 801483c:	f108 0801 	add.w	r8, r8, #1
 8014840:	e7e6      	b.n	8014810 <_printf_float+0x244>
 8014842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014844:	2b00      	cmp	r3, #0
 8014846:	dc39      	bgt.n	80148bc <_printf_float+0x2f0>
 8014848:	4a1b      	ldr	r2, [pc, #108]	; (80148b8 <_printf_float+0x2ec>)
 801484a:	2301      	movs	r3, #1
 801484c:	4631      	mov	r1, r6
 801484e:	4628      	mov	r0, r5
 8014850:	47b8      	blx	r7
 8014852:	3001      	adds	r0, #1
 8014854:	f43f af19 	beq.w	801468a <_printf_float+0xbe>
 8014858:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801485c:	4313      	orrs	r3, r2
 801485e:	d102      	bne.n	8014866 <_printf_float+0x29a>
 8014860:	6823      	ldr	r3, [r4, #0]
 8014862:	07d9      	lsls	r1, r3, #31
 8014864:	d5d8      	bpl.n	8014818 <_printf_float+0x24c>
 8014866:	ee18 3a10 	vmov	r3, s16
 801486a:	4652      	mov	r2, sl
 801486c:	4631      	mov	r1, r6
 801486e:	4628      	mov	r0, r5
 8014870:	47b8      	blx	r7
 8014872:	3001      	adds	r0, #1
 8014874:	f43f af09 	beq.w	801468a <_printf_float+0xbe>
 8014878:	f04f 0900 	mov.w	r9, #0
 801487c:	f104 0a1a 	add.w	sl, r4, #26
 8014880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014882:	425b      	negs	r3, r3
 8014884:	454b      	cmp	r3, r9
 8014886:	dc01      	bgt.n	801488c <_printf_float+0x2c0>
 8014888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801488a:	e792      	b.n	80147b2 <_printf_float+0x1e6>
 801488c:	2301      	movs	r3, #1
 801488e:	4652      	mov	r2, sl
 8014890:	4631      	mov	r1, r6
 8014892:	4628      	mov	r0, r5
 8014894:	47b8      	blx	r7
 8014896:	3001      	adds	r0, #1
 8014898:	f43f aef7 	beq.w	801468a <_printf_float+0xbe>
 801489c:	f109 0901 	add.w	r9, r9, #1
 80148a0:	e7ee      	b.n	8014880 <_printf_float+0x2b4>
 80148a2:	bf00      	nop
 80148a4:	7fefffff 	.word	0x7fefffff
 80148a8:	0801c038 	.word	0x0801c038
 80148ac:	0801c03c 	.word	0x0801c03c
 80148b0:	0801c040 	.word	0x0801c040
 80148b4:	0801c044 	.word	0x0801c044
 80148b8:	0801c3d0 	.word	0x0801c3d0
 80148bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80148c0:	429a      	cmp	r2, r3
 80148c2:	bfa8      	it	ge
 80148c4:	461a      	movge	r2, r3
 80148c6:	2a00      	cmp	r2, #0
 80148c8:	4691      	mov	r9, r2
 80148ca:	dc37      	bgt.n	801493c <_printf_float+0x370>
 80148cc:	f04f 0b00 	mov.w	fp, #0
 80148d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80148d4:	f104 021a 	add.w	r2, r4, #26
 80148d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80148da:	9305      	str	r3, [sp, #20]
 80148dc:	eba3 0309 	sub.w	r3, r3, r9
 80148e0:	455b      	cmp	r3, fp
 80148e2:	dc33      	bgt.n	801494c <_printf_float+0x380>
 80148e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80148e8:	429a      	cmp	r2, r3
 80148ea:	db3b      	blt.n	8014964 <_printf_float+0x398>
 80148ec:	6823      	ldr	r3, [r4, #0]
 80148ee:	07da      	lsls	r2, r3, #31
 80148f0:	d438      	bmi.n	8014964 <_printf_float+0x398>
 80148f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80148f6:	eba2 0903 	sub.w	r9, r2, r3
 80148fa:	9b05      	ldr	r3, [sp, #20]
 80148fc:	1ad2      	subs	r2, r2, r3
 80148fe:	4591      	cmp	r9, r2
 8014900:	bfa8      	it	ge
 8014902:	4691      	movge	r9, r2
 8014904:	f1b9 0f00 	cmp.w	r9, #0
 8014908:	dc35      	bgt.n	8014976 <_printf_float+0x3aa>
 801490a:	f04f 0800 	mov.w	r8, #0
 801490e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014912:	f104 0a1a 	add.w	sl, r4, #26
 8014916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801491a:	1a9b      	subs	r3, r3, r2
 801491c:	eba3 0309 	sub.w	r3, r3, r9
 8014920:	4543      	cmp	r3, r8
 8014922:	f77f af79 	ble.w	8014818 <_printf_float+0x24c>
 8014926:	2301      	movs	r3, #1
 8014928:	4652      	mov	r2, sl
 801492a:	4631      	mov	r1, r6
 801492c:	4628      	mov	r0, r5
 801492e:	47b8      	blx	r7
 8014930:	3001      	adds	r0, #1
 8014932:	f43f aeaa 	beq.w	801468a <_printf_float+0xbe>
 8014936:	f108 0801 	add.w	r8, r8, #1
 801493a:	e7ec      	b.n	8014916 <_printf_float+0x34a>
 801493c:	4613      	mov	r3, r2
 801493e:	4631      	mov	r1, r6
 8014940:	4642      	mov	r2, r8
 8014942:	4628      	mov	r0, r5
 8014944:	47b8      	blx	r7
 8014946:	3001      	adds	r0, #1
 8014948:	d1c0      	bne.n	80148cc <_printf_float+0x300>
 801494a:	e69e      	b.n	801468a <_printf_float+0xbe>
 801494c:	2301      	movs	r3, #1
 801494e:	4631      	mov	r1, r6
 8014950:	4628      	mov	r0, r5
 8014952:	9205      	str	r2, [sp, #20]
 8014954:	47b8      	blx	r7
 8014956:	3001      	adds	r0, #1
 8014958:	f43f ae97 	beq.w	801468a <_printf_float+0xbe>
 801495c:	9a05      	ldr	r2, [sp, #20]
 801495e:	f10b 0b01 	add.w	fp, fp, #1
 8014962:	e7b9      	b.n	80148d8 <_printf_float+0x30c>
 8014964:	ee18 3a10 	vmov	r3, s16
 8014968:	4652      	mov	r2, sl
 801496a:	4631      	mov	r1, r6
 801496c:	4628      	mov	r0, r5
 801496e:	47b8      	blx	r7
 8014970:	3001      	adds	r0, #1
 8014972:	d1be      	bne.n	80148f2 <_printf_float+0x326>
 8014974:	e689      	b.n	801468a <_printf_float+0xbe>
 8014976:	9a05      	ldr	r2, [sp, #20]
 8014978:	464b      	mov	r3, r9
 801497a:	4442      	add	r2, r8
 801497c:	4631      	mov	r1, r6
 801497e:	4628      	mov	r0, r5
 8014980:	47b8      	blx	r7
 8014982:	3001      	adds	r0, #1
 8014984:	d1c1      	bne.n	801490a <_printf_float+0x33e>
 8014986:	e680      	b.n	801468a <_printf_float+0xbe>
 8014988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801498a:	2a01      	cmp	r2, #1
 801498c:	dc01      	bgt.n	8014992 <_printf_float+0x3c6>
 801498e:	07db      	lsls	r3, r3, #31
 8014990:	d53a      	bpl.n	8014a08 <_printf_float+0x43c>
 8014992:	2301      	movs	r3, #1
 8014994:	4642      	mov	r2, r8
 8014996:	4631      	mov	r1, r6
 8014998:	4628      	mov	r0, r5
 801499a:	47b8      	blx	r7
 801499c:	3001      	adds	r0, #1
 801499e:	f43f ae74 	beq.w	801468a <_printf_float+0xbe>
 80149a2:	ee18 3a10 	vmov	r3, s16
 80149a6:	4652      	mov	r2, sl
 80149a8:	4631      	mov	r1, r6
 80149aa:	4628      	mov	r0, r5
 80149ac:	47b8      	blx	r7
 80149ae:	3001      	adds	r0, #1
 80149b0:	f43f ae6b 	beq.w	801468a <_printf_float+0xbe>
 80149b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80149b8:	2200      	movs	r2, #0
 80149ba:	2300      	movs	r3, #0
 80149bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80149c0:	f7ec f8aa 	bl	8000b18 <__aeabi_dcmpeq>
 80149c4:	b9d8      	cbnz	r0, 80149fe <_printf_float+0x432>
 80149c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80149ca:	f108 0201 	add.w	r2, r8, #1
 80149ce:	4631      	mov	r1, r6
 80149d0:	4628      	mov	r0, r5
 80149d2:	47b8      	blx	r7
 80149d4:	3001      	adds	r0, #1
 80149d6:	d10e      	bne.n	80149f6 <_printf_float+0x42a>
 80149d8:	e657      	b.n	801468a <_printf_float+0xbe>
 80149da:	2301      	movs	r3, #1
 80149dc:	4652      	mov	r2, sl
 80149de:	4631      	mov	r1, r6
 80149e0:	4628      	mov	r0, r5
 80149e2:	47b8      	blx	r7
 80149e4:	3001      	adds	r0, #1
 80149e6:	f43f ae50 	beq.w	801468a <_printf_float+0xbe>
 80149ea:	f108 0801 	add.w	r8, r8, #1
 80149ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149f0:	3b01      	subs	r3, #1
 80149f2:	4543      	cmp	r3, r8
 80149f4:	dcf1      	bgt.n	80149da <_printf_float+0x40e>
 80149f6:	464b      	mov	r3, r9
 80149f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80149fc:	e6da      	b.n	80147b4 <_printf_float+0x1e8>
 80149fe:	f04f 0800 	mov.w	r8, #0
 8014a02:	f104 0a1a 	add.w	sl, r4, #26
 8014a06:	e7f2      	b.n	80149ee <_printf_float+0x422>
 8014a08:	2301      	movs	r3, #1
 8014a0a:	4642      	mov	r2, r8
 8014a0c:	e7df      	b.n	80149ce <_printf_float+0x402>
 8014a0e:	2301      	movs	r3, #1
 8014a10:	464a      	mov	r2, r9
 8014a12:	4631      	mov	r1, r6
 8014a14:	4628      	mov	r0, r5
 8014a16:	47b8      	blx	r7
 8014a18:	3001      	adds	r0, #1
 8014a1a:	f43f ae36 	beq.w	801468a <_printf_float+0xbe>
 8014a1e:	f108 0801 	add.w	r8, r8, #1
 8014a22:	68e3      	ldr	r3, [r4, #12]
 8014a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a26:	1a5b      	subs	r3, r3, r1
 8014a28:	4543      	cmp	r3, r8
 8014a2a:	dcf0      	bgt.n	8014a0e <_printf_float+0x442>
 8014a2c:	e6f8      	b.n	8014820 <_printf_float+0x254>
 8014a2e:	f04f 0800 	mov.w	r8, #0
 8014a32:	f104 0919 	add.w	r9, r4, #25
 8014a36:	e7f4      	b.n	8014a22 <_printf_float+0x456>

08014a38 <_printf_common>:
 8014a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a3c:	4616      	mov	r6, r2
 8014a3e:	4699      	mov	r9, r3
 8014a40:	688a      	ldr	r2, [r1, #8]
 8014a42:	690b      	ldr	r3, [r1, #16]
 8014a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	bfb8      	it	lt
 8014a4c:	4613      	movlt	r3, r2
 8014a4e:	6033      	str	r3, [r6, #0]
 8014a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a54:	4607      	mov	r7, r0
 8014a56:	460c      	mov	r4, r1
 8014a58:	b10a      	cbz	r2, 8014a5e <_printf_common+0x26>
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	6033      	str	r3, [r6, #0]
 8014a5e:	6823      	ldr	r3, [r4, #0]
 8014a60:	0699      	lsls	r1, r3, #26
 8014a62:	bf42      	ittt	mi
 8014a64:	6833      	ldrmi	r3, [r6, #0]
 8014a66:	3302      	addmi	r3, #2
 8014a68:	6033      	strmi	r3, [r6, #0]
 8014a6a:	6825      	ldr	r5, [r4, #0]
 8014a6c:	f015 0506 	ands.w	r5, r5, #6
 8014a70:	d106      	bne.n	8014a80 <_printf_common+0x48>
 8014a72:	f104 0a19 	add.w	sl, r4, #25
 8014a76:	68e3      	ldr	r3, [r4, #12]
 8014a78:	6832      	ldr	r2, [r6, #0]
 8014a7a:	1a9b      	subs	r3, r3, r2
 8014a7c:	42ab      	cmp	r3, r5
 8014a7e:	dc26      	bgt.n	8014ace <_printf_common+0x96>
 8014a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014a84:	1e13      	subs	r3, r2, #0
 8014a86:	6822      	ldr	r2, [r4, #0]
 8014a88:	bf18      	it	ne
 8014a8a:	2301      	movne	r3, #1
 8014a8c:	0692      	lsls	r2, r2, #26
 8014a8e:	d42b      	bmi.n	8014ae8 <_printf_common+0xb0>
 8014a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a94:	4649      	mov	r1, r9
 8014a96:	4638      	mov	r0, r7
 8014a98:	47c0      	blx	r8
 8014a9a:	3001      	adds	r0, #1
 8014a9c:	d01e      	beq.n	8014adc <_printf_common+0xa4>
 8014a9e:	6823      	ldr	r3, [r4, #0]
 8014aa0:	6922      	ldr	r2, [r4, #16]
 8014aa2:	f003 0306 	and.w	r3, r3, #6
 8014aa6:	2b04      	cmp	r3, #4
 8014aa8:	bf02      	ittt	eq
 8014aaa:	68e5      	ldreq	r5, [r4, #12]
 8014aac:	6833      	ldreq	r3, [r6, #0]
 8014aae:	1aed      	subeq	r5, r5, r3
 8014ab0:	68a3      	ldr	r3, [r4, #8]
 8014ab2:	bf0c      	ite	eq
 8014ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ab8:	2500      	movne	r5, #0
 8014aba:	4293      	cmp	r3, r2
 8014abc:	bfc4      	itt	gt
 8014abe:	1a9b      	subgt	r3, r3, r2
 8014ac0:	18ed      	addgt	r5, r5, r3
 8014ac2:	2600      	movs	r6, #0
 8014ac4:	341a      	adds	r4, #26
 8014ac6:	42b5      	cmp	r5, r6
 8014ac8:	d11a      	bne.n	8014b00 <_printf_common+0xc8>
 8014aca:	2000      	movs	r0, #0
 8014acc:	e008      	b.n	8014ae0 <_printf_common+0xa8>
 8014ace:	2301      	movs	r3, #1
 8014ad0:	4652      	mov	r2, sl
 8014ad2:	4649      	mov	r1, r9
 8014ad4:	4638      	mov	r0, r7
 8014ad6:	47c0      	blx	r8
 8014ad8:	3001      	adds	r0, #1
 8014ada:	d103      	bne.n	8014ae4 <_printf_common+0xac>
 8014adc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ae4:	3501      	adds	r5, #1
 8014ae6:	e7c6      	b.n	8014a76 <_printf_common+0x3e>
 8014ae8:	18e1      	adds	r1, r4, r3
 8014aea:	1c5a      	adds	r2, r3, #1
 8014aec:	2030      	movs	r0, #48	; 0x30
 8014aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014af2:	4422      	add	r2, r4
 8014af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014afc:	3302      	adds	r3, #2
 8014afe:	e7c7      	b.n	8014a90 <_printf_common+0x58>
 8014b00:	2301      	movs	r3, #1
 8014b02:	4622      	mov	r2, r4
 8014b04:	4649      	mov	r1, r9
 8014b06:	4638      	mov	r0, r7
 8014b08:	47c0      	blx	r8
 8014b0a:	3001      	adds	r0, #1
 8014b0c:	d0e6      	beq.n	8014adc <_printf_common+0xa4>
 8014b0e:	3601      	adds	r6, #1
 8014b10:	e7d9      	b.n	8014ac6 <_printf_common+0x8e>
	...

08014b14 <_printf_i>:
 8014b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b18:	7e0f      	ldrb	r7, [r1, #24]
 8014b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014b1c:	2f78      	cmp	r7, #120	; 0x78
 8014b1e:	4691      	mov	r9, r2
 8014b20:	4680      	mov	r8, r0
 8014b22:	460c      	mov	r4, r1
 8014b24:	469a      	mov	sl, r3
 8014b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014b2a:	d807      	bhi.n	8014b3c <_printf_i+0x28>
 8014b2c:	2f62      	cmp	r7, #98	; 0x62
 8014b2e:	d80a      	bhi.n	8014b46 <_printf_i+0x32>
 8014b30:	2f00      	cmp	r7, #0
 8014b32:	f000 80d4 	beq.w	8014cde <_printf_i+0x1ca>
 8014b36:	2f58      	cmp	r7, #88	; 0x58
 8014b38:	f000 80c0 	beq.w	8014cbc <_printf_i+0x1a8>
 8014b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014b44:	e03a      	b.n	8014bbc <_printf_i+0xa8>
 8014b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014b4a:	2b15      	cmp	r3, #21
 8014b4c:	d8f6      	bhi.n	8014b3c <_printf_i+0x28>
 8014b4e:	a101      	add	r1, pc, #4	; (adr r1, 8014b54 <_printf_i+0x40>)
 8014b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014b54:	08014bad 	.word	0x08014bad
 8014b58:	08014bc1 	.word	0x08014bc1
 8014b5c:	08014b3d 	.word	0x08014b3d
 8014b60:	08014b3d 	.word	0x08014b3d
 8014b64:	08014b3d 	.word	0x08014b3d
 8014b68:	08014b3d 	.word	0x08014b3d
 8014b6c:	08014bc1 	.word	0x08014bc1
 8014b70:	08014b3d 	.word	0x08014b3d
 8014b74:	08014b3d 	.word	0x08014b3d
 8014b78:	08014b3d 	.word	0x08014b3d
 8014b7c:	08014b3d 	.word	0x08014b3d
 8014b80:	08014cc5 	.word	0x08014cc5
 8014b84:	08014bed 	.word	0x08014bed
 8014b88:	08014c7f 	.word	0x08014c7f
 8014b8c:	08014b3d 	.word	0x08014b3d
 8014b90:	08014b3d 	.word	0x08014b3d
 8014b94:	08014ce7 	.word	0x08014ce7
 8014b98:	08014b3d 	.word	0x08014b3d
 8014b9c:	08014bed 	.word	0x08014bed
 8014ba0:	08014b3d 	.word	0x08014b3d
 8014ba4:	08014b3d 	.word	0x08014b3d
 8014ba8:	08014c87 	.word	0x08014c87
 8014bac:	682b      	ldr	r3, [r5, #0]
 8014bae:	1d1a      	adds	r2, r3, #4
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	602a      	str	r2, [r5, #0]
 8014bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	e09f      	b.n	8014d00 <_printf_i+0x1ec>
 8014bc0:	6820      	ldr	r0, [r4, #0]
 8014bc2:	682b      	ldr	r3, [r5, #0]
 8014bc4:	0607      	lsls	r7, r0, #24
 8014bc6:	f103 0104 	add.w	r1, r3, #4
 8014bca:	6029      	str	r1, [r5, #0]
 8014bcc:	d501      	bpl.n	8014bd2 <_printf_i+0xbe>
 8014bce:	681e      	ldr	r6, [r3, #0]
 8014bd0:	e003      	b.n	8014bda <_printf_i+0xc6>
 8014bd2:	0646      	lsls	r6, r0, #25
 8014bd4:	d5fb      	bpl.n	8014bce <_printf_i+0xba>
 8014bd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014bda:	2e00      	cmp	r6, #0
 8014bdc:	da03      	bge.n	8014be6 <_printf_i+0xd2>
 8014bde:	232d      	movs	r3, #45	; 0x2d
 8014be0:	4276      	negs	r6, r6
 8014be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014be6:	485a      	ldr	r0, [pc, #360]	; (8014d50 <_printf_i+0x23c>)
 8014be8:	230a      	movs	r3, #10
 8014bea:	e012      	b.n	8014c12 <_printf_i+0xfe>
 8014bec:	682b      	ldr	r3, [r5, #0]
 8014bee:	6820      	ldr	r0, [r4, #0]
 8014bf0:	1d19      	adds	r1, r3, #4
 8014bf2:	6029      	str	r1, [r5, #0]
 8014bf4:	0605      	lsls	r5, r0, #24
 8014bf6:	d501      	bpl.n	8014bfc <_printf_i+0xe8>
 8014bf8:	681e      	ldr	r6, [r3, #0]
 8014bfa:	e002      	b.n	8014c02 <_printf_i+0xee>
 8014bfc:	0641      	lsls	r1, r0, #25
 8014bfe:	d5fb      	bpl.n	8014bf8 <_printf_i+0xe4>
 8014c00:	881e      	ldrh	r6, [r3, #0]
 8014c02:	4853      	ldr	r0, [pc, #332]	; (8014d50 <_printf_i+0x23c>)
 8014c04:	2f6f      	cmp	r7, #111	; 0x6f
 8014c06:	bf0c      	ite	eq
 8014c08:	2308      	moveq	r3, #8
 8014c0a:	230a      	movne	r3, #10
 8014c0c:	2100      	movs	r1, #0
 8014c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014c12:	6865      	ldr	r5, [r4, #4]
 8014c14:	60a5      	str	r5, [r4, #8]
 8014c16:	2d00      	cmp	r5, #0
 8014c18:	bfa2      	ittt	ge
 8014c1a:	6821      	ldrge	r1, [r4, #0]
 8014c1c:	f021 0104 	bicge.w	r1, r1, #4
 8014c20:	6021      	strge	r1, [r4, #0]
 8014c22:	b90e      	cbnz	r6, 8014c28 <_printf_i+0x114>
 8014c24:	2d00      	cmp	r5, #0
 8014c26:	d04b      	beq.n	8014cc0 <_printf_i+0x1ac>
 8014c28:	4615      	mov	r5, r2
 8014c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8014c32:	5dc7      	ldrb	r7, [r0, r7]
 8014c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014c38:	4637      	mov	r7, r6
 8014c3a:	42bb      	cmp	r3, r7
 8014c3c:	460e      	mov	r6, r1
 8014c3e:	d9f4      	bls.n	8014c2a <_printf_i+0x116>
 8014c40:	2b08      	cmp	r3, #8
 8014c42:	d10b      	bne.n	8014c5c <_printf_i+0x148>
 8014c44:	6823      	ldr	r3, [r4, #0]
 8014c46:	07de      	lsls	r6, r3, #31
 8014c48:	d508      	bpl.n	8014c5c <_printf_i+0x148>
 8014c4a:	6923      	ldr	r3, [r4, #16]
 8014c4c:	6861      	ldr	r1, [r4, #4]
 8014c4e:	4299      	cmp	r1, r3
 8014c50:	bfde      	ittt	le
 8014c52:	2330      	movle	r3, #48	; 0x30
 8014c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014c5c:	1b52      	subs	r2, r2, r5
 8014c5e:	6122      	str	r2, [r4, #16]
 8014c60:	f8cd a000 	str.w	sl, [sp]
 8014c64:	464b      	mov	r3, r9
 8014c66:	aa03      	add	r2, sp, #12
 8014c68:	4621      	mov	r1, r4
 8014c6a:	4640      	mov	r0, r8
 8014c6c:	f7ff fee4 	bl	8014a38 <_printf_common>
 8014c70:	3001      	adds	r0, #1
 8014c72:	d14a      	bne.n	8014d0a <_printf_i+0x1f6>
 8014c74:	f04f 30ff 	mov.w	r0, #4294967295
 8014c78:	b004      	add	sp, #16
 8014c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c7e:	6823      	ldr	r3, [r4, #0]
 8014c80:	f043 0320 	orr.w	r3, r3, #32
 8014c84:	6023      	str	r3, [r4, #0]
 8014c86:	4833      	ldr	r0, [pc, #204]	; (8014d54 <_printf_i+0x240>)
 8014c88:	2778      	movs	r7, #120	; 0x78
 8014c8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014c8e:	6823      	ldr	r3, [r4, #0]
 8014c90:	6829      	ldr	r1, [r5, #0]
 8014c92:	061f      	lsls	r7, r3, #24
 8014c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8014c98:	d402      	bmi.n	8014ca0 <_printf_i+0x18c>
 8014c9a:	065f      	lsls	r7, r3, #25
 8014c9c:	bf48      	it	mi
 8014c9e:	b2b6      	uxthmi	r6, r6
 8014ca0:	07df      	lsls	r7, r3, #31
 8014ca2:	bf48      	it	mi
 8014ca4:	f043 0320 	orrmi.w	r3, r3, #32
 8014ca8:	6029      	str	r1, [r5, #0]
 8014caa:	bf48      	it	mi
 8014cac:	6023      	strmi	r3, [r4, #0]
 8014cae:	b91e      	cbnz	r6, 8014cb8 <_printf_i+0x1a4>
 8014cb0:	6823      	ldr	r3, [r4, #0]
 8014cb2:	f023 0320 	bic.w	r3, r3, #32
 8014cb6:	6023      	str	r3, [r4, #0]
 8014cb8:	2310      	movs	r3, #16
 8014cba:	e7a7      	b.n	8014c0c <_printf_i+0xf8>
 8014cbc:	4824      	ldr	r0, [pc, #144]	; (8014d50 <_printf_i+0x23c>)
 8014cbe:	e7e4      	b.n	8014c8a <_printf_i+0x176>
 8014cc0:	4615      	mov	r5, r2
 8014cc2:	e7bd      	b.n	8014c40 <_printf_i+0x12c>
 8014cc4:	682b      	ldr	r3, [r5, #0]
 8014cc6:	6826      	ldr	r6, [r4, #0]
 8014cc8:	6961      	ldr	r1, [r4, #20]
 8014cca:	1d18      	adds	r0, r3, #4
 8014ccc:	6028      	str	r0, [r5, #0]
 8014cce:	0635      	lsls	r5, r6, #24
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	d501      	bpl.n	8014cd8 <_printf_i+0x1c4>
 8014cd4:	6019      	str	r1, [r3, #0]
 8014cd6:	e002      	b.n	8014cde <_printf_i+0x1ca>
 8014cd8:	0670      	lsls	r0, r6, #25
 8014cda:	d5fb      	bpl.n	8014cd4 <_printf_i+0x1c0>
 8014cdc:	8019      	strh	r1, [r3, #0]
 8014cde:	2300      	movs	r3, #0
 8014ce0:	6123      	str	r3, [r4, #16]
 8014ce2:	4615      	mov	r5, r2
 8014ce4:	e7bc      	b.n	8014c60 <_printf_i+0x14c>
 8014ce6:	682b      	ldr	r3, [r5, #0]
 8014ce8:	1d1a      	adds	r2, r3, #4
 8014cea:	602a      	str	r2, [r5, #0]
 8014cec:	681d      	ldr	r5, [r3, #0]
 8014cee:	6862      	ldr	r2, [r4, #4]
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	f7eb fa94 	bl	8000220 <memchr>
 8014cf8:	b108      	cbz	r0, 8014cfe <_printf_i+0x1ea>
 8014cfa:	1b40      	subs	r0, r0, r5
 8014cfc:	6060      	str	r0, [r4, #4]
 8014cfe:	6863      	ldr	r3, [r4, #4]
 8014d00:	6123      	str	r3, [r4, #16]
 8014d02:	2300      	movs	r3, #0
 8014d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d08:	e7aa      	b.n	8014c60 <_printf_i+0x14c>
 8014d0a:	6923      	ldr	r3, [r4, #16]
 8014d0c:	462a      	mov	r2, r5
 8014d0e:	4649      	mov	r1, r9
 8014d10:	4640      	mov	r0, r8
 8014d12:	47d0      	blx	sl
 8014d14:	3001      	adds	r0, #1
 8014d16:	d0ad      	beq.n	8014c74 <_printf_i+0x160>
 8014d18:	6823      	ldr	r3, [r4, #0]
 8014d1a:	079b      	lsls	r3, r3, #30
 8014d1c:	d413      	bmi.n	8014d46 <_printf_i+0x232>
 8014d1e:	68e0      	ldr	r0, [r4, #12]
 8014d20:	9b03      	ldr	r3, [sp, #12]
 8014d22:	4298      	cmp	r0, r3
 8014d24:	bfb8      	it	lt
 8014d26:	4618      	movlt	r0, r3
 8014d28:	e7a6      	b.n	8014c78 <_printf_i+0x164>
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	4632      	mov	r2, r6
 8014d2e:	4649      	mov	r1, r9
 8014d30:	4640      	mov	r0, r8
 8014d32:	47d0      	blx	sl
 8014d34:	3001      	adds	r0, #1
 8014d36:	d09d      	beq.n	8014c74 <_printf_i+0x160>
 8014d38:	3501      	adds	r5, #1
 8014d3a:	68e3      	ldr	r3, [r4, #12]
 8014d3c:	9903      	ldr	r1, [sp, #12]
 8014d3e:	1a5b      	subs	r3, r3, r1
 8014d40:	42ab      	cmp	r3, r5
 8014d42:	dcf2      	bgt.n	8014d2a <_printf_i+0x216>
 8014d44:	e7eb      	b.n	8014d1e <_printf_i+0x20a>
 8014d46:	2500      	movs	r5, #0
 8014d48:	f104 0619 	add.w	r6, r4, #25
 8014d4c:	e7f5      	b.n	8014d3a <_printf_i+0x226>
 8014d4e:	bf00      	nop
 8014d50:	0801c048 	.word	0x0801c048
 8014d54:	0801c059 	.word	0x0801c059

08014d58 <_scanf_float>:
 8014d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5c:	b087      	sub	sp, #28
 8014d5e:	4617      	mov	r7, r2
 8014d60:	9303      	str	r3, [sp, #12]
 8014d62:	688b      	ldr	r3, [r1, #8]
 8014d64:	1e5a      	subs	r2, r3, #1
 8014d66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014d6a:	bf83      	ittte	hi
 8014d6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014d70:	195b      	addhi	r3, r3, r5
 8014d72:	9302      	strhi	r3, [sp, #8]
 8014d74:	2300      	movls	r3, #0
 8014d76:	bf86      	itte	hi
 8014d78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014d7c:	608b      	strhi	r3, [r1, #8]
 8014d7e:	9302      	strls	r3, [sp, #8]
 8014d80:	680b      	ldr	r3, [r1, #0]
 8014d82:	468b      	mov	fp, r1
 8014d84:	2500      	movs	r5, #0
 8014d86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014d8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8014d8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014d92:	4680      	mov	r8, r0
 8014d94:	460c      	mov	r4, r1
 8014d96:	465e      	mov	r6, fp
 8014d98:	46aa      	mov	sl, r5
 8014d9a:	46a9      	mov	r9, r5
 8014d9c:	9501      	str	r5, [sp, #4]
 8014d9e:	68a2      	ldr	r2, [r4, #8]
 8014da0:	b152      	cbz	r2, 8014db8 <_scanf_float+0x60>
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	2b4e      	cmp	r3, #78	; 0x4e
 8014da8:	d864      	bhi.n	8014e74 <_scanf_float+0x11c>
 8014daa:	2b40      	cmp	r3, #64	; 0x40
 8014dac:	d83c      	bhi.n	8014e28 <_scanf_float+0xd0>
 8014dae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014db2:	b2c8      	uxtb	r0, r1
 8014db4:	280e      	cmp	r0, #14
 8014db6:	d93a      	bls.n	8014e2e <_scanf_float+0xd6>
 8014db8:	f1b9 0f00 	cmp.w	r9, #0
 8014dbc:	d003      	beq.n	8014dc6 <_scanf_float+0x6e>
 8014dbe:	6823      	ldr	r3, [r4, #0]
 8014dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014dca:	f1ba 0f01 	cmp.w	sl, #1
 8014dce:	f200 8113 	bhi.w	8014ff8 <_scanf_float+0x2a0>
 8014dd2:	455e      	cmp	r6, fp
 8014dd4:	f200 8105 	bhi.w	8014fe2 <_scanf_float+0x28a>
 8014dd8:	2501      	movs	r5, #1
 8014dda:	4628      	mov	r0, r5
 8014ddc:	b007      	add	sp, #28
 8014dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014de2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014de6:	2a0d      	cmp	r2, #13
 8014de8:	d8e6      	bhi.n	8014db8 <_scanf_float+0x60>
 8014dea:	a101      	add	r1, pc, #4	; (adr r1, 8014df0 <_scanf_float+0x98>)
 8014dec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014df0:	08014f2f 	.word	0x08014f2f
 8014df4:	08014db9 	.word	0x08014db9
 8014df8:	08014db9 	.word	0x08014db9
 8014dfc:	08014db9 	.word	0x08014db9
 8014e00:	08014f8f 	.word	0x08014f8f
 8014e04:	08014f67 	.word	0x08014f67
 8014e08:	08014db9 	.word	0x08014db9
 8014e0c:	08014db9 	.word	0x08014db9
 8014e10:	08014f3d 	.word	0x08014f3d
 8014e14:	08014db9 	.word	0x08014db9
 8014e18:	08014db9 	.word	0x08014db9
 8014e1c:	08014db9 	.word	0x08014db9
 8014e20:	08014db9 	.word	0x08014db9
 8014e24:	08014ef5 	.word	0x08014ef5
 8014e28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014e2c:	e7db      	b.n	8014de6 <_scanf_float+0x8e>
 8014e2e:	290e      	cmp	r1, #14
 8014e30:	d8c2      	bhi.n	8014db8 <_scanf_float+0x60>
 8014e32:	a001      	add	r0, pc, #4	; (adr r0, 8014e38 <_scanf_float+0xe0>)
 8014e34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014e38:	08014ee7 	.word	0x08014ee7
 8014e3c:	08014db9 	.word	0x08014db9
 8014e40:	08014ee7 	.word	0x08014ee7
 8014e44:	08014f7b 	.word	0x08014f7b
 8014e48:	08014db9 	.word	0x08014db9
 8014e4c:	08014e95 	.word	0x08014e95
 8014e50:	08014ed1 	.word	0x08014ed1
 8014e54:	08014ed1 	.word	0x08014ed1
 8014e58:	08014ed1 	.word	0x08014ed1
 8014e5c:	08014ed1 	.word	0x08014ed1
 8014e60:	08014ed1 	.word	0x08014ed1
 8014e64:	08014ed1 	.word	0x08014ed1
 8014e68:	08014ed1 	.word	0x08014ed1
 8014e6c:	08014ed1 	.word	0x08014ed1
 8014e70:	08014ed1 	.word	0x08014ed1
 8014e74:	2b6e      	cmp	r3, #110	; 0x6e
 8014e76:	d809      	bhi.n	8014e8c <_scanf_float+0x134>
 8014e78:	2b60      	cmp	r3, #96	; 0x60
 8014e7a:	d8b2      	bhi.n	8014de2 <_scanf_float+0x8a>
 8014e7c:	2b54      	cmp	r3, #84	; 0x54
 8014e7e:	d077      	beq.n	8014f70 <_scanf_float+0x218>
 8014e80:	2b59      	cmp	r3, #89	; 0x59
 8014e82:	d199      	bne.n	8014db8 <_scanf_float+0x60>
 8014e84:	2d07      	cmp	r5, #7
 8014e86:	d197      	bne.n	8014db8 <_scanf_float+0x60>
 8014e88:	2508      	movs	r5, #8
 8014e8a:	e029      	b.n	8014ee0 <_scanf_float+0x188>
 8014e8c:	2b74      	cmp	r3, #116	; 0x74
 8014e8e:	d06f      	beq.n	8014f70 <_scanf_float+0x218>
 8014e90:	2b79      	cmp	r3, #121	; 0x79
 8014e92:	e7f6      	b.n	8014e82 <_scanf_float+0x12a>
 8014e94:	6821      	ldr	r1, [r4, #0]
 8014e96:	05c8      	lsls	r0, r1, #23
 8014e98:	d51a      	bpl.n	8014ed0 <_scanf_float+0x178>
 8014e9a:	9b02      	ldr	r3, [sp, #8]
 8014e9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014ea0:	6021      	str	r1, [r4, #0]
 8014ea2:	f109 0901 	add.w	r9, r9, #1
 8014ea6:	b11b      	cbz	r3, 8014eb0 <_scanf_float+0x158>
 8014ea8:	3b01      	subs	r3, #1
 8014eaa:	3201      	adds	r2, #1
 8014eac:	9302      	str	r3, [sp, #8]
 8014eae:	60a2      	str	r2, [r4, #8]
 8014eb0:	68a3      	ldr	r3, [r4, #8]
 8014eb2:	3b01      	subs	r3, #1
 8014eb4:	60a3      	str	r3, [r4, #8]
 8014eb6:	6923      	ldr	r3, [r4, #16]
 8014eb8:	3301      	adds	r3, #1
 8014eba:	6123      	str	r3, [r4, #16]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	3b01      	subs	r3, #1
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	607b      	str	r3, [r7, #4]
 8014ec4:	f340 8084 	ble.w	8014fd0 <_scanf_float+0x278>
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	3301      	adds	r3, #1
 8014ecc:	603b      	str	r3, [r7, #0]
 8014ece:	e766      	b.n	8014d9e <_scanf_float+0x46>
 8014ed0:	eb1a 0f05 	cmn.w	sl, r5
 8014ed4:	f47f af70 	bne.w	8014db8 <_scanf_float+0x60>
 8014ed8:	6822      	ldr	r2, [r4, #0]
 8014eda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014ede:	6022      	str	r2, [r4, #0]
 8014ee0:	f806 3b01 	strb.w	r3, [r6], #1
 8014ee4:	e7e4      	b.n	8014eb0 <_scanf_float+0x158>
 8014ee6:	6822      	ldr	r2, [r4, #0]
 8014ee8:	0610      	lsls	r0, r2, #24
 8014eea:	f57f af65 	bpl.w	8014db8 <_scanf_float+0x60>
 8014eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014ef2:	e7f4      	b.n	8014ede <_scanf_float+0x186>
 8014ef4:	f1ba 0f00 	cmp.w	sl, #0
 8014ef8:	d10e      	bne.n	8014f18 <_scanf_float+0x1c0>
 8014efa:	f1b9 0f00 	cmp.w	r9, #0
 8014efe:	d10e      	bne.n	8014f1e <_scanf_float+0x1c6>
 8014f00:	6822      	ldr	r2, [r4, #0]
 8014f02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014f06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014f0a:	d108      	bne.n	8014f1e <_scanf_float+0x1c6>
 8014f0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f10:	6022      	str	r2, [r4, #0]
 8014f12:	f04f 0a01 	mov.w	sl, #1
 8014f16:	e7e3      	b.n	8014ee0 <_scanf_float+0x188>
 8014f18:	f1ba 0f02 	cmp.w	sl, #2
 8014f1c:	d055      	beq.n	8014fca <_scanf_float+0x272>
 8014f1e:	2d01      	cmp	r5, #1
 8014f20:	d002      	beq.n	8014f28 <_scanf_float+0x1d0>
 8014f22:	2d04      	cmp	r5, #4
 8014f24:	f47f af48 	bne.w	8014db8 <_scanf_float+0x60>
 8014f28:	3501      	adds	r5, #1
 8014f2a:	b2ed      	uxtb	r5, r5
 8014f2c:	e7d8      	b.n	8014ee0 <_scanf_float+0x188>
 8014f2e:	f1ba 0f01 	cmp.w	sl, #1
 8014f32:	f47f af41 	bne.w	8014db8 <_scanf_float+0x60>
 8014f36:	f04f 0a02 	mov.w	sl, #2
 8014f3a:	e7d1      	b.n	8014ee0 <_scanf_float+0x188>
 8014f3c:	b97d      	cbnz	r5, 8014f5e <_scanf_float+0x206>
 8014f3e:	f1b9 0f00 	cmp.w	r9, #0
 8014f42:	f47f af3c 	bne.w	8014dbe <_scanf_float+0x66>
 8014f46:	6822      	ldr	r2, [r4, #0]
 8014f48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014f4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014f50:	f47f af39 	bne.w	8014dc6 <_scanf_float+0x6e>
 8014f54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014f58:	6022      	str	r2, [r4, #0]
 8014f5a:	2501      	movs	r5, #1
 8014f5c:	e7c0      	b.n	8014ee0 <_scanf_float+0x188>
 8014f5e:	2d03      	cmp	r5, #3
 8014f60:	d0e2      	beq.n	8014f28 <_scanf_float+0x1d0>
 8014f62:	2d05      	cmp	r5, #5
 8014f64:	e7de      	b.n	8014f24 <_scanf_float+0x1cc>
 8014f66:	2d02      	cmp	r5, #2
 8014f68:	f47f af26 	bne.w	8014db8 <_scanf_float+0x60>
 8014f6c:	2503      	movs	r5, #3
 8014f6e:	e7b7      	b.n	8014ee0 <_scanf_float+0x188>
 8014f70:	2d06      	cmp	r5, #6
 8014f72:	f47f af21 	bne.w	8014db8 <_scanf_float+0x60>
 8014f76:	2507      	movs	r5, #7
 8014f78:	e7b2      	b.n	8014ee0 <_scanf_float+0x188>
 8014f7a:	6822      	ldr	r2, [r4, #0]
 8014f7c:	0591      	lsls	r1, r2, #22
 8014f7e:	f57f af1b 	bpl.w	8014db8 <_scanf_float+0x60>
 8014f82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014f86:	6022      	str	r2, [r4, #0]
 8014f88:	f8cd 9004 	str.w	r9, [sp, #4]
 8014f8c:	e7a8      	b.n	8014ee0 <_scanf_float+0x188>
 8014f8e:	6822      	ldr	r2, [r4, #0]
 8014f90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014f94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014f98:	d006      	beq.n	8014fa8 <_scanf_float+0x250>
 8014f9a:	0550      	lsls	r0, r2, #21
 8014f9c:	f57f af0c 	bpl.w	8014db8 <_scanf_float+0x60>
 8014fa0:	f1b9 0f00 	cmp.w	r9, #0
 8014fa4:	f43f af0f 	beq.w	8014dc6 <_scanf_float+0x6e>
 8014fa8:	0591      	lsls	r1, r2, #22
 8014faa:	bf58      	it	pl
 8014fac:	9901      	ldrpl	r1, [sp, #4]
 8014fae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014fb2:	bf58      	it	pl
 8014fb4:	eba9 0101 	subpl.w	r1, r9, r1
 8014fb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014fbc:	bf58      	it	pl
 8014fbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014fc2:	6022      	str	r2, [r4, #0]
 8014fc4:	f04f 0900 	mov.w	r9, #0
 8014fc8:	e78a      	b.n	8014ee0 <_scanf_float+0x188>
 8014fca:	f04f 0a03 	mov.w	sl, #3
 8014fce:	e787      	b.n	8014ee0 <_scanf_float+0x188>
 8014fd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014fd4:	4639      	mov	r1, r7
 8014fd6:	4640      	mov	r0, r8
 8014fd8:	4798      	blx	r3
 8014fda:	2800      	cmp	r0, #0
 8014fdc:	f43f aedf 	beq.w	8014d9e <_scanf_float+0x46>
 8014fe0:	e6ea      	b.n	8014db8 <_scanf_float+0x60>
 8014fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014fea:	463a      	mov	r2, r7
 8014fec:	4640      	mov	r0, r8
 8014fee:	4798      	blx	r3
 8014ff0:	6923      	ldr	r3, [r4, #16]
 8014ff2:	3b01      	subs	r3, #1
 8014ff4:	6123      	str	r3, [r4, #16]
 8014ff6:	e6ec      	b.n	8014dd2 <_scanf_float+0x7a>
 8014ff8:	1e6b      	subs	r3, r5, #1
 8014ffa:	2b06      	cmp	r3, #6
 8014ffc:	d825      	bhi.n	801504a <_scanf_float+0x2f2>
 8014ffe:	2d02      	cmp	r5, #2
 8015000:	d836      	bhi.n	8015070 <_scanf_float+0x318>
 8015002:	455e      	cmp	r6, fp
 8015004:	f67f aee8 	bls.w	8014dd8 <_scanf_float+0x80>
 8015008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801500c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015010:	463a      	mov	r2, r7
 8015012:	4640      	mov	r0, r8
 8015014:	4798      	blx	r3
 8015016:	6923      	ldr	r3, [r4, #16]
 8015018:	3b01      	subs	r3, #1
 801501a:	6123      	str	r3, [r4, #16]
 801501c:	e7f1      	b.n	8015002 <_scanf_float+0x2aa>
 801501e:	9802      	ldr	r0, [sp, #8]
 8015020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015024:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015028:	9002      	str	r0, [sp, #8]
 801502a:	463a      	mov	r2, r7
 801502c:	4640      	mov	r0, r8
 801502e:	4798      	blx	r3
 8015030:	6923      	ldr	r3, [r4, #16]
 8015032:	3b01      	subs	r3, #1
 8015034:	6123      	str	r3, [r4, #16]
 8015036:	f10a 3aff 	add.w	sl, sl, #4294967295
 801503a:	fa5f fa8a 	uxtb.w	sl, sl
 801503e:	f1ba 0f02 	cmp.w	sl, #2
 8015042:	d1ec      	bne.n	801501e <_scanf_float+0x2c6>
 8015044:	3d03      	subs	r5, #3
 8015046:	b2ed      	uxtb	r5, r5
 8015048:	1b76      	subs	r6, r6, r5
 801504a:	6823      	ldr	r3, [r4, #0]
 801504c:	05da      	lsls	r2, r3, #23
 801504e:	d52f      	bpl.n	80150b0 <_scanf_float+0x358>
 8015050:	055b      	lsls	r3, r3, #21
 8015052:	d510      	bpl.n	8015076 <_scanf_float+0x31e>
 8015054:	455e      	cmp	r6, fp
 8015056:	f67f aebf 	bls.w	8014dd8 <_scanf_float+0x80>
 801505a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801505e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015062:	463a      	mov	r2, r7
 8015064:	4640      	mov	r0, r8
 8015066:	4798      	blx	r3
 8015068:	6923      	ldr	r3, [r4, #16]
 801506a:	3b01      	subs	r3, #1
 801506c:	6123      	str	r3, [r4, #16]
 801506e:	e7f1      	b.n	8015054 <_scanf_float+0x2fc>
 8015070:	46aa      	mov	sl, r5
 8015072:	9602      	str	r6, [sp, #8]
 8015074:	e7df      	b.n	8015036 <_scanf_float+0x2de>
 8015076:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801507a:	6923      	ldr	r3, [r4, #16]
 801507c:	2965      	cmp	r1, #101	; 0x65
 801507e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015082:	f106 35ff 	add.w	r5, r6, #4294967295
 8015086:	6123      	str	r3, [r4, #16]
 8015088:	d00c      	beq.n	80150a4 <_scanf_float+0x34c>
 801508a:	2945      	cmp	r1, #69	; 0x45
 801508c:	d00a      	beq.n	80150a4 <_scanf_float+0x34c>
 801508e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015092:	463a      	mov	r2, r7
 8015094:	4640      	mov	r0, r8
 8015096:	4798      	blx	r3
 8015098:	6923      	ldr	r3, [r4, #16]
 801509a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801509e:	3b01      	subs	r3, #1
 80150a0:	1eb5      	subs	r5, r6, #2
 80150a2:	6123      	str	r3, [r4, #16]
 80150a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80150a8:	463a      	mov	r2, r7
 80150aa:	4640      	mov	r0, r8
 80150ac:	4798      	blx	r3
 80150ae:	462e      	mov	r6, r5
 80150b0:	6825      	ldr	r5, [r4, #0]
 80150b2:	f015 0510 	ands.w	r5, r5, #16
 80150b6:	d158      	bne.n	801516a <_scanf_float+0x412>
 80150b8:	7035      	strb	r5, [r6, #0]
 80150ba:	6823      	ldr	r3, [r4, #0]
 80150bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80150c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80150c4:	d11c      	bne.n	8015100 <_scanf_float+0x3a8>
 80150c6:	9b01      	ldr	r3, [sp, #4]
 80150c8:	454b      	cmp	r3, r9
 80150ca:	eba3 0209 	sub.w	r2, r3, r9
 80150ce:	d124      	bne.n	801511a <_scanf_float+0x3c2>
 80150d0:	2200      	movs	r2, #0
 80150d2:	4659      	mov	r1, fp
 80150d4:	4640      	mov	r0, r8
 80150d6:	f002 fcd3 	bl	8017a80 <_strtod_r>
 80150da:	9b03      	ldr	r3, [sp, #12]
 80150dc:	6821      	ldr	r1, [r4, #0]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	f011 0f02 	tst.w	r1, #2
 80150e4:	ec57 6b10 	vmov	r6, r7, d0
 80150e8:	f103 0204 	add.w	r2, r3, #4
 80150ec:	d020      	beq.n	8015130 <_scanf_float+0x3d8>
 80150ee:	9903      	ldr	r1, [sp, #12]
 80150f0:	600a      	str	r2, [r1, #0]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	e9c3 6700 	strd	r6, r7, [r3]
 80150f8:	68e3      	ldr	r3, [r4, #12]
 80150fa:	3301      	adds	r3, #1
 80150fc:	60e3      	str	r3, [r4, #12]
 80150fe:	e66c      	b.n	8014dda <_scanf_float+0x82>
 8015100:	9b04      	ldr	r3, [sp, #16]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d0e4      	beq.n	80150d0 <_scanf_float+0x378>
 8015106:	9905      	ldr	r1, [sp, #20]
 8015108:	230a      	movs	r3, #10
 801510a:	462a      	mov	r2, r5
 801510c:	3101      	adds	r1, #1
 801510e:	4640      	mov	r0, r8
 8015110:	f002 fd3e 	bl	8017b90 <_strtol_r>
 8015114:	9b04      	ldr	r3, [sp, #16]
 8015116:	9e05      	ldr	r6, [sp, #20]
 8015118:	1ac2      	subs	r2, r0, r3
 801511a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801511e:	429e      	cmp	r6, r3
 8015120:	bf28      	it	cs
 8015122:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015126:	4912      	ldr	r1, [pc, #72]	; (8015170 <_scanf_float+0x418>)
 8015128:	4630      	mov	r0, r6
 801512a:	f000 f8e7 	bl	80152fc <siprintf>
 801512e:	e7cf      	b.n	80150d0 <_scanf_float+0x378>
 8015130:	f011 0f04 	tst.w	r1, #4
 8015134:	9903      	ldr	r1, [sp, #12]
 8015136:	600a      	str	r2, [r1, #0]
 8015138:	d1db      	bne.n	80150f2 <_scanf_float+0x39a>
 801513a:	f8d3 8000 	ldr.w	r8, [r3]
 801513e:	ee10 2a10 	vmov	r2, s0
 8015142:	ee10 0a10 	vmov	r0, s0
 8015146:	463b      	mov	r3, r7
 8015148:	4639      	mov	r1, r7
 801514a:	f7eb fd17 	bl	8000b7c <__aeabi_dcmpun>
 801514e:	b128      	cbz	r0, 801515c <_scanf_float+0x404>
 8015150:	4808      	ldr	r0, [pc, #32]	; (8015174 <_scanf_float+0x41c>)
 8015152:	f000 fa5b 	bl	801560c <nanf>
 8015156:	ed88 0a00 	vstr	s0, [r8]
 801515a:	e7cd      	b.n	80150f8 <_scanf_float+0x3a0>
 801515c:	4630      	mov	r0, r6
 801515e:	4639      	mov	r1, r7
 8015160:	f7eb fd6a 	bl	8000c38 <__aeabi_d2f>
 8015164:	f8c8 0000 	str.w	r0, [r8]
 8015168:	e7c6      	b.n	80150f8 <_scanf_float+0x3a0>
 801516a:	2500      	movs	r5, #0
 801516c:	e635      	b.n	8014dda <_scanf_float+0x82>
 801516e:	bf00      	nop
 8015170:	0801c06a 	.word	0x0801c06a
 8015174:	0801c418 	.word	0x0801c418

08015178 <std>:
 8015178:	2300      	movs	r3, #0
 801517a:	b510      	push	{r4, lr}
 801517c:	4604      	mov	r4, r0
 801517e:	e9c0 3300 	strd	r3, r3, [r0]
 8015182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015186:	6083      	str	r3, [r0, #8]
 8015188:	8181      	strh	r1, [r0, #12]
 801518a:	6643      	str	r3, [r0, #100]	; 0x64
 801518c:	81c2      	strh	r2, [r0, #14]
 801518e:	6183      	str	r3, [r0, #24]
 8015190:	4619      	mov	r1, r3
 8015192:	2208      	movs	r2, #8
 8015194:	305c      	adds	r0, #92	; 0x5c
 8015196:	f000 f942 	bl	801541e <memset>
 801519a:	4b0d      	ldr	r3, [pc, #52]	; (80151d0 <std+0x58>)
 801519c:	6263      	str	r3, [r4, #36]	; 0x24
 801519e:	4b0d      	ldr	r3, [pc, #52]	; (80151d4 <std+0x5c>)
 80151a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80151a2:	4b0d      	ldr	r3, [pc, #52]	; (80151d8 <std+0x60>)
 80151a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80151a6:	4b0d      	ldr	r3, [pc, #52]	; (80151dc <std+0x64>)
 80151a8:	6323      	str	r3, [r4, #48]	; 0x30
 80151aa:	4b0d      	ldr	r3, [pc, #52]	; (80151e0 <std+0x68>)
 80151ac:	6224      	str	r4, [r4, #32]
 80151ae:	429c      	cmp	r4, r3
 80151b0:	d006      	beq.n	80151c0 <std+0x48>
 80151b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80151b6:	4294      	cmp	r4, r2
 80151b8:	d002      	beq.n	80151c0 <std+0x48>
 80151ba:	33d0      	adds	r3, #208	; 0xd0
 80151bc:	429c      	cmp	r4, r3
 80151be:	d105      	bne.n	80151cc <std+0x54>
 80151c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80151c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151c8:	f000 ba0e 	b.w	80155e8 <__retarget_lock_init_recursive>
 80151cc:	bd10      	pop	{r4, pc}
 80151ce:	bf00      	nop
 80151d0:	08015395 	.word	0x08015395
 80151d4:	080153bb 	.word	0x080153bb
 80151d8:	080153f3 	.word	0x080153f3
 80151dc:	08015417 	.word	0x08015417
 80151e0:	20008f54 	.word	0x20008f54

080151e4 <stdio_exit_handler>:
 80151e4:	4a02      	ldr	r2, [pc, #8]	; (80151f0 <stdio_exit_handler+0xc>)
 80151e6:	4903      	ldr	r1, [pc, #12]	; (80151f4 <stdio_exit_handler+0x10>)
 80151e8:	4803      	ldr	r0, [pc, #12]	; (80151f8 <stdio_exit_handler+0x14>)
 80151ea:	f000 b869 	b.w	80152c0 <_fwalk_sglue>
 80151ee:	bf00      	nop
 80151f0:	20000018 	.word	0x20000018
 80151f4:	08018591 	.word	0x08018591
 80151f8:	20000024 	.word	0x20000024

080151fc <cleanup_stdio>:
 80151fc:	6841      	ldr	r1, [r0, #4]
 80151fe:	4b0c      	ldr	r3, [pc, #48]	; (8015230 <cleanup_stdio+0x34>)
 8015200:	4299      	cmp	r1, r3
 8015202:	b510      	push	{r4, lr}
 8015204:	4604      	mov	r4, r0
 8015206:	d001      	beq.n	801520c <cleanup_stdio+0x10>
 8015208:	f003 f9c2 	bl	8018590 <_fflush_r>
 801520c:	68a1      	ldr	r1, [r4, #8]
 801520e:	4b09      	ldr	r3, [pc, #36]	; (8015234 <cleanup_stdio+0x38>)
 8015210:	4299      	cmp	r1, r3
 8015212:	d002      	beq.n	801521a <cleanup_stdio+0x1e>
 8015214:	4620      	mov	r0, r4
 8015216:	f003 f9bb 	bl	8018590 <_fflush_r>
 801521a:	68e1      	ldr	r1, [r4, #12]
 801521c:	4b06      	ldr	r3, [pc, #24]	; (8015238 <cleanup_stdio+0x3c>)
 801521e:	4299      	cmp	r1, r3
 8015220:	d004      	beq.n	801522c <cleanup_stdio+0x30>
 8015222:	4620      	mov	r0, r4
 8015224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015228:	f003 b9b2 	b.w	8018590 <_fflush_r>
 801522c:	bd10      	pop	{r4, pc}
 801522e:	bf00      	nop
 8015230:	20008f54 	.word	0x20008f54
 8015234:	20008fbc 	.word	0x20008fbc
 8015238:	20009024 	.word	0x20009024

0801523c <global_stdio_init.part.0>:
 801523c:	b510      	push	{r4, lr}
 801523e:	4b0b      	ldr	r3, [pc, #44]	; (801526c <global_stdio_init.part.0+0x30>)
 8015240:	4c0b      	ldr	r4, [pc, #44]	; (8015270 <global_stdio_init.part.0+0x34>)
 8015242:	4a0c      	ldr	r2, [pc, #48]	; (8015274 <global_stdio_init.part.0+0x38>)
 8015244:	601a      	str	r2, [r3, #0]
 8015246:	4620      	mov	r0, r4
 8015248:	2200      	movs	r2, #0
 801524a:	2104      	movs	r1, #4
 801524c:	f7ff ff94 	bl	8015178 <std>
 8015250:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015254:	2201      	movs	r2, #1
 8015256:	2109      	movs	r1, #9
 8015258:	f7ff ff8e 	bl	8015178 <std>
 801525c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015260:	2202      	movs	r2, #2
 8015262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015266:	2112      	movs	r1, #18
 8015268:	f7ff bf86 	b.w	8015178 <std>
 801526c:	2000908c 	.word	0x2000908c
 8015270:	20008f54 	.word	0x20008f54
 8015274:	080151e5 	.word	0x080151e5

08015278 <__sfp_lock_acquire>:
 8015278:	4801      	ldr	r0, [pc, #4]	; (8015280 <__sfp_lock_acquire+0x8>)
 801527a:	f000 b9b6 	b.w	80155ea <__retarget_lock_acquire_recursive>
 801527e:	bf00      	nop
 8015280:	20009095 	.word	0x20009095

08015284 <__sfp_lock_release>:
 8015284:	4801      	ldr	r0, [pc, #4]	; (801528c <__sfp_lock_release+0x8>)
 8015286:	f000 b9b1 	b.w	80155ec <__retarget_lock_release_recursive>
 801528a:	bf00      	nop
 801528c:	20009095 	.word	0x20009095

08015290 <__sinit>:
 8015290:	b510      	push	{r4, lr}
 8015292:	4604      	mov	r4, r0
 8015294:	f7ff fff0 	bl	8015278 <__sfp_lock_acquire>
 8015298:	6a23      	ldr	r3, [r4, #32]
 801529a:	b11b      	cbz	r3, 80152a4 <__sinit+0x14>
 801529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152a0:	f7ff bff0 	b.w	8015284 <__sfp_lock_release>
 80152a4:	4b04      	ldr	r3, [pc, #16]	; (80152b8 <__sinit+0x28>)
 80152a6:	6223      	str	r3, [r4, #32]
 80152a8:	4b04      	ldr	r3, [pc, #16]	; (80152bc <__sinit+0x2c>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d1f5      	bne.n	801529c <__sinit+0xc>
 80152b0:	f7ff ffc4 	bl	801523c <global_stdio_init.part.0>
 80152b4:	e7f2      	b.n	801529c <__sinit+0xc>
 80152b6:	bf00      	nop
 80152b8:	080151fd 	.word	0x080151fd
 80152bc:	2000908c 	.word	0x2000908c

080152c0 <_fwalk_sglue>:
 80152c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152c4:	4607      	mov	r7, r0
 80152c6:	4688      	mov	r8, r1
 80152c8:	4614      	mov	r4, r2
 80152ca:	2600      	movs	r6, #0
 80152cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80152d0:	f1b9 0901 	subs.w	r9, r9, #1
 80152d4:	d505      	bpl.n	80152e2 <_fwalk_sglue+0x22>
 80152d6:	6824      	ldr	r4, [r4, #0]
 80152d8:	2c00      	cmp	r4, #0
 80152da:	d1f7      	bne.n	80152cc <_fwalk_sglue+0xc>
 80152dc:	4630      	mov	r0, r6
 80152de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152e2:	89ab      	ldrh	r3, [r5, #12]
 80152e4:	2b01      	cmp	r3, #1
 80152e6:	d907      	bls.n	80152f8 <_fwalk_sglue+0x38>
 80152e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152ec:	3301      	adds	r3, #1
 80152ee:	d003      	beq.n	80152f8 <_fwalk_sglue+0x38>
 80152f0:	4629      	mov	r1, r5
 80152f2:	4638      	mov	r0, r7
 80152f4:	47c0      	blx	r8
 80152f6:	4306      	orrs	r6, r0
 80152f8:	3568      	adds	r5, #104	; 0x68
 80152fa:	e7e9      	b.n	80152d0 <_fwalk_sglue+0x10>

080152fc <siprintf>:
 80152fc:	b40e      	push	{r1, r2, r3}
 80152fe:	b500      	push	{lr}
 8015300:	b09c      	sub	sp, #112	; 0x70
 8015302:	ab1d      	add	r3, sp, #116	; 0x74
 8015304:	9002      	str	r0, [sp, #8]
 8015306:	9006      	str	r0, [sp, #24]
 8015308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801530c:	4809      	ldr	r0, [pc, #36]	; (8015334 <siprintf+0x38>)
 801530e:	9107      	str	r1, [sp, #28]
 8015310:	9104      	str	r1, [sp, #16]
 8015312:	4909      	ldr	r1, [pc, #36]	; (8015338 <siprintf+0x3c>)
 8015314:	f853 2b04 	ldr.w	r2, [r3], #4
 8015318:	9105      	str	r1, [sp, #20]
 801531a:	6800      	ldr	r0, [r0, #0]
 801531c:	9301      	str	r3, [sp, #4]
 801531e:	a902      	add	r1, sp, #8
 8015320:	f002 fc92 	bl	8017c48 <_svfiprintf_r>
 8015324:	9b02      	ldr	r3, [sp, #8]
 8015326:	2200      	movs	r2, #0
 8015328:	701a      	strb	r2, [r3, #0]
 801532a:	b01c      	add	sp, #112	; 0x70
 801532c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015330:	b003      	add	sp, #12
 8015332:	4770      	bx	lr
 8015334:	20000070 	.word	0x20000070
 8015338:	ffff0208 	.word	0xffff0208

0801533c <siscanf>:
 801533c:	b40e      	push	{r1, r2, r3}
 801533e:	b510      	push	{r4, lr}
 8015340:	b09f      	sub	sp, #124	; 0x7c
 8015342:	ac21      	add	r4, sp, #132	; 0x84
 8015344:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015348:	f854 2b04 	ldr.w	r2, [r4], #4
 801534c:	9201      	str	r2, [sp, #4]
 801534e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015352:	9004      	str	r0, [sp, #16]
 8015354:	9008      	str	r0, [sp, #32]
 8015356:	f7ea ffb3 	bl	80002c0 <strlen>
 801535a:	4b0c      	ldr	r3, [pc, #48]	; (801538c <siscanf+0x50>)
 801535c:	9005      	str	r0, [sp, #20]
 801535e:	9009      	str	r0, [sp, #36]	; 0x24
 8015360:	930d      	str	r3, [sp, #52]	; 0x34
 8015362:	480b      	ldr	r0, [pc, #44]	; (8015390 <siscanf+0x54>)
 8015364:	9a01      	ldr	r2, [sp, #4]
 8015366:	6800      	ldr	r0, [r0, #0]
 8015368:	9403      	str	r4, [sp, #12]
 801536a:	2300      	movs	r3, #0
 801536c:	9311      	str	r3, [sp, #68]	; 0x44
 801536e:	9316      	str	r3, [sp, #88]	; 0x58
 8015370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015374:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015378:	a904      	add	r1, sp, #16
 801537a:	4623      	mov	r3, r4
 801537c:	f002 fdbc 	bl	8017ef8 <__ssvfiscanf_r>
 8015380:	b01f      	add	sp, #124	; 0x7c
 8015382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015386:	b003      	add	sp, #12
 8015388:	4770      	bx	lr
 801538a:	bf00      	nop
 801538c:	080153b7 	.word	0x080153b7
 8015390:	20000070 	.word	0x20000070

08015394 <__sread>:
 8015394:	b510      	push	{r4, lr}
 8015396:	460c      	mov	r4, r1
 8015398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801539c:	f000 f8d6 	bl	801554c <_read_r>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	bfab      	itete	ge
 80153a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80153a6:	89a3      	ldrhlt	r3, [r4, #12]
 80153a8:	181b      	addge	r3, r3, r0
 80153aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80153ae:	bfac      	ite	ge
 80153b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80153b2:	81a3      	strhlt	r3, [r4, #12]
 80153b4:	bd10      	pop	{r4, pc}

080153b6 <__seofread>:
 80153b6:	2000      	movs	r0, #0
 80153b8:	4770      	bx	lr

080153ba <__swrite>:
 80153ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153be:	461f      	mov	r7, r3
 80153c0:	898b      	ldrh	r3, [r1, #12]
 80153c2:	05db      	lsls	r3, r3, #23
 80153c4:	4605      	mov	r5, r0
 80153c6:	460c      	mov	r4, r1
 80153c8:	4616      	mov	r6, r2
 80153ca:	d505      	bpl.n	80153d8 <__swrite+0x1e>
 80153cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153d0:	2302      	movs	r3, #2
 80153d2:	2200      	movs	r2, #0
 80153d4:	f000 f8a8 	bl	8015528 <_lseek_r>
 80153d8:	89a3      	ldrh	r3, [r4, #12]
 80153da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80153e2:	81a3      	strh	r3, [r4, #12]
 80153e4:	4632      	mov	r2, r6
 80153e6:	463b      	mov	r3, r7
 80153e8:	4628      	mov	r0, r5
 80153ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153ee:	f000 b8bf 	b.w	8015570 <_write_r>

080153f2 <__sseek>:
 80153f2:	b510      	push	{r4, lr}
 80153f4:	460c      	mov	r4, r1
 80153f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153fa:	f000 f895 	bl	8015528 <_lseek_r>
 80153fe:	1c43      	adds	r3, r0, #1
 8015400:	89a3      	ldrh	r3, [r4, #12]
 8015402:	bf15      	itete	ne
 8015404:	6560      	strne	r0, [r4, #84]	; 0x54
 8015406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801540a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801540e:	81a3      	strheq	r3, [r4, #12]
 8015410:	bf18      	it	ne
 8015412:	81a3      	strhne	r3, [r4, #12]
 8015414:	bd10      	pop	{r4, pc}

08015416 <__sclose>:
 8015416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801541a:	f000 b81f 	b.w	801545c <_close_r>

0801541e <memset>:
 801541e:	4402      	add	r2, r0
 8015420:	4603      	mov	r3, r0
 8015422:	4293      	cmp	r3, r2
 8015424:	d100      	bne.n	8015428 <memset+0xa>
 8015426:	4770      	bx	lr
 8015428:	f803 1b01 	strb.w	r1, [r3], #1
 801542c:	e7f9      	b.n	8015422 <memset+0x4>

0801542e <strncmp>:
 801542e:	b510      	push	{r4, lr}
 8015430:	b16a      	cbz	r2, 801544e <strncmp+0x20>
 8015432:	3901      	subs	r1, #1
 8015434:	1884      	adds	r4, r0, r2
 8015436:	f810 2b01 	ldrb.w	r2, [r0], #1
 801543a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801543e:	429a      	cmp	r2, r3
 8015440:	d103      	bne.n	801544a <strncmp+0x1c>
 8015442:	42a0      	cmp	r0, r4
 8015444:	d001      	beq.n	801544a <strncmp+0x1c>
 8015446:	2a00      	cmp	r2, #0
 8015448:	d1f5      	bne.n	8015436 <strncmp+0x8>
 801544a:	1ad0      	subs	r0, r2, r3
 801544c:	bd10      	pop	{r4, pc}
 801544e:	4610      	mov	r0, r2
 8015450:	e7fc      	b.n	801544c <strncmp+0x1e>
	...

08015454 <_localeconv_r>:
 8015454:	4800      	ldr	r0, [pc, #0]	; (8015458 <_localeconv_r+0x4>)
 8015456:	4770      	bx	lr
 8015458:	20000164 	.word	0x20000164

0801545c <_close_r>:
 801545c:	b538      	push	{r3, r4, r5, lr}
 801545e:	4d06      	ldr	r5, [pc, #24]	; (8015478 <_close_r+0x1c>)
 8015460:	2300      	movs	r3, #0
 8015462:	4604      	mov	r4, r0
 8015464:	4608      	mov	r0, r1
 8015466:	602b      	str	r3, [r5, #0]
 8015468:	f7f1 fdc5 	bl	8006ff6 <_close>
 801546c:	1c43      	adds	r3, r0, #1
 801546e:	d102      	bne.n	8015476 <_close_r+0x1a>
 8015470:	682b      	ldr	r3, [r5, #0]
 8015472:	b103      	cbz	r3, 8015476 <_close_r+0x1a>
 8015474:	6023      	str	r3, [r4, #0]
 8015476:	bd38      	pop	{r3, r4, r5, pc}
 8015478:	20009090 	.word	0x20009090

0801547c <_reclaim_reent>:
 801547c:	4b29      	ldr	r3, [pc, #164]	; (8015524 <_reclaim_reent+0xa8>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	4283      	cmp	r3, r0
 8015482:	b570      	push	{r4, r5, r6, lr}
 8015484:	4604      	mov	r4, r0
 8015486:	d04b      	beq.n	8015520 <_reclaim_reent+0xa4>
 8015488:	69c3      	ldr	r3, [r0, #28]
 801548a:	b143      	cbz	r3, 801549e <_reclaim_reent+0x22>
 801548c:	68db      	ldr	r3, [r3, #12]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d144      	bne.n	801551c <_reclaim_reent+0xa0>
 8015492:	69e3      	ldr	r3, [r4, #28]
 8015494:	6819      	ldr	r1, [r3, #0]
 8015496:	b111      	cbz	r1, 801549e <_reclaim_reent+0x22>
 8015498:	4620      	mov	r0, r4
 801549a:	f000 ff37 	bl	801630c <_free_r>
 801549e:	6961      	ldr	r1, [r4, #20]
 80154a0:	b111      	cbz	r1, 80154a8 <_reclaim_reent+0x2c>
 80154a2:	4620      	mov	r0, r4
 80154a4:	f000 ff32 	bl	801630c <_free_r>
 80154a8:	69e1      	ldr	r1, [r4, #28]
 80154aa:	b111      	cbz	r1, 80154b2 <_reclaim_reent+0x36>
 80154ac:	4620      	mov	r0, r4
 80154ae:	f000 ff2d 	bl	801630c <_free_r>
 80154b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80154b4:	b111      	cbz	r1, 80154bc <_reclaim_reent+0x40>
 80154b6:	4620      	mov	r0, r4
 80154b8:	f000 ff28 	bl	801630c <_free_r>
 80154bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154be:	b111      	cbz	r1, 80154c6 <_reclaim_reent+0x4a>
 80154c0:	4620      	mov	r0, r4
 80154c2:	f000 ff23 	bl	801630c <_free_r>
 80154c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80154c8:	b111      	cbz	r1, 80154d0 <_reclaim_reent+0x54>
 80154ca:	4620      	mov	r0, r4
 80154cc:	f000 ff1e 	bl	801630c <_free_r>
 80154d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80154d2:	b111      	cbz	r1, 80154da <_reclaim_reent+0x5e>
 80154d4:	4620      	mov	r0, r4
 80154d6:	f000 ff19 	bl	801630c <_free_r>
 80154da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80154dc:	b111      	cbz	r1, 80154e4 <_reclaim_reent+0x68>
 80154de:	4620      	mov	r0, r4
 80154e0:	f000 ff14 	bl	801630c <_free_r>
 80154e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80154e6:	b111      	cbz	r1, 80154ee <_reclaim_reent+0x72>
 80154e8:	4620      	mov	r0, r4
 80154ea:	f000 ff0f 	bl	801630c <_free_r>
 80154ee:	6a23      	ldr	r3, [r4, #32]
 80154f0:	b1b3      	cbz	r3, 8015520 <_reclaim_reent+0xa4>
 80154f2:	4620      	mov	r0, r4
 80154f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154f8:	4718      	bx	r3
 80154fa:	5949      	ldr	r1, [r1, r5]
 80154fc:	b941      	cbnz	r1, 8015510 <_reclaim_reent+0x94>
 80154fe:	3504      	adds	r5, #4
 8015500:	69e3      	ldr	r3, [r4, #28]
 8015502:	2d80      	cmp	r5, #128	; 0x80
 8015504:	68d9      	ldr	r1, [r3, #12]
 8015506:	d1f8      	bne.n	80154fa <_reclaim_reent+0x7e>
 8015508:	4620      	mov	r0, r4
 801550a:	f000 feff 	bl	801630c <_free_r>
 801550e:	e7c0      	b.n	8015492 <_reclaim_reent+0x16>
 8015510:	680e      	ldr	r6, [r1, #0]
 8015512:	4620      	mov	r0, r4
 8015514:	f000 fefa 	bl	801630c <_free_r>
 8015518:	4631      	mov	r1, r6
 801551a:	e7ef      	b.n	80154fc <_reclaim_reent+0x80>
 801551c:	2500      	movs	r5, #0
 801551e:	e7ef      	b.n	8015500 <_reclaim_reent+0x84>
 8015520:	bd70      	pop	{r4, r5, r6, pc}
 8015522:	bf00      	nop
 8015524:	20000070 	.word	0x20000070

08015528 <_lseek_r>:
 8015528:	b538      	push	{r3, r4, r5, lr}
 801552a:	4d07      	ldr	r5, [pc, #28]	; (8015548 <_lseek_r+0x20>)
 801552c:	4604      	mov	r4, r0
 801552e:	4608      	mov	r0, r1
 8015530:	4611      	mov	r1, r2
 8015532:	2200      	movs	r2, #0
 8015534:	602a      	str	r2, [r5, #0]
 8015536:	461a      	mov	r2, r3
 8015538:	f7f1 fd84 	bl	8007044 <_lseek>
 801553c:	1c43      	adds	r3, r0, #1
 801553e:	d102      	bne.n	8015546 <_lseek_r+0x1e>
 8015540:	682b      	ldr	r3, [r5, #0]
 8015542:	b103      	cbz	r3, 8015546 <_lseek_r+0x1e>
 8015544:	6023      	str	r3, [r4, #0]
 8015546:	bd38      	pop	{r3, r4, r5, pc}
 8015548:	20009090 	.word	0x20009090

0801554c <_read_r>:
 801554c:	b538      	push	{r3, r4, r5, lr}
 801554e:	4d07      	ldr	r5, [pc, #28]	; (801556c <_read_r+0x20>)
 8015550:	4604      	mov	r4, r0
 8015552:	4608      	mov	r0, r1
 8015554:	4611      	mov	r1, r2
 8015556:	2200      	movs	r2, #0
 8015558:	602a      	str	r2, [r5, #0]
 801555a:	461a      	mov	r2, r3
 801555c:	f7f1 fd12 	bl	8006f84 <_read>
 8015560:	1c43      	adds	r3, r0, #1
 8015562:	d102      	bne.n	801556a <_read_r+0x1e>
 8015564:	682b      	ldr	r3, [r5, #0]
 8015566:	b103      	cbz	r3, 801556a <_read_r+0x1e>
 8015568:	6023      	str	r3, [r4, #0]
 801556a:	bd38      	pop	{r3, r4, r5, pc}
 801556c:	20009090 	.word	0x20009090

08015570 <_write_r>:
 8015570:	b538      	push	{r3, r4, r5, lr}
 8015572:	4d07      	ldr	r5, [pc, #28]	; (8015590 <_write_r+0x20>)
 8015574:	4604      	mov	r4, r0
 8015576:	4608      	mov	r0, r1
 8015578:	4611      	mov	r1, r2
 801557a:	2200      	movs	r2, #0
 801557c:	602a      	str	r2, [r5, #0]
 801557e:	461a      	mov	r2, r3
 8015580:	f7f1 fd1d 	bl	8006fbe <_write>
 8015584:	1c43      	adds	r3, r0, #1
 8015586:	d102      	bne.n	801558e <_write_r+0x1e>
 8015588:	682b      	ldr	r3, [r5, #0]
 801558a:	b103      	cbz	r3, 801558e <_write_r+0x1e>
 801558c:	6023      	str	r3, [r4, #0]
 801558e:	bd38      	pop	{r3, r4, r5, pc}
 8015590:	20009090 	.word	0x20009090

08015594 <__errno>:
 8015594:	4b01      	ldr	r3, [pc, #4]	; (801559c <__errno+0x8>)
 8015596:	6818      	ldr	r0, [r3, #0]
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	20000070 	.word	0x20000070

080155a0 <__libc_init_array>:
 80155a0:	b570      	push	{r4, r5, r6, lr}
 80155a2:	4d0d      	ldr	r5, [pc, #52]	; (80155d8 <__libc_init_array+0x38>)
 80155a4:	4c0d      	ldr	r4, [pc, #52]	; (80155dc <__libc_init_array+0x3c>)
 80155a6:	1b64      	subs	r4, r4, r5
 80155a8:	10a4      	asrs	r4, r4, #2
 80155aa:	2600      	movs	r6, #0
 80155ac:	42a6      	cmp	r6, r4
 80155ae:	d109      	bne.n	80155c4 <__libc_init_array+0x24>
 80155b0:	4d0b      	ldr	r5, [pc, #44]	; (80155e0 <__libc_init_array+0x40>)
 80155b2:	4c0c      	ldr	r4, [pc, #48]	; (80155e4 <__libc_init_array+0x44>)
 80155b4:	f006 fa1a 	bl	801b9ec <_init>
 80155b8:	1b64      	subs	r4, r4, r5
 80155ba:	10a4      	asrs	r4, r4, #2
 80155bc:	2600      	movs	r6, #0
 80155be:	42a6      	cmp	r6, r4
 80155c0:	d105      	bne.n	80155ce <__libc_init_array+0x2e>
 80155c2:	bd70      	pop	{r4, r5, r6, pc}
 80155c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80155c8:	4798      	blx	r3
 80155ca:	3601      	adds	r6, #1
 80155cc:	e7ee      	b.n	80155ac <__libc_init_array+0xc>
 80155ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80155d2:	4798      	blx	r3
 80155d4:	3601      	adds	r6, #1
 80155d6:	e7f2      	b.n	80155be <__libc_init_array+0x1e>
 80155d8:	0801c8d8 	.word	0x0801c8d8
 80155dc:	0801c8d8 	.word	0x0801c8d8
 80155e0:	0801c8d8 	.word	0x0801c8d8
 80155e4:	0801c8dc 	.word	0x0801c8dc

080155e8 <__retarget_lock_init_recursive>:
 80155e8:	4770      	bx	lr

080155ea <__retarget_lock_acquire_recursive>:
 80155ea:	4770      	bx	lr

080155ec <__retarget_lock_release_recursive>:
 80155ec:	4770      	bx	lr

080155ee <memcpy>:
 80155ee:	440a      	add	r2, r1
 80155f0:	4291      	cmp	r1, r2
 80155f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80155f6:	d100      	bne.n	80155fa <memcpy+0xc>
 80155f8:	4770      	bx	lr
 80155fa:	b510      	push	{r4, lr}
 80155fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015604:	4291      	cmp	r1, r2
 8015606:	d1f9      	bne.n	80155fc <memcpy+0xe>
 8015608:	bd10      	pop	{r4, pc}
	...

0801560c <nanf>:
 801560c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015614 <nanf+0x8>
 8015610:	4770      	bx	lr
 8015612:	bf00      	nop
 8015614:	7fc00000 	.word	0x7fc00000

08015618 <quorem>:
 8015618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801561c:	6903      	ldr	r3, [r0, #16]
 801561e:	690c      	ldr	r4, [r1, #16]
 8015620:	42a3      	cmp	r3, r4
 8015622:	4607      	mov	r7, r0
 8015624:	db7e      	blt.n	8015724 <quorem+0x10c>
 8015626:	3c01      	subs	r4, #1
 8015628:	f101 0814 	add.w	r8, r1, #20
 801562c:	f100 0514 	add.w	r5, r0, #20
 8015630:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015634:	9301      	str	r3, [sp, #4]
 8015636:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801563a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801563e:	3301      	adds	r3, #1
 8015640:	429a      	cmp	r2, r3
 8015642:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015646:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801564a:	fbb2 f6f3 	udiv	r6, r2, r3
 801564e:	d331      	bcc.n	80156b4 <quorem+0x9c>
 8015650:	f04f 0e00 	mov.w	lr, #0
 8015654:	4640      	mov	r0, r8
 8015656:	46ac      	mov	ip, r5
 8015658:	46f2      	mov	sl, lr
 801565a:	f850 2b04 	ldr.w	r2, [r0], #4
 801565e:	b293      	uxth	r3, r2
 8015660:	fb06 e303 	mla	r3, r6, r3, lr
 8015664:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015668:	0c1a      	lsrs	r2, r3, #16
 801566a:	b29b      	uxth	r3, r3
 801566c:	ebaa 0303 	sub.w	r3, sl, r3
 8015670:	f8dc a000 	ldr.w	sl, [ip]
 8015674:	fa13 f38a 	uxtah	r3, r3, sl
 8015678:	fb06 220e 	mla	r2, r6, lr, r2
 801567c:	9300      	str	r3, [sp, #0]
 801567e:	9b00      	ldr	r3, [sp, #0]
 8015680:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015684:	b292      	uxth	r2, r2
 8015686:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801568a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801568e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015692:	4581      	cmp	r9, r0
 8015694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015698:	f84c 3b04 	str.w	r3, [ip], #4
 801569c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80156a0:	d2db      	bcs.n	801565a <quorem+0x42>
 80156a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80156a6:	b92b      	cbnz	r3, 80156b4 <quorem+0x9c>
 80156a8:	9b01      	ldr	r3, [sp, #4]
 80156aa:	3b04      	subs	r3, #4
 80156ac:	429d      	cmp	r5, r3
 80156ae:	461a      	mov	r2, r3
 80156b0:	d32c      	bcc.n	801570c <quorem+0xf4>
 80156b2:	613c      	str	r4, [r7, #16]
 80156b4:	4638      	mov	r0, r7
 80156b6:	f001 f9ef 	bl	8016a98 <__mcmp>
 80156ba:	2800      	cmp	r0, #0
 80156bc:	db22      	blt.n	8015704 <quorem+0xec>
 80156be:	3601      	adds	r6, #1
 80156c0:	4629      	mov	r1, r5
 80156c2:	2000      	movs	r0, #0
 80156c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80156c8:	f8d1 c000 	ldr.w	ip, [r1]
 80156cc:	b293      	uxth	r3, r2
 80156ce:	1ac3      	subs	r3, r0, r3
 80156d0:	0c12      	lsrs	r2, r2, #16
 80156d2:	fa13 f38c 	uxtah	r3, r3, ip
 80156d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80156da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80156de:	b29b      	uxth	r3, r3
 80156e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80156e4:	45c1      	cmp	r9, r8
 80156e6:	f841 3b04 	str.w	r3, [r1], #4
 80156ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80156ee:	d2e9      	bcs.n	80156c4 <quorem+0xac>
 80156f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80156f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80156f8:	b922      	cbnz	r2, 8015704 <quorem+0xec>
 80156fa:	3b04      	subs	r3, #4
 80156fc:	429d      	cmp	r5, r3
 80156fe:	461a      	mov	r2, r3
 8015700:	d30a      	bcc.n	8015718 <quorem+0x100>
 8015702:	613c      	str	r4, [r7, #16]
 8015704:	4630      	mov	r0, r6
 8015706:	b003      	add	sp, #12
 8015708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570c:	6812      	ldr	r2, [r2, #0]
 801570e:	3b04      	subs	r3, #4
 8015710:	2a00      	cmp	r2, #0
 8015712:	d1ce      	bne.n	80156b2 <quorem+0x9a>
 8015714:	3c01      	subs	r4, #1
 8015716:	e7c9      	b.n	80156ac <quorem+0x94>
 8015718:	6812      	ldr	r2, [r2, #0]
 801571a:	3b04      	subs	r3, #4
 801571c:	2a00      	cmp	r2, #0
 801571e:	d1f0      	bne.n	8015702 <quorem+0xea>
 8015720:	3c01      	subs	r4, #1
 8015722:	e7eb      	b.n	80156fc <quorem+0xe4>
 8015724:	2000      	movs	r0, #0
 8015726:	e7ee      	b.n	8015706 <quorem+0xee>

08015728 <_dtoa_r>:
 8015728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801572c:	ed2d 8b04 	vpush	{d8-d9}
 8015730:	69c5      	ldr	r5, [r0, #28]
 8015732:	b093      	sub	sp, #76	; 0x4c
 8015734:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015738:	ec57 6b10 	vmov	r6, r7, d0
 801573c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015740:	9107      	str	r1, [sp, #28]
 8015742:	4604      	mov	r4, r0
 8015744:	920a      	str	r2, [sp, #40]	; 0x28
 8015746:	930d      	str	r3, [sp, #52]	; 0x34
 8015748:	b975      	cbnz	r5, 8015768 <_dtoa_r+0x40>
 801574a:	2010      	movs	r0, #16
 801574c:	f000 fe2a 	bl	80163a4 <malloc>
 8015750:	4602      	mov	r2, r0
 8015752:	61e0      	str	r0, [r4, #28]
 8015754:	b920      	cbnz	r0, 8015760 <_dtoa_r+0x38>
 8015756:	4bae      	ldr	r3, [pc, #696]	; (8015a10 <_dtoa_r+0x2e8>)
 8015758:	21ef      	movs	r1, #239	; 0xef
 801575a:	48ae      	ldr	r0, [pc, #696]	; (8015a14 <_dtoa_r+0x2ec>)
 801575c:	f002 ffe8 	bl	8018730 <__assert_func>
 8015760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015764:	6005      	str	r5, [r0, #0]
 8015766:	60c5      	str	r5, [r0, #12]
 8015768:	69e3      	ldr	r3, [r4, #28]
 801576a:	6819      	ldr	r1, [r3, #0]
 801576c:	b151      	cbz	r1, 8015784 <_dtoa_r+0x5c>
 801576e:	685a      	ldr	r2, [r3, #4]
 8015770:	604a      	str	r2, [r1, #4]
 8015772:	2301      	movs	r3, #1
 8015774:	4093      	lsls	r3, r2
 8015776:	608b      	str	r3, [r1, #8]
 8015778:	4620      	mov	r0, r4
 801577a:	f000 ff07 	bl	801658c <_Bfree>
 801577e:	69e3      	ldr	r3, [r4, #28]
 8015780:	2200      	movs	r2, #0
 8015782:	601a      	str	r2, [r3, #0]
 8015784:	1e3b      	subs	r3, r7, #0
 8015786:	bfbb      	ittet	lt
 8015788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801578c:	9303      	strlt	r3, [sp, #12]
 801578e:	2300      	movge	r3, #0
 8015790:	2201      	movlt	r2, #1
 8015792:	bfac      	ite	ge
 8015794:	f8c8 3000 	strge.w	r3, [r8]
 8015798:	f8c8 2000 	strlt.w	r2, [r8]
 801579c:	4b9e      	ldr	r3, [pc, #632]	; (8015a18 <_dtoa_r+0x2f0>)
 801579e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80157a2:	ea33 0308 	bics.w	r3, r3, r8
 80157a6:	d11b      	bne.n	80157e0 <_dtoa_r+0xb8>
 80157a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80157ae:	6013      	str	r3, [r2, #0]
 80157b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80157b4:	4333      	orrs	r3, r6
 80157b6:	f000 8593 	beq.w	80162e0 <_dtoa_r+0xbb8>
 80157ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157bc:	b963      	cbnz	r3, 80157d8 <_dtoa_r+0xb0>
 80157be:	4b97      	ldr	r3, [pc, #604]	; (8015a1c <_dtoa_r+0x2f4>)
 80157c0:	e027      	b.n	8015812 <_dtoa_r+0xea>
 80157c2:	4b97      	ldr	r3, [pc, #604]	; (8015a20 <_dtoa_r+0x2f8>)
 80157c4:	9300      	str	r3, [sp, #0]
 80157c6:	3308      	adds	r3, #8
 80157c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80157ca:	6013      	str	r3, [r2, #0]
 80157cc:	9800      	ldr	r0, [sp, #0]
 80157ce:	b013      	add	sp, #76	; 0x4c
 80157d0:	ecbd 8b04 	vpop	{d8-d9}
 80157d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157d8:	4b90      	ldr	r3, [pc, #576]	; (8015a1c <_dtoa_r+0x2f4>)
 80157da:	9300      	str	r3, [sp, #0]
 80157dc:	3303      	adds	r3, #3
 80157de:	e7f3      	b.n	80157c8 <_dtoa_r+0xa0>
 80157e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80157e4:	2200      	movs	r2, #0
 80157e6:	ec51 0b17 	vmov	r0, r1, d7
 80157ea:	eeb0 8a47 	vmov.f32	s16, s14
 80157ee:	eef0 8a67 	vmov.f32	s17, s15
 80157f2:	2300      	movs	r3, #0
 80157f4:	f7eb f990 	bl	8000b18 <__aeabi_dcmpeq>
 80157f8:	4681      	mov	r9, r0
 80157fa:	b160      	cbz	r0, 8015816 <_dtoa_r+0xee>
 80157fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157fe:	2301      	movs	r3, #1
 8015800:	6013      	str	r3, [r2, #0]
 8015802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015804:	2b00      	cmp	r3, #0
 8015806:	f000 8568 	beq.w	80162da <_dtoa_r+0xbb2>
 801580a:	4b86      	ldr	r3, [pc, #536]	; (8015a24 <_dtoa_r+0x2fc>)
 801580c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801580e:	6013      	str	r3, [r2, #0]
 8015810:	3b01      	subs	r3, #1
 8015812:	9300      	str	r3, [sp, #0]
 8015814:	e7da      	b.n	80157cc <_dtoa_r+0xa4>
 8015816:	aa10      	add	r2, sp, #64	; 0x40
 8015818:	a911      	add	r1, sp, #68	; 0x44
 801581a:	4620      	mov	r0, r4
 801581c:	eeb0 0a48 	vmov.f32	s0, s16
 8015820:	eef0 0a68 	vmov.f32	s1, s17
 8015824:	f001 fa4e 	bl	8016cc4 <__d2b>
 8015828:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801582c:	4682      	mov	sl, r0
 801582e:	2d00      	cmp	r5, #0
 8015830:	d07f      	beq.n	8015932 <_dtoa_r+0x20a>
 8015832:	ee18 3a90 	vmov	r3, s17
 8015836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801583a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801583e:	ec51 0b18 	vmov	r0, r1, d8
 8015842:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801584a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801584e:	4619      	mov	r1, r3
 8015850:	2200      	movs	r2, #0
 8015852:	4b75      	ldr	r3, [pc, #468]	; (8015a28 <_dtoa_r+0x300>)
 8015854:	f7ea fd40 	bl	80002d8 <__aeabi_dsub>
 8015858:	a367      	add	r3, pc, #412	; (adr r3, 80159f8 <_dtoa_r+0x2d0>)
 801585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801585e:	f7ea fef3 	bl	8000648 <__aeabi_dmul>
 8015862:	a367      	add	r3, pc, #412	; (adr r3, 8015a00 <_dtoa_r+0x2d8>)
 8015864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015868:	f7ea fd38 	bl	80002dc <__adddf3>
 801586c:	4606      	mov	r6, r0
 801586e:	4628      	mov	r0, r5
 8015870:	460f      	mov	r7, r1
 8015872:	f7ea fe7f 	bl	8000574 <__aeabi_i2d>
 8015876:	a364      	add	r3, pc, #400	; (adr r3, 8015a08 <_dtoa_r+0x2e0>)
 8015878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801587c:	f7ea fee4 	bl	8000648 <__aeabi_dmul>
 8015880:	4602      	mov	r2, r0
 8015882:	460b      	mov	r3, r1
 8015884:	4630      	mov	r0, r6
 8015886:	4639      	mov	r1, r7
 8015888:	f7ea fd28 	bl	80002dc <__adddf3>
 801588c:	4606      	mov	r6, r0
 801588e:	460f      	mov	r7, r1
 8015890:	f7eb f98a 	bl	8000ba8 <__aeabi_d2iz>
 8015894:	2200      	movs	r2, #0
 8015896:	4683      	mov	fp, r0
 8015898:	2300      	movs	r3, #0
 801589a:	4630      	mov	r0, r6
 801589c:	4639      	mov	r1, r7
 801589e:	f7eb f945 	bl	8000b2c <__aeabi_dcmplt>
 80158a2:	b148      	cbz	r0, 80158b8 <_dtoa_r+0x190>
 80158a4:	4658      	mov	r0, fp
 80158a6:	f7ea fe65 	bl	8000574 <__aeabi_i2d>
 80158aa:	4632      	mov	r2, r6
 80158ac:	463b      	mov	r3, r7
 80158ae:	f7eb f933 	bl	8000b18 <__aeabi_dcmpeq>
 80158b2:	b908      	cbnz	r0, 80158b8 <_dtoa_r+0x190>
 80158b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80158b8:	f1bb 0f16 	cmp.w	fp, #22
 80158bc:	d857      	bhi.n	801596e <_dtoa_r+0x246>
 80158be:	4b5b      	ldr	r3, [pc, #364]	; (8015a2c <_dtoa_r+0x304>)
 80158c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80158c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c8:	ec51 0b18 	vmov	r0, r1, d8
 80158cc:	f7eb f92e 	bl	8000b2c <__aeabi_dcmplt>
 80158d0:	2800      	cmp	r0, #0
 80158d2:	d04e      	beq.n	8015972 <_dtoa_r+0x24a>
 80158d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80158d8:	2300      	movs	r3, #0
 80158da:	930c      	str	r3, [sp, #48]	; 0x30
 80158dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158de:	1b5b      	subs	r3, r3, r5
 80158e0:	1e5a      	subs	r2, r3, #1
 80158e2:	bf45      	ittet	mi
 80158e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80158e8:	9305      	strmi	r3, [sp, #20]
 80158ea:	2300      	movpl	r3, #0
 80158ec:	2300      	movmi	r3, #0
 80158ee:	9206      	str	r2, [sp, #24]
 80158f0:	bf54      	ite	pl
 80158f2:	9305      	strpl	r3, [sp, #20]
 80158f4:	9306      	strmi	r3, [sp, #24]
 80158f6:	f1bb 0f00 	cmp.w	fp, #0
 80158fa:	db3c      	blt.n	8015976 <_dtoa_r+0x24e>
 80158fc:	9b06      	ldr	r3, [sp, #24]
 80158fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015902:	445b      	add	r3, fp
 8015904:	9306      	str	r3, [sp, #24]
 8015906:	2300      	movs	r3, #0
 8015908:	9308      	str	r3, [sp, #32]
 801590a:	9b07      	ldr	r3, [sp, #28]
 801590c:	2b09      	cmp	r3, #9
 801590e:	d868      	bhi.n	80159e2 <_dtoa_r+0x2ba>
 8015910:	2b05      	cmp	r3, #5
 8015912:	bfc4      	itt	gt
 8015914:	3b04      	subgt	r3, #4
 8015916:	9307      	strgt	r3, [sp, #28]
 8015918:	9b07      	ldr	r3, [sp, #28]
 801591a:	f1a3 0302 	sub.w	r3, r3, #2
 801591e:	bfcc      	ite	gt
 8015920:	2500      	movgt	r5, #0
 8015922:	2501      	movle	r5, #1
 8015924:	2b03      	cmp	r3, #3
 8015926:	f200 8085 	bhi.w	8015a34 <_dtoa_r+0x30c>
 801592a:	e8df f003 	tbb	[pc, r3]
 801592e:	3b2e      	.short	0x3b2e
 8015930:	5839      	.short	0x5839
 8015932:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015936:	441d      	add	r5, r3
 8015938:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801593c:	2b20      	cmp	r3, #32
 801593e:	bfc1      	itttt	gt
 8015940:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015944:	fa08 f803 	lslgt.w	r8, r8, r3
 8015948:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801594c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015950:	bfd6      	itet	le
 8015952:	f1c3 0320 	rsble	r3, r3, #32
 8015956:	ea48 0003 	orrgt.w	r0, r8, r3
 801595a:	fa06 f003 	lslle.w	r0, r6, r3
 801595e:	f7ea fdf9 	bl	8000554 <__aeabi_ui2d>
 8015962:	2201      	movs	r2, #1
 8015964:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015968:	3d01      	subs	r5, #1
 801596a:	920e      	str	r2, [sp, #56]	; 0x38
 801596c:	e76f      	b.n	801584e <_dtoa_r+0x126>
 801596e:	2301      	movs	r3, #1
 8015970:	e7b3      	b.n	80158da <_dtoa_r+0x1b2>
 8015972:	900c      	str	r0, [sp, #48]	; 0x30
 8015974:	e7b2      	b.n	80158dc <_dtoa_r+0x1b4>
 8015976:	9b05      	ldr	r3, [sp, #20]
 8015978:	eba3 030b 	sub.w	r3, r3, fp
 801597c:	9305      	str	r3, [sp, #20]
 801597e:	f1cb 0300 	rsb	r3, fp, #0
 8015982:	9308      	str	r3, [sp, #32]
 8015984:	2300      	movs	r3, #0
 8015986:	930b      	str	r3, [sp, #44]	; 0x2c
 8015988:	e7bf      	b.n	801590a <_dtoa_r+0x1e2>
 801598a:	2300      	movs	r3, #0
 801598c:	9309      	str	r3, [sp, #36]	; 0x24
 801598e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015990:	2b00      	cmp	r3, #0
 8015992:	dc52      	bgt.n	8015a3a <_dtoa_r+0x312>
 8015994:	2301      	movs	r3, #1
 8015996:	9301      	str	r3, [sp, #4]
 8015998:	9304      	str	r3, [sp, #16]
 801599a:	461a      	mov	r2, r3
 801599c:	920a      	str	r2, [sp, #40]	; 0x28
 801599e:	e00b      	b.n	80159b8 <_dtoa_r+0x290>
 80159a0:	2301      	movs	r3, #1
 80159a2:	e7f3      	b.n	801598c <_dtoa_r+0x264>
 80159a4:	2300      	movs	r3, #0
 80159a6:	9309      	str	r3, [sp, #36]	; 0x24
 80159a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159aa:	445b      	add	r3, fp
 80159ac:	9301      	str	r3, [sp, #4]
 80159ae:	3301      	adds	r3, #1
 80159b0:	2b01      	cmp	r3, #1
 80159b2:	9304      	str	r3, [sp, #16]
 80159b4:	bfb8      	it	lt
 80159b6:	2301      	movlt	r3, #1
 80159b8:	69e0      	ldr	r0, [r4, #28]
 80159ba:	2100      	movs	r1, #0
 80159bc:	2204      	movs	r2, #4
 80159be:	f102 0614 	add.w	r6, r2, #20
 80159c2:	429e      	cmp	r6, r3
 80159c4:	d93d      	bls.n	8015a42 <_dtoa_r+0x31a>
 80159c6:	6041      	str	r1, [r0, #4]
 80159c8:	4620      	mov	r0, r4
 80159ca:	f000 fd9f 	bl	801650c <_Balloc>
 80159ce:	9000      	str	r0, [sp, #0]
 80159d0:	2800      	cmp	r0, #0
 80159d2:	d139      	bne.n	8015a48 <_dtoa_r+0x320>
 80159d4:	4b16      	ldr	r3, [pc, #88]	; (8015a30 <_dtoa_r+0x308>)
 80159d6:	4602      	mov	r2, r0
 80159d8:	f240 11af 	movw	r1, #431	; 0x1af
 80159dc:	e6bd      	b.n	801575a <_dtoa_r+0x32>
 80159de:	2301      	movs	r3, #1
 80159e0:	e7e1      	b.n	80159a6 <_dtoa_r+0x27e>
 80159e2:	2501      	movs	r5, #1
 80159e4:	2300      	movs	r3, #0
 80159e6:	9307      	str	r3, [sp, #28]
 80159e8:	9509      	str	r5, [sp, #36]	; 0x24
 80159ea:	f04f 33ff 	mov.w	r3, #4294967295
 80159ee:	9301      	str	r3, [sp, #4]
 80159f0:	9304      	str	r3, [sp, #16]
 80159f2:	2200      	movs	r2, #0
 80159f4:	2312      	movs	r3, #18
 80159f6:	e7d1      	b.n	801599c <_dtoa_r+0x274>
 80159f8:	636f4361 	.word	0x636f4361
 80159fc:	3fd287a7 	.word	0x3fd287a7
 8015a00:	8b60c8b3 	.word	0x8b60c8b3
 8015a04:	3fc68a28 	.word	0x3fc68a28
 8015a08:	509f79fb 	.word	0x509f79fb
 8015a0c:	3fd34413 	.word	0x3fd34413
 8015a10:	0801c07c 	.word	0x0801c07c
 8015a14:	0801c093 	.word	0x0801c093
 8015a18:	7ff00000 	.word	0x7ff00000
 8015a1c:	0801c078 	.word	0x0801c078
 8015a20:	0801c06f 	.word	0x0801c06f
 8015a24:	0801c3d1 	.word	0x0801c3d1
 8015a28:	3ff80000 	.word	0x3ff80000
 8015a2c:	0801c180 	.word	0x0801c180
 8015a30:	0801c0eb 	.word	0x0801c0eb
 8015a34:	2301      	movs	r3, #1
 8015a36:	9309      	str	r3, [sp, #36]	; 0x24
 8015a38:	e7d7      	b.n	80159ea <_dtoa_r+0x2c2>
 8015a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a3c:	9301      	str	r3, [sp, #4]
 8015a3e:	9304      	str	r3, [sp, #16]
 8015a40:	e7ba      	b.n	80159b8 <_dtoa_r+0x290>
 8015a42:	3101      	adds	r1, #1
 8015a44:	0052      	lsls	r2, r2, #1
 8015a46:	e7ba      	b.n	80159be <_dtoa_r+0x296>
 8015a48:	69e3      	ldr	r3, [r4, #28]
 8015a4a:	9a00      	ldr	r2, [sp, #0]
 8015a4c:	601a      	str	r2, [r3, #0]
 8015a4e:	9b04      	ldr	r3, [sp, #16]
 8015a50:	2b0e      	cmp	r3, #14
 8015a52:	f200 80a8 	bhi.w	8015ba6 <_dtoa_r+0x47e>
 8015a56:	2d00      	cmp	r5, #0
 8015a58:	f000 80a5 	beq.w	8015ba6 <_dtoa_r+0x47e>
 8015a5c:	f1bb 0f00 	cmp.w	fp, #0
 8015a60:	dd38      	ble.n	8015ad4 <_dtoa_r+0x3ac>
 8015a62:	4bc0      	ldr	r3, [pc, #768]	; (8015d64 <_dtoa_r+0x63c>)
 8015a64:	f00b 020f 	and.w	r2, fp, #15
 8015a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015a70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015a74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015a78:	d019      	beq.n	8015aae <_dtoa_r+0x386>
 8015a7a:	4bbb      	ldr	r3, [pc, #748]	; (8015d68 <_dtoa_r+0x640>)
 8015a7c:	ec51 0b18 	vmov	r0, r1, d8
 8015a80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015a84:	f7ea ff0a 	bl	800089c <__aeabi_ddiv>
 8015a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a8c:	f008 080f 	and.w	r8, r8, #15
 8015a90:	2503      	movs	r5, #3
 8015a92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015d68 <_dtoa_r+0x640>
 8015a96:	f1b8 0f00 	cmp.w	r8, #0
 8015a9a:	d10a      	bne.n	8015ab2 <_dtoa_r+0x38a>
 8015a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015aa0:	4632      	mov	r2, r6
 8015aa2:	463b      	mov	r3, r7
 8015aa4:	f7ea fefa 	bl	800089c <__aeabi_ddiv>
 8015aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015aac:	e02b      	b.n	8015b06 <_dtoa_r+0x3de>
 8015aae:	2502      	movs	r5, #2
 8015ab0:	e7ef      	b.n	8015a92 <_dtoa_r+0x36a>
 8015ab2:	f018 0f01 	tst.w	r8, #1
 8015ab6:	d008      	beq.n	8015aca <_dtoa_r+0x3a2>
 8015ab8:	4630      	mov	r0, r6
 8015aba:	4639      	mov	r1, r7
 8015abc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015ac0:	f7ea fdc2 	bl	8000648 <__aeabi_dmul>
 8015ac4:	3501      	adds	r5, #1
 8015ac6:	4606      	mov	r6, r0
 8015ac8:	460f      	mov	r7, r1
 8015aca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015ace:	f109 0908 	add.w	r9, r9, #8
 8015ad2:	e7e0      	b.n	8015a96 <_dtoa_r+0x36e>
 8015ad4:	f000 809f 	beq.w	8015c16 <_dtoa_r+0x4ee>
 8015ad8:	f1cb 0600 	rsb	r6, fp, #0
 8015adc:	4ba1      	ldr	r3, [pc, #644]	; (8015d64 <_dtoa_r+0x63c>)
 8015ade:	4fa2      	ldr	r7, [pc, #648]	; (8015d68 <_dtoa_r+0x640>)
 8015ae0:	f006 020f 	and.w	r2, r6, #15
 8015ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aec:	ec51 0b18 	vmov	r0, r1, d8
 8015af0:	f7ea fdaa 	bl	8000648 <__aeabi_dmul>
 8015af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015af8:	1136      	asrs	r6, r6, #4
 8015afa:	2300      	movs	r3, #0
 8015afc:	2502      	movs	r5, #2
 8015afe:	2e00      	cmp	r6, #0
 8015b00:	d17e      	bne.n	8015c00 <_dtoa_r+0x4d8>
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d1d0      	bne.n	8015aa8 <_dtoa_r+0x380>
 8015b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	f000 8084 	beq.w	8015c1a <_dtoa_r+0x4f2>
 8015b12:	4b96      	ldr	r3, [pc, #600]	; (8015d6c <_dtoa_r+0x644>)
 8015b14:	2200      	movs	r2, #0
 8015b16:	4640      	mov	r0, r8
 8015b18:	4649      	mov	r1, r9
 8015b1a:	f7eb f807 	bl	8000b2c <__aeabi_dcmplt>
 8015b1e:	2800      	cmp	r0, #0
 8015b20:	d07b      	beq.n	8015c1a <_dtoa_r+0x4f2>
 8015b22:	9b04      	ldr	r3, [sp, #16]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d078      	beq.n	8015c1a <_dtoa_r+0x4f2>
 8015b28:	9b01      	ldr	r3, [sp, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	dd39      	ble.n	8015ba2 <_dtoa_r+0x47a>
 8015b2e:	4b90      	ldr	r3, [pc, #576]	; (8015d70 <_dtoa_r+0x648>)
 8015b30:	2200      	movs	r2, #0
 8015b32:	4640      	mov	r0, r8
 8015b34:	4649      	mov	r1, r9
 8015b36:	f7ea fd87 	bl	8000648 <__aeabi_dmul>
 8015b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b3e:	9e01      	ldr	r6, [sp, #4]
 8015b40:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015b44:	3501      	adds	r5, #1
 8015b46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015b4a:	4628      	mov	r0, r5
 8015b4c:	f7ea fd12 	bl	8000574 <__aeabi_i2d>
 8015b50:	4642      	mov	r2, r8
 8015b52:	464b      	mov	r3, r9
 8015b54:	f7ea fd78 	bl	8000648 <__aeabi_dmul>
 8015b58:	4b86      	ldr	r3, [pc, #536]	; (8015d74 <_dtoa_r+0x64c>)
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f7ea fbbe 	bl	80002dc <__adddf3>
 8015b60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b68:	9303      	str	r3, [sp, #12]
 8015b6a:	2e00      	cmp	r6, #0
 8015b6c:	d158      	bne.n	8015c20 <_dtoa_r+0x4f8>
 8015b6e:	4b82      	ldr	r3, [pc, #520]	; (8015d78 <_dtoa_r+0x650>)
 8015b70:	2200      	movs	r2, #0
 8015b72:	4640      	mov	r0, r8
 8015b74:	4649      	mov	r1, r9
 8015b76:	f7ea fbaf 	bl	80002d8 <__aeabi_dsub>
 8015b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b7e:	4680      	mov	r8, r0
 8015b80:	4689      	mov	r9, r1
 8015b82:	f7ea fff1 	bl	8000b68 <__aeabi_dcmpgt>
 8015b86:	2800      	cmp	r0, #0
 8015b88:	f040 8296 	bne.w	80160b8 <_dtoa_r+0x990>
 8015b8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015b90:	4640      	mov	r0, r8
 8015b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015b96:	4649      	mov	r1, r9
 8015b98:	f7ea ffc8 	bl	8000b2c <__aeabi_dcmplt>
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	f040 8289 	bne.w	80160b4 <_dtoa_r+0x98c>
 8015ba2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	f2c0 814e 	blt.w	8015e4a <_dtoa_r+0x722>
 8015bae:	f1bb 0f0e 	cmp.w	fp, #14
 8015bb2:	f300 814a 	bgt.w	8015e4a <_dtoa_r+0x722>
 8015bb6:	4b6b      	ldr	r3, [pc, #428]	; (8015d64 <_dtoa_r+0x63c>)
 8015bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	f280 80dc 	bge.w	8015d80 <_dtoa_r+0x658>
 8015bc8:	9b04      	ldr	r3, [sp, #16]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	f300 80d8 	bgt.w	8015d80 <_dtoa_r+0x658>
 8015bd0:	f040 826f 	bne.w	80160b2 <_dtoa_r+0x98a>
 8015bd4:	4b68      	ldr	r3, [pc, #416]	; (8015d78 <_dtoa_r+0x650>)
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	4640      	mov	r0, r8
 8015bda:	4649      	mov	r1, r9
 8015bdc:	f7ea fd34 	bl	8000648 <__aeabi_dmul>
 8015be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015be4:	f7ea ffb6 	bl	8000b54 <__aeabi_dcmpge>
 8015be8:	9e04      	ldr	r6, [sp, #16]
 8015bea:	4637      	mov	r7, r6
 8015bec:	2800      	cmp	r0, #0
 8015bee:	f040 8245 	bne.w	801607c <_dtoa_r+0x954>
 8015bf2:	9d00      	ldr	r5, [sp, #0]
 8015bf4:	2331      	movs	r3, #49	; 0x31
 8015bf6:	f805 3b01 	strb.w	r3, [r5], #1
 8015bfa:	f10b 0b01 	add.w	fp, fp, #1
 8015bfe:	e241      	b.n	8016084 <_dtoa_r+0x95c>
 8015c00:	07f2      	lsls	r2, r6, #31
 8015c02:	d505      	bpl.n	8015c10 <_dtoa_r+0x4e8>
 8015c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c08:	f7ea fd1e 	bl	8000648 <__aeabi_dmul>
 8015c0c:	3501      	adds	r5, #1
 8015c0e:	2301      	movs	r3, #1
 8015c10:	1076      	asrs	r6, r6, #1
 8015c12:	3708      	adds	r7, #8
 8015c14:	e773      	b.n	8015afe <_dtoa_r+0x3d6>
 8015c16:	2502      	movs	r5, #2
 8015c18:	e775      	b.n	8015b06 <_dtoa_r+0x3de>
 8015c1a:	9e04      	ldr	r6, [sp, #16]
 8015c1c:	465f      	mov	r7, fp
 8015c1e:	e792      	b.n	8015b46 <_dtoa_r+0x41e>
 8015c20:	9900      	ldr	r1, [sp, #0]
 8015c22:	4b50      	ldr	r3, [pc, #320]	; (8015d64 <_dtoa_r+0x63c>)
 8015c24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c28:	4431      	add	r1, r6
 8015c2a:	9102      	str	r1, [sp, #8]
 8015c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c2e:	eeb0 9a47 	vmov.f32	s18, s14
 8015c32:	eef0 9a67 	vmov.f32	s19, s15
 8015c36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015c3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015c3e:	2900      	cmp	r1, #0
 8015c40:	d044      	beq.n	8015ccc <_dtoa_r+0x5a4>
 8015c42:	494e      	ldr	r1, [pc, #312]	; (8015d7c <_dtoa_r+0x654>)
 8015c44:	2000      	movs	r0, #0
 8015c46:	f7ea fe29 	bl	800089c <__aeabi_ddiv>
 8015c4a:	ec53 2b19 	vmov	r2, r3, d9
 8015c4e:	f7ea fb43 	bl	80002d8 <__aeabi_dsub>
 8015c52:	9d00      	ldr	r5, [sp, #0]
 8015c54:	ec41 0b19 	vmov	d9, r0, r1
 8015c58:	4649      	mov	r1, r9
 8015c5a:	4640      	mov	r0, r8
 8015c5c:	f7ea ffa4 	bl	8000ba8 <__aeabi_d2iz>
 8015c60:	4606      	mov	r6, r0
 8015c62:	f7ea fc87 	bl	8000574 <__aeabi_i2d>
 8015c66:	4602      	mov	r2, r0
 8015c68:	460b      	mov	r3, r1
 8015c6a:	4640      	mov	r0, r8
 8015c6c:	4649      	mov	r1, r9
 8015c6e:	f7ea fb33 	bl	80002d8 <__aeabi_dsub>
 8015c72:	3630      	adds	r6, #48	; 0x30
 8015c74:	f805 6b01 	strb.w	r6, [r5], #1
 8015c78:	ec53 2b19 	vmov	r2, r3, d9
 8015c7c:	4680      	mov	r8, r0
 8015c7e:	4689      	mov	r9, r1
 8015c80:	f7ea ff54 	bl	8000b2c <__aeabi_dcmplt>
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d164      	bne.n	8015d52 <_dtoa_r+0x62a>
 8015c88:	4642      	mov	r2, r8
 8015c8a:	464b      	mov	r3, r9
 8015c8c:	4937      	ldr	r1, [pc, #220]	; (8015d6c <_dtoa_r+0x644>)
 8015c8e:	2000      	movs	r0, #0
 8015c90:	f7ea fb22 	bl	80002d8 <__aeabi_dsub>
 8015c94:	ec53 2b19 	vmov	r2, r3, d9
 8015c98:	f7ea ff48 	bl	8000b2c <__aeabi_dcmplt>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	f040 80b6 	bne.w	8015e0e <_dtoa_r+0x6e6>
 8015ca2:	9b02      	ldr	r3, [sp, #8]
 8015ca4:	429d      	cmp	r5, r3
 8015ca6:	f43f af7c 	beq.w	8015ba2 <_dtoa_r+0x47a>
 8015caa:	4b31      	ldr	r3, [pc, #196]	; (8015d70 <_dtoa_r+0x648>)
 8015cac:	ec51 0b19 	vmov	r0, r1, d9
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	f7ea fcc9 	bl	8000648 <__aeabi_dmul>
 8015cb6:	4b2e      	ldr	r3, [pc, #184]	; (8015d70 <_dtoa_r+0x648>)
 8015cb8:	ec41 0b19 	vmov	d9, r0, r1
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	4640      	mov	r0, r8
 8015cc0:	4649      	mov	r1, r9
 8015cc2:	f7ea fcc1 	bl	8000648 <__aeabi_dmul>
 8015cc6:	4680      	mov	r8, r0
 8015cc8:	4689      	mov	r9, r1
 8015cca:	e7c5      	b.n	8015c58 <_dtoa_r+0x530>
 8015ccc:	ec51 0b17 	vmov	r0, r1, d7
 8015cd0:	f7ea fcba 	bl	8000648 <__aeabi_dmul>
 8015cd4:	9b02      	ldr	r3, [sp, #8]
 8015cd6:	9d00      	ldr	r5, [sp, #0]
 8015cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cda:	ec41 0b19 	vmov	d9, r0, r1
 8015cde:	4649      	mov	r1, r9
 8015ce0:	4640      	mov	r0, r8
 8015ce2:	f7ea ff61 	bl	8000ba8 <__aeabi_d2iz>
 8015ce6:	4606      	mov	r6, r0
 8015ce8:	f7ea fc44 	bl	8000574 <__aeabi_i2d>
 8015cec:	3630      	adds	r6, #48	; 0x30
 8015cee:	4602      	mov	r2, r0
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	4640      	mov	r0, r8
 8015cf4:	4649      	mov	r1, r9
 8015cf6:	f7ea faef 	bl	80002d8 <__aeabi_dsub>
 8015cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8015cfe:	9b02      	ldr	r3, [sp, #8]
 8015d00:	429d      	cmp	r5, r3
 8015d02:	4680      	mov	r8, r0
 8015d04:	4689      	mov	r9, r1
 8015d06:	f04f 0200 	mov.w	r2, #0
 8015d0a:	d124      	bne.n	8015d56 <_dtoa_r+0x62e>
 8015d0c:	4b1b      	ldr	r3, [pc, #108]	; (8015d7c <_dtoa_r+0x654>)
 8015d0e:	ec51 0b19 	vmov	r0, r1, d9
 8015d12:	f7ea fae3 	bl	80002dc <__adddf3>
 8015d16:	4602      	mov	r2, r0
 8015d18:	460b      	mov	r3, r1
 8015d1a:	4640      	mov	r0, r8
 8015d1c:	4649      	mov	r1, r9
 8015d1e:	f7ea ff23 	bl	8000b68 <__aeabi_dcmpgt>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	d173      	bne.n	8015e0e <_dtoa_r+0x6e6>
 8015d26:	ec53 2b19 	vmov	r2, r3, d9
 8015d2a:	4914      	ldr	r1, [pc, #80]	; (8015d7c <_dtoa_r+0x654>)
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	f7ea fad3 	bl	80002d8 <__aeabi_dsub>
 8015d32:	4602      	mov	r2, r0
 8015d34:	460b      	mov	r3, r1
 8015d36:	4640      	mov	r0, r8
 8015d38:	4649      	mov	r1, r9
 8015d3a:	f7ea fef7 	bl	8000b2c <__aeabi_dcmplt>
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	f43f af2f 	beq.w	8015ba2 <_dtoa_r+0x47a>
 8015d44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015d46:	1e6b      	subs	r3, r5, #1
 8015d48:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015d4e:	2b30      	cmp	r3, #48	; 0x30
 8015d50:	d0f8      	beq.n	8015d44 <_dtoa_r+0x61c>
 8015d52:	46bb      	mov	fp, r7
 8015d54:	e04a      	b.n	8015dec <_dtoa_r+0x6c4>
 8015d56:	4b06      	ldr	r3, [pc, #24]	; (8015d70 <_dtoa_r+0x648>)
 8015d58:	f7ea fc76 	bl	8000648 <__aeabi_dmul>
 8015d5c:	4680      	mov	r8, r0
 8015d5e:	4689      	mov	r9, r1
 8015d60:	e7bd      	b.n	8015cde <_dtoa_r+0x5b6>
 8015d62:	bf00      	nop
 8015d64:	0801c180 	.word	0x0801c180
 8015d68:	0801c158 	.word	0x0801c158
 8015d6c:	3ff00000 	.word	0x3ff00000
 8015d70:	40240000 	.word	0x40240000
 8015d74:	401c0000 	.word	0x401c0000
 8015d78:	40140000 	.word	0x40140000
 8015d7c:	3fe00000 	.word	0x3fe00000
 8015d80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015d84:	9d00      	ldr	r5, [sp, #0]
 8015d86:	4642      	mov	r2, r8
 8015d88:	464b      	mov	r3, r9
 8015d8a:	4630      	mov	r0, r6
 8015d8c:	4639      	mov	r1, r7
 8015d8e:	f7ea fd85 	bl	800089c <__aeabi_ddiv>
 8015d92:	f7ea ff09 	bl	8000ba8 <__aeabi_d2iz>
 8015d96:	9001      	str	r0, [sp, #4]
 8015d98:	f7ea fbec 	bl	8000574 <__aeabi_i2d>
 8015d9c:	4642      	mov	r2, r8
 8015d9e:	464b      	mov	r3, r9
 8015da0:	f7ea fc52 	bl	8000648 <__aeabi_dmul>
 8015da4:	4602      	mov	r2, r0
 8015da6:	460b      	mov	r3, r1
 8015da8:	4630      	mov	r0, r6
 8015daa:	4639      	mov	r1, r7
 8015dac:	f7ea fa94 	bl	80002d8 <__aeabi_dsub>
 8015db0:	9e01      	ldr	r6, [sp, #4]
 8015db2:	9f04      	ldr	r7, [sp, #16]
 8015db4:	3630      	adds	r6, #48	; 0x30
 8015db6:	f805 6b01 	strb.w	r6, [r5], #1
 8015dba:	9e00      	ldr	r6, [sp, #0]
 8015dbc:	1bae      	subs	r6, r5, r6
 8015dbe:	42b7      	cmp	r7, r6
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	460b      	mov	r3, r1
 8015dc4:	d134      	bne.n	8015e30 <_dtoa_r+0x708>
 8015dc6:	f7ea fa89 	bl	80002dc <__adddf3>
 8015dca:	4642      	mov	r2, r8
 8015dcc:	464b      	mov	r3, r9
 8015dce:	4606      	mov	r6, r0
 8015dd0:	460f      	mov	r7, r1
 8015dd2:	f7ea fec9 	bl	8000b68 <__aeabi_dcmpgt>
 8015dd6:	b9c8      	cbnz	r0, 8015e0c <_dtoa_r+0x6e4>
 8015dd8:	4642      	mov	r2, r8
 8015dda:	464b      	mov	r3, r9
 8015ddc:	4630      	mov	r0, r6
 8015dde:	4639      	mov	r1, r7
 8015de0:	f7ea fe9a 	bl	8000b18 <__aeabi_dcmpeq>
 8015de4:	b110      	cbz	r0, 8015dec <_dtoa_r+0x6c4>
 8015de6:	9b01      	ldr	r3, [sp, #4]
 8015de8:	07db      	lsls	r3, r3, #31
 8015dea:	d40f      	bmi.n	8015e0c <_dtoa_r+0x6e4>
 8015dec:	4651      	mov	r1, sl
 8015dee:	4620      	mov	r0, r4
 8015df0:	f000 fbcc 	bl	801658c <_Bfree>
 8015df4:	2300      	movs	r3, #0
 8015df6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015df8:	702b      	strb	r3, [r5, #0]
 8015dfa:	f10b 0301 	add.w	r3, fp, #1
 8015dfe:	6013      	str	r3, [r2, #0]
 8015e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	f43f ace2 	beq.w	80157cc <_dtoa_r+0xa4>
 8015e08:	601d      	str	r5, [r3, #0]
 8015e0a:	e4df      	b.n	80157cc <_dtoa_r+0xa4>
 8015e0c:	465f      	mov	r7, fp
 8015e0e:	462b      	mov	r3, r5
 8015e10:	461d      	mov	r5, r3
 8015e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015e16:	2a39      	cmp	r2, #57	; 0x39
 8015e18:	d106      	bne.n	8015e28 <_dtoa_r+0x700>
 8015e1a:	9a00      	ldr	r2, [sp, #0]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d1f7      	bne.n	8015e10 <_dtoa_r+0x6e8>
 8015e20:	9900      	ldr	r1, [sp, #0]
 8015e22:	2230      	movs	r2, #48	; 0x30
 8015e24:	3701      	adds	r7, #1
 8015e26:	700a      	strb	r2, [r1, #0]
 8015e28:	781a      	ldrb	r2, [r3, #0]
 8015e2a:	3201      	adds	r2, #1
 8015e2c:	701a      	strb	r2, [r3, #0]
 8015e2e:	e790      	b.n	8015d52 <_dtoa_r+0x62a>
 8015e30:	4ba3      	ldr	r3, [pc, #652]	; (80160c0 <_dtoa_r+0x998>)
 8015e32:	2200      	movs	r2, #0
 8015e34:	f7ea fc08 	bl	8000648 <__aeabi_dmul>
 8015e38:	2200      	movs	r2, #0
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	4606      	mov	r6, r0
 8015e3e:	460f      	mov	r7, r1
 8015e40:	f7ea fe6a 	bl	8000b18 <__aeabi_dcmpeq>
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d09e      	beq.n	8015d86 <_dtoa_r+0x65e>
 8015e48:	e7d0      	b.n	8015dec <_dtoa_r+0x6c4>
 8015e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e4c:	2a00      	cmp	r2, #0
 8015e4e:	f000 80ca 	beq.w	8015fe6 <_dtoa_r+0x8be>
 8015e52:	9a07      	ldr	r2, [sp, #28]
 8015e54:	2a01      	cmp	r2, #1
 8015e56:	f300 80ad 	bgt.w	8015fb4 <_dtoa_r+0x88c>
 8015e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e5c:	2a00      	cmp	r2, #0
 8015e5e:	f000 80a5 	beq.w	8015fac <_dtoa_r+0x884>
 8015e62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015e66:	9e08      	ldr	r6, [sp, #32]
 8015e68:	9d05      	ldr	r5, [sp, #20]
 8015e6a:	9a05      	ldr	r2, [sp, #20]
 8015e6c:	441a      	add	r2, r3
 8015e6e:	9205      	str	r2, [sp, #20]
 8015e70:	9a06      	ldr	r2, [sp, #24]
 8015e72:	2101      	movs	r1, #1
 8015e74:	441a      	add	r2, r3
 8015e76:	4620      	mov	r0, r4
 8015e78:	9206      	str	r2, [sp, #24]
 8015e7a:	f000 fc87 	bl	801678c <__i2b>
 8015e7e:	4607      	mov	r7, r0
 8015e80:	b165      	cbz	r5, 8015e9c <_dtoa_r+0x774>
 8015e82:	9b06      	ldr	r3, [sp, #24]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	dd09      	ble.n	8015e9c <_dtoa_r+0x774>
 8015e88:	42ab      	cmp	r3, r5
 8015e8a:	9a05      	ldr	r2, [sp, #20]
 8015e8c:	bfa8      	it	ge
 8015e8e:	462b      	movge	r3, r5
 8015e90:	1ad2      	subs	r2, r2, r3
 8015e92:	9205      	str	r2, [sp, #20]
 8015e94:	9a06      	ldr	r2, [sp, #24]
 8015e96:	1aed      	subs	r5, r5, r3
 8015e98:	1ad3      	subs	r3, r2, r3
 8015e9a:	9306      	str	r3, [sp, #24]
 8015e9c:	9b08      	ldr	r3, [sp, #32]
 8015e9e:	b1f3      	cbz	r3, 8015ede <_dtoa_r+0x7b6>
 8015ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	f000 80a3 	beq.w	8015fee <_dtoa_r+0x8c6>
 8015ea8:	2e00      	cmp	r6, #0
 8015eaa:	dd10      	ble.n	8015ece <_dtoa_r+0x7a6>
 8015eac:	4639      	mov	r1, r7
 8015eae:	4632      	mov	r2, r6
 8015eb0:	4620      	mov	r0, r4
 8015eb2:	f000 fd2b 	bl	801690c <__pow5mult>
 8015eb6:	4652      	mov	r2, sl
 8015eb8:	4601      	mov	r1, r0
 8015eba:	4607      	mov	r7, r0
 8015ebc:	4620      	mov	r0, r4
 8015ebe:	f000 fc7b 	bl	80167b8 <__multiply>
 8015ec2:	4651      	mov	r1, sl
 8015ec4:	4680      	mov	r8, r0
 8015ec6:	4620      	mov	r0, r4
 8015ec8:	f000 fb60 	bl	801658c <_Bfree>
 8015ecc:	46c2      	mov	sl, r8
 8015ece:	9b08      	ldr	r3, [sp, #32]
 8015ed0:	1b9a      	subs	r2, r3, r6
 8015ed2:	d004      	beq.n	8015ede <_dtoa_r+0x7b6>
 8015ed4:	4651      	mov	r1, sl
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	f000 fd18 	bl	801690c <__pow5mult>
 8015edc:	4682      	mov	sl, r0
 8015ede:	2101      	movs	r1, #1
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	f000 fc53 	bl	801678c <__i2b>
 8015ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	4606      	mov	r6, r0
 8015eec:	f340 8081 	ble.w	8015ff2 <_dtoa_r+0x8ca>
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	4601      	mov	r1, r0
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f000 fd09 	bl	801690c <__pow5mult>
 8015efa:	9b07      	ldr	r3, [sp, #28]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	4606      	mov	r6, r0
 8015f00:	dd7a      	ble.n	8015ff8 <_dtoa_r+0x8d0>
 8015f02:	f04f 0800 	mov.w	r8, #0
 8015f06:	6933      	ldr	r3, [r6, #16]
 8015f08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015f0c:	6918      	ldr	r0, [r3, #16]
 8015f0e:	f000 fbef 	bl	80166f0 <__hi0bits>
 8015f12:	f1c0 0020 	rsb	r0, r0, #32
 8015f16:	9b06      	ldr	r3, [sp, #24]
 8015f18:	4418      	add	r0, r3
 8015f1a:	f010 001f 	ands.w	r0, r0, #31
 8015f1e:	f000 8094 	beq.w	801604a <_dtoa_r+0x922>
 8015f22:	f1c0 0320 	rsb	r3, r0, #32
 8015f26:	2b04      	cmp	r3, #4
 8015f28:	f340 8085 	ble.w	8016036 <_dtoa_r+0x90e>
 8015f2c:	9b05      	ldr	r3, [sp, #20]
 8015f2e:	f1c0 001c 	rsb	r0, r0, #28
 8015f32:	4403      	add	r3, r0
 8015f34:	9305      	str	r3, [sp, #20]
 8015f36:	9b06      	ldr	r3, [sp, #24]
 8015f38:	4403      	add	r3, r0
 8015f3a:	4405      	add	r5, r0
 8015f3c:	9306      	str	r3, [sp, #24]
 8015f3e:	9b05      	ldr	r3, [sp, #20]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	dd05      	ble.n	8015f50 <_dtoa_r+0x828>
 8015f44:	4651      	mov	r1, sl
 8015f46:	461a      	mov	r2, r3
 8015f48:	4620      	mov	r0, r4
 8015f4a:	f000 fd39 	bl	80169c0 <__lshift>
 8015f4e:	4682      	mov	sl, r0
 8015f50:	9b06      	ldr	r3, [sp, #24]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	dd05      	ble.n	8015f62 <_dtoa_r+0x83a>
 8015f56:	4631      	mov	r1, r6
 8015f58:	461a      	mov	r2, r3
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	f000 fd30 	bl	80169c0 <__lshift>
 8015f60:	4606      	mov	r6, r0
 8015f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d072      	beq.n	801604e <_dtoa_r+0x926>
 8015f68:	4631      	mov	r1, r6
 8015f6a:	4650      	mov	r0, sl
 8015f6c:	f000 fd94 	bl	8016a98 <__mcmp>
 8015f70:	2800      	cmp	r0, #0
 8015f72:	da6c      	bge.n	801604e <_dtoa_r+0x926>
 8015f74:	2300      	movs	r3, #0
 8015f76:	4651      	mov	r1, sl
 8015f78:	220a      	movs	r2, #10
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	f000 fb28 	bl	80165d0 <__multadd>
 8015f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015f86:	4682      	mov	sl, r0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	f000 81b0 	beq.w	80162ee <_dtoa_r+0xbc6>
 8015f8e:	2300      	movs	r3, #0
 8015f90:	4639      	mov	r1, r7
 8015f92:	220a      	movs	r2, #10
 8015f94:	4620      	mov	r0, r4
 8015f96:	f000 fb1b 	bl	80165d0 <__multadd>
 8015f9a:	9b01      	ldr	r3, [sp, #4]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	4607      	mov	r7, r0
 8015fa0:	f300 8096 	bgt.w	80160d0 <_dtoa_r+0x9a8>
 8015fa4:	9b07      	ldr	r3, [sp, #28]
 8015fa6:	2b02      	cmp	r3, #2
 8015fa8:	dc59      	bgt.n	801605e <_dtoa_r+0x936>
 8015faa:	e091      	b.n	80160d0 <_dtoa_r+0x9a8>
 8015fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015fb2:	e758      	b.n	8015e66 <_dtoa_r+0x73e>
 8015fb4:	9b04      	ldr	r3, [sp, #16]
 8015fb6:	1e5e      	subs	r6, r3, #1
 8015fb8:	9b08      	ldr	r3, [sp, #32]
 8015fba:	42b3      	cmp	r3, r6
 8015fbc:	bfbf      	itttt	lt
 8015fbe:	9b08      	ldrlt	r3, [sp, #32]
 8015fc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015fc2:	9608      	strlt	r6, [sp, #32]
 8015fc4:	1af3      	sublt	r3, r6, r3
 8015fc6:	bfb4      	ite	lt
 8015fc8:	18d2      	addlt	r2, r2, r3
 8015fca:	1b9e      	subge	r6, r3, r6
 8015fcc:	9b04      	ldr	r3, [sp, #16]
 8015fce:	bfbc      	itt	lt
 8015fd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015fd2:	2600      	movlt	r6, #0
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	bfb7      	itett	lt
 8015fd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015fdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015fe0:	1a9d      	sublt	r5, r3, r2
 8015fe2:	2300      	movlt	r3, #0
 8015fe4:	e741      	b.n	8015e6a <_dtoa_r+0x742>
 8015fe6:	9e08      	ldr	r6, [sp, #32]
 8015fe8:	9d05      	ldr	r5, [sp, #20]
 8015fea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015fec:	e748      	b.n	8015e80 <_dtoa_r+0x758>
 8015fee:	9a08      	ldr	r2, [sp, #32]
 8015ff0:	e770      	b.n	8015ed4 <_dtoa_r+0x7ac>
 8015ff2:	9b07      	ldr	r3, [sp, #28]
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	dc19      	bgt.n	801602c <_dtoa_r+0x904>
 8015ff8:	9b02      	ldr	r3, [sp, #8]
 8015ffa:	b9bb      	cbnz	r3, 801602c <_dtoa_r+0x904>
 8015ffc:	9b03      	ldr	r3, [sp, #12]
 8015ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016002:	b99b      	cbnz	r3, 801602c <_dtoa_r+0x904>
 8016004:	9b03      	ldr	r3, [sp, #12]
 8016006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801600a:	0d1b      	lsrs	r3, r3, #20
 801600c:	051b      	lsls	r3, r3, #20
 801600e:	b183      	cbz	r3, 8016032 <_dtoa_r+0x90a>
 8016010:	9b05      	ldr	r3, [sp, #20]
 8016012:	3301      	adds	r3, #1
 8016014:	9305      	str	r3, [sp, #20]
 8016016:	9b06      	ldr	r3, [sp, #24]
 8016018:	3301      	adds	r3, #1
 801601a:	9306      	str	r3, [sp, #24]
 801601c:	f04f 0801 	mov.w	r8, #1
 8016020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016022:	2b00      	cmp	r3, #0
 8016024:	f47f af6f 	bne.w	8015f06 <_dtoa_r+0x7de>
 8016028:	2001      	movs	r0, #1
 801602a:	e774      	b.n	8015f16 <_dtoa_r+0x7ee>
 801602c:	f04f 0800 	mov.w	r8, #0
 8016030:	e7f6      	b.n	8016020 <_dtoa_r+0x8f8>
 8016032:	4698      	mov	r8, r3
 8016034:	e7f4      	b.n	8016020 <_dtoa_r+0x8f8>
 8016036:	d082      	beq.n	8015f3e <_dtoa_r+0x816>
 8016038:	9a05      	ldr	r2, [sp, #20]
 801603a:	331c      	adds	r3, #28
 801603c:	441a      	add	r2, r3
 801603e:	9205      	str	r2, [sp, #20]
 8016040:	9a06      	ldr	r2, [sp, #24]
 8016042:	441a      	add	r2, r3
 8016044:	441d      	add	r5, r3
 8016046:	9206      	str	r2, [sp, #24]
 8016048:	e779      	b.n	8015f3e <_dtoa_r+0x816>
 801604a:	4603      	mov	r3, r0
 801604c:	e7f4      	b.n	8016038 <_dtoa_r+0x910>
 801604e:	9b04      	ldr	r3, [sp, #16]
 8016050:	2b00      	cmp	r3, #0
 8016052:	dc37      	bgt.n	80160c4 <_dtoa_r+0x99c>
 8016054:	9b07      	ldr	r3, [sp, #28]
 8016056:	2b02      	cmp	r3, #2
 8016058:	dd34      	ble.n	80160c4 <_dtoa_r+0x99c>
 801605a:	9b04      	ldr	r3, [sp, #16]
 801605c:	9301      	str	r3, [sp, #4]
 801605e:	9b01      	ldr	r3, [sp, #4]
 8016060:	b963      	cbnz	r3, 801607c <_dtoa_r+0x954>
 8016062:	4631      	mov	r1, r6
 8016064:	2205      	movs	r2, #5
 8016066:	4620      	mov	r0, r4
 8016068:	f000 fab2 	bl	80165d0 <__multadd>
 801606c:	4601      	mov	r1, r0
 801606e:	4606      	mov	r6, r0
 8016070:	4650      	mov	r0, sl
 8016072:	f000 fd11 	bl	8016a98 <__mcmp>
 8016076:	2800      	cmp	r0, #0
 8016078:	f73f adbb 	bgt.w	8015bf2 <_dtoa_r+0x4ca>
 801607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801607e:	9d00      	ldr	r5, [sp, #0]
 8016080:	ea6f 0b03 	mvn.w	fp, r3
 8016084:	f04f 0800 	mov.w	r8, #0
 8016088:	4631      	mov	r1, r6
 801608a:	4620      	mov	r0, r4
 801608c:	f000 fa7e 	bl	801658c <_Bfree>
 8016090:	2f00      	cmp	r7, #0
 8016092:	f43f aeab 	beq.w	8015dec <_dtoa_r+0x6c4>
 8016096:	f1b8 0f00 	cmp.w	r8, #0
 801609a:	d005      	beq.n	80160a8 <_dtoa_r+0x980>
 801609c:	45b8      	cmp	r8, r7
 801609e:	d003      	beq.n	80160a8 <_dtoa_r+0x980>
 80160a0:	4641      	mov	r1, r8
 80160a2:	4620      	mov	r0, r4
 80160a4:	f000 fa72 	bl	801658c <_Bfree>
 80160a8:	4639      	mov	r1, r7
 80160aa:	4620      	mov	r0, r4
 80160ac:	f000 fa6e 	bl	801658c <_Bfree>
 80160b0:	e69c      	b.n	8015dec <_dtoa_r+0x6c4>
 80160b2:	2600      	movs	r6, #0
 80160b4:	4637      	mov	r7, r6
 80160b6:	e7e1      	b.n	801607c <_dtoa_r+0x954>
 80160b8:	46bb      	mov	fp, r7
 80160ba:	4637      	mov	r7, r6
 80160bc:	e599      	b.n	8015bf2 <_dtoa_r+0x4ca>
 80160be:	bf00      	nop
 80160c0:	40240000 	.word	0x40240000
 80160c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	f000 80c8 	beq.w	801625c <_dtoa_r+0xb34>
 80160cc:	9b04      	ldr	r3, [sp, #16]
 80160ce:	9301      	str	r3, [sp, #4]
 80160d0:	2d00      	cmp	r5, #0
 80160d2:	dd05      	ble.n	80160e0 <_dtoa_r+0x9b8>
 80160d4:	4639      	mov	r1, r7
 80160d6:	462a      	mov	r2, r5
 80160d8:	4620      	mov	r0, r4
 80160da:	f000 fc71 	bl	80169c0 <__lshift>
 80160de:	4607      	mov	r7, r0
 80160e0:	f1b8 0f00 	cmp.w	r8, #0
 80160e4:	d05b      	beq.n	801619e <_dtoa_r+0xa76>
 80160e6:	6879      	ldr	r1, [r7, #4]
 80160e8:	4620      	mov	r0, r4
 80160ea:	f000 fa0f 	bl	801650c <_Balloc>
 80160ee:	4605      	mov	r5, r0
 80160f0:	b928      	cbnz	r0, 80160fe <_dtoa_r+0x9d6>
 80160f2:	4b83      	ldr	r3, [pc, #524]	; (8016300 <_dtoa_r+0xbd8>)
 80160f4:	4602      	mov	r2, r0
 80160f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80160fa:	f7ff bb2e 	b.w	801575a <_dtoa_r+0x32>
 80160fe:	693a      	ldr	r2, [r7, #16]
 8016100:	3202      	adds	r2, #2
 8016102:	0092      	lsls	r2, r2, #2
 8016104:	f107 010c 	add.w	r1, r7, #12
 8016108:	300c      	adds	r0, #12
 801610a:	f7ff fa70 	bl	80155ee <memcpy>
 801610e:	2201      	movs	r2, #1
 8016110:	4629      	mov	r1, r5
 8016112:	4620      	mov	r0, r4
 8016114:	f000 fc54 	bl	80169c0 <__lshift>
 8016118:	9b00      	ldr	r3, [sp, #0]
 801611a:	3301      	adds	r3, #1
 801611c:	9304      	str	r3, [sp, #16]
 801611e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016122:	4413      	add	r3, r2
 8016124:	9308      	str	r3, [sp, #32]
 8016126:	9b02      	ldr	r3, [sp, #8]
 8016128:	f003 0301 	and.w	r3, r3, #1
 801612c:	46b8      	mov	r8, r7
 801612e:	9306      	str	r3, [sp, #24]
 8016130:	4607      	mov	r7, r0
 8016132:	9b04      	ldr	r3, [sp, #16]
 8016134:	4631      	mov	r1, r6
 8016136:	3b01      	subs	r3, #1
 8016138:	4650      	mov	r0, sl
 801613a:	9301      	str	r3, [sp, #4]
 801613c:	f7ff fa6c 	bl	8015618 <quorem>
 8016140:	4641      	mov	r1, r8
 8016142:	9002      	str	r0, [sp, #8]
 8016144:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016148:	4650      	mov	r0, sl
 801614a:	f000 fca5 	bl	8016a98 <__mcmp>
 801614e:	463a      	mov	r2, r7
 8016150:	9005      	str	r0, [sp, #20]
 8016152:	4631      	mov	r1, r6
 8016154:	4620      	mov	r0, r4
 8016156:	f000 fcbb 	bl	8016ad0 <__mdiff>
 801615a:	68c2      	ldr	r2, [r0, #12]
 801615c:	4605      	mov	r5, r0
 801615e:	bb02      	cbnz	r2, 80161a2 <_dtoa_r+0xa7a>
 8016160:	4601      	mov	r1, r0
 8016162:	4650      	mov	r0, sl
 8016164:	f000 fc98 	bl	8016a98 <__mcmp>
 8016168:	4602      	mov	r2, r0
 801616a:	4629      	mov	r1, r5
 801616c:	4620      	mov	r0, r4
 801616e:	9209      	str	r2, [sp, #36]	; 0x24
 8016170:	f000 fa0c 	bl	801658c <_Bfree>
 8016174:	9b07      	ldr	r3, [sp, #28]
 8016176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016178:	9d04      	ldr	r5, [sp, #16]
 801617a:	ea43 0102 	orr.w	r1, r3, r2
 801617e:	9b06      	ldr	r3, [sp, #24]
 8016180:	4319      	orrs	r1, r3
 8016182:	d110      	bne.n	80161a6 <_dtoa_r+0xa7e>
 8016184:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016188:	d029      	beq.n	80161de <_dtoa_r+0xab6>
 801618a:	9b05      	ldr	r3, [sp, #20]
 801618c:	2b00      	cmp	r3, #0
 801618e:	dd02      	ble.n	8016196 <_dtoa_r+0xa6e>
 8016190:	9b02      	ldr	r3, [sp, #8]
 8016192:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016196:	9b01      	ldr	r3, [sp, #4]
 8016198:	f883 9000 	strb.w	r9, [r3]
 801619c:	e774      	b.n	8016088 <_dtoa_r+0x960>
 801619e:	4638      	mov	r0, r7
 80161a0:	e7ba      	b.n	8016118 <_dtoa_r+0x9f0>
 80161a2:	2201      	movs	r2, #1
 80161a4:	e7e1      	b.n	801616a <_dtoa_r+0xa42>
 80161a6:	9b05      	ldr	r3, [sp, #20]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	db04      	blt.n	80161b6 <_dtoa_r+0xa8e>
 80161ac:	9907      	ldr	r1, [sp, #28]
 80161ae:	430b      	orrs	r3, r1
 80161b0:	9906      	ldr	r1, [sp, #24]
 80161b2:	430b      	orrs	r3, r1
 80161b4:	d120      	bne.n	80161f8 <_dtoa_r+0xad0>
 80161b6:	2a00      	cmp	r2, #0
 80161b8:	dded      	ble.n	8016196 <_dtoa_r+0xa6e>
 80161ba:	4651      	mov	r1, sl
 80161bc:	2201      	movs	r2, #1
 80161be:	4620      	mov	r0, r4
 80161c0:	f000 fbfe 	bl	80169c0 <__lshift>
 80161c4:	4631      	mov	r1, r6
 80161c6:	4682      	mov	sl, r0
 80161c8:	f000 fc66 	bl	8016a98 <__mcmp>
 80161cc:	2800      	cmp	r0, #0
 80161ce:	dc03      	bgt.n	80161d8 <_dtoa_r+0xab0>
 80161d0:	d1e1      	bne.n	8016196 <_dtoa_r+0xa6e>
 80161d2:	f019 0f01 	tst.w	r9, #1
 80161d6:	d0de      	beq.n	8016196 <_dtoa_r+0xa6e>
 80161d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80161dc:	d1d8      	bne.n	8016190 <_dtoa_r+0xa68>
 80161de:	9a01      	ldr	r2, [sp, #4]
 80161e0:	2339      	movs	r3, #57	; 0x39
 80161e2:	7013      	strb	r3, [r2, #0]
 80161e4:	462b      	mov	r3, r5
 80161e6:	461d      	mov	r5, r3
 80161e8:	3b01      	subs	r3, #1
 80161ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80161ee:	2a39      	cmp	r2, #57	; 0x39
 80161f0:	d06c      	beq.n	80162cc <_dtoa_r+0xba4>
 80161f2:	3201      	adds	r2, #1
 80161f4:	701a      	strb	r2, [r3, #0]
 80161f6:	e747      	b.n	8016088 <_dtoa_r+0x960>
 80161f8:	2a00      	cmp	r2, #0
 80161fa:	dd07      	ble.n	801620c <_dtoa_r+0xae4>
 80161fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016200:	d0ed      	beq.n	80161de <_dtoa_r+0xab6>
 8016202:	9a01      	ldr	r2, [sp, #4]
 8016204:	f109 0301 	add.w	r3, r9, #1
 8016208:	7013      	strb	r3, [r2, #0]
 801620a:	e73d      	b.n	8016088 <_dtoa_r+0x960>
 801620c:	9b04      	ldr	r3, [sp, #16]
 801620e:	9a08      	ldr	r2, [sp, #32]
 8016210:	f803 9c01 	strb.w	r9, [r3, #-1]
 8016214:	4293      	cmp	r3, r2
 8016216:	d043      	beq.n	80162a0 <_dtoa_r+0xb78>
 8016218:	4651      	mov	r1, sl
 801621a:	2300      	movs	r3, #0
 801621c:	220a      	movs	r2, #10
 801621e:	4620      	mov	r0, r4
 8016220:	f000 f9d6 	bl	80165d0 <__multadd>
 8016224:	45b8      	cmp	r8, r7
 8016226:	4682      	mov	sl, r0
 8016228:	f04f 0300 	mov.w	r3, #0
 801622c:	f04f 020a 	mov.w	r2, #10
 8016230:	4641      	mov	r1, r8
 8016232:	4620      	mov	r0, r4
 8016234:	d107      	bne.n	8016246 <_dtoa_r+0xb1e>
 8016236:	f000 f9cb 	bl	80165d0 <__multadd>
 801623a:	4680      	mov	r8, r0
 801623c:	4607      	mov	r7, r0
 801623e:	9b04      	ldr	r3, [sp, #16]
 8016240:	3301      	adds	r3, #1
 8016242:	9304      	str	r3, [sp, #16]
 8016244:	e775      	b.n	8016132 <_dtoa_r+0xa0a>
 8016246:	f000 f9c3 	bl	80165d0 <__multadd>
 801624a:	4639      	mov	r1, r7
 801624c:	4680      	mov	r8, r0
 801624e:	2300      	movs	r3, #0
 8016250:	220a      	movs	r2, #10
 8016252:	4620      	mov	r0, r4
 8016254:	f000 f9bc 	bl	80165d0 <__multadd>
 8016258:	4607      	mov	r7, r0
 801625a:	e7f0      	b.n	801623e <_dtoa_r+0xb16>
 801625c:	9b04      	ldr	r3, [sp, #16]
 801625e:	9301      	str	r3, [sp, #4]
 8016260:	9d00      	ldr	r5, [sp, #0]
 8016262:	4631      	mov	r1, r6
 8016264:	4650      	mov	r0, sl
 8016266:	f7ff f9d7 	bl	8015618 <quorem>
 801626a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801626e:	9b00      	ldr	r3, [sp, #0]
 8016270:	f805 9b01 	strb.w	r9, [r5], #1
 8016274:	1aea      	subs	r2, r5, r3
 8016276:	9b01      	ldr	r3, [sp, #4]
 8016278:	4293      	cmp	r3, r2
 801627a:	dd07      	ble.n	801628c <_dtoa_r+0xb64>
 801627c:	4651      	mov	r1, sl
 801627e:	2300      	movs	r3, #0
 8016280:	220a      	movs	r2, #10
 8016282:	4620      	mov	r0, r4
 8016284:	f000 f9a4 	bl	80165d0 <__multadd>
 8016288:	4682      	mov	sl, r0
 801628a:	e7ea      	b.n	8016262 <_dtoa_r+0xb3a>
 801628c:	9b01      	ldr	r3, [sp, #4]
 801628e:	2b00      	cmp	r3, #0
 8016290:	bfc8      	it	gt
 8016292:	461d      	movgt	r5, r3
 8016294:	9b00      	ldr	r3, [sp, #0]
 8016296:	bfd8      	it	le
 8016298:	2501      	movle	r5, #1
 801629a:	441d      	add	r5, r3
 801629c:	f04f 0800 	mov.w	r8, #0
 80162a0:	4651      	mov	r1, sl
 80162a2:	2201      	movs	r2, #1
 80162a4:	4620      	mov	r0, r4
 80162a6:	f000 fb8b 	bl	80169c0 <__lshift>
 80162aa:	4631      	mov	r1, r6
 80162ac:	4682      	mov	sl, r0
 80162ae:	f000 fbf3 	bl	8016a98 <__mcmp>
 80162b2:	2800      	cmp	r0, #0
 80162b4:	dc96      	bgt.n	80161e4 <_dtoa_r+0xabc>
 80162b6:	d102      	bne.n	80162be <_dtoa_r+0xb96>
 80162b8:	f019 0f01 	tst.w	r9, #1
 80162bc:	d192      	bne.n	80161e4 <_dtoa_r+0xabc>
 80162be:	462b      	mov	r3, r5
 80162c0:	461d      	mov	r5, r3
 80162c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80162c6:	2a30      	cmp	r2, #48	; 0x30
 80162c8:	d0fa      	beq.n	80162c0 <_dtoa_r+0xb98>
 80162ca:	e6dd      	b.n	8016088 <_dtoa_r+0x960>
 80162cc:	9a00      	ldr	r2, [sp, #0]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	d189      	bne.n	80161e6 <_dtoa_r+0xabe>
 80162d2:	f10b 0b01 	add.w	fp, fp, #1
 80162d6:	2331      	movs	r3, #49	; 0x31
 80162d8:	e796      	b.n	8016208 <_dtoa_r+0xae0>
 80162da:	4b0a      	ldr	r3, [pc, #40]	; (8016304 <_dtoa_r+0xbdc>)
 80162dc:	f7ff ba99 	b.w	8015812 <_dtoa_r+0xea>
 80162e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	f47f aa6d 	bne.w	80157c2 <_dtoa_r+0x9a>
 80162e8:	4b07      	ldr	r3, [pc, #28]	; (8016308 <_dtoa_r+0xbe0>)
 80162ea:	f7ff ba92 	b.w	8015812 <_dtoa_r+0xea>
 80162ee:	9b01      	ldr	r3, [sp, #4]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	dcb5      	bgt.n	8016260 <_dtoa_r+0xb38>
 80162f4:	9b07      	ldr	r3, [sp, #28]
 80162f6:	2b02      	cmp	r3, #2
 80162f8:	f73f aeb1 	bgt.w	801605e <_dtoa_r+0x936>
 80162fc:	e7b0      	b.n	8016260 <_dtoa_r+0xb38>
 80162fe:	bf00      	nop
 8016300:	0801c0eb 	.word	0x0801c0eb
 8016304:	0801c3d0 	.word	0x0801c3d0
 8016308:	0801c06f 	.word	0x0801c06f

0801630c <_free_r>:
 801630c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801630e:	2900      	cmp	r1, #0
 8016310:	d044      	beq.n	801639c <_free_r+0x90>
 8016312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016316:	9001      	str	r0, [sp, #4]
 8016318:	2b00      	cmp	r3, #0
 801631a:	f1a1 0404 	sub.w	r4, r1, #4
 801631e:	bfb8      	it	lt
 8016320:	18e4      	addlt	r4, r4, r3
 8016322:	f000 f8e7 	bl	80164f4 <__malloc_lock>
 8016326:	4a1e      	ldr	r2, [pc, #120]	; (80163a0 <_free_r+0x94>)
 8016328:	9801      	ldr	r0, [sp, #4]
 801632a:	6813      	ldr	r3, [r2, #0]
 801632c:	b933      	cbnz	r3, 801633c <_free_r+0x30>
 801632e:	6063      	str	r3, [r4, #4]
 8016330:	6014      	str	r4, [r2, #0]
 8016332:	b003      	add	sp, #12
 8016334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016338:	f000 b8e2 	b.w	8016500 <__malloc_unlock>
 801633c:	42a3      	cmp	r3, r4
 801633e:	d908      	bls.n	8016352 <_free_r+0x46>
 8016340:	6825      	ldr	r5, [r4, #0]
 8016342:	1961      	adds	r1, r4, r5
 8016344:	428b      	cmp	r3, r1
 8016346:	bf01      	itttt	eq
 8016348:	6819      	ldreq	r1, [r3, #0]
 801634a:	685b      	ldreq	r3, [r3, #4]
 801634c:	1949      	addeq	r1, r1, r5
 801634e:	6021      	streq	r1, [r4, #0]
 8016350:	e7ed      	b.n	801632e <_free_r+0x22>
 8016352:	461a      	mov	r2, r3
 8016354:	685b      	ldr	r3, [r3, #4]
 8016356:	b10b      	cbz	r3, 801635c <_free_r+0x50>
 8016358:	42a3      	cmp	r3, r4
 801635a:	d9fa      	bls.n	8016352 <_free_r+0x46>
 801635c:	6811      	ldr	r1, [r2, #0]
 801635e:	1855      	adds	r5, r2, r1
 8016360:	42a5      	cmp	r5, r4
 8016362:	d10b      	bne.n	801637c <_free_r+0x70>
 8016364:	6824      	ldr	r4, [r4, #0]
 8016366:	4421      	add	r1, r4
 8016368:	1854      	adds	r4, r2, r1
 801636a:	42a3      	cmp	r3, r4
 801636c:	6011      	str	r1, [r2, #0]
 801636e:	d1e0      	bne.n	8016332 <_free_r+0x26>
 8016370:	681c      	ldr	r4, [r3, #0]
 8016372:	685b      	ldr	r3, [r3, #4]
 8016374:	6053      	str	r3, [r2, #4]
 8016376:	440c      	add	r4, r1
 8016378:	6014      	str	r4, [r2, #0]
 801637a:	e7da      	b.n	8016332 <_free_r+0x26>
 801637c:	d902      	bls.n	8016384 <_free_r+0x78>
 801637e:	230c      	movs	r3, #12
 8016380:	6003      	str	r3, [r0, #0]
 8016382:	e7d6      	b.n	8016332 <_free_r+0x26>
 8016384:	6825      	ldr	r5, [r4, #0]
 8016386:	1961      	adds	r1, r4, r5
 8016388:	428b      	cmp	r3, r1
 801638a:	bf04      	itt	eq
 801638c:	6819      	ldreq	r1, [r3, #0]
 801638e:	685b      	ldreq	r3, [r3, #4]
 8016390:	6063      	str	r3, [r4, #4]
 8016392:	bf04      	itt	eq
 8016394:	1949      	addeq	r1, r1, r5
 8016396:	6021      	streq	r1, [r4, #0]
 8016398:	6054      	str	r4, [r2, #4]
 801639a:	e7ca      	b.n	8016332 <_free_r+0x26>
 801639c:	b003      	add	sp, #12
 801639e:	bd30      	pop	{r4, r5, pc}
 80163a0:	20009098 	.word	0x20009098

080163a4 <malloc>:
 80163a4:	4b02      	ldr	r3, [pc, #8]	; (80163b0 <malloc+0xc>)
 80163a6:	4601      	mov	r1, r0
 80163a8:	6818      	ldr	r0, [r3, #0]
 80163aa:	f000 b823 	b.w	80163f4 <_malloc_r>
 80163ae:	bf00      	nop
 80163b0:	20000070 	.word	0x20000070

080163b4 <sbrk_aligned>:
 80163b4:	b570      	push	{r4, r5, r6, lr}
 80163b6:	4e0e      	ldr	r6, [pc, #56]	; (80163f0 <sbrk_aligned+0x3c>)
 80163b8:	460c      	mov	r4, r1
 80163ba:	6831      	ldr	r1, [r6, #0]
 80163bc:	4605      	mov	r5, r0
 80163be:	b911      	cbnz	r1, 80163c6 <sbrk_aligned+0x12>
 80163c0:	f002 f99c 	bl	80186fc <_sbrk_r>
 80163c4:	6030      	str	r0, [r6, #0]
 80163c6:	4621      	mov	r1, r4
 80163c8:	4628      	mov	r0, r5
 80163ca:	f002 f997 	bl	80186fc <_sbrk_r>
 80163ce:	1c43      	adds	r3, r0, #1
 80163d0:	d00a      	beq.n	80163e8 <sbrk_aligned+0x34>
 80163d2:	1cc4      	adds	r4, r0, #3
 80163d4:	f024 0403 	bic.w	r4, r4, #3
 80163d8:	42a0      	cmp	r0, r4
 80163da:	d007      	beq.n	80163ec <sbrk_aligned+0x38>
 80163dc:	1a21      	subs	r1, r4, r0
 80163de:	4628      	mov	r0, r5
 80163e0:	f002 f98c 	bl	80186fc <_sbrk_r>
 80163e4:	3001      	adds	r0, #1
 80163e6:	d101      	bne.n	80163ec <sbrk_aligned+0x38>
 80163e8:	f04f 34ff 	mov.w	r4, #4294967295
 80163ec:	4620      	mov	r0, r4
 80163ee:	bd70      	pop	{r4, r5, r6, pc}
 80163f0:	2000909c 	.word	0x2000909c

080163f4 <_malloc_r>:
 80163f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163f8:	1ccd      	adds	r5, r1, #3
 80163fa:	f025 0503 	bic.w	r5, r5, #3
 80163fe:	3508      	adds	r5, #8
 8016400:	2d0c      	cmp	r5, #12
 8016402:	bf38      	it	cc
 8016404:	250c      	movcc	r5, #12
 8016406:	2d00      	cmp	r5, #0
 8016408:	4607      	mov	r7, r0
 801640a:	db01      	blt.n	8016410 <_malloc_r+0x1c>
 801640c:	42a9      	cmp	r1, r5
 801640e:	d905      	bls.n	801641c <_malloc_r+0x28>
 8016410:	230c      	movs	r3, #12
 8016412:	603b      	str	r3, [r7, #0]
 8016414:	2600      	movs	r6, #0
 8016416:	4630      	mov	r0, r6
 8016418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801641c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80164f0 <_malloc_r+0xfc>
 8016420:	f000 f868 	bl	80164f4 <__malloc_lock>
 8016424:	f8d8 3000 	ldr.w	r3, [r8]
 8016428:	461c      	mov	r4, r3
 801642a:	bb5c      	cbnz	r4, 8016484 <_malloc_r+0x90>
 801642c:	4629      	mov	r1, r5
 801642e:	4638      	mov	r0, r7
 8016430:	f7ff ffc0 	bl	80163b4 <sbrk_aligned>
 8016434:	1c43      	adds	r3, r0, #1
 8016436:	4604      	mov	r4, r0
 8016438:	d155      	bne.n	80164e6 <_malloc_r+0xf2>
 801643a:	f8d8 4000 	ldr.w	r4, [r8]
 801643e:	4626      	mov	r6, r4
 8016440:	2e00      	cmp	r6, #0
 8016442:	d145      	bne.n	80164d0 <_malloc_r+0xdc>
 8016444:	2c00      	cmp	r4, #0
 8016446:	d048      	beq.n	80164da <_malloc_r+0xe6>
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	4631      	mov	r1, r6
 801644c:	4638      	mov	r0, r7
 801644e:	eb04 0903 	add.w	r9, r4, r3
 8016452:	f002 f953 	bl	80186fc <_sbrk_r>
 8016456:	4581      	cmp	r9, r0
 8016458:	d13f      	bne.n	80164da <_malloc_r+0xe6>
 801645a:	6821      	ldr	r1, [r4, #0]
 801645c:	1a6d      	subs	r5, r5, r1
 801645e:	4629      	mov	r1, r5
 8016460:	4638      	mov	r0, r7
 8016462:	f7ff ffa7 	bl	80163b4 <sbrk_aligned>
 8016466:	3001      	adds	r0, #1
 8016468:	d037      	beq.n	80164da <_malloc_r+0xe6>
 801646a:	6823      	ldr	r3, [r4, #0]
 801646c:	442b      	add	r3, r5
 801646e:	6023      	str	r3, [r4, #0]
 8016470:	f8d8 3000 	ldr.w	r3, [r8]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d038      	beq.n	80164ea <_malloc_r+0xf6>
 8016478:	685a      	ldr	r2, [r3, #4]
 801647a:	42a2      	cmp	r2, r4
 801647c:	d12b      	bne.n	80164d6 <_malloc_r+0xe2>
 801647e:	2200      	movs	r2, #0
 8016480:	605a      	str	r2, [r3, #4]
 8016482:	e00f      	b.n	80164a4 <_malloc_r+0xb0>
 8016484:	6822      	ldr	r2, [r4, #0]
 8016486:	1b52      	subs	r2, r2, r5
 8016488:	d41f      	bmi.n	80164ca <_malloc_r+0xd6>
 801648a:	2a0b      	cmp	r2, #11
 801648c:	d917      	bls.n	80164be <_malloc_r+0xca>
 801648e:	1961      	adds	r1, r4, r5
 8016490:	42a3      	cmp	r3, r4
 8016492:	6025      	str	r5, [r4, #0]
 8016494:	bf18      	it	ne
 8016496:	6059      	strne	r1, [r3, #4]
 8016498:	6863      	ldr	r3, [r4, #4]
 801649a:	bf08      	it	eq
 801649c:	f8c8 1000 	streq.w	r1, [r8]
 80164a0:	5162      	str	r2, [r4, r5]
 80164a2:	604b      	str	r3, [r1, #4]
 80164a4:	4638      	mov	r0, r7
 80164a6:	f104 060b 	add.w	r6, r4, #11
 80164aa:	f000 f829 	bl	8016500 <__malloc_unlock>
 80164ae:	f026 0607 	bic.w	r6, r6, #7
 80164b2:	1d23      	adds	r3, r4, #4
 80164b4:	1af2      	subs	r2, r6, r3
 80164b6:	d0ae      	beq.n	8016416 <_malloc_r+0x22>
 80164b8:	1b9b      	subs	r3, r3, r6
 80164ba:	50a3      	str	r3, [r4, r2]
 80164bc:	e7ab      	b.n	8016416 <_malloc_r+0x22>
 80164be:	42a3      	cmp	r3, r4
 80164c0:	6862      	ldr	r2, [r4, #4]
 80164c2:	d1dd      	bne.n	8016480 <_malloc_r+0x8c>
 80164c4:	f8c8 2000 	str.w	r2, [r8]
 80164c8:	e7ec      	b.n	80164a4 <_malloc_r+0xb0>
 80164ca:	4623      	mov	r3, r4
 80164cc:	6864      	ldr	r4, [r4, #4]
 80164ce:	e7ac      	b.n	801642a <_malloc_r+0x36>
 80164d0:	4634      	mov	r4, r6
 80164d2:	6876      	ldr	r6, [r6, #4]
 80164d4:	e7b4      	b.n	8016440 <_malloc_r+0x4c>
 80164d6:	4613      	mov	r3, r2
 80164d8:	e7cc      	b.n	8016474 <_malloc_r+0x80>
 80164da:	230c      	movs	r3, #12
 80164dc:	603b      	str	r3, [r7, #0]
 80164de:	4638      	mov	r0, r7
 80164e0:	f000 f80e 	bl	8016500 <__malloc_unlock>
 80164e4:	e797      	b.n	8016416 <_malloc_r+0x22>
 80164e6:	6025      	str	r5, [r4, #0]
 80164e8:	e7dc      	b.n	80164a4 <_malloc_r+0xb0>
 80164ea:	605b      	str	r3, [r3, #4]
 80164ec:	deff      	udf	#255	; 0xff
 80164ee:	bf00      	nop
 80164f0:	20009098 	.word	0x20009098

080164f4 <__malloc_lock>:
 80164f4:	4801      	ldr	r0, [pc, #4]	; (80164fc <__malloc_lock+0x8>)
 80164f6:	f7ff b878 	b.w	80155ea <__retarget_lock_acquire_recursive>
 80164fa:	bf00      	nop
 80164fc:	20009094 	.word	0x20009094

08016500 <__malloc_unlock>:
 8016500:	4801      	ldr	r0, [pc, #4]	; (8016508 <__malloc_unlock+0x8>)
 8016502:	f7ff b873 	b.w	80155ec <__retarget_lock_release_recursive>
 8016506:	bf00      	nop
 8016508:	20009094 	.word	0x20009094

0801650c <_Balloc>:
 801650c:	b570      	push	{r4, r5, r6, lr}
 801650e:	69c6      	ldr	r6, [r0, #28]
 8016510:	4604      	mov	r4, r0
 8016512:	460d      	mov	r5, r1
 8016514:	b976      	cbnz	r6, 8016534 <_Balloc+0x28>
 8016516:	2010      	movs	r0, #16
 8016518:	f7ff ff44 	bl	80163a4 <malloc>
 801651c:	4602      	mov	r2, r0
 801651e:	61e0      	str	r0, [r4, #28]
 8016520:	b920      	cbnz	r0, 801652c <_Balloc+0x20>
 8016522:	4b18      	ldr	r3, [pc, #96]	; (8016584 <_Balloc+0x78>)
 8016524:	4818      	ldr	r0, [pc, #96]	; (8016588 <_Balloc+0x7c>)
 8016526:	216b      	movs	r1, #107	; 0x6b
 8016528:	f002 f902 	bl	8018730 <__assert_func>
 801652c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016530:	6006      	str	r6, [r0, #0]
 8016532:	60c6      	str	r6, [r0, #12]
 8016534:	69e6      	ldr	r6, [r4, #28]
 8016536:	68f3      	ldr	r3, [r6, #12]
 8016538:	b183      	cbz	r3, 801655c <_Balloc+0x50>
 801653a:	69e3      	ldr	r3, [r4, #28]
 801653c:	68db      	ldr	r3, [r3, #12]
 801653e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016542:	b9b8      	cbnz	r0, 8016574 <_Balloc+0x68>
 8016544:	2101      	movs	r1, #1
 8016546:	fa01 f605 	lsl.w	r6, r1, r5
 801654a:	1d72      	adds	r2, r6, #5
 801654c:	0092      	lsls	r2, r2, #2
 801654e:	4620      	mov	r0, r4
 8016550:	f002 f90c 	bl	801876c <_calloc_r>
 8016554:	b160      	cbz	r0, 8016570 <_Balloc+0x64>
 8016556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801655a:	e00e      	b.n	801657a <_Balloc+0x6e>
 801655c:	2221      	movs	r2, #33	; 0x21
 801655e:	2104      	movs	r1, #4
 8016560:	4620      	mov	r0, r4
 8016562:	f002 f903 	bl	801876c <_calloc_r>
 8016566:	69e3      	ldr	r3, [r4, #28]
 8016568:	60f0      	str	r0, [r6, #12]
 801656a:	68db      	ldr	r3, [r3, #12]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d1e4      	bne.n	801653a <_Balloc+0x2e>
 8016570:	2000      	movs	r0, #0
 8016572:	bd70      	pop	{r4, r5, r6, pc}
 8016574:	6802      	ldr	r2, [r0, #0]
 8016576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801657a:	2300      	movs	r3, #0
 801657c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016580:	e7f7      	b.n	8016572 <_Balloc+0x66>
 8016582:	bf00      	nop
 8016584:	0801c07c 	.word	0x0801c07c
 8016588:	0801c0fc 	.word	0x0801c0fc

0801658c <_Bfree>:
 801658c:	b570      	push	{r4, r5, r6, lr}
 801658e:	69c6      	ldr	r6, [r0, #28]
 8016590:	4605      	mov	r5, r0
 8016592:	460c      	mov	r4, r1
 8016594:	b976      	cbnz	r6, 80165b4 <_Bfree+0x28>
 8016596:	2010      	movs	r0, #16
 8016598:	f7ff ff04 	bl	80163a4 <malloc>
 801659c:	4602      	mov	r2, r0
 801659e:	61e8      	str	r0, [r5, #28]
 80165a0:	b920      	cbnz	r0, 80165ac <_Bfree+0x20>
 80165a2:	4b09      	ldr	r3, [pc, #36]	; (80165c8 <_Bfree+0x3c>)
 80165a4:	4809      	ldr	r0, [pc, #36]	; (80165cc <_Bfree+0x40>)
 80165a6:	218f      	movs	r1, #143	; 0x8f
 80165a8:	f002 f8c2 	bl	8018730 <__assert_func>
 80165ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80165b0:	6006      	str	r6, [r0, #0]
 80165b2:	60c6      	str	r6, [r0, #12]
 80165b4:	b13c      	cbz	r4, 80165c6 <_Bfree+0x3a>
 80165b6:	69eb      	ldr	r3, [r5, #28]
 80165b8:	6862      	ldr	r2, [r4, #4]
 80165ba:	68db      	ldr	r3, [r3, #12]
 80165bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80165c0:	6021      	str	r1, [r4, #0]
 80165c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80165c6:	bd70      	pop	{r4, r5, r6, pc}
 80165c8:	0801c07c 	.word	0x0801c07c
 80165cc:	0801c0fc 	.word	0x0801c0fc

080165d0 <__multadd>:
 80165d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d4:	690d      	ldr	r5, [r1, #16]
 80165d6:	4607      	mov	r7, r0
 80165d8:	460c      	mov	r4, r1
 80165da:	461e      	mov	r6, r3
 80165dc:	f101 0c14 	add.w	ip, r1, #20
 80165e0:	2000      	movs	r0, #0
 80165e2:	f8dc 3000 	ldr.w	r3, [ip]
 80165e6:	b299      	uxth	r1, r3
 80165e8:	fb02 6101 	mla	r1, r2, r1, r6
 80165ec:	0c1e      	lsrs	r6, r3, #16
 80165ee:	0c0b      	lsrs	r3, r1, #16
 80165f0:	fb02 3306 	mla	r3, r2, r6, r3
 80165f4:	b289      	uxth	r1, r1
 80165f6:	3001      	adds	r0, #1
 80165f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80165fc:	4285      	cmp	r5, r0
 80165fe:	f84c 1b04 	str.w	r1, [ip], #4
 8016602:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016606:	dcec      	bgt.n	80165e2 <__multadd+0x12>
 8016608:	b30e      	cbz	r6, 801664e <__multadd+0x7e>
 801660a:	68a3      	ldr	r3, [r4, #8]
 801660c:	42ab      	cmp	r3, r5
 801660e:	dc19      	bgt.n	8016644 <__multadd+0x74>
 8016610:	6861      	ldr	r1, [r4, #4]
 8016612:	4638      	mov	r0, r7
 8016614:	3101      	adds	r1, #1
 8016616:	f7ff ff79 	bl	801650c <_Balloc>
 801661a:	4680      	mov	r8, r0
 801661c:	b928      	cbnz	r0, 801662a <__multadd+0x5a>
 801661e:	4602      	mov	r2, r0
 8016620:	4b0c      	ldr	r3, [pc, #48]	; (8016654 <__multadd+0x84>)
 8016622:	480d      	ldr	r0, [pc, #52]	; (8016658 <__multadd+0x88>)
 8016624:	21ba      	movs	r1, #186	; 0xba
 8016626:	f002 f883 	bl	8018730 <__assert_func>
 801662a:	6922      	ldr	r2, [r4, #16]
 801662c:	3202      	adds	r2, #2
 801662e:	f104 010c 	add.w	r1, r4, #12
 8016632:	0092      	lsls	r2, r2, #2
 8016634:	300c      	adds	r0, #12
 8016636:	f7fe ffda 	bl	80155ee <memcpy>
 801663a:	4621      	mov	r1, r4
 801663c:	4638      	mov	r0, r7
 801663e:	f7ff ffa5 	bl	801658c <_Bfree>
 8016642:	4644      	mov	r4, r8
 8016644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016648:	3501      	adds	r5, #1
 801664a:	615e      	str	r6, [r3, #20]
 801664c:	6125      	str	r5, [r4, #16]
 801664e:	4620      	mov	r0, r4
 8016650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016654:	0801c0eb 	.word	0x0801c0eb
 8016658:	0801c0fc 	.word	0x0801c0fc

0801665c <__s2b>:
 801665c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016660:	460c      	mov	r4, r1
 8016662:	4615      	mov	r5, r2
 8016664:	461f      	mov	r7, r3
 8016666:	2209      	movs	r2, #9
 8016668:	3308      	adds	r3, #8
 801666a:	4606      	mov	r6, r0
 801666c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016670:	2100      	movs	r1, #0
 8016672:	2201      	movs	r2, #1
 8016674:	429a      	cmp	r2, r3
 8016676:	db09      	blt.n	801668c <__s2b+0x30>
 8016678:	4630      	mov	r0, r6
 801667a:	f7ff ff47 	bl	801650c <_Balloc>
 801667e:	b940      	cbnz	r0, 8016692 <__s2b+0x36>
 8016680:	4602      	mov	r2, r0
 8016682:	4b19      	ldr	r3, [pc, #100]	; (80166e8 <__s2b+0x8c>)
 8016684:	4819      	ldr	r0, [pc, #100]	; (80166ec <__s2b+0x90>)
 8016686:	21d3      	movs	r1, #211	; 0xd3
 8016688:	f002 f852 	bl	8018730 <__assert_func>
 801668c:	0052      	lsls	r2, r2, #1
 801668e:	3101      	adds	r1, #1
 8016690:	e7f0      	b.n	8016674 <__s2b+0x18>
 8016692:	9b08      	ldr	r3, [sp, #32]
 8016694:	6143      	str	r3, [r0, #20]
 8016696:	2d09      	cmp	r5, #9
 8016698:	f04f 0301 	mov.w	r3, #1
 801669c:	6103      	str	r3, [r0, #16]
 801669e:	dd16      	ble.n	80166ce <__s2b+0x72>
 80166a0:	f104 0909 	add.w	r9, r4, #9
 80166a4:	46c8      	mov	r8, r9
 80166a6:	442c      	add	r4, r5
 80166a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80166ac:	4601      	mov	r1, r0
 80166ae:	3b30      	subs	r3, #48	; 0x30
 80166b0:	220a      	movs	r2, #10
 80166b2:	4630      	mov	r0, r6
 80166b4:	f7ff ff8c 	bl	80165d0 <__multadd>
 80166b8:	45a0      	cmp	r8, r4
 80166ba:	d1f5      	bne.n	80166a8 <__s2b+0x4c>
 80166bc:	f1a5 0408 	sub.w	r4, r5, #8
 80166c0:	444c      	add	r4, r9
 80166c2:	1b2d      	subs	r5, r5, r4
 80166c4:	1963      	adds	r3, r4, r5
 80166c6:	42bb      	cmp	r3, r7
 80166c8:	db04      	blt.n	80166d4 <__s2b+0x78>
 80166ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166ce:	340a      	adds	r4, #10
 80166d0:	2509      	movs	r5, #9
 80166d2:	e7f6      	b.n	80166c2 <__s2b+0x66>
 80166d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80166d8:	4601      	mov	r1, r0
 80166da:	3b30      	subs	r3, #48	; 0x30
 80166dc:	220a      	movs	r2, #10
 80166de:	4630      	mov	r0, r6
 80166e0:	f7ff ff76 	bl	80165d0 <__multadd>
 80166e4:	e7ee      	b.n	80166c4 <__s2b+0x68>
 80166e6:	bf00      	nop
 80166e8:	0801c0eb 	.word	0x0801c0eb
 80166ec:	0801c0fc 	.word	0x0801c0fc

080166f0 <__hi0bits>:
 80166f0:	0c03      	lsrs	r3, r0, #16
 80166f2:	041b      	lsls	r3, r3, #16
 80166f4:	b9d3      	cbnz	r3, 801672c <__hi0bits+0x3c>
 80166f6:	0400      	lsls	r0, r0, #16
 80166f8:	2310      	movs	r3, #16
 80166fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80166fe:	bf04      	itt	eq
 8016700:	0200      	lsleq	r0, r0, #8
 8016702:	3308      	addeq	r3, #8
 8016704:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016708:	bf04      	itt	eq
 801670a:	0100      	lsleq	r0, r0, #4
 801670c:	3304      	addeq	r3, #4
 801670e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016712:	bf04      	itt	eq
 8016714:	0080      	lsleq	r0, r0, #2
 8016716:	3302      	addeq	r3, #2
 8016718:	2800      	cmp	r0, #0
 801671a:	db05      	blt.n	8016728 <__hi0bits+0x38>
 801671c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016720:	f103 0301 	add.w	r3, r3, #1
 8016724:	bf08      	it	eq
 8016726:	2320      	moveq	r3, #32
 8016728:	4618      	mov	r0, r3
 801672a:	4770      	bx	lr
 801672c:	2300      	movs	r3, #0
 801672e:	e7e4      	b.n	80166fa <__hi0bits+0xa>

08016730 <__lo0bits>:
 8016730:	6803      	ldr	r3, [r0, #0]
 8016732:	f013 0207 	ands.w	r2, r3, #7
 8016736:	d00c      	beq.n	8016752 <__lo0bits+0x22>
 8016738:	07d9      	lsls	r1, r3, #31
 801673a:	d422      	bmi.n	8016782 <__lo0bits+0x52>
 801673c:	079a      	lsls	r2, r3, #30
 801673e:	bf49      	itett	mi
 8016740:	085b      	lsrmi	r3, r3, #1
 8016742:	089b      	lsrpl	r3, r3, #2
 8016744:	6003      	strmi	r3, [r0, #0]
 8016746:	2201      	movmi	r2, #1
 8016748:	bf5c      	itt	pl
 801674a:	6003      	strpl	r3, [r0, #0]
 801674c:	2202      	movpl	r2, #2
 801674e:	4610      	mov	r0, r2
 8016750:	4770      	bx	lr
 8016752:	b299      	uxth	r1, r3
 8016754:	b909      	cbnz	r1, 801675a <__lo0bits+0x2a>
 8016756:	0c1b      	lsrs	r3, r3, #16
 8016758:	2210      	movs	r2, #16
 801675a:	b2d9      	uxtb	r1, r3
 801675c:	b909      	cbnz	r1, 8016762 <__lo0bits+0x32>
 801675e:	3208      	adds	r2, #8
 8016760:	0a1b      	lsrs	r3, r3, #8
 8016762:	0719      	lsls	r1, r3, #28
 8016764:	bf04      	itt	eq
 8016766:	091b      	lsreq	r3, r3, #4
 8016768:	3204      	addeq	r2, #4
 801676a:	0799      	lsls	r1, r3, #30
 801676c:	bf04      	itt	eq
 801676e:	089b      	lsreq	r3, r3, #2
 8016770:	3202      	addeq	r2, #2
 8016772:	07d9      	lsls	r1, r3, #31
 8016774:	d403      	bmi.n	801677e <__lo0bits+0x4e>
 8016776:	085b      	lsrs	r3, r3, #1
 8016778:	f102 0201 	add.w	r2, r2, #1
 801677c:	d003      	beq.n	8016786 <__lo0bits+0x56>
 801677e:	6003      	str	r3, [r0, #0]
 8016780:	e7e5      	b.n	801674e <__lo0bits+0x1e>
 8016782:	2200      	movs	r2, #0
 8016784:	e7e3      	b.n	801674e <__lo0bits+0x1e>
 8016786:	2220      	movs	r2, #32
 8016788:	e7e1      	b.n	801674e <__lo0bits+0x1e>
	...

0801678c <__i2b>:
 801678c:	b510      	push	{r4, lr}
 801678e:	460c      	mov	r4, r1
 8016790:	2101      	movs	r1, #1
 8016792:	f7ff febb 	bl	801650c <_Balloc>
 8016796:	4602      	mov	r2, r0
 8016798:	b928      	cbnz	r0, 80167a6 <__i2b+0x1a>
 801679a:	4b05      	ldr	r3, [pc, #20]	; (80167b0 <__i2b+0x24>)
 801679c:	4805      	ldr	r0, [pc, #20]	; (80167b4 <__i2b+0x28>)
 801679e:	f240 1145 	movw	r1, #325	; 0x145
 80167a2:	f001 ffc5 	bl	8018730 <__assert_func>
 80167a6:	2301      	movs	r3, #1
 80167a8:	6144      	str	r4, [r0, #20]
 80167aa:	6103      	str	r3, [r0, #16]
 80167ac:	bd10      	pop	{r4, pc}
 80167ae:	bf00      	nop
 80167b0:	0801c0eb 	.word	0x0801c0eb
 80167b4:	0801c0fc 	.word	0x0801c0fc

080167b8 <__multiply>:
 80167b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167bc:	4691      	mov	r9, r2
 80167be:	690a      	ldr	r2, [r1, #16]
 80167c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	bfb8      	it	lt
 80167c8:	460b      	movlt	r3, r1
 80167ca:	460c      	mov	r4, r1
 80167cc:	bfbc      	itt	lt
 80167ce:	464c      	movlt	r4, r9
 80167d0:	4699      	movlt	r9, r3
 80167d2:	6927      	ldr	r7, [r4, #16]
 80167d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80167d8:	68a3      	ldr	r3, [r4, #8]
 80167da:	6861      	ldr	r1, [r4, #4]
 80167dc:	eb07 060a 	add.w	r6, r7, sl
 80167e0:	42b3      	cmp	r3, r6
 80167e2:	b085      	sub	sp, #20
 80167e4:	bfb8      	it	lt
 80167e6:	3101      	addlt	r1, #1
 80167e8:	f7ff fe90 	bl	801650c <_Balloc>
 80167ec:	b930      	cbnz	r0, 80167fc <__multiply+0x44>
 80167ee:	4602      	mov	r2, r0
 80167f0:	4b44      	ldr	r3, [pc, #272]	; (8016904 <__multiply+0x14c>)
 80167f2:	4845      	ldr	r0, [pc, #276]	; (8016908 <__multiply+0x150>)
 80167f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80167f8:	f001 ff9a 	bl	8018730 <__assert_func>
 80167fc:	f100 0514 	add.w	r5, r0, #20
 8016800:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016804:	462b      	mov	r3, r5
 8016806:	2200      	movs	r2, #0
 8016808:	4543      	cmp	r3, r8
 801680a:	d321      	bcc.n	8016850 <__multiply+0x98>
 801680c:	f104 0314 	add.w	r3, r4, #20
 8016810:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016814:	f109 0314 	add.w	r3, r9, #20
 8016818:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801681c:	9202      	str	r2, [sp, #8]
 801681e:	1b3a      	subs	r2, r7, r4
 8016820:	3a15      	subs	r2, #21
 8016822:	f022 0203 	bic.w	r2, r2, #3
 8016826:	3204      	adds	r2, #4
 8016828:	f104 0115 	add.w	r1, r4, #21
 801682c:	428f      	cmp	r7, r1
 801682e:	bf38      	it	cc
 8016830:	2204      	movcc	r2, #4
 8016832:	9201      	str	r2, [sp, #4]
 8016834:	9a02      	ldr	r2, [sp, #8]
 8016836:	9303      	str	r3, [sp, #12]
 8016838:	429a      	cmp	r2, r3
 801683a:	d80c      	bhi.n	8016856 <__multiply+0x9e>
 801683c:	2e00      	cmp	r6, #0
 801683e:	dd03      	ble.n	8016848 <__multiply+0x90>
 8016840:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016844:	2b00      	cmp	r3, #0
 8016846:	d05b      	beq.n	8016900 <__multiply+0x148>
 8016848:	6106      	str	r6, [r0, #16]
 801684a:	b005      	add	sp, #20
 801684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016850:	f843 2b04 	str.w	r2, [r3], #4
 8016854:	e7d8      	b.n	8016808 <__multiply+0x50>
 8016856:	f8b3 a000 	ldrh.w	sl, [r3]
 801685a:	f1ba 0f00 	cmp.w	sl, #0
 801685e:	d024      	beq.n	80168aa <__multiply+0xf2>
 8016860:	f104 0e14 	add.w	lr, r4, #20
 8016864:	46a9      	mov	r9, r5
 8016866:	f04f 0c00 	mov.w	ip, #0
 801686a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801686e:	f8d9 1000 	ldr.w	r1, [r9]
 8016872:	fa1f fb82 	uxth.w	fp, r2
 8016876:	b289      	uxth	r1, r1
 8016878:	fb0a 110b 	mla	r1, sl, fp, r1
 801687c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016880:	f8d9 2000 	ldr.w	r2, [r9]
 8016884:	4461      	add	r1, ip
 8016886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801688a:	fb0a c20b 	mla	r2, sl, fp, ip
 801688e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016892:	b289      	uxth	r1, r1
 8016894:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016898:	4577      	cmp	r7, lr
 801689a:	f849 1b04 	str.w	r1, [r9], #4
 801689e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80168a2:	d8e2      	bhi.n	801686a <__multiply+0xb2>
 80168a4:	9a01      	ldr	r2, [sp, #4]
 80168a6:	f845 c002 	str.w	ip, [r5, r2]
 80168aa:	9a03      	ldr	r2, [sp, #12]
 80168ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80168b0:	3304      	adds	r3, #4
 80168b2:	f1b9 0f00 	cmp.w	r9, #0
 80168b6:	d021      	beq.n	80168fc <__multiply+0x144>
 80168b8:	6829      	ldr	r1, [r5, #0]
 80168ba:	f104 0c14 	add.w	ip, r4, #20
 80168be:	46ae      	mov	lr, r5
 80168c0:	f04f 0a00 	mov.w	sl, #0
 80168c4:	f8bc b000 	ldrh.w	fp, [ip]
 80168c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80168cc:	fb09 220b 	mla	r2, r9, fp, r2
 80168d0:	4452      	add	r2, sl
 80168d2:	b289      	uxth	r1, r1
 80168d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80168d8:	f84e 1b04 	str.w	r1, [lr], #4
 80168dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80168e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80168e4:	f8be 1000 	ldrh.w	r1, [lr]
 80168e8:	fb09 110a 	mla	r1, r9, sl, r1
 80168ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80168f0:	4567      	cmp	r7, ip
 80168f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80168f6:	d8e5      	bhi.n	80168c4 <__multiply+0x10c>
 80168f8:	9a01      	ldr	r2, [sp, #4]
 80168fa:	50a9      	str	r1, [r5, r2]
 80168fc:	3504      	adds	r5, #4
 80168fe:	e799      	b.n	8016834 <__multiply+0x7c>
 8016900:	3e01      	subs	r6, #1
 8016902:	e79b      	b.n	801683c <__multiply+0x84>
 8016904:	0801c0eb 	.word	0x0801c0eb
 8016908:	0801c0fc 	.word	0x0801c0fc

0801690c <__pow5mult>:
 801690c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016910:	4615      	mov	r5, r2
 8016912:	f012 0203 	ands.w	r2, r2, #3
 8016916:	4606      	mov	r6, r0
 8016918:	460f      	mov	r7, r1
 801691a:	d007      	beq.n	801692c <__pow5mult+0x20>
 801691c:	4c25      	ldr	r4, [pc, #148]	; (80169b4 <__pow5mult+0xa8>)
 801691e:	3a01      	subs	r2, #1
 8016920:	2300      	movs	r3, #0
 8016922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016926:	f7ff fe53 	bl	80165d0 <__multadd>
 801692a:	4607      	mov	r7, r0
 801692c:	10ad      	asrs	r5, r5, #2
 801692e:	d03d      	beq.n	80169ac <__pow5mult+0xa0>
 8016930:	69f4      	ldr	r4, [r6, #28]
 8016932:	b97c      	cbnz	r4, 8016954 <__pow5mult+0x48>
 8016934:	2010      	movs	r0, #16
 8016936:	f7ff fd35 	bl	80163a4 <malloc>
 801693a:	4602      	mov	r2, r0
 801693c:	61f0      	str	r0, [r6, #28]
 801693e:	b928      	cbnz	r0, 801694c <__pow5mult+0x40>
 8016940:	4b1d      	ldr	r3, [pc, #116]	; (80169b8 <__pow5mult+0xac>)
 8016942:	481e      	ldr	r0, [pc, #120]	; (80169bc <__pow5mult+0xb0>)
 8016944:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016948:	f001 fef2 	bl	8018730 <__assert_func>
 801694c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016950:	6004      	str	r4, [r0, #0]
 8016952:	60c4      	str	r4, [r0, #12]
 8016954:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801695c:	b94c      	cbnz	r4, 8016972 <__pow5mult+0x66>
 801695e:	f240 2171 	movw	r1, #625	; 0x271
 8016962:	4630      	mov	r0, r6
 8016964:	f7ff ff12 	bl	801678c <__i2b>
 8016968:	2300      	movs	r3, #0
 801696a:	f8c8 0008 	str.w	r0, [r8, #8]
 801696e:	4604      	mov	r4, r0
 8016970:	6003      	str	r3, [r0, #0]
 8016972:	f04f 0900 	mov.w	r9, #0
 8016976:	07eb      	lsls	r3, r5, #31
 8016978:	d50a      	bpl.n	8016990 <__pow5mult+0x84>
 801697a:	4639      	mov	r1, r7
 801697c:	4622      	mov	r2, r4
 801697e:	4630      	mov	r0, r6
 8016980:	f7ff ff1a 	bl	80167b8 <__multiply>
 8016984:	4639      	mov	r1, r7
 8016986:	4680      	mov	r8, r0
 8016988:	4630      	mov	r0, r6
 801698a:	f7ff fdff 	bl	801658c <_Bfree>
 801698e:	4647      	mov	r7, r8
 8016990:	106d      	asrs	r5, r5, #1
 8016992:	d00b      	beq.n	80169ac <__pow5mult+0xa0>
 8016994:	6820      	ldr	r0, [r4, #0]
 8016996:	b938      	cbnz	r0, 80169a8 <__pow5mult+0x9c>
 8016998:	4622      	mov	r2, r4
 801699a:	4621      	mov	r1, r4
 801699c:	4630      	mov	r0, r6
 801699e:	f7ff ff0b 	bl	80167b8 <__multiply>
 80169a2:	6020      	str	r0, [r4, #0]
 80169a4:	f8c0 9000 	str.w	r9, [r0]
 80169a8:	4604      	mov	r4, r0
 80169aa:	e7e4      	b.n	8016976 <__pow5mult+0x6a>
 80169ac:	4638      	mov	r0, r7
 80169ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169b2:	bf00      	nop
 80169b4:	0801c248 	.word	0x0801c248
 80169b8:	0801c07c 	.word	0x0801c07c
 80169bc:	0801c0fc 	.word	0x0801c0fc

080169c0 <__lshift>:
 80169c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169c4:	460c      	mov	r4, r1
 80169c6:	6849      	ldr	r1, [r1, #4]
 80169c8:	6923      	ldr	r3, [r4, #16]
 80169ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80169ce:	68a3      	ldr	r3, [r4, #8]
 80169d0:	4607      	mov	r7, r0
 80169d2:	4691      	mov	r9, r2
 80169d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80169d8:	f108 0601 	add.w	r6, r8, #1
 80169dc:	42b3      	cmp	r3, r6
 80169de:	db0b      	blt.n	80169f8 <__lshift+0x38>
 80169e0:	4638      	mov	r0, r7
 80169e2:	f7ff fd93 	bl	801650c <_Balloc>
 80169e6:	4605      	mov	r5, r0
 80169e8:	b948      	cbnz	r0, 80169fe <__lshift+0x3e>
 80169ea:	4602      	mov	r2, r0
 80169ec:	4b28      	ldr	r3, [pc, #160]	; (8016a90 <__lshift+0xd0>)
 80169ee:	4829      	ldr	r0, [pc, #164]	; (8016a94 <__lshift+0xd4>)
 80169f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80169f4:	f001 fe9c 	bl	8018730 <__assert_func>
 80169f8:	3101      	adds	r1, #1
 80169fa:	005b      	lsls	r3, r3, #1
 80169fc:	e7ee      	b.n	80169dc <__lshift+0x1c>
 80169fe:	2300      	movs	r3, #0
 8016a00:	f100 0114 	add.w	r1, r0, #20
 8016a04:	f100 0210 	add.w	r2, r0, #16
 8016a08:	4618      	mov	r0, r3
 8016a0a:	4553      	cmp	r3, sl
 8016a0c:	db33      	blt.n	8016a76 <__lshift+0xb6>
 8016a0e:	6920      	ldr	r0, [r4, #16]
 8016a10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016a14:	f104 0314 	add.w	r3, r4, #20
 8016a18:	f019 091f 	ands.w	r9, r9, #31
 8016a1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016a20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016a24:	d02b      	beq.n	8016a7e <__lshift+0xbe>
 8016a26:	f1c9 0e20 	rsb	lr, r9, #32
 8016a2a:	468a      	mov	sl, r1
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	6818      	ldr	r0, [r3, #0]
 8016a30:	fa00 f009 	lsl.w	r0, r0, r9
 8016a34:	4310      	orrs	r0, r2
 8016a36:	f84a 0b04 	str.w	r0, [sl], #4
 8016a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a3e:	459c      	cmp	ip, r3
 8016a40:	fa22 f20e 	lsr.w	r2, r2, lr
 8016a44:	d8f3      	bhi.n	8016a2e <__lshift+0x6e>
 8016a46:	ebac 0304 	sub.w	r3, ip, r4
 8016a4a:	3b15      	subs	r3, #21
 8016a4c:	f023 0303 	bic.w	r3, r3, #3
 8016a50:	3304      	adds	r3, #4
 8016a52:	f104 0015 	add.w	r0, r4, #21
 8016a56:	4584      	cmp	ip, r0
 8016a58:	bf38      	it	cc
 8016a5a:	2304      	movcc	r3, #4
 8016a5c:	50ca      	str	r2, [r1, r3]
 8016a5e:	b10a      	cbz	r2, 8016a64 <__lshift+0xa4>
 8016a60:	f108 0602 	add.w	r6, r8, #2
 8016a64:	3e01      	subs	r6, #1
 8016a66:	4638      	mov	r0, r7
 8016a68:	612e      	str	r6, [r5, #16]
 8016a6a:	4621      	mov	r1, r4
 8016a6c:	f7ff fd8e 	bl	801658c <_Bfree>
 8016a70:	4628      	mov	r0, r5
 8016a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a76:	f842 0f04 	str.w	r0, [r2, #4]!
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	e7c5      	b.n	8016a0a <__lshift+0x4a>
 8016a7e:	3904      	subs	r1, #4
 8016a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a84:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a88:	459c      	cmp	ip, r3
 8016a8a:	d8f9      	bhi.n	8016a80 <__lshift+0xc0>
 8016a8c:	e7ea      	b.n	8016a64 <__lshift+0xa4>
 8016a8e:	bf00      	nop
 8016a90:	0801c0eb 	.word	0x0801c0eb
 8016a94:	0801c0fc 	.word	0x0801c0fc

08016a98 <__mcmp>:
 8016a98:	b530      	push	{r4, r5, lr}
 8016a9a:	6902      	ldr	r2, [r0, #16]
 8016a9c:	690c      	ldr	r4, [r1, #16]
 8016a9e:	1b12      	subs	r2, r2, r4
 8016aa0:	d10e      	bne.n	8016ac0 <__mcmp+0x28>
 8016aa2:	f100 0314 	add.w	r3, r0, #20
 8016aa6:	3114      	adds	r1, #20
 8016aa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016aac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016ab0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016ab4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016ab8:	42a5      	cmp	r5, r4
 8016aba:	d003      	beq.n	8016ac4 <__mcmp+0x2c>
 8016abc:	d305      	bcc.n	8016aca <__mcmp+0x32>
 8016abe:	2201      	movs	r2, #1
 8016ac0:	4610      	mov	r0, r2
 8016ac2:	bd30      	pop	{r4, r5, pc}
 8016ac4:	4283      	cmp	r3, r0
 8016ac6:	d3f3      	bcc.n	8016ab0 <__mcmp+0x18>
 8016ac8:	e7fa      	b.n	8016ac0 <__mcmp+0x28>
 8016aca:	f04f 32ff 	mov.w	r2, #4294967295
 8016ace:	e7f7      	b.n	8016ac0 <__mcmp+0x28>

08016ad0 <__mdiff>:
 8016ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad4:	460c      	mov	r4, r1
 8016ad6:	4606      	mov	r6, r0
 8016ad8:	4611      	mov	r1, r2
 8016ada:	4620      	mov	r0, r4
 8016adc:	4690      	mov	r8, r2
 8016ade:	f7ff ffdb 	bl	8016a98 <__mcmp>
 8016ae2:	1e05      	subs	r5, r0, #0
 8016ae4:	d110      	bne.n	8016b08 <__mdiff+0x38>
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	4630      	mov	r0, r6
 8016aea:	f7ff fd0f 	bl	801650c <_Balloc>
 8016aee:	b930      	cbnz	r0, 8016afe <__mdiff+0x2e>
 8016af0:	4b3a      	ldr	r3, [pc, #232]	; (8016bdc <__mdiff+0x10c>)
 8016af2:	4602      	mov	r2, r0
 8016af4:	f240 2137 	movw	r1, #567	; 0x237
 8016af8:	4839      	ldr	r0, [pc, #228]	; (8016be0 <__mdiff+0x110>)
 8016afa:	f001 fe19 	bl	8018730 <__assert_func>
 8016afe:	2301      	movs	r3, #1
 8016b00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b08:	bfa4      	itt	ge
 8016b0a:	4643      	movge	r3, r8
 8016b0c:	46a0      	movge	r8, r4
 8016b0e:	4630      	mov	r0, r6
 8016b10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016b14:	bfa6      	itte	ge
 8016b16:	461c      	movge	r4, r3
 8016b18:	2500      	movge	r5, #0
 8016b1a:	2501      	movlt	r5, #1
 8016b1c:	f7ff fcf6 	bl	801650c <_Balloc>
 8016b20:	b920      	cbnz	r0, 8016b2c <__mdiff+0x5c>
 8016b22:	4b2e      	ldr	r3, [pc, #184]	; (8016bdc <__mdiff+0x10c>)
 8016b24:	4602      	mov	r2, r0
 8016b26:	f240 2145 	movw	r1, #581	; 0x245
 8016b2a:	e7e5      	b.n	8016af8 <__mdiff+0x28>
 8016b2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016b30:	6926      	ldr	r6, [r4, #16]
 8016b32:	60c5      	str	r5, [r0, #12]
 8016b34:	f104 0914 	add.w	r9, r4, #20
 8016b38:	f108 0514 	add.w	r5, r8, #20
 8016b3c:	f100 0e14 	add.w	lr, r0, #20
 8016b40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016b44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016b48:	f108 0210 	add.w	r2, r8, #16
 8016b4c:	46f2      	mov	sl, lr
 8016b4e:	2100      	movs	r1, #0
 8016b50:	f859 3b04 	ldr.w	r3, [r9], #4
 8016b54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016b58:	fa11 f88b 	uxtah	r8, r1, fp
 8016b5c:	b299      	uxth	r1, r3
 8016b5e:	0c1b      	lsrs	r3, r3, #16
 8016b60:	eba8 0801 	sub.w	r8, r8, r1
 8016b64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016b68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016b6c:	fa1f f888 	uxth.w	r8, r8
 8016b70:	1419      	asrs	r1, r3, #16
 8016b72:	454e      	cmp	r6, r9
 8016b74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016b78:	f84a 3b04 	str.w	r3, [sl], #4
 8016b7c:	d8e8      	bhi.n	8016b50 <__mdiff+0x80>
 8016b7e:	1b33      	subs	r3, r6, r4
 8016b80:	3b15      	subs	r3, #21
 8016b82:	f023 0303 	bic.w	r3, r3, #3
 8016b86:	3304      	adds	r3, #4
 8016b88:	3415      	adds	r4, #21
 8016b8a:	42a6      	cmp	r6, r4
 8016b8c:	bf38      	it	cc
 8016b8e:	2304      	movcc	r3, #4
 8016b90:	441d      	add	r5, r3
 8016b92:	4473      	add	r3, lr
 8016b94:	469e      	mov	lr, r3
 8016b96:	462e      	mov	r6, r5
 8016b98:	4566      	cmp	r6, ip
 8016b9a:	d30e      	bcc.n	8016bba <__mdiff+0xea>
 8016b9c:	f10c 0203 	add.w	r2, ip, #3
 8016ba0:	1b52      	subs	r2, r2, r5
 8016ba2:	f022 0203 	bic.w	r2, r2, #3
 8016ba6:	3d03      	subs	r5, #3
 8016ba8:	45ac      	cmp	ip, r5
 8016baa:	bf38      	it	cc
 8016bac:	2200      	movcc	r2, #0
 8016bae:	4413      	add	r3, r2
 8016bb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016bb4:	b17a      	cbz	r2, 8016bd6 <__mdiff+0x106>
 8016bb6:	6107      	str	r7, [r0, #16]
 8016bb8:	e7a4      	b.n	8016b04 <__mdiff+0x34>
 8016bba:	f856 8b04 	ldr.w	r8, [r6], #4
 8016bbe:	fa11 f288 	uxtah	r2, r1, r8
 8016bc2:	1414      	asrs	r4, r2, #16
 8016bc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016bc8:	b292      	uxth	r2, r2
 8016bca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016bce:	f84e 2b04 	str.w	r2, [lr], #4
 8016bd2:	1421      	asrs	r1, r4, #16
 8016bd4:	e7e0      	b.n	8016b98 <__mdiff+0xc8>
 8016bd6:	3f01      	subs	r7, #1
 8016bd8:	e7ea      	b.n	8016bb0 <__mdiff+0xe0>
 8016bda:	bf00      	nop
 8016bdc:	0801c0eb 	.word	0x0801c0eb
 8016be0:	0801c0fc 	.word	0x0801c0fc

08016be4 <__ulp>:
 8016be4:	b082      	sub	sp, #8
 8016be6:	ed8d 0b00 	vstr	d0, [sp]
 8016bea:	9a01      	ldr	r2, [sp, #4]
 8016bec:	4b0f      	ldr	r3, [pc, #60]	; (8016c2c <__ulp+0x48>)
 8016bee:	4013      	ands	r3, r2
 8016bf0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	dc08      	bgt.n	8016c0a <__ulp+0x26>
 8016bf8:	425b      	negs	r3, r3
 8016bfa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016bfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016c02:	da04      	bge.n	8016c0e <__ulp+0x2a>
 8016c04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016c08:	4113      	asrs	r3, r2
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	e008      	b.n	8016c20 <__ulp+0x3c>
 8016c0e:	f1a2 0314 	sub.w	r3, r2, #20
 8016c12:	2b1e      	cmp	r3, #30
 8016c14:	bfda      	itte	le
 8016c16:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016c1a:	40da      	lsrle	r2, r3
 8016c1c:	2201      	movgt	r2, #1
 8016c1e:	2300      	movs	r3, #0
 8016c20:	4619      	mov	r1, r3
 8016c22:	4610      	mov	r0, r2
 8016c24:	ec41 0b10 	vmov	d0, r0, r1
 8016c28:	b002      	add	sp, #8
 8016c2a:	4770      	bx	lr
 8016c2c:	7ff00000 	.word	0x7ff00000

08016c30 <__b2d>:
 8016c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c34:	6906      	ldr	r6, [r0, #16]
 8016c36:	f100 0814 	add.w	r8, r0, #20
 8016c3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016c3e:	1f37      	subs	r7, r6, #4
 8016c40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016c44:	4610      	mov	r0, r2
 8016c46:	f7ff fd53 	bl	80166f0 <__hi0bits>
 8016c4a:	f1c0 0320 	rsb	r3, r0, #32
 8016c4e:	280a      	cmp	r0, #10
 8016c50:	600b      	str	r3, [r1, #0]
 8016c52:	491b      	ldr	r1, [pc, #108]	; (8016cc0 <__b2d+0x90>)
 8016c54:	dc15      	bgt.n	8016c82 <__b2d+0x52>
 8016c56:	f1c0 0c0b 	rsb	ip, r0, #11
 8016c5a:	fa22 f30c 	lsr.w	r3, r2, ip
 8016c5e:	45b8      	cmp	r8, r7
 8016c60:	ea43 0501 	orr.w	r5, r3, r1
 8016c64:	bf34      	ite	cc
 8016c66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016c6a:	2300      	movcs	r3, #0
 8016c6c:	3015      	adds	r0, #21
 8016c6e:	fa02 f000 	lsl.w	r0, r2, r0
 8016c72:	fa23 f30c 	lsr.w	r3, r3, ip
 8016c76:	4303      	orrs	r3, r0
 8016c78:	461c      	mov	r4, r3
 8016c7a:	ec45 4b10 	vmov	d0, r4, r5
 8016c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c82:	45b8      	cmp	r8, r7
 8016c84:	bf3a      	itte	cc
 8016c86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016c8a:	f1a6 0708 	subcc.w	r7, r6, #8
 8016c8e:	2300      	movcs	r3, #0
 8016c90:	380b      	subs	r0, #11
 8016c92:	d012      	beq.n	8016cba <__b2d+0x8a>
 8016c94:	f1c0 0120 	rsb	r1, r0, #32
 8016c98:	fa23 f401 	lsr.w	r4, r3, r1
 8016c9c:	4082      	lsls	r2, r0
 8016c9e:	4322      	orrs	r2, r4
 8016ca0:	4547      	cmp	r7, r8
 8016ca2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016ca6:	bf8c      	ite	hi
 8016ca8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016cac:	2200      	movls	r2, #0
 8016cae:	4083      	lsls	r3, r0
 8016cb0:	40ca      	lsrs	r2, r1
 8016cb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016cb6:	4313      	orrs	r3, r2
 8016cb8:	e7de      	b.n	8016c78 <__b2d+0x48>
 8016cba:	ea42 0501 	orr.w	r5, r2, r1
 8016cbe:	e7db      	b.n	8016c78 <__b2d+0x48>
 8016cc0:	3ff00000 	.word	0x3ff00000

08016cc4 <__d2b>:
 8016cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016cc8:	460f      	mov	r7, r1
 8016cca:	2101      	movs	r1, #1
 8016ccc:	ec59 8b10 	vmov	r8, r9, d0
 8016cd0:	4616      	mov	r6, r2
 8016cd2:	f7ff fc1b 	bl	801650c <_Balloc>
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	b930      	cbnz	r0, 8016ce8 <__d2b+0x24>
 8016cda:	4602      	mov	r2, r0
 8016cdc:	4b24      	ldr	r3, [pc, #144]	; (8016d70 <__d2b+0xac>)
 8016cde:	4825      	ldr	r0, [pc, #148]	; (8016d74 <__d2b+0xb0>)
 8016ce0:	f240 310f 	movw	r1, #783	; 0x30f
 8016ce4:	f001 fd24 	bl	8018730 <__assert_func>
 8016ce8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016cec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016cf0:	bb2d      	cbnz	r5, 8016d3e <__d2b+0x7a>
 8016cf2:	9301      	str	r3, [sp, #4]
 8016cf4:	f1b8 0300 	subs.w	r3, r8, #0
 8016cf8:	d026      	beq.n	8016d48 <__d2b+0x84>
 8016cfa:	4668      	mov	r0, sp
 8016cfc:	9300      	str	r3, [sp, #0]
 8016cfe:	f7ff fd17 	bl	8016730 <__lo0bits>
 8016d02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016d06:	b1e8      	cbz	r0, 8016d44 <__d2b+0x80>
 8016d08:	f1c0 0320 	rsb	r3, r0, #32
 8016d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8016d10:	430b      	orrs	r3, r1
 8016d12:	40c2      	lsrs	r2, r0
 8016d14:	6163      	str	r3, [r4, #20]
 8016d16:	9201      	str	r2, [sp, #4]
 8016d18:	9b01      	ldr	r3, [sp, #4]
 8016d1a:	61a3      	str	r3, [r4, #24]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	bf14      	ite	ne
 8016d20:	2202      	movne	r2, #2
 8016d22:	2201      	moveq	r2, #1
 8016d24:	6122      	str	r2, [r4, #16]
 8016d26:	b1bd      	cbz	r5, 8016d58 <__d2b+0x94>
 8016d28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016d2c:	4405      	add	r5, r0
 8016d2e:	603d      	str	r5, [r7, #0]
 8016d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016d34:	6030      	str	r0, [r6, #0]
 8016d36:	4620      	mov	r0, r4
 8016d38:	b003      	add	sp, #12
 8016d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016d42:	e7d6      	b.n	8016cf2 <__d2b+0x2e>
 8016d44:	6161      	str	r1, [r4, #20]
 8016d46:	e7e7      	b.n	8016d18 <__d2b+0x54>
 8016d48:	a801      	add	r0, sp, #4
 8016d4a:	f7ff fcf1 	bl	8016730 <__lo0bits>
 8016d4e:	9b01      	ldr	r3, [sp, #4]
 8016d50:	6163      	str	r3, [r4, #20]
 8016d52:	3020      	adds	r0, #32
 8016d54:	2201      	movs	r2, #1
 8016d56:	e7e5      	b.n	8016d24 <__d2b+0x60>
 8016d58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016d5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016d60:	6038      	str	r0, [r7, #0]
 8016d62:	6918      	ldr	r0, [r3, #16]
 8016d64:	f7ff fcc4 	bl	80166f0 <__hi0bits>
 8016d68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016d6c:	e7e2      	b.n	8016d34 <__d2b+0x70>
 8016d6e:	bf00      	nop
 8016d70:	0801c0eb 	.word	0x0801c0eb
 8016d74:	0801c0fc 	.word	0x0801c0fc

08016d78 <__ratio>:
 8016d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d7c:	4688      	mov	r8, r1
 8016d7e:	4669      	mov	r1, sp
 8016d80:	4681      	mov	r9, r0
 8016d82:	f7ff ff55 	bl	8016c30 <__b2d>
 8016d86:	a901      	add	r1, sp, #4
 8016d88:	4640      	mov	r0, r8
 8016d8a:	ec55 4b10 	vmov	r4, r5, d0
 8016d8e:	f7ff ff4f 	bl	8016c30 <__b2d>
 8016d92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016d9a:	eba3 0c02 	sub.w	ip, r3, r2
 8016d9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016da2:	1a9b      	subs	r3, r3, r2
 8016da4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016da8:	ec51 0b10 	vmov	r0, r1, d0
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	bfd6      	itet	le
 8016db0:	460a      	movle	r2, r1
 8016db2:	462a      	movgt	r2, r5
 8016db4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016db8:	468b      	mov	fp, r1
 8016dba:	462f      	mov	r7, r5
 8016dbc:	bfd4      	ite	le
 8016dbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016dc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	ee10 2a10 	vmov	r2, s0
 8016dcc:	465b      	mov	r3, fp
 8016dce:	4639      	mov	r1, r7
 8016dd0:	f7e9 fd64 	bl	800089c <__aeabi_ddiv>
 8016dd4:	ec41 0b10 	vmov	d0, r0, r1
 8016dd8:	b003      	add	sp, #12
 8016dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016dde <__copybits>:
 8016dde:	3901      	subs	r1, #1
 8016de0:	b570      	push	{r4, r5, r6, lr}
 8016de2:	1149      	asrs	r1, r1, #5
 8016de4:	6914      	ldr	r4, [r2, #16]
 8016de6:	3101      	adds	r1, #1
 8016de8:	f102 0314 	add.w	r3, r2, #20
 8016dec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016df0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016df4:	1f05      	subs	r5, r0, #4
 8016df6:	42a3      	cmp	r3, r4
 8016df8:	d30c      	bcc.n	8016e14 <__copybits+0x36>
 8016dfa:	1aa3      	subs	r3, r4, r2
 8016dfc:	3b11      	subs	r3, #17
 8016dfe:	f023 0303 	bic.w	r3, r3, #3
 8016e02:	3211      	adds	r2, #17
 8016e04:	42a2      	cmp	r2, r4
 8016e06:	bf88      	it	hi
 8016e08:	2300      	movhi	r3, #0
 8016e0a:	4418      	add	r0, r3
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	4288      	cmp	r0, r1
 8016e10:	d305      	bcc.n	8016e1e <__copybits+0x40>
 8016e12:	bd70      	pop	{r4, r5, r6, pc}
 8016e14:	f853 6b04 	ldr.w	r6, [r3], #4
 8016e18:	f845 6f04 	str.w	r6, [r5, #4]!
 8016e1c:	e7eb      	b.n	8016df6 <__copybits+0x18>
 8016e1e:	f840 3b04 	str.w	r3, [r0], #4
 8016e22:	e7f4      	b.n	8016e0e <__copybits+0x30>

08016e24 <__any_on>:
 8016e24:	f100 0214 	add.w	r2, r0, #20
 8016e28:	6900      	ldr	r0, [r0, #16]
 8016e2a:	114b      	asrs	r3, r1, #5
 8016e2c:	4298      	cmp	r0, r3
 8016e2e:	b510      	push	{r4, lr}
 8016e30:	db11      	blt.n	8016e56 <__any_on+0x32>
 8016e32:	dd0a      	ble.n	8016e4a <__any_on+0x26>
 8016e34:	f011 011f 	ands.w	r1, r1, #31
 8016e38:	d007      	beq.n	8016e4a <__any_on+0x26>
 8016e3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016e3e:	fa24 f001 	lsr.w	r0, r4, r1
 8016e42:	fa00 f101 	lsl.w	r1, r0, r1
 8016e46:	428c      	cmp	r4, r1
 8016e48:	d10b      	bne.n	8016e62 <__any_on+0x3e>
 8016e4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016e4e:	4293      	cmp	r3, r2
 8016e50:	d803      	bhi.n	8016e5a <__any_on+0x36>
 8016e52:	2000      	movs	r0, #0
 8016e54:	bd10      	pop	{r4, pc}
 8016e56:	4603      	mov	r3, r0
 8016e58:	e7f7      	b.n	8016e4a <__any_on+0x26>
 8016e5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016e5e:	2900      	cmp	r1, #0
 8016e60:	d0f5      	beq.n	8016e4e <__any_on+0x2a>
 8016e62:	2001      	movs	r0, #1
 8016e64:	e7f6      	b.n	8016e54 <__any_on+0x30>

08016e66 <sulp>:
 8016e66:	b570      	push	{r4, r5, r6, lr}
 8016e68:	4604      	mov	r4, r0
 8016e6a:	460d      	mov	r5, r1
 8016e6c:	ec45 4b10 	vmov	d0, r4, r5
 8016e70:	4616      	mov	r6, r2
 8016e72:	f7ff feb7 	bl	8016be4 <__ulp>
 8016e76:	ec51 0b10 	vmov	r0, r1, d0
 8016e7a:	b17e      	cbz	r6, 8016e9c <sulp+0x36>
 8016e7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	dd09      	ble.n	8016e9c <sulp+0x36>
 8016e88:	051b      	lsls	r3, r3, #20
 8016e8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016e8e:	2400      	movs	r4, #0
 8016e90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016e94:	4622      	mov	r2, r4
 8016e96:	462b      	mov	r3, r5
 8016e98:	f7e9 fbd6 	bl	8000648 <__aeabi_dmul>
 8016e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016ea0 <_strtod_l>:
 8016ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea4:	ed2d 8b02 	vpush	{d8}
 8016ea8:	b09b      	sub	sp, #108	; 0x6c
 8016eaa:	4604      	mov	r4, r0
 8016eac:	9213      	str	r2, [sp, #76]	; 0x4c
 8016eae:	2200      	movs	r2, #0
 8016eb0:	9216      	str	r2, [sp, #88]	; 0x58
 8016eb2:	460d      	mov	r5, r1
 8016eb4:	f04f 0800 	mov.w	r8, #0
 8016eb8:	f04f 0900 	mov.w	r9, #0
 8016ebc:	460a      	mov	r2, r1
 8016ebe:	9215      	str	r2, [sp, #84]	; 0x54
 8016ec0:	7811      	ldrb	r1, [r2, #0]
 8016ec2:	292b      	cmp	r1, #43	; 0x2b
 8016ec4:	d04c      	beq.n	8016f60 <_strtod_l+0xc0>
 8016ec6:	d83a      	bhi.n	8016f3e <_strtod_l+0x9e>
 8016ec8:	290d      	cmp	r1, #13
 8016eca:	d834      	bhi.n	8016f36 <_strtod_l+0x96>
 8016ecc:	2908      	cmp	r1, #8
 8016ece:	d834      	bhi.n	8016f3a <_strtod_l+0x9a>
 8016ed0:	2900      	cmp	r1, #0
 8016ed2:	d03d      	beq.n	8016f50 <_strtod_l+0xb0>
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8016ed8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8016eda:	7832      	ldrb	r2, [r6, #0]
 8016edc:	2a30      	cmp	r2, #48	; 0x30
 8016ede:	f040 80b4 	bne.w	801704a <_strtod_l+0x1aa>
 8016ee2:	7872      	ldrb	r2, [r6, #1]
 8016ee4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016ee8:	2a58      	cmp	r2, #88	; 0x58
 8016eea:	d170      	bne.n	8016fce <_strtod_l+0x12e>
 8016eec:	9302      	str	r3, [sp, #8]
 8016eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ef0:	9301      	str	r3, [sp, #4]
 8016ef2:	ab16      	add	r3, sp, #88	; 0x58
 8016ef4:	9300      	str	r3, [sp, #0]
 8016ef6:	4a8e      	ldr	r2, [pc, #568]	; (8017130 <_strtod_l+0x290>)
 8016ef8:	ab17      	add	r3, sp, #92	; 0x5c
 8016efa:	a915      	add	r1, sp, #84	; 0x54
 8016efc:	4620      	mov	r0, r4
 8016efe:	f001 fcb3 	bl	8018868 <__gethex>
 8016f02:	f010 070f 	ands.w	r7, r0, #15
 8016f06:	4605      	mov	r5, r0
 8016f08:	d005      	beq.n	8016f16 <_strtod_l+0x76>
 8016f0a:	2f06      	cmp	r7, #6
 8016f0c:	d12a      	bne.n	8016f64 <_strtod_l+0xc4>
 8016f0e:	3601      	adds	r6, #1
 8016f10:	2300      	movs	r3, #0
 8016f12:	9615      	str	r6, [sp, #84]	; 0x54
 8016f14:	930a      	str	r3, [sp, #40]	; 0x28
 8016f16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	f040 857f 	bne.w	8017a1c <_strtod_l+0xb7c>
 8016f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f20:	b1db      	cbz	r3, 8016f5a <_strtod_l+0xba>
 8016f22:	4642      	mov	r2, r8
 8016f24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016f28:	ec43 2b10 	vmov	d0, r2, r3
 8016f2c:	b01b      	add	sp, #108	; 0x6c
 8016f2e:	ecbd 8b02 	vpop	{d8}
 8016f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f36:	2920      	cmp	r1, #32
 8016f38:	d1cc      	bne.n	8016ed4 <_strtod_l+0x34>
 8016f3a:	3201      	adds	r2, #1
 8016f3c:	e7bf      	b.n	8016ebe <_strtod_l+0x1e>
 8016f3e:	292d      	cmp	r1, #45	; 0x2d
 8016f40:	d1c8      	bne.n	8016ed4 <_strtod_l+0x34>
 8016f42:	2101      	movs	r1, #1
 8016f44:	910a      	str	r1, [sp, #40]	; 0x28
 8016f46:	1c51      	adds	r1, r2, #1
 8016f48:	9115      	str	r1, [sp, #84]	; 0x54
 8016f4a:	7852      	ldrb	r2, [r2, #1]
 8016f4c:	2a00      	cmp	r2, #0
 8016f4e:	d1c3      	bne.n	8016ed8 <_strtod_l+0x38>
 8016f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f52:	9515      	str	r5, [sp, #84]	; 0x54
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	f040 855f 	bne.w	8017a18 <_strtod_l+0xb78>
 8016f5a:	4642      	mov	r2, r8
 8016f5c:	464b      	mov	r3, r9
 8016f5e:	e7e3      	b.n	8016f28 <_strtod_l+0x88>
 8016f60:	2100      	movs	r1, #0
 8016f62:	e7ef      	b.n	8016f44 <_strtod_l+0xa4>
 8016f64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016f66:	b13a      	cbz	r2, 8016f78 <_strtod_l+0xd8>
 8016f68:	2135      	movs	r1, #53	; 0x35
 8016f6a:	a818      	add	r0, sp, #96	; 0x60
 8016f6c:	f7ff ff37 	bl	8016dde <__copybits>
 8016f70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016f72:	4620      	mov	r0, r4
 8016f74:	f7ff fb0a 	bl	801658c <_Bfree>
 8016f78:	3f01      	subs	r7, #1
 8016f7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016f7c:	2f04      	cmp	r7, #4
 8016f7e:	d806      	bhi.n	8016f8e <_strtod_l+0xee>
 8016f80:	e8df f007 	tbb	[pc, r7]
 8016f84:	201d0314 	.word	0x201d0314
 8016f88:	14          	.byte	0x14
 8016f89:	00          	.byte	0x00
 8016f8a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8016f8e:	05e9      	lsls	r1, r5, #23
 8016f90:	bf48      	it	mi
 8016f92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8016f96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016f9a:	0d1b      	lsrs	r3, r3, #20
 8016f9c:	051b      	lsls	r3, r3, #20
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d1b9      	bne.n	8016f16 <_strtod_l+0x76>
 8016fa2:	f7fe faf7 	bl	8015594 <__errno>
 8016fa6:	2322      	movs	r3, #34	; 0x22
 8016fa8:	6003      	str	r3, [r0, #0]
 8016faa:	e7b4      	b.n	8016f16 <_strtod_l+0x76>
 8016fac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8016fb0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016fb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016fb8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016fbc:	e7e7      	b.n	8016f8e <_strtod_l+0xee>
 8016fbe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017138 <_strtod_l+0x298>
 8016fc2:	e7e4      	b.n	8016f8e <_strtod_l+0xee>
 8016fc4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016fc8:	f04f 38ff 	mov.w	r8, #4294967295
 8016fcc:	e7df      	b.n	8016f8e <_strtod_l+0xee>
 8016fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016fd0:	1c5a      	adds	r2, r3, #1
 8016fd2:	9215      	str	r2, [sp, #84]	; 0x54
 8016fd4:	785b      	ldrb	r3, [r3, #1]
 8016fd6:	2b30      	cmp	r3, #48	; 0x30
 8016fd8:	d0f9      	beq.n	8016fce <_strtod_l+0x12e>
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d09b      	beq.n	8016f16 <_strtod_l+0x76>
 8016fde:	2301      	movs	r3, #1
 8016fe0:	f04f 0a00 	mov.w	sl, #0
 8016fe4:	9304      	str	r3, [sp, #16]
 8016fe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016fee:	46d3      	mov	fp, sl
 8016ff0:	220a      	movs	r2, #10
 8016ff2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016ff4:	7806      	ldrb	r6, [r0, #0]
 8016ff6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016ffa:	b2d9      	uxtb	r1, r3
 8016ffc:	2909      	cmp	r1, #9
 8016ffe:	d926      	bls.n	801704e <_strtod_l+0x1ae>
 8017000:	494c      	ldr	r1, [pc, #304]	; (8017134 <_strtod_l+0x294>)
 8017002:	2201      	movs	r2, #1
 8017004:	f7fe fa13 	bl	801542e <strncmp>
 8017008:	2800      	cmp	r0, #0
 801700a:	d030      	beq.n	801706e <_strtod_l+0x1ce>
 801700c:	2000      	movs	r0, #0
 801700e:	4632      	mov	r2, r6
 8017010:	9005      	str	r0, [sp, #20]
 8017012:	465e      	mov	r6, fp
 8017014:	4603      	mov	r3, r0
 8017016:	2a65      	cmp	r2, #101	; 0x65
 8017018:	d001      	beq.n	801701e <_strtod_l+0x17e>
 801701a:	2a45      	cmp	r2, #69	; 0x45
 801701c:	d113      	bne.n	8017046 <_strtod_l+0x1a6>
 801701e:	b91e      	cbnz	r6, 8017028 <_strtod_l+0x188>
 8017020:	9a04      	ldr	r2, [sp, #16]
 8017022:	4302      	orrs	r2, r0
 8017024:	d094      	beq.n	8016f50 <_strtod_l+0xb0>
 8017026:	2600      	movs	r6, #0
 8017028:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801702a:	1c6a      	adds	r2, r5, #1
 801702c:	9215      	str	r2, [sp, #84]	; 0x54
 801702e:	786a      	ldrb	r2, [r5, #1]
 8017030:	2a2b      	cmp	r2, #43	; 0x2b
 8017032:	d074      	beq.n	801711e <_strtod_l+0x27e>
 8017034:	2a2d      	cmp	r2, #45	; 0x2d
 8017036:	d078      	beq.n	801712a <_strtod_l+0x28a>
 8017038:	f04f 0c00 	mov.w	ip, #0
 801703c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017040:	2909      	cmp	r1, #9
 8017042:	d97f      	bls.n	8017144 <_strtod_l+0x2a4>
 8017044:	9515      	str	r5, [sp, #84]	; 0x54
 8017046:	2700      	movs	r7, #0
 8017048:	e09e      	b.n	8017188 <_strtod_l+0x2e8>
 801704a:	2300      	movs	r3, #0
 801704c:	e7c8      	b.n	8016fe0 <_strtod_l+0x140>
 801704e:	f1bb 0f08 	cmp.w	fp, #8
 8017052:	bfd8      	it	le
 8017054:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017056:	f100 0001 	add.w	r0, r0, #1
 801705a:	bfda      	itte	le
 801705c:	fb02 3301 	mlale	r3, r2, r1, r3
 8017060:	9309      	strle	r3, [sp, #36]	; 0x24
 8017062:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8017066:	f10b 0b01 	add.w	fp, fp, #1
 801706a:	9015      	str	r0, [sp, #84]	; 0x54
 801706c:	e7c1      	b.n	8016ff2 <_strtod_l+0x152>
 801706e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017070:	1c5a      	adds	r2, r3, #1
 8017072:	9215      	str	r2, [sp, #84]	; 0x54
 8017074:	785a      	ldrb	r2, [r3, #1]
 8017076:	f1bb 0f00 	cmp.w	fp, #0
 801707a:	d037      	beq.n	80170ec <_strtod_l+0x24c>
 801707c:	9005      	str	r0, [sp, #20]
 801707e:	465e      	mov	r6, fp
 8017080:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8017084:	2b09      	cmp	r3, #9
 8017086:	d912      	bls.n	80170ae <_strtod_l+0x20e>
 8017088:	2301      	movs	r3, #1
 801708a:	e7c4      	b.n	8017016 <_strtod_l+0x176>
 801708c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801708e:	1c5a      	adds	r2, r3, #1
 8017090:	9215      	str	r2, [sp, #84]	; 0x54
 8017092:	785a      	ldrb	r2, [r3, #1]
 8017094:	3001      	adds	r0, #1
 8017096:	2a30      	cmp	r2, #48	; 0x30
 8017098:	d0f8      	beq.n	801708c <_strtod_l+0x1ec>
 801709a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801709e:	2b08      	cmp	r3, #8
 80170a0:	f200 84c1 	bhi.w	8017a26 <_strtod_l+0xb86>
 80170a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80170a6:	9005      	str	r0, [sp, #20]
 80170a8:	2000      	movs	r0, #0
 80170aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80170ac:	4606      	mov	r6, r0
 80170ae:	3a30      	subs	r2, #48	; 0x30
 80170b0:	f100 0301 	add.w	r3, r0, #1
 80170b4:	d014      	beq.n	80170e0 <_strtod_l+0x240>
 80170b6:	9905      	ldr	r1, [sp, #20]
 80170b8:	4419      	add	r1, r3
 80170ba:	9105      	str	r1, [sp, #20]
 80170bc:	4633      	mov	r3, r6
 80170be:	eb00 0c06 	add.w	ip, r0, r6
 80170c2:	210a      	movs	r1, #10
 80170c4:	4563      	cmp	r3, ip
 80170c6:	d113      	bne.n	80170f0 <_strtod_l+0x250>
 80170c8:	1833      	adds	r3, r6, r0
 80170ca:	2b08      	cmp	r3, #8
 80170cc:	f106 0601 	add.w	r6, r6, #1
 80170d0:	4406      	add	r6, r0
 80170d2:	dc1a      	bgt.n	801710a <_strtod_l+0x26a>
 80170d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170d6:	230a      	movs	r3, #10
 80170d8:	fb03 2301 	mla	r3, r3, r1, r2
 80170dc:	9309      	str	r3, [sp, #36]	; 0x24
 80170de:	2300      	movs	r3, #0
 80170e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80170e2:	1c51      	adds	r1, r2, #1
 80170e4:	9115      	str	r1, [sp, #84]	; 0x54
 80170e6:	7852      	ldrb	r2, [r2, #1]
 80170e8:	4618      	mov	r0, r3
 80170ea:	e7c9      	b.n	8017080 <_strtod_l+0x1e0>
 80170ec:	4658      	mov	r0, fp
 80170ee:	e7d2      	b.n	8017096 <_strtod_l+0x1f6>
 80170f0:	2b08      	cmp	r3, #8
 80170f2:	f103 0301 	add.w	r3, r3, #1
 80170f6:	dc03      	bgt.n	8017100 <_strtod_l+0x260>
 80170f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80170fa:	434f      	muls	r7, r1
 80170fc:	9709      	str	r7, [sp, #36]	; 0x24
 80170fe:	e7e1      	b.n	80170c4 <_strtod_l+0x224>
 8017100:	2b10      	cmp	r3, #16
 8017102:	bfd8      	it	le
 8017104:	fb01 fa0a 	mulle.w	sl, r1, sl
 8017108:	e7dc      	b.n	80170c4 <_strtod_l+0x224>
 801710a:	2e10      	cmp	r6, #16
 801710c:	bfdc      	itt	le
 801710e:	230a      	movle	r3, #10
 8017110:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8017114:	e7e3      	b.n	80170de <_strtod_l+0x23e>
 8017116:	2300      	movs	r3, #0
 8017118:	9305      	str	r3, [sp, #20]
 801711a:	2301      	movs	r3, #1
 801711c:	e780      	b.n	8017020 <_strtod_l+0x180>
 801711e:	f04f 0c00 	mov.w	ip, #0
 8017122:	1caa      	adds	r2, r5, #2
 8017124:	9215      	str	r2, [sp, #84]	; 0x54
 8017126:	78aa      	ldrb	r2, [r5, #2]
 8017128:	e788      	b.n	801703c <_strtod_l+0x19c>
 801712a:	f04f 0c01 	mov.w	ip, #1
 801712e:	e7f8      	b.n	8017122 <_strtod_l+0x282>
 8017130:	0801c258 	.word	0x0801c258
 8017134:	0801c254 	.word	0x0801c254
 8017138:	7ff00000 	.word	0x7ff00000
 801713c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801713e:	1c51      	adds	r1, r2, #1
 8017140:	9115      	str	r1, [sp, #84]	; 0x54
 8017142:	7852      	ldrb	r2, [r2, #1]
 8017144:	2a30      	cmp	r2, #48	; 0x30
 8017146:	d0f9      	beq.n	801713c <_strtod_l+0x29c>
 8017148:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801714c:	2908      	cmp	r1, #8
 801714e:	f63f af7a 	bhi.w	8017046 <_strtod_l+0x1a6>
 8017152:	3a30      	subs	r2, #48	; 0x30
 8017154:	9208      	str	r2, [sp, #32]
 8017156:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017158:	920c      	str	r2, [sp, #48]	; 0x30
 801715a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801715c:	1c57      	adds	r7, r2, #1
 801715e:	9715      	str	r7, [sp, #84]	; 0x54
 8017160:	7852      	ldrb	r2, [r2, #1]
 8017162:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8017166:	f1be 0f09 	cmp.w	lr, #9
 801716a:	d938      	bls.n	80171de <_strtod_l+0x33e>
 801716c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801716e:	1a7f      	subs	r7, r7, r1
 8017170:	2f08      	cmp	r7, #8
 8017172:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017176:	dc03      	bgt.n	8017180 <_strtod_l+0x2e0>
 8017178:	9908      	ldr	r1, [sp, #32]
 801717a:	428f      	cmp	r7, r1
 801717c:	bfa8      	it	ge
 801717e:	460f      	movge	r7, r1
 8017180:	f1bc 0f00 	cmp.w	ip, #0
 8017184:	d000      	beq.n	8017188 <_strtod_l+0x2e8>
 8017186:	427f      	negs	r7, r7
 8017188:	2e00      	cmp	r6, #0
 801718a:	d14f      	bne.n	801722c <_strtod_l+0x38c>
 801718c:	9904      	ldr	r1, [sp, #16]
 801718e:	4301      	orrs	r1, r0
 8017190:	f47f aec1 	bne.w	8016f16 <_strtod_l+0x76>
 8017194:	2b00      	cmp	r3, #0
 8017196:	f47f aedb 	bne.w	8016f50 <_strtod_l+0xb0>
 801719a:	2a69      	cmp	r2, #105	; 0x69
 801719c:	d029      	beq.n	80171f2 <_strtod_l+0x352>
 801719e:	dc26      	bgt.n	80171ee <_strtod_l+0x34e>
 80171a0:	2a49      	cmp	r2, #73	; 0x49
 80171a2:	d026      	beq.n	80171f2 <_strtod_l+0x352>
 80171a4:	2a4e      	cmp	r2, #78	; 0x4e
 80171a6:	f47f aed3 	bne.w	8016f50 <_strtod_l+0xb0>
 80171aa:	499b      	ldr	r1, [pc, #620]	; (8017418 <_strtod_l+0x578>)
 80171ac:	a815      	add	r0, sp, #84	; 0x54
 80171ae:	f001 fd9b 	bl	8018ce8 <__match>
 80171b2:	2800      	cmp	r0, #0
 80171b4:	f43f aecc 	beq.w	8016f50 <_strtod_l+0xb0>
 80171b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171ba:	781b      	ldrb	r3, [r3, #0]
 80171bc:	2b28      	cmp	r3, #40	; 0x28
 80171be:	d12f      	bne.n	8017220 <_strtod_l+0x380>
 80171c0:	4996      	ldr	r1, [pc, #600]	; (801741c <_strtod_l+0x57c>)
 80171c2:	aa18      	add	r2, sp, #96	; 0x60
 80171c4:	a815      	add	r0, sp, #84	; 0x54
 80171c6:	f001 fda3 	bl	8018d10 <__hexnan>
 80171ca:	2805      	cmp	r0, #5
 80171cc:	d128      	bne.n	8017220 <_strtod_l+0x380>
 80171ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80171d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80171d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80171d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80171dc:	e69b      	b.n	8016f16 <_strtod_l+0x76>
 80171de:	9f08      	ldr	r7, [sp, #32]
 80171e0:	210a      	movs	r1, #10
 80171e2:	fb01 2107 	mla	r1, r1, r7, r2
 80171e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80171ea:	9208      	str	r2, [sp, #32]
 80171ec:	e7b5      	b.n	801715a <_strtod_l+0x2ba>
 80171ee:	2a6e      	cmp	r2, #110	; 0x6e
 80171f0:	e7d9      	b.n	80171a6 <_strtod_l+0x306>
 80171f2:	498b      	ldr	r1, [pc, #556]	; (8017420 <_strtod_l+0x580>)
 80171f4:	a815      	add	r0, sp, #84	; 0x54
 80171f6:	f001 fd77 	bl	8018ce8 <__match>
 80171fa:	2800      	cmp	r0, #0
 80171fc:	f43f aea8 	beq.w	8016f50 <_strtod_l+0xb0>
 8017200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017202:	4988      	ldr	r1, [pc, #544]	; (8017424 <_strtod_l+0x584>)
 8017204:	3b01      	subs	r3, #1
 8017206:	a815      	add	r0, sp, #84	; 0x54
 8017208:	9315      	str	r3, [sp, #84]	; 0x54
 801720a:	f001 fd6d 	bl	8018ce8 <__match>
 801720e:	b910      	cbnz	r0, 8017216 <_strtod_l+0x376>
 8017210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017212:	3301      	adds	r3, #1
 8017214:	9315      	str	r3, [sp, #84]	; 0x54
 8017216:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8017434 <_strtod_l+0x594>
 801721a:	f04f 0800 	mov.w	r8, #0
 801721e:	e67a      	b.n	8016f16 <_strtod_l+0x76>
 8017220:	4881      	ldr	r0, [pc, #516]	; (8017428 <_strtod_l+0x588>)
 8017222:	f001 fa7d 	bl	8018720 <nan>
 8017226:	ec59 8b10 	vmov	r8, r9, d0
 801722a:	e674      	b.n	8016f16 <_strtod_l+0x76>
 801722c:	9b05      	ldr	r3, [sp, #20]
 801722e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017230:	1afb      	subs	r3, r7, r3
 8017232:	f1bb 0f00 	cmp.w	fp, #0
 8017236:	bf08      	it	eq
 8017238:	46b3      	moveq	fp, r6
 801723a:	2e10      	cmp	r6, #16
 801723c:	9308      	str	r3, [sp, #32]
 801723e:	4635      	mov	r5, r6
 8017240:	bfa8      	it	ge
 8017242:	2510      	movge	r5, #16
 8017244:	f7e9 f986 	bl	8000554 <__aeabi_ui2d>
 8017248:	2e09      	cmp	r6, #9
 801724a:	4680      	mov	r8, r0
 801724c:	4689      	mov	r9, r1
 801724e:	dd13      	ble.n	8017278 <_strtod_l+0x3d8>
 8017250:	4b76      	ldr	r3, [pc, #472]	; (801742c <_strtod_l+0x58c>)
 8017252:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017256:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801725a:	f7e9 f9f5 	bl	8000648 <__aeabi_dmul>
 801725e:	4680      	mov	r8, r0
 8017260:	4650      	mov	r0, sl
 8017262:	4689      	mov	r9, r1
 8017264:	f7e9 f976 	bl	8000554 <__aeabi_ui2d>
 8017268:	4602      	mov	r2, r0
 801726a:	460b      	mov	r3, r1
 801726c:	4640      	mov	r0, r8
 801726e:	4649      	mov	r1, r9
 8017270:	f7e9 f834 	bl	80002dc <__adddf3>
 8017274:	4680      	mov	r8, r0
 8017276:	4689      	mov	r9, r1
 8017278:	2e0f      	cmp	r6, #15
 801727a:	dc38      	bgt.n	80172ee <_strtod_l+0x44e>
 801727c:	9b08      	ldr	r3, [sp, #32]
 801727e:	2b00      	cmp	r3, #0
 8017280:	f43f ae49 	beq.w	8016f16 <_strtod_l+0x76>
 8017284:	dd24      	ble.n	80172d0 <_strtod_l+0x430>
 8017286:	2b16      	cmp	r3, #22
 8017288:	dc0b      	bgt.n	80172a2 <_strtod_l+0x402>
 801728a:	4968      	ldr	r1, [pc, #416]	; (801742c <_strtod_l+0x58c>)
 801728c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017294:	4642      	mov	r2, r8
 8017296:	464b      	mov	r3, r9
 8017298:	f7e9 f9d6 	bl	8000648 <__aeabi_dmul>
 801729c:	4680      	mov	r8, r0
 801729e:	4689      	mov	r9, r1
 80172a0:	e639      	b.n	8016f16 <_strtod_l+0x76>
 80172a2:	9a08      	ldr	r2, [sp, #32]
 80172a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80172a8:	4293      	cmp	r3, r2
 80172aa:	db20      	blt.n	80172ee <_strtod_l+0x44e>
 80172ac:	4c5f      	ldr	r4, [pc, #380]	; (801742c <_strtod_l+0x58c>)
 80172ae:	f1c6 060f 	rsb	r6, r6, #15
 80172b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80172b6:	4642      	mov	r2, r8
 80172b8:	464b      	mov	r3, r9
 80172ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80172be:	f7e9 f9c3 	bl	8000648 <__aeabi_dmul>
 80172c2:	9b08      	ldr	r3, [sp, #32]
 80172c4:	1b9e      	subs	r6, r3, r6
 80172c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80172ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80172ce:	e7e3      	b.n	8017298 <_strtod_l+0x3f8>
 80172d0:	9b08      	ldr	r3, [sp, #32]
 80172d2:	3316      	adds	r3, #22
 80172d4:	db0b      	blt.n	80172ee <_strtod_l+0x44e>
 80172d6:	9b05      	ldr	r3, [sp, #20]
 80172d8:	1bdf      	subs	r7, r3, r7
 80172da:	4b54      	ldr	r3, [pc, #336]	; (801742c <_strtod_l+0x58c>)
 80172dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80172e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172e4:	4640      	mov	r0, r8
 80172e6:	4649      	mov	r1, r9
 80172e8:	f7e9 fad8 	bl	800089c <__aeabi_ddiv>
 80172ec:	e7d6      	b.n	801729c <_strtod_l+0x3fc>
 80172ee:	9b08      	ldr	r3, [sp, #32]
 80172f0:	1b75      	subs	r5, r6, r5
 80172f2:	441d      	add	r5, r3
 80172f4:	2d00      	cmp	r5, #0
 80172f6:	dd70      	ble.n	80173da <_strtod_l+0x53a>
 80172f8:	f015 030f 	ands.w	r3, r5, #15
 80172fc:	d00a      	beq.n	8017314 <_strtod_l+0x474>
 80172fe:	494b      	ldr	r1, [pc, #300]	; (801742c <_strtod_l+0x58c>)
 8017300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017304:	4642      	mov	r2, r8
 8017306:	464b      	mov	r3, r9
 8017308:	e9d1 0100 	ldrd	r0, r1, [r1]
 801730c:	f7e9 f99c 	bl	8000648 <__aeabi_dmul>
 8017310:	4680      	mov	r8, r0
 8017312:	4689      	mov	r9, r1
 8017314:	f035 050f 	bics.w	r5, r5, #15
 8017318:	d04d      	beq.n	80173b6 <_strtod_l+0x516>
 801731a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801731e:	dd22      	ble.n	8017366 <_strtod_l+0x4c6>
 8017320:	2500      	movs	r5, #0
 8017322:	46ab      	mov	fp, r5
 8017324:	9509      	str	r5, [sp, #36]	; 0x24
 8017326:	9505      	str	r5, [sp, #20]
 8017328:	2322      	movs	r3, #34	; 0x22
 801732a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8017434 <_strtod_l+0x594>
 801732e:	6023      	str	r3, [r4, #0]
 8017330:	f04f 0800 	mov.w	r8, #0
 8017334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017336:	2b00      	cmp	r3, #0
 8017338:	f43f aded 	beq.w	8016f16 <_strtod_l+0x76>
 801733c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801733e:	4620      	mov	r0, r4
 8017340:	f7ff f924 	bl	801658c <_Bfree>
 8017344:	9905      	ldr	r1, [sp, #20]
 8017346:	4620      	mov	r0, r4
 8017348:	f7ff f920 	bl	801658c <_Bfree>
 801734c:	4659      	mov	r1, fp
 801734e:	4620      	mov	r0, r4
 8017350:	f7ff f91c 	bl	801658c <_Bfree>
 8017354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017356:	4620      	mov	r0, r4
 8017358:	f7ff f918 	bl	801658c <_Bfree>
 801735c:	4629      	mov	r1, r5
 801735e:	4620      	mov	r0, r4
 8017360:	f7ff f914 	bl	801658c <_Bfree>
 8017364:	e5d7      	b.n	8016f16 <_strtod_l+0x76>
 8017366:	4b32      	ldr	r3, [pc, #200]	; (8017430 <_strtod_l+0x590>)
 8017368:	9304      	str	r3, [sp, #16]
 801736a:	2300      	movs	r3, #0
 801736c:	112d      	asrs	r5, r5, #4
 801736e:	4640      	mov	r0, r8
 8017370:	4649      	mov	r1, r9
 8017372:	469a      	mov	sl, r3
 8017374:	2d01      	cmp	r5, #1
 8017376:	dc21      	bgt.n	80173bc <_strtod_l+0x51c>
 8017378:	b10b      	cbz	r3, 801737e <_strtod_l+0x4de>
 801737a:	4680      	mov	r8, r0
 801737c:	4689      	mov	r9, r1
 801737e:	492c      	ldr	r1, [pc, #176]	; (8017430 <_strtod_l+0x590>)
 8017380:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017384:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017388:	4642      	mov	r2, r8
 801738a:	464b      	mov	r3, r9
 801738c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017390:	f7e9 f95a 	bl	8000648 <__aeabi_dmul>
 8017394:	4b27      	ldr	r3, [pc, #156]	; (8017434 <_strtod_l+0x594>)
 8017396:	460a      	mov	r2, r1
 8017398:	400b      	ands	r3, r1
 801739a:	4927      	ldr	r1, [pc, #156]	; (8017438 <_strtod_l+0x598>)
 801739c:	428b      	cmp	r3, r1
 801739e:	4680      	mov	r8, r0
 80173a0:	d8be      	bhi.n	8017320 <_strtod_l+0x480>
 80173a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80173a6:	428b      	cmp	r3, r1
 80173a8:	bf86      	itte	hi
 80173aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801743c <_strtod_l+0x59c>
 80173ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80173b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80173b6:	2300      	movs	r3, #0
 80173b8:	9304      	str	r3, [sp, #16]
 80173ba:	e07b      	b.n	80174b4 <_strtod_l+0x614>
 80173bc:	07ea      	lsls	r2, r5, #31
 80173be:	d505      	bpl.n	80173cc <_strtod_l+0x52c>
 80173c0:	9b04      	ldr	r3, [sp, #16]
 80173c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c6:	f7e9 f93f 	bl	8000648 <__aeabi_dmul>
 80173ca:	2301      	movs	r3, #1
 80173cc:	9a04      	ldr	r2, [sp, #16]
 80173ce:	3208      	adds	r2, #8
 80173d0:	f10a 0a01 	add.w	sl, sl, #1
 80173d4:	106d      	asrs	r5, r5, #1
 80173d6:	9204      	str	r2, [sp, #16]
 80173d8:	e7cc      	b.n	8017374 <_strtod_l+0x4d4>
 80173da:	d0ec      	beq.n	80173b6 <_strtod_l+0x516>
 80173dc:	426d      	negs	r5, r5
 80173de:	f015 020f 	ands.w	r2, r5, #15
 80173e2:	d00a      	beq.n	80173fa <_strtod_l+0x55a>
 80173e4:	4b11      	ldr	r3, [pc, #68]	; (801742c <_strtod_l+0x58c>)
 80173e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173ea:	4640      	mov	r0, r8
 80173ec:	4649      	mov	r1, r9
 80173ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f2:	f7e9 fa53 	bl	800089c <__aeabi_ddiv>
 80173f6:	4680      	mov	r8, r0
 80173f8:	4689      	mov	r9, r1
 80173fa:	112d      	asrs	r5, r5, #4
 80173fc:	d0db      	beq.n	80173b6 <_strtod_l+0x516>
 80173fe:	2d1f      	cmp	r5, #31
 8017400:	dd1e      	ble.n	8017440 <_strtod_l+0x5a0>
 8017402:	2500      	movs	r5, #0
 8017404:	46ab      	mov	fp, r5
 8017406:	9509      	str	r5, [sp, #36]	; 0x24
 8017408:	9505      	str	r5, [sp, #20]
 801740a:	2322      	movs	r3, #34	; 0x22
 801740c:	f04f 0800 	mov.w	r8, #0
 8017410:	f04f 0900 	mov.w	r9, #0
 8017414:	6023      	str	r3, [r4, #0]
 8017416:	e78d      	b.n	8017334 <_strtod_l+0x494>
 8017418:	0801c045 	.word	0x0801c045
 801741c:	0801c26c 	.word	0x0801c26c
 8017420:	0801c03d 	.word	0x0801c03d
 8017424:	0801c072 	.word	0x0801c072
 8017428:	0801c418 	.word	0x0801c418
 801742c:	0801c180 	.word	0x0801c180
 8017430:	0801c158 	.word	0x0801c158
 8017434:	7ff00000 	.word	0x7ff00000
 8017438:	7ca00000 	.word	0x7ca00000
 801743c:	7fefffff 	.word	0x7fefffff
 8017440:	f015 0310 	ands.w	r3, r5, #16
 8017444:	bf18      	it	ne
 8017446:	236a      	movne	r3, #106	; 0x6a
 8017448:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80177ec <_strtod_l+0x94c>
 801744c:	9304      	str	r3, [sp, #16]
 801744e:	4640      	mov	r0, r8
 8017450:	4649      	mov	r1, r9
 8017452:	2300      	movs	r3, #0
 8017454:	07ea      	lsls	r2, r5, #31
 8017456:	d504      	bpl.n	8017462 <_strtod_l+0x5c2>
 8017458:	e9da 2300 	ldrd	r2, r3, [sl]
 801745c:	f7e9 f8f4 	bl	8000648 <__aeabi_dmul>
 8017460:	2301      	movs	r3, #1
 8017462:	106d      	asrs	r5, r5, #1
 8017464:	f10a 0a08 	add.w	sl, sl, #8
 8017468:	d1f4      	bne.n	8017454 <_strtod_l+0x5b4>
 801746a:	b10b      	cbz	r3, 8017470 <_strtod_l+0x5d0>
 801746c:	4680      	mov	r8, r0
 801746e:	4689      	mov	r9, r1
 8017470:	9b04      	ldr	r3, [sp, #16]
 8017472:	b1bb      	cbz	r3, 80174a4 <_strtod_l+0x604>
 8017474:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8017478:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801747c:	2b00      	cmp	r3, #0
 801747e:	4649      	mov	r1, r9
 8017480:	dd10      	ble.n	80174a4 <_strtod_l+0x604>
 8017482:	2b1f      	cmp	r3, #31
 8017484:	f340 811e 	ble.w	80176c4 <_strtod_l+0x824>
 8017488:	2b34      	cmp	r3, #52	; 0x34
 801748a:	bfde      	ittt	le
 801748c:	f04f 33ff 	movle.w	r3, #4294967295
 8017490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8017494:	4093      	lslle	r3, r2
 8017496:	f04f 0800 	mov.w	r8, #0
 801749a:	bfcc      	ite	gt
 801749c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80174a0:	ea03 0901 	andle.w	r9, r3, r1
 80174a4:	2200      	movs	r2, #0
 80174a6:	2300      	movs	r3, #0
 80174a8:	4640      	mov	r0, r8
 80174aa:	4649      	mov	r1, r9
 80174ac:	f7e9 fb34 	bl	8000b18 <__aeabi_dcmpeq>
 80174b0:	2800      	cmp	r0, #0
 80174b2:	d1a6      	bne.n	8017402 <_strtod_l+0x562>
 80174b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174b6:	9300      	str	r3, [sp, #0]
 80174b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174ba:	4633      	mov	r3, r6
 80174bc:	465a      	mov	r2, fp
 80174be:	4620      	mov	r0, r4
 80174c0:	f7ff f8cc 	bl	801665c <__s2b>
 80174c4:	9009      	str	r0, [sp, #36]	; 0x24
 80174c6:	2800      	cmp	r0, #0
 80174c8:	f43f af2a 	beq.w	8017320 <_strtod_l+0x480>
 80174cc:	9a08      	ldr	r2, [sp, #32]
 80174ce:	9b05      	ldr	r3, [sp, #20]
 80174d0:	2a00      	cmp	r2, #0
 80174d2:	eba3 0307 	sub.w	r3, r3, r7
 80174d6:	bfa8      	it	ge
 80174d8:	2300      	movge	r3, #0
 80174da:	930c      	str	r3, [sp, #48]	; 0x30
 80174dc:	2500      	movs	r5, #0
 80174de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80174e2:	9312      	str	r3, [sp, #72]	; 0x48
 80174e4:	46ab      	mov	fp, r5
 80174e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174e8:	4620      	mov	r0, r4
 80174ea:	6859      	ldr	r1, [r3, #4]
 80174ec:	f7ff f80e 	bl	801650c <_Balloc>
 80174f0:	9005      	str	r0, [sp, #20]
 80174f2:	2800      	cmp	r0, #0
 80174f4:	f43f af18 	beq.w	8017328 <_strtod_l+0x488>
 80174f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174fa:	691a      	ldr	r2, [r3, #16]
 80174fc:	3202      	adds	r2, #2
 80174fe:	f103 010c 	add.w	r1, r3, #12
 8017502:	0092      	lsls	r2, r2, #2
 8017504:	300c      	adds	r0, #12
 8017506:	f7fe f872 	bl	80155ee <memcpy>
 801750a:	ec49 8b10 	vmov	d0, r8, r9
 801750e:	aa18      	add	r2, sp, #96	; 0x60
 8017510:	a917      	add	r1, sp, #92	; 0x5c
 8017512:	4620      	mov	r0, r4
 8017514:	f7ff fbd6 	bl	8016cc4 <__d2b>
 8017518:	ec49 8b18 	vmov	d8, r8, r9
 801751c:	9016      	str	r0, [sp, #88]	; 0x58
 801751e:	2800      	cmp	r0, #0
 8017520:	f43f af02 	beq.w	8017328 <_strtod_l+0x488>
 8017524:	2101      	movs	r1, #1
 8017526:	4620      	mov	r0, r4
 8017528:	f7ff f930 	bl	801678c <__i2b>
 801752c:	4683      	mov	fp, r0
 801752e:	2800      	cmp	r0, #0
 8017530:	f43f aefa 	beq.w	8017328 <_strtod_l+0x488>
 8017534:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8017536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017538:	2e00      	cmp	r6, #0
 801753a:	bfab      	itete	ge
 801753c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801753e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8017540:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8017542:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8017546:	bfac      	ite	ge
 8017548:	eb06 0a03 	addge.w	sl, r6, r3
 801754c:	1b9f      	sublt	r7, r3, r6
 801754e:	9b04      	ldr	r3, [sp, #16]
 8017550:	1af6      	subs	r6, r6, r3
 8017552:	4416      	add	r6, r2
 8017554:	4ba0      	ldr	r3, [pc, #640]	; (80177d8 <_strtod_l+0x938>)
 8017556:	3e01      	subs	r6, #1
 8017558:	429e      	cmp	r6, r3
 801755a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801755e:	f280 80c4 	bge.w	80176ea <_strtod_l+0x84a>
 8017562:	1b9b      	subs	r3, r3, r6
 8017564:	2b1f      	cmp	r3, #31
 8017566:	eba2 0203 	sub.w	r2, r2, r3
 801756a:	f04f 0101 	mov.w	r1, #1
 801756e:	f300 80b0 	bgt.w	80176d2 <_strtod_l+0x832>
 8017572:	fa01 f303 	lsl.w	r3, r1, r3
 8017576:	930e      	str	r3, [sp, #56]	; 0x38
 8017578:	2300      	movs	r3, #0
 801757a:	930d      	str	r3, [sp, #52]	; 0x34
 801757c:	eb0a 0602 	add.w	r6, sl, r2
 8017580:	9b04      	ldr	r3, [sp, #16]
 8017582:	45b2      	cmp	sl, r6
 8017584:	4417      	add	r7, r2
 8017586:	441f      	add	r7, r3
 8017588:	4653      	mov	r3, sl
 801758a:	bfa8      	it	ge
 801758c:	4633      	movge	r3, r6
 801758e:	42bb      	cmp	r3, r7
 8017590:	bfa8      	it	ge
 8017592:	463b      	movge	r3, r7
 8017594:	2b00      	cmp	r3, #0
 8017596:	bfc2      	ittt	gt
 8017598:	1af6      	subgt	r6, r6, r3
 801759a:	1aff      	subgt	r7, r7, r3
 801759c:	ebaa 0a03 	subgt.w	sl, sl, r3
 80175a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	dd17      	ble.n	80175d6 <_strtod_l+0x736>
 80175a6:	4659      	mov	r1, fp
 80175a8:	461a      	mov	r2, r3
 80175aa:	4620      	mov	r0, r4
 80175ac:	f7ff f9ae 	bl	801690c <__pow5mult>
 80175b0:	4683      	mov	fp, r0
 80175b2:	2800      	cmp	r0, #0
 80175b4:	f43f aeb8 	beq.w	8017328 <_strtod_l+0x488>
 80175b8:	4601      	mov	r1, r0
 80175ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80175bc:	4620      	mov	r0, r4
 80175be:	f7ff f8fb 	bl	80167b8 <__multiply>
 80175c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80175c4:	2800      	cmp	r0, #0
 80175c6:	f43f aeaf 	beq.w	8017328 <_strtod_l+0x488>
 80175ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80175cc:	4620      	mov	r0, r4
 80175ce:	f7fe ffdd 	bl	801658c <_Bfree>
 80175d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175d4:	9316      	str	r3, [sp, #88]	; 0x58
 80175d6:	2e00      	cmp	r6, #0
 80175d8:	f300 808c 	bgt.w	80176f4 <_strtod_l+0x854>
 80175dc:	9b08      	ldr	r3, [sp, #32]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	dd08      	ble.n	80175f4 <_strtod_l+0x754>
 80175e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175e4:	9905      	ldr	r1, [sp, #20]
 80175e6:	4620      	mov	r0, r4
 80175e8:	f7ff f990 	bl	801690c <__pow5mult>
 80175ec:	9005      	str	r0, [sp, #20]
 80175ee:	2800      	cmp	r0, #0
 80175f0:	f43f ae9a 	beq.w	8017328 <_strtod_l+0x488>
 80175f4:	2f00      	cmp	r7, #0
 80175f6:	dd08      	ble.n	801760a <_strtod_l+0x76a>
 80175f8:	9905      	ldr	r1, [sp, #20]
 80175fa:	463a      	mov	r2, r7
 80175fc:	4620      	mov	r0, r4
 80175fe:	f7ff f9df 	bl	80169c0 <__lshift>
 8017602:	9005      	str	r0, [sp, #20]
 8017604:	2800      	cmp	r0, #0
 8017606:	f43f ae8f 	beq.w	8017328 <_strtod_l+0x488>
 801760a:	f1ba 0f00 	cmp.w	sl, #0
 801760e:	dd08      	ble.n	8017622 <_strtod_l+0x782>
 8017610:	4659      	mov	r1, fp
 8017612:	4652      	mov	r2, sl
 8017614:	4620      	mov	r0, r4
 8017616:	f7ff f9d3 	bl	80169c0 <__lshift>
 801761a:	4683      	mov	fp, r0
 801761c:	2800      	cmp	r0, #0
 801761e:	f43f ae83 	beq.w	8017328 <_strtod_l+0x488>
 8017622:	9a05      	ldr	r2, [sp, #20]
 8017624:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017626:	4620      	mov	r0, r4
 8017628:	f7ff fa52 	bl	8016ad0 <__mdiff>
 801762c:	4605      	mov	r5, r0
 801762e:	2800      	cmp	r0, #0
 8017630:	f43f ae7a 	beq.w	8017328 <_strtod_l+0x488>
 8017634:	68c3      	ldr	r3, [r0, #12]
 8017636:	930b      	str	r3, [sp, #44]	; 0x2c
 8017638:	2300      	movs	r3, #0
 801763a:	60c3      	str	r3, [r0, #12]
 801763c:	4659      	mov	r1, fp
 801763e:	f7ff fa2b 	bl	8016a98 <__mcmp>
 8017642:	2800      	cmp	r0, #0
 8017644:	da60      	bge.n	8017708 <_strtod_l+0x868>
 8017646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017648:	ea53 0308 	orrs.w	r3, r3, r8
 801764c:	f040 8084 	bne.w	8017758 <_strtod_l+0x8b8>
 8017650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017654:	2b00      	cmp	r3, #0
 8017656:	d17f      	bne.n	8017758 <_strtod_l+0x8b8>
 8017658:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801765c:	0d1b      	lsrs	r3, r3, #20
 801765e:	051b      	lsls	r3, r3, #20
 8017660:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017664:	d978      	bls.n	8017758 <_strtod_l+0x8b8>
 8017666:	696b      	ldr	r3, [r5, #20]
 8017668:	b913      	cbnz	r3, 8017670 <_strtod_l+0x7d0>
 801766a:	692b      	ldr	r3, [r5, #16]
 801766c:	2b01      	cmp	r3, #1
 801766e:	dd73      	ble.n	8017758 <_strtod_l+0x8b8>
 8017670:	4629      	mov	r1, r5
 8017672:	2201      	movs	r2, #1
 8017674:	4620      	mov	r0, r4
 8017676:	f7ff f9a3 	bl	80169c0 <__lshift>
 801767a:	4659      	mov	r1, fp
 801767c:	4605      	mov	r5, r0
 801767e:	f7ff fa0b 	bl	8016a98 <__mcmp>
 8017682:	2800      	cmp	r0, #0
 8017684:	dd68      	ble.n	8017758 <_strtod_l+0x8b8>
 8017686:	9904      	ldr	r1, [sp, #16]
 8017688:	4a54      	ldr	r2, [pc, #336]	; (80177dc <_strtod_l+0x93c>)
 801768a:	464b      	mov	r3, r9
 801768c:	2900      	cmp	r1, #0
 801768e:	f000 8084 	beq.w	801779a <_strtod_l+0x8fa>
 8017692:	ea02 0109 	and.w	r1, r2, r9
 8017696:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801769a:	dc7e      	bgt.n	801779a <_strtod_l+0x8fa>
 801769c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80176a0:	f77f aeb3 	ble.w	801740a <_strtod_l+0x56a>
 80176a4:	4b4e      	ldr	r3, [pc, #312]	; (80177e0 <_strtod_l+0x940>)
 80176a6:	4640      	mov	r0, r8
 80176a8:	4649      	mov	r1, r9
 80176aa:	2200      	movs	r2, #0
 80176ac:	f7e8 ffcc 	bl	8000648 <__aeabi_dmul>
 80176b0:	4b4a      	ldr	r3, [pc, #296]	; (80177dc <_strtod_l+0x93c>)
 80176b2:	400b      	ands	r3, r1
 80176b4:	4680      	mov	r8, r0
 80176b6:	4689      	mov	r9, r1
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	f47f ae3f 	bne.w	801733c <_strtod_l+0x49c>
 80176be:	2322      	movs	r3, #34	; 0x22
 80176c0:	6023      	str	r3, [r4, #0]
 80176c2:	e63b      	b.n	801733c <_strtod_l+0x49c>
 80176c4:	f04f 32ff 	mov.w	r2, #4294967295
 80176c8:	fa02 f303 	lsl.w	r3, r2, r3
 80176cc:	ea03 0808 	and.w	r8, r3, r8
 80176d0:	e6e8      	b.n	80174a4 <_strtod_l+0x604>
 80176d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80176d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80176da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80176de:	36e2      	adds	r6, #226	; 0xe2
 80176e0:	fa01 f306 	lsl.w	r3, r1, r6
 80176e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80176e8:	e748      	b.n	801757c <_strtod_l+0x6dc>
 80176ea:	2100      	movs	r1, #0
 80176ec:	2301      	movs	r3, #1
 80176ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80176f2:	e743      	b.n	801757c <_strtod_l+0x6dc>
 80176f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80176f6:	4632      	mov	r2, r6
 80176f8:	4620      	mov	r0, r4
 80176fa:	f7ff f961 	bl	80169c0 <__lshift>
 80176fe:	9016      	str	r0, [sp, #88]	; 0x58
 8017700:	2800      	cmp	r0, #0
 8017702:	f47f af6b 	bne.w	80175dc <_strtod_l+0x73c>
 8017706:	e60f      	b.n	8017328 <_strtod_l+0x488>
 8017708:	46ca      	mov	sl, r9
 801770a:	d171      	bne.n	80177f0 <_strtod_l+0x950>
 801770c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801770e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017712:	b352      	cbz	r2, 801776a <_strtod_l+0x8ca>
 8017714:	4a33      	ldr	r2, [pc, #204]	; (80177e4 <_strtod_l+0x944>)
 8017716:	4293      	cmp	r3, r2
 8017718:	d12a      	bne.n	8017770 <_strtod_l+0x8d0>
 801771a:	9b04      	ldr	r3, [sp, #16]
 801771c:	4641      	mov	r1, r8
 801771e:	b1fb      	cbz	r3, 8017760 <_strtod_l+0x8c0>
 8017720:	4b2e      	ldr	r3, [pc, #184]	; (80177dc <_strtod_l+0x93c>)
 8017722:	ea09 0303 	and.w	r3, r9, r3
 8017726:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801772a:	f04f 32ff 	mov.w	r2, #4294967295
 801772e:	d81a      	bhi.n	8017766 <_strtod_l+0x8c6>
 8017730:	0d1b      	lsrs	r3, r3, #20
 8017732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017736:	fa02 f303 	lsl.w	r3, r2, r3
 801773a:	4299      	cmp	r1, r3
 801773c:	d118      	bne.n	8017770 <_strtod_l+0x8d0>
 801773e:	4b2a      	ldr	r3, [pc, #168]	; (80177e8 <_strtod_l+0x948>)
 8017740:	459a      	cmp	sl, r3
 8017742:	d102      	bne.n	801774a <_strtod_l+0x8aa>
 8017744:	3101      	adds	r1, #1
 8017746:	f43f adef 	beq.w	8017328 <_strtod_l+0x488>
 801774a:	4b24      	ldr	r3, [pc, #144]	; (80177dc <_strtod_l+0x93c>)
 801774c:	ea0a 0303 	and.w	r3, sl, r3
 8017750:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8017754:	f04f 0800 	mov.w	r8, #0
 8017758:	9b04      	ldr	r3, [sp, #16]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d1a2      	bne.n	80176a4 <_strtod_l+0x804>
 801775e:	e5ed      	b.n	801733c <_strtod_l+0x49c>
 8017760:	f04f 33ff 	mov.w	r3, #4294967295
 8017764:	e7e9      	b.n	801773a <_strtod_l+0x89a>
 8017766:	4613      	mov	r3, r2
 8017768:	e7e7      	b.n	801773a <_strtod_l+0x89a>
 801776a:	ea53 0308 	orrs.w	r3, r3, r8
 801776e:	d08a      	beq.n	8017686 <_strtod_l+0x7e6>
 8017770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017772:	b1e3      	cbz	r3, 80177ae <_strtod_l+0x90e>
 8017774:	ea13 0f0a 	tst.w	r3, sl
 8017778:	d0ee      	beq.n	8017758 <_strtod_l+0x8b8>
 801777a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801777c:	9a04      	ldr	r2, [sp, #16]
 801777e:	4640      	mov	r0, r8
 8017780:	4649      	mov	r1, r9
 8017782:	b1c3      	cbz	r3, 80177b6 <_strtod_l+0x916>
 8017784:	f7ff fb6f 	bl	8016e66 <sulp>
 8017788:	4602      	mov	r2, r0
 801778a:	460b      	mov	r3, r1
 801778c:	ec51 0b18 	vmov	r0, r1, d8
 8017790:	f7e8 fda4 	bl	80002dc <__adddf3>
 8017794:	4680      	mov	r8, r0
 8017796:	4689      	mov	r9, r1
 8017798:	e7de      	b.n	8017758 <_strtod_l+0x8b8>
 801779a:	4013      	ands	r3, r2
 801779c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80177a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80177a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80177a8:	f04f 38ff 	mov.w	r8, #4294967295
 80177ac:	e7d4      	b.n	8017758 <_strtod_l+0x8b8>
 80177ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177b0:	ea13 0f08 	tst.w	r3, r8
 80177b4:	e7e0      	b.n	8017778 <_strtod_l+0x8d8>
 80177b6:	f7ff fb56 	bl	8016e66 <sulp>
 80177ba:	4602      	mov	r2, r0
 80177bc:	460b      	mov	r3, r1
 80177be:	ec51 0b18 	vmov	r0, r1, d8
 80177c2:	f7e8 fd89 	bl	80002d8 <__aeabi_dsub>
 80177c6:	2200      	movs	r2, #0
 80177c8:	2300      	movs	r3, #0
 80177ca:	4680      	mov	r8, r0
 80177cc:	4689      	mov	r9, r1
 80177ce:	f7e9 f9a3 	bl	8000b18 <__aeabi_dcmpeq>
 80177d2:	2800      	cmp	r0, #0
 80177d4:	d0c0      	beq.n	8017758 <_strtod_l+0x8b8>
 80177d6:	e618      	b.n	801740a <_strtod_l+0x56a>
 80177d8:	fffffc02 	.word	0xfffffc02
 80177dc:	7ff00000 	.word	0x7ff00000
 80177e0:	39500000 	.word	0x39500000
 80177e4:	000fffff 	.word	0x000fffff
 80177e8:	7fefffff 	.word	0x7fefffff
 80177ec:	0801c280 	.word	0x0801c280
 80177f0:	4659      	mov	r1, fp
 80177f2:	4628      	mov	r0, r5
 80177f4:	f7ff fac0 	bl	8016d78 <__ratio>
 80177f8:	ec57 6b10 	vmov	r6, r7, d0
 80177fc:	ee10 0a10 	vmov	r0, s0
 8017800:	2200      	movs	r2, #0
 8017802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017806:	4639      	mov	r1, r7
 8017808:	f7e9 f99a 	bl	8000b40 <__aeabi_dcmple>
 801780c:	2800      	cmp	r0, #0
 801780e:	d071      	beq.n	80178f4 <_strtod_l+0xa54>
 8017810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017812:	2b00      	cmp	r3, #0
 8017814:	d17c      	bne.n	8017910 <_strtod_l+0xa70>
 8017816:	f1b8 0f00 	cmp.w	r8, #0
 801781a:	d15a      	bne.n	80178d2 <_strtod_l+0xa32>
 801781c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017820:	2b00      	cmp	r3, #0
 8017822:	d15d      	bne.n	80178e0 <_strtod_l+0xa40>
 8017824:	4b90      	ldr	r3, [pc, #576]	; (8017a68 <_strtod_l+0xbc8>)
 8017826:	2200      	movs	r2, #0
 8017828:	4630      	mov	r0, r6
 801782a:	4639      	mov	r1, r7
 801782c:	f7e9 f97e 	bl	8000b2c <__aeabi_dcmplt>
 8017830:	2800      	cmp	r0, #0
 8017832:	d15c      	bne.n	80178ee <_strtod_l+0xa4e>
 8017834:	4630      	mov	r0, r6
 8017836:	4639      	mov	r1, r7
 8017838:	4b8c      	ldr	r3, [pc, #560]	; (8017a6c <_strtod_l+0xbcc>)
 801783a:	2200      	movs	r2, #0
 801783c:	f7e8 ff04 	bl	8000648 <__aeabi_dmul>
 8017840:	4606      	mov	r6, r0
 8017842:	460f      	mov	r7, r1
 8017844:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017848:	9606      	str	r6, [sp, #24]
 801784a:	9307      	str	r3, [sp, #28]
 801784c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017850:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8017854:	4b86      	ldr	r3, [pc, #536]	; (8017a70 <_strtod_l+0xbd0>)
 8017856:	ea0a 0303 	and.w	r3, sl, r3
 801785a:	930d      	str	r3, [sp, #52]	; 0x34
 801785c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801785e:	4b85      	ldr	r3, [pc, #532]	; (8017a74 <_strtod_l+0xbd4>)
 8017860:	429a      	cmp	r2, r3
 8017862:	f040 8090 	bne.w	8017986 <_strtod_l+0xae6>
 8017866:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801786a:	ec49 8b10 	vmov	d0, r8, r9
 801786e:	f7ff f9b9 	bl	8016be4 <__ulp>
 8017872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017876:	ec51 0b10 	vmov	r0, r1, d0
 801787a:	f7e8 fee5 	bl	8000648 <__aeabi_dmul>
 801787e:	4642      	mov	r2, r8
 8017880:	464b      	mov	r3, r9
 8017882:	f7e8 fd2b 	bl	80002dc <__adddf3>
 8017886:	460b      	mov	r3, r1
 8017888:	4979      	ldr	r1, [pc, #484]	; (8017a70 <_strtod_l+0xbd0>)
 801788a:	4a7b      	ldr	r2, [pc, #492]	; (8017a78 <_strtod_l+0xbd8>)
 801788c:	4019      	ands	r1, r3
 801788e:	4291      	cmp	r1, r2
 8017890:	4680      	mov	r8, r0
 8017892:	d944      	bls.n	801791e <_strtod_l+0xa7e>
 8017894:	ee18 2a90 	vmov	r2, s17
 8017898:	4b78      	ldr	r3, [pc, #480]	; (8017a7c <_strtod_l+0xbdc>)
 801789a:	429a      	cmp	r2, r3
 801789c:	d104      	bne.n	80178a8 <_strtod_l+0xa08>
 801789e:	ee18 3a10 	vmov	r3, s16
 80178a2:	3301      	adds	r3, #1
 80178a4:	f43f ad40 	beq.w	8017328 <_strtod_l+0x488>
 80178a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8017a7c <_strtod_l+0xbdc>
 80178ac:	f04f 38ff 	mov.w	r8, #4294967295
 80178b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80178b2:	4620      	mov	r0, r4
 80178b4:	f7fe fe6a 	bl	801658c <_Bfree>
 80178b8:	9905      	ldr	r1, [sp, #20]
 80178ba:	4620      	mov	r0, r4
 80178bc:	f7fe fe66 	bl	801658c <_Bfree>
 80178c0:	4659      	mov	r1, fp
 80178c2:	4620      	mov	r0, r4
 80178c4:	f7fe fe62 	bl	801658c <_Bfree>
 80178c8:	4629      	mov	r1, r5
 80178ca:	4620      	mov	r0, r4
 80178cc:	f7fe fe5e 	bl	801658c <_Bfree>
 80178d0:	e609      	b.n	80174e6 <_strtod_l+0x646>
 80178d2:	f1b8 0f01 	cmp.w	r8, #1
 80178d6:	d103      	bne.n	80178e0 <_strtod_l+0xa40>
 80178d8:	f1b9 0f00 	cmp.w	r9, #0
 80178dc:	f43f ad95 	beq.w	801740a <_strtod_l+0x56a>
 80178e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8017a38 <_strtod_l+0xb98>
 80178e4:	4f60      	ldr	r7, [pc, #384]	; (8017a68 <_strtod_l+0xbc8>)
 80178e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80178ea:	2600      	movs	r6, #0
 80178ec:	e7ae      	b.n	801784c <_strtod_l+0x9ac>
 80178ee:	4f5f      	ldr	r7, [pc, #380]	; (8017a6c <_strtod_l+0xbcc>)
 80178f0:	2600      	movs	r6, #0
 80178f2:	e7a7      	b.n	8017844 <_strtod_l+0x9a4>
 80178f4:	4b5d      	ldr	r3, [pc, #372]	; (8017a6c <_strtod_l+0xbcc>)
 80178f6:	4630      	mov	r0, r6
 80178f8:	4639      	mov	r1, r7
 80178fa:	2200      	movs	r2, #0
 80178fc:	f7e8 fea4 	bl	8000648 <__aeabi_dmul>
 8017900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017902:	4606      	mov	r6, r0
 8017904:	460f      	mov	r7, r1
 8017906:	2b00      	cmp	r3, #0
 8017908:	d09c      	beq.n	8017844 <_strtod_l+0x9a4>
 801790a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801790e:	e79d      	b.n	801784c <_strtod_l+0x9ac>
 8017910:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8017a40 <_strtod_l+0xba0>
 8017914:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017918:	ec57 6b17 	vmov	r6, r7, d7
 801791c:	e796      	b.n	801784c <_strtod_l+0x9ac>
 801791e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017922:	9b04      	ldr	r3, [sp, #16]
 8017924:	46ca      	mov	sl, r9
 8017926:	2b00      	cmp	r3, #0
 8017928:	d1c2      	bne.n	80178b0 <_strtod_l+0xa10>
 801792a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801792e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017930:	0d1b      	lsrs	r3, r3, #20
 8017932:	051b      	lsls	r3, r3, #20
 8017934:	429a      	cmp	r2, r3
 8017936:	d1bb      	bne.n	80178b0 <_strtod_l+0xa10>
 8017938:	4630      	mov	r0, r6
 801793a:	4639      	mov	r1, r7
 801793c:	f7e9 fa34 	bl	8000da8 <__aeabi_d2lz>
 8017940:	f7e8 fe54 	bl	80005ec <__aeabi_l2d>
 8017944:	4602      	mov	r2, r0
 8017946:	460b      	mov	r3, r1
 8017948:	4630      	mov	r0, r6
 801794a:	4639      	mov	r1, r7
 801794c:	f7e8 fcc4 	bl	80002d8 <__aeabi_dsub>
 8017950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017952:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017956:	ea43 0308 	orr.w	r3, r3, r8
 801795a:	4313      	orrs	r3, r2
 801795c:	4606      	mov	r6, r0
 801795e:	460f      	mov	r7, r1
 8017960:	d054      	beq.n	8017a0c <_strtod_l+0xb6c>
 8017962:	a339      	add	r3, pc, #228	; (adr r3, 8017a48 <_strtod_l+0xba8>)
 8017964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017968:	f7e9 f8e0 	bl	8000b2c <__aeabi_dcmplt>
 801796c:	2800      	cmp	r0, #0
 801796e:	f47f ace5 	bne.w	801733c <_strtod_l+0x49c>
 8017972:	a337      	add	r3, pc, #220	; (adr r3, 8017a50 <_strtod_l+0xbb0>)
 8017974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017978:	4630      	mov	r0, r6
 801797a:	4639      	mov	r1, r7
 801797c:	f7e9 f8f4 	bl	8000b68 <__aeabi_dcmpgt>
 8017980:	2800      	cmp	r0, #0
 8017982:	d095      	beq.n	80178b0 <_strtod_l+0xa10>
 8017984:	e4da      	b.n	801733c <_strtod_l+0x49c>
 8017986:	9b04      	ldr	r3, [sp, #16]
 8017988:	b333      	cbz	r3, 80179d8 <_strtod_l+0xb38>
 801798a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801798c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017990:	d822      	bhi.n	80179d8 <_strtod_l+0xb38>
 8017992:	a331      	add	r3, pc, #196	; (adr r3, 8017a58 <_strtod_l+0xbb8>)
 8017994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017998:	4630      	mov	r0, r6
 801799a:	4639      	mov	r1, r7
 801799c:	f7e9 f8d0 	bl	8000b40 <__aeabi_dcmple>
 80179a0:	b1a0      	cbz	r0, 80179cc <_strtod_l+0xb2c>
 80179a2:	4639      	mov	r1, r7
 80179a4:	4630      	mov	r0, r6
 80179a6:	f7e9 f927 	bl	8000bf8 <__aeabi_d2uiz>
 80179aa:	2801      	cmp	r0, #1
 80179ac:	bf38      	it	cc
 80179ae:	2001      	movcc	r0, #1
 80179b0:	f7e8 fdd0 	bl	8000554 <__aeabi_ui2d>
 80179b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179b6:	4606      	mov	r6, r0
 80179b8:	460f      	mov	r7, r1
 80179ba:	bb23      	cbnz	r3, 8017a06 <_strtod_l+0xb66>
 80179bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80179c0:	9010      	str	r0, [sp, #64]	; 0x40
 80179c2:	9311      	str	r3, [sp, #68]	; 0x44
 80179c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80179c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80179cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80179d4:	1a9b      	subs	r3, r3, r2
 80179d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80179d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80179dc:	eeb0 0a48 	vmov.f32	s0, s16
 80179e0:	eef0 0a68 	vmov.f32	s1, s17
 80179e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80179e8:	f7ff f8fc 	bl	8016be4 <__ulp>
 80179ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80179f0:	ec53 2b10 	vmov	r2, r3, d0
 80179f4:	f7e8 fe28 	bl	8000648 <__aeabi_dmul>
 80179f8:	ec53 2b18 	vmov	r2, r3, d8
 80179fc:	f7e8 fc6e 	bl	80002dc <__adddf3>
 8017a00:	4680      	mov	r8, r0
 8017a02:	4689      	mov	r9, r1
 8017a04:	e78d      	b.n	8017922 <_strtod_l+0xa82>
 8017a06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017a0a:	e7db      	b.n	80179c4 <_strtod_l+0xb24>
 8017a0c:	a314      	add	r3, pc, #80	; (adr r3, 8017a60 <_strtod_l+0xbc0>)
 8017a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a12:	f7e9 f88b 	bl	8000b2c <__aeabi_dcmplt>
 8017a16:	e7b3      	b.n	8017980 <_strtod_l+0xae0>
 8017a18:	2300      	movs	r3, #0
 8017a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8017a1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a20:	6013      	str	r3, [r2, #0]
 8017a22:	f7ff ba7c 	b.w	8016f1e <_strtod_l+0x7e>
 8017a26:	2a65      	cmp	r2, #101	; 0x65
 8017a28:	f43f ab75 	beq.w	8017116 <_strtod_l+0x276>
 8017a2c:	2a45      	cmp	r2, #69	; 0x45
 8017a2e:	f43f ab72 	beq.w	8017116 <_strtod_l+0x276>
 8017a32:	2301      	movs	r3, #1
 8017a34:	f7ff bbaa 	b.w	801718c <_strtod_l+0x2ec>
 8017a38:	00000000 	.word	0x00000000
 8017a3c:	bff00000 	.word	0xbff00000
 8017a40:	00000000 	.word	0x00000000
 8017a44:	3ff00000 	.word	0x3ff00000
 8017a48:	94a03595 	.word	0x94a03595
 8017a4c:	3fdfffff 	.word	0x3fdfffff
 8017a50:	35afe535 	.word	0x35afe535
 8017a54:	3fe00000 	.word	0x3fe00000
 8017a58:	ffc00000 	.word	0xffc00000
 8017a5c:	41dfffff 	.word	0x41dfffff
 8017a60:	94a03595 	.word	0x94a03595
 8017a64:	3fcfffff 	.word	0x3fcfffff
 8017a68:	3ff00000 	.word	0x3ff00000
 8017a6c:	3fe00000 	.word	0x3fe00000
 8017a70:	7ff00000 	.word	0x7ff00000
 8017a74:	7fe00000 	.word	0x7fe00000
 8017a78:	7c9fffff 	.word	0x7c9fffff
 8017a7c:	7fefffff 	.word	0x7fefffff

08017a80 <_strtod_r>:
 8017a80:	4b01      	ldr	r3, [pc, #4]	; (8017a88 <_strtod_r+0x8>)
 8017a82:	f7ff ba0d 	b.w	8016ea0 <_strtod_l>
 8017a86:	bf00      	nop
 8017a88:	20000074 	.word	0x20000074

08017a8c <_strtol_l.constprop.0>:
 8017a8c:	2b01      	cmp	r3, #1
 8017a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a92:	d001      	beq.n	8017a98 <_strtol_l.constprop.0+0xc>
 8017a94:	2b24      	cmp	r3, #36	; 0x24
 8017a96:	d906      	bls.n	8017aa6 <_strtol_l.constprop.0+0x1a>
 8017a98:	f7fd fd7c 	bl	8015594 <__errno>
 8017a9c:	2316      	movs	r3, #22
 8017a9e:	6003      	str	r3, [r0, #0]
 8017aa0:	2000      	movs	r0, #0
 8017aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aa6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017b8c <_strtol_l.constprop.0+0x100>
 8017aaa:	460d      	mov	r5, r1
 8017aac:	462e      	mov	r6, r5
 8017aae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ab2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017ab6:	f017 0708 	ands.w	r7, r7, #8
 8017aba:	d1f7      	bne.n	8017aac <_strtol_l.constprop.0+0x20>
 8017abc:	2c2d      	cmp	r4, #45	; 0x2d
 8017abe:	d132      	bne.n	8017b26 <_strtol_l.constprop.0+0x9a>
 8017ac0:	782c      	ldrb	r4, [r5, #0]
 8017ac2:	2701      	movs	r7, #1
 8017ac4:	1cb5      	adds	r5, r6, #2
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d05b      	beq.n	8017b82 <_strtol_l.constprop.0+0xf6>
 8017aca:	2b10      	cmp	r3, #16
 8017acc:	d109      	bne.n	8017ae2 <_strtol_l.constprop.0+0x56>
 8017ace:	2c30      	cmp	r4, #48	; 0x30
 8017ad0:	d107      	bne.n	8017ae2 <_strtol_l.constprop.0+0x56>
 8017ad2:	782c      	ldrb	r4, [r5, #0]
 8017ad4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017ad8:	2c58      	cmp	r4, #88	; 0x58
 8017ada:	d14d      	bne.n	8017b78 <_strtol_l.constprop.0+0xec>
 8017adc:	786c      	ldrb	r4, [r5, #1]
 8017ade:	2310      	movs	r3, #16
 8017ae0:	3502      	adds	r5, #2
 8017ae2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017ae6:	f108 38ff 	add.w	r8, r8, #4294967295
 8017aea:	f04f 0e00 	mov.w	lr, #0
 8017aee:	fbb8 f9f3 	udiv	r9, r8, r3
 8017af2:	4676      	mov	r6, lr
 8017af4:	fb03 8a19 	mls	sl, r3, r9, r8
 8017af8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017afc:	f1bc 0f09 	cmp.w	ip, #9
 8017b00:	d816      	bhi.n	8017b30 <_strtol_l.constprop.0+0xa4>
 8017b02:	4664      	mov	r4, ip
 8017b04:	42a3      	cmp	r3, r4
 8017b06:	dd24      	ble.n	8017b52 <_strtol_l.constprop.0+0xc6>
 8017b08:	f1be 3fff 	cmp.w	lr, #4294967295
 8017b0c:	d008      	beq.n	8017b20 <_strtol_l.constprop.0+0x94>
 8017b0e:	45b1      	cmp	r9, r6
 8017b10:	d31c      	bcc.n	8017b4c <_strtol_l.constprop.0+0xc0>
 8017b12:	d101      	bne.n	8017b18 <_strtol_l.constprop.0+0x8c>
 8017b14:	45a2      	cmp	sl, r4
 8017b16:	db19      	blt.n	8017b4c <_strtol_l.constprop.0+0xc0>
 8017b18:	fb06 4603 	mla	r6, r6, r3, r4
 8017b1c:	f04f 0e01 	mov.w	lr, #1
 8017b20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b24:	e7e8      	b.n	8017af8 <_strtol_l.constprop.0+0x6c>
 8017b26:	2c2b      	cmp	r4, #43	; 0x2b
 8017b28:	bf04      	itt	eq
 8017b2a:	782c      	ldrbeq	r4, [r5, #0]
 8017b2c:	1cb5      	addeq	r5, r6, #2
 8017b2e:	e7ca      	b.n	8017ac6 <_strtol_l.constprop.0+0x3a>
 8017b30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017b34:	f1bc 0f19 	cmp.w	ip, #25
 8017b38:	d801      	bhi.n	8017b3e <_strtol_l.constprop.0+0xb2>
 8017b3a:	3c37      	subs	r4, #55	; 0x37
 8017b3c:	e7e2      	b.n	8017b04 <_strtol_l.constprop.0+0x78>
 8017b3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017b42:	f1bc 0f19 	cmp.w	ip, #25
 8017b46:	d804      	bhi.n	8017b52 <_strtol_l.constprop.0+0xc6>
 8017b48:	3c57      	subs	r4, #87	; 0x57
 8017b4a:	e7db      	b.n	8017b04 <_strtol_l.constprop.0+0x78>
 8017b4c:	f04f 3eff 	mov.w	lr, #4294967295
 8017b50:	e7e6      	b.n	8017b20 <_strtol_l.constprop.0+0x94>
 8017b52:	f1be 3fff 	cmp.w	lr, #4294967295
 8017b56:	d105      	bne.n	8017b64 <_strtol_l.constprop.0+0xd8>
 8017b58:	2322      	movs	r3, #34	; 0x22
 8017b5a:	6003      	str	r3, [r0, #0]
 8017b5c:	4646      	mov	r6, r8
 8017b5e:	b942      	cbnz	r2, 8017b72 <_strtol_l.constprop.0+0xe6>
 8017b60:	4630      	mov	r0, r6
 8017b62:	e79e      	b.n	8017aa2 <_strtol_l.constprop.0+0x16>
 8017b64:	b107      	cbz	r7, 8017b68 <_strtol_l.constprop.0+0xdc>
 8017b66:	4276      	negs	r6, r6
 8017b68:	2a00      	cmp	r2, #0
 8017b6a:	d0f9      	beq.n	8017b60 <_strtol_l.constprop.0+0xd4>
 8017b6c:	f1be 0f00 	cmp.w	lr, #0
 8017b70:	d000      	beq.n	8017b74 <_strtol_l.constprop.0+0xe8>
 8017b72:	1e69      	subs	r1, r5, #1
 8017b74:	6011      	str	r1, [r2, #0]
 8017b76:	e7f3      	b.n	8017b60 <_strtol_l.constprop.0+0xd4>
 8017b78:	2430      	movs	r4, #48	; 0x30
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d1b1      	bne.n	8017ae2 <_strtol_l.constprop.0+0x56>
 8017b7e:	2308      	movs	r3, #8
 8017b80:	e7af      	b.n	8017ae2 <_strtol_l.constprop.0+0x56>
 8017b82:	2c30      	cmp	r4, #48	; 0x30
 8017b84:	d0a5      	beq.n	8017ad2 <_strtol_l.constprop.0+0x46>
 8017b86:	230a      	movs	r3, #10
 8017b88:	e7ab      	b.n	8017ae2 <_strtol_l.constprop.0+0x56>
 8017b8a:	bf00      	nop
 8017b8c:	0801c2a9 	.word	0x0801c2a9

08017b90 <_strtol_r>:
 8017b90:	f7ff bf7c 	b.w	8017a8c <_strtol_l.constprop.0>

08017b94 <__ssputs_r>:
 8017b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b98:	688e      	ldr	r6, [r1, #8]
 8017b9a:	461f      	mov	r7, r3
 8017b9c:	42be      	cmp	r6, r7
 8017b9e:	680b      	ldr	r3, [r1, #0]
 8017ba0:	4682      	mov	sl, r0
 8017ba2:	460c      	mov	r4, r1
 8017ba4:	4690      	mov	r8, r2
 8017ba6:	d82c      	bhi.n	8017c02 <__ssputs_r+0x6e>
 8017ba8:	898a      	ldrh	r2, [r1, #12]
 8017baa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017bae:	d026      	beq.n	8017bfe <__ssputs_r+0x6a>
 8017bb0:	6965      	ldr	r5, [r4, #20]
 8017bb2:	6909      	ldr	r1, [r1, #16]
 8017bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017bb8:	eba3 0901 	sub.w	r9, r3, r1
 8017bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017bc0:	1c7b      	adds	r3, r7, #1
 8017bc2:	444b      	add	r3, r9
 8017bc4:	106d      	asrs	r5, r5, #1
 8017bc6:	429d      	cmp	r5, r3
 8017bc8:	bf38      	it	cc
 8017bca:	461d      	movcc	r5, r3
 8017bcc:	0553      	lsls	r3, r2, #21
 8017bce:	d527      	bpl.n	8017c20 <__ssputs_r+0x8c>
 8017bd0:	4629      	mov	r1, r5
 8017bd2:	f7fe fc0f 	bl	80163f4 <_malloc_r>
 8017bd6:	4606      	mov	r6, r0
 8017bd8:	b360      	cbz	r0, 8017c34 <__ssputs_r+0xa0>
 8017bda:	6921      	ldr	r1, [r4, #16]
 8017bdc:	464a      	mov	r2, r9
 8017bde:	f7fd fd06 	bl	80155ee <memcpy>
 8017be2:	89a3      	ldrh	r3, [r4, #12]
 8017be4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bec:	81a3      	strh	r3, [r4, #12]
 8017bee:	6126      	str	r6, [r4, #16]
 8017bf0:	6165      	str	r5, [r4, #20]
 8017bf2:	444e      	add	r6, r9
 8017bf4:	eba5 0509 	sub.w	r5, r5, r9
 8017bf8:	6026      	str	r6, [r4, #0]
 8017bfa:	60a5      	str	r5, [r4, #8]
 8017bfc:	463e      	mov	r6, r7
 8017bfe:	42be      	cmp	r6, r7
 8017c00:	d900      	bls.n	8017c04 <__ssputs_r+0x70>
 8017c02:	463e      	mov	r6, r7
 8017c04:	6820      	ldr	r0, [r4, #0]
 8017c06:	4632      	mov	r2, r6
 8017c08:	4641      	mov	r1, r8
 8017c0a:	f000 fd5c 	bl	80186c6 <memmove>
 8017c0e:	68a3      	ldr	r3, [r4, #8]
 8017c10:	1b9b      	subs	r3, r3, r6
 8017c12:	60a3      	str	r3, [r4, #8]
 8017c14:	6823      	ldr	r3, [r4, #0]
 8017c16:	4433      	add	r3, r6
 8017c18:	6023      	str	r3, [r4, #0]
 8017c1a:	2000      	movs	r0, #0
 8017c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c20:	462a      	mov	r2, r5
 8017c22:	f001 f922 	bl	8018e6a <_realloc_r>
 8017c26:	4606      	mov	r6, r0
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	d1e0      	bne.n	8017bee <__ssputs_r+0x5a>
 8017c2c:	6921      	ldr	r1, [r4, #16]
 8017c2e:	4650      	mov	r0, sl
 8017c30:	f7fe fb6c 	bl	801630c <_free_r>
 8017c34:	230c      	movs	r3, #12
 8017c36:	f8ca 3000 	str.w	r3, [sl]
 8017c3a:	89a3      	ldrh	r3, [r4, #12]
 8017c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c40:	81a3      	strh	r3, [r4, #12]
 8017c42:	f04f 30ff 	mov.w	r0, #4294967295
 8017c46:	e7e9      	b.n	8017c1c <__ssputs_r+0x88>

08017c48 <_svfiprintf_r>:
 8017c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c4c:	4698      	mov	r8, r3
 8017c4e:	898b      	ldrh	r3, [r1, #12]
 8017c50:	061b      	lsls	r3, r3, #24
 8017c52:	b09d      	sub	sp, #116	; 0x74
 8017c54:	4607      	mov	r7, r0
 8017c56:	460d      	mov	r5, r1
 8017c58:	4614      	mov	r4, r2
 8017c5a:	d50e      	bpl.n	8017c7a <_svfiprintf_r+0x32>
 8017c5c:	690b      	ldr	r3, [r1, #16]
 8017c5e:	b963      	cbnz	r3, 8017c7a <_svfiprintf_r+0x32>
 8017c60:	2140      	movs	r1, #64	; 0x40
 8017c62:	f7fe fbc7 	bl	80163f4 <_malloc_r>
 8017c66:	6028      	str	r0, [r5, #0]
 8017c68:	6128      	str	r0, [r5, #16]
 8017c6a:	b920      	cbnz	r0, 8017c76 <_svfiprintf_r+0x2e>
 8017c6c:	230c      	movs	r3, #12
 8017c6e:	603b      	str	r3, [r7, #0]
 8017c70:	f04f 30ff 	mov.w	r0, #4294967295
 8017c74:	e0d0      	b.n	8017e18 <_svfiprintf_r+0x1d0>
 8017c76:	2340      	movs	r3, #64	; 0x40
 8017c78:	616b      	str	r3, [r5, #20]
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c7e:	2320      	movs	r3, #32
 8017c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c88:	2330      	movs	r3, #48	; 0x30
 8017c8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017e30 <_svfiprintf_r+0x1e8>
 8017c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c92:	f04f 0901 	mov.w	r9, #1
 8017c96:	4623      	mov	r3, r4
 8017c98:	469a      	mov	sl, r3
 8017c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c9e:	b10a      	cbz	r2, 8017ca4 <_svfiprintf_r+0x5c>
 8017ca0:	2a25      	cmp	r2, #37	; 0x25
 8017ca2:	d1f9      	bne.n	8017c98 <_svfiprintf_r+0x50>
 8017ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8017ca8:	d00b      	beq.n	8017cc2 <_svfiprintf_r+0x7a>
 8017caa:	465b      	mov	r3, fp
 8017cac:	4622      	mov	r2, r4
 8017cae:	4629      	mov	r1, r5
 8017cb0:	4638      	mov	r0, r7
 8017cb2:	f7ff ff6f 	bl	8017b94 <__ssputs_r>
 8017cb6:	3001      	adds	r0, #1
 8017cb8:	f000 80a9 	beq.w	8017e0e <_svfiprintf_r+0x1c6>
 8017cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cbe:	445a      	add	r2, fp
 8017cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8017cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	f000 80a1 	beq.w	8017e0e <_svfiprintf_r+0x1c6>
 8017ccc:	2300      	movs	r3, #0
 8017cce:	f04f 32ff 	mov.w	r2, #4294967295
 8017cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cd6:	f10a 0a01 	add.w	sl, sl, #1
 8017cda:	9304      	str	r3, [sp, #16]
 8017cdc:	9307      	str	r3, [sp, #28]
 8017cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8017ce4:	4654      	mov	r4, sl
 8017ce6:	2205      	movs	r2, #5
 8017ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cec:	4850      	ldr	r0, [pc, #320]	; (8017e30 <_svfiprintf_r+0x1e8>)
 8017cee:	f7e8 fa97 	bl	8000220 <memchr>
 8017cf2:	9a04      	ldr	r2, [sp, #16]
 8017cf4:	b9d8      	cbnz	r0, 8017d2e <_svfiprintf_r+0xe6>
 8017cf6:	06d0      	lsls	r0, r2, #27
 8017cf8:	bf44      	itt	mi
 8017cfa:	2320      	movmi	r3, #32
 8017cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d00:	0711      	lsls	r1, r2, #28
 8017d02:	bf44      	itt	mi
 8017d04:	232b      	movmi	r3, #43	; 0x2b
 8017d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8017d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8017d10:	d015      	beq.n	8017d3e <_svfiprintf_r+0xf6>
 8017d12:	9a07      	ldr	r2, [sp, #28]
 8017d14:	4654      	mov	r4, sl
 8017d16:	2000      	movs	r0, #0
 8017d18:	f04f 0c0a 	mov.w	ip, #10
 8017d1c:	4621      	mov	r1, r4
 8017d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d22:	3b30      	subs	r3, #48	; 0x30
 8017d24:	2b09      	cmp	r3, #9
 8017d26:	d94d      	bls.n	8017dc4 <_svfiprintf_r+0x17c>
 8017d28:	b1b0      	cbz	r0, 8017d58 <_svfiprintf_r+0x110>
 8017d2a:	9207      	str	r2, [sp, #28]
 8017d2c:	e014      	b.n	8017d58 <_svfiprintf_r+0x110>
 8017d2e:	eba0 0308 	sub.w	r3, r0, r8
 8017d32:	fa09 f303 	lsl.w	r3, r9, r3
 8017d36:	4313      	orrs	r3, r2
 8017d38:	9304      	str	r3, [sp, #16]
 8017d3a:	46a2      	mov	sl, r4
 8017d3c:	e7d2      	b.n	8017ce4 <_svfiprintf_r+0x9c>
 8017d3e:	9b03      	ldr	r3, [sp, #12]
 8017d40:	1d19      	adds	r1, r3, #4
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	9103      	str	r1, [sp, #12]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	bfbb      	ittet	lt
 8017d4a:	425b      	neglt	r3, r3
 8017d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8017d50:	9307      	strge	r3, [sp, #28]
 8017d52:	9307      	strlt	r3, [sp, #28]
 8017d54:	bfb8      	it	lt
 8017d56:	9204      	strlt	r2, [sp, #16]
 8017d58:	7823      	ldrb	r3, [r4, #0]
 8017d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8017d5c:	d10c      	bne.n	8017d78 <_svfiprintf_r+0x130>
 8017d5e:	7863      	ldrb	r3, [r4, #1]
 8017d60:	2b2a      	cmp	r3, #42	; 0x2a
 8017d62:	d134      	bne.n	8017dce <_svfiprintf_r+0x186>
 8017d64:	9b03      	ldr	r3, [sp, #12]
 8017d66:	1d1a      	adds	r2, r3, #4
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	9203      	str	r2, [sp, #12]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	bfb8      	it	lt
 8017d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d74:	3402      	adds	r4, #2
 8017d76:	9305      	str	r3, [sp, #20]
 8017d78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017e40 <_svfiprintf_r+0x1f8>
 8017d7c:	7821      	ldrb	r1, [r4, #0]
 8017d7e:	2203      	movs	r2, #3
 8017d80:	4650      	mov	r0, sl
 8017d82:	f7e8 fa4d 	bl	8000220 <memchr>
 8017d86:	b138      	cbz	r0, 8017d98 <_svfiprintf_r+0x150>
 8017d88:	9b04      	ldr	r3, [sp, #16]
 8017d8a:	eba0 000a 	sub.w	r0, r0, sl
 8017d8e:	2240      	movs	r2, #64	; 0x40
 8017d90:	4082      	lsls	r2, r0
 8017d92:	4313      	orrs	r3, r2
 8017d94:	3401      	adds	r4, #1
 8017d96:	9304      	str	r3, [sp, #16]
 8017d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d9c:	4825      	ldr	r0, [pc, #148]	; (8017e34 <_svfiprintf_r+0x1ec>)
 8017d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017da2:	2206      	movs	r2, #6
 8017da4:	f7e8 fa3c 	bl	8000220 <memchr>
 8017da8:	2800      	cmp	r0, #0
 8017daa:	d038      	beq.n	8017e1e <_svfiprintf_r+0x1d6>
 8017dac:	4b22      	ldr	r3, [pc, #136]	; (8017e38 <_svfiprintf_r+0x1f0>)
 8017dae:	bb1b      	cbnz	r3, 8017df8 <_svfiprintf_r+0x1b0>
 8017db0:	9b03      	ldr	r3, [sp, #12]
 8017db2:	3307      	adds	r3, #7
 8017db4:	f023 0307 	bic.w	r3, r3, #7
 8017db8:	3308      	adds	r3, #8
 8017dba:	9303      	str	r3, [sp, #12]
 8017dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dbe:	4433      	add	r3, r6
 8017dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8017dc2:	e768      	b.n	8017c96 <_svfiprintf_r+0x4e>
 8017dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017dc8:	460c      	mov	r4, r1
 8017dca:	2001      	movs	r0, #1
 8017dcc:	e7a6      	b.n	8017d1c <_svfiprintf_r+0xd4>
 8017dce:	2300      	movs	r3, #0
 8017dd0:	3401      	adds	r4, #1
 8017dd2:	9305      	str	r3, [sp, #20]
 8017dd4:	4619      	mov	r1, r3
 8017dd6:	f04f 0c0a 	mov.w	ip, #10
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017de0:	3a30      	subs	r2, #48	; 0x30
 8017de2:	2a09      	cmp	r2, #9
 8017de4:	d903      	bls.n	8017dee <_svfiprintf_r+0x1a6>
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d0c6      	beq.n	8017d78 <_svfiprintf_r+0x130>
 8017dea:	9105      	str	r1, [sp, #20]
 8017dec:	e7c4      	b.n	8017d78 <_svfiprintf_r+0x130>
 8017dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8017df2:	4604      	mov	r4, r0
 8017df4:	2301      	movs	r3, #1
 8017df6:	e7f0      	b.n	8017dda <_svfiprintf_r+0x192>
 8017df8:	ab03      	add	r3, sp, #12
 8017dfa:	9300      	str	r3, [sp, #0]
 8017dfc:	462a      	mov	r2, r5
 8017dfe:	4b0f      	ldr	r3, [pc, #60]	; (8017e3c <_svfiprintf_r+0x1f4>)
 8017e00:	a904      	add	r1, sp, #16
 8017e02:	4638      	mov	r0, r7
 8017e04:	f7fc fbe2 	bl	80145cc <_printf_float>
 8017e08:	1c42      	adds	r2, r0, #1
 8017e0a:	4606      	mov	r6, r0
 8017e0c:	d1d6      	bne.n	8017dbc <_svfiprintf_r+0x174>
 8017e0e:	89ab      	ldrh	r3, [r5, #12]
 8017e10:	065b      	lsls	r3, r3, #25
 8017e12:	f53f af2d 	bmi.w	8017c70 <_svfiprintf_r+0x28>
 8017e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e18:	b01d      	add	sp, #116	; 0x74
 8017e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e1e:	ab03      	add	r3, sp, #12
 8017e20:	9300      	str	r3, [sp, #0]
 8017e22:	462a      	mov	r2, r5
 8017e24:	4b05      	ldr	r3, [pc, #20]	; (8017e3c <_svfiprintf_r+0x1f4>)
 8017e26:	a904      	add	r1, sp, #16
 8017e28:	4638      	mov	r0, r7
 8017e2a:	f7fc fe73 	bl	8014b14 <_printf_i>
 8017e2e:	e7eb      	b.n	8017e08 <_svfiprintf_r+0x1c0>
 8017e30:	0801c3a9 	.word	0x0801c3a9
 8017e34:	0801c3b3 	.word	0x0801c3b3
 8017e38:	080145cd 	.word	0x080145cd
 8017e3c:	08017b95 	.word	0x08017b95
 8017e40:	0801c3af 	.word	0x0801c3af

08017e44 <_sungetc_r>:
 8017e44:	b538      	push	{r3, r4, r5, lr}
 8017e46:	1c4b      	adds	r3, r1, #1
 8017e48:	4614      	mov	r4, r2
 8017e4a:	d103      	bne.n	8017e54 <_sungetc_r+0x10>
 8017e4c:	f04f 35ff 	mov.w	r5, #4294967295
 8017e50:	4628      	mov	r0, r5
 8017e52:	bd38      	pop	{r3, r4, r5, pc}
 8017e54:	8993      	ldrh	r3, [r2, #12]
 8017e56:	f023 0320 	bic.w	r3, r3, #32
 8017e5a:	8193      	strh	r3, [r2, #12]
 8017e5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017e5e:	6852      	ldr	r2, [r2, #4]
 8017e60:	b2cd      	uxtb	r5, r1
 8017e62:	b18b      	cbz	r3, 8017e88 <_sungetc_r+0x44>
 8017e64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017e66:	4293      	cmp	r3, r2
 8017e68:	dd08      	ble.n	8017e7c <_sungetc_r+0x38>
 8017e6a:	6823      	ldr	r3, [r4, #0]
 8017e6c:	1e5a      	subs	r2, r3, #1
 8017e6e:	6022      	str	r2, [r4, #0]
 8017e70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017e74:	6863      	ldr	r3, [r4, #4]
 8017e76:	3301      	adds	r3, #1
 8017e78:	6063      	str	r3, [r4, #4]
 8017e7a:	e7e9      	b.n	8017e50 <_sungetc_r+0xc>
 8017e7c:	4621      	mov	r1, r4
 8017e7e:	f000 fbe8 	bl	8018652 <__submore>
 8017e82:	2800      	cmp	r0, #0
 8017e84:	d0f1      	beq.n	8017e6a <_sungetc_r+0x26>
 8017e86:	e7e1      	b.n	8017e4c <_sungetc_r+0x8>
 8017e88:	6921      	ldr	r1, [r4, #16]
 8017e8a:	6823      	ldr	r3, [r4, #0]
 8017e8c:	b151      	cbz	r1, 8017ea4 <_sungetc_r+0x60>
 8017e8e:	4299      	cmp	r1, r3
 8017e90:	d208      	bcs.n	8017ea4 <_sungetc_r+0x60>
 8017e92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017e96:	42a9      	cmp	r1, r5
 8017e98:	d104      	bne.n	8017ea4 <_sungetc_r+0x60>
 8017e9a:	3b01      	subs	r3, #1
 8017e9c:	3201      	adds	r2, #1
 8017e9e:	6023      	str	r3, [r4, #0]
 8017ea0:	6062      	str	r2, [r4, #4]
 8017ea2:	e7d5      	b.n	8017e50 <_sungetc_r+0xc>
 8017ea4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017eac:	6363      	str	r3, [r4, #52]	; 0x34
 8017eae:	2303      	movs	r3, #3
 8017eb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8017eb2:	4623      	mov	r3, r4
 8017eb4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017eb8:	6023      	str	r3, [r4, #0]
 8017eba:	2301      	movs	r3, #1
 8017ebc:	e7dc      	b.n	8017e78 <_sungetc_r+0x34>

08017ebe <__ssrefill_r>:
 8017ebe:	b510      	push	{r4, lr}
 8017ec0:	460c      	mov	r4, r1
 8017ec2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017ec4:	b169      	cbz	r1, 8017ee2 <__ssrefill_r+0x24>
 8017ec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017eca:	4299      	cmp	r1, r3
 8017ecc:	d001      	beq.n	8017ed2 <__ssrefill_r+0x14>
 8017ece:	f7fe fa1d 	bl	801630c <_free_r>
 8017ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ed4:	6063      	str	r3, [r4, #4]
 8017ed6:	2000      	movs	r0, #0
 8017ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8017eda:	b113      	cbz	r3, 8017ee2 <__ssrefill_r+0x24>
 8017edc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017ede:	6023      	str	r3, [r4, #0]
 8017ee0:	bd10      	pop	{r4, pc}
 8017ee2:	6923      	ldr	r3, [r4, #16]
 8017ee4:	6023      	str	r3, [r4, #0]
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	6063      	str	r3, [r4, #4]
 8017eea:	89a3      	ldrh	r3, [r4, #12]
 8017eec:	f043 0320 	orr.w	r3, r3, #32
 8017ef0:	81a3      	strh	r3, [r4, #12]
 8017ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ef6:	e7f3      	b.n	8017ee0 <__ssrefill_r+0x22>

08017ef8 <__ssvfiscanf_r>:
 8017ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017efc:	460c      	mov	r4, r1
 8017efe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017f02:	2100      	movs	r1, #0
 8017f04:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017f08:	49a6      	ldr	r1, [pc, #664]	; (80181a4 <__ssvfiscanf_r+0x2ac>)
 8017f0a:	91a0      	str	r1, [sp, #640]	; 0x280
 8017f0c:	f10d 0804 	add.w	r8, sp, #4
 8017f10:	49a5      	ldr	r1, [pc, #660]	; (80181a8 <__ssvfiscanf_r+0x2b0>)
 8017f12:	4fa6      	ldr	r7, [pc, #664]	; (80181ac <__ssvfiscanf_r+0x2b4>)
 8017f14:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80181b0 <__ssvfiscanf_r+0x2b8>
 8017f18:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017f1c:	4606      	mov	r6, r0
 8017f1e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017f20:	9300      	str	r3, [sp, #0]
 8017f22:	7813      	ldrb	r3, [r2, #0]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	f000 815a 	beq.w	80181de <__ssvfiscanf_r+0x2e6>
 8017f2a:	5cf9      	ldrb	r1, [r7, r3]
 8017f2c:	f011 0108 	ands.w	r1, r1, #8
 8017f30:	f102 0501 	add.w	r5, r2, #1
 8017f34:	d019      	beq.n	8017f6a <__ssvfiscanf_r+0x72>
 8017f36:	6863      	ldr	r3, [r4, #4]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	dd0f      	ble.n	8017f5c <__ssvfiscanf_r+0x64>
 8017f3c:	6823      	ldr	r3, [r4, #0]
 8017f3e:	781a      	ldrb	r2, [r3, #0]
 8017f40:	5cba      	ldrb	r2, [r7, r2]
 8017f42:	0712      	lsls	r2, r2, #28
 8017f44:	d401      	bmi.n	8017f4a <__ssvfiscanf_r+0x52>
 8017f46:	462a      	mov	r2, r5
 8017f48:	e7eb      	b.n	8017f22 <__ssvfiscanf_r+0x2a>
 8017f4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017f4c:	3201      	adds	r2, #1
 8017f4e:	9245      	str	r2, [sp, #276]	; 0x114
 8017f50:	6862      	ldr	r2, [r4, #4]
 8017f52:	3301      	adds	r3, #1
 8017f54:	3a01      	subs	r2, #1
 8017f56:	6062      	str	r2, [r4, #4]
 8017f58:	6023      	str	r3, [r4, #0]
 8017f5a:	e7ec      	b.n	8017f36 <__ssvfiscanf_r+0x3e>
 8017f5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017f5e:	4621      	mov	r1, r4
 8017f60:	4630      	mov	r0, r6
 8017f62:	4798      	blx	r3
 8017f64:	2800      	cmp	r0, #0
 8017f66:	d0e9      	beq.n	8017f3c <__ssvfiscanf_r+0x44>
 8017f68:	e7ed      	b.n	8017f46 <__ssvfiscanf_r+0x4e>
 8017f6a:	2b25      	cmp	r3, #37	; 0x25
 8017f6c:	d012      	beq.n	8017f94 <__ssvfiscanf_r+0x9c>
 8017f6e:	469a      	mov	sl, r3
 8017f70:	6863      	ldr	r3, [r4, #4]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	f340 8091 	ble.w	801809a <__ssvfiscanf_r+0x1a2>
 8017f78:	6822      	ldr	r2, [r4, #0]
 8017f7a:	7813      	ldrb	r3, [r2, #0]
 8017f7c:	4553      	cmp	r3, sl
 8017f7e:	f040 812e 	bne.w	80181de <__ssvfiscanf_r+0x2e6>
 8017f82:	6863      	ldr	r3, [r4, #4]
 8017f84:	3b01      	subs	r3, #1
 8017f86:	6063      	str	r3, [r4, #4]
 8017f88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017f8a:	3201      	adds	r2, #1
 8017f8c:	3301      	adds	r3, #1
 8017f8e:	6022      	str	r2, [r4, #0]
 8017f90:	9345      	str	r3, [sp, #276]	; 0x114
 8017f92:	e7d8      	b.n	8017f46 <__ssvfiscanf_r+0x4e>
 8017f94:	9141      	str	r1, [sp, #260]	; 0x104
 8017f96:	9143      	str	r1, [sp, #268]	; 0x10c
 8017f98:	7853      	ldrb	r3, [r2, #1]
 8017f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8017f9c:	bf02      	ittt	eq
 8017f9e:	2310      	moveq	r3, #16
 8017fa0:	1c95      	addeq	r5, r2, #2
 8017fa2:	9341      	streq	r3, [sp, #260]	; 0x104
 8017fa4:	220a      	movs	r2, #10
 8017fa6:	46aa      	mov	sl, r5
 8017fa8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017fac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017fb0:	2b09      	cmp	r3, #9
 8017fb2:	d91c      	bls.n	8017fee <__ssvfiscanf_r+0xf6>
 8017fb4:	487e      	ldr	r0, [pc, #504]	; (80181b0 <__ssvfiscanf_r+0x2b8>)
 8017fb6:	2203      	movs	r2, #3
 8017fb8:	f7e8 f932 	bl	8000220 <memchr>
 8017fbc:	b138      	cbz	r0, 8017fce <__ssvfiscanf_r+0xd6>
 8017fbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017fc0:	eba0 0009 	sub.w	r0, r0, r9
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	4083      	lsls	r3, r0
 8017fc8:	4313      	orrs	r3, r2
 8017fca:	9341      	str	r3, [sp, #260]	; 0x104
 8017fcc:	4655      	mov	r5, sl
 8017fce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017fd2:	2b78      	cmp	r3, #120	; 0x78
 8017fd4:	d806      	bhi.n	8017fe4 <__ssvfiscanf_r+0xec>
 8017fd6:	2b57      	cmp	r3, #87	; 0x57
 8017fd8:	d810      	bhi.n	8017ffc <__ssvfiscanf_r+0x104>
 8017fda:	2b25      	cmp	r3, #37	; 0x25
 8017fdc:	d0c7      	beq.n	8017f6e <__ssvfiscanf_r+0x76>
 8017fde:	d857      	bhi.n	8018090 <__ssvfiscanf_r+0x198>
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d065      	beq.n	80180b0 <__ssvfiscanf_r+0x1b8>
 8017fe4:	2303      	movs	r3, #3
 8017fe6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017fe8:	230a      	movs	r3, #10
 8017fea:	9342      	str	r3, [sp, #264]	; 0x108
 8017fec:	e076      	b.n	80180dc <__ssvfiscanf_r+0x1e4>
 8017fee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017ff0:	fb02 1103 	mla	r1, r2, r3, r1
 8017ff4:	3930      	subs	r1, #48	; 0x30
 8017ff6:	9143      	str	r1, [sp, #268]	; 0x10c
 8017ff8:	4655      	mov	r5, sl
 8017ffa:	e7d4      	b.n	8017fa6 <__ssvfiscanf_r+0xae>
 8017ffc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8018000:	2a20      	cmp	r2, #32
 8018002:	d8ef      	bhi.n	8017fe4 <__ssvfiscanf_r+0xec>
 8018004:	a101      	add	r1, pc, #4	; (adr r1, 801800c <__ssvfiscanf_r+0x114>)
 8018006:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801800a:	bf00      	nop
 801800c:	080180bf 	.word	0x080180bf
 8018010:	08017fe5 	.word	0x08017fe5
 8018014:	08017fe5 	.word	0x08017fe5
 8018018:	0801811d 	.word	0x0801811d
 801801c:	08017fe5 	.word	0x08017fe5
 8018020:	08017fe5 	.word	0x08017fe5
 8018024:	08017fe5 	.word	0x08017fe5
 8018028:	08017fe5 	.word	0x08017fe5
 801802c:	08017fe5 	.word	0x08017fe5
 8018030:	08017fe5 	.word	0x08017fe5
 8018034:	08017fe5 	.word	0x08017fe5
 8018038:	08018133 	.word	0x08018133
 801803c:	08018119 	.word	0x08018119
 8018040:	08018097 	.word	0x08018097
 8018044:	08018097 	.word	0x08018097
 8018048:	08018097 	.word	0x08018097
 801804c:	08017fe5 	.word	0x08017fe5
 8018050:	080180d5 	.word	0x080180d5
 8018054:	08017fe5 	.word	0x08017fe5
 8018058:	08017fe5 	.word	0x08017fe5
 801805c:	08017fe5 	.word	0x08017fe5
 8018060:	08017fe5 	.word	0x08017fe5
 8018064:	08018143 	.word	0x08018143
 8018068:	08018111 	.word	0x08018111
 801806c:	080180b7 	.word	0x080180b7
 8018070:	08017fe5 	.word	0x08017fe5
 8018074:	08017fe5 	.word	0x08017fe5
 8018078:	0801813f 	.word	0x0801813f
 801807c:	08017fe5 	.word	0x08017fe5
 8018080:	08018119 	.word	0x08018119
 8018084:	08017fe5 	.word	0x08017fe5
 8018088:	08017fe5 	.word	0x08017fe5
 801808c:	080180bf 	.word	0x080180bf
 8018090:	3b45      	subs	r3, #69	; 0x45
 8018092:	2b02      	cmp	r3, #2
 8018094:	d8a6      	bhi.n	8017fe4 <__ssvfiscanf_r+0xec>
 8018096:	2305      	movs	r3, #5
 8018098:	e01f      	b.n	80180da <__ssvfiscanf_r+0x1e2>
 801809a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801809c:	4621      	mov	r1, r4
 801809e:	4630      	mov	r0, r6
 80180a0:	4798      	blx	r3
 80180a2:	2800      	cmp	r0, #0
 80180a4:	f43f af68 	beq.w	8017f78 <__ssvfiscanf_r+0x80>
 80180a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80180aa:	2800      	cmp	r0, #0
 80180ac:	f040 808d 	bne.w	80181ca <__ssvfiscanf_r+0x2d2>
 80180b0:	f04f 30ff 	mov.w	r0, #4294967295
 80180b4:	e08f      	b.n	80181d6 <__ssvfiscanf_r+0x2de>
 80180b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80180b8:	f042 0220 	orr.w	r2, r2, #32
 80180bc:	9241      	str	r2, [sp, #260]	; 0x104
 80180be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80180c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80180c4:	9241      	str	r2, [sp, #260]	; 0x104
 80180c6:	2210      	movs	r2, #16
 80180c8:	2b6f      	cmp	r3, #111	; 0x6f
 80180ca:	9242      	str	r2, [sp, #264]	; 0x108
 80180cc:	bf34      	ite	cc
 80180ce:	2303      	movcc	r3, #3
 80180d0:	2304      	movcs	r3, #4
 80180d2:	e002      	b.n	80180da <__ssvfiscanf_r+0x1e2>
 80180d4:	2300      	movs	r3, #0
 80180d6:	9342      	str	r3, [sp, #264]	; 0x108
 80180d8:	2303      	movs	r3, #3
 80180da:	9347      	str	r3, [sp, #284]	; 0x11c
 80180dc:	6863      	ldr	r3, [r4, #4]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	dd3d      	ble.n	801815e <__ssvfiscanf_r+0x266>
 80180e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80180e4:	0659      	lsls	r1, r3, #25
 80180e6:	d404      	bmi.n	80180f2 <__ssvfiscanf_r+0x1fa>
 80180e8:	6823      	ldr	r3, [r4, #0]
 80180ea:	781a      	ldrb	r2, [r3, #0]
 80180ec:	5cba      	ldrb	r2, [r7, r2]
 80180ee:	0712      	lsls	r2, r2, #28
 80180f0:	d43c      	bmi.n	801816c <__ssvfiscanf_r+0x274>
 80180f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80180f4:	2b02      	cmp	r3, #2
 80180f6:	dc4b      	bgt.n	8018190 <__ssvfiscanf_r+0x298>
 80180f8:	466b      	mov	r3, sp
 80180fa:	4622      	mov	r2, r4
 80180fc:	a941      	add	r1, sp, #260	; 0x104
 80180fe:	4630      	mov	r0, r6
 8018100:	f000 f872 	bl	80181e8 <_scanf_chars>
 8018104:	2801      	cmp	r0, #1
 8018106:	d06a      	beq.n	80181de <__ssvfiscanf_r+0x2e6>
 8018108:	2802      	cmp	r0, #2
 801810a:	f47f af1c 	bne.w	8017f46 <__ssvfiscanf_r+0x4e>
 801810e:	e7cb      	b.n	80180a8 <__ssvfiscanf_r+0x1b0>
 8018110:	2308      	movs	r3, #8
 8018112:	9342      	str	r3, [sp, #264]	; 0x108
 8018114:	2304      	movs	r3, #4
 8018116:	e7e0      	b.n	80180da <__ssvfiscanf_r+0x1e2>
 8018118:	220a      	movs	r2, #10
 801811a:	e7d5      	b.n	80180c8 <__ssvfiscanf_r+0x1d0>
 801811c:	4629      	mov	r1, r5
 801811e:	4640      	mov	r0, r8
 8018120:	f000 fa5e 	bl	80185e0 <__sccl>
 8018124:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801812a:	9341      	str	r3, [sp, #260]	; 0x104
 801812c:	4605      	mov	r5, r0
 801812e:	2301      	movs	r3, #1
 8018130:	e7d3      	b.n	80180da <__ssvfiscanf_r+0x1e2>
 8018132:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018138:	9341      	str	r3, [sp, #260]	; 0x104
 801813a:	2300      	movs	r3, #0
 801813c:	e7cd      	b.n	80180da <__ssvfiscanf_r+0x1e2>
 801813e:	2302      	movs	r3, #2
 8018140:	e7cb      	b.n	80180da <__ssvfiscanf_r+0x1e2>
 8018142:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018144:	06c3      	lsls	r3, r0, #27
 8018146:	f53f aefe 	bmi.w	8017f46 <__ssvfiscanf_r+0x4e>
 801814a:	9b00      	ldr	r3, [sp, #0]
 801814c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801814e:	1d19      	adds	r1, r3, #4
 8018150:	9100      	str	r1, [sp, #0]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	07c0      	lsls	r0, r0, #31
 8018156:	bf4c      	ite	mi
 8018158:	801a      	strhmi	r2, [r3, #0]
 801815a:	601a      	strpl	r2, [r3, #0]
 801815c:	e6f3      	b.n	8017f46 <__ssvfiscanf_r+0x4e>
 801815e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018160:	4621      	mov	r1, r4
 8018162:	4630      	mov	r0, r6
 8018164:	4798      	blx	r3
 8018166:	2800      	cmp	r0, #0
 8018168:	d0bb      	beq.n	80180e2 <__ssvfiscanf_r+0x1ea>
 801816a:	e79d      	b.n	80180a8 <__ssvfiscanf_r+0x1b0>
 801816c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801816e:	3201      	adds	r2, #1
 8018170:	9245      	str	r2, [sp, #276]	; 0x114
 8018172:	6862      	ldr	r2, [r4, #4]
 8018174:	3a01      	subs	r2, #1
 8018176:	2a00      	cmp	r2, #0
 8018178:	6062      	str	r2, [r4, #4]
 801817a:	dd02      	ble.n	8018182 <__ssvfiscanf_r+0x28a>
 801817c:	3301      	adds	r3, #1
 801817e:	6023      	str	r3, [r4, #0]
 8018180:	e7b2      	b.n	80180e8 <__ssvfiscanf_r+0x1f0>
 8018182:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018184:	4621      	mov	r1, r4
 8018186:	4630      	mov	r0, r6
 8018188:	4798      	blx	r3
 801818a:	2800      	cmp	r0, #0
 801818c:	d0ac      	beq.n	80180e8 <__ssvfiscanf_r+0x1f0>
 801818e:	e78b      	b.n	80180a8 <__ssvfiscanf_r+0x1b0>
 8018190:	2b04      	cmp	r3, #4
 8018192:	dc0f      	bgt.n	80181b4 <__ssvfiscanf_r+0x2bc>
 8018194:	466b      	mov	r3, sp
 8018196:	4622      	mov	r2, r4
 8018198:	a941      	add	r1, sp, #260	; 0x104
 801819a:	4630      	mov	r0, r6
 801819c:	f000 f87e 	bl	801829c <_scanf_i>
 80181a0:	e7b0      	b.n	8018104 <__ssvfiscanf_r+0x20c>
 80181a2:	bf00      	nop
 80181a4:	08017e45 	.word	0x08017e45
 80181a8:	08017ebf 	.word	0x08017ebf
 80181ac:	0801c2a9 	.word	0x0801c2a9
 80181b0:	0801c3af 	.word	0x0801c3af
 80181b4:	4b0b      	ldr	r3, [pc, #44]	; (80181e4 <__ssvfiscanf_r+0x2ec>)
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	f43f aec5 	beq.w	8017f46 <__ssvfiscanf_r+0x4e>
 80181bc:	466b      	mov	r3, sp
 80181be:	4622      	mov	r2, r4
 80181c0:	a941      	add	r1, sp, #260	; 0x104
 80181c2:	4630      	mov	r0, r6
 80181c4:	f7fc fdc8 	bl	8014d58 <_scanf_float>
 80181c8:	e79c      	b.n	8018104 <__ssvfiscanf_r+0x20c>
 80181ca:	89a3      	ldrh	r3, [r4, #12]
 80181cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80181d0:	bf18      	it	ne
 80181d2:	f04f 30ff 	movne.w	r0, #4294967295
 80181d6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80181da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181de:	9844      	ldr	r0, [sp, #272]	; 0x110
 80181e0:	e7f9      	b.n	80181d6 <__ssvfiscanf_r+0x2de>
 80181e2:	bf00      	nop
 80181e4:	08014d59 	.word	0x08014d59

080181e8 <_scanf_chars>:
 80181e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181ec:	4615      	mov	r5, r2
 80181ee:	688a      	ldr	r2, [r1, #8]
 80181f0:	4680      	mov	r8, r0
 80181f2:	460c      	mov	r4, r1
 80181f4:	b932      	cbnz	r2, 8018204 <_scanf_chars+0x1c>
 80181f6:	698a      	ldr	r2, [r1, #24]
 80181f8:	2a00      	cmp	r2, #0
 80181fa:	bf0c      	ite	eq
 80181fc:	2201      	moveq	r2, #1
 80181fe:	f04f 32ff 	movne.w	r2, #4294967295
 8018202:	608a      	str	r2, [r1, #8]
 8018204:	6822      	ldr	r2, [r4, #0]
 8018206:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018298 <_scanf_chars+0xb0>
 801820a:	06d1      	lsls	r1, r2, #27
 801820c:	bf5f      	itttt	pl
 801820e:	681a      	ldrpl	r2, [r3, #0]
 8018210:	1d11      	addpl	r1, r2, #4
 8018212:	6019      	strpl	r1, [r3, #0]
 8018214:	6816      	ldrpl	r6, [r2, #0]
 8018216:	2700      	movs	r7, #0
 8018218:	69a0      	ldr	r0, [r4, #24]
 801821a:	b188      	cbz	r0, 8018240 <_scanf_chars+0x58>
 801821c:	2801      	cmp	r0, #1
 801821e:	d107      	bne.n	8018230 <_scanf_chars+0x48>
 8018220:	682a      	ldr	r2, [r5, #0]
 8018222:	7811      	ldrb	r1, [r2, #0]
 8018224:	6962      	ldr	r2, [r4, #20]
 8018226:	5c52      	ldrb	r2, [r2, r1]
 8018228:	b952      	cbnz	r2, 8018240 <_scanf_chars+0x58>
 801822a:	2f00      	cmp	r7, #0
 801822c:	d031      	beq.n	8018292 <_scanf_chars+0xaa>
 801822e:	e022      	b.n	8018276 <_scanf_chars+0x8e>
 8018230:	2802      	cmp	r0, #2
 8018232:	d120      	bne.n	8018276 <_scanf_chars+0x8e>
 8018234:	682b      	ldr	r3, [r5, #0]
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	f819 3003 	ldrb.w	r3, [r9, r3]
 801823c:	071b      	lsls	r3, r3, #28
 801823e:	d41a      	bmi.n	8018276 <_scanf_chars+0x8e>
 8018240:	6823      	ldr	r3, [r4, #0]
 8018242:	06da      	lsls	r2, r3, #27
 8018244:	bf5e      	ittt	pl
 8018246:	682b      	ldrpl	r3, [r5, #0]
 8018248:	781b      	ldrbpl	r3, [r3, #0]
 801824a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801824e:	682a      	ldr	r2, [r5, #0]
 8018250:	686b      	ldr	r3, [r5, #4]
 8018252:	3201      	adds	r2, #1
 8018254:	602a      	str	r2, [r5, #0]
 8018256:	68a2      	ldr	r2, [r4, #8]
 8018258:	3b01      	subs	r3, #1
 801825a:	3a01      	subs	r2, #1
 801825c:	606b      	str	r3, [r5, #4]
 801825e:	3701      	adds	r7, #1
 8018260:	60a2      	str	r2, [r4, #8]
 8018262:	b142      	cbz	r2, 8018276 <_scanf_chars+0x8e>
 8018264:	2b00      	cmp	r3, #0
 8018266:	dcd7      	bgt.n	8018218 <_scanf_chars+0x30>
 8018268:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801826c:	4629      	mov	r1, r5
 801826e:	4640      	mov	r0, r8
 8018270:	4798      	blx	r3
 8018272:	2800      	cmp	r0, #0
 8018274:	d0d0      	beq.n	8018218 <_scanf_chars+0x30>
 8018276:	6823      	ldr	r3, [r4, #0]
 8018278:	f013 0310 	ands.w	r3, r3, #16
 801827c:	d105      	bne.n	801828a <_scanf_chars+0xa2>
 801827e:	68e2      	ldr	r2, [r4, #12]
 8018280:	3201      	adds	r2, #1
 8018282:	60e2      	str	r2, [r4, #12]
 8018284:	69a2      	ldr	r2, [r4, #24]
 8018286:	b102      	cbz	r2, 801828a <_scanf_chars+0xa2>
 8018288:	7033      	strb	r3, [r6, #0]
 801828a:	6923      	ldr	r3, [r4, #16]
 801828c:	443b      	add	r3, r7
 801828e:	6123      	str	r3, [r4, #16]
 8018290:	2000      	movs	r0, #0
 8018292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018296:	bf00      	nop
 8018298:	0801c2a9 	.word	0x0801c2a9

0801829c <_scanf_i>:
 801829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a0:	4698      	mov	r8, r3
 80182a2:	4b74      	ldr	r3, [pc, #464]	; (8018474 <_scanf_i+0x1d8>)
 80182a4:	460c      	mov	r4, r1
 80182a6:	4682      	mov	sl, r0
 80182a8:	4616      	mov	r6, r2
 80182aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80182ae:	b087      	sub	sp, #28
 80182b0:	ab03      	add	r3, sp, #12
 80182b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80182b6:	4b70      	ldr	r3, [pc, #448]	; (8018478 <_scanf_i+0x1dc>)
 80182b8:	69a1      	ldr	r1, [r4, #24]
 80182ba:	4a70      	ldr	r2, [pc, #448]	; (801847c <_scanf_i+0x1e0>)
 80182bc:	2903      	cmp	r1, #3
 80182be:	bf18      	it	ne
 80182c0:	461a      	movne	r2, r3
 80182c2:	68a3      	ldr	r3, [r4, #8]
 80182c4:	9201      	str	r2, [sp, #4]
 80182c6:	1e5a      	subs	r2, r3, #1
 80182c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80182cc:	bf88      	it	hi
 80182ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80182d2:	4627      	mov	r7, r4
 80182d4:	bf82      	ittt	hi
 80182d6:	eb03 0905 	addhi.w	r9, r3, r5
 80182da:	f240 135d 	movwhi	r3, #349	; 0x15d
 80182de:	60a3      	strhi	r3, [r4, #8]
 80182e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80182e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80182e8:	bf98      	it	ls
 80182ea:	f04f 0900 	movls.w	r9, #0
 80182ee:	6023      	str	r3, [r4, #0]
 80182f0:	463d      	mov	r5, r7
 80182f2:	f04f 0b00 	mov.w	fp, #0
 80182f6:	6831      	ldr	r1, [r6, #0]
 80182f8:	ab03      	add	r3, sp, #12
 80182fa:	7809      	ldrb	r1, [r1, #0]
 80182fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018300:	2202      	movs	r2, #2
 8018302:	f7e7 ff8d 	bl	8000220 <memchr>
 8018306:	b328      	cbz	r0, 8018354 <_scanf_i+0xb8>
 8018308:	f1bb 0f01 	cmp.w	fp, #1
 801830c:	d159      	bne.n	80183c2 <_scanf_i+0x126>
 801830e:	6862      	ldr	r2, [r4, #4]
 8018310:	b92a      	cbnz	r2, 801831e <_scanf_i+0x82>
 8018312:	6822      	ldr	r2, [r4, #0]
 8018314:	2308      	movs	r3, #8
 8018316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801831a:	6063      	str	r3, [r4, #4]
 801831c:	6022      	str	r2, [r4, #0]
 801831e:	6822      	ldr	r2, [r4, #0]
 8018320:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018324:	6022      	str	r2, [r4, #0]
 8018326:	68a2      	ldr	r2, [r4, #8]
 8018328:	1e51      	subs	r1, r2, #1
 801832a:	60a1      	str	r1, [r4, #8]
 801832c:	b192      	cbz	r2, 8018354 <_scanf_i+0xb8>
 801832e:	6832      	ldr	r2, [r6, #0]
 8018330:	1c51      	adds	r1, r2, #1
 8018332:	6031      	str	r1, [r6, #0]
 8018334:	7812      	ldrb	r2, [r2, #0]
 8018336:	f805 2b01 	strb.w	r2, [r5], #1
 801833a:	6872      	ldr	r2, [r6, #4]
 801833c:	3a01      	subs	r2, #1
 801833e:	2a00      	cmp	r2, #0
 8018340:	6072      	str	r2, [r6, #4]
 8018342:	dc07      	bgt.n	8018354 <_scanf_i+0xb8>
 8018344:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8018348:	4631      	mov	r1, r6
 801834a:	4650      	mov	r0, sl
 801834c:	4790      	blx	r2
 801834e:	2800      	cmp	r0, #0
 8018350:	f040 8085 	bne.w	801845e <_scanf_i+0x1c2>
 8018354:	f10b 0b01 	add.w	fp, fp, #1
 8018358:	f1bb 0f03 	cmp.w	fp, #3
 801835c:	d1cb      	bne.n	80182f6 <_scanf_i+0x5a>
 801835e:	6863      	ldr	r3, [r4, #4]
 8018360:	b90b      	cbnz	r3, 8018366 <_scanf_i+0xca>
 8018362:	230a      	movs	r3, #10
 8018364:	6063      	str	r3, [r4, #4]
 8018366:	6863      	ldr	r3, [r4, #4]
 8018368:	4945      	ldr	r1, [pc, #276]	; (8018480 <_scanf_i+0x1e4>)
 801836a:	6960      	ldr	r0, [r4, #20]
 801836c:	1ac9      	subs	r1, r1, r3
 801836e:	f000 f937 	bl	80185e0 <__sccl>
 8018372:	f04f 0b00 	mov.w	fp, #0
 8018376:	68a3      	ldr	r3, [r4, #8]
 8018378:	6822      	ldr	r2, [r4, #0]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d03d      	beq.n	80183fa <_scanf_i+0x15e>
 801837e:	6831      	ldr	r1, [r6, #0]
 8018380:	6960      	ldr	r0, [r4, #20]
 8018382:	f891 c000 	ldrb.w	ip, [r1]
 8018386:	f810 000c 	ldrb.w	r0, [r0, ip]
 801838a:	2800      	cmp	r0, #0
 801838c:	d035      	beq.n	80183fa <_scanf_i+0x15e>
 801838e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018392:	d124      	bne.n	80183de <_scanf_i+0x142>
 8018394:	0510      	lsls	r0, r2, #20
 8018396:	d522      	bpl.n	80183de <_scanf_i+0x142>
 8018398:	f10b 0b01 	add.w	fp, fp, #1
 801839c:	f1b9 0f00 	cmp.w	r9, #0
 80183a0:	d003      	beq.n	80183aa <_scanf_i+0x10e>
 80183a2:	3301      	adds	r3, #1
 80183a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80183a8:	60a3      	str	r3, [r4, #8]
 80183aa:	6873      	ldr	r3, [r6, #4]
 80183ac:	3b01      	subs	r3, #1
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	6073      	str	r3, [r6, #4]
 80183b2:	dd1b      	ble.n	80183ec <_scanf_i+0x150>
 80183b4:	6833      	ldr	r3, [r6, #0]
 80183b6:	3301      	adds	r3, #1
 80183b8:	6033      	str	r3, [r6, #0]
 80183ba:	68a3      	ldr	r3, [r4, #8]
 80183bc:	3b01      	subs	r3, #1
 80183be:	60a3      	str	r3, [r4, #8]
 80183c0:	e7d9      	b.n	8018376 <_scanf_i+0xda>
 80183c2:	f1bb 0f02 	cmp.w	fp, #2
 80183c6:	d1ae      	bne.n	8018326 <_scanf_i+0x8a>
 80183c8:	6822      	ldr	r2, [r4, #0]
 80183ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80183ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80183d2:	d1bf      	bne.n	8018354 <_scanf_i+0xb8>
 80183d4:	2310      	movs	r3, #16
 80183d6:	6063      	str	r3, [r4, #4]
 80183d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80183dc:	e7a2      	b.n	8018324 <_scanf_i+0x88>
 80183de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80183e2:	6022      	str	r2, [r4, #0]
 80183e4:	780b      	ldrb	r3, [r1, #0]
 80183e6:	f805 3b01 	strb.w	r3, [r5], #1
 80183ea:	e7de      	b.n	80183aa <_scanf_i+0x10e>
 80183ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80183f0:	4631      	mov	r1, r6
 80183f2:	4650      	mov	r0, sl
 80183f4:	4798      	blx	r3
 80183f6:	2800      	cmp	r0, #0
 80183f8:	d0df      	beq.n	80183ba <_scanf_i+0x11e>
 80183fa:	6823      	ldr	r3, [r4, #0]
 80183fc:	05d9      	lsls	r1, r3, #23
 80183fe:	d50d      	bpl.n	801841c <_scanf_i+0x180>
 8018400:	42bd      	cmp	r5, r7
 8018402:	d909      	bls.n	8018418 <_scanf_i+0x17c>
 8018404:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018408:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801840c:	4632      	mov	r2, r6
 801840e:	4650      	mov	r0, sl
 8018410:	4798      	blx	r3
 8018412:	f105 39ff 	add.w	r9, r5, #4294967295
 8018416:	464d      	mov	r5, r9
 8018418:	42bd      	cmp	r5, r7
 801841a:	d028      	beq.n	801846e <_scanf_i+0x1d2>
 801841c:	6822      	ldr	r2, [r4, #0]
 801841e:	f012 0210 	ands.w	r2, r2, #16
 8018422:	d113      	bne.n	801844c <_scanf_i+0x1b0>
 8018424:	702a      	strb	r2, [r5, #0]
 8018426:	6863      	ldr	r3, [r4, #4]
 8018428:	9e01      	ldr	r6, [sp, #4]
 801842a:	4639      	mov	r1, r7
 801842c:	4650      	mov	r0, sl
 801842e:	47b0      	blx	r6
 8018430:	f8d8 3000 	ldr.w	r3, [r8]
 8018434:	6821      	ldr	r1, [r4, #0]
 8018436:	1d1a      	adds	r2, r3, #4
 8018438:	f8c8 2000 	str.w	r2, [r8]
 801843c:	f011 0f20 	tst.w	r1, #32
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	d00f      	beq.n	8018464 <_scanf_i+0x1c8>
 8018444:	6018      	str	r0, [r3, #0]
 8018446:	68e3      	ldr	r3, [r4, #12]
 8018448:	3301      	adds	r3, #1
 801844a:	60e3      	str	r3, [r4, #12]
 801844c:	6923      	ldr	r3, [r4, #16]
 801844e:	1bed      	subs	r5, r5, r7
 8018450:	445d      	add	r5, fp
 8018452:	442b      	add	r3, r5
 8018454:	6123      	str	r3, [r4, #16]
 8018456:	2000      	movs	r0, #0
 8018458:	b007      	add	sp, #28
 801845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801845e:	f04f 0b00 	mov.w	fp, #0
 8018462:	e7ca      	b.n	80183fa <_scanf_i+0x15e>
 8018464:	07ca      	lsls	r2, r1, #31
 8018466:	bf4c      	ite	mi
 8018468:	8018      	strhmi	r0, [r3, #0]
 801846a:	6018      	strpl	r0, [r3, #0]
 801846c:	e7eb      	b.n	8018446 <_scanf_i+0x1aa>
 801846e:	2001      	movs	r0, #1
 8018470:	e7f2      	b.n	8018458 <_scanf_i+0x1bc>
 8018472:	bf00      	nop
 8018474:	0801bf38 	.word	0x0801bf38
 8018478:	08018fad 	.word	0x08018fad
 801847c:	08017b91 	.word	0x08017b91
 8018480:	0801c3ca 	.word	0x0801c3ca

08018484 <__sflush_r>:
 8018484:	898a      	ldrh	r2, [r1, #12]
 8018486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801848a:	4605      	mov	r5, r0
 801848c:	0710      	lsls	r0, r2, #28
 801848e:	460c      	mov	r4, r1
 8018490:	d458      	bmi.n	8018544 <__sflush_r+0xc0>
 8018492:	684b      	ldr	r3, [r1, #4]
 8018494:	2b00      	cmp	r3, #0
 8018496:	dc05      	bgt.n	80184a4 <__sflush_r+0x20>
 8018498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801849a:	2b00      	cmp	r3, #0
 801849c:	dc02      	bgt.n	80184a4 <__sflush_r+0x20>
 801849e:	2000      	movs	r0, #0
 80184a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80184a6:	2e00      	cmp	r6, #0
 80184a8:	d0f9      	beq.n	801849e <__sflush_r+0x1a>
 80184aa:	2300      	movs	r3, #0
 80184ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80184b0:	682f      	ldr	r7, [r5, #0]
 80184b2:	6a21      	ldr	r1, [r4, #32]
 80184b4:	602b      	str	r3, [r5, #0]
 80184b6:	d032      	beq.n	801851e <__sflush_r+0x9a>
 80184b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80184ba:	89a3      	ldrh	r3, [r4, #12]
 80184bc:	075a      	lsls	r2, r3, #29
 80184be:	d505      	bpl.n	80184cc <__sflush_r+0x48>
 80184c0:	6863      	ldr	r3, [r4, #4]
 80184c2:	1ac0      	subs	r0, r0, r3
 80184c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80184c6:	b10b      	cbz	r3, 80184cc <__sflush_r+0x48>
 80184c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80184ca:	1ac0      	subs	r0, r0, r3
 80184cc:	2300      	movs	r3, #0
 80184ce:	4602      	mov	r2, r0
 80184d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80184d2:	6a21      	ldr	r1, [r4, #32]
 80184d4:	4628      	mov	r0, r5
 80184d6:	47b0      	blx	r6
 80184d8:	1c43      	adds	r3, r0, #1
 80184da:	89a3      	ldrh	r3, [r4, #12]
 80184dc:	d106      	bne.n	80184ec <__sflush_r+0x68>
 80184de:	6829      	ldr	r1, [r5, #0]
 80184e0:	291d      	cmp	r1, #29
 80184e2:	d82b      	bhi.n	801853c <__sflush_r+0xb8>
 80184e4:	4a29      	ldr	r2, [pc, #164]	; (801858c <__sflush_r+0x108>)
 80184e6:	410a      	asrs	r2, r1
 80184e8:	07d6      	lsls	r6, r2, #31
 80184ea:	d427      	bmi.n	801853c <__sflush_r+0xb8>
 80184ec:	2200      	movs	r2, #0
 80184ee:	6062      	str	r2, [r4, #4]
 80184f0:	04d9      	lsls	r1, r3, #19
 80184f2:	6922      	ldr	r2, [r4, #16]
 80184f4:	6022      	str	r2, [r4, #0]
 80184f6:	d504      	bpl.n	8018502 <__sflush_r+0x7e>
 80184f8:	1c42      	adds	r2, r0, #1
 80184fa:	d101      	bne.n	8018500 <__sflush_r+0x7c>
 80184fc:	682b      	ldr	r3, [r5, #0]
 80184fe:	b903      	cbnz	r3, 8018502 <__sflush_r+0x7e>
 8018500:	6560      	str	r0, [r4, #84]	; 0x54
 8018502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018504:	602f      	str	r7, [r5, #0]
 8018506:	2900      	cmp	r1, #0
 8018508:	d0c9      	beq.n	801849e <__sflush_r+0x1a>
 801850a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801850e:	4299      	cmp	r1, r3
 8018510:	d002      	beq.n	8018518 <__sflush_r+0x94>
 8018512:	4628      	mov	r0, r5
 8018514:	f7fd fefa 	bl	801630c <_free_r>
 8018518:	2000      	movs	r0, #0
 801851a:	6360      	str	r0, [r4, #52]	; 0x34
 801851c:	e7c0      	b.n	80184a0 <__sflush_r+0x1c>
 801851e:	2301      	movs	r3, #1
 8018520:	4628      	mov	r0, r5
 8018522:	47b0      	blx	r6
 8018524:	1c41      	adds	r1, r0, #1
 8018526:	d1c8      	bne.n	80184ba <__sflush_r+0x36>
 8018528:	682b      	ldr	r3, [r5, #0]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d0c5      	beq.n	80184ba <__sflush_r+0x36>
 801852e:	2b1d      	cmp	r3, #29
 8018530:	d001      	beq.n	8018536 <__sflush_r+0xb2>
 8018532:	2b16      	cmp	r3, #22
 8018534:	d101      	bne.n	801853a <__sflush_r+0xb6>
 8018536:	602f      	str	r7, [r5, #0]
 8018538:	e7b1      	b.n	801849e <__sflush_r+0x1a>
 801853a:	89a3      	ldrh	r3, [r4, #12]
 801853c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018540:	81a3      	strh	r3, [r4, #12]
 8018542:	e7ad      	b.n	80184a0 <__sflush_r+0x1c>
 8018544:	690f      	ldr	r7, [r1, #16]
 8018546:	2f00      	cmp	r7, #0
 8018548:	d0a9      	beq.n	801849e <__sflush_r+0x1a>
 801854a:	0793      	lsls	r3, r2, #30
 801854c:	680e      	ldr	r6, [r1, #0]
 801854e:	bf08      	it	eq
 8018550:	694b      	ldreq	r3, [r1, #20]
 8018552:	600f      	str	r7, [r1, #0]
 8018554:	bf18      	it	ne
 8018556:	2300      	movne	r3, #0
 8018558:	eba6 0807 	sub.w	r8, r6, r7
 801855c:	608b      	str	r3, [r1, #8]
 801855e:	f1b8 0f00 	cmp.w	r8, #0
 8018562:	dd9c      	ble.n	801849e <__sflush_r+0x1a>
 8018564:	6a21      	ldr	r1, [r4, #32]
 8018566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018568:	4643      	mov	r3, r8
 801856a:	463a      	mov	r2, r7
 801856c:	4628      	mov	r0, r5
 801856e:	47b0      	blx	r6
 8018570:	2800      	cmp	r0, #0
 8018572:	dc06      	bgt.n	8018582 <__sflush_r+0xfe>
 8018574:	89a3      	ldrh	r3, [r4, #12]
 8018576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801857a:	81a3      	strh	r3, [r4, #12]
 801857c:	f04f 30ff 	mov.w	r0, #4294967295
 8018580:	e78e      	b.n	80184a0 <__sflush_r+0x1c>
 8018582:	4407      	add	r7, r0
 8018584:	eba8 0800 	sub.w	r8, r8, r0
 8018588:	e7e9      	b.n	801855e <__sflush_r+0xda>
 801858a:	bf00      	nop
 801858c:	dfbffffe 	.word	0xdfbffffe

08018590 <_fflush_r>:
 8018590:	b538      	push	{r3, r4, r5, lr}
 8018592:	690b      	ldr	r3, [r1, #16]
 8018594:	4605      	mov	r5, r0
 8018596:	460c      	mov	r4, r1
 8018598:	b913      	cbnz	r3, 80185a0 <_fflush_r+0x10>
 801859a:	2500      	movs	r5, #0
 801859c:	4628      	mov	r0, r5
 801859e:	bd38      	pop	{r3, r4, r5, pc}
 80185a0:	b118      	cbz	r0, 80185aa <_fflush_r+0x1a>
 80185a2:	6a03      	ldr	r3, [r0, #32]
 80185a4:	b90b      	cbnz	r3, 80185aa <_fflush_r+0x1a>
 80185a6:	f7fc fe73 	bl	8015290 <__sinit>
 80185aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d0f3      	beq.n	801859a <_fflush_r+0xa>
 80185b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80185b4:	07d0      	lsls	r0, r2, #31
 80185b6:	d404      	bmi.n	80185c2 <_fflush_r+0x32>
 80185b8:	0599      	lsls	r1, r3, #22
 80185ba:	d402      	bmi.n	80185c2 <_fflush_r+0x32>
 80185bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185be:	f7fd f814 	bl	80155ea <__retarget_lock_acquire_recursive>
 80185c2:	4628      	mov	r0, r5
 80185c4:	4621      	mov	r1, r4
 80185c6:	f7ff ff5d 	bl	8018484 <__sflush_r>
 80185ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185cc:	07da      	lsls	r2, r3, #31
 80185ce:	4605      	mov	r5, r0
 80185d0:	d4e4      	bmi.n	801859c <_fflush_r+0xc>
 80185d2:	89a3      	ldrh	r3, [r4, #12]
 80185d4:	059b      	lsls	r3, r3, #22
 80185d6:	d4e1      	bmi.n	801859c <_fflush_r+0xc>
 80185d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185da:	f7fd f807 	bl	80155ec <__retarget_lock_release_recursive>
 80185de:	e7dd      	b.n	801859c <_fflush_r+0xc>

080185e0 <__sccl>:
 80185e0:	b570      	push	{r4, r5, r6, lr}
 80185e2:	780b      	ldrb	r3, [r1, #0]
 80185e4:	4604      	mov	r4, r0
 80185e6:	2b5e      	cmp	r3, #94	; 0x5e
 80185e8:	bf0b      	itete	eq
 80185ea:	784b      	ldrbeq	r3, [r1, #1]
 80185ec:	1c4a      	addne	r2, r1, #1
 80185ee:	1c8a      	addeq	r2, r1, #2
 80185f0:	2100      	movne	r1, #0
 80185f2:	bf08      	it	eq
 80185f4:	2101      	moveq	r1, #1
 80185f6:	3801      	subs	r0, #1
 80185f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80185fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018600:	42a8      	cmp	r0, r5
 8018602:	d1fb      	bne.n	80185fc <__sccl+0x1c>
 8018604:	b90b      	cbnz	r3, 801860a <__sccl+0x2a>
 8018606:	1e50      	subs	r0, r2, #1
 8018608:	bd70      	pop	{r4, r5, r6, pc}
 801860a:	f081 0101 	eor.w	r1, r1, #1
 801860e:	54e1      	strb	r1, [r4, r3]
 8018610:	4610      	mov	r0, r2
 8018612:	4602      	mov	r2, r0
 8018614:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018618:	2d2d      	cmp	r5, #45	; 0x2d
 801861a:	d005      	beq.n	8018628 <__sccl+0x48>
 801861c:	2d5d      	cmp	r5, #93	; 0x5d
 801861e:	d016      	beq.n	801864e <__sccl+0x6e>
 8018620:	2d00      	cmp	r5, #0
 8018622:	d0f1      	beq.n	8018608 <__sccl+0x28>
 8018624:	462b      	mov	r3, r5
 8018626:	e7f2      	b.n	801860e <__sccl+0x2e>
 8018628:	7846      	ldrb	r6, [r0, #1]
 801862a:	2e5d      	cmp	r6, #93	; 0x5d
 801862c:	d0fa      	beq.n	8018624 <__sccl+0x44>
 801862e:	42b3      	cmp	r3, r6
 8018630:	dcf8      	bgt.n	8018624 <__sccl+0x44>
 8018632:	3002      	adds	r0, #2
 8018634:	461a      	mov	r2, r3
 8018636:	3201      	adds	r2, #1
 8018638:	4296      	cmp	r6, r2
 801863a:	54a1      	strb	r1, [r4, r2]
 801863c:	dcfb      	bgt.n	8018636 <__sccl+0x56>
 801863e:	1af2      	subs	r2, r6, r3
 8018640:	3a01      	subs	r2, #1
 8018642:	1c5d      	adds	r5, r3, #1
 8018644:	42b3      	cmp	r3, r6
 8018646:	bfa8      	it	ge
 8018648:	2200      	movge	r2, #0
 801864a:	18ab      	adds	r3, r5, r2
 801864c:	e7e1      	b.n	8018612 <__sccl+0x32>
 801864e:	4610      	mov	r0, r2
 8018650:	e7da      	b.n	8018608 <__sccl+0x28>

08018652 <__submore>:
 8018652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018656:	460c      	mov	r4, r1
 8018658:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801865a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801865e:	4299      	cmp	r1, r3
 8018660:	d11d      	bne.n	801869e <__submore+0x4c>
 8018662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018666:	f7fd fec5 	bl	80163f4 <_malloc_r>
 801866a:	b918      	cbnz	r0, 8018674 <__submore+0x22>
 801866c:	f04f 30ff 	mov.w	r0, #4294967295
 8018670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018678:	63a3      	str	r3, [r4, #56]	; 0x38
 801867a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801867e:	6360      	str	r0, [r4, #52]	; 0x34
 8018680:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018684:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018688:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801868c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018690:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018694:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018698:	6020      	str	r0, [r4, #0]
 801869a:	2000      	movs	r0, #0
 801869c:	e7e8      	b.n	8018670 <__submore+0x1e>
 801869e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80186a0:	0077      	lsls	r7, r6, #1
 80186a2:	463a      	mov	r2, r7
 80186a4:	f000 fbe1 	bl	8018e6a <_realloc_r>
 80186a8:	4605      	mov	r5, r0
 80186aa:	2800      	cmp	r0, #0
 80186ac:	d0de      	beq.n	801866c <__submore+0x1a>
 80186ae:	eb00 0806 	add.w	r8, r0, r6
 80186b2:	4601      	mov	r1, r0
 80186b4:	4632      	mov	r2, r6
 80186b6:	4640      	mov	r0, r8
 80186b8:	f7fc ff99 	bl	80155ee <memcpy>
 80186bc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80186c0:	f8c4 8000 	str.w	r8, [r4]
 80186c4:	e7e9      	b.n	801869a <__submore+0x48>

080186c6 <memmove>:
 80186c6:	4288      	cmp	r0, r1
 80186c8:	b510      	push	{r4, lr}
 80186ca:	eb01 0402 	add.w	r4, r1, r2
 80186ce:	d902      	bls.n	80186d6 <memmove+0x10>
 80186d0:	4284      	cmp	r4, r0
 80186d2:	4623      	mov	r3, r4
 80186d4:	d807      	bhi.n	80186e6 <memmove+0x20>
 80186d6:	1e43      	subs	r3, r0, #1
 80186d8:	42a1      	cmp	r1, r4
 80186da:	d008      	beq.n	80186ee <memmove+0x28>
 80186dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80186e4:	e7f8      	b.n	80186d8 <memmove+0x12>
 80186e6:	4402      	add	r2, r0
 80186e8:	4601      	mov	r1, r0
 80186ea:	428a      	cmp	r2, r1
 80186ec:	d100      	bne.n	80186f0 <memmove+0x2a>
 80186ee:	bd10      	pop	{r4, pc}
 80186f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80186f8:	e7f7      	b.n	80186ea <memmove+0x24>
	...

080186fc <_sbrk_r>:
 80186fc:	b538      	push	{r3, r4, r5, lr}
 80186fe:	4d06      	ldr	r5, [pc, #24]	; (8018718 <_sbrk_r+0x1c>)
 8018700:	2300      	movs	r3, #0
 8018702:	4604      	mov	r4, r0
 8018704:	4608      	mov	r0, r1
 8018706:	602b      	str	r3, [r5, #0]
 8018708:	f7ee fcaa 	bl	8007060 <_sbrk>
 801870c:	1c43      	adds	r3, r0, #1
 801870e:	d102      	bne.n	8018716 <_sbrk_r+0x1a>
 8018710:	682b      	ldr	r3, [r5, #0]
 8018712:	b103      	cbz	r3, 8018716 <_sbrk_r+0x1a>
 8018714:	6023      	str	r3, [r4, #0]
 8018716:	bd38      	pop	{r3, r4, r5, pc}
 8018718:	20009090 	.word	0x20009090
 801871c:	00000000 	.word	0x00000000

08018720 <nan>:
 8018720:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018728 <nan+0x8>
 8018724:	4770      	bx	lr
 8018726:	bf00      	nop
 8018728:	00000000 	.word	0x00000000
 801872c:	7ff80000 	.word	0x7ff80000

08018730 <__assert_func>:
 8018730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018732:	4614      	mov	r4, r2
 8018734:	461a      	mov	r2, r3
 8018736:	4b09      	ldr	r3, [pc, #36]	; (801875c <__assert_func+0x2c>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	4605      	mov	r5, r0
 801873c:	68d8      	ldr	r0, [r3, #12]
 801873e:	b14c      	cbz	r4, 8018754 <__assert_func+0x24>
 8018740:	4b07      	ldr	r3, [pc, #28]	; (8018760 <__assert_func+0x30>)
 8018742:	9100      	str	r1, [sp, #0]
 8018744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018748:	4906      	ldr	r1, [pc, #24]	; (8018764 <__assert_func+0x34>)
 801874a:	462b      	mov	r3, r5
 801874c:	f000 fc3e 	bl	8018fcc <fiprintf>
 8018750:	f000 fc4e 	bl	8018ff0 <abort>
 8018754:	4b04      	ldr	r3, [pc, #16]	; (8018768 <__assert_func+0x38>)
 8018756:	461c      	mov	r4, r3
 8018758:	e7f3      	b.n	8018742 <__assert_func+0x12>
 801875a:	bf00      	nop
 801875c:	20000070 	.word	0x20000070
 8018760:	0801c3dd 	.word	0x0801c3dd
 8018764:	0801c3ea 	.word	0x0801c3ea
 8018768:	0801c418 	.word	0x0801c418

0801876c <_calloc_r>:
 801876c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801876e:	fba1 2402 	umull	r2, r4, r1, r2
 8018772:	b94c      	cbnz	r4, 8018788 <_calloc_r+0x1c>
 8018774:	4611      	mov	r1, r2
 8018776:	9201      	str	r2, [sp, #4]
 8018778:	f7fd fe3c 	bl	80163f4 <_malloc_r>
 801877c:	9a01      	ldr	r2, [sp, #4]
 801877e:	4605      	mov	r5, r0
 8018780:	b930      	cbnz	r0, 8018790 <_calloc_r+0x24>
 8018782:	4628      	mov	r0, r5
 8018784:	b003      	add	sp, #12
 8018786:	bd30      	pop	{r4, r5, pc}
 8018788:	220c      	movs	r2, #12
 801878a:	6002      	str	r2, [r0, #0]
 801878c:	2500      	movs	r5, #0
 801878e:	e7f8      	b.n	8018782 <_calloc_r+0x16>
 8018790:	4621      	mov	r1, r4
 8018792:	f7fc fe44 	bl	801541e <memset>
 8018796:	e7f4      	b.n	8018782 <_calloc_r+0x16>

08018798 <rshift>:
 8018798:	6903      	ldr	r3, [r0, #16]
 801879a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801879e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80187a6:	f100 0414 	add.w	r4, r0, #20
 80187aa:	dd45      	ble.n	8018838 <rshift+0xa0>
 80187ac:	f011 011f 	ands.w	r1, r1, #31
 80187b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80187b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80187b8:	d10c      	bne.n	80187d4 <rshift+0x3c>
 80187ba:	f100 0710 	add.w	r7, r0, #16
 80187be:	4629      	mov	r1, r5
 80187c0:	42b1      	cmp	r1, r6
 80187c2:	d334      	bcc.n	801882e <rshift+0x96>
 80187c4:	1a9b      	subs	r3, r3, r2
 80187c6:	009b      	lsls	r3, r3, #2
 80187c8:	1eea      	subs	r2, r5, #3
 80187ca:	4296      	cmp	r6, r2
 80187cc:	bf38      	it	cc
 80187ce:	2300      	movcc	r3, #0
 80187d0:	4423      	add	r3, r4
 80187d2:	e015      	b.n	8018800 <rshift+0x68>
 80187d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80187d8:	f1c1 0820 	rsb	r8, r1, #32
 80187dc:	40cf      	lsrs	r7, r1
 80187de:	f105 0e04 	add.w	lr, r5, #4
 80187e2:	46a1      	mov	r9, r4
 80187e4:	4576      	cmp	r6, lr
 80187e6:	46f4      	mov	ip, lr
 80187e8:	d815      	bhi.n	8018816 <rshift+0x7e>
 80187ea:	1a9a      	subs	r2, r3, r2
 80187ec:	0092      	lsls	r2, r2, #2
 80187ee:	3a04      	subs	r2, #4
 80187f0:	3501      	adds	r5, #1
 80187f2:	42ae      	cmp	r6, r5
 80187f4:	bf38      	it	cc
 80187f6:	2200      	movcc	r2, #0
 80187f8:	18a3      	adds	r3, r4, r2
 80187fa:	50a7      	str	r7, [r4, r2]
 80187fc:	b107      	cbz	r7, 8018800 <rshift+0x68>
 80187fe:	3304      	adds	r3, #4
 8018800:	1b1a      	subs	r2, r3, r4
 8018802:	42a3      	cmp	r3, r4
 8018804:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018808:	bf08      	it	eq
 801880a:	2300      	moveq	r3, #0
 801880c:	6102      	str	r2, [r0, #16]
 801880e:	bf08      	it	eq
 8018810:	6143      	streq	r3, [r0, #20]
 8018812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018816:	f8dc c000 	ldr.w	ip, [ip]
 801881a:	fa0c fc08 	lsl.w	ip, ip, r8
 801881e:	ea4c 0707 	orr.w	r7, ip, r7
 8018822:	f849 7b04 	str.w	r7, [r9], #4
 8018826:	f85e 7b04 	ldr.w	r7, [lr], #4
 801882a:	40cf      	lsrs	r7, r1
 801882c:	e7da      	b.n	80187e4 <rshift+0x4c>
 801882e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018832:	f847 cf04 	str.w	ip, [r7, #4]!
 8018836:	e7c3      	b.n	80187c0 <rshift+0x28>
 8018838:	4623      	mov	r3, r4
 801883a:	e7e1      	b.n	8018800 <rshift+0x68>

0801883c <__hexdig_fun>:
 801883c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018840:	2b09      	cmp	r3, #9
 8018842:	d802      	bhi.n	801884a <__hexdig_fun+0xe>
 8018844:	3820      	subs	r0, #32
 8018846:	b2c0      	uxtb	r0, r0
 8018848:	4770      	bx	lr
 801884a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801884e:	2b05      	cmp	r3, #5
 8018850:	d801      	bhi.n	8018856 <__hexdig_fun+0x1a>
 8018852:	3847      	subs	r0, #71	; 0x47
 8018854:	e7f7      	b.n	8018846 <__hexdig_fun+0xa>
 8018856:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801885a:	2b05      	cmp	r3, #5
 801885c:	d801      	bhi.n	8018862 <__hexdig_fun+0x26>
 801885e:	3827      	subs	r0, #39	; 0x27
 8018860:	e7f1      	b.n	8018846 <__hexdig_fun+0xa>
 8018862:	2000      	movs	r0, #0
 8018864:	4770      	bx	lr
	...

08018868 <__gethex>:
 8018868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801886c:	4617      	mov	r7, r2
 801886e:	680a      	ldr	r2, [r1, #0]
 8018870:	b085      	sub	sp, #20
 8018872:	f102 0b02 	add.w	fp, r2, #2
 8018876:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801887a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801887e:	4681      	mov	r9, r0
 8018880:	468a      	mov	sl, r1
 8018882:	9302      	str	r3, [sp, #8]
 8018884:	32fe      	adds	r2, #254	; 0xfe
 8018886:	eb02 030b 	add.w	r3, r2, fp
 801888a:	46d8      	mov	r8, fp
 801888c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018890:	9301      	str	r3, [sp, #4]
 8018892:	2830      	cmp	r0, #48	; 0x30
 8018894:	d0f7      	beq.n	8018886 <__gethex+0x1e>
 8018896:	f7ff ffd1 	bl	801883c <__hexdig_fun>
 801889a:	4604      	mov	r4, r0
 801889c:	2800      	cmp	r0, #0
 801889e:	d138      	bne.n	8018912 <__gethex+0xaa>
 80188a0:	49a7      	ldr	r1, [pc, #668]	; (8018b40 <__gethex+0x2d8>)
 80188a2:	2201      	movs	r2, #1
 80188a4:	4640      	mov	r0, r8
 80188a6:	f7fc fdc2 	bl	801542e <strncmp>
 80188aa:	4606      	mov	r6, r0
 80188ac:	2800      	cmp	r0, #0
 80188ae:	d169      	bne.n	8018984 <__gethex+0x11c>
 80188b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80188b4:	465d      	mov	r5, fp
 80188b6:	f7ff ffc1 	bl	801883c <__hexdig_fun>
 80188ba:	2800      	cmp	r0, #0
 80188bc:	d064      	beq.n	8018988 <__gethex+0x120>
 80188be:	465a      	mov	r2, fp
 80188c0:	7810      	ldrb	r0, [r2, #0]
 80188c2:	2830      	cmp	r0, #48	; 0x30
 80188c4:	4690      	mov	r8, r2
 80188c6:	f102 0201 	add.w	r2, r2, #1
 80188ca:	d0f9      	beq.n	80188c0 <__gethex+0x58>
 80188cc:	f7ff ffb6 	bl	801883c <__hexdig_fun>
 80188d0:	2301      	movs	r3, #1
 80188d2:	fab0 f480 	clz	r4, r0
 80188d6:	0964      	lsrs	r4, r4, #5
 80188d8:	465e      	mov	r6, fp
 80188da:	9301      	str	r3, [sp, #4]
 80188dc:	4642      	mov	r2, r8
 80188de:	4615      	mov	r5, r2
 80188e0:	3201      	adds	r2, #1
 80188e2:	7828      	ldrb	r0, [r5, #0]
 80188e4:	f7ff ffaa 	bl	801883c <__hexdig_fun>
 80188e8:	2800      	cmp	r0, #0
 80188ea:	d1f8      	bne.n	80188de <__gethex+0x76>
 80188ec:	4994      	ldr	r1, [pc, #592]	; (8018b40 <__gethex+0x2d8>)
 80188ee:	2201      	movs	r2, #1
 80188f0:	4628      	mov	r0, r5
 80188f2:	f7fc fd9c 	bl	801542e <strncmp>
 80188f6:	b978      	cbnz	r0, 8018918 <__gethex+0xb0>
 80188f8:	b946      	cbnz	r6, 801890c <__gethex+0xa4>
 80188fa:	1c6e      	adds	r6, r5, #1
 80188fc:	4632      	mov	r2, r6
 80188fe:	4615      	mov	r5, r2
 8018900:	3201      	adds	r2, #1
 8018902:	7828      	ldrb	r0, [r5, #0]
 8018904:	f7ff ff9a 	bl	801883c <__hexdig_fun>
 8018908:	2800      	cmp	r0, #0
 801890a:	d1f8      	bne.n	80188fe <__gethex+0x96>
 801890c:	1b73      	subs	r3, r6, r5
 801890e:	009e      	lsls	r6, r3, #2
 8018910:	e004      	b.n	801891c <__gethex+0xb4>
 8018912:	2400      	movs	r4, #0
 8018914:	4626      	mov	r6, r4
 8018916:	e7e1      	b.n	80188dc <__gethex+0x74>
 8018918:	2e00      	cmp	r6, #0
 801891a:	d1f7      	bne.n	801890c <__gethex+0xa4>
 801891c:	782b      	ldrb	r3, [r5, #0]
 801891e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018922:	2b50      	cmp	r3, #80	; 0x50
 8018924:	d13d      	bne.n	80189a2 <__gethex+0x13a>
 8018926:	786b      	ldrb	r3, [r5, #1]
 8018928:	2b2b      	cmp	r3, #43	; 0x2b
 801892a:	d02f      	beq.n	801898c <__gethex+0x124>
 801892c:	2b2d      	cmp	r3, #45	; 0x2d
 801892e:	d031      	beq.n	8018994 <__gethex+0x12c>
 8018930:	1c69      	adds	r1, r5, #1
 8018932:	f04f 0b00 	mov.w	fp, #0
 8018936:	7808      	ldrb	r0, [r1, #0]
 8018938:	f7ff ff80 	bl	801883c <__hexdig_fun>
 801893c:	1e42      	subs	r2, r0, #1
 801893e:	b2d2      	uxtb	r2, r2
 8018940:	2a18      	cmp	r2, #24
 8018942:	d82e      	bhi.n	80189a2 <__gethex+0x13a>
 8018944:	f1a0 0210 	sub.w	r2, r0, #16
 8018948:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801894c:	f7ff ff76 	bl	801883c <__hexdig_fun>
 8018950:	f100 3cff 	add.w	ip, r0, #4294967295
 8018954:	fa5f fc8c 	uxtb.w	ip, ip
 8018958:	f1bc 0f18 	cmp.w	ip, #24
 801895c:	d91d      	bls.n	801899a <__gethex+0x132>
 801895e:	f1bb 0f00 	cmp.w	fp, #0
 8018962:	d000      	beq.n	8018966 <__gethex+0xfe>
 8018964:	4252      	negs	r2, r2
 8018966:	4416      	add	r6, r2
 8018968:	f8ca 1000 	str.w	r1, [sl]
 801896c:	b1dc      	cbz	r4, 80189a6 <__gethex+0x13e>
 801896e:	9b01      	ldr	r3, [sp, #4]
 8018970:	2b00      	cmp	r3, #0
 8018972:	bf14      	ite	ne
 8018974:	f04f 0800 	movne.w	r8, #0
 8018978:	f04f 0806 	moveq.w	r8, #6
 801897c:	4640      	mov	r0, r8
 801897e:	b005      	add	sp, #20
 8018980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018984:	4645      	mov	r5, r8
 8018986:	4626      	mov	r6, r4
 8018988:	2401      	movs	r4, #1
 801898a:	e7c7      	b.n	801891c <__gethex+0xb4>
 801898c:	f04f 0b00 	mov.w	fp, #0
 8018990:	1ca9      	adds	r1, r5, #2
 8018992:	e7d0      	b.n	8018936 <__gethex+0xce>
 8018994:	f04f 0b01 	mov.w	fp, #1
 8018998:	e7fa      	b.n	8018990 <__gethex+0x128>
 801899a:	230a      	movs	r3, #10
 801899c:	fb03 0002 	mla	r0, r3, r2, r0
 80189a0:	e7d0      	b.n	8018944 <__gethex+0xdc>
 80189a2:	4629      	mov	r1, r5
 80189a4:	e7e0      	b.n	8018968 <__gethex+0x100>
 80189a6:	eba5 0308 	sub.w	r3, r5, r8
 80189aa:	3b01      	subs	r3, #1
 80189ac:	4621      	mov	r1, r4
 80189ae:	2b07      	cmp	r3, #7
 80189b0:	dc0a      	bgt.n	80189c8 <__gethex+0x160>
 80189b2:	4648      	mov	r0, r9
 80189b4:	f7fd fdaa 	bl	801650c <_Balloc>
 80189b8:	4604      	mov	r4, r0
 80189ba:	b940      	cbnz	r0, 80189ce <__gethex+0x166>
 80189bc:	4b61      	ldr	r3, [pc, #388]	; (8018b44 <__gethex+0x2dc>)
 80189be:	4602      	mov	r2, r0
 80189c0:	21e4      	movs	r1, #228	; 0xe4
 80189c2:	4861      	ldr	r0, [pc, #388]	; (8018b48 <__gethex+0x2e0>)
 80189c4:	f7ff feb4 	bl	8018730 <__assert_func>
 80189c8:	3101      	adds	r1, #1
 80189ca:	105b      	asrs	r3, r3, #1
 80189cc:	e7ef      	b.n	80189ae <__gethex+0x146>
 80189ce:	f100 0a14 	add.w	sl, r0, #20
 80189d2:	2300      	movs	r3, #0
 80189d4:	495a      	ldr	r1, [pc, #360]	; (8018b40 <__gethex+0x2d8>)
 80189d6:	f8cd a004 	str.w	sl, [sp, #4]
 80189da:	469b      	mov	fp, r3
 80189dc:	45a8      	cmp	r8, r5
 80189de:	d342      	bcc.n	8018a66 <__gethex+0x1fe>
 80189e0:	9801      	ldr	r0, [sp, #4]
 80189e2:	f840 bb04 	str.w	fp, [r0], #4
 80189e6:	eba0 000a 	sub.w	r0, r0, sl
 80189ea:	1080      	asrs	r0, r0, #2
 80189ec:	6120      	str	r0, [r4, #16]
 80189ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80189f2:	4658      	mov	r0, fp
 80189f4:	f7fd fe7c 	bl	80166f0 <__hi0bits>
 80189f8:	683d      	ldr	r5, [r7, #0]
 80189fa:	eba8 0000 	sub.w	r0, r8, r0
 80189fe:	42a8      	cmp	r0, r5
 8018a00:	dd59      	ble.n	8018ab6 <__gethex+0x24e>
 8018a02:	eba0 0805 	sub.w	r8, r0, r5
 8018a06:	4641      	mov	r1, r8
 8018a08:	4620      	mov	r0, r4
 8018a0a:	f7fe fa0b 	bl	8016e24 <__any_on>
 8018a0e:	4683      	mov	fp, r0
 8018a10:	b1b8      	cbz	r0, 8018a42 <__gethex+0x1da>
 8018a12:	f108 33ff 	add.w	r3, r8, #4294967295
 8018a16:	1159      	asrs	r1, r3, #5
 8018a18:	f003 021f 	and.w	r2, r3, #31
 8018a1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018a20:	f04f 0b01 	mov.w	fp, #1
 8018a24:	fa0b f202 	lsl.w	r2, fp, r2
 8018a28:	420a      	tst	r2, r1
 8018a2a:	d00a      	beq.n	8018a42 <__gethex+0x1da>
 8018a2c:	455b      	cmp	r3, fp
 8018a2e:	dd06      	ble.n	8018a3e <__gethex+0x1d6>
 8018a30:	f1a8 0102 	sub.w	r1, r8, #2
 8018a34:	4620      	mov	r0, r4
 8018a36:	f7fe f9f5 	bl	8016e24 <__any_on>
 8018a3a:	2800      	cmp	r0, #0
 8018a3c:	d138      	bne.n	8018ab0 <__gethex+0x248>
 8018a3e:	f04f 0b02 	mov.w	fp, #2
 8018a42:	4641      	mov	r1, r8
 8018a44:	4620      	mov	r0, r4
 8018a46:	f7ff fea7 	bl	8018798 <rshift>
 8018a4a:	4446      	add	r6, r8
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	42b3      	cmp	r3, r6
 8018a50:	da41      	bge.n	8018ad6 <__gethex+0x26e>
 8018a52:	4621      	mov	r1, r4
 8018a54:	4648      	mov	r0, r9
 8018a56:	f7fd fd99 	bl	801658c <_Bfree>
 8018a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	6013      	str	r3, [r2, #0]
 8018a60:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018a64:	e78a      	b.n	801897c <__gethex+0x114>
 8018a66:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018a6a:	2a2e      	cmp	r2, #46	; 0x2e
 8018a6c:	d014      	beq.n	8018a98 <__gethex+0x230>
 8018a6e:	2b20      	cmp	r3, #32
 8018a70:	d106      	bne.n	8018a80 <__gethex+0x218>
 8018a72:	9b01      	ldr	r3, [sp, #4]
 8018a74:	f843 bb04 	str.w	fp, [r3], #4
 8018a78:	f04f 0b00 	mov.w	fp, #0
 8018a7c:	9301      	str	r3, [sp, #4]
 8018a7e:	465b      	mov	r3, fp
 8018a80:	7828      	ldrb	r0, [r5, #0]
 8018a82:	9303      	str	r3, [sp, #12]
 8018a84:	f7ff feda 	bl	801883c <__hexdig_fun>
 8018a88:	9b03      	ldr	r3, [sp, #12]
 8018a8a:	f000 000f 	and.w	r0, r0, #15
 8018a8e:	4098      	lsls	r0, r3
 8018a90:	ea4b 0b00 	orr.w	fp, fp, r0
 8018a94:	3304      	adds	r3, #4
 8018a96:	e7a1      	b.n	80189dc <__gethex+0x174>
 8018a98:	45a8      	cmp	r8, r5
 8018a9a:	d8e8      	bhi.n	8018a6e <__gethex+0x206>
 8018a9c:	2201      	movs	r2, #1
 8018a9e:	4628      	mov	r0, r5
 8018aa0:	9303      	str	r3, [sp, #12]
 8018aa2:	f7fc fcc4 	bl	801542e <strncmp>
 8018aa6:	4926      	ldr	r1, [pc, #152]	; (8018b40 <__gethex+0x2d8>)
 8018aa8:	9b03      	ldr	r3, [sp, #12]
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	d1df      	bne.n	8018a6e <__gethex+0x206>
 8018aae:	e795      	b.n	80189dc <__gethex+0x174>
 8018ab0:	f04f 0b03 	mov.w	fp, #3
 8018ab4:	e7c5      	b.n	8018a42 <__gethex+0x1da>
 8018ab6:	da0b      	bge.n	8018ad0 <__gethex+0x268>
 8018ab8:	eba5 0800 	sub.w	r8, r5, r0
 8018abc:	4621      	mov	r1, r4
 8018abe:	4642      	mov	r2, r8
 8018ac0:	4648      	mov	r0, r9
 8018ac2:	f7fd ff7d 	bl	80169c0 <__lshift>
 8018ac6:	eba6 0608 	sub.w	r6, r6, r8
 8018aca:	4604      	mov	r4, r0
 8018acc:	f100 0a14 	add.w	sl, r0, #20
 8018ad0:	f04f 0b00 	mov.w	fp, #0
 8018ad4:	e7ba      	b.n	8018a4c <__gethex+0x1e4>
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	42b3      	cmp	r3, r6
 8018ada:	dd73      	ble.n	8018bc4 <__gethex+0x35c>
 8018adc:	1b9e      	subs	r6, r3, r6
 8018ade:	42b5      	cmp	r5, r6
 8018ae0:	dc34      	bgt.n	8018b4c <__gethex+0x2e4>
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	2b02      	cmp	r3, #2
 8018ae6:	d023      	beq.n	8018b30 <__gethex+0x2c8>
 8018ae8:	2b03      	cmp	r3, #3
 8018aea:	d025      	beq.n	8018b38 <__gethex+0x2d0>
 8018aec:	2b01      	cmp	r3, #1
 8018aee:	d115      	bne.n	8018b1c <__gethex+0x2b4>
 8018af0:	42b5      	cmp	r5, r6
 8018af2:	d113      	bne.n	8018b1c <__gethex+0x2b4>
 8018af4:	2d01      	cmp	r5, #1
 8018af6:	d10b      	bne.n	8018b10 <__gethex+0x2a8>
 8018af8:	9a02      	ldr	r2, [sp, #8]
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	6013      	str	r3, [r2, #0]
 8018afe:	2301      	movs	r3, #1
 8018b00:	6123      	str	r3, [r4, #16]
 8018b02:	f8ca 3000 	str.w	r3, [sl]
 8018b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b08:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018b0c:	601c      	str	r4, [r3, #0]
 8018b0e:	e735      	b.n	801897c <__gethex+0x114>
 8018b10:	1e69      	subs	r1, r5, #1
 8018b12:	4620      	mov	r0, r4
 8018b14:	f7fe f986 	bl	8016e24 <__any_on>
 8018b18:	2800      	cmp	r0, #0
 8018b1a:	d1ed      	bne.n	8018af8 <__gethex+0x290>
 8018b1c:	4621      	mov	r1, r4
 8018b1e:	4648      	mov	r0, r9
 8018b20:	f7fd fd34 	bl	801658c <_Bfree>
 8018b24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b26:	2300      	movs	r3, #0
 8018b28:	6013      	str	r3, [r2, #0]
 8018b2a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018b2e:	e725      	b.n	801897c <__gethex+0x114>
 8018b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d1f2      	bne.n	8018b1c <__gethex+0x2b4>
 8018b36:	e7df      	b.n	8018af8 <__gethex+0x290>
 8018b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d1dc      	bne.n	8018af8 <__gethex+0x290>
 8018b3e:	e7ed      	b.n	8018b1c <__gethex+0x2b4>
 8018b40:	0801c254 	.word	0x0801c254
 8018b44:	0801c0eb 	.word	0x0801c0eb
 8018b48:	0801c419 	.word	0x0801c419
 8018b4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8018b50:	f1bb 0f00 	cmp.w	fp, #0
 8018b54:	d133      	bne.n	8018bbe <__gethex+0x356>
 8018b56:	f1b8 0f00 	cmp.w	r8, #0
 8018b5a:	d004      	beq.n	8018b66 <__gethex+0x2fe>
 8018b5c:	4641      	mov	r1, r8
 8018b5e:	4620      	mov	r0, r4
 8018b60:	f7fe f960 	bl	8016e24 <__any_on>
 8018b64:	4683      	mov	fp, r0
 8018b66:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018b70:	f008 081f 	and.w	r8, r8, #31
 8018b74:	fa03 f308 	lsl.w	r3, r3, r8
 8018b78:	4213      	tst	r3, r2
 8018b7a:	4631      	mov	r1, r6
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	bf18      	it	ne
 8018b80:	f04b 0b02 	orrne.w	fp, fp, #2
 8018b84:	1bad      	subs	r5, r5, r6
 8018b86:	f7ff fe07 	bl	8018798 <rshift>
 8018b8a:	687e      	ldr	r6, [r7, #4]
 8018b8c:	f04f 0802 	mov.w	r8, #2
 8018b90:	f1bb 0f00 	cmp.w	fp, #0
 8018b94:	d04a      	beq.n	8018c2c <__gethex+0x3c4>
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	2b02      	cmp	r3, #2
 8018b9a:	d016      	beq.n	8018bca <__gethex+0x362>
 8018b9c:	2b03      	cmp	r3, #3
 8018b9e:	d018      	beq.n	8018bd2 <__gethex+0x36a>
 8018ba0:	2b01      	cmp	r3, #1
 8018ba2:	d109      	bne.n	8018bb8 <__gethex+0x350>
 8018ba4:	f01b 0f02 	tst.w	fp, #2
 8018ba8:	d006      	beq.n	8018bb8 <__gethex+0x350>
 8018baa:	f8da 3000 	ldr.w	r3, [sl]
 8018bae:	ea4b 0b03 	orr.w	fp, fp, r3
 8018bb2:	f01b 0f01 	tst.w	fp, #1
 8018bb6:	d10f      	bne.n	8018bd8 <__gethex+0x370>
 8018bb8:	f048 0810 	orr.w	r8, r8, #16
 8018bbc:	e036      	b.n	8018c2c <__gethex+0x3c4>
 8018bbe:	f04f 0b01 	mov.w	fp, #1
 8018bc2:	e7d0      	b.n	8018b66 <__gethex+0x2fe>
 8018bc4:	f04f 0801 	mov.w	r8, #1
 8018bc8:	e7e2      	b.n	8018b90 <__gethex+0x328>
 8018bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bcc:	f1c3 0301 	rsb	r3, r3, #1
 8018bd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8018bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d0ef      	beq.n	8018bb8 <__gethex+0x350>
 8018bd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018bdc:	f104 0214 	add.w	r2, r4, #20
 8018be0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018be4:	9301      	str	r3, [sp, #4]
 8018be6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8018bea:	2300      	movs	r3, #0
 8018bec:	4694      	mov	ip, r2
 8018bee:	f852 1b04 	ldr.w	r1, [r2], #4
 8018bf2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8018bf6:	d01e      	beq.n	8018c36 <__gethex+0x3ce>
 8018bf8:	3101      	adds	r1, #1
 8018bfa:	f8cc 1000 	str.w	r1, [ip]
 8018bfe:	f1b8 0f02 	cmp.w	r8, #2
 8018c02:	f104 0214 	add.w	r2, r4, #20
 8018c06:	d13d      	bne.n	8018c84 <__gethex+0x41c>
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	3b01      	subs	r3, #1
 8018c0c:	42ab      	cmp	r3, r5
 8018c0e:	d10b      	bne.n	8018c28 <__gethex+0x3c0>
 8018c10:	1169      	asrs	r1, r5, #5
 8018c12:	2301      	movs	r3, #1
 8018c14:	f005 051f 	and.w	r5, r5, #31
 8018c18:	fa03 f505 	lsl.w	r5, r3, r5
 8018c1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c20:	421d      	tst	r5, r3
 8018c22:	bf18      	it	ne
 8018c24:	f04f 0801 	movne.w	r8, #1
 8018c28:	f048 0820 	orr.w	r8, r8, #32
 8018c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c2e:	601c      	str	r4, [r3, #0]
 8018c30:	9b02      	ldr	r3, [sp, #8]
 8018c32:	601e      	str	r6, [r3, #0]
 8018c34:	e6a2      	b.n	801897c <__gethex+0x114>
 8018c36:	4290      	cmp	r0, r2
 8018c38:	f842 3c04 	str.w	r3, [r2, #-4]
 8018c3c:	d8d6      	bhi.n	8018bec <__gethex+0x384>
 8018c3e:	68a2      	ldr	r2, [r4, #8]
 8018c40:	4593      	cmp	fp, r2
 8018c42:	db17      	blt.n	8018c74 <__gethex+0x40c>
 8018c44:	6861      	ldr	r1, [r4, #4]
 8018c46:	4648      	mov	r0, r9
 8018c48:	3101      	adds	r1, #1
 8018c4a:	f7fd fc5f 	bl	801650c <_Balloc>
 8018c4e:	4682      	mov	sl, r0
 8018c50:	b918      	cbnz	r0, 8018c5a <__gethex+0x3f2>
 8018c52:	4b1b      	ldr	r3, [pc, #108]	; (8018cc0 <__gethex+0x458>)
 8018c54:	4602      	mov	r2, r0
 8018c56:	2184      	movs	r1, #132	; 0x84
 8018c58:	e6b3      	b.n	80189c2 <__gethex+0x15a>
 8018c5a:	6922      	ldr	r2, [r4, #16]
 8018c5c:	3202      	adds	r2, #2
 8018c5e:	f104 010c 	add.w	r1, r4, #12
 8018c62:	0092      	lsls	r2, r2, #2
 8018c64:	300c      	adds	r0, #12
 8018c66:	f7fc fcc2 	bl	80155ee <memcpy>
 8018c6a:	4621      	mov	r1, r4
 8018c6c:	4648      	mov	r0, r9
 8018c6e:	f7fd fc8d 	bl	801658c <_Bfree>
 8018c72:	4654      	mov	r4, sl
 8018c74:	6922      	ldr	r2, [r4, #16]
 8018c76:	1c51      	adds	r1, r2, #1
 8018c78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018c7c:	6121      	str	r1, [r4, #16]
 8018c7e:	2101      	movs	r1, #1
 8018c80:	6151      	str	r1, [r2, #20]
 8018c82:	e7bc      	b.n	8018bfe <__gethex+0x396>
 8018c84:	6921      	ldr	r1, [r4, #16]
 8018c86:	4559      	cmp	r1, fp
 8018c88:	dd0b      	ble.n	8018ca2 <__gethex+0x43a>
 8018c8a:	2101      	movs	r1, #1
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f7ff fd83 	bl	8018798 <rshift>
 8018c92:	68bb      	ldr	r3, [r7, #8]
 8018c94:	3601      	adds	r6, #1
 8018c96:	42b3      	cmp	r3, r6
 8018c98:	f6ff aedb 	blt.w	8018a52 <__gethex+0x1ea>
 8018c9c:	f04f 0801 	mov.w	r8, #1
 8018ca0:	e7c2      	b.n	8018c28 <__gethex+0x3c0>
 8018ca2:	f015 051f 	ands.w	r5, r5, #31
 8018ca6:	d0f9      	beq.n	8018c9c <__gethex+0x434>
 8018ca8:	9b01      	ldr	r3, [sp, #4]
 8018caa:	441a      	add	r2, r3
 8018cac:	f1c5 0520 	rsb	r5, r5, #32
 8018cb0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018cb4:	f7fd fd1c 	bl	80166f0 <__hi0bits>
 8018cb8:	42a8      	cmp	r0, r5
 8018cba:	dbe6      	blt.n	8018c8a <__gethex+0x422>
 8018cbc:	e7ee      	b.n	8018c9c <__gethex+0x434>
 8018cbe:	bf00      	nop
 8018cc0:	0801c0eb 	.word	0x0801c0eb

08018cc4 <L_shift>:
 8018cc4:	f1c2 0208 	rsb	r2, r2, #8
 8018cc8:	0092      	lsls	r2, r2, #2
 8018cca:	b570      	push	{r4, r5, r6, lr}
 8018ccc:	f1c2 0620 	rsb	r6, r2, #32
 8018cd0:	6843      	ldr	r3, [r0, #4]
 8018cd2:	6804      	ldr	r4, [r0, #0]
 8018cd4:	fa03 f506 	lsl.w	r5, r3, r6
 8018cd8:	432c      	orrs	r4, r5
 8018cda:	40d3      	lsrs	r3, r2
 8018cdc:	6004      	str	r4, [r0, #0]
 8018cde:	f840 3f04 	str.w	r3, [r0, #4]!
 8018ce2:	4288      	cmp	r0, r1
 8018ce4:	d3f4      	bcc.n	8018cd0 <L_shift+0xc>
 8018ce6:	bd70      	pop	{r4, r5, r6, pc}

08018ce8 <__match>:
 8018ce8:	b530      	push	{r4, r5, lr}
 8018cea:	6803      	ldr	r3, [r0, #0]
 8018cec:	3301      	adds	r3, #1
 8018cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018cf2:	b914      	cbnz	r4, 8018cfa <__match+0x12>
 8018cf4:	6003      	str	r3, [r0, #0]
 8018cf6:	2001      	movs	r0, #1
 8018cf8:	bd30      	pop	{r4, r5, pc}
 8018cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018d02:	2d19      	cmp	r5, #25
 8018d04:	bf98      	it	ls
 8018d06:	3220      	addls	r2, #32
 8018d08:	42a2      	cmp	r2, r4
 8018d0a:	d0f0      	beq.n	8018cee <__match+0x6>
 8018d0c:	2000      	movs	r0, #0
 8018d0e:	e7f3      	b.n	8018cf8 <__match+0x10>

08018d10 <__hexnan>:
 8018d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d14:	680b      	ldr	r3, [r1, #0]
 8018d16:	6801      	ldr	r1, [r0, #0]
 8018d18:	115e      	asrs	r6, r3, #5
 8018d1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018d1e:	f013 031f 	ands.w	r3, r3, #31
 8018d22:	b087      	sub	sp, #28
 8018d24:	bf18      	it	ne
 8018d26:	3604      	addne	r6, #4
 8018d28:	2500      	movs	r5, #0
 8018d2a:	1f37      	subs	r7, r6, #4
 8018d2c:	4682      	mov	sl, r0
 8018d2e:	4690      	mov	r8, r2
 8018d30:	9301      	str	r3, [sp, #4]
 8018d32:	f846 5c04 	str.w	r5, [r6, #-4]
 8018d36:	46b9      	mov	r9, r7
 8018d38:	463c      	mov	r4, r7
 8018d3a:	9502      	str	r5, [sp, #8]
 8018d3c:	46ab      	mov	fp, r5
 8018d3e:	784a      	ldrb	r2, [r1, #1]
 8018d40:	1c4b      	adds	r3, r1, #1
 8018d42:	9303      	str	r3, [sp, #12]
 8018d44:	b342      	cbz	r2, 8018d98 <__hexnan+0x88>
 8018d46:	4610      	mov	r0, r2
 8018d48:	9105      	str	r1, [sp, #20]
 8018d4a:	9204      	str	r2, [sp, #16]
 8018d4c:	f7ff fd76 	bl	801883c <__hexdig_fun>
 8018d50:	2800      	cmp	r0, #0
 8018d52:	d14f      	bne.n	8018df4 <__hexnan+0xe4>
 8018d54:	9a04      	ldr	r2, [sp, #16]
 8018d56:	9905      	ldr	r1, [sp, #20]
 8018d58:	2a20      	cmp	r2, #32
 8018d5a:	d818      	bhi.n	8018d8e <__hexnan+0x7e>
 8018d5c:	9b02      	ldr	r3, [sp, #8]
 8018d5e:	459b      	cmp	fp, r3
 8018d60:	dd13      	ble.n	8018d8a <__hexnan+0x7a>
 8018d62:	454c      	cmp	r4, r9
 8018d64:	d206      	bcs.n	8018d74 <__hexnan+0x64>
 8018d66:	2d07      	cmp	r5, #7
 8018d68:	dc04      	bgt.n	8018d74 <__hexnan+0x64>
 8018d6a:	462a      	mov	r2, r5
 8018d6c:	4649      	mov	r1, r9
 8018d6e:	4620      	mov	r0, r4
 8018d70:	f7ff ffa8 	bl	8018cc4 <L_shift>
 8018d74:	4544      	cmp	r4, r8
 8018d76:	d950      	bls.n	8018e1a <__hexnan+0x10a>
 8018d78:	2300      	movs	r3, #0
 8018d7a:	f1a4 0904 	sub.w	r9, r4, #4
 8018d7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d82:	f8cd b008 	str.w	fp, [sp, #8]
 8018d86:	464c      	mov	r4, r9
 8018d88:	461d      	mov	r5, r3
 8018d8a:	9903      	ldr	r1, [sp, #12]
 8018d8c:	e7d7      	b.n	8018d3e <__hexnan+0x2e>
 8018d8e:	2a29      	cmp	r2, #41	; 0x29
 8018d90:	d155      	bne.n	8018e3e <__hexnan+0x12e>
 8018d92:	3102      	adds	r1, #2
 8018d94:	f8ca 1000 	str.w	r1, [sl]
 8018d98:	f1bb 0f00 	cmp.w	fp, #0
 8018d9c:	d04f      	beq.n	8018e3e <__hexnan+0x12e>
 8018d9e:	454c      	cmp	r4, r9
 8018da0:	d206      	bcs.n	8018db0 <__hexnan+0xa0>
 8018da2:	2d07      	cmp	r5, #7
 8018da4:	dc04      	bgt.n	8018db0 <__hexnan+0xa0>
 8018da6:	462a      	mov	r2, r5
 8018da8:	4649      	mov	r1, r9
 8018daa:	4620      	mov	r0, r4
 8018dac:	f7ff ff8a 	bl	8018cc4 <L_shift>
 8018db0:	4544      	cmp	r4, r8
 8018db2:	d934      	bls.n	8018e1e <__hexnan+0x10e>
 8018db4:	f1a8 0204 	sub.w	r2, r8, #4
 8018db8:	4623      	mov	r3, r4
 8018dba:	f853 1b04 	ldr.w	r1, [r3], #4
 8018dbe:	f842 1f04 	str.w	r1, [r2, #4]!
 8018dc2:	429f      	cmp	r7, r3
 8018dc4:	d2f9      	bcs.n	8018dba <__hexnan+0xaa>
 8018dc6:	1b3b      	subs	r3, r7, r4
 8018dc8:	f023 0303 	bic.w	r3, r3, #3
 8018dcc:	3304      	adds	r3, #4
 8018dce:	3e03      	subs	r6, #3
 8018dd0:	3401      	adds	r4, #1
 8018dd2:	42a6      	cmp	r6, r4
 8018dd4:	bf38      	it	cc
 8018dd6:	2304      	movcc	r3, #4
 8018dd8:	4443      	add	r3, r8
 8018dda:	2200      	movs	r2, #0
 8018ddc:	f843 2b04 	str.w	r2, [r3], #4
 8018de0:	429f      	cmp	r7, r3
 8018de2:	d2fb      	bcs.n	8018ddc <__hexnan+0xcc>
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	b91b      	cbnz	r3, 8018df0 <__hexnan+0xe0>
 8018de8:	4547      	cmp	r7, r8
 8018dea:	d126      	bne.n	8018e3a <__hexnan+0x12a>
 8018dec:	2301      	movs	r3, #1
 8018dee:	603b      	str	r3, [r7, #0]
 8018df0:	2005      	movs	r0, #5
 8018df2:	e025      	b.n	8018e40 <__hexnan+0x130>
 8018df4:	3501      	adds	r5, #1
 8018df6:	2d08      	cmp	r5, #8
 8018df8:	f10b 0b01 	add.w	fp, fp, #1
 8018dfc:	dd06      	ble.n	8018e0c <__hexnan+0xfc>
 8018dfe:	4544      	cmp	r4, r8
 8018e00:	d9c3      	bls.n	8018d8a <__hexnan+0x7a>
 8018e02:	2300      	movs	r3, #0
 8018e04:	f844 3c04 	str.w	r3, [r4, #-4]
 8018e08:	2501      	movs	r5, #1
 8018e0a:	3c04      	subs	r4, #4
 8018e0c:	6822      	ldr	r2, [r4, #0]
 8018e0e:	f000 000f 	and.w	r0, r0, #15
 8018e12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018e16:	6020      	str	r0, [r4, #0]
 8018e18:	e7b7      	b.n	8018d8a <__hexnan+0x7a>
 8018e1a:	2508      	movs	r5, #8
 8018e1c:	e7b5      	b.n	8018d8a <__hexnan+0x7a>
 8018e1e:	9b01      	ldr	r3, [sp, #4]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d0df      	beq.n	8018de4 <__hexnan+0xd4>
 8018e24:	f1c3 0320 	rsb	r3, r3, #32
 8018e28:	f04f 32ff 	mov.w	r2, #4294967295
 8018e2c:	40da      	lsrs	r2, r3
 8018e2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018e32:	4013      	ands	r3, r2
 8018e34:	f846 3c04 	str.w	r3, [r6, #-4]
 8018e38:	e7d4      	b.n	8018de4 <__hexnan+0xd4>
 8018e3a:	3f04      	subs	r7, #4
 8018e3c:	e7d2      	b.n	8018de4 <__hexnan+0xd4>
 8018e3e:	2004      	movs	r0, #4
 8018e40:	b007      	add	sp, #28
 8018e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e46 <__ascii_mbtowc>:
 8018e46:	b082      	sub	sp, #8
 8018e48:	b901      	cbnz	r1, 8018e4c <__ascii_mbtowc+0x6>
 8018e4a:	a901      	add	r1, sp, #4
 8018e4c:	b142      	cbz	r2, 8018e60 <__ascii_mbtowc+0x1a>
 8018e4e:	b14b      	cbz	r3, 8018e64 <__ascii_mbtowc+0x1e>
 8018e50:	7813      	ldrb	r3, [r2, #0]
 8018e52:	600b      	str	r3, [r1, #0]
 8018e54:	7812      	ldrb	r2, [r2, #0]
 8018e56:	1e10      	subs	r0, r2, #0
 8018e58:	bf18      	it	ne
 8018e5a:	2001      	movne	r0, #1
 8018e5c:	b002      	add	sp, #8
 8018e5e:	4770      	bx	lr
 8018e60:	4610      	mov	r0, r2
 8018e62:	e7fb      	b.n	8018e5c <__ascii_mbtowc+0x16>
 8018e64:	f06f 0001 	mvn.w	r0, #1
 8018e68:	e7f8      	b.n	8018e5c <__ascii_mbtowc+0x16>

08018e6a <_realloc_r>:
 8018e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e6e:	4680      	mov	r8, r0
 8018e70:	4614      	mov	r4, r2
 8018e72:	460e      	mov	r6, r1
 8018e74:	b921      	cbnz	r1, 8018e80 <_realloc_r+0x16>
 8018e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e7a:	4611      	mov	r1, r2
 8018e7c:	f7fd baba 	b.w	80163f4 <_malloc_r>
 8018e80:	b92a      	cbnz	r2, 8018e8e <_realloc_r+0x24>
 8018e82:	f7fd fa43 	bl	801630c <_free_r>
 8018e86:	4625      	mov	r5, r4
 8018e88:	4628      	mov	r0, r5
 8018e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e8e:	f000 f8b6 	bl	8018ffe <_malloc_usable_size_r>
 8018e92:	4284      	cmp	r4, r0
 8018e94:	4607      	mov	r7, r0
 8018e96:	d802      	bhi.n	8018e9e <_realloc_r+0x34>
 8018e98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018e9c:	d812      	bhi.n	8018ec4 <_realloc_r+0x5a>
 8018e9e:	4621      	mov	r1, r4
 8018ea0:	4640      	mov	r0, r8
 8018ea2:	f7fd faa7 	bl	80163f4 <_malloc_r>
 8018ea6:	4605      	mov	r5, r0
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	d0ed      	beq.n	8018e88 <_realloc_r+0x1e>
 8018eac:	42bc      	cmp	r4, r7
 8018eae:	4622      	mov	r2, r4
 8018eb0:	4631      	mov	r1, r6
 8018eb2:	bf28      	it	cs
 8018eb4:	463a      	movcs	r2, r7
 8018eb6:	f7fc fb9a 	bl	80155ee <memcpy>
 8018eba:	4631      	mov	r1, r6
 8018ebc:	4640      	mov	r0, r8
 8018ebe:	f7fd fa25 	bl	801630c <_free_r>
 8018ec2:	e7e1      	b.n	8018e88 <_realloc_r+0x1e>
 8018ec4:	4635      	mov	r5, r6
 8018ec6:	e7df      	b.n	8018e88 <_realloc_r+0x1e>

08018ec8 <_strtoul_l.constprop.0>:
 8018ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ecc:	4f36      	ldr	r7, [pc, #216]	; (8018fa8 <_strtoul_l.constprop.0+0xe0>)
 8018ece:	4686      	mov	lr, r0
 8018ed0:	460d      	mov	r5, r1
 8018ed2:	4628      	mov	r0, r5
 8018ed4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ed8:	5d3e      	ldrb	r6, [r7, r4]
 8018eda:	f016 0608 	ands.w	r6, r6, #8
 8018ede:	d1f8      	bne.n	8018ed2 <_strtoul_l.constprop.0+0xa>
 8018ee0:	2c2d      	cmp	r4, #45	; 0x2d
 8018ee2:	d130      	bne.n	8018f46 <_strtoul_l.constprop.0+0x7e>
 8018ee4:	782c      	ldrb	r4, [r5, #0]
 8018ee6:	2601      	movs	r6, #1
 8018ee8:	1c85      	adds	r5, r0, #2
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d057      	beq.n	8018f9e <_strtoul_l.constprop.0+0xd6>
 8018eee:	2b10      	cmp	r3, #16
 8018ef0:	d109      	bne.n	8018f06 <_strtoul_l.constprop.0+0x3e>
 8018ef2:	2c30      	cmp	r4, #48	; 0x30
 8018ef4:	d107      	bne.n	8018f06 <_strtoul_l.constprop.0+0x3e>
 8018ef6:	7828      	ldrb	r0, [r5, #0]
 8018ef8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018efc:	2858      	cmp	r0, #88	; 0x58
 8018efe:	d149      	bne.n	8018f94 <_strtoul_l.constprop.0+0xcc>
 8018f00:	786c      	ldrb	r4, [r5, #1]
 8018f02:	2310      	movs	r3, #16
 8018f04:	3502      	adds	r5, #2
 8018f06:	f04f 38ff 	mov.w	r8, #4294967295
 8018f0a:	2700      	movs	r7, #0
 8018f0c:	fbb8 f8f3 	udiv	r8, r8, r3
 8018f10:	fb03 f908 	mul.w	r9, r3, r8
 8018f14:	ea6f 0909 	mvn.w	r9, r9
 8018f18:	4638      	mov	r0, r7
 8018f1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018f1e:	f1bc 0f09 	cmp.w	ip, #9
 8018f22:	d815      	bhi.n	8018f50 <_strtoul_l.constprop.0+0x88>
 8018f24:	4664      	mov	r4, ip
 8018f26:	42a3      	cmp	r3, r4
 8018f28:	dd23      	ble.n	8018f72 <_strtoul_l.constprop.0+0xaa>
 8018f2a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018f2e:	d007      	beq.n	8018f40 <_strtoul_l.constprop.0+0x78>
 8018f30:	4580      	cmp	r8, r0
 8018f32:	d31b      	bcc.n	8018f6c <_strtoul_l.constprop.0+0xa4>
 8018f34:	d101      	bne.n	8018f3a <_strtoul_l.constprop.0+0x72>
 8018f36:	45a1      	cmp	r9, r4
 8018f38:	db18      	blt.n	8018f6c <_strtoul_l.constprop.0+0xa4>
 8018f3a:	fb00 4003 	mla	r0, r0, r3, r4
 8018f3e:	2701      	movs	r7, #1
 8018f40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018f44:	e7e9      	b.n	8018f1a <_strtoul_l.constprop.0+0x52>
 8018f46:	2c2b      	cmp	r4, #43	; 0x2b
 8018f48:	bf04      	itt	eq
 8018f4a:	782c      	ldrbeq	r4, [r5, #0]
 8018f4c:	1c85      	addeq	r5, r0, #2
 8018f4e:	e7cc      	b.n	8018eea <_strtoul_l.constprop.0+0x22>
 8018f50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018f54:	f1bc 0f19 	cmp.w	ip, #25
 8018f58:	d801      	bhi.n	8018f5e <_strtoul_l.constprop.0+0x96>
 8018f5a:	3c37      	subs	r4, #55	; 0x37
 8018f5c:	e7e3      	b.n	8018f26 <_strtoul_l.constprop.0+0x5e>
 8018f5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018f62:	f1bc 0f19 	cmp.w	ip, #25
 8018f66:	d804      	bhi.n	8018f72 <_strtoul_l.constprop.0+0xaa>
 8018f68:	3c57      	subs	r4, #87	; 0x57
 8018f6a:	e7dc      	b.n	8018f26 <_strtoul_l.constprop.0+0x5e>
 8018f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8018f70:	e7e6      	b.n	8018f40 <_strtoul_l.constprop.0+0x78>
 8018f72:	1c7b      	adds	r3, r7, #1
 8018f74:	d106      	bne.n	8018f84 <_strtoul_l.constprop.0+0xbc>
 8018f76:	2322      	movs	r3, #34	; 0x22
 8018f78:	f8ce 3000 	str.w	r3, [lr]
 8018f7c:	4638      	mov	r0, r7
 8018f7e:	b932      	cbnz	r2, 8018f8e <_strtoul_l.constprop.0+0xc6>
 8018f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f84:	b106      	cbz	r6, 8018f88 <_strtoul_l.constprop.0+0xc0>
 8018f86:	4240      	negs	r0, r0
 8018f88:	2a00      	cmp	r2, #0
 8018f8a:	d0f9      	beq.n	8018f80 <_strtoul_l.constprop.0+0xb8>
 8018f8c:	b107      	cbz	r7, 8018f90 <_strtoul_l.constprop.0+0xc8>
 8018f8e:	1e69      	subs	r1, r5, #1
 8018f90:	6011      	str	r1, [r2, #0]
 8018f92:	e7f5      	b.n	8018f80 <_strtoul_l.constprop.0+0xb8>
 8018f94:	2430      	movs	r4, #48	; 0x30
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d1b5      	bne.n	8018f06 <_strtoul_l.constprop.0+0x3e>
 8018f9a:	2308      	movs	r3, #8
 8018f9c:	e7b3      	b.n	8018f06 <_strtoul_l.constprop.0+0x3e>
 8018f9e:	2c30      	cmp	r4, #48	; 0x30
 8018fa0:	d0a9      	beq.n	8018ef6 <_strtoul_l.constprop.0+0x2e>
 8018fa2:	230a      	movs	r3, #10
 8018fa4:	e7af      	b.n	8018f06 <_strtoul_l.constprop.0+0x3e>
 8018fa6:	bf00      	nop
 8018fa8:	0801c2a9 	.word	0x0801c2a9

08018fac <_strtoul_r>:
 8018fac:	f7ff bf8c 	b.w	8018ec8 <_strtoul_l.constprop.0>

08018fb0 <__ascii_wctomb>:
 8018fb0:	b149      	cbz	r1, 8018fc6 <__ascii_wctomb+0x16>
 8018fb2:	2aff      	cmp	r2, #255	; 0xff
 8018fb4:	bf85      	ittet	hi
 8018fb6:	238a      	movhi	r3, #138	; 0x8a
 8018fb8:	6003      	strhi	r3, [r0, #0]
 8018fba:	700a      	strbls	r2, [r1, #0]
 8018fbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8018fc0:	bf98      	it	ls
 8018fc2:	2001      	movls	r0, #1
 8018fc4:	4770      	bx	lr
 8018fc6:	4608      	mov	r0, r1
 8018fc8:	4770      	bx	lr
	...

08018fcc <fiprintf>:
 8018fcc:	b40e      	push	{r1, r2, r3}
 8018fce:	b503      	push	{r0, r1, lr}
 8018fd0:	4601      	mov	r1, r0
 8018fd2:	ab03      	add	r3, sp, #12
 8018fd4:	4805      	ldr	r0, [pc, #20]	; (8018fec <fiprintf+0x20>)
 8018fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fda:	6800      	ldr	r0, [r0, #0]
 8018fdc:	9301      	str	r3, [sp, #4]
 8018fde:	f000 f83f 	bl	8019060 <_vfiprintf_r>
 8018fe2:	b002      	add	sp, #8
 8018fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fe8:	b003      	add	sp, #12
 8018fea:	4770      	bx	lr
 8018fec:	20000070 	.word	0x20000070

08018ff0 <abort>:
 8018ff0:	b508      	push	{r3, lr}
 8018ff2:	2006      	movs	r0, #6
 8018ff4:	f000 fa0c 	bl	8019410 <raise>
 8018ff8:	2001      	movs	r0, #1
 8018ffa:	f7ed ffb9 	bl	8006f70 <_exit>

08018ffe <_malloc_usable_size_r>:
 8018ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019002:	1f18      	subs	r0, r3, #4
 8019004:	2b00      	cmp	r3, #0
 8019006:	bfbc      	itt	lt
 8019008:	580b      	ldrlt	r3, [r1, r0]
 801900a:	18c0      	addlt	r0, r0, r3
 801900c:	4770      	bx	lr

0801900e <__sfputc_r>:
 801900e:	6893      	ldr	r3, [r2, #8]
 8019010:	3b01      	subs	r3, #1
 8019012:	2b00      	cmp	r3, #0
 8019014:	b410      	push	{r4}
 8019016:	6093      	str	r3, [r2, #8]
 8019018:	da08      	bge.n	801902c <__sfputc_r+0x1e>
 801901a:	6994      	ldr	r4, [r2, #24]
 801901c:	42a3      	cmp	r3, r4
 801901e:	db01      	blt.n	8019024 <__sfputc_r+0x16>
 8019020:	290a      	cmp	r1, #10
 8019022:	d103      	bne.n	801902c <__sfputc_r+0x1e>
 8019024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019028:	f000 b934 	b.w	8019294 <__swbuf_r>
 801902c:	6813      	ldr	r3, [r2, #0]
 801902e:	1c58      	adds	r0, r3, #1
 8019030:	6010      	str	r0, [r2, #0]
 8019032:	7019      	strb	r1, [r3, #0]
 8019034:	4608      	mov	r0, r1
 8019036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801903a:	4770      	bx	lr

0801903c <__sfputs_r>:
 801903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801903e:	4606      	mov	r6, r0
 8019040:	460f      	mov	r7, r1
 8019042:	4614      	mov	r4, r2
 8019044:	18d5      	adds	r5, r2, r3
 8019046:	42ac      	cmp	r4, r5
 8019048:	d101      	bne.n	801904e <__sfputs_r+0x12>
 801904a:	2000      	movs	r0, #0
 801904c:	e007      	b.n	801905e <__sfputs_r+0x22>
 801904e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019052:	463a      	mov	r2, r7
 8019054:	4630      	mov	r0, r6
 8019056:	f7ff ffda 	bl	801900e <__sfputc_r>
 801905a:	1c43      	adds	r3, r0, #1
 801905c:	d1f3      	bne.n	8019046 <__sfputs_r+0xa>
 801905e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019060 <_vfiprintf_r>:
 8019060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019064:	460d      	mov	r5, r1
 8019066:	b09d      	sub	sp, #116	; 0x74
 8019068:	4614      	mov	r4, r2
 801906a:	4698      	mov	r8, r3
 801906c:	4606      	mov	r6, r0
 801906e:	b118      	cbz	r0, 8019078 <_vfiprintf_r+0x18>
 8019070:	6a03      	ldr	r3, [r0, #32]
 8019072:	b90b      	cbnz	r3, 8019078 <_vfiprintf_r+0x18>
 8019074:	f7fc f90c 	bl	8015290 <__sinit>
 8019078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801907a:	07d9      	lsls	r1, r3, #31
 801907c:	d405      	bmi.n	801908a <_vfiprintf_r+0x2a>
 801907e:	89ab      	ldrh	r3, [r5, #12]
 8019080:	059a      	lsls	r2, r3, #22
 8019082:	d402      	bmi.n	801908a <_vfiprintf_r+0x2a>
 8019084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019086:	f7fc fab0 	bl	80155ea <__retarget_lock_acquire_recursive>
 801908a:	89ab      	ldrh	r3, [r5, #12]
 801908c:	071b      	lsls	r3, r3, #28
 801908e:	d501      	bpl.n	8019094 <_vfiprintf_r+0x34>
 8019090:	692b      	ldr	r3, [r5, #16]
 8019092:	b99b      	cbnz	r3, 80190bc <_vfiprintf_r+0x5c>
 8019094:	4629      	mov	r1, r5
 8019096:	4630      	mov	r0, r6
 8019098:	f000 f93a 	bl	8019310 <__swsetup_r>
 801909c:	b170      	cbz	r0, 80190bc <_vfiprintf_r+0x5c>
 801909e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190a0:	07dc      	lsls	r4, r3, #31
 80190a2:	d504      	bpl.n	80190ae <_vfiprintf_r+0x4e>
 80190a4:	f04f 30ff 	mov.w	r0, #4294967295
 80190a8:	b01d      	add	sp, #116	; 0x74
 80190aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ae:	89ab      	ldrh	r3, [r5, #12]
 80190b0:	0598      	lsls	r0, r3, #22
 80190b2:	d4f7      	bmi.n	80190a4 <_vfiprintf_r+0x44>
 80190b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190b6:	f7fc fa99 	bl	80155ec <__retarget_lock_release_recursive>
 80190ba:	e7f3      	b.n	80190a4 <_vfiprintf_r+0x44>
 80190bc:	2300      	movs	r3, #0
 80190be:	9309      	str	r3, [sp, #36]	; 0x24
 80190c0:	2320      	movs	r3, #32
 80190c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80190ca:	2330      	movs	r3, #48	; 0x30
 80190cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019280 <_vfiprintf_r+0x220>
 80190d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190d4:	f04f 0901 	mov.w	r9, #1
 80190d8:	4623      	mov	r3, r4
 80190da:	469a      	mov	sl, r3
 80190dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190e0:	b10a      	cbz	r2, 80190e6 <_vfiprintf_r+0x86>
 80190e2:	2a25      	cmp	r2, #37	; 0x25
 80190e4:	d1f9      	bne.n	80190da <_vfiprintf_r+0x7a>
 80190e6:	ebba 0b04 	subs.w	fp, sl, r4
 80190ea:	d00b      	beq.n	8019104 <_vfiprintf_r+0xa4>
 80190ec:	465b      	mov	r3, fp
 80190ee:	4622      	mov	r2, r4
 80190f0:	4629      	mov	r1, r5
 80190f2:	4630      	mov	r0, r6
 80190f4:	f7ff ffa2 	bl	801903c <__sfputs_r>
 80190f8:	3001      	adds	r0, #1
 80190fa:	f000 80a9 	beq.w	8019250 <_vfiprintf_r+0x1f0>
 80190fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019100:	445a      	add	r2, fp
 8019102:	9209      	str	r2, [sp, #36]	; 0x24
 8019104:	f89a 3000 	ldrb.w	r3, [sl]
 8019108:	2b00      	cmp	r3, #0
 801910a:	f000 80a1 	beq.w	8019250 <_vfiprintf_r+0x1f0>
 801910e:	2300      	movs	r3, #0
 8019110:	f04f 32ff 	mov.w	r2, #4294967295
 8019114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019118:	f10a 0a01 	add.w	sl, sl, #1
 801911c:	9304      	str	r3, [sp, #16]
 801911e:	9307      	str	r3, [sp, #28]
 8019120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019124:	931a      	str	r3, [sp, #104]	; 0x68
 8019126:	4654      	mov	r4, sl
 8019128:	2205      	movs	r2, #5
 801912a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801912e:	4854      	ldr	r0, [pc, #336]	; (8019280 <_vfiprintf_r+0x220>)
 8019130:	f7e7 f876 	bl	8000220 <memchr>
 8019134:	9a04      	ldr	r2, [sp, #16]
 8019136:	b9d8      	cbnz	r0, 8019170 <_vfiprintf_r+0x110>
 8019138:	06d1      	lsls	r1, r2, #27
 801913a:	bf44      	itt	mi
 801913c:	2320      	movmi	r3, #32
 801913e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019142:	0713      	lsls	r3, r2, #28
 8019144:	bf44      	itt	mi
 8019146:	232b      	movmi	r3, #43	; 0x2b
 8019148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801914c:	f89a 3000 	ldrb.w	r3, [sl]
 8019150:	2b2a      	cmp	r3, #42	; 0x2a
 8019152:	d015      	beq.n	8019180 <_vfiprintf_r+0x120>
 8019154:	9a07      	ldr	r2, [sp, #28]
 8019156:	4654      	mov	r4, sl
 8019158:	2000      	movs	r0, #0
 801915a:	f04f 0c0a 	mov.w	ip, #10
 801915e:	4621      	mov	r1, r4
 8019160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019164:	3b30      	subs	r3, #48	; 0x30
 8019166:	2b09      	cmp	r3, #9
 8019168:	d94d      	bls.n	8019206 <_vfiprintf_r+0x1a6>
 801916a:	b1b0      	cbz	r0, 801919a <_vfiprintf_r+0x13a>
 801916c:	9207      	str	r2, [sp, #28]
 801916e:	e014      	b.n	801919a <_vfiprintf_r+0x13a>
 8019170:	eba0 0308 	sub.w	r3, r0, r8
 8019174:	fa09 f303 	lsl.w	r3, r9, r3
 8019178:	4313      	orrs	r3, r2
 801917a:	9304      	str	r3, [sp, #16]
 801917c:	46a2      	mov	sl, r4
 801917e:	e7d2      	b.n	8019126 <_vfiprintf_r+0xc6>
 8019180:	9b03      	ldr	r3, [sp, #12]
 8019182:	1d19      	adds	r1, r3, #4
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	9103      	str	r1, [sp, #12]
 8019188:	2b00      	cmp	r3, #0
 801918a:	bfbb      	ittet	lt
 801918c:	425b      	neglt	r3, r3
 801918e:	f042 0202 	orrlt.w	r2, r2, #2
 8019192:	9307      	strge	r3, [sp, #28]
 8019194:	9307      	strlt	r3, [sp, #28]
 8019196:	bfb8      	it	lt
 8019198:	9204      	strlt	r2, [sp, #16]
 801919a:	7823      	ldrb	r3, [r4, #0]
 801919c:	2b2e      	cmp	r3, #46	; 0x2e
 801919e:	d10c      	bne.n	80191ba <_vfiprintf_r+0x15a>
 80191a0:	7863      	ldrb	r3, [r4, #1]
 80191a2:	2b2a      	cmp	r3, #42	; 0x2a
 80191a4:	d134      	bne.n	8019210 <_vfiprintf_r+0x1b0>
 80191a6:	9b03      	ldr	r3, [sp, #12]
 80191a8:	1d1a      	adds	r2, r3, #4
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	9203      	str	r2, [sp, #12]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	bfb8      	it	lt
 80191b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80191b6:	3402      	adds	r4, #2
 80191b8:	9305      	str	r3, [sp, #20]
 80191ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019290 <_vfiprintf_r+0x230>
 80191be:	7821      	ldrb	r1, [r4, #0]
 80191c0:	2203      	movs	r2, #3
 80191c2:	4650      	mov	r0, sl
 80191c4:	f7e7 f82c 	bl	8000220 <memchr>
 80191c8:	b138      	cbz	r0, 80191da <_vfiprintf_r+0x17a>
 80191ca:	9b04      	ldr	r3, [sp, #16]
 80191cc:	eba0 000a 	sub.w	r0, r0, sl
 80191d0:	2240      	movs	r2, #64	; 0x40
 80191d2:	4082      	lsls	r2, r0
 80191d4:	4313      	orrs	r3, r2
 80191d6:	3401      	adds	r4, #1
 80191d8:	9304      	str	r3, [sp, #16]
 80191da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191de:	4829      	ldr	r0, [pc, #164]	; (8019284 <_vfiprintf_r+0x224>)
 80191e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191e4:	2206      	movs	r2, #6
 80191e6:	f7e7 f81b 	bl	8000220 <memchr>
 80191ea:	2800      	cmp	r0, #0
 80191ec:	d03f      	beq.n	801926e <_vfiprintf_r+0x20e>
 80191ee:	4b26      	ldr	r3, [pc, #152]	; (8019288 <_vfiprintf_r+0x228>)
 80191f0:	bb1b      	cbnz	r3, 801923a <_vfiprintf_r+0x1da>
 80191f2:	9b03      	ldr	r3, [sp, #12]
 80191f4:	3307      	adds	r3, #7
 80191f6:	f023 0307 	bic.w	r3, r3, #7
 80191fa:	3308      	adds	r3, #8
 80191fc:	9303      	str	r3, [sp, #12]
 80191fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019200:	443b      	add	r3, r7
 8019202:	9309      	str	r3, [sp, #36]	; 0x24
 8019204:	e768      	b.n	80190d8 <_vfiprintf_r+0x78>
 8019206:	fb0c 3202 	mla	r2, ip, r2, r3
 801920a:	460c      	mov	r4, r1
 801920c:	2001      	movs	r0, #1
 801920e:	e7a6      	b.n	801915e <_vfiprintf_r+0xfe>
 8019210:	2300      	movs	r3, #0
 8019212:	3401      	adds	r4, #1
 8019214:	9305      	str	r3, [sp, #20]
 8019216:	4619      	mov	r1, r3
 8019218:	f04f 0c0a 	mov.w	ip, #10
 801921c:	4620      	mov	r0, r4
 801921e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019222:	3a30      	subs	r2, #48	; 0x30
 8019224:	2a09      	cmp	r2, #9
 8019226:	d903      	bls.n	8019230 <_vfiprintf_r+0x1d0>
 8019228:	2b00      	cmp	r3, #0
 801922a:	d0c6      	beq.n	80191ba <_vfiprintf_r+0x15a>
 801922c:	9105      	str	r1, [sp, #20]
 801922e:	e7c4      	b.n	80191ba <_vfiprintf_r+0x15a>
 8019230:	fb0c 2101 	mla	r1, ip, r1, r2
 8019234:	4604      	mov	r4, r0
 8019236:	2301      	movs	r3, #1
 8019238:	e7f0      	b.n	801921c <_vfiprintf_r+0x1bc>
 801923a:	ab03      	add	r3, sp, #12
 801923c:	9300      	str	r3, [sp, #0]
 801923e:	462a      	mov	r2, r5
 8019240:	4b12      	ldr	r3, [pc, #72]	; (801928c <_vfiprintf_r+0x22c>)
 8019242:	a904      	add	r1, sp, #16
 8019244:	4630      	mov	r0, r6
 8019246:	f7fb f9c1 	bl	80145cc <_printf_float>
 801924a:	4607      	mov	r7, r0
 801924c:	1c78      	adds	r0, r7, #1
 801924e:	d1d6      	bne.n	80191fe <_vfiprintf_r+0x19e>
 8019250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019252:	07d9      	lsls	r1, r3, #31
 8019254:	d405      	bmi.n	8019262 <_vfiprintf_r+0x202>
 8019256:	89ab      	ldrh	r3, [r5, #12]
 8019258:	059a      	lsls	r2, r3, #22
 801925a:	d402      	bmi.n	8019262 <_vfiprintf_r+0x202>
 801925c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801925e:	f7fc f9c5 	bl	80155ec <__retarget_lock_release_recursive>
 8019262:	89ab      	ldrh	r3, [r5, #12]
 8019264:	065b      	lsls	r3, r3, #25
 8019266:	f53f af1d 	bmi.w	80190a4 <_vfiprintf_r+0x44>
 801926a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801926c:	e71c      	b.n	80190a8 <_vfiprintf_r+0x48>
 801926e:	ab03      	add	r3, sp, #12
 8019270:	9300      	str	r3, [sp, #0]
 8019272:	462a      	mov	r2, r5
 8019274:	4b05      	ldr	r3, [pc, #20]	; (801928c <_vfiprintf_r+0x22c>)
 8019276:	a904      	add	r1, sp, #16
 8019278:	4630      	mov	r0, r6
 801927a:	f7fb fc4b 	bl	8014b14 <_printf_i>
 801927e:	e7e4      	b.n	801924a <_vfiprintf_r+0x1ea>
 8019280:	0801c3a9 	.word	0x0801c3a9
 8019284:	0801c3b3 	.word	0x0801c3b3
 8019288:	080145cd 	.word	0x080145cd
 801928c:	0801903d 	.word	0x0801903d
 8019290:	0801c3af 	.word	0x0801c3af

08019294 <__swbuf_r>:
 8019294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019296:	460e      	mov	r6, r1
 8019298:	4614      	mov	r4, r2
 801929a:	4605      	mov	r5, r0
 801929c:	b118      	cbz	r0, 80192a6 <__swbuf_r+0x12>
 801929e:	6a03      	ldr	r3, [r0, #32]
 80192a0:	b90b      	cbnz	r3, 80192a6 <__swbuf_r+0x12>
 80192a2:	f7fb fff5 	bl	8015290 <__sinit>
 80192a6:	69a3      	ldr	r3, [r4, #24]
 80192a8:	60a3      	str	r3, [r4, #8]
 80192aa:	89a3      	ldrh	r3, [r4, #12]
 80192ac:	071a      	lsls	r2, r3, #28
 80192ae:	d525      	bpl.n	80192fc <__swbuf_r+0x68>
 80192b0:	6923      	ldr	r3, [r4, #16]
 80192b2:	b31b      	cbz	r3, 80192fc <__swbuf_r+0x68>
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	6922      	ldr	r2, [r4, #16]
 80192b8:	1a98      	subs	r0, r3, r2
 80192ba:	6963      	ldr	r3, [r4, #20]
 80192bc:	b2f6      	uxtb	r6, r6
 80192be:	4283      	cmp	r3, r0
 80192c0:	4637      	mov	r7, r6
 80192c2:	dc04      	bgt.n	80192ce <__swbuf_r+0x3a>
 80192c4:	4621      	mov	r1, r4
 80192c6:	4628      	mov	r0, r5
 80192c8:	f7ff f962 	bl	8018590 <_fflush_r>
 80192cc:	b9e0      	cbnz	r0, 8019308 <__swbuf_r+0x74>
 80192ce:	68a3      	ldr	r3, [r4, #8]
 80192d0:	3b01      	subs	r3, #1
 80192d2:	60a3      	str	r3, [r4, #8]
 80192d4:	6823      	ldr	r3, [r4, #0]
 80192d6:	1c5a      	adds	r2, r3, #1
 80192d8:	6022      	str	r2, [r4, #0]
 80192da:	701e      	strb	r6, [r3, #0]
 80192dc:	6962      	ldr	r2, [r4, #20]
 80192de:	1c43      	adds	r3, r0, #1
 80192e0:	429a      	cmp	r2, r3
 80192e2:	d004      	beq.n	80192ee <__swbuf_r+0x5a>
 80192e4:	89a3      	ldrh	r3, [r4, #12]
 80192e6:	07db      	lsls	r3, r3, #31
 80192e8:	d506      	bpl.n	80192f8 <__swbuf_r+0x64>
 80192ea:	2e0a      	cmp	r6, #10
 80192ec:	d104      	bne.n	80192f8 <__swbuf_r+0x64>
 80192ee:	4621      	mov	r1, r4
 80192f0:	4628      	mov	r0, r5
 80192f2:	f7ff f94d 	bl	8018590 <_fflush_r>
 80192f6:	b938      	cbnz	r0, 8019308 <__swbuf_r+0x74>
 80192f8:	4638      	mov	r0, r7
 80192fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192fc:	4621      	mov	r1, r4
 80192fe:	4628      	mov	r0, r5
 8019300:	f000 f806 	bl	8019310 <__swsetup_r>
 8019304:	2800      	cmp	r0, #0
 8019306:	d0d5      	beq.n	80192b4 <__swbuf_r+0x20>
 8019308:	f04f 37ff 	mov.w	r7, #4294967295
 801930c:	e7f4      	b.n	80192f8 <__swbuf_r+0x64>
	...

08019310 <__swsetup_r>:
 8019310:	b538      	push	{r3, r4, r5, lr}
 8019312:	4b2a      	ldr	r3, [pc, #168]	; (80193bc <__swsetup_r+0xac>)
 8019314:	4605      	mov	r5, r0
 8019316:	6818      	ldr	r0, [r3, #0]
 8019318:	460c      	mov	r4, r1
 801931a:	b118      	cbz	r0, 8019324 <__swsetup_r+0x14>
 801931c:	6a03      	ldr	r3, [r0, #32]
 801931e:	b90b      	cbnz	r3, 8019324 <__swsetup_r+0x14>
 8019320:	f7fb ffb6 	bl	8015290 <__sinit>
 8019324:	89a3      	ldrh	r3, [r4, #12]
 8019326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801932a:	0718      	lsls	r0, r3, #28
 801932c:	d422      	bmi.n	8019374 <__swsetup_r+0x64>
 801932e:	06d9      	lsls	r1, r3, #27
 8019330:	d407      	bmi.n	8019342 <__swsetup_r+0x32>
 8019332:	2309      	movs	r3, #9
 8019334:	602b      	str	r3, [r5, #0]
 8019336:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801933a:	81a3      	strh	r3, [r4, #12]
 801933c:	f04f 30ff 	mov.w	r0, #4294967295
 8019340:	e034      	b.n	80193ac <__swsetup_r+0x9c>
 8019342:	0758      	lsls	r0, r3, #29
 8019344:	d512      	bpl.n	801936c <__swsetup_r+0x5c>
 8019346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019348:	b141      	cbz	r1, 801935c <__swsetup_r+0x4c>
 801934a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801934e:	4299      	cmp	r1, r3
 8019350:	d002      	beq.n	8019358 <__swsetup_r+0x48>
 8019352:	4628      	mov	r0, r5
 8019354:	f7fc ffda 	bl	801630c <_free_r>
 8019358:	2300      	movs	r3, #0
 801935a:	6363      	str	r3, [r4, #52]	; 0x34
 801935c:	89a3      	ldrh	r3, [r4, #12]
 801935e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019362:	81a3      	strh	r3, [r4, #12]
 8019364:	2300      	movs	r3, #0
 8019366:	6063      	str	r3, [r4, #4]
 8019368:	6923      	ldr	r3, [r4, #16]
 801936a:	6023      	str	r3, [r4, #0]
 801936c:	89a3      	ldrh	r3, [r4, #12]
 801936e:	f043 0308 	orr.w	r3, r3, #8
 8019372:	81a3      	strh	r3, [r4, #12]
 8019374:	6923      	ldr	r3, [r4, #16]
 8019376:	b94b      	cbnz	r3, 801938c <__swsetup_r+0x7c>
 8019378:	89a3      	ldrh	r3, [r4, #12]
 801937a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801937e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019382:	d003      	beq.n	801938c <__swsetup_r+0x7c>
 8019384:	4621      	mov	r1, r4
 8019386:	4628      	mov	r0, r5
 8019388:	f000 f884 	bl	8019494 <__smakebuf_r>
 801938c:	89a0      	ldrh	r0, [r4, #12]
 801938e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019392:	f010 0301 	ands.w	r3, r0, #1
 8019396:	d00a      	beq.n	80193ae <__swsetup_r+0x9e>
 8019398:	2300      	movs	r3, #0
 801939a:	60a3      	str	r3, [r4, #8]
 801939c:	6963      	ldr	r3, [r4, #20]
 801939e:	425b      	negs	r3, r3
 80193a0:	61a3      	str	r3, [r4, #24]
 80193a2:	6923      	ldr	r3, [r4, #16]
 80193a4:	b943      	cbnz	r3, 80193b8 <__swsetup_r+0xa8>
 80193a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80193aa:	d1c4      	bne.n	8019336 <__swsetup_r+0x26>
 80193ac:	bd38      	pop	{r3, r4, r5, pc}
 80193ae:	0781      	lsls	r1, r0, #30
 80193b0:	bf58      	it	pl
 80193b2:	6963      	ldrpl	r3, [r4, #20]
 80193b4:	60a3      	str	r3, [r4, #8]
 80193b6:	e7f4      	b.n	80193a2 <__swsetup_r+0x92>
 80193b8:	2000      	movs	r0, #0
 80193ba:	e7f7      	b.n	80193ac <__swsetup_r+0x9c>
 80193bc:	20000070 	.word	0x20000070

080193c0 <_raise_r>:
 80193c0:	291f      	cmp	r1, #31
 80193c2:	b538      	push	{r3, r4, r5, lr}
 80193c4:	4604      	mov	r4, r0
 80193c6:	460d      	mov	r5, r1
 80193c8:	d904      	bls.n	80193d4 <_raise_r+0x14>
 80193ca:	2316      	movs	r3, #22
 80193cc:	6003      	str	r3, [r0, #0]
 80193ce:	f04f 30ff 	mov.w	r0, #4294967295
 80193d2:	bd38      	pop	{r3, r4, r5, pc}
 80193d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80193d6:	b112      	cbz	r2, 80193de <_raise_r+0x1e>
 80193d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80193dc:	b94b      	cbnz	r3, 80193f2 <_raise_r+0x32>
 80193de:	4620      	mov	r0, r4
 80193e0:	f000 f830 	bl	8019444 <_getpid_r>
 80193e4:	462a      	mov	r2, r5
 80193e6:	4601      	mov	r1, r0
 80193e8:	4620      	mov	r0, r4
 80193ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193ee:	f000 b817 	b.w	8019420 <_kill_r>
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d00a      	beq.n	801940c <_raise_r+0x4c>
 80193f6:	1c59      	adds	r1, r3, #1
 80193f8:	d103      	bne.n	8019402 <_raise_r+0x42>
 80193fa:	2316      	movs	r3, #22
 80193fc:	6003      	str	r3, [r0, #0]
 80193fe:	2001      	movs	r0, #1
 8019400:	e7e7      	b.n	80193d2 <_raise_r+0x12>
 8019402:	2400      	movs	r4, #0
 8019404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019408:	4628      	mov	r0, r5
 801940a:	4798      	blx	r3
 801940c:	2000      	movs	r0, #0
 801940e:	e7e0      	b.n	80193d2 <_raise_r+0x12>

08019410 <raise>:
 8019410:	4b02      	ldr	r3, [pc, #8]	; (801941c <raise+0xc>)
 8019412:	4601      	mov	r1, r0
 8019414:	6818      	ldr	r0, [r3, #0]
 8019416:	f7ff bfd3 	b.w	80193c0 <_raise_r>
 801941a:	bf00      	nop
 801941c:	20000070 	.word	0x20000070

08019420 <_kill_r>:
 8019420:	b538      	push	{r3, r4, r5, lr}
 8019422:	4d07      	ldr	r5, [pc, #28]	; (8019440 <_kill_r+0x20>)
 8019424:	2300      	movs	r3, #0
 8019426:	4604      	mov	r4, r0
 8019428:	4608      	mov	r0, r1
 801942a:	4611      	mov	r1, r2
 801942c:	602b      	str	r3, [r5, #0]
 801942e:	f7ed fd8f 	bl	8006f50 <_kill>
 8019432:	1c43      	adds	r3, r0, #1
 8019434:	d102      	bne.n	801943c <_kill_r+0x1c>
 8019436:	682b      	ldr	r3, [r5, #0]
 8019438:	b103      	cbz	r3, 801943c <_kill_r+0x1c>
 801943a:	6023      	str	r3, [r4, #0]
 801943c:	bd38      	pop	{r3, r4, r5, pc}
 801943e:	bf00      	nop
 8019440:	20009090 	.word	0x20009090

08019444 <_getpid_r>:
 8019444:	f7ed bd7c 	b.w	8006f40 <_getpid>

08019448 <__swhatbuf_r>:
 8019448:	b570      	push	{r4, r5, r6, lr}
 801944a:	460c      	mov	r4, r1
 801944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019450:	2900      	cmp	r1, #0
 8019452:	b096      	sub	sp, #88	; 0x58
 8019454:	4615      	mov	r5, r2
 8019456:	461e      	mov	r6, r3
 8019458:	da0d      	bge.n	8019476 <__swhatbuf_r+0x2e>
 801945a:	89a3      	ldrh	r3, [r4, #12]
 801945c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019460:	f04f 0100 	mov.w	r1, #0
 8019464:	bf0c      	ite	eq
 8019466:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801946a:	2340      	movne	r3, #64	; 0x40
 801946c:	2000      	movs	r0, #0
 801946e:	6031      	str	r1, [r6, #0]
 8019470:	602b      	str	r3, [r5, #0]
 8019472:	b016      	add	sp, #88	; 0x58
 8019474:	bd70      	pop	{r4, r5, r6, pc}
 8019476:	466a      	mov	r2, sp
 8019478:	f000 f848 	bl	801950c <_fstat_r>
 801947c:	2800      	cmp	r0, #0
 801947e:	dbec      	blt.n	801945a <__swhatbuf_r+0x12>
 8019480:	9901      	ldr	r1, [sp, #4]
 8019482:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019486:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801948a:	4259      	negs	r1, r3
 801948c:	4159      	adcs	r1, r3
 801948e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019492:	e7eb      	b.n	801946c <__swhatbuf_r+0x24>

08019494 <__smakebuf_r>:
 8019494:	898b      	ldrh	r3, [r1, #12]
 8019496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019498:	079d      	lsls	r5, r3, #30
 801949a:	4606      	mov	r6, r0
 801949c:	460c      	mov	r4, r1
 801949e:	d507      	bpl.n	80194b0 <__smakebuf_r+0x1c>
 80194a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80194a4:	6023      	str	r3, [r4, #0]
 80194a6:	6123      	str	r3, [r4, #16]
 80194a8:	2301      	movs	r3, #1
 80194aa:	6163      	str	r3, [r4, #20]
 80194ac:	b002      	add	sp, #8
 80194ae:	bd70      	pop	{r4, r5, r6, pc}
 80194b0:	ab01      	add	r3, sp, #4
 80194b2:	466a      	mov	r2, sp
 80194b4:	f7ff ffc8 	bl	8019448 <__swhatbuf_r>
 80194b8:	9900      	ldr	r1, [sp, #0]
 80194ba:	4605      	mov	r5, r0
 80194bc:	4630      	mov	r0, r6
 80194be:	f7fc ff99 	bl	80163f4 <_malloc_r>
 80194c2:	b948      	cbnz	r0, 80194d8 <__smakebuf_r+0x44>
 80194c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194c8:	059a      	lsls	r2, r3, #22
 80194ca:	d4ef      	bmi.n	80194ac <__smakebuf_r+0x18>
 80194cc:	f023 0303 	bic.w	r3, r3, #3
 80194d0:	f043 0302 	orr.w	r3, r3, #2
 80194d4:	81a3      	strh	r3, [r4, #12]
 80194d6:	e7e3      	b.n	80194a0 <__smakebuf_r+0xc>
 80194d8:	89a3      	ldrh	r3, [r4, #12]
 80194da:	6020      	str	r0, [r4, #0]
 80194dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194e0:	81a3      	strh	r3, [r4, #12]
 80194e2:	9b00      	ldr	r3, [sp, #0]
 80194e4:	6163      	str	r3, [r4, #20]
 80194e6:	9b01      	ldr	r3, [sp, #4]
 80194e8:	6120      	str	r0, [r4, #16]
 80194ea:	b15b      	cbz	r3, 8019504 <__smakebuf_r+0x70>
 80194ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80194f0:	4630      	mov	r0, r6
 80194f2:	f000 f81d 	bl	8019530 <_isatty_r>
 80194f6:	b128      	cbz	r0, 8019504 <__smakebuf_r+0x70>
 80194f8:	89a3      	ldrh	r3, [r4, #12]
 80194fa:	f023 0303 	bic.w	r3, r3, #3
 80194fe:	f043 0301 	orr.w	r3, r3, #1
 8019502:	81a3      	strh	r3, [r4, #12]
 8019504:	89a3      	ldrh	r3, [r4, #12]
 8019506:	431d      	orrs	r5, r3
 8019508:	81a5      	strh	r5, [r4, #12]
 801950a:	e7cf      	b.n	80194ac <__smakebuf_r+0x18>

0801950c <_fstat_r>:
 801950c:	b538      	push	{r3, r4, r5, lr}
 801950e:	4d07      	ldr	r5, [pc, #28]	; (801952c <_fstat_r+0x20>)
 8019510:	2300      	movs	r3, #0
 8019512:	4604      	mov	r4, r0
 8019514:	4608      	mov	r0, r1
 8019516:	4611      	mov	r1, r2
 8019518:	602b      	str	r3, [r5, #0]
 801951a:	f7ed fd78 	bl	800700e <_fstat>
 801951e:	1c43      	adds	r3, r0, #1
 8019520:	d102      	bne.n	8019528 <_fstat_r+0x1c>
 8019522:	682b      	ldr	r3, [r5, #0]
 8019524:	b103      	cbz	r3, 8019528 <_fstat_r+0x1c>
 8019526:	6023      	str	r3, [r4, #0]
 8019528:	bd38      	pop	{r3, r4, r5, pc}
 801952a:	bf00      	nop
 801952c:	20009090 	.word	0x20009090

08019530 <_isatty_r>:
 8019530:	b538      	push	{r3, r4, r5, lr}
 8019532:	4d06      	ldr	r5, [pc, #24]	; (801954c <_isatty_r+0x1c>)
 8019534:	2300      	movs	r3, #0
 8019536:	4604      	mov	r4, r0
 8019538:	4608      	mov	r0, r1
 801953a:	602b      	str	r3, [r5, #0]
 801953c:	f7ed fd77 	bl	800702e <_isatty>
 8019540:	1c43      	adds	r3, r0, #1
 8019542:	d102      	bne.n	801954a <_isatty_r+0x1a>
 8019544:	682b      	ldr	r3, [r5, #0]
 8019546:	b103      	cbz	r3, 801954a <_isatty_r+0x1a>
 8019548:	6023      	str	r3, [r4, #0]
 801954a:	bd38      	pop	{r3, r4, r5, pc}
 801954c:	20009090 	.word	0x20009090

08019550 <pow>:
 8019550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019552:	ed2d 8b02 	vpush	{d8}
 8019556:	eeb0 8a40 	vmov.f32	s16, s0
 801955a:	eef0 8a60 	vmov.f32	s17, s1
 801955e:	ec55 4b11 	vmov	r4, r5, d1
 8019562:	f000 fa2d 	bl	80199c0 <__ieee754_pow>
 8019566:	4622      	mov	r2, r4
 8019568:	462b      	mov	r3, r5
 801956a:	4620      	mov	r0, r4
 801956c:	4629      	mov	r1, r5
 801956e:	ec57 6b10 	vmov	r6, r7, d0
 8019572:	f7e7 fb03 	bl	8000b7c <__aeabi_dcmpun>
 8019576:	2800      	cmp	r0, #0
 8019578:	d13b      	bne.n	80195f2 <pow+0xa2>
 801957a:	ec51 0b18 	vmov	r0, r1, d8
 801957e:	2200      	movs	r2, #0
 8019580:	2300      	movs	r3, #0
 8019582:	f7e7 fac9 	bl	8000b18 <__aeabi_dcmpeq>
 8019586:	b1b8      	cbz	r0, 80195b8 <pow+0x68>
 8019588:	2200      	movs	r2, #0
 801958a:	2300      	movs	r3, #0
 801958c:	4620      	mov	r0, r4
 801958e:	4629      	mov	r1, r5
 8019590:	f7e7 fac2 	bl	8000b18 <__aeabi_dcmpeq>
 8019594:	2800      	cmp	r0, #0
 8019596:	d146      	bne.n	8019626 <pow+0xd6>
 8019598:	ec45 4b10 	vmov	d0, r4, r5
 801959c:	f000 f91a 	bl	80197d4 <finite>
 80195a0:	b338      	cbz	r0, 80195f2 <pow+0xa2>
 80195a2:	2200      	movs	r2, #0
 80195a4:	2300      	movs	r3, #0
 80195a6:	4620      	mov	r0, r4
 80195a8:	4629      	mov	r1, r5
 80195aa:	f7e7 fabf 	bl	8000b2c <__aeabi_dcmplt>
 80195ae:	b300      	cbz	r0, 80195f2 <pow+0xa2>
 80195b0:	f7fb fff0 	bl	8015594 <__errno>
 80195b4:	2322      	movs	r3, #34	; 0x22
 80195b6:	e01b      	b.n	80195f0 <pow+0xa0>
 80195b8:	ec47 6b10 	vmov	d0, r6, r7
 80195bc:	f000 f90a 	bl	80197d4 <finite>
 80195c0:	b9e0      	cbnz	r0, 80195fc <pow+0xac>
 80195c2:	eeb0 0a48 	vmov.f32	s0, s16
 80195c6:	eef0 0a68 	vmov.f32	s1, s17
 80195ca:	f000 f903 	bl	80197d4 <finite>
 80195ce:	b1a8      	cbz	r0, 80195fc <pow+0xac>
 80195d0:	ec45 4b10 	vmov	d0, r4, r5
 80195d4:	f000 f8fe 	bl	80197d4 <finite>
 80195d8:	b180      	cbz	r0, 80195fc <pow+0xac>
 80195da:	4632      	mov	r2, r6
 80195dc:	463b      	mov	r3, r7
 80195de:	4630      	mov	r0, r6
 80195e0:	4639      	mov	r1, r7
 80195e2:	f7e7 facb 	bl	8000b7c <__aeabi_dcmpun>
 80195e6:	2800      	cmp	r0, #0
 80195e8:	d0e2      	beq.n	80195b0 <pow+0x60>
 80195ea:	f7fb ffd3 	bl	8015594 <__errno>
 80195ee:	2321      	movs	r3, #33	; 0x21
 80195f0:	6003      	str	r3, [r0, #0]
 80195f2:	ecbd 8b02 	vpop	{d8}
 80195f6:	ec47 6b10 	vmov	d0, r6, r7
 80195fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195fc:	2200      	movs	r2, #0
 80195fe:	2300      	movs	r3, #0
 8019600:	4630      	mov	r0, r6
 8019602:	4639      	mov	r1, r7
 8019604:	f7e7 fa88 	bl	8000b18 <__aeabi_dcmpeq>
 8019608:	2800      	cmp	r0, #0
 801960a:	d0f2      	beq.n	80195f2 <pow+0xa2>
 801960c:	eeb0 0a48 	vmov.f32	s0, s16
 8019610:	eef0 0a68 	vmov.f32	s1, s17
 8019614:	f000 f8de 	bl	80197d4 <finite>
 8019618:	2800      	cmp	r0, #0
 801961a:	d0ea      	beq.n	80195f2 <pow+0xa2>
 801961c:	ec45 4b10 	vmov	d0, r4, r5
 8019620:	f000 f8d8 	bl	80197d4 <finite>
 8019624:	e7c3      	b.n	80195ae <pow+0x5e>
 8019626:	4f01      	ldr	r7, [pc, #4]	; (801962c <pow+0xdc>)
 8019628:	2600      	movs	r6, #0
 801962a:	e7e2      	b.n	80195f2 <pow+0xa2>
 801962c:	3ff00000 	.word	0x3ff00000

08019630 <asinf>:
 8019630:	b508      	push	{r3, lr}
 8019632:	ed2d 8b02 	vpush	{d8}
 8019636:	eeb0 8a40 	vmov.f32	s16, s0
 801963a:	f000 ff9b 	bl	801a574 <__ieee754_asinf>
 801963e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019646:	eef0 8a40 	vmov.f32	s17, s0
 801964a:	d615      	bvs.n	8019678 <asinf+0x48>
 801964c:	eeb0 0a48 	vmov.f32	s0, s16
 8019650:	f000 f873 	bl	801973a <fabsf>
 8019654:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019658:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801965c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019660:	dd0a      	ble.n	8019678 <asinf+0x48>
 8019662:	f7fb ff97 	bl	8015594 <__errno>
 8019666:	ecbd 8b02 	vpop	{d8}
 801966a:	2321      	movs	r3, #33	; 0x21
 801966c:	6003      	str	r3, [r0, #0]
 801966e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019672:	4804      	ldr	r0, [pc, #16]	; (8019684 <asinf+0x54>)
 8019674:	f7fb bfca 	b.w	801560c <nanf>
 8019678:	eeb0 0a68 	vmov.f32	s0, s17
 801967c:	ecbd 8b02 	vpop	{d8}
 8019680:	bd08      	pop	{r3, pc}
 8019682:	bf00      	nop
 8019684:	0801c418 	.word	0x0801c418

08019688 <atan2f>:
 8019688:	f001 b85a 	b.w	801a740 <__ieee754_atan2f>

0801968c <powf>:
 801968c:	b508      	push	{r3, lr}
 801968e:	ed2d 8b04 	vpush	{d8-d9}
 8019692:	eeb0 8a60 	vmov.f32	s16, s1
 8019696:	eeb0 9a40 	vmov.f32	s18, s0
 801969a:	f001 f8f1 	bl	801a880 <__ieee754_powf>
 801969e:	eeb4 8a48 	vcmp.f32	s16, s16
 80196a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196a6:	eef0 8a40 	vmov.f32	s17, s0
 80196aa:	d63e      	bvs.n	801972a <powf+0x9e>
 80196ac:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80196b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196b4:	d112      	bne.n	80196dc <powf+0x50>
 80196b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80196ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196be:	d039      	beq.n	8019734 <powf+0xa8>
 80196c0:	eeb0 0a48 	vmov.f32	s0, s16
 80196c4:	f000 f891 	bl	80197ea <finitef>
 80196c8:	b378      	cbz	r0, 801972a <powf+0x9e>
 80196ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80196ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196d2:	d52a      	bpl.n	801972a <powf+0x9e>
 80196d4:	f7fb ff5e 	bl	8015594 <__errno>
 80196d8:	2322      	movs	r3, #34	; 0x22
 80196da:	e014      	b.n	8019706 <powf+0x7a>
 80196dc:	f000 f885 	bl	80197ea <finitef>
 80196e0:	b998      	cbnz	r0, 801970a <powf+0x7e>
 80196e2:	eeb0 0a49 	vmov.f32	s0, s18
 80196e6:	f000 f880 	bl	80197ea <finitef>
 80196ea:	b170      	cbz	r0, 801970a <powf+0x7e>
 80196ec:	eeb0 0a48 	vmov.f32	s0, s16
 80196f0:	f000 f87b 	bl	80197ea <finitef>
 80196f4:	b148      	cbz	r0, 801970a <powf+0x7e>
 80196f6:	eef4 8a68 	vcmp.f32	s17, s17
 80196fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196fe:	d7e9      	bvc.n	80196d4 <powf+0x48>
 8019700:	f7fb ff48 	bl	8015594 <__errno>
 8019704:	2321      	movs	r3, #33	; 0x21
 8019706:	6003      	str	r3, [r0, #0]
 8019708:	e00f      	b.n	801972a <powf+0x9e>
 801970a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801970e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019712:	d10a      	bne.n	801972a <powf+0x9e>
 8019714:	eeb0 0a49 	vmov.f32	s0, s18
 8019718:	f000 f867 	bl	80197ea <finitef>
 801971c:	b128      	cbz	r0, 801972a <powf+0x9e>
 801971e:	eeb0 0a48 	vmov.f32	s0, s16
 8019722:	f000 f862 	bl	80197ea <finitef>
 8019726:	2800      	cmp	r0, #0
 8019728:	d1d4      	bne.n	80196d4 <powf+0x48>
 801972a:	eeb0 0a68 	vmov.f32	s0, s17
 801972e:	ecbd 8b04 	vpop	{d8-d9}
 8019732:	bd08      	pop	{r3, pc}
 8019734:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8019738:	e7f7      	b.n	801972a <powf+0x9e>

0801973a <fabsf>:
 801973a:	ee10 3a10 	vmov	r3, s0
 801973e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019742:	ee00 3a10 	vmov	s0, r3
 8019746:	4770      	bx	lr

08019748 <sinf>:
 8019748:	ee10 3a10 	vmov	r3, s0
 801974c:	b507      	push	{r0, r1, r2, lr}
 801974e:	4a1f      	ldr	r2, [pc, #124]	; (80197cc <sinf+0x84>)
 8019750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019754:	4293      	cmp	r3, r2
 8019756:	dc07      	bgt.n	8019768 <sinf+0x20>
 8019758:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80197d0 <sinf+0x88>
 801975c:	2000      	movs	r0, #0
 801975e:	b003      	add	sp, #12
 8019760:	f85d eb04 	ldr.w	lr, [sp], #4
 8019764:	f000 bebe 	b.w	801a4e4 <__kernel_sinf>
 8019768:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801976c:	db04      	blt.n	8019778 <sinf+0x30>
 801976e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019772:	b003      	add	sp, #12
 8019774:	f85d fb04 	ldr.w	pc, [sp], #4
 8019778:	4668      	mov	r0, sp
 801977a:	f001 fb4b 	bl	801ae14 <__ieee754_rem_pio2f>
 801977e:	f000 0003 	and.w	r0, r0, #3
 8019782:	2801      	cmp	r0, #1
 8019784:	d00a      	beq.n	801979c <sinf+0x54>
 8019786:	2802      	cmp	r0, #2
 8019788:	d00f      	beq.n	80197aa <sinf+0x62>
 801978a:	b9c0      	cbnz	r0, 80197be <sinf+0x76>
 801978c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019790:	ed9d 0a00 	vldr	s0, [sp]
 8019794:	2001      	movs	r0, #1
 8019796:	f000 fea5 	bl	801a4e4 <__kernel_sinf>
 801979a:	e7ea      	b.n	8019772 <sinf+0x2a>
 801979c:	eddd 0a01 	vldr	s1, [sp, #4]
 80197a0:	ed9d 0a00 	vldr	s0, [sp]
 80197a4:	f000 fe40 	bl	801a428 <__kernel_cosf>
 80197a8:	e7e3      	b.n	8019772 <sinf+0x2a>
 80197aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80197ae:	ed9d 0a00 	vldr	s0, [sp]
 80197b2:	2001      	movs	r0, #1
 80197b4:	f000 fe96 	bl	801a4e4 <__kernel_sinf>
 80197b8:	eeb1 0a40 	vneg.f32	s0, s0
 80197bc:	e7d9      	b.n	8019772 <sinf+0x2a>
 80197be:	eddd 0a01 	vldr	s1, [sp, #4]
 80197c2:	ed9d 0a00 	vldr	s0, [sp]
 80197c6:	f000 fe2f 	bl	801a428 <__kernel_cosf>
 80197ca:	e7f5      	b.n	80197b8 <sinf+0x70>
 80197cc:	3f490fd8 	.word	0x3f490fd8
 80197d0:	00000000 	.word	0x00000000

080197d4 <finite>:
 80197d4:	b082      	sub	sp, #8
 80197d6:	ed8d 0b00 	vstr	d0, [sp]
 80197da:	9801      	ldr	r0, [sp, #4]
 80197dc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80197e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80197e4:	0fc0      	lsrs	r0, r0, #31
 80197e6:	b002      	add	sp, #8
 80197e8:	4770      	bx	lr

080197ea <finitef>:
 80197ea:	b082      	sub	sp, #8
 80197ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 80197f0:	9801      	ldr	r0, [sp, #4]
 80197f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80197f6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80197fa:	bfac      	ite	ge
 80197fc:	2000      	movge	r0, #0
 80197fe:	2001      	movlt	r0, #1
 8019800:	b002      	add	sp, #8
 8019802:	4770      	bx	lr

08019804 <__ieee754_sqrt>:
 8019804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019808:	ec55 4b10 	vmov	r4, r5, d0
 801980c:	4e67      	ldr	r6, [pc, #412]	; (80199ac <__ieee754_sqrt+0x1a8>)
 801980e:	43ae      	bics	r6, r5
 8019810:	ee10 0a10 	vmov	r0, s0
 8019814:	ee10 2a10 	vmov	r2, s0
 8019818:	4629      	mov	r1, r5
 801981a:	462b      	mov	r3, r5
 801981c:	d10d      	bne.n	801983a <__ieee754_sqrt+0x36>
 801981e:	f7e6 ff13 	bl	8000648 <__aeabi_dmul>
 8019822:	4602      	mov	r2, r0
 8019824:	460b      	mov	r3, r1
 8019826:	4620      	mov	r0, r4
 8019828:	4629      	mov	r1, r5
 801982a:	f7e6 fd57 	bl	80002dc <__adddf3>
 801982e:	4604      	mov	r4, r0
 8019830:	460d      	mov	r5, r1
 8019832:	ec45 4b10 	vmov	d0, r4, r5
 8019836:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801983a:	2d00      	cmp	r5, #0
 801983c:	dc0b      	bgt.n	8019856 <__ieee754_sqrt+0x52>
 801983e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019842:	4326      	orrs	r6, r4
 8019844:	d0f5      	beq.n	8019832 <__ieee754_sqrt+0x2e>
 8019846:	b135      	cbz	r5, 8019856 <__ieee754_sqrt+0x52>
 8019848:	f7e6 fd46 	bl	80002d8 <__aeabi_dsub>
 801984c:	4602      	mov	r2, r0
 801984e:	460b      	mov	r3, r1
 8019850:	f7e7 f824 	bl	800089c <__aeabi_ddiv>
 8019854:	e7eb      	b.n	801982e <__ieee754_sqrt+0x2a>
 8019856:	1509      	asrs	r1, r1, #20
 8019858:	f000 808d 	beq.w	8019976 <__ieee754_sqrt+0x172>
 801985c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019860:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8019864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019868:	07c9      	lsls	r1, r1, #31
 801986a:	bf5c      	itt	pl
 801986c:	005b      	lslpl	r3, r3, #1
 801986e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8019872:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019876:	bf58      	it	pl
 8019878:	0052      	lslpl	r2, r2, #1
 801987a:	2500      	movs	r5, #0
 801987c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019880:	1076      	asrs	r6, r6, #1
 8019882:	0052      	lsls	r2, r2, #1
 8019884:	f04f 0e16 	mov.w	lr, #22
 8019888:	46ac      	mov	ip, r5
 801988a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801988e:	eb0c 0001 	add.w	r0, ip, r1
 8019892:	4298      	cmp	r0, r3
 8019894:	bfde      	ittt	le
 8019896:	1a1b      	suble	r3, r3, r0
 8019898:	eb00 0c01 	addle.w	ip, r0, r1
 801989c:	186d      	addle	r5, r5, r1
 801989e:	005b      	lsls	r3, r3, #1
 80198a0:	f1be 0e01 	subs.w	lr, lr, #1
 80198a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80198a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80198ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80198b0:	d1ed      	bne.n	801988e <__ieee754_sqrt+0x8a>
 80198b2:	4674      	mov	r4, lr
 80198b4:	2720      	movs	r7, #32
 80198b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80198ba:	4563      	cmp	r3, ip
 80198bc:	eb01 000e 	add.w	r0, r1, lr
 80198c0:	dc02      	bgt.n	80198c8 <__ieee754_sqrt+0xc4>
 80198c2:	d113      	bne.n	80198ec <__ieee754_sqrt+0xe8>
 80198c4:	4290      	cmp	r0, r2
 80198c6:	d811      	bhi.n	80198ec <__ieee754_sqrt+0xe8>
 80198c8:	2800      	cmp	r0, #0
 80198ca:	eb00 0e01 	add.w	lr, r0, r1
 80198ce:	da57      	bge.n	8019980 <__ieee754_sqrt+0x17c>
 80198d0:	f1be 0f00 	cmp.w	lr, #0
 80198d4:	db54      	blt.n	8019980 <__ieee754_sqrt+0x17c>
 80198d6:	f10c 0801 	add.w	r8, ip, #1
 80198da:	eba3 030c 	sub.w	r3, r3, ip
 80198de:	4290      	cmp	r0, r2
 80198e0:	bf88      	it	hi
 80198e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80198e6:	1a12      	subs	r2, r2, r0
 80198e8:	440c      	add	r4, r1
 80198ea:	46c4      	mov	ip, r8
 80198ec:	005b      	lsls	r3, r3, #1
 80198ee:	3f01      	subs	r7, #1
 80198f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80198f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80198f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80198fc:	d1dd      	bne.n	80198ba <__ieee754_sqrt+0xb6>
 80198fe:	4313      	orrs	r3, r2
 8019900:	d01b      	beq.n	801993a <__ieee754_sqrt+0x136>
 8019902:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80199b0 <__ieee754_sqrt+0x1ac>
 8019906:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80199b4 <__ieee754_sqrt+0x1b0>
 801990a:	e9da 0100 	ldrd	r0, r1, [sl]
 801990e:	e9db 2300 	ldrd	r2, r3, [fp]
 8019912:	f7e6 fce1 	bl	80002d8 <__aeabi_dsub>
 8019916:	e9da 8900 	ldrd	r8, r9, [sl]
 801991a:	4602      	mov	r2, r0
 801991c:	460b      	mov	r3, r1
 801991e:	4640      	mov	r0, r8
 8019920:	4649      	mov	r1, r9
 8019922:	f7e7 f90d 	bl	8000b40 <__aeabi_dcmple>
 8019926:	b140      	cbz	r0, 801993a <__ieee754_sqrt+0x136>
 8019928:	f1b4 3fff 	cmp.w	r4, #4294967295
 801992c:	e9da 0100 	ldrd	r0, r1, [sl]
 8019930:	e9db 2300 	ldrd	r2, r3, [fp]
 8019934:	d126      	bne.n	8019984 <__ieee754_sqrt+0x180>
 8019936:	3501      	adds	r5, #1
 8019938:	463c      	mov	r4, r7
 801993a:	106a      	asrs	r2, r5, #1
 801993c:	0863      	lsrs	r3, r4, #1
 801993e:	07e9      	lsls	r1, r5, #31
 8019940:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019944:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019948:	bf48      	it	mi
 801994a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801994e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8019952:	461c      	mov	r4, r3
 8019954:	e76d      	b.n	8019832 <__ieee754_sqrt+0x2e>
 8019956:	0ad3      	lsrs	r3, r2, #11
 8019958:	3815      	subs	r0, #21
 801995a:	0552      	lsls	r2, r2, #21
 801995c:	2b00      	cmp	r3, #0
 801995e:	d0fa      	beq.n	8019956 <__ieee754_sqrt+0x152>
 8019960:	02dc      	lsls	r4, r3, #11
 8019962:	d50a      	bpl.n	801997a <__ieee754_sqrt+0x176>
 8019964:	f1c1 0420 	rsb	r4, r1, #32
 8019968:	fa22 f404 	lsr.w	r4, r2, r4
 801996c:	1e4d      	subs	r5, r1, #1
 801996e:	408a      	lsls	r2, r1
 8019970:	4323      	orrs	r3, r4
 8019972:	1b41      	subs	r1, r0, r5
 8019974:	e772      	b.n	801985c <__ieee754_sqrt+0x58>
 8019976:	4608      	mov	r0, r1
 8019978:	e7f0      	b.n	801995c <__ieee754_sqrt+0x158>
 801997a:	005b      	lsls	r3, r3, #1
 801997c:	3101      	adds	r1, #1
 801997e:	e7ef      	b.n	8019960 <__ieee754_sqrt+0x15c>
 8019980:	46e0      	mov	r8, ip
 8019982:	e7aa      	b.n	80198da <__ieee754_sqrt+0xd6>
 8019984:	f7e6 fcaa 	bl	80002dc <__adddf3>
 8019988:	e9da 8900 	ldrd	r8, r9, [sl]
 801998c:	4602      	mov	r2, r0
 801998e:	460b      	mov	r3, r1
 8019990:	4640      	mov	r0, r8
 8019992:	4649      	mov	r1, r9
 8019994:	f7e7 f8ca 	bl	8000b2c <__aeabi_dcmplt>
 8019998:	b120      	cbz	r0, 80199a4 <__ieee754_sqrt+0x1a0>
 801999a:	1ca0      	adds	r0, r4, #2
 801999c:	bf08      	it	eq
 801999e:	3501      	addeq	r5, #1
 80199a0:	3402      	adds	r4, #2
 80199a2:	e7ca      	b.n	801993a <__ieee754_sqrt+0x136>
 80199a4:	3401      	adds	r4, #1
 80199a6:	f024 0401 	bic.w	r4, r4, #1
 80199aa:	e7c6      	b.n	801993a <__ieee754_sqrt+0x136>
 80199ac:	7ff00000 	.word	0x7ff00000
 80199b0:	200001e0 	.word	0x200001e0
 80199b4:	200001e8 	.word	0x200001e8

080199b8 <__ieee754_sqrtf>:
 80199b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80199bc:	4770      	bx	lr
	...

080199c0 <__ieee754_pow>:
 80199c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199c4:	ed2d 8b06 	vpush	{d8-d10}
 80199c8:	b089      	sub	sp, #36	; 0x24
 80199ca:	ed8d 1b00 	vstr	d1, [sp]
 80199ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 80199d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80199d6:	ea58 0102 	orrs.w	r1, r8, r2
 80199da:	ec57 6b10 	vmov	r6, r7, d0
 80199de:	d115      	bne.n	8019a0c <__ieee754_pow+0x4c>
 80199e0:	19b3      	adds	r3, r6, r6
 80199e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80199e6:	4152      	adcs	r2, r2
 80199e8:	4299      	cmp	r1, r3
 80199ea:	4b89      	ldr	r3, [pc, #548]	; (8019c10 <__ieee754_pow+0x250>)
 80199ec:	4193      	sbcs	r3, r2
 80199ee:	f080 84d1 	bcs.w	801a394 <__ieee754_pow+0x9d4>
 80199f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80199f6:	4630      	mov	r0, r6
 80199f8:	4639      	mov	r1, r7
 80199fa:	f7e6 fc6f 	bl	80002dc <__adddf3>
 80199fe:	ec41 0b10 	vmov	d0, r0, r1
 8019a02:	b009      	add	sp, #36	; 0x24
 8019a04:	ecbd 8b06 	vpop	{d8-d10}
 8019a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a0c:	4b81      	ldr	r3, [pc, #516]	; (8019c14 <__ieee754_pow+0x254>)
 8019a0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019a12:	429c      	cmp	r4, r3
 8019a14:	ee10 aa10 	vmov	sl, s0
 8019a18:	463d      	mov	r5, r7
 8019a1a:	dc06      	bgt.n	8019a2a <__ieee754_pow+0x6a>
 8019a1c:	d101      	bne.n	8019a22 <__ieee754_pow+0x62>
 8019a1e:	2e00      	cmp	r6, #0
 8019a20:	d1e7      	bne.n	80199f2 <__ieee754_pow+0x32>
 8019a22:	4598      	cmp	r8, r3
 8019a24:	dc01      	bgt.n	8019a2a <__ieee754_pow+0x6a>
 8019a26:	d10f      	bne.n	8019a48 <__ieee754_pow+0x88>
 8019a28:	b172      	cbz	r2, 8019a48 <__ieee754_pow+0x88>
 8019a2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019a2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019a32:	ea55 050a 	orrs.w	r5, r5, sl
 8019a36:	d1dc      	bne.n	80199f2 <__ieee754_pow+0x32>
 8019a38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019a3c:	18db      	adds	r3, r3, r3
 8019a3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019a42:	4152      	adcs	r2, r2
 8019a44:	429d      	cmp	r5, r3
 8019a46:	e7d0      	b.n	80199ea <__ieee754_pow+0x2a>
 8019a48:	2d00      	cmp	r5, #0
 8019a4a:	da3b      	bge.n	8019ac4 <__ieee754_pow+0x104>
 8019a4c:	4b72      	ldr	r3, [pc, #456]	; (8019c18 <__ieee754_pow+0x258>)
 8019a4e:	4598      	cmp	r8, r3
 8019a50:	dc51      	bgt.n	8019af6 <__ieee754_pow+0x136>
 8019a52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019a56:	4598      	cmp	r8, r3
 8019a58:	f340 84ab 	ble.w	801a3b2 <__ieee754_pow+0x9f2>
 8019a5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019a60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019a64:	2b14      	cmp	r3, #20
 8019a66:	dd0f      	ble.n	8019a88 <__ieee754_pow+0xc8>
 8019a68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019a6c:	fa22 f103 	lsr.w	r1, r2, r3
 8019a70:	fa01 f303 	lsl.w	r3, r1, r3
 8019a74:	4293      	cmp	r3, r2
 8019a76:	f040 849c 	bne.w	801a3b2 <__ieee754_pow+0x9f2>
 8019a7a:	f001 0101 	and.w	r1, r1, #1
 8019a7e:	f1c1 0302 	rsb	r3, r1, #2
 8019a82:	9304      	str	r3, [sp, #16]
 8019a84:	b182      	cbz	r2, 8019aa8 <__ieee754_pow+0xe8>
 8019a86:	e05f      	b.n	8019b48 <__ieee754_pow+0x188>
 8019a88:	2a00      	cmp	r2, #0
 8019a8a:	d15b      	bne.n	8019b44 <__ieee754_pow+0x184>
 8019a8c:	f1c3 0314 	rsb	r3, r3, #20
 8019a90:	fa48 f103 	asr.w	r1, r8, r3
 8019a94:	fa01 f303 	lsl.w	r3, r1, r3
 8019a98:	4543      	cmp	r3, r8
 8019a9a:	f040 8487 	bne.w	801a3ac <__ieee754_pow+0x9ec>
 8019a9e:	f001 0101 	and.w	r1, r1, #1
 8019aa2:	f1c1 0302 	rsb	r3, r1, #2
 8019aa6:	9304      	str	r3, [sp, #16]
 8019aa8:	4b5c      	ldr	r3, [pc, #368]	; (8019c1c <__ieee754_pow+0x25c>)
 8019aaa:	4598      	cmp	r8, r3
 8019aac:	d132      	bne.n	8019b14 <__ieee754_pow+0x154>
 8019aae:	f1b9 0f00 	cmp.w	r9, #0
 8019ab2:	f280 8477 	bge.w	801a3a4 <__ieee754_pow+0x9e4>
 8019ab6:	4959      	ldr	r1, [pc, #356]	; (8019c1c <__ieee754_pow+0x25c>)
 8019ab8:	4632      	mov	r2, r6
 8019aba:	463b      	mov	r3, r7
 8019abc:	2000      	movs	r0, #0
 8019abe:	f7e6 feed 	bl	800089c <__aeabi_ddiv>
 8019ac2:	e79c      	b.n	80199fe <__ieee754_pow+0x3e>
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	9304      	str	r3, [sp, #16]
 8019ac8:	2a00      	cmp	r2, #0
 8019aca:	d13d      	bne.n	8019b48 <__ieee754_pow+0x188>
 8019acc:	4b51      	ldr	r3, [pc, #324]	; (8019c14 <__ieee754_pow+0x254>)
 8019ace:	4598      	cmp	r8, r3
 8019ad0:	d1ea      	bne.n	8019aa8 <__ieee754_pow+0xe8>
 8019ad2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019ad6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019ada:	ea53 030a 	orrs.w	r3, r3, sl
 8019ade:	f000 8459 	beq.w	801a394 <__ieee754_pow+0x9d4>
 8019ae2:	4b4f      	ldr	r3, [pc, #316]	; (8019c20 <__ieee754_pow+0x260>)
 8019ae4:	429c      	cmp	r4, r3
 8019ae6:	dd08      	ble.n	8019afa <__ieee754_pow+0x13a>
 8019ae8:	f1b9 0f00 	cmp.w	r9, #0
 8019aec:	f2c0 8456 	blt.w	801a39c <__ieee754_pow+0x9dc>
 8019af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019af4:	e783      	b.n	80199fe <__ieee754_pow+0x3e>
 8019af6:	2302      	movs	r3, #2
 8019af8:	e7e5      	b.n	8019ac6 <__ieee754_pow+0x106>
 8019afa:	f1b9 0f00 	cmp.w	r9, #0
 8019afe:	f04f 0000 	mov.w	r0, #0
 8019b02:	f04f 0100 	mov.w	r1, #0
 8019b06:	f6bf af7a 	bge.w	80199fe <__ieee754_pow+0x3e>
 8019b0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019b0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019b12:	e774      	b.n	80199fe <__ieee754_pow+0x3e>
 8019b14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019b18:	d106      	bne.n	8019b28 <__ieee754_pow+0x168>
 8019b1a:	4632      	mov	r2, r6
 8019b1c:	463b      	mov	r3, r7
 8019b1e:	4630      	mov	r0, r6
 8019b20:	4639      	mov	r1, r7
 8019b22:	f7e6 fd91 	bl	8000648 <__aeabi_dmul>
 8019b26:	e76a      	b.n	80199fe <__ieee754_pow+0x3e>
 8019b28:	4b3e      	ldr	r3, [pc, #248]	; (8019c24 <__ieee754_pow+0x264>)
 8019b2a:	4599      	cmp	r9, r3
 8019b2c:	d10c      	bne.n	8019b48 <__ieee754_pow+0x188>
 8019b2e:	2d00      	cmp	r5, #0
 8019b30:	db0a      	blt.n	8019b48 <__ieee754_pow+0x188>
 8019b32:	ec47 6b10 	vmov	d0, r6, r7
 8019b36:	b009      	add	sp, #36	; 0x24
 8019b38:	ecbd 8b06 	vpop	{d8-d10}
 8019b3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b40:	f7ff be60 	b.w	8019804 <__ieee754_sqrt>
 8019b44:	2300      	movs	r3, #0
 8019b46:	9304      	str	r3, [sp, #16]
 8019b48:	ec47 6b10 	vmov	d0, r6, r7
 8019b4c:	f000 fc62 	bl	801a414 <fabs>
 8019b50:	ec51 0b10 	vmov	r0, r1, d0
 8019b54:	f1ba 0f00 	cmp.w	sl, #0
 8019b58:	d129      	bne.n	8019bae <__ieee754_pow+0x1ee>
 8019b5a:	b124      	cbz	r4, 8019b66 <__ieee754_pow+0x1a6>
 8019b5c:	4b2f      	ldr	r3, [pc, #188]	; (8019c1c <__ieee754_pow+0x25c>)
 8019b5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d123      	bne.n	8019bae <__ieee754_pow+0x1ee>
 8019b66:	f1b9 0f00 	cmp.w	r9, #0
 8019b6a:	da05      	bge.n	8019b78 <__ieee754_pow+0x1b8>
 8019b6c:	4602      	mov	r2, r0
 8019b6e:	460b      	mov	r3, r1
 8019b70:	2000      	movs	r0, #0
 8019b72:	492a      	ldr	r1, [pc, #168]	; (8019c1c <__ieee754_pow+0x25c>)
 8019b74:	f7e6 fe92 	bl	800089c <__aeabi_ddiv>
 8019b78:	2d00      	cmp	r5, #0
 8019b7a:	f6bf af40 	bge.w	80199fe <__ieee754_pow+0x3e>
 8019b7e:	9b04      	ldr	r3, [sp, #16]
 8019b80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019b84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019b88:	431c      	orrs	r4, r3
 8019b8a:	d108      	bne.n	8019b9e <__ieee754_pow+0x1de>
 8019b8c:	4602      	mov	r2, r0
 8019b8e:	460b      	mov	r3, r1
 8019b90:	4610      	mov	r0, r2
 8019b92:	4619      	mov	r1, r3
 8019b94:	f7e6 fba0 	bl	80002d8 <__aeabi_dsub>
 8019b98:	4602      	mov	r2, r0
 8019b9a:	460b      	mov	r3, r1
 8019b9c:	e78f      	b.n	8019abe <__ieee754_pow+0xfe>
 8019b9e:	9b04      	ldr	r3, [sp, #16]
 8019ba0:	2b01      	cmp	r3, #1
 8019ba2:	f47f af2c 	bne.w	80199fe <__ieee754_pow+0x3e>
 8019ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019baa:	4619      	mov	r1, r3
 8019bac:	e727      	b.n	80199fe <__ieee754_pow+0x3e>
 8019bae:	0feb      	lsrs	r3, r5, #31
 8019bb0:	3b01      	subs	r3, #1
 8019bb2:	9306      	str	r3, [sp, #24]
 8019bb4:	9a06      	ldr	r2, [sp, #24]
 8019bb6:	9b04      	ldr	r3, [sp, #16]
 8019bb8:	4313      	orrs	r3, r2
 8019bba:	d102      	bne.n	8019bc2 <__ieee754_pow+0x202>
 8019bbc:	4632      	mov	r2, r6
 8019bbe:	463b      	mov	r3, r7
 8019bc0:	e7e6      	b.n	8019b90 <__ieee754_pow+0x1d0>
 8019bc2:	4b19      	ldr	r3, [pc, #100]	; (8019c28 <__ieee754_pow+0x268>)
 8019bc4:	4598      	cmp	r8, r3
 8019bc6:	f340 80fb 	ble.w	8019dc0 <__ieee754_pow+0x400>
 8019bca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019bce:	4598      	cmp	r8, r3
 8019bd0:	4b13      	ldr	r3, [pc, #76]	; (8019c20 <__ieee754_pow+0x260>)
 8019bd2:	dd0c      	ble.n	8019bee <__ieee754_pow+0x22e>
 8019bd4:	429c      	cmp	r4, r3
 8019bd6:	dc0f      	bgt.n	8019bf8 <__ieee754_pow+0x238>
 8019bd8:	f1b9 0f00 	cmp.w	r9, #0
 8019bdc:	da0f      	bge.n	8019bfe <__ieee754_pow+0x23e>
 8019bde:	2000      	movs	r0, #0
 8019be0:	b009      	add	sp, #36	; 0x24
 8019be2:	ecbd 8b06 	vpop	{d8-d10}
 8019be6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bea:	f001 bbba 	b.w	801b362 <__math_oflow>
 8019bee:	429c      	cmp	r4, r3
 8019bf0:	dbf2      	blt.n	8019bd8 <__ieee754_pow+0x218>
 8019bf2:	4b0a      	ldr	r3, [pc, #40]	; (8019c1c <__ieee754_pow+0x25c>)
 8019bf4:	429c      	cmp	r4, r3
 8019bf6:	dd19      	ble.n	8019c2c <__ieee754_pow+0x26c>
 8019bf8:	f1b9 0f00 	cmp.w	r9, #0
 8019bfc:	dcef      	bgt.n	8019bde <__ieee754_pow+0x21e>
 8019bfe:	2000      	movs	r0, #0
 8019c00:	b009      	add	sp, #36	; 0x24
 8019c02:	ecbd 8b06 	vpop	{d8-d10}
 8019c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c0a:	f001 bba1 	b.w	801b350 <__math_uflow>
 8019c0e:	bf00      	nop
 8019c10:	fff00000 	.word	0xfff00000
 8019c14:	7ff00000 	.word	0x7ff00000
 8019c18:	433fffff 	.word	0x433fffff
 8019c1c:	3ff00000 	.word	0x3ff00000
 8019c20:	3fefffff 	.word	0x3fefffff
 8019c24:	3fe00000 	.word	0x3fe00000
 8019c28:	41e00000 	.word	0x41e00000
 8019c2c:	4b60      	ldr	r3, [pc, #384]	; (8019db0 <__ieee754_pow+0x3f0>)
 8019c2e:	2200      	movs	r2, #0
 8019c30:	f7e6 fb52 	bl	80002d8 <__aeabi_dsub>
 8019c34:	a354      	add	r3, pc, #336	; (adr r3, 8019d88 <__ieee754_pow+0x3c8>)
 8019c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c3a:	4604      	mov	r4, r0
 8019c3c:	460d      	mov	r5, r1
 8019c3e:	f7e6 fd03 	bl	8000648 <__aeabi_dmul>
 8019c42:	a353      	add	r3, pc, #332	; (adr r3, 8019d90 <__ieee754_pow+0x3d0>)
 8019c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c48:	4606      	mov	r6, r0
 8019c4a:	460f      	mov	r7, r1
 8019c4c:	4620      	mov	r0, r4
 8019c4e:	4629      	mov	r1, r5
 8019c50:	f7e6 fcfa 	bl	8000648 <__aeabi_dmul>
 8019c54:	4b57      	ldr	r3, [pc, #348]	; (8019db4 <__ieee754_pow+0x3f4>)
 8019c56:	4682      	mov	sl, r0
 8019c58:	468b      	mov	fp, r1
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	4620      	mov	r0, r4
 8019c5e:	4629      	mov	r1, r5
 8019c60:	f7e6 fcf2 	bl	8000648 <__aeabi_dmul>
 8019c64:	4602      	mov	r2, r0
 8019c66:	460b      	mov	r3, r1
 8019c68:	a14b      	add	r1, pc, #300	; (adr r1, 8019d98 <__ieee754_pow+0x3d8>)
 8019c6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c6e:	f7e6 fb33 	bl	80002d8 <__aeabi_dsub>
 8019c72:	4622      	mov	r2, r4
 8019c74:	462b      	mov	r3, r5
 8019c76:	f7e6 fce7 	bl	8000648 <__aeabi_dmul>
 8019c7a:	4602      	mov	r2, r0
 8019c7c:	460b      	mov	r3, r1
 8019c7e:	2000      	movs	r0, #0
 8019c80:	494d      	ldr	r1, [pc, #308]	; (8019db8 <__ieee754_pow+0x3f8>)
 8019c82:	f7e6 fb29 	bl	80002d8 <__aeabi_dsub>
 8019c86:	4622      	mov	r2, r4
 8019c88:	4680      	mov	r8, r0
 8019c8a:	4689      	mov	r9, r1
 8019c8c:	462b      	mov	r3, r5
 8019c8e:	4620      	mov	r0, r4
 8019c90:	4629      	mov	r1, r5
 8019c92:	f7e6 fcd9 	bl	8000648 <__aeabi_dmul>
 8019c96:	4602      	mov	r2, r0
 8019c98:	460b      	mov	r3, r1
 8019c9a:	4640      	mov	r0, r8
 8019c9c:	4649      	mov	r1, r9
 8019c9e:	f7e6 fcd3 	bl	8000648 <__aeabi_dmul>
 8019ca2:	a33f      	add	r3, pc, #252	; (adr r3, 8019da0 <__ieee754_pow+0x3e0>)
 8019ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca8:	f7e6 fcce 	bl	8000648 <__aeabi_dmul>
 8019cac:	4602      	mov	r2, r0
 8019cae:	460b      	mov	r3, r1
 8019cb0:	4650      	mov	r0, sl
 8019cb2:	4659      	mov	r1, fp
 8019cb4:	f7e6 fb10 	bl	80002d8 <__aeabi_dsub>
 8019cb8:	4602      	mov	r2, r0
 8019cba:	460b      	mov	r3, r1
 8019cbc:	4680      	mov	r8, r0
 8019cbe:	4689      	mov	r9, r1
 8019cc0:	4630      	mov	r0, r6
 8019cc2:	4639      	mov	r1, r7
 8019cc4:	f7e6 fb0a 	bl	80002dc <__adddf3>
 8019cc8:	2000      	movs	r0, #0
 8019cca:	4632      	mov	r2, r6
 8019ccc:	463b      	mov	r3, r7
 8019cce:	4604      	mov	r4, r0
 8019cd0:	460d      	mov	r5, r1
 8019cd2:	f7e6 fb01 	bl	80002d8 <__aeabi_dsub>
 8019cd6:	4602      	mov	r2, r0
 8019cd8:	460b      	mov	r3, r1
 8019cda:	4640      	mov	r0, r8
 8019cdc:	4649      	mov	r1, r9
 8019cde:	f7e6 fafb 	bl	80002d8 <__aeabi_dsub>
 8019ce2:	9b04      	ldr	r3, [sp, #16]
 8019ce4:	9a06      	ldr	r2, [sp, #24]
 8019ce6:	3b01      	subs	r3, #1
 8019ce8:	4313      	orrs	r3, r2
 8019cea:	4682      	mov	sl, r0
 8019cec:	468b      	mov	fp, r1
 8019cee:	f040 81e7 	bne.w	801a0c0 <__ieee754_pow+0x700>
 8019cf2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019da8 <__ieee754_pow+0x3e8>
 8019cf6:	eeb0 8a47 	vmov.f32	s16, s14
 8019cfa:	eef0 8a67 	vmov.f32	s17, s15
 8019cfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019d02:	2600      	movs	r6, #0
 8019d04:	4632      	mov	r2, r6
 8019d06:	463b      	mov	r3, r7
 8019d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d0c:	f7e6 fae4 	bl	80002d8 <__aeabi_dsub>
 8019d10:	4622      	mov	r2, r4
 8019d12:	462b      	mov	r3, r5
 8019d14:	f7e6 fc98 	bl	8000648 <__aeabi_dmul>
 8019d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d1c:	4680      	mov	r8, r0
 8019d1e:	4689      	mov	r9, r1
 8019d20:	4650      	mov	r0, sl
 8019d22:	4659      	mov	r1, fp
 8019d24:	f7e6 fc90 	bl	8000648 <__aeabi_dmul>
 8019d28:	4602      	mov	r2, r0
 8019d2a:	460b      	mov	r3, r1
 8019d2c:	4640      	mov	r0, r8
 8019d2e:	4649      	mov	r1, r9
 8019d30:	f7e6 fad4 	bl	80002dc <__adddf3>
 8019d34:	4632      	mov	r2, r6
 8019d36:	463b      	mov	r3, r7
 8019d38:	4680      	mov	r8, r0
 8019d3a:	4689      	mov	r9, r1
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	4629      	mov	r1, r5
 8019d40:	f7e6 fc82 	bl	8000648 <__aeabi_dmul>
 8019d44:	460b      	mov	r3, r1
 8019d46:	4604      	mov	r4, r0
 8019d48:	460d      	mov	r5, r1
 8019d4a:	4602      	mov	r2, r0
 8019d4c:	4649      	mov	r1, r9
 8019d4e:	4640      	mov	r0, r8
 8019d50:	f7e6 fac4 	bl	80002dc <__adddf3>
 8019d54:	4b19      	ldr	r3, [pc, #100]	; (8019dbc <__ieee754_pow+0x3fc>)
 8019d56:	4299      	cmp	r1, r3
 8019d58:	ec45 4b19 	vmov	d9, r4, r5
 8019d5c:	4606      	mov	r6, r0
 8019d5e:	460f      	mov	r7, r1
 8019d60:	468b      	mov	fp, r1
 8019d62:	f340 82f0 	ble.w	801a346 <__ieee754_pow+0x986>
 8019d66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019d6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019d6e:	4303      	orrs	r3, r0
 8019d70:	f000 81e4 	beq.w	801a13c <__ieee754_pow+0x77c>
 8019d74:	ec51 0b18 	vmov	r0, r1, d8
 8019d78:	2200      	movs	r2, #0
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	f7e6 fed6 	bl	8000b2c <__aeabi_dcmplt>
 8019d80:	3800      	subs	r0, #0
 8019d82:	bf18      	it	ne
 8019d84:	2001      	movne	r0, #1
 8019d86:	e72b      	b.n	8019be0 <__ieee754_pow+0x220>
 8019d88:	60000000 	.word	0x60000000
 8019d8c:	3ff71547 	.word	0x3ff71547
 8019d90:	f85ddf44 	.word	0xf85ddf44
 8019d94:	3e54ae0b 	.word	0x3e54ae0b
 8019d98:	55555555 	.word	0x55555555
 8019d9c:	3fd55555 	.word	0x3fd55555
 8019da0:	652b82fe 	.word	0x652b82fe
 8019da4:	3ff71547 	.word	0x3ff71547
 8019da8:	00000000 	.word	0x00000000
 8019dac:	bff00000 	.word	0xbff00000
 8019db0:	3ff00000 	.word	0x3ff00000
 8019db4:	3fd00000 	.word	0x3fd00000
 8019db8:	3fe00000 	.word	0x3fe00000
 8019dbc:	408fffff 	.word	0x408fffff
 8019dc0:	4bd5      	ldr	r3, [pc, #852]	; (801a118 <__ieee754_pow+0x758>)
 8019dc2:	402b      	ands	r3, r5
 8019dc4:	2200      	movs	r2, #0
 8019dc6:	b92b      	cbnz	r3, 8019dd4 <__ieee754_pow+0x414>
 8019dc8:	4bd4      	ldr	r3, [pc, #848]	; (801a11c <__ieee754_pow+0x75c>)
 8019dca:	f7e6 fc3d 	bl	8000648 <__aeabi_dmul>
 8019dce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019dd2:	460c      	mov	r4, r1
 8019dd4:	1523      	asrs	r3, r4, #20
 8019dd6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019dda:	4413      	add	r3, r2
 8019ddc:	9305      	str	r3, [sp, #20]
 8019dde:	4bd0      	ldr	r3, [pc, #832]	; (801a120 <__ieee754_pow+0x760>)
 8019de0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019de4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019de8:	429c      	cmp	r4, r3
 8019dea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019dee:	dd08      	ble.n	8019e02 <__ieee754_pow+0x442>
 8019df0:	4bcc      	ldr	r3, [pc, #816]	; (801a124 <__ieee754_pow+0x764>)
 8019df2:	429c      	cmp	r4, r3
 8019df4:	f340 8162 	ble.w	801a0bc <__ieee754_pow+0x6fc>
 8019df8:	9b05      	ldr	r3, [sp, #20]
 8019dfa:	3301      	adds	r3, #1
 8019dfc:	9305      	str	r3, [sp, #20]
 8019dfe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019e02:	2400      	movs	r4, #0
 8019e04:	00e3      	lsls	r3, r4, #3
 8019e06:	9307      	str	r3, [sp, #28]
 8019e08:	4bc7      	ldr	r3, [pc, #796]	; (801a128 <__ieee754_pow+0x768>)
 8019e0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019e0e:	ed93 7b00 	vldr	d7, [r3]
 8019e12:	4629      	mov	r1, r5
 8019e14:	ec53 2b17 	vmov	r2, r3, d7
 8019e18:	eeb0 9a47 	vmov.f32	s18, s14
 8019e1c:	eef0 9a67 	vmov.f32	s19, s15
 8019e20:	4682      	mov	sl, r0
 8019e22:	f7e6 fa59 	bl	80002d8 <__aeabi_dsub>
 8019e26:	4652      	mov	r2, sl
 8019e28:	4606      	mov	r6, r0
 8019e2a:	460f      	mov	r7, r1
 8019e2c:	462b      	mov	r3, r5
 8019e2e:	ec51 0b19 	vmov	r0, r1, d9
 8019e32:	f7e6 fa53 	bl	80002dc <__adddf3>
 8019e36:	4602      	mov	r2, r0
 8019e38:	460b      	mov	r3, r1
 8019e3a:	2000      	movs	r0, #0
 8019e3c:	49bb      	ldr	r1, [pc, #748]	; (801a12c <__ieee754_pow+0x76c>)
 8019e3e:	f7e6 fd2d 	bl	800089c <__aeabi_ddiv>
 8019e42:	ec41 0b1a 	vmov	d10, r0, r1
 8019e46:	4602      	mov	r2, r0
 8019e48:	460b      	mov	r3, r1
 8019e4a:	4630      	mov	r0, r6
 8019e4c:	4639      	mov	r1, r7
 8019e4e:	f7e6 fbfb 	bl	8000648 <__aeabi_dmul>
 8019e52:	2300      	movs	r3, #0
 8019e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e58:	9302      	str	r3, [sp, #8]
 8019e5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019e5e:	46ab      	mov	fp, r5
 8019e60:	106d      	asrs	r5, r5, #1
 8019e62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019e66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019e6a:	ec41 0b18 	vmov	d8, r0, r1
 8019e6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019e72:	2200      	movs	r2, #0
 8019e74:	4640      	mov	r0, r8
 8019e76:	4649      	mov	r1, r9
 8019e78:	4614      	mov	r4, r2
 8019e7a:	461d      	mov	r5, r3
 8019e7c:	f7e6 fbe4 	bl	8000648 <__aeabi_dmul>
 8019e80:	4602      	mov	r2, r0
 8019e82:	460b      	mov	r3, r1
 8019e84:	4630      	mov	r0, r6
 8019e86:	4639      	mov	r1, r7
 8019e88:	f7e6 fa26 	bl	80002d8 <__aeabi_dsub>
 8019e8c:	ec53 2b19 	vmov	r2, r3, d9
 8019e90:	4606      	mov	r6, r0
 8019e92:	460f      	mov	r7, r1
 8019e94:	4620      	mov	r0, r4
 8019e96:	4629      	mov	r1, r5
 8019e98:	f7e6 fa1e 	bl	80002d8 <__aeabi_dsub>
 8019e9c:	4602      	mov	r2, r0
 8019e9e:	460b      	mov	r3, r1
 8019ea0:	4650      	mov	r0, sl
 8019ea2:	4659      	mov	r1, fp
 8019ea4:	f7e6 fa18 	bl	80002d8 <__aeabi_dsub>
 8019ea8:	4642      	mov	r2, r8
 8019eaa:	464b      	mov	r3, r9
 8019eac:	f7e6 fbcc 	bl	8000648 <__aeabi_dmul>
 8019eb0:	4602      	mov	r2, r0
 8019eb2:	460b      	mov	r3, r1
 8019eb4:	4630      	mov	r0, r6
 8019eb6:	4639      	mov	r1, r7
 8019eb8:	f7e6 fa0e 	bl	80002d8 <__aeabi_dsub>
 8019ebc:	ec53 2b1a 	vmov	r2, r3, d10
 8019ec0:	f7e6 fbc2 	bl	8000648 <__aeabi_dmul>
 8019ec4:	ec53 2b18 	vmov	r2, r3, d8
 8019ec8:	ec41 0b19 	vmov	d9, r0, r1
 8019ecc:	ec51 0b18 	vmov	r0, r1, d8
 8019ed0:	f7e6 fbba 	bl	8000648 <__aeabi_dmul>
 8019ed4:	a37c      	add	r3, pc, #496	; (adr r3, 801a0c8 <__ieee754_pow+0x708>)
 8019ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eda:	4604      	mov	r4, r0
 8019edc:	460d      	mov	r5, r1
 8019ede:	f7e6 fbb3 	bl	8000648 <__aeabi_dmul>
 8019ee2:	a37b      	add	r3, pc, #492	; (adr r3, 801a0d0 <__ieee754_pow+0x710>)
 8019ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee8:	f7e6 f9f8 	bl	80002dc <__adddf3>
 8019eec:	4622      	mov	r2, r4
 8019eee:	462b      	mov	r3, r5
 8019ef0:	f7e6 fbaa 	bl	8000648 <__aeabi_dmul>
 8019ef4:	a378      	add	r3, pc, #480	; (adr r3, 801a0d8 <__ieee754_pow+0x718>)
 8019ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019efa:	f7e6 f9ef 	bl	80002dc <__adddf3>
 8019efe:	4622      	mov	r2, r4
 8019f00:	462b      	mov	r3, r5
 8019f02:	f7e6 fba1 	bl	8000648 <__aeabi_dmul>
 8019f06:	a376      	add	r3, pc, #472	; (adr r3, 801a0e0 <__ieee754_pow+0x720>)
 8019f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f0c:	f7e6 f9e6 	bl	80002dc <__adddf3>
 8019f10:	4622      	mov	r2, r4
 8019f12:	462b      	mov	r3, r5
 8019f14:	f7e6 fb98 	bl	8000648 <__aeabi_dmul>
 8019f18:	a373      	add	r3, pc, #460	; (adr r3, 801a0e8 <__ieee754_pow+0x728>)
 8019f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f1e:	f7e6 f9dd 	bl	80002dc <__adddf3>
 8019f22:	4622      	mov	r2, r4
 8019f24:	462b      	mov	r3, r5
 8019f26:	f7e6 fb8f 	bl	8000648 <__aeabi_dmul>
 8019f2a:	a371      	add	r3, pc, #452	; (adr r3, 801a0f0 <__ieee754_pow+0x730>)
 8019f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f30:	f7e6 f9d4 	bl	80002dc <__adddf3>
 8019f34:	4622      	mov	r2, r4
 8019f36:	4606      	mov	r6, r0
 8019f38:	460f      	mov	r7, r1
 8019f3a:	462b      	mov	r3, r5
 8019f3c:	4620      	mov	r0, r4
 8019f3e:	4629      	mov	r1, r5
 8019f40:	f7e6 fb82 	bl	8000648 <__aeabi_dmul>
 8019f44:	4602      	mov	r2, r0
 8019f46:	460b      	mov	r3, r1
 8019f48:	4630      	mov	r0, r6
 8019f4a:	4639      	mov	r1, r7
 8019f4c:	f7e6 fb7c 	bl	8000648 <__aeabi_dmul>
 8019f50:	4642      	mov	r2, r8
 8019f52:	4604      	mov	r4, r0
 8019f54:	460d      	mov	r5, r1
 8019f56:	464b      	mov	r3, r9
 8019f58:	ec51 0b18 	vmov	r0, r1, d8
 8019f5c:	f7e6 f9be 	bl	80002dc <__adddf3>
 8019f60:	ec53 2b19 	vmov	r2, r3, d9
 8019f64:	f7e6 fb70 	bl	8000648 <__aeabi_dmul>
 8019f68:	4622      	mov	r2, r4
 8019f6a:	462b      	mov	r3, r5
 8019f6c:	f7e6 f9b6 	bl	80002dc <__adddf3>
 8019f70:	4642      	mov	r2, r8
 8019f72:	4682      	mov	sl, r0
 8019f74:	468b      	mov	fp, r1
 8019f76:	464b      	mov	r3, r9
 8019f78:	4640      	mov	r0, r8
 8019f7a:	4649      	mov	r1, r9
 8019f7c:	f7e6 fb64 	bl	8000648 <__aeabi_dmul>
 8019f80:	4b6b      	ldr	r3, [pc, #428]	; (801a130 <__ieee754_pow+0x770>)
 8019f82:	2200      	movs	r2, #0
 8019f84:	4606      	mov	r6, r0
 8019f86:	460f      	mov	r7, r1
 8019f88:	f7e6 f9a8 	bl	80002dc <__adddf3>
 8019f8c:	4652      	mov	r2, sl
 8019f8e:	465b      	mov	r3, fp
 8019f90:	f7e6 f9a4 	bl	80002dc <__adddf3>
 8019f94:	2000      	movs	r0, #0
 8019f96:	4604      	mov	r4, r0
 8019f98:	460d      	mov	r5, r1
 8019f9a:	4602      	mov	r2, r0
 8019f9c:	460b      	mov	r3, r1
 8019f9e:	4640      	mov	r0, r8
 8019fa0:	4649      	mov	r1, r9
 8019fa2:	f7e6 fb51 	bl	8000648 <__aeabi_dmul>
 8019fa6:	4b62      	ldr	r3, [pc, #392]	; (801a130 <__ieee754_pow+0x770>)
 8019fa8:	4680      	mov	r8, r0
 8019faa:	4689      	mov	r9, r1
 8019fac:	2200      	movs	r2, #0
 8019fae:	4620      	mov	r0, r4
 8019fb0:	4629      	mov	r1, r5
 8019fb2:	f7e6 f991 	bl	80002d8 <__aeabi_dsub>
 8019fb6:	4632      	mov	r2, r6
 8019fb8:	463b      	mov	r3, r7
 8019fba:	f7e6 f98d 	bl	80002d8 <__aeabi_dsub>
 8019fbe:	4602      	mov	r2, r0
 8019fc0:	460b      	mov	r3, r1
 8019fc2:	4650      	mov	r0, sl
 8019fc4:	4659      	mov	r1, fp
 8019fc6:	f7e6 f987 	bl	80002d8 <__aeabi_dsub>
 8019fca:	ec53 2b18 	vmov	r2, r3, d8
 8019fce:	f7e6 fb3b 	bl	8000648 <__aeabi_dmul>
 8019fd2:	4622      	mov	r2, r4
 8019fd4:	4606      	mov	r6, r0
 8019fd6:	460f      	mov	r7, r1
 8019fd8:	462b      	mov	r3, r5
 8019fda:	ec51 0b19 	vmov	r0, r1, d9
 8019fde:	f7e6 fb33 	bl	8000648 <__aeabi_dmul>
 8019fe2:	4602      	mov	r2, r0
 8019fe4:	460b      	mov	r3, r1
 8019fe6:	4630      	mov	r0, r6
 8019fe8:	4639      	mov	r1, r7
 8019fea:	f7e6 f977 	bl	80002dc <__adddf3>
 8019fee:	4606      	mov	r6, r0
 8019ff0:	460f      	mov	r7, r1
 8019ff2:	4602      	mov	r2, r0
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	4640      	mov	r0, r8
 8019ff8:	4649      	mov	r1, r9
 8019ffa:	f7e6 f96f 	bl	80002dc <__adddf3>
 8019ffe:	a33e      	add	r3, pc, #248	; (adr r3, 801a0f8 <__ieee754_pow+0x738>)
 801a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a004:	2000      	movs	r0, #0
 801a006:	4604      	mov	r4, r0
 801a008:	460d      	mov	r5, r1
 801a00a:	f7e6 fb1d 	bl	8000648 <__aeabi_dmul>
 801a00e:	4642      	mov	r2, r8
 801a010:	ec41 0b18 	vmov	d8, r0, r1
 801a014:	464b      	mov	r3, r9
 801a016:	4620      	mov	r0, r4
 801a018:	4629      	mov	r1, r5
 801a01a:	f7e6 f95d 	bl	80002d8 <__aeabi_dsub>
 801a01e:	4602      	mov	r2, r0
 801a020:	460b      	mov	r3, r1
 801a022:	4630      	mov	r0, r6
 801a024:	4639      	mov	r1, r7
 801a026:	f7e6 f957 	bl	80002d8 <__aeabi_dsub>
 801a02a:	a335      	add	r3, pc, #212	; (adr r3, 801a100 <__ieee754_pow+0x740>)
 801a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a030:	f7e6 fb0a 	bl	8000648 <__aeabi_dmul>
 801a034:	a334      	add	r3, pc, #208	; (adr r3, 801a108 <__ieee754_pow+0x748>)
 801a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a03a:	4606      	mov	r6, r0
 801a03c:	460f      	mov	r7, r1
 801a03e:	4620      	mov	r0, r4
 801a040:	4629      	mov	r1, r5
 801a042:	f7e6 fb01 	bl	8000648 <__aeabi_dmul>
 801a046:	4602      	mov	r2, r0
 801a048:	460b      	mov	r3, r1
 801a04a:	4630      	mov	r0, r6
 801a04c:	4639      	mov	r1, r7
 801a04e:	f7e6 f945 	bl	80002dc <__adddf3>
 801a052:	9a07      	ldr	r2, [sp, #28]
 801a054:	4b37      	ldr	r3, [pc, #220]	; (801a134 <__ieee754_pow+0x774>)
 801a056:	4413      	add	r3, r2
 801a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a05c:	f7e6 f93e 	bl	80002dc <__adddf3>
 801a060:	4682      	mov	sl, r0
 801a062:	9805      	ldr	r0, [sp, #20]
 801a064:	468b      	mov	fp, r1
 801a066:	f7e6 fa85 	bl	8000574 <__aeabi_i2d>
 801a06a:	9a07      	ldr	r2, [sp, #28]
 801a06c:	4b32      	ldr	r3, [pc, #200]	; (801a138 <__ieee754_pow+0x778>)
 801a06e:	4413      	add	r3, r2
 801a070:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a074:	4606      	mov	r6, r0
 801a076:	460f      	mov	r7, r1
 801a078:	4652      	mov	r2, sl
 801a07a:	465b      	mov	r3, fp
 801a07c:	ec51 0b18 	vmov	r0, r1, d8
 801a080:	f7e6 f92c 	bl	80002dc <__adddf3>
 801a084:	4642      	mov	r2, r8
 801a086:	464b      	mov	r3, r9
 801a088:	f7e6 f928 	bl	80002dc <__adddf3>
 801a08c:	4632      	mov	r2, r6
 801a08e:	463b      	mov	r3, r7
 801a090:	f7e6 f924 	bl	80002dc <__adddf3>
 801a094:	2000      	movs	r0, #0
 801a096:	4632      	mov	r2, r6
 801a098:	463b      	mov	r3, r7
 801a09a:	4604      	mov	r4, r0
 801a09c:	460d      	mov	r5, r1
 801a09e:	f7e6 f91b 	bl	80002d8 <__aeabi_dsub>
 801a0a2:	4642      	mov	r2, r8
 801a0a4:	464b      	mov	r3, r9
 801a0a6:	f7e6 f917 	bl	80002d8 <__aeabi_dsub>
 801a0aa:	ec53 2b18 	vmov	r2, r3, d8
 801a0ae:	f7e6 f913 	bl	80002d8 <__aeabi_dsub>
 801a0b2:	4602      	mov	r2, r0
 801a0b4:	460b      	mov	r3, r1
 801a0b6:	4650      	mov	r0, sl
 801a0b8:	4659      	mov	r1, fp
 801a0ba:	e610      	b.n	8019cde <__ieee754_pow+0x31e>
 801a0bc:	2401      	movs	r4, #1
 801a0be:	e6a1      	b.n	8019e04 <__ieee754_pow+0x444>
 801a0c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801a110 <__ieee754_pow+0x750>
 801a0c4:	e617      	b.n	8019cf6 <__ieee754_pow+0x336>
 801a0c6:	bf00      	nop
 801a0c8:	4a454eef 	.word	0x4a454eef
 801a0cc:	3fca7e28 	.word	0x3fca7e28
 801a0d0:	93c9db65 	.word	0x93c9db65
 801a0d4:	3fcd864a 	.word	0x3fcd864a
 801a0d8:	a91d4101 	.word	0xa91d4101
 801a0dc:	3fd17460 	.word	0x3fd17460
 801a0e0:	518f264d 	.word	0x518f264d
 801a0e4:	3fd55555 	.word	0x3fd55555
 801a0e8:	db6fabff 	.word	0xdb6fabff
 801a0ec:	3fdb6db6 	.word	0x3fdb6db6
 801a0f0:	33333303 	.word	0x33333303
 801a0f4:	3fe33333 	.word	0x3fe33333
 801a0f8:	e0000000 	.word	0xe0000000
 801a0fc:	3feec709 	.word	0x3feec709
 801a100:	dc3a03fd 	.word	0xdc3a03fd
 801a104:	3feec709 	.word	0x3feec709
 801a108:	145b01f5 	.word	0x145b01f5
 801a10c:	be3e2fe0 	.word	0xbe3e2fe0
 801a110:	00000000 	.word	0x00000000
 801a114:	3ff00000 	.word	0x3ff00000
 801a118:	7ff00000 	.word	0x7ff00000
 801a11c:	43400000 	.word	0x43400000
 801a120:	0003988e 	.word	0x0003988e
 801a124:	000bb679 	.word	0x000bb679
 801a128:	0801c480 	.word	0x0801c480
 801a12c:	3ff00000 	.word	0x3ff00000
 801a130:	40080000 	.word	0x40080000
 801a134:	0801c4a0 	.word	0x0801c4a0
 801a138:	0801c490 	.word	0x0801c490
 801a13c:	a3b3      	add	r3, pc, #716	; (adr r3, 801a40c <__ieee754_pow+0xa4c>)
 801a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a142:	4640      	mov	r0, r8
 801a144:	4649      	mov	r1, r9
 801a146:	f7e6 f8c9 	bl	80002dc <__adddf3>
 801a14a:	4622      	mov	r2, r4
 801a14c:	ec41 0b1a 	vmov	d10, r0, r1
 801a150:	462b      	mov	r3, r5
 801a152:	4630      	mov	r0, r6
 801a154:	4639      	mov	r1, r7
 801a156:	f7e6 f8bf 	bl	80002d8 <__aeabi_dsub>
 801a15a:	4602      	mov	r2, r0
 801a15c:	460b      	mov	r3, r1
 801a15e:	ec51 0b1a 	vmov	r0, r1, d10
 801a162:	f7e6 fd01 	bl	8000b68 <__aeabi_dcmpgt>
 801a166:	2800      	cmp	r0, #0
 801a168:	f47f ae04 	bne.w	8019d74 <__ieee754_pow+0x3b4>
 801a16c:	4aa2      	ldr	r2, [pc, #648]	; (801a3f8 <__ieee754_pow+0xa38>)
 801a16e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a172:	4293      	cmp	r3, r2
 801a174:	f340 8107 	ble.w	801a386 <__ieee754_pow+0x9c6>
 801a178:	151b      	asrs	r3, r3, #20
 801a17a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a17e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a182:	fa4a fa03 	asr.w	sl, sl, r3
 801a186:	44da      	add	sl, fp
 801a188:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a18c:	489b      	ldr	r0, [pc, #620]	; (801a3fc <__ieee754_pow+0xa3c>)
 801a18e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a192:	4108      	asrs	r0, r1
 801a194:	ea00 030a 	and.w	r3, r0, sl
 801a198:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a19c:	f1c1 0114 	rsb	r1, r1, #20
 801a1a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a1a4:	fa4a fa01 	asr.w	sl, sl, r1
 801a1a8:	f1bb 0f00 	cmp.w	fp, #0
 801a1ac:	f04f 0200 	mov.w	r2, #0
 801a1b0:	4620      	mov	r0, r4
 801a1b2:	4629      	mov	r1, r5
 801a1b4:	bfb8      	it	lt
 801a1b6:	f1ca 0a00 	rsblt	sl, sl, #0
 801a1ba:	f7e6 f88d 	bl	80002d8 <__aeabi_dsub>
 801a1be:	ec41 0b19 	vmov	d9, r0, r1
 801a1c2:	4642      	mov	r2, r8
 801a1c4:	464b      	mov	r3, r9
 801a1c6:	ec51 0b19 	vmov	r0, r1, d9
 801a1ca:	f7e6 f887 	bl	80002dc <__adddf3>
 801a1ce:	a37a      	add	r3, pc, #488	; (adr r3, 801a3b8 <__ieee754_pow+0x9f8>)
 801a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d4:	2000      	movs	r0, #0
 801a1d6:	4604      	mov	r4, r0
 801a1d8:	460d      	mov	r5, r1
 801a1da:	f7e6 fa35 	bl	8000648 <__aeabi_dmul>
 801a1de:	ec53 2b19 	vmov	r2, r3, d9
 801a1e2:	4606      	mov	r6, r0
 801a1e4:	460f      	mov	r7, r1
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	4629      	mov	r1, r5
 801a1ea:	f7e6 f875 	bl	80002d8 <__aeabi_dsub>
 801a1ee:	4602      	mov	r2, r0
 801a1f0:	460b      	mov	r3, r1
 801a1f2:	4640      	mov	r0, r8
 801a1f4:	4649      	mov	r1, r9
 801a1f6:	f7e6 f86f 	bl	80002d8 <__aeabi_dsub>
 801a1fa:	a371      	add	r3, pc, #452	; (adr r3, 801a3c0 <__ieee754_pow+0xa00>)
 801a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a200:	f7e6 fa22 	bl	8000648 <__aeabi_dmul>
 801a204:	a370      	add	r3, pc, #448	; (adr r3, 801a3c8 <__ieee754_pow+0xa08>)
 801a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a20a:	4680      	mov	r8, r0
 801a20c:	4689      	mov	r9, r1
 801a20e:	4620      	mov	r0, r4
 801a210:	4629      	mov	r1, r5
 801a212:	f7e6 fa19 	bl	8000648 <__aeabi_dmul>
 801a216:	4602      	mov	r2, r0
 801a218:	460b      	mov	r3, r1
 801a21a:	4640      	mov	r0, r8
 801a21c:	4649      	mov	r1, r9
 801a21e:	f7e6 f85d 	bl	80002dc <__adddf3>
 801a222:	4604      	mov	r4, r0
 801a224:	460d      	mov	r5, r1
 801a226:	4602      	mov	r2, r0
 801a228:	460b      	mov	r3, r1
 801a22a:	4630      	mov	r0, r6
 801a22c:	4639      	mov	r1, r7
 801a22e:	f7e6 f855 	bl	80002dc <__adddf3>
 801a232:	4632      	mov	r2, r6
 801a234:	463b      	mov	r3, r7
 801a236:	4680      	mov	r8, r0
 801a238:	4689      	mov	r9, r1
 801a23a:	f7e6 f84d 	bl	80002d8 <__aeabi_dsub>
 801a23e:	4602      	mov	r2, r0
 801a240:	460b      	mov	r3, r1
 801a242:	4620      	mov	r0, r4
 801a244:	4629      	mov	r1, r5
 801a246:	f7e6 f847 	bl	80002d8 <__aeabi_dsub>
 801a24a:	4642      	mov	r2, r8
 801a24c:	4606      	mov	r6, r0
 801a24e:	460f      	mov	r7, r1
 801a250:	464b      	mov	r3, r9
 801a252:	4640      	mov	r0, r8
 801a254:	4649      	mov	r1, r9
 801a256:	f7e6 f9f7 	bl	8000648 <__aeabi_dmul>
 801a25a:	a35d      	add	r3, pc, #372	; (adr r3, 801a3d0 <__ieee754_pow+0xa10>)
 801a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a260:	4604      	mov	r4, r0
 801a262:	460d      	mov	r5, r1
 801a264:	f7e6 f9f0 	bl	8000648 <__aeabi_dmul>
 801a268:	a35b      	add	r3, pc, #364	; (adr r3, 801a3d8 <__ieee754_pow+0xa18>)
 801a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a26e:	f7e6 f833 	bl	80002d8 <__aeabi_dsub>
 801a272:	4622      	mov	r2, r4
 801a274:	462b      	mov	r3, r5
 801a276:	f7e6 f9e7 	bl	8000648 <__aeabi_dmul>
 801a27a:	a359      	add	r3, pc, #356	; (adr r3, 801a3e0 <__ieee754_pow+0xa20>)
 801a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a280:	f7e6 f82c 	bl	80002dc <__adddf3>
 801a284:	4622      	mov	r2, r4
 801a286:	462b      	mov	r3, r5
 801a288:	f7e6 f9de 	bl	8000648 <__aeabi_dmul>
 801a28c:	a356      	add	r3, pc, #344	; (adr r3, 801a3e8 <__ieee754_pow+0xa28>)
 801a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a292:	f7e6 f821 	bl	80002d8 <__aeabi_dsub>
 801a296:	4622      	mov	r2, r4
 801a298:	462b      	mov	r3, r5
 801a29a:	f7e6 f9d5 	bl	8000648 <__aeabi_dmul>
 801a29e:	a354      	add	r3, pc, #336	; (adr r3, 801a3f0 <__ieee754_pow+0xa30>)
 801a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a4:	f7e6 f81a 	bl	80002dc <__adddf3>
 801a2a8:	4622      	mov	r2, r4
 801a2aa:	462b      	mov	r3, r5
 801a2ac:	f7e6 f9cc 	bl	8000648 <__aeabi_dmul>
 801a2b0:	4602      	mov	r2, r0
 801a2b2:	460b      	mov	r3, r1
 801a2b4:	4640      	mov	r0, r8
 801a2b6:	4649      	mov	r1, r9
 801a2b8:	f7e6 f80e 	bl	80002d8 <__aeabi_dsub>
 801a2bc:	4604      	mov	r4, r0
 801a2be:	460d      	mov	r5, r1
 801a2c0:	4602      	mov	r2, r0
 801a2c2:	460b      	mov	r3, r1
 801a2c4:	4640      	mov	r0, r8
 801a2c6:	4649      	mov	r1, r9
 801a2c8:	f7e6 f9be 	bl	8000648 <__aeabi_dmul>
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	ec41 0b19 	vmov	d9, r0, r1
 801a2d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a2d6:	4620      	mov	r0, r4
 801a2d8:	4629      	mov	r1, r5
 801a2da:	f7e5 fffd 	bl	80002d8 <__aeabi_dsub>
 801a2de:	4602      	mov	r2, r0
 801a2e0:	460b      	mov	r3, r1
 801a2e2:	ec51 0b19 	vmov	r0, r1, d9
 801a2e6:	f7e6 fad9 	bl	800089c <__aeabi_ddiv>
 801a2ea:	4632      	mov	r2, r6
 801a2ec:	4604      	mov	r4, r0
 801a2ee:	460d      	mov	r5, r1
 801a2f0:	463b      	mov	r3, r7
 801a2f2:	4640      	mov	r0, r8
 801a2f4:	4649      	mov	r1, r9
 801a2f6:	f7e6 f9a7 	bl	8000648 <__aeabi_dmul>
 801a2fa:	4632      	mov	r2, r6
 801a2fc:	463b      	mov	r3, r7
 801a2fe:	f7e5 ffed 	bl	80002dc <__adddf3>
 801a302:	4602      	mov	r2, r0
 801a304:	460b      	mov	r3, r1
 801a306:	4620      	mov	r0, r4
 801a308:	4629      	mov	r1, r5
 801a30a:	f7e5 ffe5 	bl	80002d8 <__aeabi_dsub>
 801a30e:	4642      	mov	r2, r8
 801a310:	464b      	mov	r3, r9
 801a312:	f7e5 ffe1 	bl	80002d8 <__aeabi_dsub>
 801a316:	460b      	mov	r3, r1
 801a318:	4602      	mov	r2, r0
 801a31a:	4939      	ldr	r1, [pc, #228]	; (801a400 <__ieee754_pow+0xa40>)
 801a31c:	2000      	movs	r0, #0
 801a31e:	f7e5 ffdb 	bl	80002d8 <__aeabi_dsub>
 801a322:	ec41 0b10 	vmov	d0, r0, r1
 801a326:	ee10 3a90 	vmov	r3, s1
 801a32a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a32e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a332:	da2b      	bge.n	801a38c <__ieee754_pow+0x9cc>
 801a334:	4650      	mov	r0, sl
 801a336:	f000 ff6f 	bl	801b218 <scalbn>
 801a33a:	ec51 0b10 	vmov	r0, r1, d0
 801a33e:	ec53 2b18 	vmov	r2, r3, d8
 801a342:	f7ff bbee 	b.w	8019b22 <__ieee754_pow+0x162>
 801a346:	4b2f      	ldr	r3, [pc, #188]	; (801a404 <__ieee754_pow+0xa44>)
 801a348:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a34c:	429e      	cmp	r6, r3
 801a34e:	f77f af0d 	ble.w	801a16c <__ieee754_pow+0x7ac>
 801a352:	4b2d      	ldr	r3, [pc, #180]	; (801a408 <__ieee754_pow+0xa48>)
 801a354:	440b      	add	r3, r1
 801a356:	4303      	orrs	r3, r0
 801a358:	d009      	beq.n	801a36e <__ieee754_pow+0x9ae>
 801a35a:	ec51 0b18 	vmov	r0, r1, d8
 801a35e:	2200      	movs	r2, #0
 801a360:	2300      	movs	r3, #0
 801a362:	f7e6 fbe3 	bl	8000b2c <__aeabi_dcmplt>
 801a366:	3800      	subs	r0, #0
 801a368:	bf18      	it	ne
 801a36a:	2001      	movne	r0, #1
 801a36c:	e448      	b.n	8019c00 <__ieee754_pow+0x240>
 801a36e:	4622      	mov	r2, r4
 801a370:	462b      	mov	r3, r5
 801a372:	f7e5 ffb1 	bl	80002d8 <__aeabi_dsub>
 801a376:	4642      	mov	r2, r8
 801a378:	464b      	mov	r3, r9
 801a37a:	f7e6 fbeb 	bl	8000b54 <__aeabi_dcmpge>
 801a37e:	2800      	cmp	r0, #0
 801a380:	f43f aef4 	beq.w	801a16c <__ieee754_pow+0x7ac>
 801a384:	e7e9      	b.n	801a35a <__ieee754_pow+0x99a>
 801a386:	f04f 0a00 	mov.w	sl, #0
 801a38a:	e71a      	b.n	801a1c2 <__ieee754_pow+0x802>
 801a38c:	ec51 0b10 	vmov	r0, r1, d0
 801a390:	4619      	mov	r1, r3
 801a392:	e7d4      	b.n	801a33e <__ieee754_pow+0x97e>
 801a394:	491a      	ldr	r1, [pc, #104]	; (801a400 <__ieee754_pow+0xa40>)
 801a396:	2000      	movs	r0, #0
 801a398:	f7ff bb31 	b.w	80199fe <__ieee754_pow+0x3e>
 801a39c:	2000      	movs	r0, #0
 801a39e:	2100      	movs	r1, #0
 801a3a0:	f7ff bb2d 	b.w	80199fe <__ieee754_pow+0x3e>
 801a3a4:	4630      	mov	r0, r6
 801a3a6:	4639      	mov	r1, r7
 801a3a8:	f7ff bb29 	b.w	80199fe <__ieee754_pow+0x3e>
 801a3ac:	9204      	str	r2, [sp, #16]
 801a3ae:	f7ff bb7b 	b.w	8019aa8 <__ieee754_pow+0xe8>
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	f7ff bb65 	b.w	8019a82 <__ieee754_pow+0xc2>
 801a3b8:	00000000 	.word	0x00000000
 801a3bc:	3fe62e43 	.word	0x3fe62e43
 801a3c0:	fefa39ef 	.word	0xfefa39ef
 801a3c4:	3fe62e42 	.word	0x3fe62e42
 801a3c8:	0ca86c39 	.word	0x0ca86c39
 801a3cc:	be205c61 	.word	0xbe205c61
 801a3d0:	72bea4d0 	.word	0x72bea4d0
 801a3d4:	3e663769 	.word	0x3e663769
 801a3d8:	c5d26bf1 	.word	0xc5d26bf1
 801a3dc:	3ebbbd41 	.word	0x3ebbbd41
 801a3e0:	af25de2c 	.word	0xaf25de2c
 801a3e4:	3f11566a 	.word	0x3f11566a
 801a3e8:	16bebd93 	.word	0x16bebd93
 801a3ec:	3f66c16c 	.word	0x3f66c16c
 801a3f0:	5555553e 	.word	0x5555553e
 801a3f4:	3fc55555 	.word	0x3fc55555
 801a3f8:	3fe00000 	.word	0x3fe00000
 801a3fc:	fff00000 	.word	0xfff00000
 801a400:	3ff00000 	.word	0x3ff00000
 801a404:	4090cbff 	.word	0x4090cbff
 801a408:	3f6f3400 	.word	0x3f6f3400
 801a40c:	652b82fe 	.word	0x652b82fe
 801a410:	3c971547 	.word	0x3c971547

0801a414 <fabs>:
 801a414:	ec51 0b10 	vmov	r0, r1, d0
 801a418:	ee10 2a10 	vmov	r2, s0
 801a41c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a420:	ec43 2b10 	vmov	d0, r2, r3
 801a424:	4770      	bx	lr
	...

0801a428 <__kernel_cosf>:
 801a428:	ee10 3a10 	vmov	r3, s0
 801a42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a430:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a438:	da05      	bge.n	801a446 <__kernel_cosf+0x1e>
 801a43a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a43e:	ee17 2a90 	vmov	r2, s15
 801a442:	2a00      	cmp	r2, #0
 801a444:	d03b      	beq.n	801a4be <__kernel_cosf+0x96>
 801a446:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a44a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a4c4 <__kernel_cosf+0x9c>
 801a44e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801a4c8 <__kernel_cosf+0xa0>
 801a452:	4a1e      	ldr	r2, [pc, #120]	; (801a4cc <__kernel_cosf+0xa4>)
 801a454:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a458:	4293      	cmp	r3, r2
 801a45a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801a4d0 <__kernel_cosf+0xa8>
 801a45e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a462:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801a4d4 <__kernel_cosf+0xac>
 801a466:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a46a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801a4d8 <__kernel_cosf+0xb0>
 801a46e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a472:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801a4dc <__kernel_cosf+0xb4>
 801a476:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a47a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801a47e:	ee26 6a07 	vmul.f32	s12, s12, s14
 801a482:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a486:	eee7 0a06 	vfma.f32	s1, s14, s12
 801a48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a48e:	dc04      	bgt.n	801a49a <__kernel_cosf+0x72>
 801a490:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a494:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801a498:	4770      	bx	lr
 801a49a:	4a11      	ldr	r2, [pc, #68]	; (801a4e0 <__kernel_cosf+0xb8>)
 801a49c:	4293      	cmp	r3, r2
 801a49e:	bfda      	itte	le
 801a4a0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a4a4:	ee07 3a10 	vmovle	s14, r3
 801a4a8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801a4ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a4b0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801a4b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a4b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a4bc:	4770      	bx	lr
 801a4be:	eeb0 0a66 	vmov.f32	s0, s13
 801a4c2:	4770      	bx	lr
 801a4c4:	ad47d74e 	.word	0xad47d74e
 801a4c8:	310f74f6 	.word	0x310f74f6
 801a4cc:	3e999999 	.word	0x3e999999
 801a4d0:	b493f27c 	.word	0xb493f27c
 801a4d4:	37d00d01 	.word	0x37d00d01
 801a4d8:	bab60b61 	.word	0xbab60b61
 801a4dc:	3d2aaaab 	.word	0x3d2aaaab
 801a4e0:	3f480000 	.word	0x3f480000

0801a4e4 <__kernel_sinf>:
 801a4e4:	ee10 3a10 	vmov	r3, s0
 801a4e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a4ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a4f0:	da04      	bge.n	801a4fc <__kernel_sinf+0x18>
 801a4f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a4f6:	ee17 3a90 	vmov	r3, s15
 801a4fa:	b35b      	cbz	r3, 801a554 <__kernel_sinf+0x70>
 801a4fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a500:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a558 <__kernel_sinf+0x74>
 801a504:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a55c <__kernel_sinf+0x78>
 801a508:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a50c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a560 <__kernel_sinf+0x7c>
 801a510:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a514:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801a564 <__kernel_sinf+0x80>
 801a518:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a51c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801a568 <__kernel_sinf+0x84>
 801a520:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a524:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a528:	b930      	cbnz	r0, 801a538 <__kernel_sinf+0x54>
 801a52a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a56c <__kernel_sinf+0x88>
 801a52e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a532:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a536:	4770      	bx	lr
 801a538:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a53c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a540:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a544:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a548:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a570 <__kernel_sinf+0x8c>
 801a54c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a550:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop
 801a558:	2f2ec9d3 	.word	0x2f2ec9d3
 801a55c:	b2d72f34 	.word	0xb2d72f34
 801a560:	3638ef1b 	.word	0x3638ef1b
 801a564:	b9500d01 	.word	0xb9500d01
 801a568:	3c088889 	.word	0x3c088889
 801a56c:	be2aaaab 	.word	0xbe2aaaab
 801a570:	3e2aaaab 	.word	0x3e2aaaab

0801a574 <__ieee754_asinf>:
 801a574:	b538      	push	{r3, r4, r5, lr}
 801a576:	ee10 5a10 	vmov	r5, s0
 801a57a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a57e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801a582:	ed2d 8b04 	vpush	{d8-d9}
 801a586:	d10c      	bne.n	801a5a2 <__ieee754_asinf+0x2e>
 801a588:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801a700 <__ieee754_asinf+0x18c>
 801a58c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801a704 <__ieee754_asinf+0x190>
 801a590:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a594:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a598:	eeb0 0a67 	vmov.f32	s0, s15
 801a59c:	ecbd 8b04 	vpop	{d8-d9}
 801a5a0:	bd38      	pop	{r3, r4, r5, pc}
 801a5a2:	dd04      	ble.n	801a5ae <__ieee754_asinf+0x3a>
 801a5a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a5a8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a5ac:	e7f6      	b.n	801a59c <__ieee754_asinf+0x28>
 801a5ae:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801a5b2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a5b6:	da0b      	bge.n	801a5d0 <__ieee754_asinf+0x5c>
 801a5b8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801a5bc:	da52      	bge.n	801a664 <__ieee754_asinf+0xf0>
 801a5be:	eddf 7a52 	vldr	s15, [pc, #328]	; 801a708 <__ieee754_asinf+0x194>
 801a5c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a5c6:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ce:	dce5      	bgt.n	801a59c <__ieee754_asinf+0x28>
 801a5d0:	f7ff f8b3 	bl	801973a <fabsf>
 801a5d4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801a5d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a5dc:	ee20 8a27 	vmul.f32	s16, s0, s15
 801a5e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801a70c <__ieee754_asinf+0x198>
 801a5e4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801a710 <__ieee754_asinf+0x19c>
 801a5e8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801a714 <__ieee754_asinf+0x1a0>
 801a5ec:	eea8 7a27 	vfma.f32	s14, s16, s15
 801a5f0:	eddf 7a49 	vldr	s15, [pc, #292]	; 801a718 <__ieee754_asinf+0x1a4>
 801a5f4:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a5f8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801a71c <__ieee754_asinf+0x1a8>
 801a5fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a600:	eddf 7a47 	vldr	s15, [pc, #284]	; 801a720 <__ieee754_asinf+0x1ac>
 801a604:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a608:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801a724 <__ieee754_asinf+0x1b0>
 801a60c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801a610:	eddf 7a45 	vldr	s15, [pc, #276]	; 801a728 <__ieee754_asinf+0x1b4>
 801a614:	eee8 7a07 	vfma.f32	s15, s16, s14
 801a618:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801a72c <__ieee754_asinf+0x1b8>
 801a61c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801a620:	eddf 7a43 	vldr	s15, [pc, #268]	; 801a730 <__ieee754_asinf+0x1bc>
 801a624:	eee7 7a08 	vfma.f32	s15, s14, s16
 801a628:	eeb0 0a48 	vmov.f32	s0, s16
 801a62c:	eee7 8a88 	vfma.f32	s17, s15, s16
 801a630:	f7ff f9c2 	bl	80199b8 <__ieee754_sqrtf>
 801a634:	4b3f      	ldr	r3, [pc, #252]	; (801a734 <__ieee754_asinf+0x1c0>)
 801a636:	ee29 9a08 	vmul.f32	s18, s18, s16
 801a63a:	429c      	cmp	r4, r3
 801a63c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801a640:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a644:	dd3d      	ble.n	801a6c2 <__ieee754_asinf+0x14e>
 801a646:	eea0 0a06 	vfma.f32	s0, s0, s12
 801a64a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801a738 <__ieee754_asinf+0x1c4>
 801a64e:	eee0 7a26 	vfma.f32	s15, s0, s13
 801a652:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801a704 <__ieee754_asinf+0x190>
 801a656:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a65a:	2d00      	cmp	r5, #0
 801a65c:	bfd8      	it	le
 801a65e:	eeb1 0a40 	vnegle.f32	s0, s0
 801a662:	e79b      	b.n	801a59c <__ieee754_asinf+0x28>
 801a664:	ee60 7a00 	vmul.f32	s15, s0, s0
 801a668:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a710 <__ieee754_asinf+0x19c>
 801a66c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801a70c <__ieee754_asinf+0x198>
 801a670:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801a724 <__ieee754_asinf+0x1b0>
 801a674:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801a678:	eddf 6a27 	vldr	s13, [pc, #156]	; 801a718 <__ieee754_asinf+0x1a4>
 801a67c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a680:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801a71c <__ieee754_asinf+0x1a8>
 801a684:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a688:	eddf 6a25 	vldr	s13, [pc, #148]	; 801a720 <__ieee754_asinf+0x1ac>
 801a68c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a690:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801a714 <__ieee754_asinf+0x1a0>
 801a694:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a698:	eddf 6a23 	vldr	s13, [pc, #140]	; 801a728 <__ieee754_asinf+0x1b4>
 801a69c:	eee7 6a86 	vfma.f32	s13, s15, s12
 801a6a0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801a72c <__ieee754_asinf+0x1b8>
 801a6a4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801a6a8:	eddf 6a21 	vldr	s13, [pc, #132]	; 801a730 <__ieee754_asinf+0x1bc>
 801a6ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a6b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a6b4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801a6b8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801a6bc:	eea0 0a27 	vfma.f32	s0, s0, s15
 801a6c0:	e76c      	b.n	801a59c <__ieee754_asinf+0x28>
 801a6c2:	ee10 3a10 	vmov	r3, s0
 801a6c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801a6ca:	f023 030f 	bic.w	r3, r3, #15
 801a6ce:	ee07 3a10 	vmov	s14, r3
 801a6d2:	eea7 8a47 	vfms.f32	s16, s14, s14
 801a6d6:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a6da:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a6de:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801a6e2:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a700 <__ieee754_asinf+0x18c>
 801a6e6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801a6ea:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801a6ee:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801a73c <__ieee754_asinf+0x1c8>
 801a6f2:	eeb0 6a40 	vmov.f32	s12, s0
 801a6f6:	eea7 6a66 	vfms.f32	s12, s14, s13
 801a6fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a6fe:	e7aa      	b.n	801a656 <__ieee754_asinf+0xe2>
 801a700:	b33bbd2e 	.word	0xb33bbd2e
 801a704:	3fc90fdb 	.word	0x3fc90fdb
 801a708:	7149f2ca 	.word	0x7149f2ca
 801a70c:	3a4f7f04 	.word	0x3a4f7f04
 801a710:	3811ef08 	.word	0x3811ef08
 801a714:	3e2aaaab 	.word	0x3e2aaaab
 801a718:	bd241146 	.word	0xbd241146
 801a71c:	3e4e0aa8 	.word	0x3e4e0aa8
 801a720:	bea6b090 	.word	0xbea6b090
 801a724:	3d9dc62e 	.word	0x3d9dc62e
 801a728:	bf303361 	.word	0xbf303361
 801a72c:	4001572d 	.word	0x4001572d
 801a730:	c019d139 	.word	0xc019d139
 801a734:	3f799999 	.word	0x3f799999
 801a738:	333bbd2e 	.word	0x333bbd2e
 801a73c:	3f490fdb 	.word	0x3f490fdb

0801a740 <__ieee754_atan2f>:
 801a740:	ee10 2a90 	vmov	r2, s1
 801a744:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801a748:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a74c:	b510      	push	{r4, lr}
 801a74e:	eef0 7a40 	vmov.f32	s15, s0
 801a752:	dc06      	bgt.n	801a762 <__ieee754_atan2f+0x22>
 801a754:	ee10 0a10 	vmov	r0, s0
 801a758:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801a75c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a760:	dd04      	ble.n	801a76c <__ieee754_atan2f+0x2c>
 801a762:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801a766:	eeb0 0a67 	vmov.f32	s0, s15
 801a76a:	bd10      	pop	{r4, pc}
 801a76c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801a770:	d103      	bne.n	801a77a <__ieee754_atan2f+0x3a>
 801a772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a776:	f000 bc79 	b.w	801b06c <atanf>
 801a77a:	1794      	asrs	r4, r2, #30
 801a77c:	f004 0402 	and.w	r4, r4, #2
 801a780:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801a784:	b943      	cbnz	r3, 801a798 <__ieee754_atan2f+0x58>
 801a786:	2c02      	cmp	r4, #2
 801a788:	d05e      	beq.n	801a848 <__ieee754_atan2f+0x108>
 801a78a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801a85c <__ieee754_atan2f+0x11c>
 801a78e:	2c03      	cmp	r4, #3
 801a790:	bf08      	it	eq
 801a792:	eef0 7a47 	vmoveq.f32	s15, s14
 801a796:	e7e6      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a798:	b941      	cbnz	r1, 801a7ac <__ieee754_atan2f+0x6c>
 801a79a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801a860 <__ieee754_atan2f+0x120>
 801a79e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801a864 <__ieee754_atan2f+0x124>
 801a7a2:	2800      	cmp	r0, #0
 801a7a4:	bfb8      	it	lt
 801a7a6:	eef0 7a47 	vmovlt.f32	s15, s14
 801a7aa:	e7dc      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a7ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a7b0:	d110      	bne.n	801a7d4 <__ieee754_atan2f+0x94>
 801a7b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a7b6:	f104 34ff 	add.w	r4, r4, #4294967295
 801a7ba:	d107      	bne.n	801a7cc <__ieee754_atan2f+0x8c>
 801a7bc:	2c02      	cmp	r4, #2
 801a7be:	d846      	bhi.n	801a84e <__ieee754_atan2f+0x10e>
 801a7c0:	4b29      	ldr	r3, [pc, #164]	; (801a868 <__ieee754_atan2f+0x128>)
 801a7c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a7c6:	edd3 7a00 	vldr	s15, [r3]
 801a7ca:	e7cc      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a7cc:	2c02      	cmp	r4, #2
 801a7ce:	d841      	bhi.n	801a854 <__ieee754_atan2f+0x114>
 801a7d0:	4b26      	ldr	r3, [pc, #152]	; (801a86c <__ieee754_atan2f+0x12c>)
 801a7d2:	e7f6      	b.n	801a7c2 <__ieee754_atan2f+0x82>
 801a7d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a7d8:	d0df      	beq.n	801a79a <__ieee754_atan2f+0x5a>
 801a7da:	1a5b      	subs	r3, r3, r1
 801a7dc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801a7e0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801a7e4:	da1a      	bge.n	801a81c <__ieee754_atan2f+0xdc>
 801a7e6:	2a00      	cmp	r2, #0
 801a7e8:	da01      	bge.n	801a7ee <__ieee754_atan2f+0xae>
 801a7ea:	313c      	adds	r1, #60	; 0x3c
 801a7ec:	db19      	blt.n	801a822 <__ieee754_atan2f+0xe2>
 801a7ee:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801a7f2:	f7fe ffa2 	bl	801973a <fabsf>
 801a7f6:	f000 fc39 	bl	801b06c <atanf>
 801a7fa:	eef0 7a40 	vmov.f32	s15, s0
 801a7fe:	2c01      	cmp	r4, #1
 801a800:	d012      	beq.n	801a828 <__ieee754_atan2f+0xe8>
 801a802:	2c02      	cmp	r4, #2
 801a804:	d017      	beq.n	801a836 <__ieee754_atan2f+0xf6>
 801a806:	2c00      	cmp	r4, #0
 801a808:	d0ad      	beq.n	801a766 <__ieee754_atan2f+0x26>
 801a80a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a870 <__ieee754_atan2f+0x130>
 801a80e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a812:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801a874 <__ieee754_atan2f+0x134>
 801a816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a81a:	e7a4      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a81c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801a860 <__ieee754_atan2f+0x120>
 801a820:	e7ed      	b.n	801a7fe <__ieee754_atan2f+0xbe>
 801a822:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a878 <__ieee754_atan2f+0x138>
 801a826:	e7ea      	b.n	801a7fe <__ieee754_atan2f+0xbe>
 801a828:	ee17 3a90 	vmov	r3, s15
 801a82c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a830:	ee07 3a90 	vmov	s15, r3
 801a834:	e797      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a836:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801a870 <__ieee754_atan2f+0x130>
 801a83a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a83e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801a874 <__ieee754_atan2f+0x134>
 801a842:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a846:	e78e      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a848:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801a874 <__ieee754_atan2f+0x134>
 801a84c:	e78b      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a84e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801a87c <__ieee754_atan2f+0x13c>
 801a852:	e788      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a854:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a878 <__ieee754_atan2f+0x138>
 801a858:	e785      	b.n	801a766 <__ieee754_atan2f+0x26>
 801a85a:	bf00      	nop
 801a85c:	c0490fdb 	.word	0xc0490fdb
 801a860:	3fc90fdb 	.word	0x3fc90fdb
 801a864:	bfc90fdb 	.word	0xbfc90fdb
 801a868:	0801c4b0 	.word	0x0801c4b0
 801a86c:	0801c4bc 	.word	0x0801c4bc
 801a870:	33bbbd2e 	.word	0x33bbbd2e
 801a874:	40490fdb 	.word	0x40490fdb
 801a878:	00000000 	.word	0x00000000
 801a87c:	3f490fdb 	.word	0x3f490fdb

0801a880 <__ieee754_powf>:
 801a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a884:	ee10 4a90 	vmov	r4, s1
 801a888:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801a88c:	ed2d 8b02 	vpush	{d8}
 801a890:	ee10 7a10 	vmov	r7, s0
 801a894:	eeb0 8a40 	vmov.f32	s16, s0
 801a898:	eef0 8a60 	vmov.f32	s17, s1
 801a89c:	d10c      	bne.n	801a8b8 <__ieee754_powf+0x38>
 801a89e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801a8a2:	007f      	lsls	r7, r7, #1
 801a8a4:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801a8a8:	f240 8292 	bls.w	801add0 <__ieee754_powf+0x550>
 801a8ac:	ee38 0a28 	vadd.f32	s0, s16, s17
 801a8b0:	ecbd 8b02 	vpop	{d8}
 801a8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8b8:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 801a8bc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a8c0:	dcf4      	bgt.n	801a8ac <__ieee754_powf+0x2c>
 801a8c2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801a8c6:	dd08      	ble.n	801a8da <__ieee754_powf+0x5a>
 801a8c8:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801a8cc:	d1ee      	bne.n	801a8ac <__ieee754_powf+0x2c>
 801a8ce:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801a8d2:	0064      	lsls	r4, r4, #1
 801a8d4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801a8d8:	e7e6      	b.n	801a8a8 <__ieee754_powf+0x28>
 801a8da:	2f00      	cmp	r7, #0
 801a8dc:	da20      	bge.n	801a920 <__ieee754_powf+0xa0>
 801a8de:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801a8e2:	da2d      	bge.n	801a940 <__ieee754_powf+0xc0>
 801a8e4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801a8e8:	f2c0 827b 	blt.w	801ade2 <__ieee754_powf+0x562>
 801a8ec:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801a8f0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801a8f4:	fa48 f603 	asr.w	r6, r8, r3
 801a8f8:	fa06 f303 	lsl.w	r3, r6, r3
 801a8fc:	4543      	cmp	r3, r8
 801a8fe:	f040 8270 	bne.w	801ade2 <__ieee754_powf+0x562>
 801a902:	f006 0601 	and.w	r6, r6, #1
 801a906:	f1c6 0602 	rsb	r6, r6, #2
 801a90a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801a90e:	d11f      	bne.n	801a950 <__ieee754_powf+0xd0>
 801a910:	2c00      	cmp	r4, #0
 801a912:	f280 8263 	bge.w	801addc <__ieee754_powf+0x55c>
 801a916:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a91a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801a91e:	e7c7      	b.n	801a8b0 <__ieee754_powf+0x30>
 801a920:	2600      	movs	r6, #0
 801a922:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801a926:	d1f0      	bne.n	801a90a <__ieee754_powf+0x8a>
 801a928:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801a92c:	f000 8250 	beq.w	801add0 <__ieee754_powf+0x550>
 801a930:	dd08      	ble.n	801a944 <__ieee754_powf+0xc4>
 801a932:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801ac38 <__ieee754_powf+0x3b8>
 801a936:	2c00      	cmp	r4, #0
 801a938:	bfa8      	it	ge
 801a93a:	eeb0 0a68 	vmovge.f32	s0, s17
 801a93e:	e7b7      	b.n	801a8b0 <__ieee754_powf+0x30>
 801a940:	2602      	movs	r6, #2
 801a942:	e7ee      	b.n	801a922 <__ieee754_powf+0xa2>
 801a944:	2c00      	cmp	r4, #0
 801a946:	f280 8246 	bge.w	801add6 <__ieee754_powf+0x556>
 801a94a:	eeb1 0a68 	vneg.f32	s0, s17
 801a94e:	e7af      	b.n	801a8b0 <__ieee754_powf+0x30>
 801a950:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801a954:	d102      	bne.n	801a95c <__ieee754_powf+0xdc>
 801a956:	ee28 0a08 	vmul.f32	s0, s16, s16
 801a95a:	e7a9      	b.n	801a8b0 <__ieee754_powf+0x30>
 801a95c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801a960:	eeb0 0a48 	vmov.f32	s0, s16
 801a964:	d107      	bne.n	801a976 <__ieee754_powf+0xf6>
 801a966:	2f00      	cmp	r7, #0
 801a968:	db05      	blt.n	801a976 <__ieee754_powf+0xf6>
 801a96a:	ecbd 8b02 	vpop	{d8}
 801a96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a972:	f7ff b821 	b.w	80199b8 <__ieee754_sqrtf>
 801a976:	f7fe fee0 	bl	801973a <fabsf>
 801a97a:	b125      	cbz	r5, 801a986 <__ieee754_powf+0x106>
 801a97c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 801a980:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801a984:	d115      	bne.n	801a9b2 <__ieee754_powf+0x132>
 801a986:	2c00      	cmp	r4, #0
 801a988:	bfbc      	itt	lt
 801a98a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801a98e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801a992:	2f00      	cmp	r7, #0
 801a994:	da8c      	bge.n	801a8b0 <__ieee754_powf+0x30>
 801a996:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801a99a:	4335      	orrs	r5, r6
 801a99c:	d104      	bne.n	801a9a8 <__ieee754_powf+0x128>
 801a99e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a9a2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a9a6:	e783      	b.n	801a8b0 <__ieee754_powf+0x30>
 801a9a8:	2e01      	cmp	r6, #1
 801a9aa:	d181      	bne.n	801a8b0 <__ieee754_powf+0x30>
 801a9ac:	eeb1 0a40 	vneg.f32	s0, s0
 801a9b0:	e77e      	b.n	801a8b0 <__ieee754_powf+0x30>
 801a9b2:	0ff8      	lsrs	r0, r7, #31
 801a9b4:	3801      	subs	r0, #1
 801a9b6:	ea56 0300 	orrs.w	r3, r6, r0
 801a9ba:	d104      	bne.n	801a9c6 <__ieee754_powf+0x146>
 801a9bc:	ee38 8a48 	vsub.f32	s16, s16, s16
 801a9c0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801a9c4:	e774      	b.n	801a8b0 <__ieee754_powf+0x30>
 801a9c6:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801a9ca:	dd73      	ble.n	801aab4 <__ieee754_powf+0x234>
 801a9cc:	4b9b      	ldr	r3, [pc, #620]	; (801ac3c <__ieee754_powf+0x3bc>)
 801a9ce:	429d      	cmp	r5, r3
 801a9d0:	dc08      	bgt.n	801a9e4 <__ieee754_powf+0x164>
 801a9d2:	2c00      	cmp	r4, #0
 801a9d4:	da0b      	bge.n	801a9ee <__ieee754_powf+0x16e>
 801a9d6:	2000      	movs	r0, #0
 801a9d8:	ecbd 8b02 	vpop	{d8}
 801a9dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9e0:	f000 bd4a 	b.w	801b478 <__math_oflowf>
 801a9e4:	4b96      	ldr	r3, [pc, #600]	; (801ac40 <__ieee754_powf+0x3c0>)
 801a9e6:	429d      	cmp	r5, r3
 801a9e8:	dd08      	ble.n	801a9fc <__ieee754_powf+0x17c>
 801a9ea:	2c00      	cmp	r4, #0
 801a9ec:	dcf3      	bgt.n	801a9d6 <__ieee754_powf+0x156>
 801a9ee:	2000      	movs	r0, #0
 801a9f0:	ecbd 8b02 	vpop	{d8}
 801a9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9f8:	f000 bd38 	b.w	801b46c <__math_uflowf>
 801a9fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801aa00:	ee30 0a67 	vsub.f32	s0, s0, s15
 801aa04:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801ac44 <__ieee754_powf+0x3c4>
 801aa08:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801aa0c:	eee0 6a67 	vfms.f32	s13, s0, s15
 801aa10:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801aa14:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801aa18:	ee20 7a00 	vmul.f32	s14, s0, s0
 801aa1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801aa20:	eddf 7a89 	vldr	s15, [pc, #548]	; 801ac48 <__ieee754_powf+0x3c8>
 801aa24:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801aa28:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801ac4c <__ieee754_powf+0x3cc>
 801aa2c:	eee0 7a07 	vfma.f32	s15, s0, s14
 801aa30:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801ac50 <__ieee754_powf+0x3d0>
 801aa34:	eef0 6a67 	vmov.f32	s13, s15
 801aa38:	eee0 6a07 	vfma.f32	s13, s0, s14
 801aa3c:	ee16 3a90 	vmov	r3, s13
 801aa40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801aa44:	f023 030f 	bic.w	r3, r3, #15
 801aa48:	ee06 3a90 	vmov	s13, r3
 801aa4c:	eee0 6a47 	vfms.f32	s13, s0, s14
 801aa50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801aa54:	3e01      	subs	r6, #1
 801aa56:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801aa5a:	4306      	orrs	r6, r0
 801aa5c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801aa60:	f024 040f 	bic.w	r4, r4, #15
 801aa64:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801aa68:	bf08      	it	eq
 801aa6a:	eeb0 8a47 	vmoveq.f32	s16, s14
 801aa6e:	ee07 4a10 	vmov	s14, r4
 801aa72:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801aa76:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801aa7a:	ee07 3a90 	vmov	s15, r3
 801aa7e:	eee7 0a27 	vfma.f32	s1, s14, s15
 801aa82:	ee07 4a10 	vmov	s14, r4
 801aa86:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aa8a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801aa8e:	ee17 1a10 	vmov	r1, s14
 801aa92:	2900      	cmp	r1, #0
 801aa94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aa98:	f340 817c 	ble.w	801ad94 <__ieee754_powf+0x514>
 801aa9c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801aaa0:	f340 80f8 	ble.w	801ac94 <__ieee754_powf+0x414>
 801aaa4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801aaa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaac:	bf4c      	ite	mi
 801aaae:	2001      	movmi	r0, #1
 801aab0:	2000      	movpl	r0, #0
 801aab2:	e791      	b.n	801a9d8 <__ieee754_powf+0x158>
 801aab4:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 801aab8:	bf01      	itttt	eq
 801aaba:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801ac54 <__ieee754_powf+0x3d4>
 801aabe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801aac2:	f06f 0317 	mvneq.w	r3, #23
 801aac6:	ee17 5a90 	vmoveq	r5, s15
 801aaca:	ea4f 52e5 	mov.w	r2, r5, asr #23
 801aace:	bf18      	it	ne
 801aad0:	2300      	movne	r3, #0
 801aad2:	3a7f      	subs	r2, #127	; 0x7f
 801aad4:	441a      	add	r2, r3
 801aad6:	4b60      	ldr	r3, [pc, #384]	; (801ac58 <__ieee754_powf+0x3d8>)
 801aad8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801aadc:	429d      	cmp	r5, r3
 801aade:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801aae2:	dd06      	ble.n	801aaf2 <__ieee754_powf+0x272>
 801aae4:	4b5d      	ldr	r3, [pc, #372]	; (801ac5c <__ieee754_powf+0x3dc>)
 801aae6:	429d      	cmp	r5, r3
 801aae8:	f340 80a4 	ble.w	801ac34 <__ieee754_powf+0x3b4>
 801aaec:	3201      	adds	r2, #1
 801aaee:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801aaf2:	2500      	movs	r5, #0
 801aaf4:	4b5a      	ldr	r3, [pc, #360]	; (801ac60 <__ieee754_powf+0x3e0>)
 801aaf6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801aafa:	ee07 1a10 	vmov	s14, r1
 801aafe:	edd3 5a00 	vldr	s11, [r3]
 801ab02:	4b58      	ldr	r3, [pc, #352]	; (801ac64 <__ieee754_powf+0x3e4>)
 801ab04:	ee75 7a87 	vadd.f32	s15, s11, s14
 801ab08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ab0c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801ab10:	1049      	asrs	r1, r1, #1
 801ab12:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801ab16:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801ab1a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801ab1e:	ee37 6a65 	vsub.f32	s12, s14, s11
 801ab22:	ee07 1a90 	vmov	s15, r1
 801ab26:	ee26 5a24 	vmul.f32	s10, s12, s9
 801ab2a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801ab2e:	ee15 7a10 	vmov	r7, s10
 801ab32:	401f      	ands	r7, r3
 801ab34:	ee06 7a90 	vmov	s13, r7
 801ab38:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801ab3c:	ee37 7a65 	vsub.f32	s14, s14, s11
 801ab40:	ee65 7a05 	vmul.f32	s15, s10, s10
 801ab44:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801ab48:	eddf 5a47 	vldr	s11, [pc, #284]	; 801ac68 <__ieee754_powf+0x3e8>
 801ab4c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801ac6c <__ieee754_powf+0x3ec>
 801ab50:	eee7 5a87 	vfma.f32	s11, s15, s14
 801ab54:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801ac70 <__ieee754_powf+0x3f0>
 801ab58:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801ab5c:	eddf 5a39 	vldr	s11, [pc, #228]	; 801ac44 <__ieee754_powf+0x3c4>
 801ab60:	eee7 5a27 	vfma.f32	s11, s14, s15
 801ab64:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801ac74 <__ieee754_powf+0x3f4>
 801ab68:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801ab6c:	eddf 5a42 	vldr	s11, [pc, #264]	; 801ac78 <__ieee754_powf+0x3f8>
 801ab70:	ee26 6a24 	vmul.f32	s12, s12, s9
 801ab74:	eee7 5a27 	vfma.f32	s11, s14, s15
 801ab78:	ee35 7a26 	vadd.f32	s14, s10, s13
 801ab7c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801ab80:	ee27 7a06 	vmul.f32	s14, s14, s12
 801ab84:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801ab88:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801ab8c:	eef0 5a67 	vmov.f32	s11, s15
 801ab90:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801ab94:	ee75 5a87 	vadd.f32	s11, s11, s14
 801ab98:	ee15 1a90 	vmov	r1, s11
 801ab9c:	4019      	ands	r1, r3
 801ab9e:	ee05 1a90 	vmov	s11, r1
 801aba2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801aba6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801abaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801abae:	ee67 7a85 	vmul.f32	s15, s15, s10
 801abb2:	eee6 7a25 	vfma.f32	s15, s12, s11
 801abb6:	eeb0 6a67 	vmov.f32	s12, s15
 801abba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801abbe:	ee16 1a10 	vmov	r1, s12
 801abc2:	4019      	ands	r1, r3
 801abc4:	ee07 1a10 	vmov	s14, r1
 801abc8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801abcc:	ee06 1a10 	vmov	s12, r1
 801abd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801abd4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801ac7c <__ieee754_powf+0x3fc>
 801abd8:	4929      	ldr	r1, [pc, #164]	; (801ac80 <__ieee754_powf+0x400>)
 801abda:	eddf 5a2a 	vldr	s11, [pc, #168]	; 801ac84 <__ieee754_powf+0x404>
 801abde:	ee67 7a87 	vmul.f32	s15, s15, s14
 801abe2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801ac88 <__ieee754_powf+0x408>
 801abe6:	eee6 7a07 	vfma.f32	s15, s12, s14
 801abea:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801abee:	ed91 7a00 	vldr	s14, [r1]
 801abf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801abf6:	ee07 2a10 	vmov	s14, r2
 801abfa:	eef0 6a67 	vmov.f32	s13, s15
 801abfe:	4a23      	ldr	r2, [pc, #140]	; (801ac8c <__ieee754_powf+0x40c>)
 801ac00:	eee6 6a25 	vfma.f32	s13, s12, s11
 801ac04:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801ac08:	ed92 5a00 	vldr	s10, [r2]
 801ac0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ac10:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ac14:	ee76 6a87 	vadd.f32	s13, s13, s14
 801ac18:	ee16 2a90 	vmov	r2, s13
 801ac1c:	4013      	ands	r3, r2
 801ac1e:	ee06 3a90 	vmov	s13, r3
 801ac22:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801ac26:	ee37 7a45 	vsub.f32	s14, s14, s10
 801ac2a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801ac2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ac32:	e70f      	b.n	801aa54 <__ieee754_powf+0x1d4>
 801ac34:	2501      	movs	r5, #1
 801ac36:	e75d      	b.n	801aaf4 <__ieee754_powf+0x274>
 801ac38:	00000000 	.word	0x00000000
 801ac3c:	3f7ffff3 	.word	0x3f7ffff3
 801ac40:	3f800007 	.word	0x3f800007
 801ac44:	3eaaaaab 	.word	0x3eaaaaab
 801ac48:	3fb8aa3b 	.word	0x3fb8aa3b
 801ac4c:	36eca570 	.word	0x36eca570
 801ac50:	3fb8aa00 	.word	0x3fb8aa00
 801ac54:	4b800000 	.word	0x4b800000
 801ac58:	001cc471 	.word	0x001cc471
 801ac5c:	005db3d6 	.word	0x005db3d6
 801ac60:	0801c4c8 	.word	0x0801c4c8
 801ac64:	fffff000 	.word	0xfffff000
 801ac68:	3e6c3255 	.word	0x3e6c3255
 801ac6c:	3e53f142 	.word	0x3e53f142
 801ac70:	3e8ba305 	.word	0x3e8ba305
 801ac74:	3edb6db7 	.word	0x3edb6db7
 801ac78:	3f19999a 	.word	0x3f19999a
 801ac7c:	3f76384f 	.word	0x3f76384f
 801ac80:	0801c4d8 	.word	0x0801c4d8
 801ac84:	3f763800 	.word	0x3f763800
 801ac88:	369dc3a0 	.word	0x369dc3a0
 801ac8c:	0801c4d0 	.word	0x0801c4d0
 801ac90:	3338aa3c 	.word	0x3338aa3c
 801ac94:	f040 8093 	bne.w	801adbe <__ieee754_powf+0x53e>
 801ac98:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801ac90 <__ieee754_powf+0x410>
 801ac9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801aca0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801aca4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801aca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acac:	f73f aefa 	bgt.w	801aaa4 <__ieee754_powf+0x224>
 801acb0:	15db      	asrs	r3, r3, #23
 801acb2:	3b7e      	subs	r3, #126	; 0x7e
 801acb4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801acb8:	4118      	asrs	r0, r3
 801acba:	4408      	add	r0, r1
 801acbc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801acc0:	4a49      	ldr	r2, [pc, #292]	; (801ade8 <__ieee754_powf+0x568>)
 801acc2:	3b7f      	subs	r3, #127	; 0x7f
 801acc4:	411a      	asrs	r2, r3
 801acc6:	4002      	ands	r2, r0
 801acc8:	ee07 2a10 	vmov	s14, r2
 801accc:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801acd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801acd4:	f1c3 0317 	rsb	r3, r3, #23
 801acd8:	4118      	asrs	r0, r3
 801acda:	2900      	cmp	r1, #0
 801acdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ace0:	bfb8      	it	lt
 801ace2:	4240      	neglt	r0, r0
 801ace4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ace8:	eddf 6a40 	vldr	s13, [pc, #256]	; 801adec <__ieee754_powf+0x56c>
 801acec:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801adf0 <__ieee754_powf+0x570>
 801acf0:	ee17 3a10 	vmov	r3, s14
 801acf4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801acf8:	f023 030f 	bic.w	r3, r3, #15
 801acfc:	ee07 3a10 	vmov	s14, r3
 801ad00:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ad08:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ad0c:	eddf 7a39 	vldr	s15, [pc, #228]	; 801adf4 <__ieee754_powf+0x574>
 801ad10:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ad14:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801ad18:	eef0 6a67 	vmov.f32	s13, s15
 801ad1c:	eee7 6a06 	vfma.f32	s13, s14, s12
 801ad20:	eef0 5a66 	vmov.f32	s11, s13
 801ad24:	eee7 5a46 	vfms.f32	s11, s14, s12
 801ad28:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801ad2c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801ad30:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801adf8 <__ieee754_powf+0x578>
 801ad34:	eddf 5a31 	vldr	s11, [pc, #196]	; 801adfc <__ieee754_powf+0x57c>
 801ad38:	eea7 6a25 	vfma.f32	s12, s14, s11
 801ad3c:	eddf 5a30 	vldr	s11, [pc, #192]	; 801ae00 <__ieee754_powf+0x580>
 801ad40:	eee6 5a07 	vfma.f32	s11, s12, s14
 801ad44:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801ae04 <__ieee754_powf+0x584>
 801ad48:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ad4c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801ae08 <__ieee754_powf+0x588>
 801ad50:	eee6 5a07 	vfma.f32	s11, s12, s14
 801ad54:	eeb0 6a66 	vmov.f32	s12, s13
 801ad58:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801ad5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801ad60:	ee66 5a86 	vmul.f32	s11, s13, s12
 801ad64:	ee36 6a47 	vsub.f32	s12, s12, s14
 801ad68:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801ad6c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801ad70:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ad78:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ad7c:	ee10 3a10 	vmov	r3, s0
 801ad80:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801ad84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ad88:	da1f      	bge.n	801adca <__ieee754_powf+0x54a>
 801ad8a:	f000 faf3 	bl	801b374 <scalbnf>
 801ad8e:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ad92:	e58d      	b.n	801a8b0 <__ieee754_powf+0x30>
 801ad94:	4a1d      	ldr	r2, [pc, #116]	; (801ae0c <__ieee754_powf+0x58c>)
 801ad96:	4293      	cmp	r3, r2
 801ad98:	dd07      	ble.n	801adaa <__ieee754_powf+0x52a>
 801ad9a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada2:	bf4c      	ite	mi
 801ada4:	2001      	movmi	r0, #1
 801ada6:	2000      	movpl	r0, #0
 801ada8:	e622      	b.n	801a9f0 <__ieee754_powf+0x170>
 801adaa:	d108      	bne.n	801adbe <__ieee754_powf+0x53e>
 801adac:	ee37 7a67 	vsub.f32	s14, s14, s15
 801adb0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801adb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adb8:	f6ff af7a 	blt.w	801acb0 <__ieee754_powf+0x430>
 801adbc:	e7ed      	b.n	801ad9a <__ieee754_powf+0x51a>
 801adbe:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801adc2:	f73f af75 	bgt.w	801acb0 <__ieee754_powf+0x430>
 801adc6:	2000      	movs	r0, #0
 801adc8:	e78c      	b.n	801ace4 <__ieee754_powf+0x464>
 801adca:	ee00 3a10 	vmov	s0, r3
 801adce:	e7de      	b.n	801ad8e <__ieee754_powf+0x50e>
 801add0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801add4:	e56c      	b.n	801a8b0 <__ieee754_powf+0x30>
 801add6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801ae10 <__ieee754_powf+0x590>
 801adda:	e569      	b.n	801a8b0 <__ieee754_powf+0x30>
 801addc:	eeb0 0a48 	vmov.f32	s0, s16
 801ade0:	e566      	b.n	801a8b0 <__ieee754_powf+0x30>
 801ade2:	2600      	movs	r6, #0
 801ade4:	e591      	b.n	801a90a <__ieee754_powf+0x8a>
 801ade6:	bf00      	nop
 801ade8:	ff800000 	.word	0xff800000
 801adec:	3f317218 	.word	0x3f317218
 801adf0:	3f317200 	.word	0x3f317200
 801adf4:	35bfbe8c 	.word	0x35bfbe8c
 801adf8:	b5ddea0e 	.word	0xb5ddea0e
 801adfc:	3331bb4c 	.word	0x3331bb4c
 801ae00:	388ab355 	.word	0x388ab355
 801ae04:	bb360b61 	.word	0xbb360b61
 801ae08:	3e2aaaab 	.word	0x3e2aaaab
 801ae0c:	43160000 	.word	0x43160000
 801ae10:	00000000 	.word	0x00000000

0801ae14 <__ieee754_rem_pio2f>:
 801ae14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae16:	ee10 6a10 	vmov	r6, s0
 801ae1a:	4b86      	ldr	r3, [pc, #536]	; (801b034 <__ieee754_rem_pio2f+0x220>)
 801ae1c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801ae20:	429d      	cmp	r5, r3
 801ae22:	b087      	sub	sp, #28
 801ae24:	4604      	mov	r4, r0
 801ae26:	dc05      	bgt.n	801ae34 <__ieee754_rem_pio2f+0x20>
 801ae28:	2300      	movs	r3, #0
 801ae2a:	ed80 0a00 	vstr	s0, [r0]
 801ae2e:	6043      	str	r3, [r0, #4]
 801ae30:	2000      	movs	r0, #0
 801ae32:	e020      	b.n	801ae76 <__ieee754_rem_pio2f+0x62>
 801ae34:	4b80      	ldr	r3, [pc, #512]	; (801b038 <__ieee754_rem_pio2f+0x224>)
 801ae36:	429d      	cmp	r5, r3
 801ae38:	dc38      	bgt.n	801aeac <__ieee754_rem_pio2f+0x98>
 801ae3a:	2e00      	cmp	r6, #0
 801ae3c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801b03c <__ieee754_rem_pio2f+0x228>
 801ae40:	4b7f      	ldr	r3, [pc, #508]	; (801b040 <__ieee754_rem_pio2f+0x22c>)
 801ae42:	f025 050f 	bic.w	r5, r5, #15
 801ae46:	dd18      	ble.n	801ae7a <__ieee754_rem_pio2f+0x66>
 801ae48:	429d      	cmp	r5, r3
 801ae4a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801ae4e:	bf09      	itett	eq
 801ae50:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801b044 <__ieee754_rem_pio2f+0x230>
 801ae54:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801b048 <__ieee754_rem_pio2f+0x234>
 801ae58:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801ae5c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801b04c <__ieee754_rem_pio2f+0x238>
 801ae60:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801ae64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ae68:	edc0 6a00 	vstr	s13, [r0]
 801ae6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae70:	edc0 7a01 	vstr	s15, [r0, #4]
 801ae74:	2001      	movs	r0, #1
 801ae76:	b007      	add	sp, #28
 801ae78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae7a:	429d      	cmp	r5, r3
 801ae7c:	ee70 7a07 	vadd.f32	s15, s0, s14
 801ae80:	bf09      	itett	eq
 801ae82:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801b044 <__ieee754_rem_pio2f+0x230>
 801ae86:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801b048 <__ieee754_rem_pio2f+0x234>
 801ae8a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801ae8e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801b04c <__ieee754_rem_pio2f+0x238>
 801ae92:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ae96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ae9a:	edc0 6a00 	vstr	s13, [r0]
 801ae9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aea2:	edc0 7a01 	vstr	s15, [r0, #4]
 801aea6:	f04f 30ff 	mov.w	r0, #4294967295
 801aeaa:	e7e4      	b.n	801ae76 <__ieee754_rem_pio2f+0x62>
 801aeac:	4b68      	ldr	r3, [pc, #416]	; (801b050 <__ieee754_rem_pio2f+0x23c>)
 801aeae:	429d      	cmp	r5, r3
 801aeb0:	dc71      	bgt.n	801af96 <__ieee754_rem_pio2f+0x182>
 801aeb2:	f7fe fc42 	bl	801973a <fabsf>
 801aeb6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801b054 <__ieee754_rem_pio2f+0x240>
 801aeba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801aebe:	eee0 7a07 	vfma.f32	s15, s0, s14
 801aec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801aeca:	ee17 0a90 	vmov	r0, s15
 801aece:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801b03c <__ieee754_rem_pio2f+0x228>
 801aed2:	eea7 0a67 	vfms.f32	s0, s14, s15
 801aed6:	281f      	cmp	r0, #31
 801aed8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801b048 <__ieee754_rem_pio2f+0x234>
 801aedc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aee0:	eeb1 6a47 	vneg.f32	s12, s14
 801aee4:	ee70 6a67 	vsub.f32	s13, s0, s15
 801aee8:	ee16 2a90 	vmov	r2, s13
 801aeec:	dc1c      	bgt.n	801af28 <__ieee754_rem_pio2f+0x114>
 801aeee:	495a      	ldr	r1, [pc, #360]	; (801b058 <__ieee754_rem_pio2f+0x244>)
 801aef0:	1e47      	subs	r7, r0, #1
 801aef2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801aef6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801aefa:	428b      	cmp	r3, r1
 801aefc:	d014      	beq.n	801af28 <__ieee754_rem_pio2f+0x114>
 801aefe:	6022      	str	r2, [r4, #0]
 801af00:	ed94 7a00 	vldr	s14, [r4]
 801af04:	ee30 0a47 	vsub.f32	s0, s0, s14
 801af08:	2e00      	cmp	r6, #0
 801af0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801af0e:	ed84 0a01 	vstr	s0, [r4, #4]
 801af12:	dab0      	bge.n	801ae76 <__ieee754_rem_pio2f+0x62>
 801af14:	eeb1 7a47 	vneg.f32	s14, s14
 801af18:	eeb1 0a40 	vneg.f32	s0, s0
 801af1c:	ed84 7a00 	vstr	s14, [r4]
 801af20:	ed84 0a01 	vstr	s0, [r4, #4]
 801af24:	4240      	negs	r0, r0
 801af26:	e7a6      	b.n	801ae76 <__ieee754_rem_pio2f+0x62>
 801af28:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801af2c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801af30:	2908      	cmp	r1, #8
 801af32:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801af36:	dde2      	ble.n	801aefe <__ieee754_rem_pio2f+0xea>
 801af38:	eddf 5a42 	vldr	s11, [pc, #264]	; 801b044 <__ieee754_rem_pio2f+0x230>
 801af3c:	eef0 6a40 	vmov.f32	s13, s0
 801af40:	eee6 6a25 	vfma.f32	s13, s12, s11
 801af44:	ee70 7a66 	vsub.f32	s15, s0, s13
 801af48:	eee6 7a25 	vfma.f32	s15, s12, s11
 801af4c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801b04c <__ieee754_rem_pio2f+0x238>
 801af50:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801af54:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801af58:	ee15 2a90 	vmov	r2, s11
 801af5c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801af60:	1a5b      	subs	r3, r3, r1
 801af62:	2b19      	cmp	r3, #25
 801af64:	dc04      	bgt.n	801af70 <__ieee754_rem_pio2f+0x15c>
 801af66:	edc4 5a00 	vstr	s11, [r4]
 801af6a:	eeb0 0a66 	vmov.f32	s0, s13
 801af6e:	e7c7      	b.n	801af00 <__ieee754_rem_pio2f+0xec>
 801af70:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801b05c <__ieee754_rem_pio2f+0x248>
 801af74:	eeb0 0a66 	vmov.f32	s0, s13
 801af78:	eea6 0a25 	vfma.f32	s0, s12, s11
 801af7c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801af80:	eddf 6a37 	vldr	s13, [pc, #220]	; 801b060 <__ieee754_rem_pio2f+0x24c>
 801af84:	eee6 7a25 	vfma.f32	s15, s12, s11
 801af88:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801af8c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801af90:	ed84 7a00 	vstr	s14, [r4]
 801af94:	e7b4      	b.n	801af00 <__ieee754_rem_pio2f+0xec>
 801af96:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801af9a:	db06      	blt.n	801afaa <__ieee754_rem_pio2f+0x196>
 801af9c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801afa0:	edc0 7a01 	vstr	s15, [r0, #4]
 801afa4:	edc0 7a00 	vstr	s15, [r0]
 801afa8:	e742      	b.n	801ae30 <__ieee754_rem_pio2f+0x1c>
 801afaa:	15ea      	asrs	r2, r5, #23
 801afac:	3a86      	subs	r2, #134	; 0x86
 801afae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801afb2:	ee07 3a90 	vmov	s15, r3
 801afb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801afba:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801b064 <__ieee754_rem_pio2f+0x250>
 801afbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801afc6:	ed8d 7a03 	vstr	s14, [sp, #12]
 801afca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801afce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801afd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801afda:	ed8d 7a04 	vstr	s14, [sp, #16]
 801afde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801afe2:	eef5 7a40 	vcmp.f32	s15, #0.0
 801afe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afea:	edcd 7a05 	vstr	s15, [sp, #20]
 801afee:	d11e      	bne.n	801b02e <__ieee754_rem_pio2f+0x21a>
 801aff0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801aff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aff8:	bf14      	ite	ne
 801affa:	2302      	movne	r3, #2
 801affc:	2301      	moveq	r3, #1
 801affe:	491a      	ldr	r1, [pc, #104]	; (801b068 <__ieee754_rem_pio2f+0x254>)
 801b000:	9101      	str	r1, [sp, #4]
 801b002:	2102      	movs	r1, #2
 801b004:	9100      	str	r1, [sp, #0]
 801b006:	a803      	add	r0, sp, #12
 801b008:	4621      	mov	r1, r4
 801b00a:	f000 fa3b 	bl	801b484 <__kernel_rem_pio2f>
 801b00e:	2e00      	cmp	r6, #0
 801b010:	f6bf af31 	bge.w	801ae76 <__ieee754_rem_pio2f+0x62>
 801b014:	edd4 7a00 	vldr	s15, [r4]
 801b018:	eef1 7a67 	vneg.f32	s15, s15
 801b01c:	edc4 7a00 	vstr	s15, [r4]
 801b020:	edd4 7a01 	vldr	s15, [r4, #4]
 801b024:	eef1 7a67 	vneg.f32	s15, s15
 801b028:	edc4 7a01 	vstr	s15, [r4, #4]
 801b02c:	e77a      	b.n	801af24 <__ieee754_rem_pio2f+0x110>
 801b02e:	2303      	movs	r3, #3
 801b030:	e7e5      	b.n	801affe <__ieee754_rem_pio2f+0x1ea>
 801b032:	bf00      	nop
 801b034:	3f490fd8 	.word	0x3f490fd8
 801b038:	4016cbe3 	.word	0x4016cbe3
 801b03c:	3fc90f80 	.word	0x3fc90f80
 801b040:	3fc90fd0 	.word	0x3fc90fd0
 801b044:	37354400 	.word	0x37354400
 801b048:	37354443 	.word	0x37354443
 801b04c:	2e85a308 	.word	0x2e85a308
 801b050:	43490f80 	.word	0x43490f80
 801b054:	3f22f984 	.word	0x3f22f984
 801b058:	0801c4e0 	.word	0x0801c4e0
 801b05c:	2e85a300 	.word	0x2e85a300
 801b060:	248d3132 	.word	0x248d3132
 801b064:	43800000 	.word	0x43800000
 801b068:	0801c560 	.word	0x0801c560

0801b06c <atanf>:
 801b06c:	b538      	push	{r3, r4, r5, lr}
 801b06e:	ee10 5a10 	vmov	r5, s0
 801b072:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801b076:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801b07a:	eef0 7a40 	vmov.f32	s15, s0
 801b07e:	db10      	blt.n	801b0a2 <atanf+0x36>
 801b080:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801b084:	dd04      	ble.n	801b090 <atanf+0x24>
 801b086:	ee70 7a00 	vadd.f32	s15, s0, s0
 801b08a:	eeb0 0a67 	vmov.f32	s0, s15
 801b08e:	bd38      	pop	{r3, r4, r5, pc}
 801b090:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801b1c8 <atanf+0x15c>
 801b094:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801b1cc <atanf+0x160>
 801b098:	2d00      	cmp	r5, #0
 801b09a:	bfd8      	it	le
 801b09c:	eef0 7a47 	vmovle.f32	s15, s14
 801b0a0:	e7f3      	b.n	801b08a <atanf+0x1e>
 801b0a2:	4b4b      	ldr	r3, [pc, #300]	; (801b1d0 <atanf+0x164>)
 801b0a4:	429c      	cmp	r4, r3
 801b0a6:	dc10      	bgt.n	801b0ca <atanf+0x5e>
 801b0a8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801b0ac:	da0a      	bge.n	801b0c4 <atanf+0x58>
 801b0ae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b1d4 <atanf+0x168>
 801b0b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 801b0b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b0ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0c2:	dce2      	bgt.n	801b08a <atanf+0x1e>
 801b0c4:	f04f 33ff 	mov.w	r3, #4294967295
 801b0c8:	e013      	b.n	801b0f2 <atanf+0x86>
 801b0ca:	f7fe fb36 	bl	801973a <fabsf>
 801b0ce:	4b42      	ldr	r3, [pc, #264]	; (801b1d8 <atanf+0x16c>)
 801b0d0:	429c      	cmp	r4, r3
 801b0d2:	dc4f      	bgt.n	801b174 <atanf+0x108>
 801b0d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801b0d8:	429c      	cmp	r4, r3
 801b0da:	dc41      	bgt.n	801b160 <atanf+0xf4>
 801b0dc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b0e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b0e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b0ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0f2:	1c5a      	adds	r2, r3, #1
 801b0f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801b0f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b1dc <atanf+0x170>
 801b0fc:	eddf 5a38 	vldr	s11, [pc, #224]	; 801b1e0 <atanf+0x174>
 801b100:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801b1e4 <atanf+0x178>
 801b104:	ee66 6a06 	vmul.f32	s13, s12, s12
 801b108:	eee6 5a87 	vfma.f32	s11, s13, s14
 801b10c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801b1e8 <atanf+0x17c>
 801b110:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b114:	eddf 5a35 	vldr	s11, [pc, #212]	; 801b1ec <atanf+0x180>
 801b118:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b11c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801b1f0 <atanf+0x184>
 801b120:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b124:	eddf 5a33 	vldr	s11, [pc, #204]	; 801b1f4 <atanf+0x188>
 801b128:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b12c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801b1f8 <atanf+0x18c>
 801b130:	eea6 5a87 	vfma.f32	s10, s13, s14
 801b134:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801b1fc <atanf+0x190>
 801b138:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b13c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801b200 <atanf+0x194>
 801b140:	eea7 5a26 	vfma.f32	s10, s14, s13
 801b144:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801b204 <atanf+0x198>
 801b148:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b14c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b150:	eea5 7a86 	vfma.f32	s14, s11, s12
 801b154:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b158:	d121      	bne.n	801b19e <atanf+0x132>
 801b15a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b15e:	e794      	b.n	801b08a <atanf+0x1e>
 801b160:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b164:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b168:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b16c:	2301      	movs	r3, #1
 801b16e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b172:	e7be      	b.n	801b0f2 <atanf+0x86>
 801b174:	4b24      	ldr	r3, [pc, #144]	; (801b208 <atanf+0x19c>)
 801b176:	429c      	cmp	r4, r3
 801b178:	dc0b      	bgt.n	801b192 <atanf+0x126>
 801b17a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801b17e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b182:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b186:	2302      	movs	r3, #2
 801b188:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b18c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b190:	e7af      	b.n	801b0f2 <atanf+0x86>
 801b192:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b196:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b19a:	2303      	movs	r3, #3
 801b19c:	e7a9      	b.n	801b0f2 <atanf+0x86>
 801b19e:	4a1b      	ldr	r2, [pc, #108]	; (801b20c <atanf+0x1a0>)
 801b1a0:	491b      	ldr	r1, [pc, #108]	; (801b210 <atanf+0x1a4>)
 801b1a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b1a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b1aa:	edd3 6a00 	vldr	s13, [r3]
 801b1ae:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b1b2:	2d00      	cmp	r5, #0
 801b1b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b1b8:	edd2 7a00 	vldr	s15, [r2]
 801b1bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b1c0:	bfb8      	it	lt
 801b1c2:	eef1 7a67 	vneglt.f32	s15, s15
 801b1c6:	e760      	b.n	801b08a <atanf+0x1e>
 801b1c8:	3fc90fdb 	.word	0x3fc90fdb
 801b1cc:	bfc90fdb 	.word	0xbfc90fdb
 801b1d0:	3edfffff 	.word	0x3edfffff
 801b1d4:	7149f2ca 	.word	0x7149f2ca
 801b1d8:	3f97ffff 	.word	0x3f97ffff
 801b1dc:	3c8569d7 	.word	0x3c8569d7
 801b1e0:	3d4bda59 	.word	0x3d4bda59
 801b1e4:	bd6ef16b 	.word	0xbd6ef16b
 801b1e8:	3d886b35 	.word	0x3d886b35
 801b1ec:	3dba2e6e 	.word	0x3dba2e6e
 801b1f0:	3e124925 	.word	0x3e124925
 801b1f4:	3eaaaaab 	.word	0x3eaaaaab
 801b1f8:	bd15a221 	.word	0xbd15a221
 801b1fc:	bd9d8795 	.word	0xbd9d8795
 801b200:	bde38e38 	.word	0xbde38e38
 801b204:	be4ccccd 	.word	0xbe4ccccd
 801b208:	401bffff 	.word	0x401bffff
 801b20c:	0801c878 	.word	0x0801c878
 801b210:	0801c888 	.word	0x0801c888
 801b214:	00000000 	.word	0x00000000

0801b218 <scalbn>:
 801b218:	b570      	push	{r4, r5, r6, lr}
 801b21a:	ec55 4b10 	vmov	r4, r5, d0
 801b21e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b222:	4606      	mov	r6, r0
 801b224:	462b      	mov	r3, r5
 801b226:	b999      	cbnz	r1, 801b250 <scalbn+0x38>
 801b228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b22c:	4323      	orrs	r3, r4
 801b22e:	d03f      	beq.n	801b2b0 <scalbn+0x98>
 801b230:	4b35      	ldr	r3, [pc, #212]	; (801b308 <scalbn+0xf0>)
 801b232:	4629      	mov	r1, r5
 801b234:	ee10 0a10 	vmov	r0, s0
 801b238:	2200      	movs	r2, #0
 801b23a:	f7e5 fa05 	bl	8000648 <__aeabi_dmul>
 801b23e:	4b33      	ldr	r3, [pc, #204]	; (801b30c <scalbn+0xf4>)
 801b240:	429e      	cmp	r6, r3
 801b242:	4604      	mov	r4, r0
 801b244:	460d      	mov	r5, r1
 801b246:	da10      	bge.n	801b26a <scalbn+0x52>
 801b248:	a327      	add	r3, pc, #156	; (adr r3, 801b2e8 <scalbn+0xd0>)
 801b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b24e:	e01f      	b.n	801b290 <scalbn+0x78>
 801b250:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b254:	4291      	cmp	r1, r2
 801b256:	d10c      	bne.n	801b272 <scalbn+0x5a>
 801b258:	ee10 2a10 	vmov	r2, s0
 801b25c:	4620      	mov	r0, r4
 801b25e:	4629      	mov	r1, r5
 801b260:	f7e5 f83c 	bl	80002dc <__adddf3>
 801b264:	4604      	mov	r4, r0
 801b266:	460d      	mov	r5, r1
 801b268:	e022      	b.n	801b2b0 <scalbn+0x98>
 801b26a:	460b      	mov	r3, r1
 801b26c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b270:	3936      	subs	r1, #54	; 0x36
 801b272:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b276:	4296      	cmp	r6, r2
 801b278:	dd0d      	ble.n	801b296 <scalbn+0x7e>
 801b27a:	2d00      	cmp	r5, #0
 801b27c:	a11c      	add	r1, pc, #112	; (adr r1, 801b2f0 <scalbn+0xd8>)
 801b27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b282:	da02      	bge.n	801b28a <scalbn+0x72>
 801b284:	a11c      	add	r1, pc, #112	; (adr r1, 801b2f8 <scalbn+0xe0>)
 801b286:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b28a:	a319      	add	r3, pc, #100	; (adr r3, 801b2f0 <scalbn+0xd8>)
 801b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b290:	f7e5 f9da 	bl	8000648 <__aeabi_dmul>
 801b294:	e7e6      	b.n	801b264 <scalbn+0x4c>
 801b296:	1872      	adds	r2, r6, r1
 801b298:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b29c:	428a      	cmp	r2, r1
 801b29e:	dcec      	bgt.n	801b27a <scalbn+0x62>
 801b2a0:	2a00      	cmp	r2, #0
 801b2a2:	dd08      	ble.n	801b2b6 <scalbn+0x9e>
 801b2a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b2a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b2ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b2b0:	ec45 4b10 	vmov	d0, r4, r5
 801b2b4:	bd70      	pop	{r4, r5, r6, pc}
 801b2b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b2ba:	da08      	bge.n	801b2ce <scalbn+0xb6>
 801b2bc:	2d00      	cmp	r5, #0
 801b2be:	a10a      	add	r1, pc, #40	; (adr r1, 801b2e8 <scalbn+0xd0>)
 801b2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b2c4:	dac0      	bge.n	801b248 <scalbn+0x30>
 801b2c6:	a10e      	add	r1, pc, #56	; (adr r1, 801b300 <scalbn+0xe8>)
 801b2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b2cc:	e7bc      	b.n	801b248 <scalbn+0x30>
 801b2ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b2d2:	3236      	adds	r2, #54	; 0x36
 801b2d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b2d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b2dc:	4620      	mov	r0, r4
 801b2de:	4b0c      	ldr	r3, [pc, #48]	; (801b310 <scalbn+0xf8>)
 801b2e0:	2200      	movs	r2, #0
 801b2e2:	e7d5      	b.n	801b290 <scalbn+0x78>
 801b2e4:	f3af 8000 	nop.w
 801b2e8:	c2f8f359 	.word	0xc2f8f359
 801b2ec:	01a56e1f 	.word	0x01a56e1f
 801b2f0:	8800759c 	.word	0x8800759c
 801b2f4:	7e37e43c 	.word	0x7e37e43c
 801b2f8:	8800759c 	.word	0x8800759c
 801b2fc:	fe37e43c 	.word	0xfe37e43c
 801b300:	c2f8f359 	.word	0xc2f8f359
 801b304:	81a56e1f 	.word	0x81a56e1f
 801b308:	43500000 	.word	0x43500000
 801b30c:	ffff3cb0 	.word	0xffff3cb0
 801b310:	3c900000 	.word	0x3c900000

0801b314 <with_errno>:
 801b314:	b570      	push	{r4, r5, r6, lr}
 801b316:	4604      	mov	r4, r0
 801b318:	460d      	mov	r5, r1
 801b31a:	4616      	mov	r6, r2
 801b31c:	f7fa f93a 	bl	8015594 <__errno>
 801b320:	4629      	mov	r1, r5
 801b322:	6006      	str	r6, [r0, #0]
 801b324:	4620      	mov	r0, r4
 801b326:	bd70      	pop	{r4, r5, r6, pc}

0801b328 <xflow>:
 801b328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b32a:	4614      	mov	r4, r2
 801b32c:	461d      	mov	r5, r3
 801b32e:	b108      	cbz	r0, 801b334 <xflow+0xc>
 801b330:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b334:	e9cd 2300 	strd	r2, r3, [sp]
 801b338:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b33c:	4620      	mov	r0, r4
 801b33e:	4629      	mov	r1, r5
 801b340:	f7e5 f982 	bl	8000648 <__aeabi_dmul>
 801b344:	2222      	movs	r2, #34	; 0x22
 801b346:	b003      	add	sp, #12
 801b348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b34c:	f7ff bfe2 	b.w	801b314 <with_errno>

0801b350 <__math_uflow>:
 801b350:	b508      	push	{r3, lr}
 801b352:	2200      	movs	r2, #0
 801b354:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801b358:	f7ff ffe6 	bl	801b328 <xflow>
 801b35c:	ec41 0b10 	vmov	d0, r0, r1
 801b360:	bd08      	pop	{r3, pc}

0801b362 <__math_oflow>:
 801b362:	b508      	push	{r3, lr}
 801b364:	2200      	movs	r2, #0
 801b366:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801b36a:	f7ff ffdd 	bl	801b328 <xflow>
 801b36e:	ec41 0b10 	vmov	d0, r0, r1
 801b372:	bd08      	pop	{r3, pc}

0801b374 <scalbnf>:
 801b374:	ee10 3a10 	vmov	r3, s0
 801b378:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b37c:	d02b      	beq.n	801b3d6 <scalbnf+0x62>
 801b37e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b382:	d302      	bcc.n	801b38a <scalbnf+0x16>
 801b384:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b388:	4770      	bx	lr
 801b38a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b38e:	d123      	bne.n	801b3d8 <scalbnf+0x64>
 801b390:	4b24      	ldr	r3, [pc, #144]	; (801b424 <scalbnf+0xb0>)
 801b392:	eddf 7a25 	vldr	s15, [pc, #148]	; 801b428 <scalbnf+0xb4>
 801b396:	4298      	cmp	r0, r3
 801b398:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b39c:	db17      	blt.n	801b3ce <scalbnf+0x5a>
 801b39e:	ee10 3a10 	vmov	r3, s0
 801b3a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b3a6:	3a19      	subs	r2, #25
 801b3a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 801b3ac:	4288      	cmp	r0, r1
 801b3ae:	dd15      	ble.n	801b3dc <scalbnf+0x68>
 801b3b0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801b42c <scalbnf+0xb8>
 801b3b4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801b430 <scalbnf+0xbc>
 801b3b8:	ee10 3a10 	vmov	r3, s0
 801b3bc:	eeb0 7a67 	vmov.f32	s14, s15
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	bfb8      	it	lt
 801b3c4:	eef0 7a66 	vmovlt.f32	s15, s13
 801b3c8:	ee27 0a87 	vmul.f32	s0, s15, s14
 801b3cc:	4770      	bx	lr
 801b3ce:	eddf 7a19 	vldr	s15, [pc, #100]	; 801b434 <scalbnf+0xc0>
 801b3d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b3d6:	4770      	bx	lr
 801b3d8:	0dd2      	lsrs	r2, r2, #23
 801b3da:	e7e5      	b.n	801b3a8 <scalbnf+0x34>
 801b3dc:	4410      	add	r0, r2
 801b3de:	28fe      	cmp	r0, #254	; 0xfe
 801b3e0:	dce6      	bgt.n	801b3b0 <scalbnf+0x3c>
 801b3e2:	2800      	cmp	r0, #0
 801b3e4:	dd06      	ble.n	801b3f4 <scalbnf+0x80>
 801b3e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b3ea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b3ee:	ee00 3a10 	vmov	s0, r3
 801b3f2:	4770      	bx	lr
 801b3f4:	f110 0f16 	cmn.w	r0, #22
 801b3f8:	da09      	bge.n	801b40e <scalbnf+0x9a>
 801b3fa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b434 <scalbnf+0xc0>
 801b3fe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801b438 <scalbnf+0xc4>
 801b402:	ee10 3a10 	vmov	r3, s0
 801b406:	eeb0 7a67 	vmov.f32	s14, s15
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	e7d9      	b.n	801b3c2 <scalbnf+0x4e>
 801b40e:	3019      	adds	r0, #25
 801b410:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b414:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b418:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b43c <scalbnf+0xc8>
 801b41c:	ee07 3a90 	vmov	s15, r3
 801b420:	e7d7      	b.n	801b3d2 <scalbnf+0x5e>
 801b422:	bf00      	nop
 801b424:	ffff3cb0 	.word	0xffff3cb0
 801b428:	4c000000 	.word	0x4c000000
 801b42c:	7149f2ca 	.word	0x7149f2ca
 801b430:	f149f2ca 	.word	0xf149f2ca
 801b434:	0da24260 	.word	0x0da24260
 801b438:	8da24260 	.word	0x8da24260
 801b43c:	33000000 	.word	0x33000000

0801b440 <with_errnof>:
 801b440:	b513      	push	{r0, r1, r4, lr}
 801b442:	4604      	mov	r4, r0
 801b444:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b448:	f7fa f8a4 	bl	8015594 <__errno>
 801b44c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b450:	6004      	str	r4, [r0, #0]
 801b452:	b002      	add	sp, #8
 801b454:	bd10      	pop	{r4, pc}

0801b456 <xflowf>:
 801b456:	b130      	cbz	r0, 801b466 <xflowf+0x10>
 801b458:	eef1 7a40 	vneg.f32	s15, s0
 801b45c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b460:	2022      	movs	r0, #34	; 0x22
 801b462:	f7ff bfed 	b.w	801b440 <with_errnof>
 801b466:	eef0 7a40 	vmov.f32	s15, s0
 801b46a:	e7f7      	b.n	801b45c <xflowf+0x6>

0801b46c <__math_uflowf>:
 801b46c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b474 <__math_uflowf+0x8>
 801b470:	f7ff bff1 	b.w	801b456 <xflowf>
 801b474:	10000000 	.word	0x10000000

0801b478 <__math_oflowf>:
 801b478:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b480 <__math_oflowf+0x8>
 801b47c:	f7ff bfeb 	b.w	801b456 <xflowf>
 801b480:	70000000 	.word	0x70000000

0801b484 <__kernel_rem_pio2f>:
 801b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b488:	ed2d 8b04 	vpush	{d8-d9}
 801b48c:	b0d9      	sub	sp, #356	; 0x164
 801b48e:	4688      	mov	r8, r1
 801b490:	9002      	str	r0, [sp, #8]
 801b492:	49b8      	ldr	r1, [pc, #736]	; (801b774 <__kernel_rem_pio2f+0x2f0>)
 801b494:	9866      	ldr	r0, [sp, #408]	; 0x198
 801b496:	9301      	str	r3, [sp, #4]
 801b498:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801b49c:	9901      	ldr	r1, [sp, #4]
 801b49e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801b4a0:	f101 3bff 	add.w	fp, r1, #4294967295
 801b4a4:	1d11      	adds	r1, r2, #4
 801b4a6:	db25      	blt.n	801b4f4 <__kernel_rem_pio2f+0x70>
 801b4a8:	1ed0      	subs	r0, r2, #3
 801b4aa:	bf48      	it	mi
 801b4ac:	1d10      	addmi	r0, r2, #4
 801b4ae:	10c0      	asrs	r0, r0, #3
 801b4b0:	1c45      	adds	r5, r0, #1
 801b4b2:	00e9      	lsls	r1, r5, #3
 801b4b4:	eba0 070b 	sub.w	r7, r0, fp
 801b4b8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801b784 <__kernel_rem_pio2f+0x300>
 801b4bc:	9103      	str	r1, [sp, #12]
 801b4be:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801b4c2:	eb0a 0c0b 	add.w	ip, sl, fp
 801b4c6:	ae1c      	add	r6, sp, #112	; 0x70
 801b4c8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801b4cc:	2400      	movs	r4, #0
 801b4ce:	4564      	cmp	r4, ip
 801b4d0:	dd12      	ble.n	801b4f8 <__kernel_rem_pio2f+0x74>
 801b4d2:	9901      	ldr	r1, [sp, #4]
 801b4d4:	ac1c      	add	r4, sp, #112	; 0x70
 801b4d6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b4da:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801b4de:	f04f 0c00 	mov.w	ip, #0
 801b4e2:	45d4      	cmp	ip, sl
 801b4e4:	dc27      	bgt.n	801b536 <__kernel_rem_pio2f+0xb2>
 801b4e6:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b4ea:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801b784 <__kernel_rem_pio2f+0x300>
 801b4ee:	4627      	mov	r7, r4
 801b4f0:	2600      	movs	r6, #0
 801b4f2:	e016      	b.n	801b522 <__kernel_rem_pio2f+0x9e>
 801b4f4:	2000      	movs	r0, #0
 801b4f6:	e7db      	b.n	801b4b0 <__kernel_rem_pio2f+0x2c>
 801b4f8:	42e7      	cmn	r7, r4
 801b4fa:	bf5d      	ittte	pl
 801b4fc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801b500:	ee07 1a90 	vmovpl	s15, r1
 801b504:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b508:	eef0 7a47 	vmovmi.f32	s15, s14
 801b50c:	ece6 7a01 	vstmia	r6!, {s15}
 801b510:	3401      	adds	r4, #1
 801b512:	e7dc      	b.n	801b4ce <__kernel_rem_pio2f+0x4a>
 801b514:	ecfe 6a01 	vldmia	lr!, {s13}
 801b518:	ed97 7a00 	vldr	s14, [r7]
 801b51c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b520:	3601      	adds	r6, #1
 801b522:	455e      	cmp	r6, fp
 801b524:	f1a7 0704 	sub.w	r7, r7, #4
 801b528:	ddf4      	ble.n	801b514 <__kernel_rem_pio2f+0x90>
 801b52a:	ece9 7a01 	vstmia	r9!, {s15}
 801b52e:	f10c 0c01 	add.w	ip, ip, #1
 801b532:	3404      	adds	r4, #4
 801b534:	e7d5      	b.n	801b4e2 <__kernel_rem_pio2f+0x5e>
 801b536:	a908      	add	r1, sp, #32
 801b538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b53c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801b540:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801b780 <__kernel_rem_pio2f+0x2fc>
 801b544:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801b77c <__kernel_rem_pio2f+0x2f8>
 801b548:	9105      	str	r1, [sp, #20]
 801b54a:	9304      	str	r3, [sp, #16]
 801b54c:	4656      	mov	r6, sl
 801b54e:	00b3      	lsls	r3, r6, #2
 801b550:	9306      	str	r3, [sp, #24]
 801b552:	ab58      	add	r3, sp, #352	; 0x160
 801b554:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b558:	ac08      	add	r4, sp, #32
 801b55a:	ab44      	add	r3, sp, #272	; 0x110
 801b55c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801b560:	46a4      	mov	ip, r4
 801b562:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b566:	4637      	mov	r7, r6
 801b568:	2f00      	cmp	r7, #0
 801b56a:	f1a0 0004 	sub.w	r0, r0, #4
 801b56e:	dc4a      	bgt.n	801b606 <__kernel_rem_pio2f+0x182>
 801b570:	4628      	mov	r0, r5
 801b572:	9207      	str	r2, [sp, #28]
 801b574:	f7ff fefe 	bl	801b374 <scalbnf>
 801b578:	eeb0 8a40 	vmov.f32	s16, s0
 801b57c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801b580:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b584:	f000 f9f0 	bl	801b968 <floorf>
 801b588:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801b58c:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b590:	2d00      	cmp	r5, #0
 801b592:	9a07      	ldr	r2, [sp, #28]
 801b594:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b598:	ee17 9a90 	vmov	r9, s15
 801b59c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b5a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b5a4:	dd41      	ble.n	801b62a <__kernel_rem_pio2f+0x1a6>
 801b5a6:	f106 3cff 	add.w	ip, r6, #4294967295
 801b5aa:	ab08      	add	r3, sp, #32
 801b5ac:	f1c5 0e08 	rsb	lr, r5, #8
 801b5b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801b5b4:	fa47 f00e 	asr.w	r0, r7, lr
 801b5b8:	4481      	add	r9, r0
 801b5ba:	fa00 f00e 	lsl.w	r0, r0, lr
 801b5be:	1a3f      	subs	r7, r7, r0
 801b5c0:	f1c5 0007 	rsb	r0, r5, #7
 801b5c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801b5c8:	4107      	asrs	r7, r0
 801b5ca:	2f00      	cmp	r7, #0
 801b5cc:	dd3c      	ble.n	801b648 <__kernel_rem_pio2f+0x1c4>
 801b5ce:	f04f 0e00 	mov.w	lr, #0
 801b5d2:	f109 0901 	add.w	r9, r9, #1
 801b5d6:	4671      	mov	r1, lr
 801b5d8:	4576      	cmp	r6, lr
 801b5da:	dc67      	bgt.n	801b6ac <__kernel_rem_pio2f+0x228>
 801b5dc:	2d00      	cmp	r5, #0
 801b5de:	dd03      	ble.n	801b5e8 <__kernel_rem_pio2f+0x164>
 801b5e0:	2d01      	cmp	r5, #1
 801b5e2:	d074      	beq.n	801b6ce <__kernel_rem_pio2f+0x24a>
 801b5e4:	2d02      	cmp	r5, #2
 801b5e6:	d07b      	beq.n	801b6e0 <__kernel_rem_pio2f+0x25c>
 801b5e8:	2f02      	cmp	r7, #2
 801b5ea:	d12d      	bne.n	801b648 <__kernel_rem_pio2f+0x1c4>
 801b5ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b5f0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b5f4:	b341      	cbz	r1, 801b648 <__kernel_rem_pio2f+0x1c4>
 801b5f6:	4628      	mov	r0, r5
 801b5f8:	9207      	str	r2, [sp, #28]
 801b5fa:	f7ff febb 	bl	801b374 <scalbnf>
 801b5fe:	9a07      	ldr	r2, [sp, #28]
 801b600:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b604:	e020      	b.n	801b648 <__kernel_rem_pio2f+0x1c4>
 801b606:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b60a:	3f01      	subs	r7, #1
 801b60c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b614:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b618:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b61c:	ecac 0a01 	vstmia	ip!, {s0}
 801b620:	ed90 0a00 	vldr	s0, [r0]
 801b624:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b628:	e79e      	b.n	801b568 <__kernel_rem_pio2f+0xe4>
 801b62a:	d105      	bne.n	801b638 <__kernel_rem_pio2f+0x1b4>
 801b62c:	1e70      	subs	r0, r6, #1
 801b62e:	ab08      	add	r3, sp, #32
 801b630:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801b634:	11ff      	asrs	r7, r7, #7
 801b636:	e7c8      	b.n	801b5ca <__kernel_rem_pio2f+0x146>
 801b638:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b63c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b644:	da30      	bge.n	801b6a8 <__kernel_rem_pio2f+0x224>
 801b646:	2700      	movs	r7, #0
 801b648:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b650:	f040 809a 	bne.w	801b788 <__kernel_rem_pio2f+0x304>
 801b654:	1e74      	subs	r4, r6, #1
 801b656:	46a4      	mov	ip, r4
 801b658:	2100      	movs	r1, #0
 801b65a:	45d4      	cmp	ip, sl
 801b65c:	da47      	bge.n	801b6ee <__kernel_rem_pio2f+0x26a>
 801b65e:	2900      	cmp	r1, #0
 801b660:	d063      	beq.n	801b72a <__kernel_rem_pio2f+0x2a6>
 801b662:	ab08      	add	r3, sp, #32
 801b664:	3d08      	subs	r5, #8
 801b666:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d07f      	beq.n	801b76e <__kernel_rem_pio2f+0x2ea>
 801b66e:	4628      	mov	r0, r5
 801b670:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b674:	f7ff fe7e 	bl	801b374 <scalbnf>
 801b678:	1c63      	adds	r3, r4, #1
 801b67a:	aa44      	add	r2, sp, #272	; 0x110
 801b67c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801b780 <__kernel_rem_pio2f+0x2fc>
 801b680:	0099      	lsls	r1, r3, #2
 801b682:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b686:	4623      	mov	r3, r4
 801b688:	2b00      	cmp	r3, #0
 801b68a:	f280 80ad 	bge.w	801b7e8 <__kernel_rem_pio2f+0x364>
 801b68e:	4623      	mov	r3, r4
 801b690:	2b00      	cmp	r3, #0
 801b692:	f2c0 80cb 	blt.w	801b82c <__kernel_rem_pio2f+0x3a8>
 801b696:	aa44      	add	r2, sp, #272	; 0x110
 801b698:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b69c:	4e36      	ldr	r6, [pc, #216]	; (801b778 <__kernel_rem_pio2f+0x2f4>)
 801b69e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801b784 <__kernel_rem_pio2f+0x300>
 801b6a2:	2000      	movs	r0, #0
 801b6a4:	1ae2      	subs	r2, r4, r3
 801b6a6:	e0b6      	b.n	801b816 <__kernel_rem_pio2f+0x392>
 801b6a8:	2702      	movs	r7, #2
 801b6aa:	e790      	b.n	801b5ce <__kernel_rem_pio2f+0x14a>
 801b6ac:	6820      	ldr	r0, [r4, #0]
 801b6ae:	b949      	cbnz	r1, 801b6c4 <__kernel_rem_pio2f+0x240>
 801b6b0:	b118      	cbz	r0, 801b6ba <__kernel_rem_pio2f+0x236>
 801b6b2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801b6b6:	6020      	str	r0, [r4, #0]
 801b6b8:	2001      	movs	r0, #1
 801b6ba:	f10e 0e01 	add.w	lr, lr, #1
 801b6be:	3404      	adds	r4, #4
 801b6c0:	4601      	mov	r1, r0
 801b6c2:	e789      	b.n	801b5d8 <__kernel_rem_pio2f+0x154>
 801b6c4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b6c8:	6020      	str	r0, [r4, #0]
 801b6ca:	4608      	mov	r0, r1
 801b6cc:	e7f5      	b.n	801b6ba <__kernel_rem_pio2f+0x236>
 801b6ce:	1e74      	subs	r4, r6, #1
 801b6d0:	ab08      	add	r3, sp, #32
 801b6d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b6d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b6da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b6de:	e783      	b.n	801b5e8 <__kernel_rem_pio2f+0x164>
 801b6e0:	1e74      	subs	r4, r6, #1
 801b6e2:	ab08      	add	r3, sp, #32
 801b6e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b6e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801b6ec:	e7f5      	b.n	801b6da <__kernel_rem_pio2f+0x256>
 801b6ee:	ab08      	add	r3, sp, #32
 801b6f0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801b6f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b6f8:	4301      	orrs	r1, r0
 801b6fa:	e7ae      	b.n	801b65a <__kernel_rem_pio2f+0x1d6>
 801b6fc:	3001      	adds	r0, #1
 801b6fe:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801b702:	2f00      	cmp	r7, #0
 801b704:	d0fa      	beq.n	801b6fc <__kernel_rem_pio2f+0x278>
 801b706:	9b06      	ldr	r3, [sp, #24]
 801b708:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801b70c:	eb0d 0403 	add.w	r4, sp, r3
 801b710:	9b01      	ldr	r3, [sp, #4]
 801b712:	18f7      	adds	r7, r6, r3
 801b714:	ab1c      	add	r3, sp, #112	; 0x70
 801b716:	f106 0c01 	add.w	ip, r6, #1
 801b71a:	3c4c      	subs	r4, #76	; 0x4c
 801b71c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b720:	4430      	add	r0, r6
 801b722:	4560      	cmp	r0, ip
 801b724:	da04      	bge.n	801b730 <__kernel_rem_pio2f+0x2ac>
 801b726:	4606      	mov	r6, r0
 801b728:	e711      	b.n	801b54e <__kernel_rem_pio2f+0xca>
 801b72a:	9c05      	ldr	r4, [sp, #20]
 801b72c:	2001      	movs	r0, #1
 801b72e:	e7e6      	b.n	801b6fe <__kernel_rem_pio2f+0x27a>
 801b730:	9b04      	ldr	r3, [sp, #16]
 801b732:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b736:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b73a:	9306      	str	r3, [sp, #24]
 801b73c:	ee07 3a90 	vmov	s15, r3
 801b740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b744:	2600      	movs	r6, #0
 801b746:	ece7 7a01 	vstmia	r7!, {s15}
 801b74a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b784 <__kernel_rem_pio2f+0x300>
 801b74e:	46b9      	mov	r9, r7
 801b750:	455e      	cmp	r6, fp
 801b752:	dd04      	ble.n	801b75e <__kernel_rem_pio2f+0x2da>
 801b754:	ece4 7a01 	vstmia	r4!, {s15}
 801b758:	f10c 0c01 	add.w	ip, ip, #1
 801b75c:	e7e1      	b.n	801b722 <__kernel_rem_pio2f+0x29e>
 801b75e:	ecfe 6a01 	vldmia	lr!, {s13}
 801b762:	ed39 7a01 	vldmdb	r9!, {s14}
 801b766:	3601      	adds	r6, #1
 801b768:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b76c:	e7f0      	b.n	801b750 <__kernel_rem_pio2f+0x2cc>
 801b76e:	3c01      	subs	r4, #1
 801b770:	e777      	b.n	801b662 <__kernel_rem_pio2f+0x1de>
 801b772:	bf00      	nop
 801b774:	0801c8c4 	.word	0x0801c8c4
 801b778:	0801c898 	.word	0x0801c898
 801b77c:	43800000 	.word	0x43800000
 801b780:	3b800000 	.word	0x3b800000
 801b784:	00000000 	.word	0x00000000
 801b788:	9b03      	ldr	r3, [sp, #12]
 801b78a:	eeb0 0a48 	vmov.f32	s0, s16
 801b78e:	1a98      	subs	r0, r3, r2
 801b790:	f7ff fdf0 	bl	801b374 <scalbnf>
 801b794:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801b77c <__kernel_rem_pio2f+0x2f8>
 801b798:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7a0:	db19      	blt.n	801b7d6 <__kernel_rem_pio2f+0x352>
 801b7a2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801b780 <__kernel_rem_pio2f+0x2fc>
 801b7a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b7aa:	aa08      	add	r2, sp, #32
 801b7ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7b0:	1c74      	adds	r4, r6, #1
 801b7b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7b6:	3508      	adds	r5, #8
 801b7b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b7bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b7c4:	ee10 3a10 	vmov	r3, s0
 801b7c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b7cc:	ee17 3a90 	vmov	r3, s15
 801b7d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b7d4:	e74b      	b.n	801b66e <__kernel_rem_pio2f+0x1ea>
 801b7d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b7da:	aa08      	add	r2, sp, #32
 801b7dc:	ee10 3a10 	vmov	r3, s0
 801b7e0:	4634      	mov	r4, r6
 801b7e2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b7e6:	e742      	b.n	801b66e <__kernel_rem_pio2f+0x1ea>
 801b7e8:	a808      	add	r0, sp, #32
 801b7ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b7ee:	9001      	str	r0, [sp, #4]
 801b7f0:	ee07 0a90 	vmov	s15, r0
 801b7f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7f8:	3b01      	subs	r3, #1
 801b7fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b7fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b802:	ed62 7a01 	vstmdb	r2!, {s15}
 801b806:	e73f      	b.n	801b688 <__kernel_rem_pio2f+0x204>
 801b808:	ecf6 6a01 	vldmia	r6!, {s13}
 801b80c:	ecb5 7a01 	vldmia	r5!, {s14}
 801b810:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b814:	3001      	adds	r0, #1
 801b816:	4550      	cmp	r0, sl
 801b818:	dc01      	bgt.n	801b81e <__kernel_rem_pio2f+0x39a>
 801b81a:	4290      	cmp	r0, r2
 801b81c:	ddf4      	ble.n	801b808 <__kernel_rem_pio2f+0x384>
 801b81e:	a858      	add	r0, sp, #352	; 0x160
 801b820:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b824:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801b828:	3b01      	subs	r3, #1
 801b82a:	e731      	b.n	801b690 <__kernel_rem_pio2f+0x20c>
 801b82c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b82e:	2b02      	cmp	r3, #2
 801b830:	dc09      	bgt.n	801b846 <__kernel_rem_pio2f+0x3c2>
 801b832:	2b00      	cmp	r3, #0
 801b834:	dc2b      	bgt.n	801b88e <__kernel_rem_pio2f+0x40a>
 801b836:	d044      	beq.n	801b8c2 <__kernel_rem_pio2f+0x43e>
 801b838:	f009 0007 	and.w	r0, r9, #7
 801b83c:	b059      	add	sp, #356	; 0x164
 801b83e:	ecbd 8b04 	vpop	{d8-d9}
 801b842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b846:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801b848:	2b03      	cmp	r3, #3
 801b84a:	d1f5      	bne.n	801b838 <__kernel_rem_pio2f+0x3b4>
 801b84c:	aa30      	add	r2, sp, #192	; 0xc0
 801b84e:	1f0b      	subs	r3, r1, #4
 801b850:	4413      	add	r3, r2
 801b852:	461a      	mov	r2, r3
 801b854:	4620      	mov	r0, r4
 801b856:	2800      	cmp	r0, #0
 801b858:	f1a2 0204 	sub.w	r2, r2, #4
 801b85c:	dc52      	bgt.n	801b904 <__kernel_rem_pio2f+0x480>
 801b85e:	4622      	mov	r2, r4
 801b860:	2a01      	cmp	r2, #1
 801b862:	f1a3 0304 	sub.w	r3, r3, #4
 801b866:	dc5d      	bgt.n	801b924 <__kernel_rem_pio2f+0x4a0>
 801b868:	ab30      	add	r3, sp, #192	; 0xc0
 801b86a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801b784 <__kernel_rem_pio2f+0x300>
 801b86e:	440b      	add	r3, r1
 801b870:	2c01      	cmp	r4, #1
 801b872:	dc67      	bgt.n	801b944 <__kernel_rem_pio2f+0x4c0>
 801b874:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b878:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801b87c:	2f00      	cmp	r7, #0
 801b87e:	d167      	bne.n	801b950 <__kernel_rem_pio2f+0x4cc>
 801b880:	edc8 6a00 	vstr	s13, [r8]
 801b884:	ed88 7a01 	vstr	s14, [r8, #4]
 801b888:	edc8 7a02 	vstr	s15, [r8, #8]
 801b88c:	e7d4      	b.n	801b838 <__kernel_rem_pio2f+0x3b4>
 801b88e:	ab30      	add	r3, sp, #192	; 0xc0
 801b890:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801b784 <__kernel_rem_pio2f+0x300>
 801b894:	440b      	add	r3, r1
 801b896:	4622      	mov	r2, r4
 801b898:	2a00      	cmp	r2, #0
 801b89a:	da24      	bge.n	801b8e6 <__kernel_rem_pio2f+0x462>
 801b89c:	b34f      	cbz	r7, 801b8f2 <__kernel_rem_pio2f+0x46e>
 801b89e:	eef1 7a47 	vneg.f32	s15, s14
 801b8a2:	edc8 7a00 	vstr	s15, [r8]
 801b8a6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801b8aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b8ae:	aa31      	add	r2, sp, #196	; 0xc4
 801b8b0:	2301      	movs	r3, #1
 801b8b2:	429c      	cmp	r4, r3
 801b8b4:	da20      	bge.n	801b8f8 <__kernel_rem_pio2f+0x474>
 801b8b6:	b10f      	cbz	r7, 801b8bc <__kernel_rem_pio2f+0x438>
 801b8b8:	eef1 7a67 	vneg.f32	s15, s15
 801b8bc:	edc8 7a01 	vstr	s15, [r8, #4]
 801b8c0:	e7ba      	b.n	801b838 <__kernel_rem_pio2f+0x3b4>
 801b8c2:	ab30      	add	r3, sp, #192	; 0xc0
 801b8c4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801b784 <__kernel_rem_pio2f+0x300>
 801b8c8:	440b      	add	r3, r1
 801b8ca:	2c00      	cmp	r4, #0
 801b8cc:	da05      	bge.n	801b8da <__kernel_rem_pio2f+0x456>
 801b8ce:	b10f      	cbz	r7, 801b8d4 <__kernel_rem_pio2f+0x450>
 801b8d0:	eef1 7a67 	vneg.f32	s15, s15
 801b8d4:	edc8 7a00 	vstr	s15, [r8]
 801b8d8:	e7ae      	b.n	801b838 <__kernel_rem_pio2f+0x3b4>
 801b8da:	ed33 7a01 	vldmdb	r3!, {s14}
 801b8de:	3c01      	subs	r4, #1
 801b8e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b8e4:	e7f1      	b.n	801b8ca <__kernel_rem_pio2f+0x446>
 801b8e6:	ed73 7a01 	vldmdb	r3!, {s15}
 801b8ea:	3a01      	subs	r2, #1
 801b8ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b8f0:	e7d2      	b.n	801b898 <__kernel_rem_pio2f+0x414>
 801b8f2:	eef0 7a47 	vmov.f32	s15, s14
 801b8f6:	e7d4      	b.n	801b8a2 <__kernel_rem_pio2f+0x41e>
 801b8f8:	ecb2 7a01 	vldmia	r2!, {s14}
 801b8fc:	3301      	adds	r3, #1
 801b8fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b902:	e7d6      	b.n	801b8b2 <__kernel_rem_pio2f+0x42e>
 801b904:	edd2 7a00 	vldr	s15, [r2]
 801b908:	edd2 6a01 	vldr	s13, [r2, #4]
 801b90c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b910:	3801      	subs	r0, #1
 801b912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b916:	ed82 7a00 	vstr	s14, [r2]
 801b91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b91e:	edc2 7a01 	vstr	s15, [r2, #4]
 801b922:	e798      	b.n	801b856 <__kernel_rem_pio2f+0x3d2>
 801b924:	edd3 7a00 	vldr	s15, [r3]
 801b928:	edd3 6a01 	vldr	s13, [r3, #4]
 801b92c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b930:	3a01      	subs	r2, #1
 801b932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b936:	ed83 7a00 	vstr	s14, [r3]
 801b93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b93e:	edc3 7a01 	vstr	s15, [r3, #4]
 801b942:	e78d      	b.n	801b860 <__kernel_rem_pio2f+0x3dc>
 801b944:	ed33 7a01 	vldmdb	r3!, {s14}
 801b948:	3c01      	subs	r4, #1
 801b94a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b94e:	e78f      	b.n	801b870 <__kernel_rem_pio2f+0x3ec>
 801b950:	eef1 6a66 	vneg.f32	s13, s13
 801b954:	eeb1 7a47 	vneg.f32	s14, s14
 801b958:	edc8 6a00 	vstr	s13, [r8]
 801b95c:	ed88 7a01 	vstr	s14, [r8, #4]
 801b960:	eef1 7a67 	vneg.f32	s15, s15
 801b964:	e790      	b.n	801b888 <__kernel_rem_pio2f+0x404>
 801b966:	bf00      	nop

0801b968 <floorf>:
 801b968:	ee10 3a10 	vmov	r3, s0
 801b96c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b970:	3a7f      	subs	r2, #127	; 0x7f
 801b972:	2a16      	cmp	r2, #22
 801b974:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b978:	dc2a      	bgt.n	801b9d0 <floorf+0x68>
 801b97a:	2a00      	cmp	r2, #0
 801b97c:	da11      	bge.n	801b9a2 <floorf+0x3a>
 801b97e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b9e0 <floorf+0x78>
 801b982:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b986:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b98e:	dd05      	ble.n	801b99c <floorf+0x34>
 801b990:	2b00      	cmp	r3, #0
 801b992:	da23      	bge.n	801b9dc <floorf+0x74>
 801b994:	4a13      	ldr	r2, [pc, #76]	; (801b9e4 <floorf+0x7c>)
 801b996:	2900      	cmp	r1, #0
 801b998:	bf18      	it	ne
 801b99a:	4613      	movne	r3, r2
 801b99c:	ee00 3a10 	vmov	s0, r3
 801b9a0:	4770      	bx	lr
 801b9a2:	4911      	ldr	r1, [pc, #68]	; (801b9e8 <floorf+0x80>)
 801b9a4:	4111      	asrs	r1, r2
 801b9a6:	420b      	tst	r3, r1
 801b9a8:	d0fa      	beq.n	801b9a0 <floorf+0x38>
 801b9aa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b9e0 <floorf+0x78>
 801b9ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b9b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9ba:	ddef      	ble.n	801b99c <floorf+0x34>
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	bfbe      	ittt	lt
 801b9c0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b9c4:	fa40 f202 	asrlt.w	r2, r0, r2
 801b9c8:	189b      	addlt	r3, r3, r2
 801b9ca:	ea23 0301 	bic.w	r3, r3, r1
 801b9ce:	e7e5      	b.n	801b99c <floorf+0x34>
 801b9d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b9d4:	d3e4      	bcc.n	801b9a0 <floorf+0x38>
 801b9d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b9da:	4770      	bx	lr
 801b9dc:	2300      	movs	r3, #0
 801b9de:	e7dd      	b.n	801b99c <floorf+0x34>
 801b9e0:	7149f2ca 	.word	0x7149f2ca
 801b9e4:	bf800000 	.word	0xbf800000
 801b9e8:	007fffff 	.word	0x007fffff

0801b9ec <_init>:
 801b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9ee:	bf00      	nop
 801b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9f2:	bc08      	pop	{r3}
 801b9f4:	469e      	mov	lr, r3
 801b9f6:	4770      	bx	lr

0801b9f8 <_fini>:
 801b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9fa:	bf00      	nop
 801b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9fe:	bc08      	pop	{r3}
 801ba00:	469e      	mov	lr, r3
 801ba02:	4770      	bx	lr
