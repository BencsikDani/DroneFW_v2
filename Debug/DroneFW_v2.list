
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001568c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08015870  08015870  00025870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080161c8  080161c8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080161c8  080161c8  000261c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080161d0  080161d0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080161d0  080161d0  000261d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080161d4  080161d4  000261d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080161d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004978  200001f0  080163c8  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b68  080163c8  00034b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028650  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000584e  00000000  00000000  000588b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb0  00000000  00000000  0005e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001618  00000000  00000000  0005fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a27f  00000000  00000000  000613d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029986  00000000  00000000  0008b64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed4e3  00000000  00000000  000b4fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009078  00000000  00000000  001a24b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001ab530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015854 	.word	0x08015854

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08015854 	.word	0x08015854

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Clear controller variables
	pid->prevError  = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->integrator = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30

	// Clear output
	pid->out = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	635a      	str	r2, [r3, #52]	; 0x34

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edd3 7a03 	vldr	s15, [r3, #12]
 8001116:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->alpha = ( 2*pid->T ) / ( 2*pid->tau + pid->T );
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edd3 7a03 	vldr	s15, [r3, #12]
 800112a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edd3 7a05 	vldr	s15, [r3, #20]
 8001134:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	edd3 7a03 	vldr	s15, [r3, #12]
 800113e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edc3 7a06 	vstr	s15, [r3, #24]

	// Reset lastTick
	pid->lastTick = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float reference, float measurement)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	ed87 0a02 	vstr	s0, [r7, #8]
 800116c:	edc7 0a01 	vstr	s1, [r7, #4]
	// Check if enough time has passed for the T sample time
	bool run = false;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currentTick = xTaskGetTickCount();
 8001176:	f00d f8b1 	bl	800e2dc <xTaskGetTickCount>
 800117a:	4603      	mov	r3, r0
 800117c:	623b      	str	r3, [r7, #32]
	// First run after initialization
	if (pid->lastTick == 0)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <PIDController_Update+0x34>
	{
		run = true;
 8001186:	2301      	movs	r3, #1
 8001188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pid->lastTick = currentTick;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	e01a      	b.n	80011ca <PIDController_Update+0x6a>
	}
	// If enough time has passed (Tick's unit is ms, while T's unit is s)
	else if (currentTick - pid->lastTick >= (pid->T * 1000))
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	6a3a      	ldr	r2, [r7, #32]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80011aa:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001370 <PIDController_Update+0x210>
 80011ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	db03      	blt.n	80011c4 <PIDController_Update+0x64>
		run = true;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011c2:	e002      	b.n	80011ca <PIDController_Update+0x6a>
	// If it is too early
	else
		run = false;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	pid->lastTick = currentTick;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6a3a      	ldr	r2, [r7, #32]
 80011ce:	611a      	str	r2, [r3, #16]

	// PID algorithm
	if (run)
 80011d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80c5 	beq.w	8001364 <PIDController_Update+0x204>
	{
		//Error signal
		float error = reference - measurement;
 80011da:	ed97 7a02 	vldr	s14, [r7, #8]
 80011de:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e6:	edc7 7a07 	vstr	s15, [r7, #28]

		// Proportional
		float proportional = pid->Kp * error;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	edc7 7a06 	vstr	s15, [r7, #24]

		// Integral with Anti-windup
		if (!pid->antiWindup)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d01c      	beq.n	8001246 <PIDController_Update+0xe6>
			pid->integrator = pid->integrator + ( pid->Ki * (pid->T / 2) * (error + pid->prevError) );
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	edd3 6a01 	vldr	s13, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	ed93 6a03 	vldr	s12, [r3, #12]
 800121e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001226:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8001230:	edd7 7a07 	vldr	s15, [r7, #28]
 8001234:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		// Derivative with low-pass filter
		pid->differentiator = (1 - pid->alpha) * pid->differentiator
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	edd3 7a06 	vldr	s15, [r3, #24]
 800124c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001250:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800125a:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ pid->alpha *  (pid->Kd * (error - pid->prevError) / pid->T);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	edd3 6a06 	vldr	s13, [r3, #24]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	ed93 6a02 	vldr	s12, [r3, #8]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001270:	edd7 5a07 	vldr	s11, [r7, #28]
 8001274:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001278:	ee66 5a27 	vmul.f32	s11, s12, s15
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001282:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->differentiator = (1 - pid->alpha) * pid->differentiator
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		// Compute output
		pid->out = proportional + pid->integrator + pid->differentiator;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800129a:	edd7 7a06 	vldr	s15, [r7, #24]
 800129e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		float preSaturationOutput = pid->out;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b6:	617b      	str	r3, [r7, #20]

		// Saturating (clamping) the output
		if (pid->out > pid->limMax)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80012c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	dd04      	ble.n	80012d8 <PIDController_Update+0x178>
			pid->out = pid->limMax;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a1a      	ldr	r2, [r3, #32]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
 80012d6:	e00e      	b.n	80012f6 <PIDController_Update+0x196>
		else if (pid->out < pid->limMin)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80012e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	d503      	bpl.n	80012f6 <PIDController_Update+0x196>
			pid->out = pid->limMin;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34

		// Anti-windup check
		// If clamping had an effect...
		if (preSaturationOutput != pid->out)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80012fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001300:	eeb4 7a67 	vcmp.f32	s14, s15
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	d020      	beq.n	800134c <PIDController_Update+0x1ec>
		{
			// ...and if the integrator is trying to make saturation worse
			if ((preSaturationOutput > 0 && error > 0)
 800130a:	edd7 7a05 	vldr	s15, [r7, #20]
 800130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	dd06      	ble.n	8001326 <PIDController_Update+0x1c6>
 8001318:	edd7 7a07 	vldr	s15, [r7, #28]
 800131c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	dc0d      	bgt.n	8001342 <PIDController_Update+0x1e2>
					|| (preSaturationOutput < 0 && error < 0))
 8001326:	edd7 7a05 	vldr	s15, [r7, #20]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d50f      	bpl.n	8001354 <PIDController_Update+0x1f4>
 8001334:	edd7 7a07 	vldr	s15, [r7, #28]
 8001338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d508      	bpl.n	8001354 <PIDController_Update+0x1f4>
				pid->antiWindup = true;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800134a:	e003      	b.n	8001354 <PIDController_Update+0x1f4>
		}
		else
			pid->antiWindup = false;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		// Store error for later use
		pid->prevError = error;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	629a      	str	r2, [r3, #40]	; 0x28

		// Return controller output
		return pid->out;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	e7ff      	b.n	8001364 <PIDController_Update+0x204>
	}
}
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	447a0000 	.word	0x447a0000

08001374 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b09c      	sub	sp, #112	; 0x70
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <Log+0x44>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d014      	beq.n	80013ae <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	490c      	ldr	r1, [pc, #48]	; (80013bc <Log+0x48>)
 800138c:	4618      	mov	r0, r3
 800138e:	f00f f855 	bl	801043c <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ff92 	bl	80002c0 <strlen>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f107 010c 	add.w	r1, r7, #12
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <Log+0x4c>)
 80013aa:	f009 fecb 	bl	800b144 <HAL_UART_Transmit>
	}
}
 80013ae:	bf00      	nop
 80013b0:	3770      	adds	r7, #112	; 0x70
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	08015870 	.word	0x08015870
 80013c0:	20000b54 	.word	0x20000b54

080013c4 <TaskController>:
extern osMutexId ImuMutexHandle;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void TaskController(void const *argument)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 80013cc:	23c8      	movs	r3, #200	; 0xc8
 80013ce:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 80013d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	613b      	str	r3, [r7, #16]

	PID_Roll_Attitude.Kp = 0;
 80013dc:	4b56      	ldr	r3, [pc, #344]	; (8001538 <TaskController+0x174>)
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
	PID_Roll_Attitude.Ki = 0;
 80013e4:	4b54      	ldr	r3, [pc, #336]	; (8001538 <TaskController+0x174>)
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
	PID_Roll_Attitude.Kd = 0;
 80013ec:	4b52      	ldr	r3, [pc, #328]	; (8001538 <TaskController+0x174>)
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
	PID_Roll_Attitude.T = 0;
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <TaskController+0x174>)
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
	PID_Roll_Attitude.limMin = 0;
 80013fc:	4b4e      	ldr	r3, [pc, #312]	; (8001538 <TaskController+0x174>)
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
	PID_Roll_Attitude.limMax = 50;
 8001404:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <TaskController+0x174>)
 8001406:	4a4d      	ldr	r2, [pc, #308]	; (800153c <TaskController+0x178>)
 8001408:	621a      	str	r2, [r3, #32]
	PIDController_Init(&PID_Roll_Attitude);
 800140a:	484b      	ldr	r0, [pc, #300]	; (8001538 <TaskController+0x174>)
 800140c:	f7ff fe68 	bl	80010e0 <PIDController_Init>

	PID_Roll_AngVel.Kp = 0;
 8001410:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <TaskController+0x17c>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	PID_Roll_AngVel.Ki = 0;
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <TaskController+0x17c>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
	PID_Roll_AngVel.Kd = 0;
 8001420:	4b47      	ldr	r3, [pc, #284]	; (8001540 <TaskController+0x17c>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
	PID_Roll_AngVel.T = 0.005;
 8001428:	4b45      	ldr	r3, [pc, #276]	; (8001540 <TaskController+0x17c>)
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <TaskController+0x180>)
 800142c:	60da      	str	r2, [r3, #12]
	PID_Roll_AngVel.limMin = -25;
 800142e:	4b44      	ldr	r3, [pc, #272]	; (8001540 <TaskController+0x17c>)
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <TaskController+0x184>)
 8001432:	61da      	str	r2, [r3, #28]
	PID_Roll_AngVel.limMax = 25;
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <TaskController+0x17c>)
 8001436:	4a45      	ldr	r2, [pc, #276]	; (800154c <TaskController+0x188>)
 8001438:	621a      	str	r2, [r3, #32]
	PIDController_Init(&PID_Roll_AngVel);
 800143a:	4841      	ldr	r0, [pc, #260]	; (8001540 <TaskController+0x17c>)
 800143c:	f7ff fe50 	bl	80010e0 <PIDController_Init>

	xLastWakeTime = xTaskGetTickCount();
 8001440:	f00c ff4c 	bl	800e2dc <xTaskGetTickCount>
 8001444:	4603      	mov	r3, r0
 8001446:	60bb      	str	r3, [r7, #8]
	// Infinite loop
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	6939      	ldr	r1, [r7, #16]
 800144e:	4618      	mov	r0, r3
 8001450:	f00c fd70 	bl	800df34 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001454:	f00c ff42 	bl	800e2dc <xTaskGetTickCount>
 8001458:	60f8      	str	r0, [r7, #12]
//			Throttle_controlled = PIDController_Update(&PID_Thrust, 0.2f, Distance/1000.0f);
//		}
//		osMutexRelease(DistMutexHandle);


		if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <TaskController+0x18c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f04f 31ff 	mov.w	r1, #4294967295
 8001462:	4618      	mov	r0, r3
 8001464:	f00b fba2 	bl	800cbac <osMutexWait>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d153      	bne.n	8001516 <TaskController+0x152>
				&& osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <TaskController+0x190>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f04f 31ff 	mov.w	r1, #4294967295
 8001476:	4618      	mov	r0, r3
 8001478:	f00b fb98 	bl	800cbac <osMutexWait>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d149      	bne.n	8001516 <TaskController+0x152>
				&& osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <TaskController+0x194>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f04f 31ff 	mov.w	r1, #4294967295
 800148a:	4618      	mov	r0, r3
 800148c:	f00b fb8e 	bl	800cbac <osMutexWait>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d13f      	bne.n	8001516 <TaskController+0x152>
		{
			PID_Roll_AngVel.Kp = VRA / 1000.0;
 8001496:	4b31      	ldr	r3, [pc, #196]	; (800155c <TaskController+0x198>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f86a 	bl	8000574 <__aeabi_i2d>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <TaskController+0x19c>)
 80014a6:	f7ff f9f9 	bl	800089c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fbc1 	bl	8000c38 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <TaskController+0x17c>)
 80014ba:	6013      	str	r3, [r2, #0]
			PID_Roll_AngVel.Kd = VRB / 1000.0;
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <TaskController+0x1a0>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f857 	bl	8000574 <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <TaskController+0x19c>)
 80014cc:	f7ff f9e6 	bl	800089c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fbae 	bl	8000c38 <__aeabi_d2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <TaskController+0x17c>)
 80014e0:	6093      	str	r3, [r2, #8]

			//float AngVelRef = PIDController_Update(&PID_Roll_Attitude, Roll_in/5, Roll_measured);
			Roll_controlled = PIDController_Update(&PID_Roll_AngVel, (Roll_in), GyroData[0]);
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <TaskController+0x1a4>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <TaskController+0x1a8>)
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	eef0 0a47 	vmov.f32	s1, s14
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	4810      	ldr	r0, [pc, #64]	; (8001540 <TaskController+0x17c>)
 8001500:	f7ff fe2e 	bl	8001160 <PIDController_Update>
 8001504:	eef0 7a40 	vmov.f32	s15, s0
 8001508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150c:	ee17 3a90 	vmov	r3, s15
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <TaskController+0x1ac>)
 8001514:	801a      	strh	r2, [r3, #0]
		}
		osMutexRelease(ControllerMutexHandle);
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <TaskController+0x18c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f00b fb94 	bl	800cc48 <osMutexRelease>
		osMutexRelease(RemoteDataMutexHandle);
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <TaskController+0x190>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f00b fb8f 	bl	800cc48 <osMutexRelease>
		osMutexRelease(ImuMutexHandle);
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <TaskController+0x194>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f00b fb8a 	bl	800cc48 <osMutexRelease>
	{
 8001534:	e788      	b.n	8001448 <TaskController+0x84>
 8001536:	bf00      	nop
 8001538:	20000218 	.word	0x20000218
 800153c:	42480000 	.word	0x42480000
 8001540:	20000250 	.word	0x20000250
 8001544:	3ba3d70a 	.word	0x3ba3d70a
 8001548:	c1c80000 	.word	0xc1c80000
 800154c:	41c80000 	.word	0x41c80000
 8001550:	20000c6c 	.word	0x20000c6c
 8001554:	20000c58 	.word	0x20000c58
 8001558:	20000c5c 	.word	0x20000c5c
 800155c:	2000029a 	.word	0x2000029a
 8001560:	408f4000 	.word	0x408f4000
 8001564:	2000029c 	.word	0x2000029c
 8001568:	2000028e 	.word	0x2000028e
 800156c:	20000324 	.word	0x20000324
 8001570:	20000290 	.word	0x20000290

08001574 <DisassembleFloatIntoUint8s>:
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;
extern osMutexId ControllerMutexHandle;

void DisassembleFloatIntoUint8s(float* n, uint8_t* array, int position)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	memcpy(array+position, n, sizeof(float));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	4413      	add	r3, r2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <TaskDiagnostics>:

void TaskDiagnostics(void const *argument)
{
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80015a0:	af14      	add	r7, sp, #80	; 0x50
 80015a2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80015a6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80015aa:	6018      	str	r0, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5; //Hz
 80015ac:	2305      	movs	r3, #5
 80015ae:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 80015b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015b6:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
	char UARTstr[512];
	int8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (int8_t)('i');
 80015c2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80015c6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80015ca:	2269      	movs	r2, #105	; 0x69
 80015cc:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 80015ce:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80015d2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80015d6:	2266      	movs	r2, #102	; 0x66
 80015d8:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 80015da:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80015de:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80015e2:	2267      	movs	r2, #103	; 0x67
 80015e4:	701a      	strb	r2, [r3, #0]

	xLastWakeTime = xTaskGetTickCount();
 80015e6:	f00c fe79 	bl	800e2dc <xTaskGetTickCount>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 80015f0:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80015f4:	f8d7 1300 	ldr.w	r1, [r7, #768]	; 0x300
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00c fc9b 	bl	800df34 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 80015fe:	f00c fe6d 	bl	800e2dc <xTaskGetTickCount>
 8001602:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc

		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001606:	4bb5      	ldr	r3, [pc, #724]	; (80018dc <TaskDiagnostics+0x344>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f04f 31ff 	mov.w	r1, #4294967295
 800160e:	4618      	mov	r0, r3
 8001610:	f00b facc 	bl	800cbac <osMutexWait>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 80f0 	bne.w	80017fc <TaskDiagnostics+0x264>
		{
			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, TIM1->CCR1-1000, TIM1->CCR2-1000, TIM1->CCR3-1000, TIM1->CCR4-1000);
 800161c:	4bb0      	ldr	r3, [pc, #704]	; (80018e0 <TaskDiagnostics+0x348>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	461d      	mov	r5, r3
 8001622:	4bb0      	ldr	r3, [pc, #704]	; (80018e4 <TaskDiagnostics+0x34c>)
 8001624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001626:	f5a3 747a 	sub.w	r4, r3, #1000	; 0x3e8
 800162a:	4bae      	ldr	r3, [pc, #696]	; (80018e4 <TaskDiagnostics+0x34c>)
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001632:	4aac      	ldr	r2, [pc, #688]	; (80018e4 <TaskDiagnostics+0x34c>)
 8001634:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001636:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 800163a:	49aa      	ldr	r1, [pc, #680]	; (80018e4 <TaskDiagnostics+0x34c>)
 800163c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800163e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8001642:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001646:	9102      	str	r1, [sp, #8]
 8001648:	9201      	str	r2, [sp, #4]
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4623      	mov	r3, r4
 800164e:	462a      	mov	r2, r5
 8001650:	49a5      	ldr	r1, [pc, #660]	; (80018e8 <TaskDiagnostics+0x350>)
 8001652:	f00e fef3 	bl	801043c <siprintf>
			SpiIntData[1] = (int8_t)Throttle_in;
 8001656:	4ba2      	ldr	r3, [pc, #648]	; (80018e0 <TaskDiagnostics+0x348>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	b25a      	sxtb	r2, r3
 800165c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001660:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001664:	705a      	strb	r2, [r3, #1]
			SpiIntData[2] = (int8_t)TIM1->CCR1-50;
 8001666:	4b9f      	ldr	r3, [pc, #636]	; (80018e4 <TaskDiagnostics+0x34c>)
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3b32      	subs	r3, #50	; 0x32
 800166e:	b2db      	uxtb	r3, r3
 8001670:	b25a      	sxtb	r2, r3
 8001672:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001676:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800167a:	709a      	strb	r2, [r3, #2]
			SpiIntData[3] = (int8_t)TIM1->CCR2-50;
 800167c:	4b99      	ldr	r3, [pc, #612]	; (80018e4 <TaskDiagnostics+0x34c>)
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3b32      	subs	r3, #50	; 0x32
 8001684:	b2db      	uxtb	r3, r3
 8001686:	b25a      	sxtb	r2, r3
 8001688:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800168c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001690:	70da      	strb	r2, [r3, #3]
			SpiIntData[4] = (int8_t)TIM1->CCR3-50;
 8001692:	4b94      	ldr	r3, [pc, #592]	; (80018e4 <TaskDiagnostics+0x34c>)
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	b2db      	uxtb	r3, r3
 8001698:	3b32      	subs	r3, #50	; 0x32
 800169a:	b2db      	uxtb	r3, r3
 800169c:	b25a      	sxtb	r2, r3
 800169e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80016a2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80016a6:	711a      	strb	r2, [r3, #4]
			SpiIntData[5] = (int8_t)TIM1->CCR4-50;
 80016a8:	4b8e      	ldr	r3, [pc, #568]	; (80018e4 <TaskDiagnostics+0x34c>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3b32      	subs	r3, #50	; 0x32
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80016b8:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80016bc:	715a      	strb	r2, [r3, #5]

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 80016be:	4b8b      	ldr	r3, [pc, #556]	; (80018ec <TaskDiagnostics+0x354>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80016c8:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80016cc:	4988      	ldr	r1, [pc, #544]	; (80018f0 <TaskDiagnostics+0x358>)
 80016ce:	f00e feb5 	bl	801043c <siprintf>
			SpiIntData[6] = (int8_t)Yaw_in;
 80016d2:	4b86      	ldr	r3, [pc, #536]	; (80018ec <TaskDiagnostics+0x354>)
 80016d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80016de:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80016e2:	719a      	strb	r2, [r3, #6]

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 80016e4:	4b83      	ldr	r3, [pc, #524]	; (80018f4 <TaskDiagnostics+0x35c>)
 80016e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ea:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80016ee:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80016f2:	4981      	ldr	r1, [pc, #516]	; (80018f8 <TaskDiagnostics+0x360>)
 80016f4:	f00e fea2 	bl	801043c <siprintf>
			SpiIntData[7] = (int8_t)Pitch_in;
 80016f8:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <TaskDiagnostics+0x35c>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001704:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001708:	71da      	strb	r2, [r3, #7]

			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in);
 800170a:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <TaskDiagnostics+0x364>)
 800170c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001710:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001714:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001718:	4979      	ldr	r1, [pc, #484]	; (8001900 <TaskDiagnostics+0x368>)
 800171a:	f00e fe8f 	bl	801043c <siprintf>
			SpiIntData[8] = (int8_t)(Roll_in);
 800171e:	4b77      	ldr	r3, [pc, #476]	; (80018fc <TaskDiagnostics+0x364>)
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	b25a      	sxtb	r2, r3
 8001726:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800172a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800172e:	721a      	strb	r2, [r3, #8]

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8001730:	4b74      	ldr	r3, [pc, #464]	; (8001904 <TaskDiagnostics+0x36c>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001738:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800173c:	4972      	ldr	r1, [pc, #456]	; (8001908 <TaskDiagnostics+0x370>)
 800173e:	f00e fe7d 	bl	801043c <siprintf>
			SpiIntData[9] = (int8_t)SWA;
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <TaskDiagnostics+0x36c>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b25a      	sxtb	r2, r3
 8001748:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800174c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001750:	725a      	strb	r2, [r3, #9]

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 8001752:	4b6e      	ldr	r3, [pc, #440]	; (800190c <TaskDiagnostics+0x374>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800175a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800175e:	496c      	ldr	r1, [pc, #432]	; (8001910 <TaskDiagnostics+0x378>)
 8001760:	f00e fe6c 	bl	801043c <siprintf>
			SpiIntData[10] = (int8_t)SWB;
 8001764:	4b69      	ldr	r3, [pc, #420]	; (800190c <TaskDiagnostics+0x374>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b25a      	sxtb	r2, r3
 800176a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800176e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001772:	729a      	strb	r2, [r3, #10]

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 8001774:	4b67      	ldr	r3, [pc, #412]	; (8001914 <TaskDiagnostics+0x37c>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800177c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001780:	4965      	ldr	r1, [pc, #404]	; (8001918 <TaskDiagnostics+0x380>)
 8001782:	f00e fe5b 	bl	801043c <siprintf>
			SpiIntData[11] = (int8_t)SWC;
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <TaskDiagnostics+0x37c>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	b25a      	sxtb	r2, r3
 800178c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001790:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001794:	72da      	strb	r2, [r3, #11]

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <TaskDiagnostics+0x384>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800179e:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80017a2:	495f      	ldr	r1, [pc, #380]	; (8001920 <TaskDiagnostics+0x388>)
 80017a4:	f00e fe4a 	bl	801043c <siprintf>
			SpiIntData[12] = (int8_t)SWD;
 80017a8:	4b5c      	ldr	r3, [pc, #368]	; (800191c <TaskDiagnostics+0x384>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b25a      	sxtb	r2, r3
 80017ae:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80017b2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80017b6:	731a      	strb	r2, [r3, #12]

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 80017b8:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <TaskDiagnostics+0x38c>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80017c0:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80017c4:	4958      	ldr	r1, [pc, #352]	; (8001928 <TaskDiagnostics+0x390>)
 80017c6:	f00e fe39 	bl	801043c <siprintf>
			SpiIntData[13] = (int8_t)VRA;
 80017ca:	4b56      	ldr	r3, [pc, #344]	; (8001924 <TaskDiagnostics+0x38c>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80017d4:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80017d8:	735a      	strb	r2, [r3, #13]

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 80017da:	4b54      	ldr	r3, [pc, #336]	; (800192c <TaskDiagnostics+0x394>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80017e2:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80017e6:	4952      	ldr	r1, [pc, #328]	; (8001930 <TaskDiagnostics+0x398>)
 80017e8:	f00e fe28 	bl	801043c <siprintf>
			SpiIntData[14] = (int8_t)VRB;
 80017ec:	4b4f      	ldr	r3, [pc, #316]	; (800192c <TaskDiagnostics+0x394>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b25a      	sxtb	r2, r3
 80017f2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80017f6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80017fa:	739a      	strb	r2, [r3, #14]
		}
		osMutexRelease(RemoteDataMutexHandle);
 80017fc:	4b37      	ldr	r3, [pc, #220]	; (80018dc <TaskDiagnostics+0x344>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f00b fa21 	bl	800cc48 <osMutexRelease>

		if (IsImuAvailable)
 8001806:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <TaskDiagnostics+0x39c>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8124 	beq.w	8001a58 <TaskDiagnostics+0x4c0>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001810:	4b49      	ldr	r3, [pc, #292]	; (8001938 <TaskDiagnostics+0x3a0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	4618      	mov	r0, r3
 800181a:	f00b f9c7 	bl	800cbac <osMutexWait>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 8114 	bne.w	8001a4e <TaskDiagnostics+0x4b6>
			{
				sprintf(UARTstr,
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <TaskDiagnostics+0x3a4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe feb4 	bl	8000598 <__aeabi_f2d>
 8001830:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\nRoll: %1.2f ° ; Pitch: %1.2f ° ; Yaw: %1.2f °\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <TaskDiagnostics+0x3a8>)
 8001836:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fead 	bl	8000598 <__aeabi_f2d>
 800183e:	e9c7 0108 	strd	r0, r1, [r7, #32]
						AccData[0], AccData[1], AccData[2],
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <TaskDiagnostics+0x3a8>)
 8001844:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fea6 	bl	8000598 <__aeabi_f2d>
 800184c:	e9c7 0106 	strd	r0, r1, [r7, #24]
						AccData[0], AccData[1], AccData[2],
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <TaskDiagnostics+0x3a8>)
 8001852:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe9f 	bl	8000598 <__aeabi_f2d>
 800185a:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GyroData[0], GyroData[1], GyroData[2],
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <TaskDiagnostics+0x3ac>)
 8001860:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe98 	bl	8000598 <__aeabi_f2d>
 8001868:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2],
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <TaskDiagnostics+0x3ac>)
 800186e:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe91 	bl	8000598 <__aeabi_f2d>
 8001876:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2],
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <TaskDiagnostics+0x3ac>)
 800187c:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe8a 	bl	8000598 <__aeabi_f2d>
 8001884:	4682      	mov	sl, r0
 8001886:	468b      	mov	fp, r1
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <TaskDiagnostics+0x3b0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe83 	bl	8000598 <__aeabi_f2d>
 8001892:	4680      	mov	r8, r0
 8001894:	4689      	mov	r9, r1
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <TaskDiagnostics+0x3b4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe7c 	bl	8000598 <__aeabi_f2d>
 80018a0:	4604      	mov	r4, r0
 80018a2:	460d      	mov	r5, r1
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <TaskDiagnostics+0x3b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe75 	bl	8000598 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80018b6:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80018ba:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80018be:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80018c2:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80018c6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80018ca:	ed97 7b00 	vldr	d7, [r7]
 80018ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80018d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80018d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80018da:	e03b      	b.n	8001954 <TaskDiagnostics+0x3bc>
 80018dc:	20000c58 	.word	0x20000c58
 80018e0:	20000288 	.word	0x20000288
 80018e4:	40010000 	.word	0x40010000
 80018e8:	08015880 	.word	0x08015880
 80018ec:	2000028a 	.word	0x2000028a
 80018f0:	080158a0 	.word	0x080158a0
 80018f4:	2000028c 	.word	0x2000028c
 80018f8:	080158ac 	.word	0x080158ac
 80018fc:	2000028e 	.word	0x2000028e
 8001900:	080158bc 	.word	0x080158bc
 8001904:	20000292 	.word	0x20000292
 8001908:	080158cc 	.word	0x080158cc
 800190c:	20000294 	.word	0x20000294
 8001910:	080158d8 	.word	0x080158d8
 8001914:	20000296 	.word	0x20000296
 8001918:	080158e4 	.word	0x080158e4
 800191c:	20000298 	.word	0x20000298
 8001920:	080158f0 	.word	0x080158f0
 8001924:	2000029a 	.word	0x2000029a
 8001928:	080158fc 	.word	0x080158fc
 800192c:	2000029c 	.word	0x2000029c
 8001930:	08015908 	.word	0x08015908
 8001934:	20000214 	.word	0x20000214
 8001938:	20000c5c 	.word	0x20000c5c
 800193c:	20000320 	.word	0x20000320
 8001940:	20000314 	.word	0x20000314
 8001944:	20000324 	.word	0x20000324
 8001948:	20000330 	.word	0x20000330
 800194c:	20000334 	.word	0x20000334
 8001950:	20000338 	.word	0x20000338
 8001954:	ed97 7b04 	vldr	d7, [r7, #16]
 8001958:	ed8d 7b06 	vstr	d7, [sp, #24]
 800195c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001960:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001964:	ed97 7b08 	vldr	d7, [r7, #32]
 8001968:	ed8d 7b02 	vstr	d7, [sp, #8]
 800196c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001970:	ed8d 7b00 	vstr	d7, [sp]
 8001974:	460a      	mov	r2, r1
 8001976:	4980      	ldr	r1, [pc, #512]	; (8001b78 <TaskDiagnostics+0x5e0>)
 8001978:	f00e fd60 	bl	801043c <siprintf>
						Roll_measured, Pitch_measured, Yaw_measured);
				DisassembleFloatIntoUint8s(&TempData, SpiFloatData1, 1);
 800197c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001980:	2201      	movs	r2, #1
 8001982:	4619      	mov	r1, r3
 8001984:	487d      	ldr	r0, [pc, #500]	; (8001b7c <TaskDiagnostics+0x5e4>)
 8001986:	f7ff fdf5 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData, SpiFloatData1, 5);
 800198a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800198e:	2205      	movs	r2, #5
 8001990:	4619      	mov	r1, r3
 8001992:	487b      	ldr	r0, [pc, #492]	; (8001b80 <TaskDiagnostics+0x5e8>)
 8001994:	f7ff fdee 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+1, SpiFloatData1, 9);
 8001998:	487a      	ldr	r0, [pc, #488]	; (8001b84 <TaskDiagnostics+0x5ec>)
 800199a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800199e:	2209      	movs	r2, #9
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff fde7 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+2, SpiFloatData1, 13);
 80019a6:	4878      	ldr	r0, [pc, #480]	; (8001b88 <TaskDiagnostics+0x5f0>)
 80019a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019ac:	220d      	movs	r2, #13
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff fde0 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData, SpiFloatData1, 17);
 80019b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019b8:	2211      	movs	r2, #17
 80019ba:	4619      	mov	r1, r3
 80019bc:	4873      	ldr	r0, [pc, #460]	; (8001b8c <TaskDiagnostics+0x5f4>)
 80019be:	f7ff fdd9 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+1, SpiFloatData1, 21);
 80019c2:	4873      	ldr	r0, [pc, #460]	; (8001b90 <TaskDiagnostics+0x5f8>)
 80019c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019c8:	2215      	movs	r2, #21
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff fdd2 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+2, SpiFloatData1, 25);
 80019d0:	4870      	ldr	r0, [pc, #448]	; (8001b94 <TaskDiagnostics+0x5fc>)
 80019d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019d6:	2219      	movs	r2, #25
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff fdcb 	bl	8001574 <DisassembleFloatIntoUint8s>

				sprintf(UARTstr,
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <TaskDiagnostics+0x600>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdd8 	bl	8000598 <__aeabi_f2d>
 80019e8:	4604      	mov	r4, r0
 80019ea:	460d      	mov	r5, r1
 80019ec:	4b6b      	ldr	r3, [pc, #428]	; (8001b9c <TaskDiagnostics+0x604>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdd1 	bl	8000598 <__aeabi_f2d>
 80019f6:	4680      	mov	r8, r0
 80019f8:	4689      	mov	r9, r1
 80019fa:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <TaskDiagnostics+0x608>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdca 	bl	8000598 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001a0c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001a10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a14:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a18:	e9cd 4500 	strd	r4, r5, [sp]
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	4961      	ldr	r1, [pc, #388]	; (8001ba4 <TaskDiagnostics+0x60c>)
 8001a20:	f00e fd0c 	bl	801043c <siprintf>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				DisassembleFloatIntoUint8s(&BMP_Temp, SpiFloatData1, 29);
 8001a24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a28:	221d      	movs	r2, #29
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	485a      	ldr	r0, [pc, #360]	; (8001b98 <TaskDiagnostics+0x600>)
 8001a2e:	f7ff fda1 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Pres, SpiFloatData1, 33);
 8001a32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a36:	2221      	movs	r2, #33	; 0x21
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4858      	ldr	r0, [pc, #352]	; (8001b9c <TaskDiagnostics+0x604>)
 8001a3c:	f7ff fd9a 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Alt, SpiFloatData1, 37);
 8001a40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a44:	2225      	movs	r2, #37	; 0x25
 8001a46:	4619      	mov	r1, r3
 8001a48:	4855      	ldr	r0, [pc, #340]	; (8001ba0 <TaskDiagnostics+0x608>)
 8001a4a:	f7ff fd93 	bl	8001574 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 8001a4e:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <TaskDiagnostics+0x610>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f00b f8f8 	bl	800cc48 <osMutexRelease>
				DisassembleFloatIntoUint8s(&MAG_dir, SpiFloatData1, 53);
			}
			osMutexRelease(MagnMutexHandle);
		}

		if (IsDistAvailable)
 8001a58:	4b54      	ldr	r3, [pc, #336]	; (8001bac <TaskDiagnostics+0x614>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d026      	beq.n	8001aae <TaskDiagnostics+0x516>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <TaskDiagnostics+0x618>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00b f89f 	bl	800cbac <osMutexWait>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d117      	bne.n	8001aa4 <TaskDiagnostics+0x50c>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 8001a74:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <TaskDiagnostics+0x61c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd8d 	bl	8000598 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001a86:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001a8a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a8e:	460a      	mov	r2, r1
 8001a90:	4949      	ldr	r1, [pc, #292]	; (8001bb8 <TaskDiagnostics+0x620>)
 8001a92:	f00e fcd3 	bl	801043c <siprintf>
				DisassembleFloatIntoUint8s(&Distance, SpiFloatData1, 57);
 8001a96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a9a:	2239      	movs	r2, #57	; 0x39
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4845      	ldr	r0, [pc, #276]	; (8001bb4 <TaskDiagnostics+0x61c>)
 8001aa0:	f7ff fd68 	bl	8001574 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(DistMutexHandle);
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <TaskDiagnostics+0x618>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00b f8cd 	bl	800cc48 <osMutexRelease>
				SpiIntData[19] = (int8_t)GPS.altitude_unit;
			}
			osMutexRelease(GpsDataMutexHandle);
		}

		if (Tune)
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <TaskDiagnostics+0x624>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d025      	beq.n	8001b02 <TaskDiagnostics+0x56a>
		{
			if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8001ab6:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <TaskDiagnostics+0x628>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f04f 31ff 	mov.w	r1, #4294967295
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00b f874 	bl	800cbac <osMutexWait>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <TaskDiagnostics+0x560>
			{
				SpiIntData[20] = (int8_t)Roll_controlled;
 8001aca:	4b3e      	ldr	r3, [pc, #248]	; (8001bc4 <TaskDiagnostics+0x62c>)
 8001acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad0:	b25a      	sxtb	r2, r3
 8001ad2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001ad6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001ada:	751a      	strb	r2, [r3, #20]
				DisassembleFloatIntoUint8s(&(PID_Roll_AngVel.Kp), SpiFloatData2, 17);
 8001adc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ae0:	2211      	movs	r2, #17
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4838      	ldr	r0, [pc, #224]	; (8001bc8 <TaskDiagnostics+0x630>)
 8001ae6:	f7ff fd45 	bl	8001574 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&(PID_Roll_AngVel.Kd), SpiFloatData2, 21);
 8001aea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aee:	2215      	movs	r2, #21
 8001af0:	4619      	mov	r1, r3
 8001af2:	4836      	ldr	r0, [pc, #216]	; (8001bcc <TaskDiagnostics+0x634>)
 8001af4:	f7ff fd3e 	bl	8001574 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(ControllerMutexHandle);
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <TaskDiagnostics+0x628>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00b f8a3 	bl	800cc48 <osMutexRelease>
		}


		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8001b02:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001b06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b0a:	4931      	ldr	r1, [pc, #196]	; (8001bd0 <TaskDiagnostics+0x638>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00e fc95 	bl	801043c <siprintf>

		// Sending log info
		if (Diag)
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <TaskDiagnostics+0x63c>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f43f ad6a 	beq.w	80015f0 <TaskDiagnostics+0x58>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8001b1c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fbcd 	bl	80002c0 <strlen>
 8001b26:	4603      	mov	r3, r0
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	4829      	ldr	r0, [pc, #164]	; (8001bd8 <TaskDiagnostics+0x640>)
 8001b34:	f009 fb06 	bl	800b144 <HAL_UART_Transmit>
			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8001b38:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	4826      	ldr	r0, [pc, #152]	; (8001bdc <TaskDiagnostics+0x644>)
 8001b44:	f006 fe19 	bl	800877a <HAL_SPI_Transmit>
			osDelay(10);
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f00b f802 	bl	800cb52 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8001b4e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	4820      	ldr	r0, [pc, #128]	; (8001bdc <TaskDiagnostics+0x644>)
 8001b5a:	f006 fe0e 	bl	800877a <HAL_SPI_Transmit>
			osDelay(10);
 8001b5e:	200a      	movs	r0, #10
 8001b60:	f00a fff7 	bl	800cb52 <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8001b64:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	2240      	movs	r2, #64	; 0x40
 8001b6e:	481b      	ldr	r0, [pc, #108]	; (8001bdc <TaskDiagnostics+0x644>)
 8001b70:	f006 fe03 	bl	800877a <HAL_SPI_Transmit>
	{
 8001b74:	e53c      	b.n	80015f0 <TaskDiagnostics+0x58>
 8001b76:	bf00      	nop
 8001b78:	08015914 	.word	0x08015914
 8001b7c:	20000320 	.word	0x20000320
 8001b80:	20000314 	.word	0x20000314
 8001b84:	20000318 	.word	0x20000318
 8001b88:	2000031c 	.word	0x2000031c
 8001b8c:	20000324 	.word	0x20000324
 8001b90:	20000328 	.word	0x20000328
 8001b94:	2000032c 	.word	0x2000032c
 8001b98:	2000036c 	.word	0x2000036c
 8001b9c:	20000370 	.word	0x20000370
 8001ba0:	20000374 	.word	0x20000374
 8001ba4:	08015990 	.word	0x08015990
 8001ba8:	20000c5c 	.word	0x20000c5c
 8001bac:	20000216 	.word	0x20000216
 8001bb0:	20000c64 	.word	0x20000c64
 8001bb4:	200003d8 	.word	0x200003d8
 8001bb8:	080159c4 	.word	0x080159c4
 8001bbc:	20000001 	.word	0x20000001
 8001bc0:	20000c6c 	.word	0x20000c6c
 8001bc4:	20000290 	.word	0x20000290
 8001bc8:	20000250 	.word	0x20000250
 8001bcc:	20000258 	.word	0x20000258
 8001bd0:	080159dc 	.word	0x080159dc
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000b54 	.word	0x20000b54
 8001bdc:	200008e4 	.word	0x200008e4

08001be0 <ConvertToPwm>:
extern TIM_HandleTypeDef htim1;
extern osMutexId RemoteDataMutexHandle;
extern osMutexId ControllerMutexHandle;

uint32_t ConvertToPwm(int32_t raw)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	// Norm raw data to 0-1000
	if (raw < 0)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da02      	bge.n	8001bf4 <ConvertToPwm+0x14>
		raw = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	e006      	b.n	8001c02 <ConvertToPwm+0x22>
	else if (raw > 1000)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bfa:	dd02      	ble.n	8001c02 <ConvertToPwm+0x22>
		raw = 1000;
 8001bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c00:	607b      	str	r3, [r7, #4]

	// Add 50, so the range will be 1000-2000
	return (uint32_t)(raw + 1000);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <TaskMotor>:

void TaskMotor(void const *argument)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b08b      	sub	sp, #44	; 0x2c
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8001c1c:	23c8      	movs	r3, #200	; 0xc8
 8001c1e:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	613b      	str	r3, [r7, #16]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	484e      	ldr	r0, [pc, #312]	; (8001d68 <TaskMotor+0x154>)
 8001c30:	f007 fd8a 	bl	8009748 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c34:	2104      	movs	r1, #4
 8001c36:	484c      	ldr	r0, [pc, #304]	; (8001d68 <TaskMotor+0x154>)
 8001c38:	f007 fd86 	bl	8009748 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c3c:	2108      	movs	r1, #8
 8001c3e:	484a      	ldr	r0, [pc, #296]	; (8001d68 <TaskMotor+0x154>)
 8001c40:	f007 fd82 	bl	8009748 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001c44:	210c      	movs	r1, #12
 8001c46:	4848      	ldr	r0, [pc, #288]	; (8001d68 <TaskMotor+0x154>)
 8001c48:	f007 fd7e 	bl	8009748 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM1->CCR1 = (uint32_t) (50);
 8001c4c:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <TaskMotor+0x158>)
 8001c4e:	2232      	movs	r2, #50	; 0x32
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) (50);
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <TaskMotor+0x158>)
 8001c54:	2232      	movs	r2, #50	; 0x32
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) (50);
 8001c58:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <TaskMotor+0x158>)
 8001c5a:	2232      	movs	r2, #50	; 0x32
 8001c5c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint32_t) (50);
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <TaskMotor+0x158>)
 8001c60:	2232      	movs	r2, #50	; 0x32
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40

	xLastWakeTime = xTaskGetTickCount();
 8001c64:	f00c fb3a 	bl	800e2dc <xTaskGetTickCount>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	6939      	ldr	r1, [r7, #16]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00c f95e 	bl	800df34 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001c78:	f00c fb30 	bl	800e2dc <xTaskGetTickCount>
 8001c7c:	60f8      	str	r0, [r7, #12]

		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <TaskMotor+0x15c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f04f 31ff 	mov.w	r1, #4294967295
 8001c86:	4618      	mov	r0, r3
 8001c88:	f00a ff90 	bl	800cbac <osMutexWait>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d163      	bne.n	8001d5a <TaskMotor+0x146>
		{
			// Hardware safety
			if (SWA < 10)
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <TaskMotor+0x160>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	2b09      	cmp	r3, #9
 8001c98:	d806      	bhi.n	8001ca8 <TaskMotor+0x94>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca0:	4835      	ldr	r0, [pc, #212]	; (8001d78 <TaskMotor+0x164>)
 8001ca2:	f004 fe5f 	bl	8006964 <HAL_GPIO_WritePin>
 8001ca6:	e005      	b.n	8001cb4 <TaskMotor+0xa0>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cae:	4832      	ldr	r0, [pc, #200]	; (8001d78 <TaskMotor+0x164>)
 8001cb0:	f004 fe58 	bl	8006964 <HAL_GPIO_WritePin>

			// Software safety
			if (SWB < 10)
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <TaskMotor+0x168>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	d803      	bhi.n	8001cc4 <TaskMotor+0xb0>
				Rotors = false;
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <TaskMotor+0x16c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e002      	b.n	8001cca <TaskMotor+0xb6>
			else
				Rotors = true;
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <TaskMotor+0x16c>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]

			// Setting PWM speed
			if (Rotors)
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <TaskMotor+0x16c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d033      	beq.n	8001d3a <TaskMotor+0x126>
				int32_t ESC3_Speed;
				int32_t ESC4_Speed;

				// if (Throttle_in)
				//{
				if (osMutexWait(ControllerMutexHandle, osWaitForever) == osOK)
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <TaskMotor+0x170>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00a ff66 	bl	800cbac <osMutexWait>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10b      	bne.n	8001cfe <TaskMotor+0xea>
				{
					ESC1_Speed = Throttle_in;// + Roll_controlled; // - (Pitch_in/5) - (Yaw_in/5);
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <TaskMotor+0x174>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
					ESC2_Speed = Throttle_in;// - Roll_controlled; // - (Pitch_in/5) + (Yaw_in/5);
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <TaskMotor+0x174>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	623b      	str	r3, [r7, #32]
					ESC3_Speed = Throttle_in;// - Roll_controlled; // + (Pitch_in/5) - (Yaw_in/5);
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <TaskMotor+0x174>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	61fb      	str	r3, [r7, #28]
					ESC4_Speed = Throttle_in;// + Roll_controlled; // + (Pitch_in/5) + (Yaw_in/5);
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <TaskMotor+0x174>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
				}
				osMutexRelease(ControllerMutexHandle);
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <TaskMotor+0x170>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f00a ffa0 	bl	800cc48 <osMutexRelease>
//				ESC1_Speed = 0;
//				ESC2_Speed = 0;
//				ESC3_Speed = 0;
//				ESC4_Speed = 0;

				TIM1->CCR1 = ConvertToPwm(ESC1_Speed);
 8001d08:	4c18      	ldr	r4, [pc, #96]	; (8001d6c <TaskMotor+0x158>)
 8001d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d0c:	f7ff ff68 	bl	8001be0 <ConvertToPwm>
 8001d10:	4603      	mov	r3, r0
 8001d12:	6363      	str	r3, [r4, #52]	; 0x34
				TIM1->CCR2 = ConvertToPwm(ESC2_Speed);
 8001d14:	4c15      	ldr	r4, [pc, #84]	; (8001d6c <TaskMotor+0x158>)
 8001d16:	6a38      	ldr	r0, [r7, #32]
 8001d18:	f7ff ff62 	bl	8001be0 <ConvertToPwm>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	63a3      	str	r3, [r4, #56]	; 0x38
				TIM1->CCR3 = ConvertToPwm(ESC3_Speed);
 8001d20:	4c12      	ldr	r4, [pc, #72]	; (8001d6c <TaskMotor+0x158>)
 8001d22:	69f8      	ldr	r0, [r7, #28]
 8001d24:	f7ff ff5c 	bl	8001be0 <ConvertToPwm>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM1->CCR4 = ConvertToPwm(ESC4_Speed);
 8001d2c:	4c0f      	ldr	r4, [pc, #60]	; (8001d6c <TaskMotor+0x158>)
 8001d2e:	69b8      	ldr	r0, [r7, #24]
 8001d30:	f7ff ff56 	bl	8001be0 <ConvertToPwm>
 8001d34:	4603      	mov	r3, r0
 8001d36:	6423      	str	r3, [r4, #64]	; 0x40
 8001d38:	e00f      	b.n	8001d5a <TaskMotor+0x146>
			}
			else
			{
				TIM1->CCR1 = (uint32_t) (1000);
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <TaskMotor+0x158>)
 8001d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = (uint32_t) (1000);
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <TaskMotor+0x158>)
 8001d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = (uint32_t) (1000);
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <TaskMotor+0x158>)
 8001d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d50:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR4 = (uint32_t) (1000);
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <TaskMotor+0x158>)
 8001d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <TaskMotor+0x15c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00a ff72 	bl	800cc48 <osMutexRelease>
	{
 8001d64:	e782      	b.n	8001c6c <TaskMotor+0x58>
 8001d66:	bf00      	nop
 8001d68:	200009ac 	.word	0x200009ac
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	20000c58 	.word	0x20000c58
 8001d74:	20000292 	.word	0x20000292
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	20000294 	.word	0x20000294
 8001d80:	20000002 	.word	0x20000002
 8001d84:	20000c6c 	.word	0x20000c6c
 8001d88:	20000288 	.word	0x20000288

08001d8c <TaskPower>:
#include "Globals.h"

void TaskPower(void const *argument)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1; //Hz
 8001d94:	2301      	movs	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	613b      	str	r3, [r7, #16]

	// ...

	xLastWakeTime = xTaskGetTickCount();
 8001da4:	f00c fa9a 	bl	800e2dc <xTaskGetTickCount>
 8001da8:	4603      	mov	r3, r0
 8001daa:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f00c f8be 	bl	800df34 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001db8:	f00c fa90 	bl	800e2dc <xTaskGetTickCount>
 8001dbc:	60f8      	str	r0, [r7, #12]
	{
 8001dbe:	e7f5      	b.n	8001dac <TaskPower+0x20>

08001dc0 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50; //Hz
 8001dc8:	2332      	movs	r3, #50	; 0x32
 8001dca:	61bb      	str	r3, [r7, #24]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]

	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 64);
 8001dd8:	2240      	movs	r2, #64	; 0x40
 8001dda:	4966      	ldr	r1, [pc, #408]	; (8001f74 <TaskRemote+0x1b4>)
 8001ddc:	4866      	ldr	r0, [pc, #408]	; (8001f78 <TaskRemote+0x1b8>)
 8001dde:	f009 fa78 	bl	800b2d2 <HAL_UART_Receive_DMA>

	xLastWakeTime = xTaskGetTickCount();
 8001de2:	f00c fa7b 	bl	800e2dc <xTaskGetTickCount>
 8001de6:	4603      	mov	r3, r0
 8001de8:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	while (1)
	{
		//Log("R-WS");
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	6979      	ldr	r1, [r7, #20]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00c f89f 	bl	800df34 <vTaskDelayUntil>
		//Log("R-WE");

		TickType_t time = xTaskGetTickCount();
 8001df6:	f00c fa71 	bl	800e2dc <xTaskGetTickCount>
 8001dfa:	6138      	str	r0, [r7, #16]

		//Log("R-RBFS-WS");
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 8001dfc:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <TaskRemote+0x1bc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	4618      	mov	r0, r3
 8001e06:	f00a ff87 	bl	800cd18 <osSemaphoreWait>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ec      	bne.n	8001dea <TaskRemote+0x2a>
		{
			//Log("R-RBFS-WE");

			//Find the last complete 32 bit iBus packet in the 64 bit RemoteBuffer
			//Log("R-RBM-WS");
			if (osMutexWait(RemoteBufferMutexHandle, osWaitForever) == osOK)
 8001e10:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <TaskRemote+0x1c0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f00a fec7 	bl	800cbac <osMutexWait>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d12f      	bne.n	8001e84 <TaskRemote+0xc4>
			{
				//Log("R-RBM-WE");

				for (int i = 32; i >= 0; i--)
 8001e24:	2320      	movs	r3, #32
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	e024      	b.n	8001e74 <TaskRemote+0xb4>
				{
					if (RemoteBuffer[i] == 0x20 && RemoteBuffer[i+1] == 0x40)
 8001e2a:	4a56      	ldr	r2, [pc, #344]	; (8001f84 <TaskRemote+0x1c4>)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d11a      	bne.n	8001e6e <TaskRemote+0xae>
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a51      	ldr	r2, [pc, #324]	; (8001f84 <TaskRemote+0x1c4>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b40      	cmp	r3, #64	; 0x40
 8001e44:	d113      	bne.n	8001e6e <TaskRemote+0xae>
					{
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	e00d      	b.n	8001e68 <TaskRemote+0xa8>
							LastIbusPacket[j] = RemoteBuffer[i+j];
 8001e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <TaskRemote+0x1c4>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	b2d9      	uxtb	r1, r3
 8001e58:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <TaskRemote+0x1c8>)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	460a      	mov	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < IBUS_PACKET_SIZE; j++)
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	3301      	adds	r3, #1
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2b1f      	cmp	r3, #31
 8001e6c:	ddee      	ble.n	8001e4c <TaskRemote+0x8c>
				for (int i = 32; i >= 0; i--)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	3b01      	subs	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	dad7      	bge.n	8001e2a <TaskRemote+0x6a>
					}
				}

				//Log("R-RBM-RS");
				osMutexRelease(RemoteBufferMutexHandle);
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <TaskRemote+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f00a fee2 	bl	800cc48 <osMutexRelease>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	e018      	b.n	8001ebc <TaskRemote+0xfc>
				channelValues[i] = (LastIbusPacket[3 + 2 * i] << 8) + LastIbusPacket[2 + 2 * i];
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	3303      	adds	r3, #3
 8001e90:	4a3d      	ldr	r2, [pc, #244]	; (8001f88 <TaskRemote+0x1c8>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4939      	ldr	r1, [pc, #228]	; (8001f88 <TaskRemote+0x1c8>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	b299      	uxth	r1, r3
 8001eae:	4a37      	ldr	r2, [pc, #220]	; (8001f8c <TaskRemote+0x1cc>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b09      	cmp	r3, #9
 8001ec0:	dde3      	ble.n	8001e8a <TaskRemote+0xca>

			// Setting the speed
			//Log("R-RDM-WS");
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <TaskRemote+0x1d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00a fe6e 	bl	800cbac <osMutexWait>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d148      	bne.n	8001f68 <TaskRemote+0x1a8>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = channelValues[THROTTLE_CHANNEL] - 1000;
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <TaskRemote+0x1cc>)
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <TaskRemote+0x1d4>)
 8001ee2:	801a      	strh	r2, [r3, #0]
				Pitch_in = channelValues[PITCH_CHANNEL] - 1500;
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <TaskRemote+0x1cc>)
 8001ee6:	885b      	ldrh	r3, [r3, #2]
 8001ee8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <TaskRemote+0x1d8>)
 8001ef2:	801a      	strh	r2, [r3, #0]
				Roll_in = channelValues[ROLL_CHANNEL] - 1500;
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <TaskRemote+0x1cc>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <TaskRemote+0x1dc>)
 8001f02:	801a      	strh	r2, [r3, #0]
				Yaw_in = channelValues[YAW_CHANNEL] - 1500;
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <TaskRemote+0x1cc>)
 8001f06:	88db      	ldrh	r3, [r3, #6]
 8001f08:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <TaskRemote+0x1e0>)
 8001f12:	801a      	strh	r2, [r3, #0]
				SWA = channelValues[SWA_CHANNEL] - 1000;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <TaskRemote+0x1cc>)
 8001f16:	891b      	ldrh	r3, [r3, #8]
 8001f18:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <TaskRemote+0x1e4>)
 8001f20:	801a      	strh	r2, [r3, #0]
				SWB = channelValues[SWB_CHANNEL] - 1000;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <TaskRemote+0x1cc>)
 8001f24:	895b      	ldrh	r3, [r3, #10]
 8001f26:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <TaskRemote+0x1e8>)
 8001f2e:	801a      	strh	r2, [r3, #0]
				SWC = channelValues[SWC_CHANNEL] - 1000;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <TaskRemote+0x1cc>)
 8001f32:	899b      	ldrh	r3, [r3, #12]
 8001f34:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <TaskRemote+0x1ec>)
 8001f3c:	801a      	strh	r2, [r3, #0]
				SWD = channelValues[SWD_CHANNEL] - 1000;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <TaskRemote+0x1cc>)
 8001f40:	89db      	ldrh	r3, [r3, #14]
 8001f42:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <TaskRemote+0x1f0>)
 8001f4a:	801a      	strh	r2, [r3, #0]
				VRA = channelValues[VRA_CHANNEL] - 1000;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <TaskRemote+0x1cc>)
 8001f4e:	8a1b      	ldrh	r3, [r3, #16]
 8001f50:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <TaskRemote+0x1f4>)
 8001f58:	801a      	strh	r2, [r3, #0]
				VRB = channelValues[VRB_CHANNEL] - 1000;
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <TaskRemote+0x1cc>)
 8001f5c:	8a5b      	ldrh	r3, [r3, #18]
 8001f5e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <TaskRemote+0x1f8>)
 8001f66:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);


			}
			//Log("R-RDM-RS");
			osMutexRelease(RemoteDataMutexHandle);
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <TaskRemote+0x1d0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00a fe6b 	bl	800cc48 <osMutexRelease>
	{
 8001f72:	e73a      	b.n	8001dea <TaskRemote+0x2a>
 8001f74:	200003dc 	.word	0x200003dc
 8001f78:	20000acc 	.word	0x20000acc
 8001f7c:	20000c78 	.word	0x20000c78
 8001f80:	20000c68 	.word	0x20000c68
 8001f84:	2000041c 	.word	0x2000041c
 8001f88:	2000045c 	.word	0x2000045c
 8001f8c:	200005dc 	.word	0x200005dc
 8001f90:	20000c58 	.word	0x20000c58
 8001f94:	20000288 	.word	0x20000288
 8001f98:	2000028c 	.word	0x2000028c
 8001f9c:	2000028e 	.word	0x2000028e
 8001fa0:	2000028a 	.word	0x2000028a
 8001fa4:	20000292 	.word	0x20000292
 8001fa8:	20000294 	.word	0x20000294
 8001fac:	20000296 	.word	0x20000296
 8001fb0:	20000298 	.word	0x20000298
 8001fb4:	2000029a 	.word	0x2000029a
 8001fb8:	2000029c 	.word	0x2000029c
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200; //Hz
 8001fc8:	23c8      	movs	r3, #200	; 0xc8
 8001fca:	623b      	str	r3, [r7, #32]
	const TickType_t xTickDuration = (1000 * 1 / xFrequency) / portTICK_PERIOD_MS; // Ticks to delay the task for
 8001fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	61fb      	str	r3, [r7, #28]

	bool Recalibrate = false;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GyroLPF[2].T = 0.005;
	GyroLPF[2].f_cutoff = 100;
	LPF_Init(&(GyroLPF[2]));
	*/

	xLastWakeTime = xTaskGetTickCount();
 8001fde:	f00c f97d 	bl	800e2dc <xTaskGetTickCount>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
	while (1)
	{
		// Wait for the next cycle.
		vTaskDelayUntil(&xLastWakeTime, xTickDuration);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	69f9      	ldr	r1, [r7, #28]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00b ffa1 	bl	800df34 <vTaskDelayUntil>

		TickType_t time = xTaskGetTickCount();
 8001ff2:	f00c f973 	bl	800e2dc <xTaskGetTickCount>
 8001ff6:	61b8      	str	r0, [r7, #24]

		// IMU Data
		if (IsImuAvailable)
 8001ff8:	4ba5      	ldr	r3, [pc, #660]	; (8002290 <TaskSensorData+0x2d0>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 808b 	beq.w	8002118 <TaskSensorData+0x158>
		{
			Log("SD-RDM-WS");
 8002002:	48a4      	ldr	r0, [pc, #656]	; (8002294 <TaskSensorData+0x2d4>)
 8002004:	f7ff f9b6 	bl	8001374 <Log>
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8002008:	4ba3      	ldr	r3, [pc, #652]	; (8002298 <TaskSensorData+0x2d8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	4618      	mov	r0, r3
 8002012:	f00a fdcb 	bl	800cbac <osMutexWait>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d109      	bne.n	8002030 <TaskSensorData+0x70>
			{
				Log("SD-RDM-WE");
 800201c:	489f      	ldr	r0, [pc, #636]	; (800229c <TaskSensorData+0x2dc>)
 800201e:	f7ff f9a9 	bl	8001374 <Log>
				if (SWC == 50)
 8002022:	4b9f      	ldr	r3, [pc, #636]	; (80022a0 <TaskSensorData+0x2e0>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	2b32      	cmp	r3, #50	; 0x32
 8002028:	d102      	bne.n	8002030 <TaskSensorData+0x70>
				{
					Recalibrate = true;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}

			}
			Log("SD-RDM-RS");
 8002030:	489c      	ldr	r0, [pc, #624]	; (80022a4 <TaskSensorData+0x2e4>)
 8002032:	f7ff f99f 	bl	8001374 <Log>
			osMutexRelease(RemoteDataMutexHandle);
 8002036:	4b98      	ldr	r3, [pc, #608]	; (8002298 <TaskSensorData+0x2d8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f00a fe04 	bl	800cc48 <osMutexRelease>
			Log("SD-RDM-RE");
 8002040:	4899      	ldr	r0, [pc, #612]	; (80022a8 <TaskSensorData+0x2e8>)
 8002042:	f7ff f997 	bl	8001374 <Log>

			//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
			//MPU_readRawData(&hspi2, &MPU9250);
			MPU_calcAttitude(&hspi2, &MPU9250);
 8002046:	4999      	ldr	r1, [pc, #612]	; (80022ac <TaskSensorData+0x2ec>)
 8002048:	4899      	ldr	r0, [pc, #612]	; (80022b0 <TaskSensorData+0x2f0>)
 800204a:	f003 fa99 	bl	8005580 <MPU_calcAttitude>

			BMP280_measure(&BMP280);
 800204e:	4899      	ldr	r0, [pc, #612]	; (80022b4 <TaskSensorData+0x2f4>)
 8002050:	f002 fa9e 	bl	8004590 <BMP280_measure>

			Log("SD-IM-WS");
 8002054:	4898      	ldr	r0, [pc, #608]	; (80022b8 <TaskSensorData+0x2f8>)
 8002056:	f7ff f98d 	bl	8001374 <Log>
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 800205a:	4b98      	ldr	r3, [pc, #608]	; (80022bc <TaskSensorData+0x2fc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f04f 31ff 	mov.w	r1, #4294967295
 8002062:	4618      	mov	r0, r3
 8002064:	f00a fda2 	bl	800cbac <osMutexWait>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d149      	bne.n	8002102 <TaskSensorData+0x142>
			{
				Log("SD-IM-WE");
 800206e:	4894      	ldr	r0, [pc, #592]	; (80022c0 <TaskSensorData+0x300>)
 8002070:	f7ff f980 	bl	8001374 <Log>
				if (Recalibrate)
 8002074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00e      	beq.n	800209a <TaskSensorData+0xda>
				{
					HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	2210      	movs	r2, #16
 8002082:	4990      	ldr	r1, [pc, #576]	; (80022c4 <TaskSensorData+0x304>)
 8002084:	4890      	ldr	r0, [pc, #576]	; (80022c8 <TaskSensorData+0x308>)
 8002086:	f009 f85d 	bl	800b144 <HAL_UART_Transmit>
					MPU_calibrateGyro(&hspi2, &MPU9250, 20);
 800208a:	2214      	movs	r2, #20
 800208c:	4987      	ldr	r1, [pc, #540]	; (80022ac <TaskSensorData+0x2ec>)
 800208e:	4888      	ldr	r0, [pc, #544]	; (80022b0 <TaskSensorData+0x2f0>)
 8002090:	f002 ffce 	bl	8005030 <MPU_calibrateGyro>

					Recalibrate = false;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}

				AccData[0] = MPU9250.sensorData.ax;
 800209a:	4b84      	ldr	r3, [pc, #528]	; (80022ac <TaskSensorData+0x2ec>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	4a8b      	ldr	r2, [pc, #556]	; (80022cc <TaskSensorData+0x30c>)
 80020a0:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 80020a2:	4b82      	ldr	r3, [pc, #520]	; (80022ac <TaskSensorData+0x2ec>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a89      	ldr	r2, [pc, #548]	; (80022cc <TaskSensorData+0x30c>)
 80020a8:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 80020aa:	4b80      	ldr	r3, [pc, #512]	; (80022ac <TaskSensorData+0x2ec>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <TaskSensorData+0x30c>)
 80020b0:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 80020b2:	4b7e      	ldr	r3, [pc, #504]	; (80022ac <TaskSensorData+0x2ec>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	4a86      	ldr	r2, [pc, #536]	; (80022d0 <TaskSensorData+0x310>)
 80020b8:	6013      	str	r3, [r2, #0]
				GyroData[0] = MPU9250.sensorData.gx;
 80020ba:	4b7c      	ldr	r3, [pc, #496]	; (80022ac <TaskSensorData+0x2ec>)
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	4a85      	ldr	r2, [pc, #532]	; (80022d4 <TaskSensorData+0x314>)
 80020c0:	6013      	str	r3, [r2, #0]
				GyroData[1] = MPU9250.sensorData.gy;
 80020c2:	4b7a      	ldr	r3, [pc, #488]	; (80022ac <TaskSensorData+0x2ec>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a83      	ldr	r2, [pc, #524]	; (80022d4 <TaskSensorData+0x314>)
 80020c8:	6053      	str	r3, [r2, #4]
				GyroData[2] = MPU9250.sensorData.gz;
 80020ca:	4b78      	ldr	r3, [pc, #480]	; (80022ac <TaskSensorData+0x2ec>)
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	4a81      	ldr	r2, [pc, #516]	; (80022d4 <TaskSensorData+0x314>)
 80020d0:	6093      	str	r3, [r2, #8]
				//GyroData[0] = LPF_Update(&(GyroLPF[0]), MPU9250.sensorData.gx);
				//GyroData[1] = LPF_Update(&(GyroLPF[1]), MPU9250.sensorData.gy);
				//GyroData[2] = LPF_Update(&(GyroLPF[2]), MPU9250.sensorData.gz);
				Roll_measured = MPU9250.attitude.roll;
 80020d2:	4b76      	ldr	r3, [pc, #472]	; (80022ac <TaskSensorData+0x2ec>)
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	4a80      	ldr	r2, [pc, #512]	; (80022d8 <TaskSensorData+0x318>)
 80020d8:	6013      	str	r3, [r2, #0]
				Pitch_measured = MPU9250.attitude.pitch;
 80020da:	4b74      	ldr	r3, [pc, #464]	; (80022ac <TaskSensorData+0x2ec>)
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	4a7f      	ldr	r2, [pc, #508]	; (80022dc <TaskSensorData+0x31c>)
 80020e0:	6013      	str	r3, [r2, #0]
				Yaw_measured = MPU9250.attitude.yaw;
 80020e2:	4b72      	ldr	r3, [pc, #456]	; (80022ac <TaskSensorData+0x2ec>)
 80020e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e6:	4a7e      	ldr	r2, [pc, #504]	; (80022e0 <TaskSensorData+0x320>)
 80020e8:	6013      	str	r3, [r2, #0]

				BMP_Temp = BMP280.measurement.temperature;
 80020ea:	4b72      	ldr	r3, [pc, #456]	; (80022b4 <TaskSensorData+0x2f4>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4a7d      	ldr	r2, [pc, #500]	; (80022e4 <TaskSensorData+0x324>)
 80020f0:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 80020f2:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <TaskSensorData+0x2f4>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	4a7c      	ldr	r2, [pc, #496]	; (80022e8 <TaskSensorData+0x328>)
 80020f8:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 80020fa:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <TaskSensorData+0x2f4>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a7b      	ldr	r2, [pc, #492]	; (80022ec <TaskSensorData+0x32c>)
 8002100:	6013      	str	r3, [r2, #0]

			}
			Log("SD-IM-RS");
 8002102:	487b      	ldr	r0, [pc, #492]	; (80022f0 <TaskSensorData+0x330>)
 8002104:	f7ff f936 	bl	8001374 <Log>
			osMutexRelease(ImuMutexHandle);
 8002108:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <TaskSensorData+0x2fc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f00a fd9b 	bl	800cc48 <osMutexRelease>
			Log("SD-IM-RE");
 8002112:	4878      	ldr	r0, [pc, #480]	; (80022f4 <TaskSensorData+0x334>)
 8002114:	f7ff f92e 	bl	8001374 <Log>
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 8002118:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <TaskSensorData+0x338>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8146 	beq.w	80023ae <TaskSensorData+0x3ee>
		{
			Log("SD-MM-WS");
 8002122:	4876      	ldr	r0, [pc, #472]	; (80022fc <TaskSensorData+0x33c>)
 8002124:	f7ff f926 	bl	8001374 <Log>
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8002128:	4b75      	ldr	r3, [pc, #468]	; (8002300 <TaskSensorData+0x340>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	4618      	mov	r0, r3
 8002132:	f00a fd3b 	bl	800cbac <osMutexWait>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 812d 	bne.w	8002398 <TaskSensorData+0x3d8>
			{
				Log("SD-MM-WE");
 800213e:	4871      	ldr	r0, [pc, #452]	; (8002304 <TaskSensorData+0x344>)
 8002140:	f7ff f918 	bl	8001374 <Log>

				struct Vector res = HMC5883L_readRaw();
 8002144:	f001 ff08 	bl	8003f58 <HMC5883L_readRaw>
 8002148:	eef0 6a40 	vmov.f32	s13, s0
 800214c:	eeb0 7a60 	vmov.f32	s14, s1
 8002150:	eef0 7a41 	vmov.f32	s15, s2
 8002154:	edc7 6a02 	vstr	s13, [r7, #8]
 8002158:	ed87 7a03 	vstr	s14, [r7, #12]
 800215c:	edc7 7a04 	vstr	s15, [r7, #16]
				MAG_X_RAW = res.XAxis;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4a69      	ldr	r2, [pc, #420]	; (8002308 <TaskSensorData+0x348>)
 8002164:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a68      	ldr	r2, [pc, #416]	; (800230c <TaskSensorData+0x34c>)
 800216a:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4a68      	ldr	r2, [pc, #416]	; (8002310 <TaskSensorData+0x350>)
 8002170:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 8002172:	4b66      	ldr	r3, [pc, #408]	; (800230c <TaskSensorData+0x34c>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	eef5 7a40 	vcmp.f32	s15, #0.0
 800217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002180:	d068      	beq.n	8002254 <TaskSensorData+0x294>
				{
					if (MAG_Y_RAW > 0)
 8002182:	4b62      	ldr	r3, [pc, #392]	; (800230c <TaskSensorData+0x34c>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	dd2b      	ble.n	80021ea <TaskSensorData+0x22a>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <TaskSensorData+0x348>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	4b5c      	ldr	r3, [pc, #368]	; (800230c <TaskSensorData+0x34c>)
 800219a:	ed93 7a00 	vldr	s14, [r3]
 800219e:	eef0 0a47 	vmov.f32	s1, s14
 80021a2:	eeb0 0a67 	vmov.f32	s0, s15
 80021a6:	f012 fb0f 	bl	80147c8 <atan2f>
 80021aa:	eef0 7a40 	vmov.f32	s15, s0
 80021ae:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002314 <TaskSensorData+0x354>
 80021b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b6:	ee17 0a90 	vmov	r0, s15
 80021ba:	f7fe f9ed 	bl	8000598 <__aeabi_f2d>
 80021be:	a330      	add	r3, pc, #192	; (adr r3, 8002280 <TaskSensorData+0x2c0>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe fb6a 	bl	800089c <__aeabi_ddiv>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	f04f 0000 	mov.w	r0, #0
 80021d0:	4951      	ldr	r1, [pc, #324]	; (8002318 <TaskSensorData+0x358>)
 80021d2:	f7fe f881 	bl	80002d8 <__aeabi_dsub>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fd2b 	bl	8000c38 <__aeabi_d2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a4d      	ldr	r2, [pc, #308]	; (800231c <TaskSensorData+0x35c>)
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e0a5      	b.n	8002336 <TaskSensorData+0x376>
					else if (MAG_Y_RAW < 0)
 80021ea:	4b48      	ldr	r3, [pc, #288]	; (800230c <TaskSensorData+0x34c>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	f140 809d 	bpl.w	8002336 <TaskSensorData+0x376>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 80021fc:	4b42      	ldr	r3, [pc, #264]	; (8002308 <TaskSensorData+0x348>)
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	4b42      	ldr	r3, [pc, #264]	; (800230c <TaskSensorData+0x34c>)
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	eef0 0a47 	vmov.f32	s1, s14
 800220c:	eeb0 0a67 	vmov.f32	s0, s15
 8002210:	f012 fada 	bl	80147c8 <atan2f>
 8002214:	eef0 7a40 	vmov.f32	s15, s0
 8002218:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002314 <TaskSensorData+0x354>
 800221c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002220:	ee17 0a90 	vmov	r0, s15
 8002224:	f7fe f9b8 	bl	8000598 <__aeabi_f2d>
 8002228:	a315      	add	r3, pc, #84	; (adr r3, 8002280 <TaskSensorData+0x2c0>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fe fb35 	bl	800089c <__aeabi_ddiv>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	a114      	add	r1, pc, #80	; (adr r1, 8002288 <TaskSensorData+0x2c8>)
 8002238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800223c:	f7fe f84c 	bl	80002d8 <__aeabi_dsub>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fcf6 	bl	8000c38 <__aeabi_d2f>
 800224c:	4603      	mov	r3, r0
 800224e:	4a33      	ldr	r2, [pc, #204]	; (800231c <TaskSensorData+0x35c>)
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e070      	b.n	8002336 <TaskSensorData+0x376>
				}
				else if (MAG_Y_RAW == 0)
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <TaskSensorData+0x34c>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002262:	d168      	bne.n	8002336 <TaskSensorData+0x376>
				{
					if (MAG_X_RAW > 0)
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <TaskSensorData+0x348>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	dd55      	ble.n	8002320 <TaskSensorData+0x360>
						MAG_dir = 0.0f;
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <TaskSensorData+0x35c>)
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e05b      	b.n	8002336 <TaskSensorData+0x376>
 800227e:	bf00      	nop
 8002280:	54442d18 	.word	0x54442d18
 8002284:	400921fb 	.word	0x400921fb
 8002288:	00000000 	.word	0x00000000
 800228c:	4070e000 	.word	0x4070e000
 8002290:	20000214 	.word	0x20000214
 8002294:	080159e4 	.word	0x080159e4
 8002298:	20000c58 	.word	0x20000c58
 800229c:	080159f0 	.word	0x080159f0
 80022a0:	20000296 	.word	0x20000296
 80022a4:	080159fc 	.word	0x080159fc
 80022a8:	08015a08 	.word	0x08015a08
 80022ac:	200002a0 	.word	0x200002a0
 80022b0:	20000948 	.word	0x20000948
 80022b4:	2000033c 	.word	0x2000033c
 80022b8:	08015a14 	.word	0x08015a14
 80022bc:	20000c5c 	.word	0x20000c5c
 80022c0:	08015a20 	.word	0x08015a20
 80022c4:	08015a2c 	.word	0x08015a2c
 80022c8:	20000b54 	.word	0x20000b54
 80022cc:	20000314 	.word	0x20000314
 80022d0:	20000320 	.word	0x20000320
 80022d4:	20000324 	.word	0x20000324
 80022d8:	20000330 	.word	0x20000330
 80022dc:	20000334 	.word	0x20000334
 80022e0:	20000338 	.word	0x20000338
 80022e4:	2000036c 	.word	0x2000036c
 80022e8:	20000370 	.word	0x20000370
 80022ec:	20000374 	.word	0x20000374
 80022f0:	08015a40 	.word	0x08015a40
 80022f4:	08015a4c 	.word	0x08015a4c
 80022f8:	20000215 	.word	0x20000215
 80022fc:	08015a58 	.word	0x08015a58
 8002300:	20000c54 	.word	0x20000c54
 8002304:	08015a64 	.word	0x08015a64
 8002308:	20000390 	.word	0x20000390
 800230c:	20000394 	.word	0x20000394
 8002310:	20000398 	.word	0x20000398
 8002314:	43340000 	.word	0x43340000
 8002318:	40568000 	.word	0x40568000
 800231c:	2000039c 	.word	0x2000039c
					else if (MAG_X_RAW < 0)
 8002320:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <TaskSensorData+0x4f4>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232e:	d502      	bpl.n	8002336 <TaskSensorData+0x376>
						MAG_dir = 180.0f;
 8002330:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <TaskSensorData+0x4f8>)
 8002332:	4a62      	ldr	r2, [pc, #392]	; (80024bc <TaskSensorData+0x4fc>)
 8002334:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 8002336:	4b60      	ldr	r3, [pc, #384]	; (80024b8 <TaskSensorData+0x4f8>)
 8002338:	ed93 7a00 	vldr	s14, [r3]
 800233c:	4b60      	ldr	r3, [pc, #384]	; (80024c0 <TaskSensorData+0x500>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	4b5c      	ldr	r3, [pc, #368]	; (80024b8 <TaskSensorData+0x4f8>)
 8002348:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 800234c:	4b5a      	ldr	r3, [pc, #360]	; (80024b8 <TaskSensorData+0x4f8>)
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235a:	d509      	bpl.n	8002370 <TaskSensorData+0x3b0>
					MAG_dir += 360.0f;
 800235c:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <TaskSensorData+0x4f8>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80024c4 <TaskSensorData+0x504>
 8002366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <TaskSensorData+0x4f8>)
 800236c:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 8002370:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <TaskSensorData+0x4f8>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80024c4 <TaskSensorData+0x504>
 800237a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	dd09      	ble.n	8002398 <TaskSensorData+0x3d8>
					MAG_dir -= 360.0f;
 8002384:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <TaskSensorData+0x4f8>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80024c4 <TaskSensorData+0x504>
 800238e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <TaskSensorData+0x4f8>)
 8002394:	edc3 7a00 	vstr	s15, [r3]
			}
			Log("SD-MM-RS");
 8002398:	484b      	ldr	r0, [pc, #300]	; (80024c8 <TaskSensorData+0x508>)
 800239a:	f7fe ffeb 	bl	8001374 <Log>
			osMutexRelease(MagnMutexHandle);
 800239e:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <TaskSensorData+0x50c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f00a fc50 	bl	800cc48 <osMutexRelease>
			Log("SD-MM-RE");
 80023a8:	4849      	ldr	r0, [pc, #292]	; (80024d0 <TaskSensorData+0x510>)
 80023aa:	f7fe ffe3 	bl	8001374 <Log>
		}

		// Distance Data
		if (IsDistAvailable)
 80023ae:	4b49      	ldr	r3, [pc, #292]	; (80024d4 <TaskSensorData+0x514>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d046      	beq.n	8002444 <TaskSensorData+0x484>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 80023b6:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <TaskSensorData+0x518>)
 80023b8:	7d1b      	ldrb	r3, [r3, #20]
 80023ba:	f083 0301 	eor.w	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <TaskSensorData+0x412>
			{
				HCSR04_Trigger(&HCSR04);
 80023c4:	4844      	ldr	r0, [pc, #272]	; (80024d8 <TaskSensorData+0x518>)
 80023c6:	f003 fba1 	bl	8005b0c <HCSR04_Trigger>
				HCSR04.Triggered = true;
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <TaskSensorData+0x518>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	751a      	strb	r2, [r3, #20]
 80023d0:	e038      	b.n	8002444 <TaskSensorData+0x484>
			}
			else if (HCSR04.Triggered)
 80023d2:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <TaskSensorData+0x518>)
 80023d4:	7d1b      	ldrb	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d034      	beq.n	8002444 <TaskSensorData+0x484>
			{
				Log("SD-DS-WS");
 80023da:	4840      	ldr	r0, [pc, #256]	; (80024dc <TaskSensorData+0x51c>)
 80023dc:	f7fe ffca 	bl	8001374 <Log>
				if (osSemaphoreWait(DistSemaphoreHandle, 0) == osOK)
 80023e0:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <TaskSensorData+0x520>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00a fc96 	bl	800cd18 <osSemaphoreWait>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d128      	bne.n	8002444 <TaskSensorData+0x484>
				{
					Log("SD-DS-WE");
 80023f2:	483c      	ldr	r0, [pc, #240]	; (80024e4 <TaskSensorData+0x524>)
 80023f4:	f7fe ffbe 	bl	8001374 <Log>
					Log("SD-DM-WS");
 80023f8:	483b      	ldr	r0, [pc, #236]	; (80024e8 <TaskSensorData+0x528>)
 80023fa:	f7fe ffbb 	bl	8001374 <Log>
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <TaskSensorData+0x52c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f04f 31ff 	mov.w	r1, #4294967295
 8002406:	4618      	mov	r0, r3
 8002408:	f00a fbd0 	bl	800cbac <osMutexWait>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <TaskSensorData+0x468>
					{
						Log("SD-DM-WE");
 8002412:	4837      	ldr	r0, [pc, #220]	; (80024f0 <TaskSensorData+0x530>)
 8002414:	f7fe ffae 	bl	8001374 <Log>

						Distance = HCSR04_Read(&HCSR04);
 8002418:	482f      	ldr	r0, [pc, #188]	; (80024d8 <TaskSensorData+0x518>)
 800241a:	f003 fb92 	bl	8005b42 <HCSR04_Read>
 800241e:	eef0 7a40 	vmov.f32	s15, s0
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <TaskSensorData+0x534>)
 8002424:	edc3 7a00 	vstr	s15, [r3]
					}
					Log("SD-DM-RS");
 8002428:	4833      	ldr	r0, [pc, #204]	; (80024f8 <TaskSensorData+0x538>)
 800242a:	f7fe ffa3 	bl	8001374 <Log>
					osMutexRelease(DistMutexHandle);
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <TaskSensorData+0x52c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f00a fc08 	bl	800cc48 <osMutexRelease>
					Log("SD-DM-RE");
 8002438:	4830      	ldr	r0, [pc, #192]	; (80024fc <TaskSensorData+0x53c>)
 800243a:	f7fe ff9b 	bl	8001374 <Log>

					HCSR04.Triggered = false;
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <TaskSensorData+0x518>)
 8002440:	2200      	movs	r2, #0
 8002442:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 8002444:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <TaskSensorData+0x540>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f43f adcc 	beq.w	8001fe6 <TaskSensorData+0x26>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 800244e:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <TaskSensorData+0x544>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f04f 31ff 	mov.w	r1, #4294967295
 8002456:	4618      	mov	r0, r3
 8002458:	f00a fc5e 	bl	800cd18 <osSemaphoreWait>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f47f adc1 	bne.w	8001fe6 <TaskSensorData+0x26>
			{
				if (ProcessGPSPackageBuffer)
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <TaskSensorData+0x548>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	f43f adbb 	beq.w	8001fe6 <TaskSensorData+0x26>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <TaskSensorData+0x54c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	4618      	mov	r0, r3
 800247a:	f00a fb97 	bl	800cbac <osMutexWait>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <TaskSensorData+0x4e0>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 8002484:	4822      	ldr	r0, [pc, #136]	; (8002510 <TaskSensorData+0x550>)
 8002486:	f001 fb97 	bl	8003bb8 <GPS_validate>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <TaskSensorData+0x4d6>
							GPS_parse((char*) GPSPackageBuffer);
 8002490:	481f      	ldr	r0, [pc, #124]	; (8002510 <TaskSensorData+0x550>)
 8002492:	f001 fbf3 	bl	8003c7c <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	2100      	movs	r1, #0
 800249a:	481d      	ldr	r0, [pc, #116]	; (8002510 <TaskSensorData+0x550>)
 800249c:	f00e f85f 	bl	801055e <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <TaskSensorData+0x54c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00a fbcf 	bl	800cc48 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <TaskSensorData+0x548>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
	{
 80024b0:	e599      	b.n	8001fe6 <TaskSensorData+0x26>
 80024b2:	bf00      	nop
 80024b4:	20000390 	.word	0x20000390
 80024b8:	2000039c 	.word	0x2000039c
 80024bc:	43340000 	.word	0x43340000
 80024c0:	20000004 	.word	0x20000004
 80024c4:	43b40000 	.word	0x43b40000
 80024c8:	08015a70 	.word	0x08015a70
 80024cc:	20000c54 	.word	0x20000c54
 80024d0:	08015a7c 	.word	0x08015a7c
 80024d4:	20000216 	.word	0x20000216
 80024d8:	200003a0 	.word	0x200003a0
 80024dc:	08015a88 	.word	0x08015a88
 80024e0:	20000c70 	.word	0x20000c70
 80024e4:	08015a94 	.word	0x08015a94
 80024e8:	08015aa0 	.word	0x08015aa0
 80024ec:	20000c64 	.word	0x20000c64
 80024f0:	08015aac 	.word	0x08015aac
 80024f4:	200003d8 	.word	0x200003d8
 80024f8:	08015ab8 	.word	0x08015ab8
 80024fc:	08015ac4 	.word	0x08015ac4
 8002500:	20000217 	.word	0x20000217
 8002504:	20000c74 	.word	0x20000c74
 8002508:	200005db 	.word	0x200005db
 800250c:	20000c60 	.word	0x20000c60
 8002510:	200004dc 	.word	0x200004dc

08002514 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <vApplicationGetIdleTaskMemory+0x2c>)
 8002524:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <vApplicationGetIdleTaskMemory+0x30>)
 800252a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	200005f0 	.word	0x200005f0
 8002544:	20000690 	.word	0x20000690

08002548 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a42      	ldr	r2, [pc, #264]	; (800265c <HAL_UART_RxCpltCallback+0x114>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d130      	bne.n	80025ba <HAL_UART_RxCpltCallback+0x72>
	{
		//Log("U2CB");
		Uart2CallbackCounter++;
 8002558:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_UART_RxCpltCallback+0x118>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	4a40      	ldr	r2, [pc, #256]	; (8002660 <HAL_UART_RxCpltCallback+0x118>)
 8002560:	6013      	str	r3, [r2, #0]

		if (osMutexWait(RemoteBufferMutexHandle, 0) == osOK)
 8002562:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_UART_RxCpltCallback+0x11c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f00a fb1f 	bl	800cbac <osMutexWait>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d11c      	bne.n	80025ae <HAL_UART_RxCpltCallback+0x66>
		{
			//Log("U2CB-RBM-WE");
			for (int i = 0; i < REM_BUF_SIZE; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e00c      	b.n	8002594 <HAL_UART_RxCpltCallback+0x4c>
				RemoteBuffer[i] = Uart2Buffer[i];
 800257a:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <HAL_UART_RxCpltCallback+0x120>)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2d9      	uxtb	r1, r3
 8002584:	4a39      	ldr	r2, [pc, #228]	; (800266c <HAL_UART_RxCpltCallback+0x124>)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	460a      	mov	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < REM_BUF_SIZE; i++)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3301      	adds	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b3f      	cmp	r3, #63	; 0x3f
 8002598:	ddef      	ble.n	800257a <HAL_UART_RxCpltCallback+0x32>

			osMutexRelease(RemoteBufferMutexHandle);
 800259a:	4b32      	ldr	r3, [pc, #200]	; (8002664 <HAL_UART_RxCpltCallback+0x11c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f00a fb52 	bl	800cc48 <osMutexRelease>

			// Signal to TaskTemote
			osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 80025a4:	4b32      	ldr	r3, [pc, #200]	; (8002670 <HAL_UART_RxCpltCallback+0x128>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f00a fc03 	bl	800cdb4 <osSemaphoreRelease>
//				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
//				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//			}
//		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 64);
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	492d      	ldr	r1, [pc, #180]	; (8002668 <HAL_UART_RxCpltCallback+0x120>)
 80025b2:	482a      	ldr	r0, [pc, #168]	; (800265c <HAL_UART_RxCpltCallback+0x114>)
 80025b4:	f008 fe49 	bl	800b24a <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 80025b8:	e04b      	b.n	8002652 <HAL_UART_RxCpltCallback+0x10a>
	else if (huart == &huart4)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <HAL_UART_RxCpltCallback+0x12c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d147      	bne.n	8002652 <HAL_UART_RxCpltCallback+0x10a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d104      	bne.n	80025d6 <HAL_UART_RxCpltCallback+0x8e>
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_UART_RxCpltCallback+0x134>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b24      	cmp	r3, #36	; 0x24
 80025d4:	d013      	beq.n	80025fe <HAL_UART_RxCpltCallback+0xb6>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 80025d6:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d104      	bne.n	80025ea <HAL_UART_RxCpltCallback+0xa2>
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_UART_RxCpltCallback+0x134>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b47      	cmp	r3, #71	; 0x47
 80025e8:	d009      	beq.n	80025fe <HAL_UART_RxCpltCallback+0xb6>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d926      	bls.n	8002642 <HAL_UART_RxCpltCallback+0xfa>
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2bff      	cmp	r3, #255	; 0xff
 80025fc:	d021      	beq.n	8002642 <HAL_UART_RxCpltCallback+0xfa>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_UART_RxCpltCallback+0x134>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b2d9      	uxtb	r1, r3
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_UART_RxCpltCallback+0x138>)
 800260e:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2bfd      	cmp	r3, #253	; 0xfd
 8002618:	d807      	bhi.n	800262a <HAL_UART_RxCpltCallback+0xe2>
				GPSPackageIndex++;
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 8002626:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002628:	e00e      	b.n	8002648 <HAL_UART_RxCpltCallback+0x100>
				GPSPackageIndex = 0;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_UART_RxCpltCallback+0x13c>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_UART_RxCpltCallback+0x140>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f00a fbba 	bl	800cdb4 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002640:	e002      	b.n	8002648 <HAL_UART_RxCpltCallback+0x100>
			GPSPackageIndex = 0;
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_UART_RxCpltCallback+0x130>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 8002648:	2201      	movs	r2, #1
 800264a:	490c      	ldr	r1, [pc, #48]	; (800267c <HAL_UART_RxCpltCallback+0x134>)
 800264c:	4809      	ldr	r0, [pc, #36]	; (8002674 <HAL_UART_RxCpltCallback+0x12c>)
 800264e:	f008 fe40 	bl	800b2d2 <HAL_UART_Receive_DMA>
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000acc 	.word	0x20000acc
 8002660:	20000210 	.word	0x20000210
 8002664:	20000c68 	.word	0x20000c68
 8002668:	200003dc 	.word	0x200003dc
 800266c:	2000041c 	.word	0x2000041c
 8002670:	20000c78 	.word	0x20000c78
 8002674:	20000a44 	.word	0x20000a44
 8002678:	200004d9 	.word	0x200004d9
 800267c:	200004d8 	.word	0x200004d8
 8002680:	200004dc 	.word	0x200004dc
 8002684:	200005db 	.word	0x200005db
 8002688:	20000c74 	.word	0x20000c74

0800268c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a23      	ldr	r2, [pc, #140]	; (8002724 <HAL_UART_ErrorCallback+0x98>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d11c      	bne.n	80026d6 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03a      	beq.n	800271c <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	491d      	ldr	r1, [pc, #116]	; (8002728 <HAL_UART_ErrorCallback+0x9c>)
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00d fec2 	bl	801043c <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fdff 	bl	80002c0 <strlen>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	f107 0108 	add.w	r1, r7, #8
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	4817      	ldr	r0, [pc, #92]	; (800272c <HAL_UART_ErrorCallback+0xa0>)
 80026d0:	f008 fd38 	bl	800b144 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 80026d4:	e022      	b.n	800271c <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a15      	ldr	r2, [pc, #84]	; (8002730 <HAL_UART_ErrorCallback+0xa4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d11e      	bne.n	800271c <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d019      	beq.n	800271c <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_UART_ErrorCallback+0xa8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	490f      	ldr	r1, [pc, #60]	; (8002738 <HAL_UART_ErrorCallback+0xac>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00d fe9e 	bl	801043c <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fddb 	bl	80002c0 <strlen>
 800270a:	4603      	mov	r3, r0
 800270c:	b29a      	uxth	r2, r3
 800270e:	f107 0108 	add.w	r1, r7, #8
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <HAL_UART_ErrorCallback+0xa0>)
 8002718:	f008 fd14 	bl	800b144 <HAL_UART_Transmit>
}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000acc 	.word	0x20000acc
 8002728:	08015ad0 	.word	0x08015ad0
 800272c:	20000b54 	.word	0x20000b54
 8002730:	20000a44 	.word	0x20000a44
 8002734:	20000000 	.word	0x20000000
 8002738:	08015aec 	.word	0x08015aec

0800273c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <HAL_TIM_IC_CaptureCallback+0x20>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d103      	bne.n	8002754 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4804      	ldr	r0, [pc, #16]	; (8002760 <HAL_TIM_IC_CaptureCallback+0x24>)
 8002750:	f003 f896 	bl	8005880 <HCSR04_TMR_IC_ISR>
	}
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200009f8 	.word	0x200009f8
 8002760:	200003a0 	.word	0x200003a0

08002764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002764:	b5b0      	push	{r4, r5, r7, lr}
 8002766:	b0be      	sub	sp, #248	; 0xf8
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800276a:	f003 fa22 	bl	8005bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800276e:	f000 f9cd 	bl	8002b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002772:	f000 fcc9 	bl	8003108 <MX_GPIO_Init>
  MX_DMA_Init();
 8002776:	f000 fca9 	bl	80030cc <MX_DMA_Init>
  MX_SPI1_Init();
 800277a:	f000 fa73 	bl	8002c64 <MX_SPI1_Init>
  MX_SPI2_Init();
 800277e:	f000 faaf 	bl	8002ce0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002782:	f000 faeb 	bl	8002d5c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002786:	f000 fbb9 	bl	8002efc <MX_TIM3_Init>
  MX_UART4_Init();
 800278a:	f000 fc0b 	bl	8002fa4 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800278e:	f000 fc39 	bl	8003004 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002792:	f000 fa27 	bl	8002be4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002796:	f000 fc69 	bl	800306c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 800279a:	49be      	ldr	r1, [pc, #760]	; (8002a94 <main+0x330>)
 800279c:	48be      	ldr	r0, [pc, #760]	; (8002a98 <main+0x334>)
 800279e:	f002 fb8f 	bl	8004ec0 <MPU_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <main+0x5a>
 80027a8:	49bc      	ldr	r1, [pc, #752]	; (8002a9c <main+0x338>)
 80027aa:	48bb      	ldr	r0, [pc, #748]	; (8002a98 <main+0x334>)
 80027ac:	f001 fd3c 	bl	8004228 <BMP280_initialize>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <main+0x5a>
  		IsImuAvailable = true;
 80027b6:	4bba      	ldr	r3, [pc, #744]	; (8002aa0 <main+0x33c>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e002      	b.n	80027c4 <main+0x60>
  	else
  		IsImuAvailable = false;
 80027be:	4bb8      	ldr	r3, [pc, #736]	; (8002aa0 <main+0x33c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 80027c4:	f001 fbb2 	bl	8003f2c <HMC5883L_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <main+0x72>
  		IsMagnAvailable = true;
 80027ce:	4bb5      	ldr	r3, [pc, #724]	; (8002aa4 <main+0x340>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	e002      	b.n	80027dc <main+0x78>
  	else
  		IsMagnAvailable = false;
 80027d6:	4bb3      	ldr	r3, [pc, #716]	; (8002aa4 <main+0x340>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 80027dc:	49b2      	ldr	r1, [pc, #712]	; (8002aa8 <main+0x344>)
 80027de:	48b3      	ldr	r0, [pc, #716]	; (8002aac <main+0x348>)
 80027e0:	f003 f800 	bl	80057e4 <HCSR04_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <main+0x8e>
  		IsDistAvailable = true;
 80027ea:	4bb1      	ldr	r3, [pc, #708]	; (8002ab0 <main+0x34c>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e002      	b.n	80027f8 <main+0x94>
  	else
  		IsDistAvailable = false;
 80027f2:	4baf      	ldr	r3, [pc, #700]	; (8002ab0 <main+0x34c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 8002804:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002808:	4618      	mov	r0, r3
 800280a:	f00a f9b6 	bl	800cb7a <osMutexCreate>
 800280e:	4603      	mov	r3, r0
 8002810:	4aa8      	ldr	r2, [pc, #672]	; (8002ab4 <main+0x350>)
 8002812:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 8002820:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002824:	4618      	mov	r0, r3
 8002826:	f00a f9a8 	bl	800cb7a <osMutexCreate>
 800282a:	4603      	mov	r3, r0
 800282c:	4aa2      	ldr	r2, [pc, #648]	; (8002ab8 <main+0x354>)
 800282e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 800283c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002840:	4618      	mov	r0, r3
 8002842:	f00a f99a 	bl	800cb7a <osMutexCreate>
 8002846:	4603      	mov	r3, r0
 8002848:	4a9c      	ldr	r2, [pc, #624]	; (8002abc <main+0x358>)
 800284a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 8002858:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800285c:	4618      	mov	r0, r3
 800285e:	f00a f98c 	bl	800cb7a <osMutexCreate>
 8002862:	4603      	mov	r3, r0
 8002864:	4a96      	ldr	r2, [pc, #600]	; (8002ac0 <main+0x35c>)
 8002866:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 8002874:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002878:	4618      	mov	r0, r3
 800287a:	f00a f97e 	bl	800cb7a <osMutexCreate>
 800287e:	4603      	mov	r3, r0
 8002880:	4a90      	ldr	r2, [pc, #576]	; (8002ac4 <main+0x360>)
 8002882:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 8002890:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002894:	4618      	mov	r0, r3
 8002896:	f00a f970 	bl	800cb7a <osMutexCreate>
 800289a:	4603      	mov	r3, r0
 800289c:	4a8a      	ldr	r2, [pc, #552]	; (8002ac8 <main+0x364>)
 800289e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerMutex */
  osMutexDef(ControllerMutex);
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  ControllerMutexHandle = osMutexCreate(osMutex(ControllerMutex));
 80028ac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f00a f962 	bl	800cb7a <osMutexCreate>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a84      	ldr	r2, [pc, #528]	; (8002acc <main+0x368>)
 80028ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 80028bc:	4b7d      	ldr	r3, [pc, #500]	; (8002ab4 <main+0x350>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f00a f9c1 	bl	800cc48 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 80028c6:	4b7c      	ldr	r3, [pc, #496]	; (8002ab8 <main+0x354>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f00a f9bc 	bl	800cc48 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 80028d0:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <main+0x358>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f00a f9b7 	bl	800cc48 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 80028da:	4b79      	ldr	r3, [pc, #484]	; (8002ac0 <main+0x35c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f00a f9b2 	bl	800cc48 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 80028e4:	4b78      	ldr	r3, [pc, #480]	; (8002ac8 <main+0x364>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f00a f9ad 	bl	800cc48 <osMutexRelease>
	osMutexRelease(ControllerMutexHandle);
 80028ee:	4b77      	ldr	r3, [pc, #476]	; (8002acc <main+0x368>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00a f9a8 	bl	800cc48 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 8002904:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002908:	2101      	movs	r1, #1
 800290a:	4618      	mov	r0, r3
 800290c:	f00a f9d2 	bl	800ccb4 <osSemaphoreCreate>
 8002910:	4603      	mov	r3, r0
 8002912:	4a6f      	ldr	r2, [pc, #444]	; (8002ad0 <main+0x36c>)
 8002914:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 8002916:	2300      	movs	r3, #0
 8002918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 8002922:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f00a f9c3 	bl	800ccb4 <osSemaphoreCreate>
 800292e:	4603      	mov	r3, r0
 8002930:	4a68      	ldr	r2, [pc, #416]	; (8002ad4 <main+0x370>)
 8002932:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800293a:	2300      	movs	r3, #0
 800293c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 8002940:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f00a f9b4 	bl	800ccb4 <osSemaphoreCreate>
 800294c:	4603      	mov	r3, r0
 800294e:	4a62      	ldr	r2, [pc, #392]	; (8002ad8 <main+0x374>)
 8002950:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 8002952:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <main+0x36c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f00a fa62 	bl	800ce20 <osSemaphoreGetCount>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d106      	bne.n	8002970 <main+0x20c>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8002962:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <main+0x36c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f04f 31ff 	mov.w	r1, #4294967295
 800296a:	4618      	mov	r0, r3
 800296c:	f00a f9d4 	bl	800cd18 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8002970:	4b58      	ldr	r3, [pc, #352]	; (8002ad4 <main+0x370>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f00a fa53 	bl	800ce20 <osSemaphoreGetCount>
 800297a:	4603      	mov	r3, r0
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <main+0x22a>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 8002980:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <main+0x370>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	4618      	mov	r0, r3
 800298a:	f00a f9c5 	bl	800cd18 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 800298e:	4b52      	ldr	r3, [pc, #328]	; (8002ad8 <main+0x374>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f00a fa44 	bl	800ce20 <osSemaphoreGetCount>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <main+0x248>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 800299e:	4b4e      	ldr	r3, [pc, #312]	; (8002ad8 <main+0x374>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f04f 31ff 	mov.w	r1, #4294967295
 80029a6:	4618      	mov	r0, r3
 80029a8:	f00a f9b6 	bl	800cd18 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityHigh, 0, 512);
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <main+0x378>)
 80029ae:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80029b2:	461d      	mov	r5, r3
 80029b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 80029c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f00a f877 	bl	800caba <osThreadCreate>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4a44      	ldr	r2, [pc, #272]	; (8002ae0 <main+0x37c>)
 80029d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 128);
 80029d2:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <main+0x380>)
 80029d4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80029d8:	461d      	mov	r5, r3
 80029da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 80029e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f00a f864 	bl	800caba <osThreadCreate>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4a3c      	ldr	r2, [pc, #240]	; (8002ae8 <main+0x384>)
 80029f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityRealtime, 0, 512);
 80029f8:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <main+0x388>)
 80029fa:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80029fe:	461d      	mov	r5, r3
 8002a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 8002a0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f00a f851 	bl	800caba <osThreadCreate>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a35      	ldr	r2, [pc, #212]	; (8002af0 <main+0x38c>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 128);
 8002a1e:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <main+0x390>)
 8002a20:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002a24:	461d      	mov	r5, r3
 8002a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 8002a32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f00a f83e 	bl	800caba <osThreadCreate>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4a2d      	ldr	r2, [pc, #180]	; (8002af8 <main+0x394>)
 8002a42:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 128);
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <main+0x398>)
 8002a46:	f107 041c 	add.w	r4, r7, #28
 8002a4a:	461d      	mov	r5, r3
 8002a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f00a f82b 	bl	800caba <osThreadCreate>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <main+0x39c>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 512);
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <main+0x3a0>)
 8002a6c:	463c      	mov	r4, r7
 8002a6e:	461d      	mov	r5, r3
 8002a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 8002a7c:	463b      	mov	r3, r7
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00a f81a 	bl	800caba <osThreadCreate>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <main+0x3a4>)
 8002a8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002a8c:	f00a f80e 	bl	800caac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002a90:	e7fe      	b.n	8002a90 <main+0x32c>
 8002a92:	bf00      	nop
 8002a94:	200002a0 	.word	0x200002a0
 8002a98:	20000948 	.word	0x20000948
 8002a9c:	2000033c 	.word	0x2000033c
 8002aa0:	20000214 	.word	0x20000214
 8002aa4:	20000215 	.word	0x20000215
 8002aa8:	200009f8 	.word	0x200009f8
 8002aac:	200003a0 	.word	0x200003a0
 8002ab0:	20000216 	.word	0x20000216
 8002ab4:	20000c54 	.word	0x20000c54
 8002ab8:	20000c58 	.word	0x20000c58
 8002abc:	20000c5c 	.word	0x20000c5c
 8002ac0:	20000c60 	.word	0x20000c60
 8002ac4:	20000c64 	.word	0x20000c64
 8002ac8:	20000c68 	.word	0x20000c68
 8002acc:	20000c6c 	.word	0x20000c6c
 8002ad0:	20000c70 	.word	0x20000c70
 8002ad4:	20000c74 	.word	0x20000c74
 8002ad8:	20000c78 	.word	0x20000c78
 8002adc:	08015b18 	.word	0x08015b18
 8002ae0:	20000c3c 	.word	0x20000c3c
 8002ae4:	08015b44 	.word	0x08015b44
 8002ae8:	20000c40 	.word	0x20000c40
 8002aec:	08015b6c 	.word	0x08015b6c
 8002af0:	20000c44 	.word	0x20000c44
 8002af4:	08015b94 	.word	0x08015b94
 8002af8:	20000c48 	.word	0x20000c48
 8002afc:	08015bbc 	.word	0x08015bbc
 8002b00:	20000c4c 	.word	0x20000c4c
 8002b04:	08015be8 	.word	0x08015be8
 8002b08:	20000c50 	.word	0x20000c50

08002b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b094      	sub	sp, #80	; 0x50
 8002b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b12:	f107 0320 	add.w	r3, r7, #32
 8002b16:	2230      	movs	r2, #48	; 0x30
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00d fd1f 	bl	801055e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <SystemClock_Config+0xd0>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <SystemClock_Config+0xd0>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <SystemClock_Config+0xd0>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <SystemClock_Config+0xd4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a24      	ldr	r2, [pc, #144]	; (8002be0 <SystemClock_Config+0xd4>)
 8002b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <SystemClock_Config+0xd4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b64:	2301      	movs	r3, #1
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b68:	2310      	movs	r3, #16
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b74:	2308      	movs	r3, #8
 8002b76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002b78:	23d8      	movs	r3, #216	; 0xd8
 8002b7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b80:	2302      	movs	r3, #2
 8002b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b84:	f107 0320 	add.w	r3, r7, #32
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 fd45 	bl	8007618 <HAL_RCC_OscConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002b94:	f000 fba1 	bl	80032da <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b98:	f004 fcee 	bl	8007578 <HAL_PWREx_EnableOverDrive>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002ba2:	f000 fb9a 	bl	80032da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba6:	230f      	movs	r3, #15
 8002ba8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002baa:	2302      	movs	r3, #2
 8002bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	2107      	movs	r1, #7
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 ffcb 	bl	8007b60 <HAL_RCC_ClockConfig>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002bd0:	f000 fb83 	bl	80032da <Error_Handler>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3750      	adds	r7, #80	; 0x50
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40007000 	.word	0x40007000

08002be4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002bea:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <MX_I2C1_Init+0x78>)
 8002bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0404E72;
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <MX_I2C1_Init+0x7c>)
 8002bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c00:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c1e:	480e      	ldr	r0, [pc, #56]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002c20:	f003 feba 	bl	8006998 <HAL_I2C_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c2a:	f000 fb56 	bl	80032da <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4809      	ldr	r0, [pc, #36]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002c32:	f004 fc09 	bl	8007448 <HAL_I2CEx_ConfigAnalogFilter>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c3c:	f000 fb4d 	bl	80032da <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c40:	2100      	movs	r1, #0
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_I2C1_Init+0x74>)
 8002c44:	f004 fc4b 	bl	80074de <HAL_I2CEx_ConfigDigitalFilter>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c4e:	f000 fb44 	bl	80032da <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000890 	.word	0x20000890
 8002c5c:	40005400 	.word	0x40005400
 8002c60:	a0404e72 	.word	0xa0404e72

08002c64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <MX_SPI1_Init+0x78>)
 8002c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c86:	2202      	movs	r2, #2
 8002c88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cc2:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <MX_SPI1_Init+0x74>)
 8002cc4:	f005 fcae 	bl	8008624 <HAL_SPI_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002cce:	f000 fb04 	bl	80032da <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200008e4 	.word	0x200008e4
 8002cdc:	40013000 	.word	0x40013000

08002ce0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <MX_SPI2_Init+0x78>)
 8002ce8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002cfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cfe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d02:	2202      	movs	r2, #2
 8002d04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d16:	2228      	movs	r2, #40	; 0x28
 8002d18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d2e:	2207      	movs	r2, #7
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_SPI2_Init+0x74>)
 8002d40:	f005 fc70 	bl	8008624 <HAL_SPI_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002d4a:	f000 fac6 	bl	80032da <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000948 	.word	0x20000948
 8002d58:	40003800 	.word	0x40003800

08002d5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b09a      	sub	sp, #104	; 0x68
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
 8002d8c:	615a      	str	r2, [r3, #20]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	222c      	movs	r2, #44	; 0x2c
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f00d fbe1 	bl	801055e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002d9e:	4a56      	ldr	r2, [pc, #344]	; (8002ef8 <MX_TIM1_Init+0x19c>)
 8002da0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8002da2:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002da4:	22d7      	movs	r2, #215	; 0xd7
 8002da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da8:	4b52      	ldr	r3, [pc, #328]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8002dae:	4b51      	ldr	r3, [pc, #324]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002db0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002db4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db6:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dc2:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dc8:	484a      	ldr	r0, [pc, #296]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002dca:	f006 fb8b 	bl	80094e4 <HAL_TIM_Base_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002dd4:	f000 fa81 	bl	80032da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ddc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002de2:	4619      	mov	r1, r3
 8002de4:	4843      	ldr	r0, [pc, #268]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002de6:	f007 fa21 	bl	800a22c <HAL_TIM_ConfigClockSource>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002df0:	f000 fa73 	bl	80032da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002df4:	483f      	ldr	r0, [pc, #252]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002df6:	f006 fc45 	bl	8009684 <HAL_TIM_PWM_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002e00:	f000 fa6b 	bl	80032da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e14:	4619      	mov	r1, r3
 8002e16:	4837      	ldr	r0, [pc, #220]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002e18:	f008 f81c 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002e22:	f000 fa5a 	bl	80032da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e26:	2360      	movs	r3, #96	; 0x60
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e32:	2300      	movs	r3, #0
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e36:	2304      	movs	r3, #4
 8002e38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e46:	2200      	movs	r2, #0
 8002e48:	4619      	mov	r1, r3
 8002e4a:	482a      	ldr	r0, [pc, #168]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002e4c:	f007 f8da 	bl	800a004 <HAL_TIM_PWM_ConfigChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002e56:	f000 fa40 	bl	80032da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e5e:	2204      	movs	r2, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4824      	ldr	r0, [pc, #144]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002e64:	f007 f8ce 	bl	800a004 <HAL_TIM_PWM_ConfigChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002e6e:	f000 fa34 	bl	80032da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e76:	2208      	movs	r2, #8
 8002e78:	4619      	mov	r1, r3
 8002e7a:	481e      	ldr	r0, [pc, #120]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002e7c:	f007 f8c2 	bl	800a004 <HAL_TIM_PWM_ConfigChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002e86:	f000 fa28 	bl	80032da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e8e:	220c      	movs	r2, #12
 8002e90:	4619      	mov	r1, r3
 8002e92:	4818      	ldr	r0, [pc, #96]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002e94:	f007 f8b6 	bl	800a004 <HAL_TIM_PWM_ConfigChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8002e9e:	f000 fa1c 	bl	80032da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4807      	ldr	r0, [pc, #28]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002ed8:	f008 f84a 	bl	800af70 <HAL_TIMEx_ConfigBreakDeadTime>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8002ee2:	f000 f9fa 	bl	80032da <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ee6:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <MX_TIM1_Init+0x198>)
 8002ee8:	f000 fb66 	bl	80035b8 <HAL_TIM_MspPostInit>

}
 8002eec:	bf00      	nop
 8002eee:	3768      	adds	r7, #104	; 0x68
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200009ac 	.word	0x200009ac
 8002ef8:	40010000 	.word	0x40010000

08002efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f1c:	4a20      	ldr	r2, [pc, #128]	; (8002fa0 <MX_TIM3_Init+0xa4>)
 8002f1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f22:	226b      	movs	r2, #107	; 0x6b
 8002f24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002f32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f3a:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002f40:	4816      	ldr	r0, [pc, #88]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f42:	f006 fcfb 	bl	800993c <HAL_TIM_IC_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f4c:	f000 f9c5 	bl	80032da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	480f      	ldr	r0, [pc, #60]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f60:	f007 ff78 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002f6a:	f000 f9b6 	bl	80032da <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f72:	2301      	movs	r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	2200      	movs	r2, #0
 8002f82:	4619      	mov	r1, r3
 8002f84:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f86:	f006 ffa0 	bl	8009eca <HAL_TIM_IC_ConfigChannel>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002f90:	f000 f9a3 	bl	80032da <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200009f8 	.word	0x200009f8
 8002fa0:	40000400 	.word	0x40000400

08002fa4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <MX_UART4_Init+0x58>)
 8002faa:	4a15      	ldr	r2, [pc, #84]	; (8003000 <MX_UART4_Init+0x5c>)
 8002fac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002fb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fca:	220c      	movs	r2, #12
 8002fcc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002fe6:	4805      	ldr	r0, [pc, #20]	; (8002ffc <MX_UART4_Init+0x58>)
 8002fe8:	f008 f85e 	bl	800b0a8 <HAL_UART_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002ff2:	f000 f972 	bl	80032da <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000a44 	.word	0x20000a44
 8003000:	40004c00 	.word	0x40004c00

08003004 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <MX_USART2_UART_Init+0x60>)
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <MX_USART2_UART_Init+0x64>)
 800300c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <MX_USART2_UART_Init+0x60>)
 8003010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <MX_USART2_UART_Init+0x60>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <MX_USART2_UART_Init+0x60>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <MX_USART2_UART_Init+0x60>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <MX_USART2_UART_Init+0x60>)
 800302a:	2204      	movs	r2, #4
 800302c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <MX_USART2_UART_Init+0x60>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <MX_USART2_UART_Init+0x60>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <MX_USART2_UART_Init+0x60>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <MX_USART2_UART_Init+0x60>)
 8003042:	2210      	movs	r2, #16
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <MX_USART2_UART_Init+0x60>)
 8003048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <MX_USART2_UART_Init+0x60>)
 8003050:	f008 f82a 	bl	800b0a8 <HAL_UART_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800305a:	f000 f93e 	bl	80032da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000acc 	.word	0x20000acc
 8003068:	40004400 	.word	0x40004400

0800306c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 8003072:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <MX_USART3_UART_Init+0x5c>)
 8003074:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 8003078:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800307c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 8003092:	2208      	movs	r2, #8
 8003094:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030ae:	4805      	ldr	r0, [pc, #20]	; (80030c4 <MX_USART3_UART_Init+0x58>)
 80030b0:	f007 fffa 	bl	800b0a8 <HAL_UART_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80030ba:	f000 f90e 	bl	80032da <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000b54 	.word	0x20000b54
 80030c8:	40004800 	.word	0x40004800

080030cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <MX_DMA_Init+0x38>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <MX_DMA_Init+0x38>)
 80030d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MX_DMA_Init+0x38>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2108      	movs	r1, #8
 80030ee:	2010      	movs	r0, #16
 80030f0:	f002 fe68 	bl	8005dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80030f4:	2010      	movs	r0, #16
 80030f6:	f002 fe81 	bl	8005dfc <HAL_NVIC_EnableIRQ>

}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
 800311c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a40      	ldr	r2, [pc, #256]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <MX_GPIO_Init+0x11c>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <MX_GPIO_Init+0x11c>)
 800313c:	f043 0310 	orr.w	r3, r3, #16
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800314e:	4b35      	ldr	r3, [pc, #212]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b32      	ldr	r3, [pc, #200]	; (8003224 <MX_GPIO_Init+0x11c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003166:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <MX_GPIO_Init+0x11c>)
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a28      	ldr	r2, [pc, #160]	; (8003224 <MX_GPIO_Init+0x11c>)
 8003184:	f043 0304 	orr.w	r3, r3, #4
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <MX_GPIO_Init+0x11c>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800319c:	4822      	ldr	r0, [pc, #136]	; (8003228 <MX_GPIO_Init+0x120>)
 800319e:	f003 fbe1 	bl	8006964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80031a2:	2200      	movs	r2, #0
 80031a4:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80031a8:	4820      	ldr	r0, [pc, #128]	; (800322c <MX_GPIO_Init+0x124>)
 80031aa:	f003 fbdb 	bl	8006964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 80031ae:	2304      	movs	r3, #4
 80031b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	4619      	mov	r1, r3
 80031c0:	481b      	ldr	r0, [pc, #108]	; (8003230 <MX_GPIO_Init+0x128>)
 80031c2:	f003 fa33 	bl	800662c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 80031c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031cc:	2301      	movs	r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	4619      	mov	r1, r3
 80031de:	4812      	ldr	r0, [pc, #72]	; (8003228 <MX_GPIO_Init+0x120>)
 80031e0:	f003 fa24 	bl	800662c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 80031e4:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80031e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	4619      	mov	r1, r3
 80031fc:	480b      	ldr	r0, [pc, #44]	; (800322c <MX_GPIO_Init+0x124>)
 80031fe:	f003 fa15 	bl	800662c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 8003202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003208:	2300      	movs	r3, #0
 800320a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4619      	mov	r1, r3
 8003216:	4807      	ldr	r0, [pc, #28]	; (8003234 <MX_GPIO_Init+0x12c>)
 8003218:	f003 fa08 	bl	800662c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800321c:	bf00      	nop
 800321e:	3728      	adds	r7, #40	; 0x28
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	40021000 	.word	0x40021000
 800322c:	40020c00 	.word	0x40020c00
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400

08003238 <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fe febd 	bl	8001fc0 <TaskSensorData>
  /* USER CODE END 5 */
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f8b4 	bl	80013c4 <TaskController>
  /* USER CODE END RunTaskController */
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7fe fda7 	bl	8001dc0 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fe fcc6 	bl	8001c14 <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fe fd77 	bl	8001d8c <TaskPower>
  /* USER CODE END RunTaskPower */
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe f972 	bl	8001598 <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032ce:	f002 fc7d 	bl	8005bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032de:	b672      	cpsid	i
}
 80032e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <Error_Handler+0x8>

080032e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_MspInit+0x4c>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_MspInit+0x4c>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_MspInit+0x4c>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_MspInit+0x4c>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_MspInit+0x4c>)
 8003308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330c:	6453      	str	r3, [r2, #68]	; 0x44
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_MspInit+0x4c>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	210f      	movs	r1, #15
 800331e:	f06f 0001 	mvn.w	r0, #1
 8003322:	f002 fd4f 	bl	8005dc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b0aa      	sub	sp, #168	; 0xa8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f00d f902 	bl	801055e <memset>
  if(hi2c->Instance==I2C1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <HAL_I2C_MspInit+0xb4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d13c      	bne.n	80033de <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003368:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800336a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800336e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4618      	mov	r0, r3
 8003376:	f004 fe0b 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003380:	f7ff ffab 	bl	80032da <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_I2C_MspInit+0xb8>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_I2C_MspInit+0xb8>)
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	6313      	str	r3, [r2, #48]	; 0x30
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_I2C_MspInit+0xb8>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 800339c:	23c0      	movs	r3, #192	; 0xc0
 800339e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a2:	2312      	movs	r3, #18
 80033a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ae:	2303      	movs	r3, #3
 80033b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033b4:	2304      	movs	r3, #4
 80033b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033be:	4619      	mov	r1, r3
 80033c0:	480b      	ldr	r0, [pc, #44]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 80033c2:	f003 f933 	bl	800662c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_I2C_MspInit+0xb8>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_I2C_MspInit+0xb8>)
 80033cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_I2C_MspInit+0xb8>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033de:	bf00      	nop
 80033e0:	37a8      	adds	r7, #168	; 0xa8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40005400 	.word	0x40005400
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020400 	.word	0x40020400

080033f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <HAL_SPI_MspInit+0xd8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d128      	bne.n	8003468 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	4a2d      	ldr	r2, [pc, #180]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 800341c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003420:	6453      	str	r3, [r2, #68]	; 0x44
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 8003446:	23f0      	movs	r3, #240	; 0xf0
 8003448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003452:	2303      	movs	r3, #3
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003456:	2305      	movs	r3, #5
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345a:	f107 031c 	add.w	r3, r7, #28
 800345e:	4619      	mov	r1, r3
 8003460:	481c      	ldr	r0, [pc, #112]	; (80034d4 <HAL_SPI_MspInit+0xe0>)
 8003462:	f003 f8e3 	bl	800662c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003466:	e02d      	b.n	80034c4 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_SPI_MspInit+0xe4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d128      	bne.n	80034c4 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_SPI_MspInit+0xdc>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 80034a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034b4:	2305      	movs	r3, #5
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	4619      	mov	r1, r3
 80034be:	4807      	ldr	r0, [pc, #28]	; (80034dc <HAL_SPI_MspInit+0xe8>)
 80034c0:	f003 f8b4 	bl	800662c <HAL_GPIO_Init>
}
 80034c4:	bf00      	nop
 80034c6:	3730      	adds	r7, #48	; 0x30
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013000 	.word	0x40013000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40020000 	.word	0x40020000
 80034d8:	40003800 	.word	0x40003800
 80034dc:	40020400 	.word	0x40020400

080034e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <HAL_TIM_Base_MspInit+0x38>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10b      	bne.n	800350a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_TIM_Base_MspInit+0x3c>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_TIM_Base_MspInit+0x3c>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <HAL_TIM_Base_MspInit+0x3c>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40010000 	.word	0x40010000
 800351c:	40023800 	.word	0x40023800

08003520 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_TIM_IC_MspInit+0x8c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d12f      	bne.n	80035a2 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_TIM_IC_MspInit+0x90>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a1a      	ldr	r2, [pc, #104]	; (80035b0 <HAL_TIM_IC_MspInit+0x90>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_TIM_IC_MspInit+0x90>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_TIM_IC_MspInit+0x90>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <HAL_TIM_IC_MspInit+0x90>)
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_TIM_IC_MspInit+0x90>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003582:	2302      	movs	r3, #2
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 8003586:	f107 0314 	add.w	r3, r7, #20
 800358a:	4619      	mov	r1, r3
 800358c:	4809      	ldr	r0, [pc, #36]	; (80035b4 <HAL_TIM_IC_MspInit+0x94>)
 800358e:	f003 f84d 	bl	800662c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2106      	movs	r1, #6
 8003596:	201d      	movs	r0, #29
 8003598:	f002 fc14 	bl	8005dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800359c:	201d      	movs	r0, #29
 800359e:	f002 fc2d 	bl	8005dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035a2:	bf00      	nop
 80035a4:	3728      	adds	r7, #40	; 0x28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40020800 	.word	0x40020800

080035b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a11      	ldr	r2, [pc, #68]	; (800361c <HAL_TIM_MspPostInit+0x64>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d11c      	bne.n	8003614 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_TIM_MspPostInit+0x68>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <HAL_TIM_MspPostInit+0x68>)
 80035e0:	f043 0310 	orr.w	r3, r3, #16
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <HAL_TIM_MspPostInit+0x68>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 80035f2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80035f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003604:	2301      	movs	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	4619      	mov	r1, r3
 800360e:	4805      	ldr	r0, [pc, #20]	; (8003624 <HAL_TIM_MspPostInit+0x6c>)
 8003610:	f003 f80c 	bl	800662c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003614:	bf00      	nop
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40010000 	.word	0x40010000
 8003620:	40023800 	.word	0x40023800
 8003624:	40021000 	.word	0x40021000

08003628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b0ae      	sub	sp, #184	; 0xb8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f00c ff88 	bl	801055e <memset>
  if(huart->Instance==UART4)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a83      	ldr	r2, [pc, #524]	; (8003860 <HAL_UART_MspInit+0x238>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d144      	bne.n	80036e2 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800365e:	2340      	movs	r3, #64	; 0x40
 8003660:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003666:	4618      	mov	r0, r3
 8003668:	f004 fc92 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003672:	f7ff fe32 	bl	80032da <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003676:	4b7b      	ldr	r3, [pc, #492]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a7a      	ldr	r2, [pc, #488]	; (8003864 <HAL_UART_MspInit+0x23c>)
 800367c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
 8003682:	4b78      	ldr	r3, [pc, #480]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	4b75      	ldr	r3, [pc, #468]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a74      	ldr	r2, [pc, #464]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b72      	ldr	r3, [pc, #456]	; (8003864 <HAL_UART_MspInit+0x23c>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 80036a6:	2303      	movs	r3, #3
 80036a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	2302      	movs	r3, #2
 80036ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036be:	2308      	movs	r3, #8
 80036c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4867      	ldr	r0, [pc, #412]	; (8003868 <HAL_UART_MspInit+0x240>)
 80036cc:	f002 ffae 	bl	800662c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2106      	movs	r1, #6
 80036d4:	2034      	movs	r0, #52	; 0x34
 80036d6:	f002 fb75 	bl	8005dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80036da:	2034      	movs	r0, #52	; 0x34
 80036dc:	f002 fb8e 	bl	8005dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036e0:	e0b9      	b.n	8003856 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a61      	ldr	r2, [pc, #388]	; (800386c <HAL_UART_MspInit+0x244>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d172      	bne.n	80037d2 <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80036f0:	2304      	movs	r3, #4
 80036f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f8:	4618      	mov	r0, r3
 80036fa:	f004 fc49 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8003704:	f7ff fde9 	bl	80032da <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003708:	4b56      	ldr	r3, [pc, #344]	; (8003864 <HAL_UART_MspInit+0x23c>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	4a55      	ldr	r2, [pc, #340]	; (8003864 <HAL_UART_MspInit+0x23c>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003712:	6413      	str	r3, [r2, #64]	; 0x40
 8003714:	4b53      	ldr	r3, [pc, #332]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003720:	4b50      	ldr	r3, [pc, #320]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	4a4f      	ldr	r2, [pc, #316]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	6313      	str	r3, [r2, #48]	; 0x30
 800372c:	4b4d      	ldr	r3, [pc, #308]	; (8003864 <HAL_UART_MspInit+0x23c>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8003738:	2360      	movs	r3, #96	; 0x60
 800373a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003750:	2307      	movs	r3, #7
 8003752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003756:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800375a:	4619      	mov	r1, r3
 800375c:	4844      	ldr	r0, [pc, #272]	; (8003870 <HAL_UART_MspInit+0x248>)
 800375e:	f002 ff65 	bl	800662c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003762:	4b44      	ldr	r3, [pc, #272]	; (8003874 <HAL_UART_MspInit+0x24c>)
 8003764:	4a44      	ldr	r2, [pc, #272]	; (8003878 <HAL_UART_MspInit+0x250>)
 8003766:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003768:	4b42      	ldr	r3, [pc, #264]	; (8003874 <HAL_UART_MspInit+0x24c>)
 800376a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800376e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003770:	4b40      	ldr	r3, [pc, #256]	; (8003874 <HAL_UART_MspInit+0x24c>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003776:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_UART_MspInit+0x24c>)
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800377c:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_UART_MspInit+0x24c>)
 800377e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003782:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003784:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_UART_MspInit+0x24c>)
 8003786:	2200      	movs	r2, #0
 8003788:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800378a:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <HAL_UART_MspInit+0x24c>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003790:	4b38      	ldr	r3, [pc, #224]	; (8003874 <HAL_UART_MspInit+0x24c>)
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_UART_MspInit+0x24c>)
 8003798:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800379c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800379e:	4b35      	ldr	r3, [pc, #212]	; (8003874 <HAL_UART_MspInit+0x24c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037a4:	4833      	ldr	r0, [pc, #204]	; (8003874 <HAL_UART_MspInit+0x24c>)
 80037a6:	f002 fb37 	bl	8005e18 <HAL_DMA_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80037b0:	f7ff fd93 	bl	80032da <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <HAL_UART_MspInit+0x24c>)
 80037b8:	675a      	str	r2, [r3, #116]	; 0x74
 80037ba:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <HAL_UART_MspInit+0x24c>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2107      	movs	r1, #7
 80037c4:	2026      	movs	r0, #38	; 0x26
 80037c6:	f002 fafd 	bl	8005dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037ca:	2026      	movs	r0, #38	; 0x26
 80037cc:	f002 fb16 	bl	8005dfc <HAL_NVIC_EnableIRQ>
}
 80037d0:	e041      	b.n	8003856 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a29      	ldr	r2, [pc, #164]	; (800387c <HAL_UART_MspInit+0x254>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d13c      	bne.n	8003856 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80037e2:	2310      	movs	r3, #16
 80037e4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 fbd0 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 80037f6:	f7ff fd70 	bl	80032da <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <HAL_UART_MspInit+0x23c>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <HAL_UART_MspInit+0x23c>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 800382a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800382e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003832:	2302      	movs	r3, #2
 8003834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383e:	2303      	movs	r3, #3
 8003840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003844:	2307      	movs	r3, #7
 8003846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800384a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800384e:	4619      	mov	r1, r3
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <HAL_UART_MspInit+0x258>)
 8003852:	f002 feeb 	bl	800662c <HAL_GPIO_Init>
}
 8003856:	bf00      	nop
 8003858:	37b8      	adds	r7, #184	; 0xb8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40004c00 	.word	0x40004c00
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	40004400 	.word	0x40004400
 8003870:	40020c00 	.word	0x40020c00
 8003874:	20000bdc 	.word	0x20000bdc
 8003878:	40026088 	.word	0x40026088
 800387c:	40004800 	.word	0x40004800
 8003880:	40020800 	.word	0x40020800

08003884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08e      	sub	sp, #56	; 0x38
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003894:	4b34      	ldr	r3, [pc, #208]	; (8003968 <HAL_InitTick+0xe4>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	4a33      	ldr	r2, [pc, #204]	; (8003968 <HAL_InitTick+0xe4>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6413      	str	r3, [r2, #64]	; 0x40
 80038a0:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_InitTick+0xe4>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038ac:	f107 0210 	add.w	r2, r7, #16
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 fb38 	bl	8007f2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038c6:	f004 fb09 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 80038ca:	6378      	str	r0, [r7, #52]	; 0x34
 80038cc:	e004      	b.n	80038d8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038ce:	f004 fb05 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 80038d2:	4603      	mov	r3, r0
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	4a24      	ldr	r2, [pc, #144]	; (800396c <HAL_InitTick+0xe8>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	0c9b      	lsrs	r3, r3, #18
 80038e2:	3b01      	subs	r3, #1
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80038e6:	4b22      	ldr	r3, [pc, #136]	; (8003970 <HAL_InitTick+0xec>)
 80038e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_InitTick+0xec>)
 80038f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038f4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_InitTick+0xec>)
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80038fc:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <HAL_InitTick+0xec>)
 80038fe:	2200      	movs	r2, #0
 8003900:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_InitTick+0xec>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_InitTick+0xec>)
 800390a:	2200      	movs	r2, #0
 800390c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800390e:	4818      	ldr	r0, [pc, #96]	; (8003970 <HAL_InitTick+0xec>)
 8003910:	f005 fde8 	bl	80094e4 <HAL_TIM_Base_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800391a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11b      	bne.n	800395a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003922:	4813      	ldr	r0, [pc, #76]	; (8003970 <HAL_InitTick+0xec>)
 8003924:	f005 fe36 	bl	8009594 <HAL_TIM_Base_Start_IT>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800392e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003932:	2b00      	cmp	r3, #0
 8003934:	d111      	bne.n	800395a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003936:	201c      	movs	r0, #28
 8003938:	f002 fa60 	bl	8005dfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b0f      	cmp	r3, #15
 8003940:	d808      	bhi.n	8003954 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003942:	2200      	movs	r2, #0
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	201c      	movs	r0, #28
 8003948:	f002 fa3c 	bl	8005dc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800394c:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_InitTick+0xf0>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e002      	b.n	800395a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800395a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800395e:	4618      	mov	r0, r3
 8003960:	3738      	adds	r7, #56	; 0x38
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	431bde83 	.word	0x431bde83
 8003970:	20000c7c 	.word	0x20000c7c
 8003974:	2000000c 	.word	0x2000000c

08003978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800397c:	e7fe      	b.n	800397c <NMI_Handler+0x4>

0800397e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003982:	e7fe      	b.n	8003982 <HardFault_Handler+0x4>

08003984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003988:	e7fe      	b.n	8003988 <MemManage_Handler+0x4>

0800398a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800398e:	e7fe      	b.n	800398e <BusFault_Handler+0x4>

08003990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003994:	e7fe      	b.n	8003994 <UsageFault_Handler+0x4>

08003996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <DMA1_Stream5_IRQHandler+0x10>)
 80039aa:	f002 fbd5 	bl	8006158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000bdc 	.word	0x20000bdc

080039b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <TIM2_IRQHandler+0x10>)
 80039be:	f006 f965 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000c7c 	.word	0x20000c7c

080039cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <TIM3_IRQHandler+0x10>)
 80039d2:	f006 f95b 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200009f8 	.word	0x200009f8

080039e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <USART2_IRQHandler+0x10>)
 80039e6:	f007 fcb9 	bl	800b35c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000acc 	.word	0x20000acc

080039f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <UART4_IRQHandler+0x10>)
 80039fa:	f007 fcaf 	bl	800b35c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000a44 	.word	0x20000a44

08003a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return 1;
 8003a0c:	2301      	movs	r3, #1
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_kill>:

int _kill(int pid, int sig)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a22:	f00c fe57 	bl	80106d4 <__errno>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2216      	movs	r2, #22
 8003a2a:	601a      	str	r2, [r3, #0]
  return -1;
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <_exit>:

void _exit (int status)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ffe7 	bl	8003a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a4a:	e7fe      	b.n	8003a4a <_exit+0x12>

08003a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e00a      	b.n	8003a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a5e:	f3af 8000 	nop.w
 8003a62:	4601      	mov	r1, r0
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	60ba      	str	r2, [r7, #8]
 8003a6a:	b2ca      	uxtb	r2, r1
 8003a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3301      	adds	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	dbf0      	blt.n	8003a5e <_read+0x12>
  }

  return len;
 8003a7c:	687b      	ldr	r3, [r7, #4]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e009      	b.n	8003aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	60ba      	str	r2, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	dbf1      	blt.n	8003a98 <_write+0x12>
  }
  return len;
 8003ab4:	687b      	ldr	r3, [r7, #4]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <_close>:

int _close(int file)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <_isatty>:

int _isatty(int file)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003afe:	2301      	movs	r3, #1
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <_sbrk+0x5c>)
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <_sbrk+0x60>)
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b3c:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <_sbrk+0x64>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <_sbrk+0x64>)
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <_sbrk+0x68>)
 8003b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <_sbrk+0x64>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d207      	bcs.n	8003b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b58:	f00c fdbc 	bl	80106d4 <__errno>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	220c      	movs	r2, #12
 8003b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	e009      	b.n	8003b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <_sbrk+0x64>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b6e:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <_sbrk+0x64>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <_sbrk+0x64>)
 8003b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20040000 	.word	0x20040000
 8003b88:	00000400 	.word	0x00000400
 8003b8c:	20000cc8 	.word	0x20000cc8
 8003b90:	20004b68 	.word	0x20004b68

08003b94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <SystemInit+0x20>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	4a05      	ldr	r2, [pc, #20]	; (8003bb4 <SystemInit+0x20>)
 8003ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b24      	cmp	r3, #36	; 0x24
 8003bd2:	d103      	bne.n	8003bdc <GPS_validate+0x24>
		i++;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003bda:	e00c      	b.n	8003bf6 <GPS_validate+0x3e>
		return 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e047      	b.n	8003c70 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4053      	eors	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
		i++;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <GPS_validate+0x5c>
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c0c:	d002      	beq.n	8003c14 <GPS_validate+0x5c>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b4a      	cmp	r3, #74	; 0x4a
 8003c12:	dde5      	ble.n	8003be0 <GPS_validate+0x28>
	}

	if (i >= 75)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b4a      	cmp	r3, #74	; 0x4a
 8003c18:	dd01      	ble.n	8003c1e <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e028      	b.n	8003c70 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b2a      	cmp	r3, #42	; 0x2a
 8003c28:	d119      	bne.n	8003c5e <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	3302      	adds	r3, #2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	490a      	ldr	r1, [pc, #40]	; (8003c78 <GPS_validate+0xc0>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00c fbf4 	bl	801043c <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003c54:	7a3a      	ldrb	r2, [r7, #8]
 8003c56:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d108      	bne.n	8003c6e <GPS_validate+0xb6>
 8003c5c:	e001      	b.n	8003c62 <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e006      	b.n	8003c70 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003c62:	7a7a      	ldrb	r2, [r7, #9]
 8003c64:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d101      	bne.n	8003c6e <GPS_validate+0xb6>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <GPS_validate+0xb8>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	08015c04 	.word	0x08015c04

08003c7c <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af08      	add	r7, sp, #32
 8003c82:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8003c84:	2206      	movs	r2, #6
 8003c86:	4964      	ldr	r1, [pc, #400]	; (8003e18 <GPS_parse+0x19c>)
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f00c fc70 	bl	801056e <strncmp>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d138      	bne.n	8003d06 <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8003c94:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <GPS_parse+0x1a0>)
 8003c96:	9307      	str	r3, [sp, #28]
 8003c98:	4b61      	ldr	r3, [pc, #388]	; (8003e20 <GPS_parse+0x1a4>)
 8003c9a:	9306      	str	r3, [sp, #24]
 8003c9c:	4b61      	ldr	r3, [pc, #388]	; (8003e24 <GPS_parse+0x1a8>)
 8003c9e:	9305      	str	r3, [sp, #20]
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <GPS_parse+0x1ac>)
 8003ca2:	9304      	str	r3, [sp, #16]
 8003ca4:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <GPS_parse+0x1b0>)
 8003ca6:	9303      	str	r3, [sp, #12]
 8003ca8:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <GPS_parse+0x1b4>)
 8003caa:	9302      	str	r3, [sp, #8]
 8003cac:	4b61      	ldr	r3, [pc, #388]	; (8003e34 <GPS_parse+0x1b8>)
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <GPS_parse+0x1bc>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <GPS_parse+0x1c0>)
 8003cb6:	4a62      	ldr	r2, [pc, #392]	; (8003e40 <GPS_parse+0x1c4>)
 8003cb8:	4962      	ldr	r1, [pc, #392]	; (8003e44 <GPS_parse+0x1c8>)
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f00c fbde 	bl	801047c <siscanf>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f340 80a4 	ble.w	8003e10 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003cc8:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <GPS_parse+0x1cc>)
 8003cca:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cce:	4b5e      	ldr	r3, [pc, #376]	; (8003e48 <GPS_parse+0x1cc>)
 8003cd0:	7d1b      	ldrb	r3, [r3, #20]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd8:	f000 f8da 	bl	8003e90 <GPS_nmea_to_dec>
 8003cdc:	eef0 7a40 	vmov.f32	s15, s0
 8003ce0:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <GPS_parse+0x1cc>)
 8003ce2:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003ce6:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <GPS_parse+0x1cc>)
 8003ce8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003cec:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <GPS_parse+0x1cc>)
 8003cee:	7f1b      	ldrb	r3, [r3, #28]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	f000 f8cb 	bl	8003e90 <GPS_nmea_to_dec>
 8003cfa:	eef0 7a40 	vmov.f32	s15, s0
 8003cfe:	4b52      	ldr	r3, [pc, #328]	; (8003e48 <GPS_parse+0x1cc>)
 8003d00:	edc3 7a00 	vstr	s15, [r3]
			return;
 8003d04:	e084      	b.n	8003e10 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8003d06:	2206      	movs	r2, #6
 8003d08:	4950      	ldr	r1, [pc, #320]	; (8003e4c <GPS_parse+0x1d0>)
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f00c fc2f 	bl	801056e <strncmp>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d123      	bne.n	8003d5e <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8003d16:	4b4e      	ldr	r3, [pc, #312]	; (8003e50 <GPS_parse+0x1d4>)
 8003d18:	9305      	str	r3, [sp, #20]
 8003d1a:	4b4e      	ldr	r3, [pc, #312]	; (8003e54 <GPS_parse+0x1d8>)
 8003d1c:	9304      	str	r3, [sp, #16]
 8003d1e:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <GPS_parse+0x1dc>)
 8003d20:	9303      	str	r3, [sp, #12]
 8003d22:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <GPS_parse+0x1b4>)
 8003d24:	9302      	str	r3, [sp, #8]
 8003d26:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <GPS_parse+0x1b8>)
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	4b43      	ldr	r3, [pc, #268]	; (8003e38 <GPS_parse+0x1bc>)
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <GPS_parse+0x1c0>)
 8003d30:	4a43      	ldr	r2, [pc, #268]	; (8003e40 <GPS_parse+0x1c4>)
 8003d32:	494a      	ldr	r1, [pc, #296]	; (8003e5c <GPS_parse+0x1e0>)
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f00c fba1 	bl	801047c <siscanf>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dd67      	ble.n	8003e10 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8003d40:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <GPS_parse+0x1cc>)
 8003d42:	7d1b      	ldrb	r3, [r3, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <GPS_parse+0xd2>
				GPS.ns = ' ';
 8003d48:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <GPS_parse+0x1cc>)
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <GPS_parse+0x1cc>)
 8003d50:	7f1b      	ldrb	r3, [r3, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d157      	bne.n	8003e06 <GPS_parse+0x18a>
				GPS.ew = ' ';
 8003d56:	4b3c      	ldr	r3, [pc, #240]	; (8003e48 <GPS_parse+0x1cc>)
 8003d58:	2220      	movs	r2, #32
 8003d5a:	771a      	strb	r2, [r3, #28]
			return;
 8003d5c:	e053      	b.n	8003e06 <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8003d5e:	2206      	movs	r2, #6
 8003d60:	493f      	ldr	r1, [pc, #252]	; (8003e60 <GPS_parse+0x1e4>)
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f00c fc03 	bl	801056e <strncmp>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d11f      	bne.n	8003dae <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <GPS_parse+0x1e8>)
 8003d70:	9303      	str	r3, [sp, #12]
 8003d72:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <GPS_parse+0x1c4>)
 8003d74:	9302      	str	r3, [sp, #8]
 8003d76:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <GPS_parse+0x1b4>)
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <GPS_parse+0x1b8>)
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <GPS_parse+0x1bc>)
 8003d80:	4a2e      	ldr	r2, [pc, #184]	; (8003e3c <GPS_parse+0x1c0>)
 8003d82:	4939      	ldr	r1, [pc, #228]	; (8003e68 <GPS_parse+0x1ec>)
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f00c fb79 	bl	801047c <siscanf>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	dd3f      	ble.n	8003e10 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8003d90:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <GPS_parse+0x1cc>)
 8003d92:	7d1b      	ldrb	r3, [r3, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <GPS_parse+0x122>
				GPS.ns = '?';
 8003d98:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <GPS_parse+0x1cc>)
 8003d9a:	223f      	movs	r2, #63	; 0x3f
 8003d9c:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <GPS_parse+0x1cc>)
 8003da0:	7f1b      	ldrb	r3, [r3, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d131      	bne.n	8003e0a <GPS_parse+0x18e>
				GPS.ew = '?';
 8003da6:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <GPS_parse+0x1cc>)
 8003da8:	223f      	movs	r2, #63	; 0x3f
 8003daa:	771a      	strb	r2, [r3, #28]
			return;
 8003dac:	e02d      	b.n	8003e0a <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8003dae:	2206      	movs	r2, #6
 8003db0:	492e      	ldr	r1, [pc, #184]	; (8003e6c <GPS_parse+0x1f0>)
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f00c fbdb 	bl	801056e <strncmp>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d128      	bne.n	8003e10 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8003dbe:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <GPS_parse+0x1f4>)
 8003dc0:	9305      	str	r3, [sp, #20]
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	; (8003e74 <GPS_parse+0x1f8>)
 8003dc4:	9304      	str	r3, [sp, #16]
 8003dc6:	4b2c      	ldr	r3, [pc, #176]	; (8003e78 <GPS_parse+0x1fc>)
 8003dc8:	9303      	str	r3, [sp, #12]
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <GPS_parse+0x1dc>)
 8003dcc:	9302      	str	r3, [sp, #8]
 8003dce:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <GPS_parse+0x200>)
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <GPS_parse+0x204>)
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <GPS_parse+0x208>)
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <GPS_parse+0x20c>)
 8003dda:	492c      	ldr	r1, [pc, #176]	; (8003e8c <GPS_parse+0x210>)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f00c fb4d 	bl	801047c <siscanf>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dd13      	ble.n	8003e10 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <GPS_parse+0x1cc>)
 8003dea:	7d1b      	ldrb	r3, [r3, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <GPS_parse+0x17a>
				GPS.ns = '?';
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <GPS_parse+0x1cc>)
 8003df2:	223f      	movs	r2, #63	; 0x3f
 8003df4:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <GPS_parse+0x1cc>)
 8003df8:	7f1b      	ldrb	r3, [r3, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d107      	bne.n	8003e0e <GPS_parse+0x192>
				GPS.ew = '?';
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <GPS_parse+0x1cc>)
 8003e00:	223f      	movs	r2, #63	; 0x3f
 8003e02:	771a      	strb	r2, [r3, #28]
			return;
 8003e04:	e003      	b.n	8003e0e <GPS_parse+0x192>
			return;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <GPS_parse+0x194>
			return;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <GPS_parse+0x194>
			return;
 8003e0e:	bf00      	nop
		}
	}
}
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	08015c0c 	.word	0x08015c0c
 8003e1c:	200004ac 	.word	0x200004ac
 8003e20:	200004a8 	.word	0x200004a8
 8003e24:	200004a4 	.word	0x200004a4
 8003e28:	200004a0 	.word	0x200004a0
 8003e2c:	2000049c 	.word	0x2000049c
 8003e30:	20000498 	.word	0x20000498
 8003e34:	20000494 	.word	0x20000494
 8003e38:	20000490 	.word	0x20000490
 8003e3c:	2000048c 	.word	0x2000048c
 8003e40:	20000488 	.word	0x20000488
 8003e44:	08015c14 	.word	0x08015c14
 8003e48:	2000047c 	.word	0x2000047c
 8003e4c:	08015c3c 	.word	0x08015c3c
 8003e50:	200004b8 	.word	0x200004b8
 8003e54:	200004b4 	.word	0x200004b4
 8003e58:	200004b0 	.word	0x200004b0
 8003e5c:	08015c44 	.word	0x08015c44
 8003e60:	08015c64 	.word	0x08015c64
 8003e64:	200004bc 	.word	0x200004bc
 8003e68:	08015c6c 	.word	0x08015c6c
 8003e6c:	08015c88 	.word	0x08015c88
 8003e70:	200004d4 	.word	0x200004d4
 8003e74:	200004d0 	.word	0x200004d0
 8003e78:	200004cd 	.word	0x200004cd
 8003e7c:	200004cc 	.word	0x200004cc
 8003e80:	200004c8 	.word	0x200004c8
 8003e84:	200004c4 	.word	0x200004c4
 8003e88:	200004c0 	.word	0x200004c0
 8003e8c:	08015c90 	.word	0x08015c90

08003e90 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8003e9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ea2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003f24 <GPS_nmea_to_dec+0x94>
 8003ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eae:	ee17 3a90 	vmov	r3, s15
 8003eb2:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2264      	movs	r2, #100	; 0x64
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	ee07 3a90 	vmov	s15, r3
 8003ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ec4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ecc:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8003ed0:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ed4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003f28 <GPS_nmea_to_dec+0x98>
 8003ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003edc:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eea:	ed97 7a02 	vldr	s14, [r7, #8]
 8003eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef2:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	2b53      	cmp	r3, #83	; 0x53
 8003efa:	d002      	beq.n	8003f02 <GPS_nmea_to_dec+0x72>
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	2b57      	cmp	r3, #87	; 0x57
 8003f00:	d105      	bne.n	8003f0e <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8003f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f06:	eef1 7a67 	vneg.f32	s15, s15
 8003f0a:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	ee07 3a90 	vmov	s15, r3
}
 8003f14:	eeb0 0a67 	vmov.f32	s0, s15
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	42c80000 	.word	0x42c80000
 8003f28:	42700000 	.word	0x42700000

08003f2c <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8003f30:	2007      	movs	r0, #7
 8003f32:	f000 f871 	bl	8004018 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8003f36:	2000      	movs	r0, #0
 8003f38:	f000 f8c8 	bl	80040cc <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 8003f3c:	2005      	movs	r0, #5
 8003f3e:	f000 f8e0 	bl	8004102 <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8003f42:	2002      	movs	r0, #2
 8003f44:	f000 f8fc 	bl	8004140 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f000 f84e 	bl	8003fec <HMC5883L_setOffset>

	return 0;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8003f5e:	2003      	movs	r0, #3
 8003f60:	f000 f946 	bl	80041f0 <HMC5883L_readRegister16>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <HMC5883L_readRaw+0x88>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f76:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HMC5883L_readRaw+0x8c>)
 8003f78:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8003f7c:	2007      	movs	r0, #7
 8003f7e:	f000 f937 	bl	80041f0 <HMC5883L_readRegister16>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <HMC5883L_readRaw+0x90>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HMC5883L_readRaw+0x8c>)
 8003f96:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8003f9a:	2005      	movs	r0, #5
 8003f9c:	f000 f928 	bl	80041f0 <HMC5883L_readRegister16>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <HMC5883L_readRaw+0x8c>)
 8003fac:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8003fb0:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <HMC5883L_readRaw+0x8c>)
 8003fb2:	f107 0314 	add.w	r3, r7, #20
 8003fb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003fbc:	6979      	ldr	r1, [r7, #20]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	ee06 1a90 	vmov	s13, r1
 8003fc6:	ee07 2a10 	vmov	s14, r2
 8003fca:	ee07 3a90 	vmov	s15, r3
}
 8003fce:	eeb0 0a66 	vmov.f32	s0, s13
 8003fd2:	eef0 0a47 	vmov.f32	s1, s14
 8003fd6:	eeb0 1a67 	vmov.f32	s2, s15
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000388 	.word	0x20000388
 8003fe4:	2000037c 	.word	0x2000037c
 8003fe8:	2000038c 	.word	0x2000038c

08003fec <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8003ff6:	4a06      	ldr	r2, [pc, #24]	; (8004010 <HMC5883L_setOffset+0x24>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8003ffc:	4a05      	ldr	r2, [pc, #20]	; (8004014 <HMC5883L_setOffset+0x28>)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6013      	str	r3, [r2, #0]
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000388 	.word	0x20000388
 8004014:	2000038c 	.word	0x2000038c

08004018 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b07      	cmp	r3, #7
 8004026:	d833      	bhi.n	8004090 <HMC5883L_setRange+0x78>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HMC5883L_setRange+0x18>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004051 	.word	0x08004051
 8004034:	08004059 	.word	0x08004059
 8004038:	08004061 	.word	0x08004061
 800403c:	08004069 	.word	0x08004069
 8004040:	08004071 	.word	0x08004071
 8004044:	08004079 	.word	0x08004079
 8004048:	08004081 	.word	0x08004081
 800404c:	08004089 	.word	0x08004089
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <HMC5883L_setRange+0x90>)
 8004052:	4a16      	ldr	r2, [pc, #88]	; (80040ac <HMC5883L_setRange+0x94>)
 8004054:	601a      	str	r2, [r3, #0]
	    break;
 8004056:	e01c      	b.n	8004092 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <HMC5883L_setRange+0x90>)
 800405a:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <HMC5883L_setRange+0x98>)
 800405c:	601a      	str	r2, [r3, #0]
	    break;
 800405e:	e018      	b.n	8004092 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HMC5883L_setRange+0x90>)
 8004062:	4a14      	ldr	r2, [pc, #80]	; (80040b4 <HMC5883L_setRange+0x9c>)
 8004064:	601a      	str	r2, [r3, #0]
	    break;
 8004066:	e014      	b.n	8004092 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <HMC5883L_setRange+0x90>)
 800406a:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <HMC5883L_setRange+0xa0>)
 800406c:	601a      	str	r2, [r3, #0]
	    break;
 800406e:	e010      	b.n	8004092 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HMC5883L_setRange+0x90>)
 8004072:	4a12      	ldr	r2, [pc, #72]	; (80040bc <HMC5883L_setRange+0xa4>)
 8004074:	601a      	str	r2, [r3, #0]
	    break;
 8004076:	e00c      	b.n	8004092 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HMC5883L_setRange+0x90>)
 800407a:	4a11      	ldr	r2, [pc, #68]	; (80040c0 <HMC5883L_setRange+0xa8>)
 800407c:	601a      	str	r2, [r3, #0]
	    break;
 800407e:	e008      	b.n	8004092 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HMC5883L_setRange+0x90>)
 8004082:	4a10      	ldr	r2, [pc, #64]	; (80040c4 <HMC5883L_setRange+0xac>)
 8004084:	601a      	str	r2, [r3, #0]
	    break;
 8004086:	e004      	b.n	8004092 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HMC5883L_setRange+0x90>)
 800408a:	4a0f      	ldr	r2, [pc, #60]	; (80040c8 <HMC5883L_setRange+0xb0>)
 800408c:	601a      	str	r2, [r3, #0]
	    break;
 800408e:	e000      	b.n	8004092 <HMC5883L_setRange+0x7a>

	default:
	    break;
 8004090:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	015b      	lsls	r3, r3, #5
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	2001      	movs	r0, #1
 800409c:	f000 f870 	bl	8004180 <HMC5883L_writeRegister8>
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000378 	.word	0x20000378
 80040ac:	3d958106 	.word	0x3d958106
 80040b0:	3f6b851f 	.word	0x3f6b851f
 80040b4:	3f9c28f6 	.word	0x3f9c28f6
 80040b8:	3fc28f5c 	.word	0x3fc28f5c
 80040bc:	401147ae 	.word	0x401147ae
 80040c0:	4023d70a 	.word	0x4023d70a
 80040c4:	4041eb85 	.word	0x4041eb85
 80040c8:	408b3333 	.word	0x408b3333

080040cc <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 80040d6:	2002      	movs	r0, #2
 80040d8:	f000 f86e 	bl	80041b8 <HMC5883L_readRegister8>
 80040dc:	4603      	mov	r3, r0
 80040de:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	4619      	mov	r1, r3
 80040f4:	2002      	movs	r0, #2
 80040f6:	f000 f843 	bl	8004180 <HMC5883L_writeRegister8>
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 800410c:	2000      	movs	r0, #0
 800410e:	f000 f853 	bl	80041b8 <HMC5883L_readRegister8>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	f023 031c 	bic.w	r3, r3, #28
 800411c:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	b25a      	sxtb	r2, r3
 8004124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004128:	4313      	orrs	r3, r2
 800412a:	b25b      	sxtb	r3, r3
 800412c:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	4619      	mov	r1, r3
 8004132:	2000      	movs	r0, #0
 8004134:	f000 f824 	bl	8004180 <HMC5883L_writeRegister8>
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 800414a:	2000      	movs	r0, #0
 800414c:	f000 f834 	bl	80041b8 <HMC5883L_readRegister8>
 8004150:	4603      	mov	r3, r0
 8004152:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800415a:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	015b      	lsls	r3, r3, #5
 8004160:	b25a      	sxtb	r2, r3
 8004162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004166:	4313      	orrs	r3, r2
 8004168:	b25b      	sxtb	r3, r3
 800416a:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	4619      	mov	r1, r3
 8004170:	2000      	movs	r0, #0
 8004172:	f000 f805 	bl	8004180 <HMC5883L_writeRegister8>
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af04      	add	r7, sp, #16
 8004186:	4603      	mov	r3, r0
 8004188:	460a      	mov	r2, r1
 800418a:	71fb      	strb	r3, [r7, #7]
 800418c:	4613      	mov	r3, r2
 800418e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	b29a      	uxth	r2, r3
 8004194:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004198:	9302      	str	r3, [sp, #8]
 800419a:	2301      	movs	r3, #1
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	1dbb      	adds	r3, r7, #6
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2301      	movs	r3, #1
 80041a4:	213c      	movs	r1, #60	; 0x3c
 80041a6:	4803      	ldr	r0, [pc, #12]	; (80041b4 <HMC5883L_writeRegister8+0x34>)
 80041a8:	f002 fc86 	bl	8006ab8 <HAL_I2C_Mem_Write>
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000890 	.word	0x20000890

080041b8 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af04      	add	r7, sp, #16
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80041ca:	9302      	str	r3, [sp, #8]
 80041cc:	2301      	movs	r3, #1
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	f107 030f 	add.w	r3, r7, #15
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2301      	movs	r3, #1
 80041d8:	213c      	movs	r1, #60	; 0x3c
 80041da:	4804      	ldr	r0, [pc, #16]	; (80041ec <HMC5883L_readRegister8+0x34>)
 80041dc:	f002 fd80 	bl	8006ce0 <HAL_I2C_Mem_Read>
    return value;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000890 	.word	0x20000890

080041f0 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af04      	add	r7, sp, #16
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004202:	9302      	str	r3, [sp, #8]
 8004204:	2302      	movs	r3, #2
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	f107 030e 	add.w	r3, r7, #14
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	2301      	movs	r3, #1
 8004210:	213c      	movs	r1, #60	; 0x3c
 8004212:	4804      	ldr	r0, [pc, #16]	; (8004224 <HMC5883L_readRegister16+0x34>)
 8004214:	f002 fd64 	bl	8006ce0 <HAL_I2C_Mem_Read>
    return value;
 8004218:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000890 	.word	0x20000890

08004228 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 8004232:	2201      	movs	r2, #1
 8004234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004238:	481a      	ldr	r0, [pc, #104]	; (80042a4 <BMP280_initialize+0x7c>)
 800423a:	f002 fb93 	bl	8006964 <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 8004244:	6838      	ldr	r0, [r7, #0]
 8004246:	f000 f83c 	bl	80042c2 <BMP280_getID>
 800424a:	4603      	mov	r3, r0
 800424c:	2b58      	cmp	r3, #88	; 0x58
 800424e:	d001      	beq.n	8004254 <BMP280_initialize+0x2c>
    {
        return 1;
 8004250:	2301      	movs	r3, #1
 8004252:	e023      	b.n	800429c <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 8004254:	6838      	ldr	r0, [r7, #0]
 8004256:	f000 f827 	bl	80042a8 <BMP280_reset>
    HAL_Delay(500);
 800425a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800425e:	f001 fcd5 	bl	8005c0c <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 8004262:	2105      	movs	r1, #5
 8004264:	6838      	ldr	r0, [r7, #0]
 8004266:	f000 f8ef 	bl	8004448 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 800426a:	2102      	movs	r1, #2
 800426c:	6838      	ldr	r0, [r7, #0]
 800426e:	f000 f90c 	bl	800448a <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 8004272:	2103      	movs	r1, #3
 8004274:	6838      	ldr	r0, [r7, #0]
 8004276:	f000 f929 	bl	80044cc <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 800427a:	2104      	movs	r1, #4
 800427c:	6838      	ldr	r0, [r7, #0]
 800427e:	f000 f966 	bl	800454e <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 8004282:	2100      	movs	r1, #0
 8004284:	6838      	ldr	r0, [r7, #0]
 8004286:	f000 f941 	bl	800450c <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 800428a:	6838      	ldr	r0, [r7, #0]
 800428c:	f000 f826 	bl	80042dc <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 8004290:	2232      	movs	r2, #50	; 0x32
 8004292:	2164      	movs	r1, #100	; 0x64
 8004294:	6838      	ldr	r0, [r7, #0]
 8004296:	f000 f89e 	bl	80043d6 <BMP280_setReferencePressure>

    return 0;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40020c00 	.word	0x40020c00

080042a8 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 80042b0:	22b6      	movs	r2, #182	; 0xb6
 80042b2:	21e0      	movs	r1, #224	; 0xe0
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fa25 	bl	8004704 <BMP280_writeRegister>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 80042ca:	21d0      	movs	r1, #208	; 0xd0
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f9fd 	bl	80046cc <BMP280_readRegister>
 80042d2:	4603      	mov	r3, r0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 80042e4:	f107 0208 	add.w	r2, r7, #8
 80042e8:	2318      	movs	r3, #24
 80042ea:	2188      	movs	r1, #136	; 0x88
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fa28 	bl	8004742 <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 80042f2:	7a7b      	ldrb	r3, [r7, #9]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	b21a      	sxth	r2, r3
 80042f8:	7a3b      	ldrb	r3, [r7, #8]
 80042fa:	b21b      	sxth	r3, r3
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b21b      	sxth	r3, r3
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 8004306:	7afb      	ldrb	r3, [r7, #11]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	b21a      	sxth	r2, r3
 800430c:	7abb      	ldrb	r3, [r7, #10]
 800430e:	b21b      	sxth	r3, r3
 8004310:	4313      	orrs	r3, r2
 8004312:	b21a      	sxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 8004318:	7b7b      	ldrb	r3, [r7, #13]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	b21a      	sxth	r2, r3
 800431e:	7b3b      	ldrb	r3, [r7, #12]
 8004320:	b21b      	sxth	r3, r3
 8004322:	4313      	orrs	r3, r2
 8004324:	b21a      	sxth	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	b21a      	sxth	r2, r3
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	b21b      	sxth	r3, r3
 8004334:	4313      	orrs	r3, r2
 8004336:	b21b      	sxth	r3, r3
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 800433e:	7c7b      	ldrb	r3, [r7, #17]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	b21a      	sxth	r2, r3
 8004344:	7c3b      	ldrb	r3, [r7, #16]
 8004346:	b21b      	sxth	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b21a      	sxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	b21a      	sxth	r2, r3
 8004356:	7cbb      	ldrb	r3, [r7, #18]
 8004358:	b21b      	sxth	r3, r3
 800435a:	4313      	orrs	r3, r2
 800435c:	b21a      	sxth	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 8004362:	7d7b      	ldrb	r3, [r7, #21]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	b21a      	sxth	r2, r3
 8004368:	7d3b      	ldrb	r3, [r7, #20]
 800436a:	b21b      	sxth	r3, r3
 800436c:	4313      	orrs	r3, r2
 800436e:	b21a      	sxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	b21a      	sxth	r2, r3
 800437a:	7dbb      	ldrb	r3, [r7, #22]
 800437c:	b21b      	sxth	r3, r3
 800437e:	4313      	orrs	r3, r2
 8004380:	b21a      	sxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 8004386:	7e7b      	ldrb	r3, [r7, #25]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	b21a      	sxth	r2, r3
 800438c:	7e3b      	ldrb	r3, [r7, #24]
 800438e:	b21b      	sxth	r3, r3
 8004390:	4313      	orrs	r3, r2
 8004392:	b21a      	sxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 8004398:	7efb      	ldrb	r3, [r7, #27]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	b21a      	sxth	r2, r3
 800439e:	7ebb      	ldrb	r3, [r7, #26]
 80043a0:	b21b      	sxth	r3, r3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b21a      	sxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 80043aa:	7f7b      	ldrb	r3, [r7, #29]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	b21a      	sxth	r2, r3
 80043b0:	7f3b      	ldrb	r3, [r7, #28]
 80043b2:	b21b      	sxth	r3, r3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	b21a      	sxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 80043bc:	7ffb      	ldrb	r3, [r7, #31]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	b21a      	sxth	r2, r3
 80043c2:	7fbb      	ldrb	r3, [r7, #30]
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	4313      	orrs	r3, r2
 80043c8:	b21a      	sxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 80043ce:	bf00      	nop
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	807b      	strh	r3, [r7, #2]
 80043e2:	4613      	mov	r3, r2
 80043e4:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 80043e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043ea:	f001 fc0f 	bl	8005c0c <HAL_Delay>
    float sum = 0;
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	e012      	b.n	8004420 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f8c8 	bl	8004590 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	edd3 7a04 	vldr	s15, [r3, #16]
 8004406:	ed97 7a03 	vldr	s14, [r7, #12]
 800440a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800440e:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 8004412:	787b      	ldrb	r3, [r7, #1]
 8004414:	4618      	mov	r0, r3
 8004416:	f001 fbf9 	bl	8005c0c <HAL_Delay>
    for (int i = 0; i < samples; i++)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	887b      	ldrh	r3, [r7, #2]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	429a      	cmp	r2, r3
 8004426:	dbe8      	blt.n	80043fa <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004432:	edd7 6a03 	vldr	s13, [r7, #12]
 8004436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8004454:	21f4      	movs	r1, #244	; 0xf4
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f938 	bl	80046cc <BMP280_readRegister>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 8004460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004464:	f023 031c 	bic.w	r3, r3, #28
 8004468:	b25a      	sxtb	r2, r3
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	b25b      	sxtb	r3, r3
 8004470:	4313      	orrs	r3, r2
 8004472:	b25b      	sxtb	r3, r3
 8004474:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	461a      	mov	r2, r3
 800447a:	21f4      	movs	r1, #244	; 0xf4
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f941 	bl	8004704 <BMP280_writeRegister>
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 8004496:	21f4      	movs	r1, #244	; 0xf4
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f917 	bl	80046cc <BMP280_readRegister>
 800449e:	4603      	mov	r3, r0
 80044a0:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 80044a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	b25a      	sxtb	r2, r3
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	015b      	lsls	r3, r3, #5
 80044b0:	b25b      	sxtb	r3, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	461a      	mov	r2, r3
 80044bc:	21f4      	movs	r1, #244	; 0xf4
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f920 	bl	8004704 <BMP280_writeRegister>
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80044d8:	21f4      	movs	r1, #244	; 0xf4
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8f6 	bl	80046cc <BMP280_readRegister>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 80044e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e8:	f023 0303 	bic.w	r3, r3, #3
 80044ec:	b25a      	sxtb	r2, r3
 80044ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b25b      	sxtb	r3, r3
 80044f6:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	461a      	mov	r2, r3
 80044fc:	21f4      	movs	r1, #244	; 0xf4
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f900 	bl	8004704 <BMP280_writeRegister>
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8004518:	21f5      	movs	r1, #245	; 0xf5
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8d6 	bl	80046cc <BMP280_readRegister>
 8004520:	4603      	mov	r3, r0
 8004522:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 8004524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	b25a      	sxtb	r2, r3
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	015b      	lsls	r3, r3, #5
 8004532:	b25b      	sxtb	r3, r3
 8004534:	4313      	orrs	r3, r2
 8004536:	b25b      	sxtb	r3, r3
 8004538:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	461a      	mov	r2, r3
 800453e:	21f5      	movs	r1, #245	; 0xf5
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8df 	bl	8004704 <BMP280_writeRegister>
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 800455a:	21f5      	movs	r1, #245	; 0xf5
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f8b5 	bl	80046cc <BMP280_readRegister>
 8004562:	4603      	mov	r3, r0
 8004564:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 8004566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800456a:	f023 031c 	bic.w	r3, r3, #28
 800456e:	b25a      	sxtb	r2, r3
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	b25b      	sxtb	r3, r3
 8004576:	4313      	orrs	r3, r2
 8004578:	b25b      	sxtb	r3, r3
 800457a:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	461a      	mov	r2, r3
 8004580:	21f5      	movs	r1, #245	; 0xf5
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8be 	bl	8004704 <BMP280_writeRegister>
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 8004598:	f107 0208 	add.w	r2, r7, #8
 800459c:	2306      	movs	r3, #6
 800459e:	21f7      	movs	r1, #247	; 0xf7
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8ce 	bl	8004742 <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80045a6:	7a3b      	ldrb	r3, [r7, #8]
 80045a8:	031a      	lsls	r2, r3, #12
 80045aa:	7a7b      	ldrb	r3, [r7, #9]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4313      	orrs	r3, r2
 80045b0:	7aba      	ldrb	r2, [r7, #10]
 80045b2:	0912      	lsrs	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80045ba:	7afb      	ldrb	r3, [r7, #11]
 80045bc:	031a      	lsls	r2, r3, #12
 80045be:	7b3b      	ldrb	r3, [r7, #12]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	4313      	orrs	r3, r2
 80045c4:	7b7a      	ldrb	r2, [r7, #13]
 80045c6:	0912      	lsrs	r2, r2, #4
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 80045ce:	6939      	ldr	r1, [r7, #16]
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f917 	bl	8004804 <BMP280_compensate_temperature>
 80045d6:	ee07 0a90 	vmov	s15, r0
 80045da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045de:	ee17 0a90 	vmov	r0, s15
 80045e2:	f7fb ffd9 	bl	8000598 <__aeabi_f2d>
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	4b35      	ldr	r3, [pc, #212]	; (80046c0 <BMP280_measure+0x130>)
 80045ec:	f7fc f956 	bl	800089c <__aeabi_ddiv>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	f7fc fb1e 	bl	8000c38 <__aeabi_d2f>
 80045fc:	4602      	mov	r2, r0
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f953 	bl	80048b0 <BMP280_compensate_pressure>
 800460a:	ee07 0a90 	vmov	s15, r0
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	ee17 0a90 	vmov	r0, s15
 8004616:	f7fb ffbf 	bl	8000598 <__aeabi_f2d>
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <BMP280_measure+0x134>)
 8004620:	f7fc f93c 	bl	800089c <__aeabi_ddiv>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	f7fc fb04 	bl	8000c38 <__aeabi_d2f>
 8004630:	4602      	mov	r2, r0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	edd3 7a01 	vldr	s15, [r3, #4]
 800463c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	dc00      	bgt.n	8004648 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 8004646:	e02c      	b.n	80046a2 <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	ed93 7a04 	vldr	s14, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	edd3 7a01 	vldr	s15, [r3, #4]
 8004654:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004658:	ee16 0a90 	vmov	r0, s13
 800465c:	f7fb ff9c 	bl	8000598 <__aeabi_f2d>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80046b0 <BMP280_measure+0x120>
 8004668:	ec43 2b10 	vmov	d0, r2, r3
 800466c:	f010 f810 	bl	8014690 <pow>
 8004670:	ec53 2b10 	vmov	r2, r3, d0
 8004674:	f04f 0000 	mov.w	r0, #0
 8004678:	4913      	ldr	r1, [pc, #76]	; (80046c8 <BMP280_measure+0x138>)
 800467a:	f7fb fe2d 	bl	80002d8 <__aeabi_dsub>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	a30c      	add	r3, pc, #48	; (adr r3, 80046b8 <BMP280_measure+0x128>)
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f7fb ffdc 	bl	8000648 <__aeabi_dmul>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	f7fc face 	bl	8000c38 <__aeabi_d2f>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	615a      	str	r2, [r3, #20]
}
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	f3af 8000 	nop.w
 80046b0:	1a36e2eb 	.word	0x1a36e2eb
 80046b4:	3fc85bc0 	.word	0x3fc85bc0
 80046b8:	00000000 	.word	0x00000000
 80046bc:	4150e92d 	.word	0x4150e92d
 80046c0:	40590000 	.word	0x40590000
 80046c4:	40700000 	.word	0x40700000
 80046c8:	3ff00000 	.word	0x3ff00000

080046cc <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f883 	bl	80047e4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f855 	bl	8004792 <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 80046e8:	2100      	movs	r1, #0
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f851 	bl	8004792 <BMP280_spiReadWrite>
 80046f0:	4603      	mov	r3, r0
 80046f2:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f865 	bl	80047c4 <BMP280_spiCSNhigh>
    return value;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
 8004710:	4613      	mov	r3, r2
 8004712:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f865 	bl	80047e4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004720:	b2db      	uxtb	r3, r3
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f834 	bl	8004792 <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 800472a:	78bb      	ldrb	r3, [r7, #2]
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f82f 	bl	8004792 <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f845 	bl	80047c4 <BMP280_spiCSNhigh>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 8004742:	b590      	push	{r4, r7, lr}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	461a      	mov	r2, r3
 800474e:	460b      	mov	r3, r1
 8004750:	72fb      	strb	r3, [r7, #11]
 8004752:	4613      	mov	r3, r2
 8004754:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f844 	bl	80047e4 <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 800475c:	7afb      	ldrb	r3, [r7, #11]
 800475e:	4619      	mov	r1, r3
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f816 	bl	8004792 <BMP280_spiReadWrite>
    while (length--)
 8004766:	e008      	b.n	800477a <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8004768:	687c      	ldr	r4, [r7, #4]
 800476a:	1c63      	adds	r3, r4, #1
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	2100      	movs	r1, #0
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f80e 	bl	8004792 <BMP280_spiReadWrite>
 8004776:	4603      	mov	r3, r0
 8004778:	7023      	strb	r3, [r4, #0]
    while (length--)
 800477a:	7abb      	ldrb	r3, [r7, #10]
 800477c:	1e5a      	subs	r2, r3, #1
 800477e:	72ba      	strb	r2, [r7, #10]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f1      	bne.n	8004768 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f81d 	bl	80047c4 <BMP280_spiCSNhigh>
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bd90      	pop	{r4, r7, pc}

08004792 <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af02      	add	r7, sp, #8
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 800479e:	23ff      	movs	r3, #255	; 0xff
 80047a0:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	f107 020f 	add.w	r2, r7, #15
 80047aa:	1cf9      	adds	r1, r7, #3
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2301      	movs	r3, #1
 80047b4:	f004 fa7f 	bl	8008cb6 <HAL_SPI_TransmitReceive>
    return rx_message;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 80047cc:	2201      	movs	r2, #1
 80047ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047d2:	4803      	ldr	r0, [pc, #12]	; (80047e0 <BMP280_spiCSNhigh+0x1c>)
 80047d4:	f002 f8c6 	bl	8006964 <HAL_GPIO_WritePin>
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40020c00 	.word	0x40020c00

080047e4 <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 80047ec:	2200      	movs	r2, #0
 80047ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047f2:	4803      	ldr	r0, [pc, #12]	; (8004800 <BMP280_spiCSNlow+0x1c>)
 80047f4:	f002 f8b6 	bl	8006964 <HAL_GPIO_WritePin>
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40020c00 	.word	0x40020c00

08004804 <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	da00      	bge.n	8004816 <BMP280_compensate_temperature+0x12>
 8004814:	3307      	adds	r3, #7
 8004816:	10db      	asrs	r3, r3, #3
 8004818:	461a      	mov	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8b1b      	ldrh	r3, [r3, #24]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	da01      	bge.n	8004834 <BMP280_compensate_temperature+0x30>
 8004830:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8004834:	12db      	asrs	r3, r3, #11
 8004836:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	da00      	bge.n	8004840 <BMP280_compensate_temperature+0x3c>
 800483e:	330f      	adds	r3, #15
 8004840:	111b      	asrs	r3, r3, #4
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8b1b      	ldrh	r3, [r3, #24]
 8004848:	1ad2      	subs	r2, r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	da00      	bge.n	8004852 <BMP280_compensate_temperature+0x4e>
 8004850:	330f      	adds	r3, #15
 8004852:	111b      	asrs	r3, r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8b1b      	ldrh	r3, [r3, #24]
 800485a:	1acb      	subs	r3, r1, r3
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	da01      	bge.n	8004868 <BMP280_compensate_temperature+0x64>
 8004864:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004868:	131b      	asrs	r3, r3, #12
 800486a:	461a      	mov	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	da03      	bge.n	8004882 <BMP280_compensate_temperature+0x7e>
 800487a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800487e:	441a      	add	r2, r3
 8004880:	4613      	mov	r3, r2
 8004882:	139b      	asrs	r3, r3, #14
 8004884:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	3380      	adds	r3, #128	; 0x80
 800489c:	2b00      	cmp	r3, #0
 800489e:	da00      	bge.n	80048a2 <BMP280_compensate_temperature+0x9e>
 80048a0:	33ff      	adds	r3, #255	; 0xff
 80048a2:	121b      	asrs	r3, r3, #8
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 80048b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b4:	b0d6      	sub	sp, #344	; 0x158
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 80048bc:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 80048c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	17da      	asrs	r2, r3, #31
 80048c8:	461c      	mov	r4, r3
 80048ca:	4615      	mov	r5, r2
 80048cc:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80048d0:	f145 3bff 	adc.w	fp, r5, #4294967295
 80048d4:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 80048d8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80048dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048e0:	fb03 f102 	mul.w	r1, r3, r2
 80048e4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80048e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	18ca      	adds	r2, r1, r3
 80048f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048f6:	fba3 8903 	umull	r8, r9, r3, r3
 80048fa:	eb02 0309 	add.w	r3, r2, r9
 80048fe:	4699      	mov	r9, r3
 8004900:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004904:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004908:	b21b      	sxth	r3, r3
 800490a:	17da      	asrs	r2, r3, #31
 800490c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004910:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004914:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8004918:	4603      	mov	r3, r0
 800491a:	fb03 f209 	mul.w	r2, r3, r9
 800491e:	460b      	mov	r3, r1
 8004920:	fb08 f303 	mul.w	r3, r8, r3
 8004924:	4413      	add	r3, r2
 8004926:	4602      	mov	r2, r0
 8004928:	fba8 1202 	umull	r1, r2, r8, r2
 800492c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004930:	460a      	mov	r2, r1
 8004932:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004936:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800493a:	4413      	add	r3, r2
 800493c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004940:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8004944:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8004948:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 800494c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004950:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004954:	b21b      	sxth	r3, r3
 8004956:	17da      	asrs	r2, r3, #31
 8004958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800495c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004960:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004964:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004968:	462a      	mov	r2, r5
 800496a:	fb02 f203 	mul.w	r2, r2, r3
 800496e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004972:	4621      	mov	r1, r4
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	441a      	add	r2, r3
 800497a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800497e:	4621      	mov	r1, r4
 8004980:	fba3 1301 	umull	r1, r3, r3, r1
 8004984:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004988:	460b      	mov	r3, r1
 800498a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800498e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004992:	18d3      	adds	r3, r2, r3
 8004994:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004998:	f04f 0000 	mov.w	r0, #0
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80049a4:	462b      	mov	r3, r5
 80049a6:	0459      	lsls	r1, r3, #17
 80049a8:	4623      	mov	r3, r4
 80049aa:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80049ae:	4623      	mov	r3, r4
 80049b0:	0458      	lsls	r0, r3, #17
 80049b2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80049b6:	1814      	adds	r4, r2, r0
 80049b8:	67bc      	str	r4, [r7, #120]	; 0x78
 80049ba:	414b      	adcs	r3, r1
 80049bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049be:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80049c2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 80049c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049ca:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80049ce:	b21b      	sxth	r3, r3
 80049d0:	17da      	asrs	r2, r3, #31
 80049d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049da:	f04f 0000 	mov.w	r0, #0
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e6:	00d9      	lsls	r1, r3, #3
 80049e8:	2000      	movs	r0, #0
 80049ea:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80049ee:	1814      	adds	r4, r2, r0
 80049f0:	673c      	str	r4, [r7, #112]	; 0x70
 80049f2:	414b      	adcs	r3, r1
 80049f4:	677b      	str	r3, [r7, #116]	; 0x74
 80049f6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80049fa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 80049fe:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004a02:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004a06:	fb03 f102 	mul.w	r1, r3, r2
 8004a0a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004a0e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	18ca      	adds	r2, r1, r3
 8004a18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004a1c:	fba3 1303 	umull	r1, r3, r3, r3
 8004a20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004a24:	460b      	mov	r3, r1
 8004a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004a34:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004a38:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	17da      	asrs	r2, r3, #31
 8004a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a48:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a52:	4642      	mov	r2, r8
 8004a54:	fb02 f203 	mul.w	r2, r2, r3
 8004a58:	464b      	mov	r3, r9
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	4622      	mov	r2, r4
 8004a64:	4641      	mov	r1, r8
 8004a66:	fba2 1201 	umull	r1, r2, r2, r1
 8004a6a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004a6e:	460a      	mov	r2, r1
 8004a70:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8004a74:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004a78:	4413      	add	r3, r2
 8004a7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a7e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da07      	bge.n	8004a96 <BMP280_compensate_pressure+0x1e6>
 8004a86:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004a8a:	66b9      	str	r1, [r7, #104]	; 0x68
 8004a8c:	f143 0300 	adc.w	r3, r3, #0
 8004a90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004a96:	f04f 0000 	mov.w	r0, #0
 8004a9a:	f04f 0100 	mov.w	r1, #0
 8004a9e:	0a10      	lsrs	r0, r2, #8
 8004aa0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004aa4:	1219      	asrs	r1, r3, #8
 8004aa6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004aaa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004aae:	b21b      	sxth	r3, r3
 8004ab0:	17da      	asrs	r2, r3, #31
 8004ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004aba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004abe:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004ac2:	464a      	mov	r2, r9
 8004ac4:	fb02 f203 	mul.w	r2, r2, r3
 8004ac8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004acc:	4644      	mov	r4, r8
 8004ace:	fb04 f303 	mul.w	r3, r4, r3
 8004ad2:	441a      	add	r2, r3
 8004ad4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ad8:	4644      	mov	r4, r8
 8004ada:	fba3 4304 	umull	r4, r3, r3, r4
 8004ade:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004aec:	18d3      	adds	r3, r2, r3
 8004aee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004afe:	464c      	mov	r4, r9
 8004b00:	0323      	lsls	r3, r4, #12
 8004b02:	4644      	mov	r4, r8
 8004b04:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8004b08:	4644      	mov	r4, r8
 8004b0a:	0322      	lsls	r2, r4, #12
 8004b0c:	1884      	adds	r4, r0, r2
 8004b0e:	663c      	str	r4, [r7, #96]	; 0x60
 8004b10:	eb41 0303 	adc.w	r3, r1, r3
 8004b14:	667b      	str	r3, [r7, #100]	; 0x64
 8004b16:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004b1a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8004b1e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004b22:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8004b26:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8004b2a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8004b2e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004b32:	8bdb      	ldrh	r3, [r3, #30]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b40:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8004b44:	462b      	mov	r3, r5
 8004b46:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b4a:	4642      	mov	r2, r8
 8004b4c:	fb02 f203 	mul.w	r2, r2, r3
 8004b50:	464b      	mov	r3, r9
 8004b52:	4621      	mov	r1, r4
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	4413      	add	r3, r2
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	fba2 1201 	umull	r1, r2, r2, r1
 8004b62:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8004b66:	460a      	mov	r2, r1
 8004b68:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004b6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004b70:	4413      	add	r3, r2
 8004b72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004b76:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	da06      	bge.n	8004b8c <BMP280_compensate_pressure+0x2dc>
 8004b7e:	1e51      	subs	r1, r2, #1
 8004b80:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b82:	f143 0301 	adc.w	r3, r3, #1
 8004b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b8c:	f04f 0000 	mov.w	r0, #0
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	1058      	asrs	r0, r3, #1
 8004b96:	17d9      	asrs	r1, r3, #31
 8004b98:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8004b9c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	d101      	bne.n	8004ba8 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e182      	b.n	8004eae <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8004ba8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bac:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004bb0:	17da      	asrs	r2, r3, #31
 8004bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bb4:	657a      	str	r2, [r7, #84]	; 0x54
 8004bb6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004bba:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8004bbe:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004bc2:	f04f 0000 	mov.w	r0, #0
 8004bc6:	f04f 0100 	mov.w	r1, #0
 8004bca:	07d9      	lsls	r1, r3, #31
 8004bcc:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8004bd0:	07d0      	lsls	r0, r2, #31
 8004bd2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004bd6:	1a84      	subs	r4, r0, r2
 8004bd8:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004bdc:	eb61 0303 	sbc.w	r3, r1, r3
 8004be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004be4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8004be8:	4622      	mov	r2, r4
 8004bea:	462b      	mov	r3, r5
 8004bec:	1891      	adds	r1, r2, r2
 8004bee:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bf0:	415b      	adcs	r3, r3
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	1851      	adds	r1, r2, r1
 8004bfc:	6439      	str	r1, [r7, #64]	; 0x40
 8004bfe:	4629      	mov	r1, r5
 8004c00:	414b      	adcs	r3, r1
 8004c02:	647b      	str	r3, [r7, #68]	; 0x44
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c10:	4649      	mov	r1, r9
 8004c12:	018b      	lsls	r3, r1, #6
 8004c14:	4641      	mov	r1, r8
 8004c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	018a      	lsls	r2, r1, #6
 8004c1e:	4641      	mov	r1, r8
 8004c20:	1889      	adds	r1, r1, r2
 8004c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c24:	4649      	mov	r1, r9
 8004c26:	eb43 0101 	adc.w	r1, r3, r1
 8004c2a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004c38:	4649      	mov	r1, r9
 8004c3a:	008b      	lsls	r3, r1, #2
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c42:	4641      	mov	r1, r8
 8004c44:	008a      	lsls	r2, r1, #2
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	189b      	adds	r3, r3, r2
 8004c50:	633b      	str	r3, [r7, #48]	; 0x30
 8004c52:	460b      	mov	r3, r1
 8004c54:	462a      	mov	r2, r5
 8004c56:	eb42 0303 	adc.w	r3, r2, r3
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8004c68:	4649      	mov	r1, r9
 8004c6a:	008b      	lsls	r3, r1, #2
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c72:	4641      	mov	r1, r8
 8004c74:	008a      	lsls	r2, r1, #2
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c84:	462b      	mov	r3, r5
 8004c86:	460a      	mov	r2, r1
 8004c88:	eb42 0303 	adc.w	r3, r2, r3
 8004c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c90:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004c94:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004c98:	f7fc f81e 	bl	8000cd8 <__aeabi_ldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8004ca4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004ca8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	17da      	asrs	r2, r3, #31
 8004cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cb4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cb8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	da08      	bge.n	8004cd2 <BMP280_compensate_pressure+0x422>
 8004cc0:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004cc4:	1851      	adds	r1, r2, r1
 8004cc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cc8:	f143 0300 	adc.w	r3, r3, #0
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	0b50      	lsrs	r0, r2, #13
 8004cdc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004ce0:	1359      	asrs	r1, r3, #13
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8004cea:	4629      	mov	r1, r5
 8004cec:	fb02 f001 	mul.w	r0, r2, r1
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	fb01 f103 	mul.w	r1, r1, r3
 8004cf6:	4401      	add	r1, r0
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	fba0 2302 	umull	r2, r3, r0, r2
 8004cfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d02:	4613      	mov	r3, r2
 8004d04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0c:	18cb      	adds	r3, r1, r3
 8004d0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d12:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da08      	bge.n	8004d2c <BMP280_compensate_pressure+0x47c>
 8004d1a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004d1e:	1851      	adds	r1, r2, r1
 8004d20:	6239      	str	r1, [r7, #32]
 8004d22:	f143 0300 	adc.w	r3, r3, #0
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d2c:	f04f 0000 	mov.w	r0, #0
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	0b50      	lsrs	r0, r2, #13
 8004d36:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004d3a:	1359      	asrs	r1, r3, #13
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004d44:	4629      	mov	r1, r5
 8004d46:	fb02 f001 	mul.w	r0, r2, r1
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	fb01 f103 	mul.w	r1, r1, r3
 8004d50:	4401      	add	r1, r0
 8004d52:	4620      	mov	r0, r4
 8004d54:	fba0 2302 	umull	r2, r3, r0, r2
 8004d58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d66:	18cb      	adds	r3, r1, r3
 8004d68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d6c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	da08      	bge.n	8004d86 <BMP280_compensate_pressure+0x4d6>
 8004d74:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8004d78:	1851      	adds	r1, r2, r1
 8004d7a:	61b9      	str	r1, [r7, #24]
 8004d7c:	f143 0300 	adc.w	r3, r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d86:	f04f 0000 	mov.w	r0, #0
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	0e50      	lsrs	r0, r2, #25
 8004d90:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8004d94:	1659      	asrs	r1, r3, #25
 8004d96:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8004d9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d9e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004da2:	b21b      	sxth	r3, r3
 8004da4:	17da      	asrs	r2, r3, #31
 8004da6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004daa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004dae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004db2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004db6:	462a      	mov	r2, r5
 8004db8:	fb02 f203 	mul.w	r2, r2, r3
 8004dbc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	441a      	add	r2, r3
 8004dc8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004dcc:	4621      	mov	r1, r4
 8004dce:	fba3 1301 	umull	r1, r3, r3, r1
 8004dd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004de6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004dea:	2900      	cmp	r1, #0
 8004dec:	da07      	bge.n	8004dfe <BMP280_compensate_pressure+0x54e>
 8004dee:	4b33      	ldr	r3, [pc, #204]	; (8004ebc <BMP280_compensate_pressure+0x60c>)
 8004df0:	18c3      	adds	r3, r0, r3
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	f141 0300 	adc.w	r3, r1, #0
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	0cc2      	lsrs	r2, r0, #19
 8004e08:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004e0c:	14cb      	asrs	r3, r1, #19
 8004e0e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8004e12:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004e16:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004e1a:	1884      	adds	r4, r0, r2
 8004e1c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004e20:	eb41 0303 	adc.w	r3, r1, r3
 8004e24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e28:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004e2c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e30:	4621      	mov	r1, r4
 8004e32:	1889      	adds	r1, r1, r2
 8004e34:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004e38:	4629      	mov	r1, r5
 8004e3a:	eb43 0101 	adc.w	r1, r3, r1
 8004e3e:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8004e42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da07      	bge.n	8004e5a <BMP280_compensate_pressure+0x5aa>
 8004e4a:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	f143 0300 	adc.w	r3, r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e5a:	f04f 0000 	mov.w	r0, #0
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	0a10      	lsrs	r0, r2, #8
 8004e64:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004e68:	1219      	asrs	r1, r3, #8
 8004e6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004e6e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004e72:	b21b      	sxth	r3, r3
 8004e74:	17da      	asrs	r2, r3, #31
 8004e76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e7a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004e8a:	464c      	mov	r4, r9
 8004e8c:	0123      	lsls	r3, r4, #4
 8004e8e:	4644      	mov	r4, r8
 8004e90:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004e94:	4644      	mov	r4, r8
 8004e96:	0122      	lsls	r2, r4, #4
 8004e98:	1884      	adds	r4, r0, r2
 8004e9a:	603c      	str	r4, [r7, #0]
 8004e9c:	eb41 0303 	adc.w	r3, r1, r3
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004ea6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 8004eaa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eba:	bf00      	nop
 8004ebc:	0007ffff 	.word	0x0007ffff

08004ec0 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004ec0:	b5b0      	push	{r4, r5, r7, lr}
 8004ec2:	b09c      	sub	sp, #112	; 0x70
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ed0:	482c      	ldr	r0, [pc, #176]	; (8004f84 <MPU_Init+0xc4>)
 8004ed2:	f001 fd47 	bl	8006964 <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_500DPS;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	pMPU9250->settings.aFullScaleRange = AFSR_2G;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eec:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <MPU_Init+0xc4>)
 8004ef4:	66da      	str	r2, [r3, #108]	; 0x6c
	pMPU9250->attitude.tau = 0.98;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <MPU_Init+0xc8>)
 8004efa:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.lastTick = 0;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54
	pMPU9250->attitude.dt = 0;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f843 	bl	8004f98 <MPU_begin>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d023      	beq.n	8004f60 <MPU_Init+0xa0>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8004f18:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <MPU_Init+0xcc>)
 8004f1a:	f107 040c 	add.w	r4, r7, #12
 8004f1e:	461d      	mov	r5, r3
 8004f20:	6828      	ldr	r0, [r5, #0]
 8004f22:	6869      	ldr	r1, [r5, #4]
 8004f24:	68aa      	ldr	r2, [r5, #8]
 8004f26:	68eb      	ldr	r3, [r5, #12]
 8004f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f2a:	6928      	ldr	r0, [r5, #16]
 8004f2c:	6969      	ldr	r1, [r5, #20]
 8004f2e:	69aa      	ldr	r2, [r5, #24]
 8004f30:	c407      	stmia	r4!, {r0, r1, r2}
 8004f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f36:	2248      	movs	r2, #72	; 0x48
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f00b fb0f 	bl	801055e <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb f9bb 	bl	80002c0 <strlen>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	f107 010c 	add.w	r1, r7, #12
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	480e      	ldr	r0, [pc, #56]	; (8004f90 <MPU_Init+0xd0>)
 8004f58:	f006 f8f4 	bl	800b144 <HAL_UART_Transmit>
		return 1;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e00c      	b.n	8004f7a <MPU_Init+0xba>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8004f60:	f04f 33ff 	mov.w	r3, #4294967295
 8004f64:	2210      	movs	r2, #16
 8004f66:	490b      	ldr	r1, [pc, #44]	; (8004f94 <MPU_Init+0xd4>)
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <MPU_Init+0xd0>)
 8004f6a:	f006 f8eb 	bl	800b144 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 20);
 8004f6e:	2214      	movs	r2, #20
 8004f70:	6839      	ldr	r1, [r7, #0]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f85c 	bl	8005030 <MPU_calibrateGyro>

	return 0;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3770      	adds	r7, #112	; 0x70
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bdb0      	pop	{r4, r5, r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40020c00 	.word	0x40020c00
 8004f88:	3f7ae148 	.word	0x3f7ae148
 8004f8c:	08015cc4 	.word	0x08015cc4
 8004f90:	20000b54 	.word	0x20000b54
 8004f94:	08015cb0 	.word	0x08015cb0

08004f98 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8004fa2:	f107 030f 	add.w	r3, r7, #15
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	9200      	str	r2, [sp, #0]
 8004faa:	2275      	movs	r2, #117	; 0x75
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8c8 	bl	8005144 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b70      	cmp	r3, #112	; 0x70
 8004fb8:	d135      	bne.n	8005026 <MPU_begin+0x8e>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8004fba:	236b      	movs	r3, #107	; 0x6b
 8004fbc:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004fc2:	f107 030d 	add.w	r3, r7, #13
 8004fc6:	f107 020e 	add.w	r2, r7, #14
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f898 	bl	8005102 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8004fd2:	236a      	movs	r3, #106	; 0x6a
 8004fd4:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004fda:	f107 030d 	add.w	r3, r7, #13
 8004fde:	f107 020e 	add.w	r2, r7, #14
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f88c 	bl	8005102 <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8e1 	bl	80051bc <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005000:	461a      	mov	r2, r3
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f941 	bl	800528c <MPU_writeGyroFullScaleRange>

        // Set 41 Hz LPF in Config Register
        uint8_t addr = CONFIG;
 800500a:	231a      	movs	r3, #26
 800500c:	733b      	strb	r3, [r7, #12]
        uint8_t val = 0x03;
 800500e:	2303      	movs	r3, #3
 8005010:	72fb      	strb	r3, [r7, #11]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005012:	f107 030b 	add.w	r3, r7, #11
 8005016:	f107 020c 	add.w	r2, r7, #12
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f870 	bl	8005102 <MPU_REG_WRITE>

        return 1;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <MPU_begin+0x90>
    }
    else
    {
        return 0;
 8005026:	2300      	movs	r3, #0
    }
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 8005050:	2301      	movs	r3, #1
 8005052:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8005054:	2300      	movs	r3, #0
 8005056:	827b      	strh	r3, [r7, #18]
 8005058:	e01e      	b.n	8005098 <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f97f 	bl	8005360 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005068:	461a      	mov	r2, r3
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005076:	461a      	mov	r2, r3
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	4413      	add	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005084:	461a      	mov	r2, r3
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 800508c:	2003      	movs	r0, #3
 800508e:	f000 fdbd 	bl	8005c0c <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8005092:	8a7b      	ldrh	r3, [r7, #18]
 8005094:	3301      	adds	r3, #1
 8005096:	827b      	strh	r3, [r7, #18]
 8005098:	8a7a      	ldrh	r2, [r7, #18]
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	429a      	cmp	r2, r3
 800509e:	d3dc      	bcc.n	800505a <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroBias.x = (float)x / (float)numCalPoints;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroBias.y = (float)y / (float)numCalPoints;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroBias.z = (float)z / (float)numCalPoints;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 80050fa:	bf00      	nop
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
 800510e:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8005110:	2100      	movs	r1, #0
 8005112:	68b8      	ldr	r0, [r7, #8]
 8005114:	f000 f83e 	bl	8005194 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8005118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800511c:	2201      	movs	r2, #1
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f003 fb2a 	bl	800877a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8005126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800512a:	2201      	movs	r2, #1
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f003 fb23 	bl	800877a <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8005134:	2101      	movs	r1, #1
 8005136:	68b8      	ldr	r0, [r7, #8]
 8005138:	f000 f82c 	bl	8005194 <MPU_CS>
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8005154:	2100      	movs	r1, #0
 8005156:	68b8      	ldr	r0, [r7, #8]
 8005158:	f000 f81c 	bl	8005194 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005162:	b2db      	uxtb	r3, r3
 8005164:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8005166:	f107 0117 	add.w	r1, r7, #23
 800516a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800516e:	2201      	movs	r2, #1
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f003 fb02 	bl	800877a <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8005176:	8c3a      	ldrh	r2, [r7, #32]
 8005178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f003 fc69 	bl	8008a56 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8005184:	2101      	movs	r1, #1
 8005186:	68b8      	ldr	r0, [r7, #8]
 8005188:	f000 f804 	bl	8005194 <MPU_CS>
}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	4619      	mov	r1, r3
 80051ae:	f001 fbd9 	bl	8006964 <HAL_GPIO_WritePin>
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 80051ca:	231c      	movs	r3, #28
 80051cc:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d847      	bhi.n	8005264 <MPU_writeAccFullScaleRange+0xa8>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <MPU_writeAccFullScaleRange+0x20>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	08005229 	.word	0x08005229
 80051e8:	08005247 	.word	0x08005247
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80051f2:	615a      	str	r2, [r3, #20]
        val = 0x00;
 80051f4:	2300      	movs	r3, #0
 80051f6:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80051f8:	f107 0316 	add.w	r3, r7, #22
 80051fc:	f107 0217 	add.w	r2, r7, #23
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff ff7d 	bl	8005102 <MPU_REG_WRITE>
        break;
 8005208:	e03b      	b.n	8005282 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005210:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8005212:	2308      	movs	r3, #8
 8005214:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005216:	f107 0316 	add.w	r3, r7, #22
 800521a:	f107 0217 	add.w	r2, r7, #23
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7ff ff6e 	bl	8005102 <MPU_REG_WRITE>
        break;
 8005226:	e02c      	b.n	8005282 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800522e:	615a      	str	r2, [r3, #20]
        val = 0x10;
 8005230:	2310      	movs	r3, #16
 8005232:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005234:	f107 0316 	add.w	r3, r7, #22
 8005238:	f107 0217 	add.w	r2, r7, #23
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff ff5f 	bl	8005102 <MPU_REG_WRITE>
        break;
 8005244:	e01d      	b.n	8005282 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800524c:	615a      	str	r2, [r3, #20]
        val = 0x18;
 800524e:	2318      	movs	r3, #24
 8005250:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005252:	f107 0316 	add.w	r3, r7, #22
 8005256:	f107 0217 	add.w	r2, r7, #23
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff ff50 	bl	8005102 <MPU_REG_WRITE>
        break;
 8005262:	e00e      	b.n	8005282 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800526a:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800526c:	2308      	movs	r3, #8
 800526e:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005270:	f107 0316 	add.w	r3, r7, #22
 8005274:	f107 0217 	add.w	r2, r7, #23
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff ff41 	bl	8005102 <MPU_REG_WRITE>
        break;
 8005280:	bf00      	nop
    }
}
 8005282:	bf00      	nop
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop

0800528c <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800529a:	231b      	movs	r3, #27
 800529c:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d843      	bhi.n	800532c <MPU_writeGyroFullScaleRange+0xa0>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <MPU_writeGyroFullScaleRange+0x20>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052f5 	.word	0x080052f5
 80052b8:	08005311 	.word	0x08005311
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a24      	ldr	r2, [pc, #144]	; (8005350 <MPU_writeGyroFullScaleRange+0xc4>)
 80052c0:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x00;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80052c6:	f107 0316 	add.w	r3, r7, #22
 80052ca:	f107 0217 	add.w	r2, r7, #23
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff ff16 	bl	8005102 <MPU_REG_WRITE>
        break;
 80052d6:	e037      	b.n	8005348 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <MPU_writeGyroFullScaleRange+0xc8>)
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 80052de:	2308      	movs	r3, #8
 80052e0:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80052e2:	f107 0316 	add.w	r3, r7, #22
 80052e6:	f107 0217 	add.w	r2, r7, #23
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff ff08 	bl	8005102 <MPU_REG_WRITE>
        break;
 80052f2:	e029      	b.n	8005348 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <MPU_writeGyroFullScaleRange+0xcc>)
 80052f8:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x10;
 80052fa:	2310      	movs	r3, #16
 80052fc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80052fe:	f107 0316 	add.w	r3, r7, #22
 8005302:	f107 0217 	add.w	r2, r7, #23
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff fefa 	bl	8005102 <MPU_REG_WRITE>
        break;
 800530e:	e01b      	b.n	8005348 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a12      	ldr	r2, [pc, #72]	; (800535c <MPU_writeGyroFullScaleRange+0xd0>)
 8005314:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x18;
 8005316:	2318      	movs	r3, #24
 8005318:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800531a:	f107 0316 	add.w	r3, r7, #22
 800531e:	f107 0217 	add.w	r2, r7, #23
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff feec 	bl	8005102 <MPU_REG_WRITE>
        break;
 800532a:	e00d      	b.n	8005348 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <MPU_writeGyroFullScaleRange+0xc8>)
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
        val = 0x08;
 8005332:	2308      	movs	r3, #8
 8005334:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005336:	f107 0316 	add.w	r3, r7, #22
 800533a:	f107 0217 	add.w	r2, r7, #23
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff fede 	bl	8005102 <MPU_REG_WRITE>
        break;
 8005346:	bf00      	nop
    }
}
 8005348:	bf00      	nop
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	43030000 	.word	0x43030000
 8005354:	42830000 	.word	0x42830000
 8005358:	42033333 	.word	0x42033333
 800535c:	41833333 	.word	0x41833333

08005360 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08e      	sub	sp, #56	; 0x38
 8005364:	af02      	add	r7, sp, #8
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	2226      	movs	r2, #38	; 0x26
 8005370:	9200      	str	r2, [sp, #0]
 8005372:	223b      	movs	r2, #59	; 0x3b
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff fee4 	bl	8005144 <MPU_REG_READ>

    // IMPORTANT Coordinate system conversion!
    // buf[0-1] -> IC X axis -> Y Drone axis
    // buf[2-3] -> IC Y axis -> X Drone axis
    // buf[4-5] -> IC Z axis -> Z Drone axis
    pMPU9250->rawData.ay = (buf[0] << 8 | buf[1]);
 800537c:	7a3b      	ldrb	r3, [r7, #8]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	b21a      	sxth	r2, r3
 8005382:	7a7b      	ldrb	r3, [r7, #9]
 8005384:	b21b      	sxth	r3, r3
 8005386:	4313      	orrs	r3, r2
 8005388:	b21a      	sxth	r2, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.ax = (buf[2] << 8 | buf[3]);
 800538e:	7abb      	ldrb	r3, [r7, #10]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	b21a      	sxth	r2, r3
 8005394:	7afb      	ldrb	r3, [r7, #11]
 8005396:	b21b      	sxth	r3, r3
 8005398:	4313      	orrs	r3, r2
 800539a:	b21a      	sxth	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.az = (buf[4] << 8 | buf[5]);
 80053a0:	7b3b      	ldrb	r3, [r7, #12]
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	b21a      	sxth	r2, r3
 80053a6:	7b7b      	ldrb	r3, [r7, #13]
 80053a8:	b21b      	sxth	r3, r3
 80053aa:	4313      	orrs	r3, r2
 80053ac:	b21a      	sxth	r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 80053b2:	7bbb      	ldrb	r3, [r7, #14]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	b21a      	sxth	r2, r3
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	b21b      	sxth	r3, r3
 80053bc:	4313      	orrs	r3, r2
 80053be:	b21a      	sxth	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	80da      	strh	r2, [r3, #6]

    // IMPORTANT Coordinate system conversion!
    // buf[ 8- 9] -> IC X axis -> -Y Drone axis
	// buf[10-11] -> IC Y axis -> -X Drone axis
	// buf[12-13] -> IC Z axis -> -Z Drone axis
    pMPU9250->rawData.gy = -(buf[8] << 8 | buf[9]);
 80053c4:	7c3b      	ldrb	r3, [r7, #16]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	b21a      	sxth	r2, r3
 80053ca:	7c7b      	ldrb	r3, [r7, #17]
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	425b      	negs	r3, r3
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	b21a      	sxth	r2, r3
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gx = -(buf[10] << 8 | buf[11]);
 80053de:	7cbb      	ldrb	r3, [r7, #18]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	b21a      	sxth	r2, r3
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	b21b      	sxth	r3, r3
 80053e8:	4313      	orrs	r3, r2
 80053ea:	b21b      	sxth	r3, r3
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	425b      	negs	r3, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = -(buf[12] << 8 | buf[13]);
 80053f8:	7d3b      	ldrb	r3, [r7, #20]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	b21a      	sxth	r2, r3
 80053fe:	7d7b      	ldrb	r3, [r7, #21]
 8005400:	b21b      	sxth	r3, r3
 8005402:	4313      	orrs	r3, r2
 8005404:	b21b      	sxth	r3, r3
 8005406:	b29b      	uxth	r3, r3
 8005408:	425b      	negs	r3, r3
 800540a:	b29b      	uxth	r3, r3
 800540c:	b21a      	sxth	r2, r3
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 8005412:	bf00      	nop
 8005414:	3730      	adds	r7, #48	; 0x30
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	0000      	movs	r0, r0
 800541c:	0000      	movs	r0, r0
	...

08005420 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff ff97 	bl	8005360 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	ed93 7a05 	vldr	s14, [r3, #20]
 8005446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	ed93 7a05 	vldr	s14, [r3, #20]
 8005464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	edc3 7a08 	vstr	s15, [r3, #32]

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = (pMPU9250->rawData.temp - 0) / TEMP_SENS + 21;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005492:	4618      	mov	r0, r3
 8005494:	f7fb f86e 	bl	8000574 <__aeabi_i2d>
 8005498:	a336      	add	r3, pc, #216	; (adr r3, 8005574 <MPU_readProcessedData+0x154>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f9fd 	bl	800089c <__aeabi_ddiv>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	4b30      	ldr	r3, [pc, #192]	; (8005570 <MPU_readProcessedData+0x150>)
 80054b0:	f7fa ff14 	bl	80002dc <__adddf3>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4610      	mov	r0, r2
 80054ba:	4619      	mov	r1, r3
 80054bc:	f7fb fbbc 	bl	8000c38 <__aeabi_d2f>
 80054c0:	4602      	mov	r2, r0
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

    // Compensate for gyro bias
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroBias.x;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80054da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroBias.y;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80054f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroBias.z;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005508:	ee07 3a90 	vmov	s15, r3
 800550c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800552c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w
 8005570:	40350000 	.word	0x40350000
 8005574:	851eb852 	.word	0x851eb852
 8005578:	4074ddeb 	.word	0x4074ddeb
 800557c:	00000000 	.word	0x00000000

08005580 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8005580:	b5b0      	push	{r4, r5, r7, lr}
 8005582:	ed2d 8b02 	vpush	{d8}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
    // Read processed data
    MPU_readProcessedData(SPIx, pMPU9250);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ff45 	bl	8005420 <MPU_readProcessedData>

    // Complementary filter
    float accelRoll = atan2f(pMPU9250->sensorData.ay, sqrt(pow(pMPU9250->sensorData.ax,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	ed93 8a07 	vldr	s16, [r3, #28]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fa fff9 	bl	8000598 <__aeabi_f2d>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	ed9f 1b89 	vldr	d1, [pc, #548]	; 80057d0 <MPU_calcAttitude+0x250>
 80055ae:	ec43 2b10 	vmov	d0, r2, r3
 80055b2:	f00f f86d 	bl	8014690 <pow>
 80055b6:	ec55 4b10 	vmov	r4, r5, d0
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fa ffea 	bl	8000598 <__aeabi_f2d>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	ed9f 1b81 	vldr	d1, [pc, #516]	; 80057d0 <MPU_calcAttitude+0x250>
 80055cc:	ec43 2b10 	vmov	d0, r2, r3
 80055d0:	f00f f85e 	bl	8014690 <pow>
 80055d4:	ec53 2b10 	vmov	r2, r3, d0
 80055d8:	4620      	mov	r0, r4
 80055da:	4629      	mov	r1, r5
 80055dc:	f7fa fe7e 	bl	80002dc <__adddf3>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	ec43 2b17 	vmov	d7, r2, r3
 80055e8:	eeb0 0a47 	vmov.f32	s0, s14
 80055ec:	eef0 0a67 	vmov.f32	s1, s15
 80055f0:	f00f f8be 	bl	8014770 <sqrt>
 80055f4:	ec53 2b10 	vmov	r2, r3, d0
 80055f8:	4610      	mov	r0, r2
 80055fa:	4619      	mov	r1, r3
 80055fc:	f7fb fb1c 	bl	8000c38 <__aeabi_d2f>
 8005600:	4603      	mov	r3, r0
 8005602:	ee00 3a90 	vmov	s1, r3
 8005606:	eeb0 0a48 	vmov.f32	s0, s16
 800560a:	f00f f8dd 	bl	80147c8 <atan2f>
 800560e:	ee10 3a10 	vmov	r3, s0
 8005612:	4618      	mov	r0, r3
 8005614:	f7fa ffc0 	bl	8000598 <__aeabi_f2d>
 8005618:	a370      	add	r3, pc, #448	; (adr r3, 80057dc <MPU_calcAttitude+0x25c>)
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f7fb f813 	bl	8000648 <__aeabi_dmul>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	f7fb fb05 	bl	8000c38 <__aeabi_d2f>
 800562e:	4603      	mov	r3, r0
 8005630:	617b      	str	r3, [r7, #20]
    float accelPitch = atan2f(-(pMPU9250->sensorData.ax), sqrt(pow(pMPU9250->sensorData.ay,2) + pow(pMPU9250->sensorData.az,2))) * RAD2DEG;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	edd3 7a06 	vldr	s15, [r3, #24]
 8005638:	eeb1 8a67 	vneg.f32	s16, s15
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	4618      	mov	r0, r3
 8005642:	f7fa ffa9 	bl	8000598 <__aeabi_f2d>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	ed9f 1b61 	vldr	d1, [pc, #388]	; 80057d0 <MPU_calcAttitude+0x250>
 800564e:	ec43 2b10 	vmov	d0, r2, r3
 8005652:	f00f f81d 	bl	8014690 <pow>
 8005656:	ec55 4b10 	vmov	r4, r5, d0
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fa ff9a 	bl	8000598 <__aeabi_f2d>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	ed9f 1b59 	vldr	d1, [pc, #356]	; 80057d0 <MPU_calcAttitude+0x250>
 800566c:	ec43 2b10 	vmov	d0, r2, r3
 8005670:	f00f f80e 	bl	8014690 <pow>
 8005674:	ec53 2b10 	vmov	r2, r3, d0
 8005678:	4620      	mov	r0, r4
 800567a:	4629      	mov	r1, r5
 800567c:	f7fa fe2e 	bl	80002dc <__adddf3>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	ec43 2b17 	vmov	d7, r2, r3
 8005688:	eeb0 0a47 	vmov.f32	s0, s14
 800568c:	eef0 0a67 	vmov.f32	s1, s15
 8005690:	f00f f86e 	bl	8014770 <sqrt>
 8005694:	ec53 2b10 	vmov	r2, r3, d0
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	f7fb facc 	bl	8000c38 <__aeabi_d2f>
 80056a0:	4603      	mov	r3, r0
 80056a2:	ee00 3a90 	vmov	s1, r3
 80056a6:	eeb0 0a48 	vmov.f32	s0, s16
 80056aa:	f00f f88d 	bl	80147c8 <atan2f>
 80056ae:	ee10 3a10 	vmov	r3, s0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fa ff70 	bl	8000598 <__aeabi_f2d>
 80056b8:	a348      	add	r3, pc, #288	; (adr r3, 80057dc <MPU_calcAttitude+0x25c>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa ffc3 	bl	8000648 <__aeabi_dmul>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4610      	mov	r0, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	f7fb fab5 	bl	8000c38 <__aeabi_d2f>
 80056ce:	4603      	mov	r3, r0
 80056d0:	613b      	str	r3, [r7, #16]

    // Calculating dt
    uint32_t currentTick = xTaskGetTickCount();
 80056d2:	f008 fe03 	bl	800e2dc <xTaskGetTickCount>
 80056d6:	4603      	mov	r3, r0
 80056d8:	60fb      	str	r3, [r7, #12]
    if (pMPU9250->attitude.lastTick == 0 && pMPU9250->attitude.dt == 0)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d107      	bne.n	80056f2 <MPU_calcAttitude+0x172>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80056e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	d00e      	beq.n	8005710 <MPU_calcAttitude+0x190>
    	{}
    else
    	pMPU9250->attitude.dt = (currentTick - pMPU9250->attitude.lastTick) / 1000.0f;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005702:	eddf 6a35 	vldr	s13, [pc, #212]	; 80057d8 <MPU_calcAttitude+0x258>
 8005706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    pMPU9250->attitude.lastTick = currentTick;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	655a      	str	r2, [r3, #84]	; 0x54

    //pMPU9250->attitude.roll += (pMPU9250->sensorData.gx * pMPU9250->attitude.dt);
    pMPU9250->attitude.roll = pMPU9250->attitude.tau * (pMPU9250->attitude.roll + pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelRoll;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800572e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005744:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005748:	edd7 7a05 	vldr	s15, [r7, #20]
 800574c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    //pMPU9250->attitude.pitch += (pMPU9250->sensorData.gy * pMPU9250->attitude.dt);
    pMPU9250->attitude.pitch = pMPU9250->attitude.tau * (pMPU9250->attitude.pitch + pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1.0f - pMPU9250->attitude.tau) * accelPitch;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005772:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005788:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800578c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    pMPU9250->attitude.yaw += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80057b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 80057be:	bf00      	nop
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	ecbd 8b02 	vpop	{d8}
 80057c8:	bdb0      	pop	{r4, r5, r7, pc}
 80057ca:	bf00      	nop
 80057cc:	f3af 8000 	nop.w
 80057d0:	00000000 	.word	0x00000000
 80057d4:	40000000 	.word	0x40000000
 80057d8:	447a0000 	.word	0x447a0000
 80057dc:	1a63cbb0 	.word	0x1a63cbb0
 80057e0:	404ca5dc 	.word	0x404ca5dc

080057e4 <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a21      	ldr	r2, [pc, #132]	; (8005878 <HCSR04_Init+0x94>)
 80057f2:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80057fa:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM3;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a1f      	ldr	r2, [pc, #124]	; (800587c <HCSR04_Init+0x98>)
 8005800:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 108;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	226c      	movs	r2, #108	; 0x6c
 800580c:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005824:	e019      	b.n	800585a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d104      	bne.n	8005838 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005836:	e010      	b.n	800585a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b08      	cmp	r3, #8
 800583e:	d104      	bne.n	800584a <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2204      	movs	r2, #4
 8005844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005848:	e007      	b.n	800585a <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b0c      	cmp	r3, #12
 8005850:	d103      	bne.n	800585a <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2208      	movs	r2, #8
 8005856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 800585a:	6838      	ldr	r0, [r7, #0]
 800585c:	f003 fe9a 	bl	8009594 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4619      	mov	r1, r3
 8005866:	6838      	ldr	r0, [r7, #0]
 8005868:	f004 f8c0 	bl	80099ec <HAL_TIM_IC_Start_IT>

	return 0;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40020c00 	.word	0x40020c00
 800587c:	40000400 	.word	0x40000400

08005880 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	429a      	cmp	r2, r3
 8005898:	f040 812e 	bne.w	8005af8 <HCSR04_TMR_IC_ISR+0x278>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	7f1a      	ldrb	r2, [r3, #28]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058a6:	429a      	cmp	r2, r3
 80058a8:	f040 8126 	bne.w	8005af8 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	7d5b      	ldrb	r3, [r3, #21]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d16d      	bne.n	8005990 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4619      	mov	r1, r3
 80058ba:	6838      	ldr	r0, [r7, #0]
 80058bc:	f004 fd80 	bl	800a3c0 <HAL_TIM_ReadCapturedValue>
 80058c0:	4602      	mov	r2, r0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <HCSR04_TMR_IC_ISR+0x66>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a1a      	ldr	r2, [r3, #32]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 020a 	bic.w	r2, r2, #10
 80058e2:	621a      	str	r2, [r3, #32]
 80058e4:	e021      	b.n	800592a <HCSR04_TMR_IC_ISR+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d108      	bne.n	8005900 <HCSR04_TMR_IC_ISR+0x80>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058fc:	6213      	str	r3, [r2, #32]
 80058fe:	e014      	b.n	800592a <HCSR04_TMR_IC_ISR+0xaa>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d108      	bne.n	800591a <HCSR04_TMR_IC_ISR+0x9a>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005916:	6213      	str	r3, [r2, #32]
 8005918:	e007      	b.n	800592a <HCSR04_TMR_IC_ISR+0xaa>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005928:	6213      	str	r3, [r2, #32]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d108      	bne.n	8005944 <HCSR04_TMR_IC_ISR+0xc4>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0202 	orr.w	r2, r2, #2
 8005940:	621a      	str	r2, [r3, #32]
 8005942:	e021      	b.n	8005988 <HCSR04_TMR_IC_ISR+0x108>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	2b04      	cmp	r3, #4
 800594a:	d108      	bne.n	800595e <HCSR04_TMR_IC_ISR+0xde>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	f043 0320 	orr.w	r3, r3, #32
 800595a:	6213      	str	r3, [r2, #32]
 800595c:	e014      	b.n	8005988 <HCSR04_TMR_IC_ISR+0x108>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b08      	cmp	r3, #8
 8005964:	d108      	bne.n	8005978 <HCSR04_TMR_IC_ISR+0xf8>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005974:	6213      	str	r3, [r2, #32]
 8005976:	e007      	b.n	8005988 <HCSR04_TMR_IC_ISR+0x108>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005986:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 800598e:	e0b3      	b.n	8005af8 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	7d5b      	ldrb	r3, [r3, #21]
 8005994:	2b01      	cmp	r3, #1
 8005996:	f040 80af 	bne.w	8005af8 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4619      	mov	r1, r3
 80059b2:	6838      	ldr	r0, [r7, #0]
 80059b4:	f004 fd04 	bl	800a3c0 <HAL_TIM_ReadCapturedValue>
 80059b8:	4602      	mov	r2, r0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1a      	ldr	r2, [r3, #32]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d207      	bcs.n	80059da <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	1ad2      	subs	r2, r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
 80059d8:	e00f      	b.n	80059fa <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d209      	bcs.n	80059fa <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059f4:	4413      	add	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a06:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005b00 <HCSR04_TMR_IC_ISR+0x280>
 8005a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a0e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005b04 <HCSR04_TMR_IC_ISR+0x284>
 8005a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a16:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005a1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <HCSR04_TMR_IC_ISR+0x1dc>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a1a      	ldr	r2, [r3, #32]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 020a 	bic.w	r2, r2, #10
 8005a58:	621a      	str	r2, [r3, #32]
 8005a5a:	e021      	b.n	8005aa0 <HCSR04_TMR_IC_ISR+0x220>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d108      	bne.n	8005a76 <HCSR04_TMR_IC_ISR+0x1f6>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a72:	6213      	str	r3, [r2, #32]
 8005a74:	e014      	b.n	8005aa0 <HCSR04_TMR_IC_ISR+0x220>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d108      	bne.n	8005a90 <HCSR04_TMR_IC_ISR+0x210>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a8c:	6213      	str	r3, [r2, #32]
 8005a8e:	e007      	b.n	8005aa0 <HCSR04_TMR_IC_ISR+0x220>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a9e:	6213      	str	r3, [r2, #32]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <HCSR04_TMR_IC_ISR+0x236>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a12      	ldr	r2, [r2, #32]
 8005ab2:	621a      	str	r2, [r3, #32]
 8005ab4:	e01b      	b.n	8005aee <HCSR04_TMR_IC_ISR+0x26e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d106      	bne.n	8005acc <HCSR04_TMR_IC_ISR+0x24c>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	6213      	str	r3, [r2, #32]
 8005aca:	e010      	b.n	8005aee <HCSR04_TMR_IC_ISR+0x26e>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d106      	bne.n	8005ae2 <HCSR04_TMR_IC_ISR+0x262>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	6213      	str	r3, [r2, #32]
 8005ae0:	e005      	b.n	8005aee <HCSR04_TMR_IC_ISR+0x26e>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HCSR04_TMR_IC_ISR+0x288>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f007 f95e 	bl	800cdb4 <osSemaphoreRelease>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	447a0000 	.word	0x447a0000
 8005b04:	43aa0000 	.word	0x43aa0000
 8005b08:	20000c70 	.word	0x20000c70

08005b0c <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	889b      	ldrh	r3, [r3, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f000 ff20 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005b24:	2001      	movs	r0, #1
 8005b26:	f000 f871 	bl	8005c0c <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	889b      	ldrh	r3, [r3, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	4619      	mov	r1, r3
 8005b36:	f000 ff15 	bl	8006964 <HAL_GPIO_WritePin>
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	ee07 3a90 	vmov	s15, r3
}
 8005b52:	eeb0 0a67 	vmov.f32	s0, s15
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8005b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b64:	480d      	ldr	r0, [pc, #52]	; (8005b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b66:	490e      	ldr	r1, [pc, #56]	; (8005ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b68:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b6c:	e002      	b.n	8005b74 <LoopCopyDataInit>

08005b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b72:	3304      	adds	r3, #4

08005b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b78:	d3f9      	bcc.n	8005b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b7c:	4c0b      	ldr	r4, [pc, #44]	; (8005bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b80:	e001      	b.n	8005b86 <LoopFillZerobss>

08005b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b84:	3204      	adds	r2, #4

08005b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b88:	d3fb      	bcc.n	8005b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b8a:	f7fe f803 	bl	8003b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b8e:	f00a fda7 	bl	80106e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b92:	f7fc fde7 	bl	8002764 <main>
  bx  lr    
 8005b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b98:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8005b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ba0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005ba4:	080161d8 	.word	0x080161d8
  ldr r2, =_sbss
 8005ba8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005bac:	20004b68 	.word	0x20004b68

08005bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bb0:	e7fe      	b.n	8005bb0 <ADC_IRQHandler>

08005bb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bb6:	2003      	movs	r0, #3
 8005bb8:	f000 f8f9 	bl	8005dae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bbc:	200f      	movs	r0, #15
 8005bbe:	f7fd fe61 	bl	8003884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bc2:	f7fd fb8f 	bl	80032e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_IncTick+0x20>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_IncTick+0x24>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4413      	add	r3, r2
 8005bdc:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <HAL_IncTick+0x24>)
 8005bde:	6013      	str	r3, [r2, #0]
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000010 	.word	0x20000010
 8005bf0:	20000ccc 	.word	0x20000ccc

08005bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_GetTick+0x14>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000ccc 	.word	0x20000ccc

08005c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c14:	f7ff ffee 	bl	8005bf4 <HAL_GetTick>
 8005c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d005      	beq.n	8005c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_Delay+0x44>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c32:	bf00      	nop
 8005c34:	f7ff ffde 	bl	8005bf4 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d8f7      	bhi.n	8005c34 <HAL_Delay+0x28>
  {
  }
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000010 	.word	0x20000010

08005c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <__NVIC_SetPriorityGrouping+0x40>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c70:	4013      	ands	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <__NVIC_SetPriorityGrouping+0x44>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c82:	4a04      	ldr	r2, [pc, #16]	; (8005c94 <__NVIC_SetPriorityGrouping+0x40>)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	60d3      	str	r3, [r2, #12]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	e000ed00 	.word	0xe000ed00
 8005c98:	05fa0000 	.word	0x05fa0000

08005c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	0a1b      	lsrs	r3, r3, #8
 8005ca6:	f003 0307 	and.w	r3, r3, #7
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db0b      	blt.n	8005ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	f003 021f 	and.w	r2, r3, #31
 8005cd0:	4907      	ldr	r1, [pc, #28]	; (8005cf0 <__NVIC_EnableIRQ+0x38>)
 8005cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2001      	movs	r0, #1
 8005cda:	fa00 f202 	lsl.w	r2, r0, r2
 8005cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000e100 	.word	0xe000e100

08005cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	db0a      	blt.n	8005d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	490c      	ldr	r1, [pc, #48]	; (8005d40 <__NVIC_SetPriority+0x4c>)
 8005d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d12:	0112      	lsls	r2, r2, #4
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	440b      	add	r3, r1
 8005d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d1c:	e00a      	b.n	8005d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	4908      	ldr	r1, [pc, #32]	; (8005d44 <__NVIC_SetPriority+0x50>)
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3b04      	subs	r3, #4
 8005d2c:	0112      	lsls	r2, r2, #4
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	440b      	add	r3, r1
 8005d32:	761a      	strb	r2, [r3, #24]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000e100 	.word	0xe000e100
 8005d44:	e000ed00 	.word	0xe000ed00

08005d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f1c3 0307 	rsb	r3, r3, #7
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	bf28      	it	cs
 8005d66:	2304      	movcs	r3, #4
 8005d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d902      	bls.n	8005d78 <NVIC_EncodePriority+0x30>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3b03      	subs	r3, #3
 8005d76:	e000      	b.n	8005d7a <NVIC_EncodePriority+0x32>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43da      	mvns	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d90:	f04f 31ff 	mov.w	r1, #4294967295
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	43d9      	mvns	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da0:	4313      	orrs	r3, r2
         );
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3724      	adds	r7, #36	; 0x24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff ff4c 	bl	8005c54 <__NVIC_SetPriorityGrouping>
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dd6:	f7ff ff61 	bl	8005c9c <__NVIC_GetPriorityGrouping>
 8005dda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f7ff ffb1 	bl	8005d48 <NVIC_EncodePriority>
 8005de6:	4602      	mov	r2, r0
 8005de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff ff80 	bl	8005cf4 <__NVIC_SetPriority>
}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff ff54 	bl	8005cb8 <__NVIC_EnableIRQ>
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e24:	f7ff fee6 	bl	8005bf4 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e099      	b.n	8005f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e54:	e00f      	b.n	8005e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e56:	f7ff fecd 	bl	8005bf4 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b05      	cmp	r3, #5
 8005e62:	d908      	bls.n	8005e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e078      	b.n	8005f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e8      	bne.n	8005e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4b38      	ldr	r3, [pc, #224]	; (8005f70 <HAL_DMA_Init+0x158>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d107      	bne.n	8005ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0307 	bic.w	r3, r3, #7
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d117      	bne.n	8005f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fb09 	bl	8006534 <DMA_CheckFifoParam>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2240      	movs	r2, #64	; 0x40
 8005f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f36:	2301      	movs	r3, #1
 8005f38:	e016      	b.n	8005f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fac0 	bl	80064c8 <DMA_CalcBaseAndBitshift>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f50:	223f      	movs	r2, #63	; 0x3f
 8005f52:	409a      	lsls	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	e010803f 	.word	0xe010803f

08005f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_DMA_Start_IT+0x26>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e048      	b.n	800602c <HAL_DMA_Start_IT+0xb8>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d137      	bne.n	800601e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fa52 	bl	800646c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	223f      	movs	r2, #63	; 0x3f
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0216 	orr.w	r2, r2, #22
 8005fe2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ff2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0208 	orr.w	r2, r2, #8
 800600a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e005      	b.n	800602a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006026:	2302      	movs	r3, #2
 8006028:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006042:	f7ff fdd7 	bl	8005bf4 <HAL_GetTick>
 8006046:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d008      	beq.n	8006066 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e052      	b.n	800610c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0216 	bic.w	r2, r2, #22
 8006074:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695a      	ldr	r2, [r3, #20]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006084:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <HAL_DMA_Abort+0x62>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0208 	bic.w	r2, r2, #8
 80060a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060b6:	e013      	b.n	80060e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060b8:	f7ff fd9c 	bl	8005bf4 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d90c      	bls.n	80060e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2203      	movs	r2, #3
 80060d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e015      	b.n	800610c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e4      	bne.n	80060b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	223f      	movs	r2, #63	; 0x3f
 80060f4:	409a      	lsls	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d004      	beq.n	8006132 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2280      	movs	r2, #128	; 0x80
 800612c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e00c      	b.n	800614c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2205      	movs	r2, #5
 8006136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006164:	4b8e      	ldr	r3, [pc, #568]	; (80063a0 <HAL_DMA_IRQHandler+0x248>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a8e      	ldr	r2, [pc, #568]	; (80063a4 <HAL_DMA_IRQHandler+0x24c>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	0a9b      	lsrs	r3, r3, #10
 8006170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006182:	2208      	movs	r2, #8
 8006184:	409a      	lsls	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01a      	beq.n	80061c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d013      	beq.n	80061c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0204 	bic.w	r2, r2, #4
 80061aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b0:	2208      	movs	r2, #8
 80061b2:	409a      	lsls	r2, r3
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061bc:	f043 0201 	orr.w	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c8:	2201      	movs	r2, #1
 80061ca:	409a      	lsls	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d012      	beq.n	80061fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e6:	2201      	movs	r2, #1
 80061e8:	409a      	lsls	r2, r3
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	f043 0202 	orr.w	r2, r3, #2
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fe:	2204      	movs	r2, #4
 8006200:	409a      	lsls	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4013      	ands	r3, r2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d012      	beq.n	8006230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621c:	2204      	movs	r2, #4
 800621e:	409a      	lsls	r2, r3
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006228:	f043 0204 	orr.w	r2, r3, #4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	2210      	movs	r2, #16
 8006236:	409a      	lsls	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d043      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d03c      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006252:	2210      	movs	r2, #16
 8006254:	409a      	lsls	r2, r3
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d018      	beq.n	800629a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d108      	bne.n	8006288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d024      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
 8006286:	e01f      	b.n	80062c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
 8006298:	e016      	b.n	80062c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d107      	bne.n	80062b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0208 	bic.w	r2, r2, #8
 80062b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062cc:	2220      	movs	r2, #32
 80062ce:	409a      	lsls	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 808f 	beq.w	80063f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8087 	beq.w	80063f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ee:	2220      	movs	r2, #32
 80062f0:	409a      	lsls	r2, r3
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d136      	bne.n	8006370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0216 	bic.w	r2, r2, #22
 8006310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <HAL_DMA_IRQHandler+0x1da>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0208 	bic.w	r2, r2, #8
 8006340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006346:	223f      	movs	r2, #63	; 0x3f
 8006348:	409a      	lsls	r2, r3
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	2b00      	cmp	r3, #0
 8006364:	d07e      	beq.n	8006464 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
        }
        return;
 800636e:	e079      	b.n	8006464 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01d      	beq.n	80063ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10d      	bne.n	80063a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006390:	2b00      	cmp	r3, #0
 8006392:	d031      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
 800639c:	e02c      	b.n	80063f8 <HAL_DMA_IRQHandler+0x2a0>
 800639e:	bf00      	nop
 80063a0:	20000008 	.word	0x20000008
 80063a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d023      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
 80063b8:	e01e      	b.n	80063f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10f      	bne.n	80063e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0210 	bic.w	r2, r2, #16
 80063d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d032      	beq.n	8006466 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d022      	beq.n	8006452 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2205      	movs	r2, #5
 8006410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	3301      	adds	r3, #1
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	429a      	cmp	r2, r3
 800642e:	d307      	bcc.n	8006440 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f2      	bne.n	8006424 <HAL_DMA_IRQHandler+0x2cc>
 800643e:	e000      	b.n	8006442 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006440:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
 8006462:	e000      	b.n	8006466 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006464:	bf00      	nop
    }
  }
}
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006488:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d108      	bne.n	80064ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80064aa:	e007      	b.n	80064bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	60da      	str	r2, [r3, #12]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	3b10      	subs	r3, #16
 80064d8:	4a13      	ldr	r2, [pc, #76]	; (8006528 <DMA_CalcBaseAndBitshift+0x60>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	091b      	lsrs	r3, r3, #4
 80064e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80064e2:	4a12      	ldr	r2, [pc, #72]	; (800652c <DMA_CalcBaseAndBitshift+0x64>)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d908      	bls.n	8006508 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <DMA_CalcBaseAndBitshift+0x68>)
 80064fe:	4013      	ands	r3, r2
 8006500:	1d1a      	adds	r2, r3, #4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	659a      	str	r2, [r3, #88]	; 0x58
 8006506:	e006      	b.n	8006516 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	4b08      	ldr	r3, [pc, #32]	; (8006530 <DMA_CalcBaseAndBitshift+0x68>)
 8006510:	4013      	ands	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	aaaaaaab 	.word	0xaaaaaaab
 800652c:	08015d0c 	.word	0x08015d0c
 8006530:	fffffc00 	.word	0xfffffc00

08006534 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d11f      	bne.n	800658e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d856      	bhi.n	8006602 <DMA_CheckFifoParam+0xce>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <DMA_CheckFifoParam+0x28>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	0800656d 	.word	0x0800656d
 8006560:	0800657f 	.word	0x0800657f
 8006564:	0800656d 	.word	0x0800656d
 8006568:	08006603 	.word	0x08006603
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d046      	beq.n	8006606 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800657c:	e043      	b.n	8006606 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006586:	d140      	bne.n	800660a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800658c:	e03d      	b.n	800660a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006596:	d121      	bne.n	80065dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b03      	cmp	r3, #3
 800659c:	d837      	bhi.n	800660e <DMA_CheckFifoParam+0xda>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <DMA_CheckFifoParam+0x70>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065b5 	.word	0x080065b5
 80065a8:	080065bb 	.word	0x080065bb
 80065ac:	080065b5 	.word	0x080065b5
 80065b0:	080065cd 	.word	0x080065cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e030      	b.n	800661c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d025      	beq.n	8006612 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ca:	e022      	b.n	8006612 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065d4:	d11f      	bne.n	8006616 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80065da:	e01c      	b.n	8006616 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d903      	bls.n	80065ea <DMA_CheckFifoParam+0xb6>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d003      	beq.n	80065f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80065e8:	e018      	b.n	800661c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	73fb      	strb	r3, [r7, #15]
      break;
 80065ee:	e015      	b.n	800661c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00e      	beq.n	800661a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006600:	e00b      	b.n	800661a <DMA_CheckFifoParam+0xe6>
      break;
 8006602:	bf00      	nop
 8006604:	e00a      	b.n	800661c <DMA_CheckFifoParam+0xe8>
      break;
 8006606:	bf00      	nop
 8006608:	e008      	b.n	800661c <DMA_CheckFifoParam+0xe8>
      break;
 800660a:	bf00      	nop
 800660c:	e006      	b.n	800661c <DMA_CheckFifoParam+0xe8>
      break;
 800660e:	bf00      	nop
 8006610:	e004      	b.n	800661c <DMA_CheckFifoParam+0xe8>
      break;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <DMA_CheckFifoParam+0xe8>
      break;   
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <DMA_CheckFifoParam+0xe8>
      break;
 800661a:	bf00      	nop
    }
  } 
  
  return status; 
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop

0800662c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800662c:	b480      	push	{r7}
 800662e:	b089      	sub	sp, #36	; 0x24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006642:	2300      	movs	r3, #0
 8006644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	e169      	b.n	8006920 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800664c:	2201      	movs	r2, #1
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4013      	ands	r3, r2
 800665e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	429a      	cmp	r2, r3
 8006666:	f040 8158 	bne.w	800691a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d005      	beq.n	8006682 <HAL_GPIO_Init+0x56>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d130      	bne.n	80066e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	2203      	movs	r2, #3
 800668e:	fa02 f303 	lsl.w	r3, r2, r3
 8006692:	43db      	mvns	r3, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4013      	ands	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066b8:	2201      	movs	r2, #1
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	4013      	ands	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 0201 	and.w	r2, r3, #1
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d017      	beq.n	8006720 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	2203      	movs	r2, #3
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	43db      	mvns	r3, r3
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4013      	ands	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	4313      	orrs	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d123      	bne.n	8006774 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	08da      	lsrs	r2, r3, #3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3208      	adds	r2, #8
 8006734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	220f      	movs	r2, #15
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	43db      	mvns	r3, r3
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	4013      	ands	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4313      	orrs	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	08da      	lsrs	r2, r3, #3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3208      	adds	r2, #8
 800676e:	69b9      	ldr	r1, [r7, #24]
 8006770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	2203      	movs	r2, #3
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	43db      	mvns	r3, r3
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	4013      	ands	r3, r2
 800678a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f003 0203 	and.w	r2, r3, #3
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4313      	orrs	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80b2 	beq.w	800691a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b6:	4b60      	ldr	r3, [pc, #384]	; (8006938 <HAL_GPIO_Init+0x30c>)
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	4a5f      	ldr	r2, [pc, #380]	; (8006938 <HAL_GPIO_Init+0x30c>)
 80067bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067c0:	6453      	str	r3, [r2, #68]	; 0x44
 80067c2:	4b5d      	ldr	r3, [pc, #372]	; (8006938 <HAL_GPIO_Init+0x30c>)
 80067c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80067ce:	4a5b      	ldr	r2, [pc, #364]	; (800693c <HAL_GPIO_Init+0x310>)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	089b      	lsrs	r3, r3, #2
 80067d4:	3302      	adds	r3, #2
 80067d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	220f      	movs	r2, #15
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4013      	ands	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a52      	ldr	r2, [pc, #328]	; (8006940 <HAL_GPIO_Init+0x314>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d02b      	beq.n	8006852 <HAL_GPIO_Init+0x226>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a51      	ldr	r2, [pc, #324]	; (8006944 <HAL_GPIO_Init+0x318>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d025      	beq.n	800684e <HAL_GPIO_Init+0x222>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a50      	ldr	r2, [pc, #320]	; (8006948 <HAL_GPIO_Init+0x31c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01f      	beq.n	800684a <HAL_GPIO_Init+0x21e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a4f      	ldr	r2, [pc, #316]	; (800694c <HAL_GPIO_Init+0x320>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d019      	beq.n	8006846 <HAL_GPIO_Init+0x21a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a4e      	ldr	r2, [pc, #312]	; (8006950 <HAL_GPIO_Init+0x324>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <HAL_GPIO_Init+0x216>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a4d      	ldr	r2, [pc, #308]	; (8006954 <HAL_GPIO_Init+0x328>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00d      	beq.n	800683e <HAL_GPIO_Init+0x212>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a4c      	ldr	r2, [pc, #304]	; (8006958 <HAL_GPIO_Init+0x32c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <HAL_GPIO_Init+0x20e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a4b      	ldr	r2, [pc, #300]	; (800695c <HAL_GPIO_Init+0x330>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d101      	bne.n	8006836 <HAL_GPIO_Init+0x20a>
 8006832:	2307      	movs	r3, #7
 8006834:	e00e      	b.n	8006854 <HAL_GPIO_Init+0x228>
 8006836:	2308      	movs	r3, #8
 8006838:	e00c      	b.n	8006854 <HAL_GPIO_Init+0x228>
 800683a:	2306      	movs	r3, #6
 800683c:	e00a      	b.n	8006854 <HAL_GPIO_Init+0x228>
 800683e:	2305      	movs	r3, #5
 8006840:	e008      	b.n	8006854 <HAL_GPIO_Init+0x228>
 8006842:	2304      	movs	r3, #4
 8006844:	e006      	b.n	8006854 <HAL_GPIO_Init+0x228>
 8006846:	2303      	movs	r3, #3
 8006848:	e004      	b.n	8006854 <HAL_GPIO_Init+0x228>
 800684a:	2302      	movs	r3, #2
 800684c:	e002      	b.n	8006854 <HAL_GPIO_Init+0x228>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <HAL_GPIO_Init+0x228>
 8006852:	2300      	movs	r3, #0
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	f002 0203 	and.w	r2, r2, #3
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	4093      	lsls	r3, r2
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4313      	orrs	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006864:	4935      	ldr	r1, [pc, #212]	; (800693c <HAL_GPIO_Init+0x310>)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	089b      	lsrs	r3, r3, #2
 800686a:	3302      	adds	r3, #2
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006872:	4b3b      	ldr	r3, [pc, #236]	; (8006960 <HAL_GPIO_Init+0x334>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	43db      	mvns	r3, r3
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	4013      	ands	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006896:	4a32      	ldr	r2, [pc, #200]	; (8006960 <HAL_GPIO_Init+0x334>)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800689c:	4b30      	ldr	r3, [pc, #192]	; (8006960 <HAL_GPIO_Init+0x334>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	43db      	mvns	r3, r3
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	4013      	ands	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068c0:	4a27      	ldr	r2, [pc, #156]	; (8006960 <HAL_GPIO_Init+0x334>)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068c6:	4b26      	ldr	r3, [pc, #152]	; (8006960 <HAL_GPIO_Init+0x334>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	43db      	mvns	r3, r3
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4013      	ands	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068ea:	4a1d      	ldr	r2, [pc, #116]	; (8006960 <HAL_GPIO_Init+0x334>)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068f0:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <HAL_GPIO_Init+0x334>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006914:	4a12      	ldr	r2, [pc, #72]	; (8006960 <HAL_GPIO_Init+0x334>)
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	3301      	adds	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	2b0f      	cmp	r3, #15
 8006924:	f67f ae92 	bls.w	800664c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	3724      	adds	r7, #36	; 0x24
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40023800 	.word	0x40023800
 800693c:	40013800 	.word	0x40013800
 8006940:	40020000 	.word	0x40020000
 8006944:	40020400 	.word	0x40020400
 8006948:	40020800 	.word	0x40020800
 800694c:	40020c00 	.word	0x40020c00
 8006950:	40021000 	.word	0x40021000
 8006954:	40021400 	.word	0x40021400
 8006958:	40021800 	.word	0x40021800
 800695c:	40021c00 	.word	0x40021c00
 8006960:	40013c00 	.word	0x40013c00

08006964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	807b      	strh	r3, [r7, #2]
 8006970:	4613      	mov	r3, r2
 8006972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006974:	787b      	ldrb	r3, [r7, #1]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800697a:	887a      	ldrh	r2, [r7, #2]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006980:	e003      	b.n	800698a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006982:	887b      	ldrh	r3, [r7, #2]
 8006984:	041a      	lsls	r2, r3, #16
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	619a      	str	r2, [r3, #24]
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e07f      	b.n	8006aaa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fc fcb8 	bl	8003334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2224      	movs	r2, #36	; 0x24
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0201 	bic.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80069e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d107      	bne.n	8006a12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a0e:	609a      	str	r2, [r3, #8]
 8006a10:	e006      	b.n	8006a20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006a1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d104      	bne.n	8006a32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6859      	ldr	r1, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <HAL_I2C_Init+0x11c>)
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69d9      	ldr	r1, [r3, #28]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	02008000 	.word	0x02008000

08006ab8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	817b      	strh	r3, [r7, #10]
 8006aca:	460b      	mov	r3, r1
 8006acc:	813b      	strh	r3, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	f040 80f9 	bne.w	8006cd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_I2C_Mem_Write+0x34>
 8006ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d105      	bne.n	8006af8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e0ed      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_I2C_Mem_Write+0x4e>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e0e6      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b0e:	f7ff f871 	bl	8005bf4 <HAL_GetTick>
 8006b12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	2319      	movs	r3, #25
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fac3 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0d1      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2221      	movs	r2, #33	; 0x21
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2240      	movs	r2, #64	; 0x40
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a3a      	ldr	r2, [r7, #32]
 8006b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b58:	88f8      	ldrh	r0, [r7, #6]
 8006b5a:	893a      	ldrh	r2, [r7, #8]
 8006b5c:	8979      	ldrh	r1, [r7, #10]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	4603      	mov	r3, r0
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f9d3 	bl	8006f14 <I2C_RequestMemoryWrite>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0a9      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2bff      	cmp	r3, #255	; 0xff
 8006b88:	d90e      	bls.n	8006ba8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	22ff      	movs	r2, #255	; 0xff
 8006b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	8979      	ldrh	r1, [r7, #10]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fc1f 	bl	80073e4 <I2C_TransferConfig>
 8006ba6:	e00f      	b.n	8006bc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	8979      	ldrh	r1, [r7, #10]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fc0e 	bl	80073e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 faad 	bl	800712c <I2C_WaitOnTXISFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e07b      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d034      	beq.n	8006c80 <HAL_I2C_Mem_Write+0x1c8>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d130      	bne.n	8006c80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2200      	movs	r2, #0
 8006c26:	2180      	movs	r1, #128	; 0x80
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fa3f 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e04d      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2bff      	cmp	r3, #255	; 0xff
 8006c40:	d90e      	bls.n	8006c60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22ff      	movs	r2, #255	; 0xff
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	8979      	ldrh	r1, [r7, #10]
 8006c50:	2300      	movs	r3, #0
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fbc3 	bl	80073e4 <I2C_TransferConfig>
 8006c5e:	e00f      	b.n	8006c80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	8979      	ldrh	r1, [r7, #10]
 8006c72:	2300      	movs	r3, #0
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fbb2 	bl	80073e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d19e      	bne.n	8006bc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 fa8c 	bl	80071ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e01a      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6859      	ldr	r1, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <HAL_I2C_Mem_Write+0x224>)
 8006cb2:	400b      	ands	r3, r1
 8006cb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006cd2:	2302      	movs	r3, #2
  }
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	fe00e800 	.word	0xfe00e800

08006ce0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	817b      	strh	r3, [r7, #10]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	813b      	strh	r3, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	f040 80fd 	bne.w	8006f02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_I2C_Mem_Read+0x34>
 8006d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0f1      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_I2C_Mem_Read+0x4e>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e0ea      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d36:	f7fe ff5d 	bl	8005bf4 <HAL_GetTick>
 8006d3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2319      	movs	r3, #25
 8006d42:	2201      	movs	r2, #1
 8006d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f9af 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e0d5      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2222      	movs	r2, #34	; 0x22
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2240      	movs	r2, #64	; 0x40
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d80:	88f8      	ldrh	r0, [r7, #6]
 8006d82:	893a      	ldrh	r2, [r7, #8]
 8006d84:	8979      	ldrh	r1, [r7, #10]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	4603      	mov	r3, r0
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f913 	bl	8006fbc <I2C_RequestMemoryRead>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0ad      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2bff      	cmp	r3, #255	; 0xff
 8006db0:	d90e      	bls.n	8006dd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	22ff      	movs	r2, #255	; 0xff
 8006db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	8979      	ldrh	r1, [r7, #10]
 8006dc0:	4b52      	ldr	r3, [pc, #328]	; (8006f0c <HAL_I2C_Mem_Read+0x22c>)
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fb0b 	bl	80073e4 <I2C_TransferConfig>
 8006dce:	e00f      	b.n	8006df0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	8979      	ldrh	r1, [r7, #10]
 8006de2:	4b4a      	ldr	r3, [pc, #296]	; (8006f0c <HAL_I2C_Mem_Read+0x22c>)
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fafa 	bl	80073e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	2200      	movs	r2, #0
 8006df8:	2104      	movs	r1, #4
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f956 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e07c      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d034      	beq.n	8006eb0 <HAL_I2C_Mem_Read+0x1d0>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d130      	bne.n	8006eb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	2200      	movs	r2, #0
 8006e56:	2180      	movs	r1, #128	; 0x80
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f927 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e04d      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2bff      	cmp	r3, #255	; 0xff
 8006e70:	d90e      	bls.n	8006e90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	8979      	ldrh	r1, [r7, #10]
 8006e80:	2300      	movs	r3, #0
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 faab 	bl	80073e4 <I2C_TransferConfig>
 8006e8e:	e00f      	b.n	8006eb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	8979      	ldrh	r1, [r7, #10]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 fa9a 	bl	80073e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d19a      	bne.n	8006df0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f974 	bl	80071ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e01a      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6859      	ldr	r1, [r3, #4]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <HAL_I2C_Mem_Read+0x230>)
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e000      	b.n	8006f04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	80002400 	.word	0x80002400
 8006f10:	fe00e800 	.word	0xfe00e800

08006f14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	817b      	strh	r3, [r7, #10]
 8006f26:	460b      	mov	r3, r1
 8006f28:	813b      	strh	r3, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	8979      	ldrh	r1, [r7, #10]
 8006f34:	4b20      	ldr	r3, [pc, #128]	; (8006fb8 <I2C_RequestMemoryWrite+0xa4>)
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fa51 	bl	80073e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	69b9      	ldr	r1, [r7, #24]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 f8f0 	bl	800712c <I2C_WaitOnTXISFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e02c      	b.n	8006fb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d105      	bne.n	8006f68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f5c:	893b      	ldrh	r3, [r7, #8]
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	629a      	str	r2, [r3, #40]	; 0x28
 8006f66:	e015      	b.n	8006f94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f68:	893b      	ldrh	r3, [r7, #8]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f8d6 	bl	800712c <I2C_WaitOnTXISFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e012      	b.n	8006fb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f8a:	893b      	ldrh	r3, [r7, #8]
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2180      	movs	r1, #128	; 0x80
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f884 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	80002000 	.word	0x80002000

08006fbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	817b      	strh	r3, [r7, #10]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	813b      	strh	r3, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	8979      	ldrh	r1, [r7, #10]
 8006fdc:	4b20      	ldr	r3, [pc, #128]	; (8007060 <I2C_RequestMemoryRead+0xa4>)
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f9fe 	bl	80073e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	69b9      	ldr	r1, [r7, #24]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f89d 	bl	800712c <I2C_WaitOnTXISFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e02c      	b.n	8007056 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d105      	bne.n	800700e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007002:	893b      	ldrh	r3, [r7, #8]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	629a      	str	r2, [r3, #40]	; 0x28
 800700c:	e015      	b.n	800703a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800700e:	893b      	ldrh	r3, [r7, #8]
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	b29b      	uxth	r3, r3
 8007014:	b2da      	uxtb	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	69b9      	ldr	r1, [r7, #24]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f883 	bl	800712c <I2C_WaitOnTXISFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e012      	b.n	8007056 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007030:	893b      	ldrh	r3, [r7, #8]
 8007032:	b2da      	uxtb	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2200      	movs	r2, #0
 8007042:	2140      	movs	r1, #64	; 0x40
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f831 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	80002000 	.word	0x80002000

08007064 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d103      	bne.n	8007082 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b01      	cmp	r3, #1
 800708e:	d007      	beq.n	80070a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	619a      	str	r2, [r3, #24]
  }
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070bc:	e022      	b.n	8007104 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d01e      	beq.n	8007104 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c6:	f7fe fd95 	bl	8005bf4 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d302      	bcc.n	80070dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d113      	bne.n	8007104 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e0:	f043 0220 	orr.w	r2, r3, #32
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e00f      	b.n	8007124 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4013      	ands	r3, r2
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	429a      	cmp	r2, r3
 8007112:	bf0c      	ite	eq
 8007114:	2301      	moveq	r3, #1
 8007116:	2300      	movne	r3, #0
 8007118:	b2db      	uxtb	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	429a      	cmp	r2, r3
 8007120:	d0cd      	beq.n	80070be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007138:	e02c      	b.n	8007194 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f870 	bl	8007224 <I2C_IsErrorOccurred>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e02a      	b.n	80071a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d01e      	beq.n	8007194 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007156:	f7fe fd4d 	bl	8005bf4 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d113      	bne.n	8007194 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007170:	f043 0220 	orr.w	r2, r3, #32
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e007      	b.n	80071a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d1cb      	bne.n	800713a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071b8:	e028      	b.n	800720c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f830 	bl	8007224 <I2C_IsErrorOccurred>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e026      	b.n	800721c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fe fd11 	bl	8005bf4 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d302      	bcc.n	80071e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d113      	bne.n	800720c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e8:	f043 0220 	orr.w	r2, r3, #32
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e007      	b.n	800721c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b20      	cmp	r3, #32
 8007218:	d1cf      	bne.n	80071ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f003 0310 	and.w	r3, r3, #16
 800724c:	2b00      	cmp	r3, #0
 800724e:	d068      	beq.n	8007322 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2210      	movs	r2, #16
 8007256:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007258:	e049      	b.n	80072ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d045      	beq.n	80072ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007262:	f7fe fcc7 	bl	8005bf4 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	d302      	bcc.n	8007278 <I2C_IsErrorOccurred+0x54>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d13a      	bne.n	80072ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007282:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800728a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800729a:	d121      	bne.n	80072e0 <I2C_IsErrorOccurred+0xbc>
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072a2:	d01d      	beq.n	80072e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80072a4:	7cfb      	ldrb	r3, [r7, #19]
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d01a      	beq.n	80072e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072ba:	f7fe fc9b 	bl	8005bf4 <HAL_GetTick>
 80072be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072c0:	e00e      	b.n	80072e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072c2:	f7fe fc97 	bl	8005bf4 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b19      	cmp	r3, #25
 80072ce:	d907      	bls.n	80072e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	f043 0320 	orr.w	r3, r3, #32
 80072d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80072de:	e006      	b.n	80072ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d1e9      	bne.n	80072c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	d003      	beq.n	8007304 <I2C_IsErrorOccurred+0xe0>
 80072fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0aa      	beq.n	800725a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007308:	2b00      	cmp	r3, #0
 800730a:	d103      	bne.n	8007314 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2220      	movs	r2, #32
 8007312:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	f043 0304 	orr.w	r3, r3, #4
 800731a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00b      	beq.n	800734c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f043 0308 	orr.w	r3, r3, #8
 800735c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007366:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f043 0302 	orr.w	r3, r3, #2
 800737e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007388:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01c      	beq.n	80073d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff fe63 	bl	8007064 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6859      	ldr	r1, [r3, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <I2C_IsErrorOccurred+0x1bc>)
 80073aa:	400b      	ands	r3, r1
 80073ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80073d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3728      	adds	r7, #40	; 0x28
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	fe00e800 	.word	0xfe00e800

080073e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	607b      	str	r3, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	817b      	strh	r3, [r7, #10]
 80073f2:	4613      	mov	r3, r2
 80073f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073f6:	897b      	ldrh	r3, [r7, #10]
 80073f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073fc:	7a7b      	ldrb	r3, [r7, #9]
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007404:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	4313      	orrs	r3, r2
 800740e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007412:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	0d5b      	lsrs	r3, r3, #21
 800741e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007422:	4b08      	ldr	r3, [pc, #32]	; (8007444 <I2C_TransferConfig+0x60>)
 8007424:	430b      	orrs	r3, r1
 8007426:	43db      	mvns	r3, r3
 8007428:	ea02 0103 	and.w	r1, r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	03ff63ff 	.word	0x03ff63ff

08007448 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b20      	cmp	r3, #32
 800745c:	d138      	bne.n	80074d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007468:	2302      	movs	r3, #2
 800746a:	e032      	b.n	80074d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2224      	movs	r2, #36	; 0x24
 8007478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0201 	bic.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800749a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e000      	b.n	80074d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d139      	bne.n	8007568 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80074fe:	2302      	movs	r3, #2
 8007500:	e033      	b.n	800756a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2224      	movs	r2, #36	; 0x24
 800750e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0201 	bic.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007530:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	e000      	b.n	800756a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007568:	2302      	movs	r3, #2
  }
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007582:	4b23      	ldr	r3, [pc, #140]	; (8007610 <HAL_PWREx_EnableOverDrive+0x98>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	4a22      	ldr	r2, [pc, #136]	; (8007610 <HAL_PWREx_EnableOverDrive+0x98>)
 8007588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758c:	6413      	str	r3, [r2, #64]	; 0x40
 800758e:	4b20      	ldr	r3, [pc, #128]	; (8007610 <HAL_PWREx_EnableOverDrive+0x98>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800759a:	4b1e      	ldr	r3, [pc, #120]	; (8007614 <HAL_PWREx_EnableOverDrive+0x9c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1d      	ldr	r2, [pc, #116]	; (8007614 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075a6:	f7fe fb25 	bl	8005bf4 <HAL_GetTick>
 80075aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075ac:	e009      	b.n	80075c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075ae:	f7fe fb21 	bl	8005bf4 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075bc:	d901      	bls.n	80075c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e022      	b.n	8007608 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075c2:	4b14      	ldr	r3, [pc, #80]	; (8007614 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ce:	d1ee      	bne.n	80075ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80075d0:	4b10      	ldr	r3, [pc, #64]	; (8007614 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a0f      	ldr	r2, [pc, #60]	; (8007614 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075dc:	f7fe fb0a 	bl	8005bf4 <HAL_GetTick>
 80075e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075e2:	e009      	b.n	80075f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075e4:	f7fe fb06 	bl	8005bf4 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075f2:	d901      	bls.n	80075f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e007      	b.n	8007608 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007604:	d1ee      	bne.n	80075e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40023800 	.word	0x40023800
 8007614:	40007000 	.word	0x40007000

08007618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007620:	2300      	movs	r3, #0
 8007622:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e291      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 8087 	beq.w	800774a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800763c:	4b96      	ldr	r3, [pc, #600]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 030c 	and.w	r3, r3, #12
 8007644:	2b04      	cmp	r3, #4
 8007646:	d00c      	beq.n	8007662 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007648:	4b93      	ldr	r3, [pc, #588]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 030c 	and.w	r3, r3, #12
 8007650:	2b08      	cmp	r3, #8
 8007652:	d112      	bne.n	800767a <HAL_RCC_OscConfig+0x62>
 8007654:	4b90      	ldr	r3, [pc, #576]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007660:	d10b      	bne.n	800767a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007662:	4b8d      	ldr	r3, [pc, #564]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d06c      	beq.n	8007748 <HAL_RCC_OscConfig+0x130>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d168      	bne.n	8007748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e26b      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007682:	d106      	bne.n	8007692 <HAL_RCC_OscConfig+0x7a>
 8007684:	4b84      	ldr	r3, [pc, #528]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a83      	ldr	r2, [pc, #524]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 800768a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	e02e      	b.n	80076f0 <HAL_RCC_OscConfig+0xd8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10c      	bne.n	80076b4 <HAL_RCC_OscConfig+0x9c>
 800769a:	4b7f      	ldr	r3, [pc, #508]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a7e      	ldr	r2, [pc, #504]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	4b7c      	ldr	r3, [pc, #496]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a7b      	ldr	r2, [pc, #492]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	e01d      	b.n	80076f0 <HAL_RCC_OscConfig+0xd8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076bc:	d10c      	bne.n	80076d8 <HAL_RCC_OscConfig+0xc0>
 80076be:	4b76      	ldr	r3, [pc, #472]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a75      	ldr	r2, [pc, #468]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	4b73      	ldr	r3, [pc, #460]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a72      	ldr	r2, [pc, #456]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	e00b      	b.n	80076f0 <HAL_RCC_OscConfig+0xd8>
 80076d8:	4b6f      	ldr	r3, [pc, #444]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a6e      	ldr	r2, [pc, #440]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	4b6c      	ldr	r3, [pc, #432]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a6b      	ldr	r2, [pc, #428]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80076ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d013      	beq.n	8007720 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f8:	f7fe fa7c 	bl	8005bf4 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007700:	f7fe fa78 	bl	8005bf4 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b64      	cmp	r3, #100	; 0x64
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e21f      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007712:	4b61      	ldr	r3, [pc, #388]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0xe8>
 800771e:	e014      	b.n	800774a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007720:	f7fe fa68 	bl	8005bf4 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007726:	e008      	b.n	800773a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007728:	f7fe fa64 	bl	8005bf4 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b64      	cmp	r3, #100	; 0x64
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e20b      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800773a:	4b57      	ldr	r3, [pc, #348]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f0      	bne.n	8007728 <HAL_RCC_OscConfig+0x110>
 8007746:	e000      	b.n	800774a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d069      	beq.n	800782a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007756:	4b50      	ldr	r3, [pc, #320]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 030c 	and.w	r3, r3, #12
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007762:	4b4d      	ldr	r3, [pc, #308]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 030c 	and.w	r3, r3, #12
 800776a:	2b08      	cmp	r3, #8
 800776c:	d11c      	bne.n	80077a8 <HAL_RCC_OscConfig+0x190>
 800776e:	4b4a      	ldr	r3, [pc, #296]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d116      	bne.n	80077a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800777a:	4b47      	ldr	r3, [pc, #284]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <HAL_RCC_OscConfig+0x17a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d001      	beq.n	8007792 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e1df      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007792:	4b41      	ldr	r3, [pc, #260]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	493d      	ldr	r1, [pc, #244]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077a6:	e040      	b.n	800782a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d023      	beq.n	80077f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077b0:	4b39      	ldr	r3, [pc, #228]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a38      	ldr	r2, [pc, #224]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077bc:	f7fe fa1a 	bl	8005bf4 <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c2:	e008      	b.n	80077d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077c4:	f7fe fa16 	bl	8005bf4 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e1bd      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d6:	4b30      	ldr	r3, [pc, #192]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0f0      	beq.n	80077c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e2:	4b2d      	ldr	r3, [pc, #180]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4929      	ldr	r1, [pc, #164]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	600b      	str	r3, [r1, #0]
 80077f6:	e018      	b.n	800782a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077f8:	4b27      	ldr	r3, [pc, #156]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a26      	ldr	r2, [pc, #152]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 80077fe:	f023 0301 	bic.w	r3, r3, #1
 8007802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007804:	f7fe f9f6 	bl	8005bf4 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800780a:	e008      	b.n	800781e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800780c:	f7fe f9f2 	bl	8005bf4 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d901      	bls.n	800781e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e199      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800781e:	4b1e      	ldr	r3, [pc, #120]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f0      	bne.n	800780c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d038      	beq.n	80078a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d019      	beq.n	8007872 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800783e:	4b16      	ldr	r3, [pc, #88]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007842:	4a15      	ldr	r2, [pc, #84]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800784a:	f7fe f9d3 	bl	8005bf4 <HAL_GetTick>
 800784e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007850:	e008      	b.n	8007864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007852:	f7fe f9cf 	bl	8005bf4 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e176      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007864:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0f0      	beq.n	8007852 <HAL_RCC_OscConfig+0x23a>
 8007870:	e01a      	b.n	80078a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007872:	4b09      	ldr	r3, [pc, #36]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007876:	4a08      	ldr	r2, [pc, #32]	; (8007898 <HAL_RCC_OscConfig+0x280>)
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787e:	f7fe f9b9 	bl	8005bf4 <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007884:	e00a      	b.n	800789c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007886:	f7fe f9b5 	bl	8005bf4 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d903      	bls.n	800789c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e15c      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
 8007898:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800789c:	4b91      	ldr	r3, [pc, #580]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 800789e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1ee      	bne.n	8007886 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 80a4 	beq.w	80079fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078b6:	4b8b      	ldr	r3, [pc, #556]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10d      	bne.n	80078de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80078c2:	4b88      	ldr	r3, [pc, #544]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	4a87      	ldr	r2, [pc, #540]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 80078c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078cc:	6413      	str	r3, [r2, #64]	; 0x40
 80078ce:	4b85      	ldr	r3, [pc, #532]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d6:	60bb      	str	r3, [r7, #8]
 80078d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078de:	4b82      	ldr	r3, [pc, #520]	; (8007ae8 <HAL_RCC_OscConfig+0x4d0>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d118      	bne.n	800791c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80078ea:	4b7f      	ldr	r3, [pc, #508]	; (8007ae8 <HAL_RCC_OscConfig+0x4d0>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a7e      	ldr	r2, [pc, #504]	; (8007ae8 <HAL_RCC_OscConfig+0x4d0>)
 80078f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078f6:	f7fe f97d 	bl	8005bf4 <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078fe:	f7fe f979 	bl	8005bf4 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b64      	cmp	r3, #100	; 0x64
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e120      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007910:	4b75      	ldr	r3, [pc, #468]	; (8007ae8 <HAL_RCC_OscConfig+0x4d0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0f0      	beq.n	80078fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d106      	bne.n	8007932 <HAL_RCC_OscConfig+0x31a>
 8007924:	4b6f      	ldr	r3, [pc, #444]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007928:	4a6e      	ldr	r2, [pc, #440]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	6713      	str	r3, [r2, #112]	; 0x70
 8007930:	e02d      	b.n	800798e <HAL_RCC_OscConfig+0x376>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10c      	bne.n	8007954 <HAL_RCC_OscConfig+0x33c>
 800793a:	4b6a      	ldr	r3, [pc, #424]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 800793c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793e:	4a69      	ldr	r2, [pc, #420]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	6713      	str	r3, [r2, #112]	; 0x70
 8007946:	4b67      	ldr	r3, [pc, #412]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794a:	4a66      	ldr	r2, [pc, #408]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 800794c:	f023 0304 	bic.w	r3, r3, #4
 8007950:	6713      	str	r3, [r2, #112]	; 0x70
 8007952:	e01c      	b.n	800798e <HAL_RCC_OscConfig+0x376>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b05      	cmp	r3, #5
 800795a:	d10c      	bne.n	8007976 <HAL_RCC_OscConfig+0x35e>
 800795c:	4b61      	ldr	r3, [pc, #388]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 800795e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007960:	4a60      	ldr	r2, [pc, #384]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007962:	f043 0304 	orr.w	r3, r3, #4
 8007966:	6713      	str	r3, [r2, #112]	; 0x70
 8007968:	4b5e      	ldr	r3, [pc, #376]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	4a5d      	ldr	r2, [pc, #372]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	6713      	str	r3, [r2, #112]	; 0x70
 8007974:	e00b      	b.n	800798e <HAL_RCC_OscConfig+0x376>
 8007976:	4b5b      	ldr	r3, [pc, #364]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	4a5a      	ldr	r2, [pc, #360]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	6713      	str	r3, [r2, #112]	; 0x70
 8007982:	4b58      	ldr	r3, [pc, #352]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	4a57      	ldr	r2, [pc, #348]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007988:	f023 0304 	bic.w	r3, r3, #4
 800798c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d015      	beq.n	80079c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007996:	f7fe f92d 	bl	8005bf4 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799c:	e00a      	b.n	80079b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800799e:	f7fe f929 	bl	8005bf4 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e0ce      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b4:	4b4b      	ldr	r3, [pc, #300]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 80079b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0ee      	beq.n	800799e <HAL_RCC_OscConfig+0x386>
 80079c0:	e014      	b.n	80079ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c2:	f7fe f917 	bl	8005bf4 <HAL_GetTick>
 80079c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c8:	e00a      	b.n	80079e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ca:	f7fe f913 	bl	8005bf4 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d8:	4293      	cmp	r3, r2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0b8      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079e0:	4b40      	ldr	r3, [pc, #256]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 80079e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1ee      	bne.n	80079ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d105      	bne.n	80079fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079f2:	4b3c      	ldr	r3, [pc, #240]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	4a3b      	ldr	r2, [pc, #236]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 80079f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80a4 	beq.w	8007b50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a08:	4b36      	ldr	r3, [pc, #216]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 030c 	and.w	r3, r3, #12
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d06b      	beq.n	8007aec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d149      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1c:	4b31      	ldr	r3, [pc, #196]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a30      	ldr	r2, [pc, #192]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a28:	f7fe f8e4 	bl	8005bf4 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a30:	f7fe f8e0 	bl	8005bf4 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e087      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a42:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f0      	bne.n	8007a30 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69da      	ldr	r2, [r3, #28]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	019b      	lsls	r3, r3, #6
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	3b01      	subs	r3, #1
 8007a68:	041b      	lsls	r3, r3, #16
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	061b      	lsls	r3, r3, #24
 8007a72:	4313      	orrs	r3, r2
 8007a74:	4a1b      	ldr	r2, [pc, #108]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007a76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a7a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a7c:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a18      	ldr	r2, [pc, #96]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7fe f8b4 	bl	8005bf4 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a90:	f7fe f8b0 	bl	8005bf4 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e057      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aa2:	4b10      	ldr	r3, [pc, #64]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0f0      	beq.n	8007a90 <HAL_RCC_OscConfig+0x478>
 8007aae:	e04f      	b.n	8007b50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a0b      	ldr	r2, [pc, #44]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007abc:	f7fe f89a 	bl	8005bf4 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ac4:	f7fe f896 	bl	8005bf4 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e03d      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad6:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <HAL_RCC_OscConfig+0x4cc>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f0      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x4ac>
 8007ae2:	e035      	b.n	8007b50 <HAL_RCC_OscConfig+0x538>
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007aec:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <HAL_RCC_OscConfig+0x544>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d028      	beq.n	8007b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d121      	bne.n	8007b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d11a      	bne.n	8007b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d111      	bne.n	8007b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	3b01      	subs	r3, #1
 8007b36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d107      	bne.n	8007b4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d001      	beq.n	8007b50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40023800 	.word	0x40023800

08007b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e0d0      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b78:	4b6a      	ldr	r3, [pc, #424]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d910      	bls.n	8007ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b86:	4b67      	ldr	r3, [pc, #412]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f023 020f 	bic.w	r2, r3, #15
 8007b8e:	4965      	ldr	r1, [pc, #404]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b96:	4b63      	ldr	r3, [pc, #396]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d001      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e0b8      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d020      	beq.n	8007bf6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bc0:	4b59      	ldr	r3, [pc, #356]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	4a58      	ldr	r2, [pc, #352]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bd8:	4b53      	ldr	r3, [pc, #332]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	4a52      	ldr	r2, [pc, #328]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007be2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be4:	4b50      	ldr	r3, [pc, #320]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	494d      	ldr	r1, [pc, #308]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d040      	beq.n	8007c84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d107      	bne.n	8007c1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c0a:	4b47      	ldr	r3, [pc, #284]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d115      	bne.n	8007c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e07f      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d107      	bne.n	8007c32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c22:	4b41      	ldr	r3, [pc, #260]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e073      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c32:	4b3d      	ldr	r3, [pc, #244]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e06b      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c42:	4b39      	ldr	r3, [pc, #228]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f023 0203 	bic.w	r2, r3, #3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4936      	ldr	r1, [pc, #216]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c54:	f7fd ffce 	bl	8005bf4 <HAL_GetTick>
 8007c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c5a:	e00a      	b.n	8007c72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c5c:	f7fd ffca 	bl	8005bf4 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e053      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c72:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 020c 	and.w	r2, r3, #12
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d1eb      	bne.n	8007c5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c84:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 030f 	and.w	r3, r3, #15
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d210      	bcs.n	8007cb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c92:	4b24      	ldr	r3, [pc, #144]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f023 020f 	bic.w	r2, r3, #15
 8007c9a:	4922      	ldr	r1, [pc, #136]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca2:	4b20      	ldr	r3, [pc, #128]	; (8007d24 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d001      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e032      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cc0:	4b19      	ldr	r3, [pc, #100]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	4916      	ldr	r1, [pc, #88]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007cde:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	490e      	ldr	r1, [pc, #56]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cf2:	f000 f821 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <HAL_RCC_ClockConfig+0x1c8>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	091b      	lsrs	r3, r3, #4
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	490a      	ldr	r1, [pc, #40]	; (8007d2c <HAL_RCC_ClockConfig+0x1cc>)
 8007d04:	5ccb      	ldrb	r3, [r1, r3]
 8007d06:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0a:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <HAL_RCC_ClockConfig+0x1d0>)
 8007d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <HAL_RCC_ClockConfig+0x1d4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fb fdb6 	bl	8003884 <HAL_InitTick>

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	40023c00 	.word	0x40023c00
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	08015cf4 	.word	0x08015cf4
 8007d30:	20000008 	.word	0x20000008
 8007d34:	2000000c 	.word	0x2000000c

08007d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d3c:	b090      	sub	sp, #64	; 0x40
 8007d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
 8007d44:	2300      	movs	r3, #0
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d48:	2300      	movs	r3, #0
 8007d4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d50:	4b59      	ldr	r3, [pc, #356]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 030c 	and.w	r3, r3, #12
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d00d      	beq.n	8007d78 <HAL_RCC_GetSysClockFreq+0x40>
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	f200 80a1 	bhi.w	8007ea4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x34>
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d003      	beq.n	8007d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d6a:	e09b      	b.n	8007ea4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d6c:	4b53      	ldr	r3, [pc, #332]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8007d6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d70:	e09b      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d72:	4b53      	ldr	r3, [pc, #332]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d76:	e098      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d78:	4b4f      	ldr	r3, [pc, #316]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007d82:	4b4d      	ldr	r3, [pc, #308]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d028      	beq.n	8007de0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d8e:	4b4a      	ldr	r3, [pc, #296]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	099b      	lsrs	r3, r3, #6
 8007d94:	2200      	movs	r2, #0
 8007d96:	623b      	str	r3, [r7, #32]
 8007d98:	627a      	str	r2, [r7, #36]	; 0x24
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007da0:	2100      	movs	r1, #0
 8007da2:	4b47      	ldr	r3, [pc, #284]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007da4:	fb03 f201 	mul.w	r2, r3, r1
 8007da8:	2300      	movs	r3, #0
 8007daa:	fb00 f303 	mul.w	r3, r0, r3
 8007dae:	4413      	add	r3, r2
 8007db0:	4a43      	ldr	r2, [pc, #268]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007db2:	fba0 1202 	umull	r1, r2, r0, r2
 8007db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007db8:	460a      	mov	r2, r1
 8007dba:	62ba      	str	r2, [r7, #40]	; 0x28
 8007dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dbe:	4413      	add	r3, r2
 8007dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	61fa      	str	r2, [r7, #28]
 8007dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007dd2:	f7f8 ffd1 	bl	8000d78 <__aeabi_uldivmod>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4613      	mov	r3, r2
 8007ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dde:	e053      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007de0:	4b35      	ldr	r3, [pc, #212]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	2200      	movs	r2, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	617a      	str	r2, [r7, #20]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007df2:	f04f 0b00 	mov.w	fp, #0
 8007df6:	4652      	mov	r2, sl
 8007df8:	465b      	mov	r3, fp
 8007dfa:	f04f 0000 	mov.w	r0, #0
 8007dfe:	f04f 0100 	mov.w	r1, #0
 8007e02:	0159      	lsls	r1, r3, #5
 8007e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e08:	0150      	lsls	r0, r2, #5
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	ebb2 080a 	subs.w	r8, r2, sl
 8007e12:	eb63 090b 	sbc.w	r9, r3, fp
 8007e16:	f04f 0200 	mov.w	r2, #0
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e2a:	ebb2 0408 	subs.w	r4, r2, r8
 8007e2e:	eb63 0509 	sbc.w	r5, r3, r9
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	00eb      	lsls	r3, r5, #3
 8007e3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e40:	00e2      	lsls	r2, r4, #3
 8007e42:	4614      	mov	r4, r2
 8007e44:	461d      	mov	r5, r3
 8007e46:	eb14 030a 	adds.w	r3, r4, sl
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	eb45 030b 	adc.w	r3, r5, fp
 8007e50:	607b      	str	r3, [r7, #4]
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e5e:	4629      	mov	r1, r5
 8007e60:	028b      	lsls	r3, r1, #10
 8007e62:	4621      	mov	r1, r4
 8007e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e68:	4621      	mov	r1, r4
 8007e6a:	028a      	lsls	r2, r1, #10
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	2200      	movs	r2, #0
 8007e74:	60bb      	str	r3, [r7, #8]
 8007e76:	60fa      	str	r2, [r7, #12]
 8007e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e7c:	f7f8 ff7c 	bl	8000d78 <__aeabi_uldivmod>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4613      	mov	r3, r2
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e88:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	3301      	adds	r3, #1
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ea2:	e002      	b.n	8007eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8007ea6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3740      	adds	r7, #64	; 0x40
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	00f42400 	.word	0x00f42400
 8007ec0:	017d7840 	.word	0x017d7840

08007ec4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ec8:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007eca:	681b      	ldr	r3, [r3, #0]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	20000008 	.word	0x20000008

08007edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ee0:	f7ff fff0 	bl	8007ec4 <HAL_RCC_GetHCLKFreq>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	0a9b      	lsrs	r3, r3, #10
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	4903      	ldr	r1, [pc, #12]	; (8007f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ef2:	5ccb      	ldrb	r3, [r1, r3]
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40023800 	.word	0x40023800
 8007f00:	08015d04 	.word	0x08015d04

08007f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f08:	f7ff ffdc 	bl	8007ec4 <HAL_RCC_GetHCLKFreq>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	0b5b      	lsrs	r3, r3, #13
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	4903      	ldr	r1, [pc, #12]	; (8007f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f1a:	5ccb      	ldrb	r3, [r1, r3]
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	40023800 	.word	0x40023800
 8007f28:	08015d04 	.word	0x08015d04

08007f2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	220f      	movs	r2, #15
 8007f3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f3c:	4b12      	ldr	r3, [pc, #72]	; (8007f88 <HAL_RCC_GetClockConfig+0x5c>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 0203 	and.w	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f48:	4b0f      	ldr	r3, [pc, #60]	; (8007f88 <HAL_RCC_GetClockConfig+0x5c>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f54:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <HAL_RCC_GetClockConfig+0x5c>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f60:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <HAL_RCC_GetClockConfig+0x5c>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	08db      	lsrs	r3, r3, #3
 8007f66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <HAL_RCC_GetClockConfig+0x60>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 020f 	and.w	r2, r3, #15
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	601a      	str	r2, [r3, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	40023c00 	.word	0x40023c00

08007f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d012      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fb4:	4b65      	ldr	r3, [pc, #404]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	4a64      	ldr	r2, [pc, #400]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fbe:	6093      	str	r3, [r2, #8]
 8007fc0:	4b62      	ldr	r3, [pc, #392]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	4960      	ldr	r1, [pc, #384]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d017      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fe6:	4b59      	ldr	r3, [pc, #356]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff4:	4955      	ldr	r1, [pc, #340]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008004:	d101      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8008006:	2301      	movs	r3, #1
 8008008:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8008012:	2301      	movs	r3, #1
 8008014:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d017      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008022:	4b4a      	ldr	r3, [pc, #296]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	4946      	ldr	r1, [pc, #280]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008040:	d101      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8008042:	2301      	movs	r3, #1
 8008044:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800804e:	2301      	movs	r3, #1
 8008050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 808b 	beq.w	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008060:	4b3a      	ldr	r3, [pc, #232]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	4a39      	ldr	r2, [pc, #228]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800806a:	6413      	str	r3, [r2, #64]	; 0x40
 800806c:	4b37      	ldr	r3, [pc, #220]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008078:	4b35      	ldr	r3, [pc, #212]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a34      	ldr	r2, [pc, #208]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800807e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008084:	f7fd fdb6 	bl	8005bf4 <HAL_GetTick>
 8008088:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800808a:	e008      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800808c:	f7fd fdb2 	bl	8005bf4 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b64      	cmp	r3, #100	; 0x64
 8008098:	d901      	bls.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e2bc      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800809e:	4b2c      	ldr	r3, [pc, #176]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0f0      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080aa:	4b28      	ldr	r3, [pc, #160]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d035      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d02e      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080c8:	4b20      	ldr	r3, [pc, #128]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080d2:	4b1e      	ldr	r3, [pc, #120]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	4a1d      	ldr	r2, [pc, #116]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080de:	4b1b      	ldr	r3, [pc, #108]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	4a1a      	ldr	r2, [pc, #104]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80080ea:	4a18      	ldr	r2, [pc, #96]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80080f0:	4b16      	ldr	r3, [pc, #88]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d114      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fc:	f7fd fd7a 	bl	8005bf4 <HAL_GetTick>
 8008100:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008102:	e00a      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008104:	f7fd fd76 	bl	8005bf4 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008112:	4293      	cmp	r3, r2
 8008114:	d901      	bls.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e27e      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800811a:	4b0c      	ldr	r3, [pc, #48]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0ee      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800812e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008132:	d111      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008142:	400b      	ands	r3, r1
 8008144:	4901      	ldr	r1, [pc, #4]	; (800814c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008146:	4313      	orrs	r3, r2
 8008148:	608b      	str	r3, [r1, #8]
 800814a:	e00b      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800814c:	40023800 	.word	0x40023800
 8008150:	40007000 	.word	0x40007000
 8008154:	0ffffcff 	.word	0x0ffffcff
 8008158:	4ba4      	ldr	r3, [pc, #656]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	4aa3      	ldr	r2, [pc, #652]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800815e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008162:	6093      	str	r3, [r2, #8]
 8008164:	4ba1      	ldr	r3, [pc, #644]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008166:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008170:	499e      	ldr	r1, [pc, #632]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0310 	and.w	r3, r3, #16
 800817e:	2b00      	cmp	r3, #0
 8008180:	d010      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008182:	4b9a      	ldr	r3, [pc, #616]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008188:	4a98      	ldr	r2, [pc, #608]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800818a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800818e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008192:	4b96      	ldr	r3, [pc, #600]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008194:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	4993      	ldr	r1, [pc, #588]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00a      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081b0:	4b8e      	ldr	r3, [pc, #568]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081be:	498b      	ldr	r1, [pc, #556]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081d2:	4b86      	ldr	r3, [pc, #536]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e0:	4982      	ldr	r1, [pc, #520]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00a      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081f4:	4b7d      	ldr	r3, [pc, #500]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008202:	497a      	ldr	r1, [pc, #488]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008204:	4313      	orrs	r3, r2
 8008206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008216:	4b75      	ldr	r3, [pc, #468]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821c:	f023 0203 	bic.w	r2, r3, #3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008224:	4971      	ldr	r1, [pc, #452]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008226:	4313      	orrs	r3, r2
 8008228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008238:	4b6c      	ldr	r3, [pc, #432]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800823a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823e:	f023 020c 	bic.w	r2, r3, #12
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	4969      	ldr	r1, [pc, #420]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008248:	4313      	orrs	r3, r2
 800824a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800825a:	4b64      	ldr	r3, [pc, #400]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	4960      	ldr	r1, [pc, #384]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800826a:	4313      	orrs	r3, r2
 800826c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800827c:	4b5b      	ldr	r3, [pc, #364]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800827e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800828a:	4958      	ldr	r1, [pc, #352]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800828c:	4313      	orrs	r3, r2
 800828e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800829e:	4b53      	ldr	r3, [pc, #332]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ac:	494f      	ldr	r1, [pc, #316]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80082c0:	4b4a      	ldr	r3, [pc, #296]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ce:	4947      	ldr	r1, [pc, #284]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80082e2:	4b42      	ldr	r3, [pc, #264]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f0:	493e      	ldr	r1, [pc, #248]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008304:	4b39      	ldr	r3, [pc, #228]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	4936      	ldr	r1, [pc, #216]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008314:	4313      	orrs	r3, r2
 8008316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d011      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008326:	4b31      	ldr	r3, [pc, #196]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008334:	492d      	ldr	r1, [pc, #180]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008344:	d101      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8008346:	2301      	movs	r3, #1
 8008348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008356:	4b25      	ldr	r3, [pc, #148]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008364:	4921      	ldr	r1, [pc, #132]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008378:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800837a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008386:	4919      	ldr	r1, [pc, #100]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008388:	4313      	orrs	r3, r2
 800838a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800839c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a8:	4910      	ldr	r1, [pc, #64]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d006      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 809d 	beq.w	80084fe <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083c4:	4b09      	ldr	r3, [pc, #36]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a08      	ldr	r2, [pc, #32]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80083ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083d0:	f7fd fc10 	bl	8005bf4 <HAL_GetTick>
 80083d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083d6:	e00b      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083d8:	f7fd fc0c 	bl	8005bf4 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b64      	cmp	r3, #100	; 0x64
 80083e4:	d904      	bls.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e116      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80083ea:	bf00      	nop
 80083ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083f0:	4b8b      	ldr	r3, [pc, #556]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1ed      	bne.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	d017      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d113      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008410:	4b83      	ldr	r3, [pc, #524]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008416:	0e1b      	lsrs	r3, r3, #24
 8008418:	f003 030f 	and.w	r3, r3, #15
 800841c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	019a      	lsls	r2, r3, #6
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	061b      	lsls	r3, r3, #24
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	071b      	lsls	r3, r3, #28
 8008430:	497b      	ldr	r1, [pc, #492]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800844c:	d00a      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008456:	2b00      	cmp	r3, #0
 8008458:	d024      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008462:	d11f      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008464:	4b6e      	ldr	r3, [pc, #440]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800846a:	0f1b      	lsrs	r3, r3, #28
 800846c:	f003 0307 	and.w	r3, r3, #7
 8008470:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	019a      	lsls	r2, r3, #6
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	061b      	lsls	r3, r3, #24
 800847e:	431a      	orrs	r2, r3
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	071b      	lsls	r3, r3, #28
 8008484:	4966      	ldr	r1, [pc, #408]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008486:	4313      	orrs	r3, r2
 8008488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800848c:	4b64      	ldr	r3, [pc, #400]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800848e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008492:	f023 021f 	bic.w	r2, r3, #31
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	3b01      	subs	r3, #1
 800849c:	4960      	ldr	r1, [pc, #384]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00d      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	019a      	lsls	r2, r3, #6
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	061b      	lsls	r3, r3, #24
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	071b      	lsls	r3, r3, #28
 80084c4:	4956      	ldr	r1, [pc, #344]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084cc:	4b54      	ldr	r3, [pc, #336]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a53      	ldr	r2, [pc, #332]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80084d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084d8:	f7fd fb8c 	bl	8005bf4 <HAL_GetTick>
 80084dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084de:	e008      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084e0:	f7fd fb88 	bl	8005bf4 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b64      	cmp	r3, #100	; 0x64
 80084ec:	d901      	bls.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e092      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084f2:	4b4b      	ldr	r3, [pc, #300]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f0      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	2b01      	cmp	r3, #1
 8008502:	f040 8088 	bne.w	8008616 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008506:	4b46      	ldr	r3, [pc, #280]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a45      	ldr	r2, [pc, #276]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800850c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008512:	f7fd fb6f 	bl	8005bf4 <HAL_GetTick>
 8008516:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008518:	e008      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800851a:	f7fd fb6b 	bl	8005bf4 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b64      	cmp	r3, #100	; 0x64
 8008526:	d901      	bls.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e075      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800852c:	4b3c      	ldr	r3, [pc, #240]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008538:	d0ef      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008556:	2b00      	cmp	r3, #0
 8008558:	d024      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	2b00      	cmp	r3, #0
 8008560:	d120      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008562:	4b2f      	ldr	r3, [pc, #188]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008568:	0c1b      	lsrs	r3, r3, #16
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	019a      	lsls	r2, r3, #6
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	061b      	lsls	r3, r3, #24
 8008582:	4927      	ldr	r1, [pc, #156]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800858a:	4b25      	ldr	r3, [pc, #148]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800858c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008590:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	3b01      	subs	r3, #1
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	4920      	ldr	r1, [pc, #128]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d018      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085b8:	d113      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085ba:	4b19      	ldr	r3, [pc, #100]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c0:	0e1b      	lsrs	r3, r3, #24
 80085c2:	f003 030f 	and.w	r3, r3, #15
 80085c6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	019a      	lsls	r2, r3, #6
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	041b      	lsls	r3, r3, #16
 80085d4:	431a      	orrs	r2, r3
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	061b      	lsls	r3, r3, #24
 80085da:	4911      	ldr	r1, [pc, #68]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80085e2:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a0e      	ldr	r2, [pc, #56]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80085e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ee:	f7fd fb01 	bl	8005bf4 <HAL_GetTick>
 80085f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085f4:	e008      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085f6:	f7fd fafd 	bl	8005bf4 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b64      	cmp	r3, #100	; 0x64
 8008602:	d901      	bls.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e007      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008614:	d1ef      	bne.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3720      	adds	r7, #32
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	40023800 	.word	0x40023800

08008624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e09d      	b.n	8008772 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	2b00      	cmp	r3, #0
 800863c:	d108      	bne.n	8008650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008646:	d009      	beq.n	800865c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	61da      	str	r2, [r3, #28]
 800864e:	e005      	b.n	800865c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d106      	bne.n	800867c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7fa febc 	bl	80033f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008692:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800869c:	d902      	bls.n	80086a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e002      	b.n	80086aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80086a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80086b2:	d007      	beq.n	80086c4 <HAL_SPI_Init+0xa0>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086bc:	d002      	beq.n	80086c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80086d4:	431a      	orrs	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	431a      	orrs	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086fc:	431a      	orrs	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008706:	ea42 0103 	orr.w	r1, r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	0c1b      	lsrs	r3, r3, #16
 8008720:	f003 0204 	and.w	r2, r3, #4
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008740:	ea42 0103 	orr.w	r1, r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69da      	ldr	r2, [r3, #28]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b088      	sub	sp, #32
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	603b      	str	r3, [r7, #0]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_SPI_Transmit+0x22>
 8008798:	2302      	movs	r3, #2
 800879a:	e158      	b.n	8008a4e <HAL_SPI_Transmit+0x2d4>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087a4:	f7fd fa26 	bl	8005bf4 <HAL_GetTick>
 80087a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80087aa:	88fb      	ldrh	r3, [r7, #6]
 80087ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d002      	beq.n	80087c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80087ba:	2302      	movs	r3, #2
 80087bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087be:	e13d      	b.n	8008a3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <HAL_SPI_Transmit+0x52>
 80087c6:	88fb      	ldrh	r3, [r7, #6]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087d0:	e134      	b.n	8008a3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2203      	movs	r2, #3
 80087d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	88fa      	ldrh	r2, [r7, #6]
 80087ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800881c:	d10f      	bne.n	800883e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800882c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800883c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008848:	2b40      	cmp	r3, #64	; 0x40
 800884a:	d007      	beq.n	800885c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800885a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008864:	d94b      	bls.n	80088fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <HAL_SPI_Transmit+0xfa>
 800886e:	8afb      	ldrh	r3, [r7, #22]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d13e      	bne.n	80088f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	881a      	ldrh	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	1c9a      	adds	r2, r3, #2
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008898:	e02b      	b.n	80088f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d112      	bne.n	80088ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	881a      	ldrh	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	1c9a      	adds	r2, r3, #2
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088cc:	e011      	b.n	80088f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ce:	f7fd f991 	bl	8005bf4 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d803      	bhi.n	80088e6 <HAL_SPI_Transmit+0x16c>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d102      	bne.n	80088ec <HAL_SPI_Transmit+0x172>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80088f0:	e0a4      	b.n	8008a3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1ce      	bne.n	800889a <HAL_SPI_Transmit+0x120>
 80088fc:	e07c      	b.n	80089f8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <HAL_SPI_Transmit+0x192>
 8008906:	8afb      	ldrh	r3, [r7, #22]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d170      	bne.n	80089ee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008910:	b29b      	uxth	r3, r3
 8008912:	2b01      	cmp	r3, #1
 8008914:	d912      	bls.n	800893c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	881a      	ldrh	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	1c9a      	adds	r2, r3, #2
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008930:	b29b      	uxth	r3, r3
 8008932:	3b02      	subs	r3, #2
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	87da      	strh	r2, [r3, #62]	; 0x3e
 800893a:	e058      	b.n	80089ee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	330c      	adds	r3, #12
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008958:	b29b      	uxth	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	b29a      	uxth	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008962:	e044      	b.n	80089ee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b02      	cmp	r3, #2
 8008970:	d12b      	bne.n	80089ca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008976:	b29b      	uxth	r3, r3
 8008978:	2b01      	cmp	r3, #1
 800897a:	d912      	bls.n	80089a2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	881a      	ldrh	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	1c9a      	adds	r2, r3, #2
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b02      	subs	r3, #2
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089a0:	e025      	b.n	80089ee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	7812      	ldrb	r2, [r2, #0]
 80089ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089be:	b29b      	uxth	r3, r3
 80089c0:	3b01      	subs	r3, #1
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089c8:	e011      	b.n	80089ee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089ca:	f7fd f913 	bl	8005bf4 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d803      	bhi.n	80089e2 <HAL_SPI_Transmit+0x268>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d102      	bne.n	80089e8 <HAL_SPI_Transmit+0x26e>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80089ec:	e026      	b.n	8008a3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1b5      	bne.n	8008964 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fd07 	bl	8009410 <SPI_EndRxTxTransaction>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	613b      	str	r3, [r7, #16]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	77fb      	strb	r3, [r7, #31]
 8008a38:	e000      	b.n	8008a3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af02      	add	r7, sp, #8
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	4613      	mov	r3, r2
 8008a64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a72:	d112      	bne.n	8008a9a <HAL_SPI_Receive+0x44>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10e      	bne.n	8008a9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2204      	movs	r2, #4
 8008a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	68b9      	ldr	r1, [r7, #8]
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 f910 	bl	8008cb6 <HAL_SPI_TransmitReceive>
 8008a96:	4603      	mov	r3, r0
 8008a98:	e109      	b.n	8008cae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_SPI_Receive+0x52>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e102      	b.n	8008cae <HAL_SPI_Receive+0x258>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ab0:	f7fd f8a0 	bl	8005bf4 <HAL_GetTick>
 8008ab4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d002      	beq.n	8008ac8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ac6:	e0e9      	b.n	8008c9c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <HAL_SPI_Receive+0x7e>
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ad8:	e0e0      	b.n	8008c9c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2204      	movs	r2, #4
 8008ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	88fa      	ldrh	r2, [r7, #6]
 8008af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	88fa      	ldrh	r2, [r7, #6]
 8008afa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b24:	d908      	bls.n	8008b38 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b34:	605a      	str	r2, [r3, #4]
 8008b36:	e007      	b.n	8008b48 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b46:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b50:	d10f      	bne.n	8008b72 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b40      	cmp	r3, #64	; 0x40
 8008b7e:	d007      	beq.n	8008b90 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b98:	d867      	bhi.n	8008c6a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008b9a:	e030      	b.n	8008bfe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d117      	bne.n	8008bda <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f103 020c 	add.w	r2, r3, #12
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	7812      	ldrb	r2, [r2, #0]
 8008bb8:	b2d2      	uxtb	r2, r2
 8008bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008bd8:	e011      	b.n	8008bfe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bda:	f7fd f80b 	bl	8005bf4 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d803      	bhi.n	8008bf2 <HAL_SPI_Receive+0x19c>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf0:	d102      	bne.n	8008bf8 <HAL_SPI_Receive+0x1a2>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008bfc:	e04e      	b.n	8008c9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1c8      	bne.n	8008b9c <HAL_SPI_Receive+0x146>
 8008c0a:	e034      	b.n	8008c76 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d115      	bne.n	8008c46 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	b292      	uxth	r2, r2
 8008c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	1c9a      	adds	r2, r3, #2
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008c44:	e011      	b.n	8008c6a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c46:	f7fc ffd5 	bl	8005bf4 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d803      	bhi.n	8008c5e <HAL_SPI_Receive+0x208>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d102      	bne.n	8008c64 <HAL_SPI_Receive+0x20e>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d102      	bne.n	8008c6a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c68:	e018      	b.n	8008c9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1ca      	bne.n	8008c0c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 fb4c 	bl	8009318 <SPI_EndRxTransaction>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	75fb      	strb	r3, [r7, #23]
 8008c98:	e000      	b.n	8008c9c <HAL_SPI_Receive+0x246>
  }

error :
 8008c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b08a      	sub	sp, #40	; 0x28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
 8008cc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_SPI_TransmitReceive+0x26>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e1fb      	b.n	80090d4 <HAL_SPI_TransmitReceive+0x41e>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ce4:	f7fc ff86 	bl	8005bf4 <HAL_GetTick>
 8008ce8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cf0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008cf8:	887b      	ldrh	r3, [r7, #2]
 8008cfa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008cfc:	887b      	ldrh	r3, [r7, #2]
 8008cfe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d00:	7efb      	ldrb	r3, [r7, #27]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d00e      	beq.n	8008d24 <HAL_SPI_TransmitReceive+0x6e>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d0c:	d106      	bne.n	8008d1c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d102      	bne.n	8008d1c <HAL_SPI_TransmitReceive+0x66>
 8008d16:	7efb      	ldrb	r3, [r7, #27]
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d003      	beq.n	8008d24 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008d22:	e1cd      	b.n	80090c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <HAL_SPI_TransmitReceive+0x80>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <HAL_SPI_TransmitReceive+0x80>
 8008d30:	887b      	ldrh	r3, [r7, #2]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d103      	bne.n	8008d3e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008d3c:	e1c0      	b.n	80090c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b04      	cmp	r3, #4
 8008d48:	d003      	beq.n	8008d52 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2205      	movs	r2, #5
 8008d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	887a      	ldrh	r2, [r7, #2]
 8008d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	887a      	ldrh	r2, [r7, #2]
 8008d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	887a      	ldrh	r2, [r7, #2]
 8008d78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	887a      	ldrh	r2, [r7, #2]
 8008d7e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d94:	d802      	bhi.n	8008d9c <HAL_SPI_TransmitReceive+0xe6>
 8008d96:	8a3b      	ldrh	r3, [r7, #16]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d908      	bls.n	8008dae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008daa:	605a      	str	r2, [r3, #4]
 8008dac:	e007      	b.n	8008dbe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008dbc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	d007      	beq.n	8008ddc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008de4:	d97c      	bls.n	8008ee0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <HAL_SPI_TransmitReceive+0x13e>
 8008dee:	8a7b      	ldrh	r3, [r7, #18]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d169      	bne.n	8008ec8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	881a      	ldrh	r2, [r3, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	1c9a      	adds	r2, r3, #2
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	3b01      	subs	r3, #1
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e18:	e056      	b.n	8008ec8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d11b      	bne.n	8008e60 <HAL_SPI_TransmitReceive+0x1aa>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <HAL_SPI_TransmitReceive+0x1aa>
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d113      	bne.n	8008e60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3c:	881a      	ldrh	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e48:	1c9a      	adds	r2, r3, #2
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d11c      	bne.n	8008ea8 <HAL_SPI_TransmitReceive+0x1f2>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d016      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	b292      	uxth	r2, r2
 8008e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8c:	1c9a      	adds	r2, r3, #2
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ea8:	f7fc fea4 	bl	8005bf4 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d807      	bhi.n	8008ec8 <HAL_SPI_TransmitReceive+0x212>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d003      	beq.n	8008ec8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008ec6:	e0fb      	b.n	80090c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1a3      	bne.n	8008e1a <HAL_SPI_TransmitReceive+0x164>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d19d      	bne.n	8008e1a <HAL_SPI_TransmitReceive+0x164>
 8008ede:	e0df      	b.n	80090a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <HAL_SPI_TransmitReceive+0x23a>
 8008ee8:	8a7b      	ldrh	r3, [r7, #18]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	f040 80cb 	bne.w	8009086 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d912      	bls.n	8008f20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	881a      	ldrh	r2, [r3, #0]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	1c9a      	adds	r2, r3, #2
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b02      	subs	r3, #2
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f1e:	e0b2      	b.n	8009086 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f46:	e09e      	b.n	8009086 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d134      	bne.n	8008fc0 <HAL_SPI_TransmitReceive+0x30a>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d02f      	beq.n	8008fc0 <HAL_SPI_TransmitReceive+0x30a>
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d12c      	bne.n	8008fc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d912      	bls.n	8008f96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f74:	881a      	ldrh	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	1c9a      	adds	r2, r3, #2
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3b02      	subs	r3, #2
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f94:	e012      	b.n	8008fbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	330c      	adds	r3, #12
 8008fa0:	7812      	ldrb	r2, [r2, #0]
 8008fa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d148      	bne.n	8009060 <HAL_SPI_TransmitReceive+0x3aa>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d042      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d923      	bls.n	800902e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff0:	b292      	uxth	r2, r2
 8008ff2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	1c9a      	adds	r2, r3, #2
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b02      	subs	r3, #2
 8009008:	b29a      	uxth	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009016:	b29b      	uxth	r3, r3
 8009018:	2b01      	cmp	r3, #1
 800901a:	d81f      	bhi.n	800905c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800902a:	605a      	str	r2, [r3, #4]
 800902c:	e016      	b.n	800905c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f103 020c 	add.w	r2, r3, #12
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	7812      	ldrb	r2, [r2, #0]
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800905c:	2301      	movs	r3, #1
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009060:	f7fc fdc8 	bl	8005bf4 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906c:	429a      	cmp	r2, r3
 800906e:	d803      	bhi.n	8009078 <HAL_SPI_TransmitReceive+0x3c2>
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009076:	d102      	bne.n	800907e <HAL_SPI_TransmitReceive+0x3c8>
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	2b00      	cmp	r3, #0
 800907c:	d103      	bne.n	8009086 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009084:	e01c      	b.n	80090c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908a:	b29b      	uxth	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	f47f af5b 	bne.w	8008f48 <HAL_SPI_TransmitReceive+0x292>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	f47f af54 	bne.w	8008f48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090a0:	69fa      	ldr	r2, [r7, #28]
 80090a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f9b3 	bl	8009410 <SPI_EndRxTxTransaction>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2220      	movs	r2, #32
 80090ba:	661a      	str	r2, [r3, #96]	; 0x60
 80090bc:	e000      	b.n	80090c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80090be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80090d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3728      	adds	r7, #40	; 0x28
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	4613      	mov	r3, r2
 80090ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090ec:	f7fc fd82 	bl	8005bf4 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	1a9b      	subs	r3, r3, r2
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	4413      	add	r3, r2
 80090fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090fc:	f7fc fd7a 	bl	8005bf4 <HAL_GetTick>
 8009100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009102:	4b39      	ldr	r3, [pc, #228]	; (80091e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	015b      	lsls	r3, r3, #5
 8009108:	0d1b      	lsrs	r3, r3, #20
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	fb02 f303 	mul.w	r3, r2, r3
 8009110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009112:	e054      	b.n	80091be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911a:	d050      	beq.n	80091be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800911c:	f7fc fd6a 	bl	8005bf4 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	429a      	cmp	r2, r3
 800912a:	d902      	bls.n	8009132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d13d      	bne.n	80091ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800914a:	d111      	bne.n	8009170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009154:	d004      	beq.n	8009160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800915e:	d107      	bne.n	8009170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800916e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009178:	d10f      	bne.n	800919a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e017      	b.n	80091de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80091b4:	2300      	movs	r3, #0
 80091b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4013      	ands	r3, r2
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	bf0c      	ite	eq
 80091ce:	2301      	moveq	r3, #1
 80091d0:	2300      	movne	r3, #0
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d19b      	bne.n	8009114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000008 	.word	0x20000008

080091ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	; 0x28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80091fe:	f7fc fcf9 	bl	8005bf4 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	1a9b      	subs	r3, r3, r2
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	4413      	add	r3, r2
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800920e:	f7fc fcf1 	bl	8005bf4 <HAL_GetTick>
 8009212:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800921c:	4b3d      	ldr	r3, [pc, #244]	; (8009314 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	4613      	mov	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	00da      	lsls	r2, r3, #3
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	0d1b      	lsrs	r3, r3, #20
 800922c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922e:	fb02 f303 	mul.w	r3, r2, r3
 8009232:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009234:	e060      	b.n	80092f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800923c:	d107      	bne.n	800924e <SPI_WaitFifoStateUntilTimeout+0x62>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d104      	bne.n	800924e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800924c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d050      	beq.n	80092f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009256:	f7fc fccd 	bl	8005bf4 <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009262:	429a      	cmp	r2, r3
 8009264:	d902      	bls.n	800926c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	2b00      	cmp	r3, #0
 800926a:	d13d      	bne.n	80092e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800927a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009284:	d111      	bne.n	80092aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800928e:	d004      	beq.n	800929a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009298:	d107      	bne.n	80092aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b2:	d10f      	bne.n	80092d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e010      	b.n	800930a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d101      	bne.n	80092f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689a      	ldr	r2, [r3, #8]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	4013      	ands	r3, r2
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d196      	bne.n	8009236 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3728      	adds	r7, #40	; 0x28
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20000008 	.word	0x20000008

08009318 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af02      	add	r7, sp, #8
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800932c:	d111      	bne.n	8009352 <SPI_EndRxTransaction+0x3a>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009336:	d004      	beq.n	8009342 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009340:	d107      	bne.n	8009352 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009350:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800935a:	d112      	bne.n	8009382 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2200      	movs	r2, #0
 8009364:	2180      	movs	r1, #128	; 0x80
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7ff feb8 	bl	80090dc <SPI_WaitFlagStateUntilTimeout>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d021      	beq.n	80093b6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009376:	f043 0220 	orr.w	r2, r3, #32
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e03d      	b.n	80093fe <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009382:	4b21      	ldr	r3, [pc, #132]	; (8009408 <SPI_EndRxTransaction+0xf0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a21      	ldr	r2, [pc, #132]	; (800940c <SPI_EndRxTransaction+0xf4>)
 8009388:	fba2 2303 	umull	r2, r3, r2, r3
 800938c:	0d5b      	lsrs	r3, r3, #21
 800938e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009392:	fb02 f303 	mul.w	r3, r2, r3
 8009396:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ae:	2b80      	cmp	r3, #128	; 0x80
 80093b0:	d0f2      	beq.n	8009398 <SPI_EndRxTransaction+0x80>
 80093b2:	e000      	b.n	80093b6 <SPI_EndRxTransaction+0x9e>
        break;
 80093b4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093be:	d11d      	bne.n	80093fc <SPI_EndRxTransaction+0xe4>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093c8:	d004      	beq.n	80093d4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d2:	d113      	bne.n	80093fc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2200      	movs	r2, #0
 80093dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f7ff ff03 	bl	80091ec <SPI_WaitFifoStateUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d007      	beq.n	80093fc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f0:	f043 0220 	orr.w	r2, r3, #32
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e000      	b.n	80093fe <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000008 	.word	0x20000008
 800940c:	165e9f81 	.word	0x165e9f81

08009410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2200      	movs	r2, #0
 8009424:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff fedf 	bl	80091ec <SPI_WaitFifoStateUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d007      	beq.n	8009444 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009438:	f043 0220 	orr.w	r2, r3, #32
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e046      	b.n	80094d2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009444:	4b25      	ldr	r3, [pc, #148]	; (80094dc <SPI_EndRxTxTransaction+0xcc>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a25      	ldr	r2, [pc, #148]	; (80094e0 <SPI_EndRxTxTransaction+0xd0>)
 800944a:	fba2 2303 	umull	r2, r3, r2, r3
 800944e:	0d5b      	lsrs	r3, r3, #21
 8009450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009454:	fb02 f303 	mul.w	r3, r2, r3
 8009458:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009462:	d112      	bne.n	800948a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2200      	movs	r2, #0
 800946c:	2180      	movs	r1, #128	; 0x80
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f7ff fe34 	bl	80090dc <SPI_WaitFlagStateUntilTimeout>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d016      	beq.n	80094a8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800947e:	f043 0220 	orr.w	r2, r3, #32
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e023      	b.n	80094d2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00a      	beq.n	80094a6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	3b01      	subs	r3, #1
 8009494:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a0:	2b80      	cmp	r3, #128	; 0x80
 80094a2:	d0f2      	beq.n	800948a <SPI_EndRxTxTransaction+0x7a>
 80094a4:	e000      	b.n	80094a8 <SPI_EndRxTxTransaction+0x98>
        break;
 80094a6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7ff fe99 	bl	80091ec <SPI_WaitFifoStateUntilTimeout>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d007      	beq.n	80094d0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094c4:	f043 0220 	orr.w	r2, r3, #32
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e000      	b.n	80094d2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000008 	.word	0x20000008
 80094e0:	165e9f81 	.word	0x165e9f81

080094e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e049      	b.n	800958a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7f9 ffe8 	bl	80034e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3304      	adds	r3, #4
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f000 ffae 	bl	800a484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d001      	beq.n	80095ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e054      	b.n	8009656 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68da      	ldr	r2, [r3, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0201 	orr.w	r2, r2, #1
 80095c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a26      	ldr	r2, [pc, #152]	; (8009664 <HAL_TIM_Base_Start_IT+0xd0>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d022      	beq.n	8009614 <HAL_TIM_Base_Start_IT+0x80>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d6:	d01d      	beq.n	8009614 <HAL_TIM_Base_Start_IT+0x80>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a22      	ldr	r2, [pc, #136]	; (8009668 <HAL_TIM_Base_Start_IT+0xd4>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d018      	beq.n	8009614 <HAL_TIM_Base_Start_IT+0x80>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a21      	ldr	r2, [pc, #132]	; (800966c <HAL_TIM_Base_Start_IT+0xd8>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d013      	beq.n	8009614 <HAL_TIM_Base_Start_IT+0x80>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1f      	ldr	r2, [pc, #124]	; (8009670 <HAL_TIM_Base_Start_IT+0xdc>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d00e      	beq.n	8009614 <HAL_TIM_Base_Start_IT+0x80>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a1e      	ldr	r2, [pc, #120]	; (8009674 <HAL_TIM_Base_Start_IT+0xe0>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d009      	beq.n	8009614 <HAL_TIM_Base_Start_IT+0x80>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a1c      	ldr	r2, [pc, #112]	; (8009678 <HAL_TIM_Base_Start_IT+0xe4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d004      	beq.n	8009614 <HAL_TIM_Base_Start_IT+0x80>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a1b      	ldr	r2, [pc, #108]	; (800967c <HAL_TIM_Base_Start_IT+0xe8>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d115      	bne.n	8009640 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	4b19      	ldr	r3, [pc, #100]	; (8009680 <HAL_TIM_Base_Start_IT+0xec>)
 800961c:	4013      	ands	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b06      	cmp	r3, #6
 8009624:	d015      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0xbe>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800962c:	d011      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0201 	orr.w	r2, r2, #1
 800963c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800963e:	e008      	b.n	8009652 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0201 	orr.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	e000      	b.n	8009654 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009652:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	40010000 	.word	0x40010000
 8009668:	40000400 	.word	0x40000400
 800966c:	40000800 	.word	0x40000800
 8009670:	40000c00 	.word	0x40000c00
 8009674:	40010400 	.word	0x40010400
 8009678:	40014000 	.word	0x40014000
 800967c:	40001800 	.word	0x40001800
 8009680:	00010007 	.word	0x00010007

08009684 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e049      	b.n	800972a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f841 	bl	8009732 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f000 fede 	bl	800a484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d109      	bne.n	800976c <HAL_TIM_PWM_Start+0x24>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	bf14      	ite	ne
 8009764:	2301      	movne	r3, #1
 8009766:	2300      	moveq	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	e03c      	b.n	80097e6 <HAL_TIM_PWM_Start+0x9e>
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b04      	cmp	r3, #4
 8009770:	d109      	bne.n	8009786 <HAL_TIM_PWM_Start+0x3e>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b01      	cmp	r3, #1
 800977c:	bf14      	ite	ne
 800977e:	2301      	movne	r3, #1
 8009780:	2300      	moveq	r3, #0
 8009782:	b2db      	uxtb	r3, r3
 8009784:	e02f      	b.n	80097e6 <HAL_TIM_PWM_Start+0x9e>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b08      	cmp	r3, #8
 800978a:	d109      	bne.n	80097a0 <HAL_TIM_PWM_Start+0x58>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b01      	cmp	r3, #1
 8009796:	bf14      	ite	ne
 8009798:	2301      	movne	r3, #1
 800979a:	2300      	moveq	r3, #0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	e022      	b.n	80097e6 <HAL_TIM_PWM_Start+0x9e>
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2b0c      	cmp	r3, #12
 80097a4:	d109      	bne.n	80097ba <HAL_TIM_PWM_Start+0x72>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	bf14      	ite	ne
 80097b2:	2301      	movne	r3, #1
 80097b4:	2300      	moveq	r3, #0
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	e015      	b.n	80097e6 <HAL_TIM_PWM_Start+0x9e>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b10      	cmp	r3, #16
 80097be:	d109      	bne.n	80097d4 <HAL_TIM_PWM_Start+0x8c>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	bf14      	ite	ne
 80097cc:	2301      	movne	r3, #1
 80097ce:	2300      	moveq	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	e008      	b.n	80097e6 <HAL_TIM_PWM_Start+0x9e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b01      	cmp	r3, #1
 80097de:	bf14      	ite	ne
 80097e0:	2301      	movne	r3, #1
 80097e2:	2300      	moveq	r3, #0
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e092      	b.n	8009914 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d104      	bne.n	80097fe <HAL_TIM_PWM_Start+0xb6>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097fc:	e023      	b.n	8009846 <HAL_TIM_PWM_Start+0xfe>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b04      	cmp	r3, #4
 8009802:	d104      	bne.n	800980e <HAL_TIM_PWM_Start+0xc6>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800980c:	e01b      	b.n	8009846 <HAL_TIM_PWM_Start+0xfe>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b08      	cmp	r3, #8
 8009812:	d104      	bne.n	800981e <HAL_TIM_PWM_Start+0xd6>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800981c:	e013      	b.n	8009846 <HAL_TIM_PWM_Start+0xfe>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b0c      	cmp	r3, #12
 8009822:	d104      	bne.n	800982e <HAL_TIM_PWM_Start+0xe6>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800982c:	e00b      	b.n	8009846 <HAL_TIM_PWM_Start+0xfe>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b10      	cmp	r3, #16
 8009832:	d104      	bne.n	800983e <HAL_TIM_PWM_Start+0xf6>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800983c:	e003      	b.n	8009846 <HAL_TIM_PWM_Start+0xfe>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2202      	movs	r2, #2
 8009842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2201      	movs	r2, #1
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	4618      	mov	r0, r3
 8009850:	f001 fada 	bl	800ae08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a30      	ldr	r2, [pc, #192]	; (800991c <HAL_TIM_PWM_Start+0x1d4>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d004      	beq.n	8009868 <HAL_TIM_PWM_Start+0x120>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a2f      	ldr	r2, [pc, #188]	; (8009920 <HAL_TIM_PWM_Start+0x1d8>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d101      	bne.n	800986c <HAL_TIM_PWM_Start+0x124>
 8009868:	2301      	movs	r3, #1
 800986a:	e000      	b.n	800986e <HAL_TIM_PWM_Start+0x126>
 800986c:	2300      	movs	r3, #0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d007      	beq.n	8009882 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009880:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a25      	ldr	r2, [pc, #148]	; (800991c <HAL_TIM_PWM_Start+0x1d4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d022      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x18a>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009894:	d01d      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x18a>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a22      	ldr	r2, [pc, #136]	; (8009924 <HAL_TIM_PWM_Start+0x1dc>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d018      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x18a>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a20      	ldr	r2, [pc, #128]	; (8009928 <HAL_TIM_PWM_Start+0x1e0>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d013      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x18a>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a1f      	ldr	r2, [pc, #124]	; (800992c <HAL_TIM_PWM_Start+0x1e4>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00e      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x18a>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a19      	ldr	r2, [pc, #100]	; (8009920 <HAL_TIM_PWM_Start+0x1d8>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d009      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x18a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a1b      	ldr	r2, [pc, #108]	; (8009930 <HAL_TIM_PWM_Start+0x1e8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d004      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x18a>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a19      	ldr	r2, [pc, #100]	; (8009934 <HAL_TIM_PWM_Start+0x1ec>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d115      	bne.n	80098fe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	4b17      	ldr	r3, [pc, #92]	; (8009938 <HAL_TIM_PWM_Start+0x1f0>)
 80098da:	4013      	ands	r3, r2
 80098dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b06      	cmp	r3, #6
 80098e2:	d015      	beq.n	8009910 <HAL_TIM_PWM_Start+0x1c8>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ea:	d011      	beq.n	8009910 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fc:	e008      	b.n	8009910 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0201 	orr.w	r2, r2, #1
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e000      	b.n	8009912 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009910:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	40010000 	.word	0x40010000
 8009920:	40010400 	.word	0x40010400
 8009924:	40000400 	.word	0x40000400
 8009928:	40000800 	.word	0x40000800
 800992c:	40000c00 	.word	0x40000c00
 8009930:	40014000 	.word	0x40014000
 8009934:	40001800 	.word	0x40001800
 8009938:	00010007 	.word	0x00010007

0800993c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e049      	b.n	80099e2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7f9 fddc 	bl	8003520 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3304      	adds	r3, #4
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f000 fd82 	bl	800a484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <HAL_TIM_IC_Start_IT+0x1e>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	e023      	b.n	8009a52 <HAL_TIM_IC_Start_IT+0x66>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d104      	bne.n	8009a1a <HAL_TIM_IC_Start_IT+0x2e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	e01b      	b.n	8009a52 <HAL_TIM_IC_Start_IT+0x66>
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d104      	bne.n	8009a2a <HAL_TIM_IC_Start_IT+0x3e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	e013      	b.n	8009a52 <HAL_TIM_IC_Start_IT+0x66>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b0c      	cmp	r3, #12
 8009a2e:	d104      	bne.n	8009a3a <HAL_TIM_IC_Start_IT+0x4e>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	e00b      	b.n	8009a52 <HAL_TIM_IC_Start_IT+0x66>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d104      	bne.n	8009a4a <HAL_TIM_IC_Start_IT+0x5e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	e003      	b.n	8009a52 <HAL_TIM_IC_Start_IT+0x66>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d104      	bne.n	8009a64 <HAL_TIM_IC_Start_IT+0x78>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	e013      	b.n	8009a8c <HAL_TIM_IC_Start_IT+0xa0>
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2b04      	cmp	r3, #4
 8009a68:	d104      	bne.n	8009a74 <HAL_TIM_IC_Start_IT+0x88>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	e00b      	b.n	8009a8c <HAL_TIM_IC_Start_IT+0xa0>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b08      	cmp	r3, #8
 8009a78:	d104      	bne.n	8009a84 <HAL_TIM_IC_Start_IT+0x98>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	e003      	b.n	8009a8c <HAL_TIM_IC_Start_IT+0xa0>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d102      	bne.n	8009a9a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a94:	7b7b      	ldrb	r3, [r7, #13]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d001      	beq.n	8009a9e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e0e2      	b.n	8009c64 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d104      	bne.n	8009aae <HAL_TIM_IC_Start_IT+0xc2>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009aac:	e023      	b.n	8009af6 <HAL_TIM_IC_Start_IT+0x10a>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_IC_Start_IT+0xd2>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009abc:	e01b      	b.n	8009af6 <HAL_TIM_IC_Start_IT+0x10a>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b08      	cmp	r3, #8
 8009ac2:	d104      	bne.n	8009ace <HAL_TIM_IC_Start_IT+0xe2>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009acc:	e013      	b.n	8009af6 <HAL_TIM_IC_Start_IT+0x10a>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b0c      	cmp	r3, #12
 8009ad2:	d104      	bne.n	8009ade <HAL_TIM_IC_Start_IT+0xf2>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009adc:	e00b      	b.n	8009af6 <HAL_TIM_IC_Start_IT+0x10a>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b10      	cmp	r3, #16
 8009ae2:	d104      	bne.n	8009aee <HAL_TIM_IC_Start_IT+0x102>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aec:	e003      	b.n	8009af6 <HAL_TIM_IC_Start_IT+0x10a>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2202      	movs	r2, #2
 8009af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d104      	bne.n	8009b06 <HAL_TIM_IC_Start_IT+0x11a>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b04:	e013      	b.n	8009b2e <HAL_TIM_IC_Start_IT+0x142>
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	d104      	bne.n	8009b16 <HAL_TIM_IC_Start_IT+0x12a>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b14:	e00b      	b.n	8009b2e <HAL_TIM_IC_Start_IT+0x142>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d104      	bne.n	8009b26 <HAL_TIM_IC_Start_IT+0x13a>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b24:	e003      	b.n	8009b2e <HAL_TIM_IC_Start_IT+0x142>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2202      	movs	r2, #2
 8009b2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b0c      	cmp	r3, #12
 8009b32:	d841      	bhi.n	8009bb8 <HAL_TIM_IC_Start_IT+0x1cc>
 8009b34:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <HAL_TIM_IC_Start_IT+0x150>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b71 	.word	0x08009b71
 8009b40:	08009bb9 	.word	0x08009bb9
 8009b44:	08009bb9 	.word	0x08009bb9
 8009b48:	08009bb9 	.word	0x08009bb9
 8009b4c:	08009b83 	.word	0x08009b83
 8009b50:	08009bb9 	.word	0x08009bb9
 8009b54:	08009bb9 	.word	0x08009bb9
 8009b58:	08009bb9 	.word	0x08009bb9
 8009b5c:	08009b95 	.word	0x08009b95
 8009b60:	08009bb9 	.word	0x08009bb9
 8009b64:	08009bb9 	.word	0x08009bb9
 8009b68:	08009bb9 	.word	0x08009bb9
 8009b6c:	08009ba7 	.word	0x08009ba7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68da      	ldr	r2, [r3, #12]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0202 	orr.w	r2, r2, #2
 8009b7e:	60da      	str	r2, [r3, #12]
      break;
 8009b80:	e01d      	b.n	8009bbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f042 0204 	orr.w	r2, r2, #4
 8009b90:	60da      	str	r2, [r3, #12]
      break;
 8009b92:	e014      	b.n	8009bbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68da      	ldr	r2, [r3, #12]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f042 0208 	orr.w	r2, r2, #8
 8009ba2:	60da      	str	r2, [r3, #12]
      break;
 8009ba4:	e00b      	b.n	8009bbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0210 	orr.w	r2, r2, #16
 8009bb4:	60da      	str	r2, [r3, #12]
      break;
 8009bb6:	e002      	b.n	8009bbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	73fb      	strb	r3, [r7, #15]
      break;
 8009bbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d14e      	bne.n	8009c62 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 f91b 	bl	800ae08 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a25      	ldr	r2, [pc, #148]	; (8009c6c <HAL_TIM_IC_Start_IT+0x280>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d022      	beq.n	8009c22 <HAL_TIM_IC_Start_IT+0x236>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be4:	d01d      	beq.n	8009c22 <HAL_TIM_IC_Start_IT+0x236>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a21      	ldr	r2, [pc, #132]	; (8009c70 <HAL_TIM_IC_Start_IT+0x284>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d018      	beq.n	8009c22 <HAL_TIM_IC_Start_IT+0x236>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a1f      	ldr	r2, [pc, #124]	; (8009c74 <HAL_TIM_IC_Start_IT+0x288>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d013      	beq.n	8009c22 <HAL_TIM_IC_Start_IT+0x236>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a1e      	ldr	r2, [pc, #120]	; (8009c78 <HAL_TIM_IC_Start_IT+0x28c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d00e      	beq.n	8009c22 <HAL_TIM_IC_Start_IT+0x236>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a1c      	ldr	r2, [pc, #112]	; (8009c7c <HAL_TIM_IC_Start_IT+0x290>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d009      	beq.n	8009c22 <HAL_TIM_IC_Start_IT+0x236>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <HAL_TIM_IC_Start_IT+0x294>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d004      	beq.n	8009c22 <HAL_TIM_IC_Start_IT+0x236>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a19      	ldr	r2, [pc, #100]	; (8009c84 <HAL_TIM_IC_Start_IT+0x298>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d115      	bne.n	8009c4e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	4b17      	ldr	r3, [pc, #92]	; (8009c88 <HAL_TIM_IC_Start_IT+0x29c>)
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b06      	cmp	r3, #6
 8009c32:	d015      	beq.n	8009c60 <HAL_TIM_IC_Start_IT+0x274>
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c3a:	d011      	beq.n	8009c60 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0201 	orr.w	r2, r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c4c:	e008      	b.n	8009c60 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f042 0201 	orr.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	e000      	b.n	8009c62 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c60:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	40010000 	.word	0x40010000
 8009c70:	40000400 	.word	0x40000400
 8009c74:	40000800 	.word	0x40000800
 8009c78:	40000c00 	.word	0x40000c00
 8009c7c:	40010400 	.word	0x40010400
 8009c80:	40014000 	.word	0x40014000
 8009c84:	40001800 	.word	0x40001800
 8009c88:	00010007 	.word	0x00010007

08009c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d122      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f003 0302 	and.w	r3, r3, #2
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d11b      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0202 	mvn.w	r2, #2
 8009cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f003 0303 	and.w	r3, r3, #3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7f8 fd34 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8009cd4:	e005      	b.n	8009ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fbb6 	bl	800a448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fbbd 	bl	800a45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	2b04      	cmp	r3, #4
 8009cf4:	d122      	bne.n	8009d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	d11b      	bne.n	8009d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0204 	mvn.w	r2, #4
 8009d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2202      	movs	r2, #2
 8009d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7f8 fd0a 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8009d28:	e005      	b.n	8009d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fb8c 	bl	800a448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fb93 	bl	800a45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 0308 	and.w	r3, r3, #8
 8009d46:	2b08      	cmp	r3, #8
 8009d48:	d122      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f003 0308 	and.w	r3, r3, #8
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d11b      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0208 	mvn.w	r2, #8
 8009d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2204      	movs	r2, #4
 8009d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	f003 0303 	and.w	r3, r3, #3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f8 fce0 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8009d7c:	e005      	b.n	8009d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fb62 	bl	800a448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fb69 	bl	800a45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	f003 0310 	and.w	r3, r3, #16
 8009d9a:	2b10      	cmp	r3, #16
 8009d9c:	d122      	bne.n	8009de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f003 0310 	and.w	r3, r3, #16
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	d11b      	bne.n	8009de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f06f 0210 	mvn.w	r2, #16
 8009db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2208      	movs	r2, #8
 8009dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7f8 fcb6 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8009dd0:	e005      	b.n	8009dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fb38 	bl	800a448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fb3f 	bl	800a45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d10e      	bne.n	8009e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d107      	bne.n	8009e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f06f 0201 	mvn.w	r2, #1
 8009e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7f9 fa56 	bl	80032bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1a:	2b80      	cmp	r3, #128	; 0x80
 8009e1c:	d10e      	bne.n	8009e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e28:	2b80      	cmp	r3, #128	; 0x80
 8009e2a:	d107      	bne.n	8009e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 f922 	bl	800b080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4a:	d10e      	bne.n	8009e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e56:	2b80      	cmp	r3, #128	; 0x80
 8009e58:	d107      	bne.n	8009e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 f915 	bl	800b094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d10e      	bne.n	8009e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e82:	2b40      	cmp	r3, #64	; 0x40
 8009e84:	d107      	bne.n	8009e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 faed 	bl	800a470 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	f003 0320 	and.w	r3, r3, #32
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	d10e      	bne.n	8009ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f003 0320 	and.w	r3, r3, #32
 8009eae:	2b20      	cmp	r3, #32
 8009eb0:	d107      	bne.n	8009ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f06f 0220 	mvn.w	r2, #32
 8009eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f8d5 	bl	800b06c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ec2:	bf00      	nop
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b086      	sub	sp, #24
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d101      	bne.n	8009ee8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e088      	b.n	8009ffa <HAL_TIM_IC_ConfigChannel+0x130>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d11b      	bne.n	8009f2e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009f06:	f000 fdbb 	bl	800aa80 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	699a      	ldr	r2, [r3, #24]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 020c 	bic.w	r2, r2, #12
 8009f18:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6999      	ldr	r1, [r3, #24]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	619a      	str	r2, [r3, #24]
 8009f2c:	e060      	b.n	8009ff0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d11c      	bne.n	8009f6e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009f44:	f000 fe3f 	bl	800abc6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f56:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6999      	ldr	r1, [r3, #24]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	021a      	lsls	r2, r3, #8
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	619a      	str	r2, [r3, #24]
 8009f6c:	e040      	b.n	8009ff0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b08      	cmp	r3, #8
 8009f72:	d11b      	bne.n	8009fac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009f84:	f000 fe8c 	bl	800aca0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	69da      	ldr	r2, [r3, #28]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f022 020c 	bic.w	r2, r2, #12
 8009f96:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	69d9      	ldr	r1, [r3, #28]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	689a      	ldr	r2, [r3, #8]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	61da      	str	r2, [r3, #28]
 8009faa:	e021      	b.n	8009ff0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b0c      	cmp	r3, #12
 8009fb0:	d11c      	bne.n	8009fec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009fc2:	f000 fea9 	bl	800ad18 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009fd4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69d9      	ldr	r1, [r3, #28]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	021a      	lsls	r2, r3, #8
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	61da      	str	r2, [r3, #28]
 8009fea:	e001      	b.n	8009ff0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a01e:	2302      	movs	r3, #2
 800a020:	e0ff      	b.n	800a222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b14      	cmp	r3, #20
 800a02e:	f200 80f0 	bhi.w	800a212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a032:	a201      	add	r2, pc, #4	; (adr r2, 800a038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a038:	0800a08d 	.word	0x0800a08d
 800a03c:	0800a213 	.word	0x0800a213
 800a040:	0800a213 	.word	0x0800a213
 800a044:	0800a213 	.word	0x0800a213
 800a048:	0800a0cd 	.word	0x0800a0cd
 800a04c:	0800a213 	.word	0x0800a213
 800a050:	0800a213 	.word	0x0800a213
 800a054:	0800a213 	.word	0x0800a213
 800a058:	0800a10f 	.word	0x0800a10f
 800a05c:	0800a213 	.word	0x0800a213
 800a060:	0800a213 	.word	0x0800a213
 800a064:	0800a213 	.word	0x0800a213
 800a068:	0800a14f 	.word	0x0800a14f
 800a06c:	0800a213 	.word	0x0800a213
 800a070:	0800a213 	.word	0x0800a213
 800a074:	0800a213 	.word	0x0800a213
 800a078:	0800a191 	.word	0x0800a191
 800a07c:	0800a213 	.word	0x0800a213
 800a080:	0800a213 	.word	0x0800a213
 800a084:	0800a213 	.word	0x0800a213
 800a088:	0800a1d1 	.word	0x0800a1d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68b9      	ldr	r1, [r7, #8]
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fa96 	bl	800a5c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	699a      	ldr	r2, [r3, #24]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f042 0208 	orr.w	r2, r2, #8
 800a0a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f022 0204 	bic.w	r2, r2, #4
 800a0b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6999      	ldr	r1, [r3, #24]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	691a      	ldr	r2, [r3, #16]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	619a      	str	r2, [r3, #24]
      break;
 800a0ca:	e0a5      	b.n	800a218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68b9      	ldr	r1, [r7, #8]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fae8 	bl	800a6a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	699a      	ldr	r2, [r3, #24]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	699a      	ldr	r2, [r3, #24]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6999      	ldr	r1, [r3, #24]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	021a      	lsls	r2, r3, #8
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	430a      	orrs	r2, r1
 800a10a:	619a      	str	r2, [r3, #24]
      break;
 800a10c:	e084      	b.n	800a218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fb3f 	bl	800a798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69da      	ldr	r2, [r3, #28]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f042 0208 	orr.w	r2, r2, #8
 800a128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	69da      	ldr	r2, [r3, #28]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 0204 	bic.w	r2, r2, #4
 800a138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	69d9      	ldr	r1, [r3, #28]
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	430a      	orrs	r2, r1
 800a14a:	61da      	str	r2, [r3, #28]
      break;
 800a14c:	e064      	b.n	800a218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68b9      	ldr	r1, [r7, #8]
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fb95 	bl	800a884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69da      	ldr	r2, [r3, #28]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	69da      	ldr	r2, [r3, #28]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	69d9      	ldr	r1, [r3, #28]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	021a      	lsls	r2, r3, #8
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	61da      	str	r2, [r3, #28]
      break;
 800a18e:	e043      	b.n	800a218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fbcc 	bl	800a934 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f042 0208 	orr.w	r2, r2, #8
 800a1aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f022 0204 	bic.w	r2, r2, #4
 800a1ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	691a      	ldr	r2, [r3, #16]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1ce:	e023      	b.n	800a218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68b9      	ldr	r1, [r7, #8]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fbfe 	bl	800a9d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	021a      	lsls	r2, r3, #8
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	430a      	orrs	r2, r1
 800a20e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a210:	e002      	b.n	800a218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	75fb      	strb	r3, [r7, #23]
      break;
 800a216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a220:	7dfb      	ldrb	r3, [r7, #23]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop

0800a22c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a240:	2b01      	cmp	r3, #1
 800a242:	d101      	bne.n	800a248 <HAL_TIM_ConfigClockSource+0x1c>
 800a244:	2302      	movs	r3, #2
 800a246:	e0b4      	b.n	800a3b2 <HAL_TIM_ConfigClockSource+0x186>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	4b56      	ldr	r3, [pc, #344]	; (800a3bc <HAL_TIM_ConfigClockSource+0x190>)
 800a264:	4013      	ands	r3, r2
 800a266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a26e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a280:	d03e      	beq.n	800a300 <HAL_TIM_ConfigClockSource+0xd4>
 800a282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a286:	f200 8087 	bhi.w	800a398 <HAL_TIM_ConfigClockSource+0x16c>
 800a28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a28e:	f000 8086 	beq.w	800a39e <HAL_TIM_ConfigClockSource+0x172>
 800a292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a296:	d87f      	bhi.n	800a398 <HAL_TIM_ConfigClockSource+0x16c>
 800a298:	2b70      	cmp	r3, #112	; 0x70
 800a29a:	d01a      	beq.n	800a2d2 <HAL_TIM_ConfigClockSource+0xa6>
 800a29c:	2b70      	cmp	r3, #112	; 0x70
 800a29e:	d87b      	bhi.n	800a398 <HAL_TIM_ConfigClockSource+0x16c>
 800a2a0:	2b60      	cmp	r3, #96	; 0x60
 800a2a2:	d050      	beq.n	800a346 <HAL_TIM_ConfigClockSource+0x11a>
 800a2a4:	2b60      	cmp	r3, #96	; 0x60
 800a2a6:	d877      	bhi.n	800a398 <HAL_TIM_ConfigClockSource+0x16c>
 800a2a8:	2b50      	cmp	r3, #80	; 0x50
 800a2aa:	d03c      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0xfa>
 800a2ac:	2b50      	cmp	r3, #80	; 0x50
 800a2ae:	d873      	bhi.n	800a398 <HAL_TIM_ConfigClockSource+0x16c>
 800a2b0:	2b40      	cmp	r3, #64	; 0x40
 800a2b2:	d058      	beq.n	800a366 <HAL_TIM_ConfigClockSource+0x13a>
 800a2b4:	2b40      	cmp	r3, #64	; 0x40
 800a2b6:	d86f      	bhi.n	800a398 <HAL_TIM_ConfigClockSource+0x16c>
 800a2b8:	2b30      	cmp	r3, #48	; 0x30
 800a2ba:	d064      	beq.n	800a386 <HAL_TIM_ConfigClockSource+0x15a>
 800a2bc:	2b30      	cmp	r3, #48	; 0x30
 800a2be:	d86b      	bhi.n	800a398 <HAL_TIM_ConfigClockSource+0x16c>
 800a2c0:	2b20      	cmp	r3, #32
 800a2c2:	d060      	beq.n	800a386 <HAL_TIM_ConfigClockSource+0x15a>
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	d867      	bhi.n	800a398 <HAL_TIM_ConfigClockSource+0x16c>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d05c      	beq.n	800a386 <HAL_TIM_ConfigClockSource+0x15a>
 800a2cc:	2b10      	cmp	r3, #16
 800a2ce:	d05a      	beq.n	800a386 <HAL_TIM_ConfigClockSource+0x15a>
 800a2d0:	e062      	b.n	800a398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2e2:	f000 fd71 	bl	800adc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	609a      	str	r2, [r3, #8]
      break;
 800a2fe:	e04f      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a310:	f000 fd5a 	bl	800adc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	689a      	ldr	r2, [r3, #8]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a322:	609a      	str	r2, [r3, #8]
      break;
 800a324:	e03c      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a332:	461a      	mov	r2, r3
 800a334:	f000 fc18 	bl	800ab68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2150      	movs	r1, #80	; 0x50
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fd27 	bl	800ad92 <TIM_ITRx_SetConfig>
      break;
 800a344:	e02c      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a352:	461a      	mov	r2, r3
 800a354:	f000 fc74 	bl	800ac40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2160      	movs	r1, #96	; 0x60
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fd17 	bl	800ad92 <TIM_ITRx_SetConfig>
      break;
 800a364:	e01c      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a372:	461a      	mov	r2, r3
 800a374:	f000 fbf8 	bl	800ab68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2140      	movs	r1, #64	; 0x40
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fd07 	bl	800ad92 <TIM_ITRx_SetConfig>
      break;
 800a384:	e00c      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4619      	mov	r1, r3
 800a390:	4610      	mov	r0, r2
 800a392:	f000 fcfe 	bl	800ad92 <TIM_ITRx_SetConfig>
      break;
 800a396:	e003      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]
      break;
 800a39c:	e000      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a39e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	fffeff88 	.word	0xfffeff88

0800a3c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2b0c      	cmp	r3, #12
 800a3d2:	d831      	bhi.n	800a438 <HAL_TIM_ReadCapturedValue+0x78>
 800a3d4:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <HAL_TIM_ReadCapturedValue+0x1c>)
 800a3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3da:	bf00      	nop
 800a3dc:	0800a411 	.word	0x0800a411
 800a3e0:	0800a439 	.word	0x0800a439
 800a3e4:	0800a439 	.word	0x0800a439
 800a3e8:	0800a439 	.word	0x0800a439
 800a3ec:	0800a41b 	.word	0x0800a41b
 800a3f0:	0800a439 	.word	0x0800a439
 800a3f4:	0800a439 	.word	0x0800a439
 800a3f8:	0800a439 	.word	0x0800a439
 800a3fc:	0800a425 	.word	0x0800a425
 800a400:	0800a439 	.word	0x0800a439
 800a404:	0800a439 	.word	0x0800a439
 800a408:	0800a439 	.word	0x0800a439
 800a40c:	0800a42f 	.word	0x0800a42f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a416:	60fb      	str	r3, [r7, #12]

      break;
 800a418:	e00f      	b.n	800a43a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a420:	60fb      	str	r3, [r7, #12]

      break;
 800a422:	e00a      	b.n	800a43a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42a:	60fb      	str	r3, [r7, #12]

      break;
 800a42c:	e005      	b.n	800a43a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a434:	60fb      	str	r3, [r7, #12]

      break;
 800a436:	e000      	b.n	800a43a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a438:	bf00      	nop
  }

  return tmpreg;
 800a43a:	68fb      	ldr	r3, [r7, #12]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a40      	ldr	r2, [pc, #256]	; (800a598 <TIM_Base_SetConfig+0x114>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d013      	beq.n	800a4c4 <TIM_Base_SetConfig+0x40>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4a2:	d00f      	beq.n	800a4c4 <TIM_Base_SetConfig+0x40>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a3d      	ldr	r2, [pc, #244]	; (800a59c <TIM_Base_SetConfig+0x118>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d00b      	beq.n	800a4c4 <TIM_Base_SetConfig+0x40>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a3c      	ldr	r2, [pc, #240]	; (800a5a0 <TIM_Base_SetConfig+0x11c>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d007      	beq.n	800a4c4 <TIM_Base_SetConfig+0x40>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a3b      	ldr	r2, [pc, #236]	; (800a5a4 <TIM_Base_SetConfig+0x120>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d003      	beq.n	800a4c4 <TIM_Base_SetConfig+0x40>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a3a      	ldr	r2, [pc, #232]	; (800a5a8 <TIM_Base_SetConfig+0x124>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d108      	bne.n	800a4d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a2f      	ldr	r2, [pc, #188]	; (800a598 <TIM_Base_SetConfig+0x114>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d02b      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e4:	d027      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a2c      	ldr	r2, [pc, #176]	; (800a59c <TIM_Base_SetConfig+0x118>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d023      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a2b      	ldr	r2, [pc, #172]	; (800a5a0 <TIM_Base_SetConfig+0x11c>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d01f      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a2a      	ldr	r2, [pc, #168]	; (800a5a4 <TIM_Base_SetConfig+0x120>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d01b      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a29      	ldr	r2, [pc, #164]	; (800a5a8 <TIM_Base_SetConfig+0x124>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d017      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a28      	ldr	r2, [pc, #160]	; (800a5ac <TIM_Base_SetConfig+0x128>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d013      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a27      	ldr	r2, [pc, #156]	; (800a5b0 <TIM_Base_SetConfig+0x12c>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d00f      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a26      	ldr	r2, [pc, #152]	; (800a5b4 <TIM_Base_SetConfig+0x130>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00b      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a25      	ldr	r2, [pc, #148]	; (800a5b8 <TIM_Base_SetConfig+0x134>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d007      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a24      	ldr	r2, [pc, #144]	; (800a5bc <TIM_Base_SetConfig+0x138>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d003      	beq.n	800a536 <TIM_Base_SetConfig+0xb2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a23      	ldr	r2, [pc, #140]	; (800a5c0 <TIM_Base_SetConfig+0x13c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d108      	bne.n	800a548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a53c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	4313      	orrs	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a0a      	ldr	r2, [pc, #40]	; (800a598 <TIM_Base_SetConfig+0x114>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d003      	beq.n	800a57c <TIM_Base_SetConfig+0xf8>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a0c      	ldr	r2, [pc, #48]	; (800a5a8 <TIM_Base_SetConfig+0x124>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d103      	bne.n	800a584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	691a      	ldr	r2, [r3, #16]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	615a      	str	r2, [r3, #20]
}
 800a58a:	bf00      	nop
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	40010000 	.word	0x40010000
 800a59c:	40000400 	.word	0x40000400
 800a5a0:	40000800 	.word	0x40000800
 800a5a4:	40000c00 	.word	0x40000c00
 800a5a8:	40010400 	.word	0x40010400
 800a5ac:	40014000 	.word	0x40014000
 800a5b0:	40014400 	.word	0x40014400
 800a5b4:	40014800 	.word	0x40014800
 800a5b8:	40001800 	.word	0x40001800
 800a5bc:	40001c00 	.word	0x40001c00
 800a5c0:	40002000 	.word	0x40002000

0800a5c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	f023 0201 	bic.w	r2, r3, #1
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	4b2b      	ldr	r3, [pc, #172]	; (800a69c <TIM_OC1_SetConfig+0xd8>)
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0303 	bic.w	r3, r3, #3
 800a5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f023 0302 	bic.w	r3, r3, #2
 800a60c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a21      	ldr	r2, [pc, #132]	; (800a6a0 <TIM_OC1_SetConfig+0xdc>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d003      	beq.n	800a628 <TIM_OC1_SetConfig+0x64>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a20      	ldr	r2, [pc, #128]	; (800a6a4 <TIM_OC1_SetConfig+0xe0>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d10c      	bne.n	800a642 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	f023 0308 	bic.w	r3, r3, #8
 800a62e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	4313      	orrs	r3, r2
 800a638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f023 0304 	bic.w	r3, r3, #4
 800a640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a16      	ldr	r2, [pc, #88]	; (800a6a0 <TIM_OC1_SetConfig+0xdc>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d003      	beq.n	800a652 <TIM_OC1_SetConfig+0x8e>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a15      	ldr	r2, [pc, #84]	; (800a6a4 <TIM_OC1_SetConfig+0xe0>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d111      	bne.n	800a676 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	4313      	orrs	r3, r2
 800a66a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	4313      	orrs	r3, r2
 800a674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	621a      	str	r2, [r3, #32]
}
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	fffeff8f 	.word	0xfffeff8f
 800a6a0:	40010000 	.word	0x40010000
 800a6a4:	40010400 	.word	0x40010400

0800a6a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	f023 0210 	bic.w	r2, r3, #16
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	4b2e      	ldr	r3, [pc, #184]	; (800a78c <TIM_OC2_SetConfig+0xe4>)
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f023 0320 	bic.w	r3, r3, #32
 800a6f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a23      	ldr	r2, [pc, #140]	; (800a790 <TIM_OC2_SetConfig+0xe8>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d003      	beq.n	800a710 <TIM_OC2_SetConfig+0x68>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a22      	ldr	r2, [pc, #136]	; (800a794 <TIM_OC2_SetConfig+0xec>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d10d      	bne.n	800a72c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	011b      	lsls	r3, r3, #4
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	4313      	orrs	r3, r2
 800a722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a72a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a18      	ldr	r2, [pc, #96]	; (800a790 <TIM_OC2_SetConfig+0xe8>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d003      	beq.n	800a73c <TIM_OC2_SetConfig+0x94>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a17      	ldr	r2, [pc, #92]	; (800a794 <TIM_OC2_SetConfig+0xec>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d113      	bne.n	800a764 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a74a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	4313      	orrs	r3, r2
 800a756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	4313      	orrs	r3, r2
 800a762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	621a      	str	r2, [r3, #32]
}
 800a77e:	bf00      	nop
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	feff8fff 	.word	0xfeff8fff
 800a790:	40010000 	.word	0x40010000
 800a794:	40010400 	.word	0x40010400

0800a798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	4b2d      	ldr	r3, [pc, #180]	; (800a878 <TIM_OC3_SetConfig+0xe0>)
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0303 	bic.w	r3, r3, #3
 800a7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a22      	ldr	r2, [pc, #136]	; (800a87c <TIM_OC3_SetConfig+0xe4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d003      	beq.n	800a7fe <TIM_OC3_SetConfig+0x66>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a21      	ldr	r2, [pc, #132]	; (800a880 <TIM_OC3_SetConfig+0xe8>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d10d      	bne.n	800a81a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	021b      	lsls	r3, r3, #8
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	4313      	orrs	r3, r2
 800a810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a17      	ldr	r2, [pc, #92]	; (800a87c <TIM_OC3_SetConfig+0xe4>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d003      	beq.n	800a82a <TIM_OC3_SetConfig+0x92>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a16      	ldr	r2, [pc, #88]	; (800a880 <TIM_OC3_SetConfig+0xe8>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d113      	bne.n	800a852 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	011b      	lsls	r3, r3, #4
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4313      	orrs	r3, r2
 800a844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	4313      	orrs	r3, r2
 800a850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	621a      	str	r2, [r3, #32]
}
 800a86c:	bf00      	nop
 800a86e:	371c      	adds	r7, #28
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	fffeff8f 	.word	0xfffeff8f
 800a87c:	40010000 	.word	0x40010000
 800a880:	40010400 	.word	0x40010400

0800a884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4b1e      	ldr	r3, [pc, #120]	; (800a928 <TIM_OC4_SetConfig+0xa4>)
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	021b      	lsls	r3, r3, #8
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	031b      	lsls	r3, r3, #12
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a13      	ldr	r2, [pc, #76]	; (800a92c <TIM_OC4_SetConfig+0xa8>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d003      	beq.n	800a8ec <TIM_OC4_SetConfig+0x68>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a12      	ldr	r2, [pc, #72]	; (800a930 <TIM_OC4_SetConfig+0xac>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d109      	bne.n	800a900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	019b      	lsls	r3, r3, #6
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	621a      	str	r2, [r3, #32]
}
 800a91a:	bf00      	nop
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	feff8fff 	.word	0xfeff8fff
 800a92c:	40010000 	.word	0x40010000
 800a930:	40010400 	.word	0x40010400

0800a934 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	4b1b      	ldr	r3, [pc, #108]	; (800a9cc <TIM_OC5_SetConfig+0x98>)
 800a960:	4013      	ands	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a974:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	041b      	lsls	r3, r3, #16
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	4313      	orrs	r3, r2
 800a980:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a12      	ldr	r2, [pc, #72]	; (800a9d0 <TIM_OC5_SetConfig+0x9c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d003      	beq.n	800a992 <TIM_OC5_SetConfig+0x5e>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a11      	ldr	r2, [pc, #68]	; (800a9d4 <TIM_OC5_SetConfig+0xa0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d109      	bne.n	800a9a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a998:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	021b      	lsls	r3, r3, #8
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	621a      	str	r2, [r3, #32]
}
 800a9c0:	bf00      	nop
 800a9c2:	371c      	adds	r7, #28
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	fffeff8f 	.word	0xfffeff8f
 800a9d0:	40010000 	.word	0x40010000
 800a9d4:	40010400 	.word	0x40010400

0800a9d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <TIM_OC6_SetConfig+0x9c>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	051b      	lsls	r3, r3, #20
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a13      	ldr	r2, [pc, #76]	; (800aa78 <TIM_OC6_SetConfig+0xa0>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d003      	beq.n	800aa38 <TIM_OC6_SetConfig+0x60>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a12      	ldr	r2, [pc, #72]	; (800aa7c <TIM_OC6_SetConfig+0xa4>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d109      	bne.n	800aa4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	029b      	lsls	r3, r3, #10
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	621a      	str	r2, [r3, #32]
}
 800aa66:	bf00      	nop
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	feff8fff 	.word	0xfeff8fff
 800aa78:	40010000 	.word	0x40010000
 800aa7c:	40010400 	.word	0x40010400

0800aa80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	f023 0201 	bic.w	r2, r3, #1
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6a1b      	ldr	r3, [r3, #32]
 800aaa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	4a28      	ldr	r2, [pc, #160]	; (800ab4c <TIM_TI1_SetConfig+0xcc>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d01b      	beq.n	800aae6 <TIM_TI1_SetConfig+0x66>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab4:	d017      	beq.n	800aae6 <TIM_TI1_SetConfig+0x66>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4a25      	ldr	r2, [pc, #148]	; (800ab50 <TIM_TI1_SetConfig+0xd0>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d013      	beq.n	800aae6 <TIM_TI1_SetConfig+0x66>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	4a24      	ldr	r2, [pc, #144]	; (800ab54 <TIM_TI1_SetConfig+0xd4>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d00f      	beq.n	800aae6 <TIM_TI1_SetConfig+0x66>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4a23      	ldr	r2, [pc, #140]	; (800ab58 <TIM_TI1_SetConfig+0xd8>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00b      	beq.n	800aae6 <TIM_TI1_SetConfig+0x66>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4a22      	ldr	r2, [pc, #136]	; (800ab5c <TIM_TI1_SetConfig+0xdc>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d007      	beq.n	800aae6 <TIM_TI1_SetConfig+0x66>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4a21      	ldr	r2, [pc, #132]	; (800ab60 <TIM_TI1_SetConfig+0xe0>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d003      	beq.n	800aae6 <TIM_TI1_SetConfig+0x66>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4a20      	ldr	r2, [pc, #128]	; (800ab64 <TIM_TI1_SetConfig+0xe4>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d101      	bne.n	800aaea <TIM_TI1_SetConfig+0x6a>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e000      	b.n	800aaec <TIM_TI1_SetConfig+0x6c>
 800aaea:	2300      	movs	r3, #0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d008      	beq.n	800ab02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f023 0303 	bic.w	r3, r3, #3
 800aaf6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	e003      	b.n	800ab0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f043 0301 	orr.w	r3, r3, #1
 800ab08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	011b      	lsls	r3, r3, #4
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	f023 030a 	bic.w	r3, r3, #10
 800ab24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f003 030a 	and.w	r3, r3, #10
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	621a      	str	r2, [r3, #32]
}
 800ab3e:	bf00      	nop
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	40010000 	.word	0x40010000
 800ab50:	40000400 	.word	0x40000400
 800ab54:	40000800 	.word	0x40000800
 800ab58:	40000c00 	.word	0x40000c00
 800ab5c:	40010400 	.word	0x40010400
 800ab60:	40014000 	.word	0x40014000
 800ab64:	40001800 	.word	0x40001800

0800ab68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	f023 0201 	bic.w	r2, r3, #1
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f023 030a 	bic.w	r3, r3, #10
 800aba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b087      	sub	sp, #28
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	f023 0210 	bic.w	r2, r3, #16
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	031b      	lsls	r3, r3, #12
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	011b      	lsls	r3, r3, #4
 800ac1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	621a      	str	r2, [r3, #32]
}
 800ac34:	bf00      	nop
 800ac36:	371c      	adds	r7, #28
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	f023 0210 	bic.w	r2, r3, #16
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	031b      	lsls	r3, r3, #12
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	011b      	lsls	r3, r3, #4
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	621a      	str	r2, [r3, #32]
}
 800ac94:	bf00      	nop
 800ac96:	371c      	adds	r7, #28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	69db      	ldr	r3, [r3, #28]
 800acbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	011b      	lsls	r3, r3, #4
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800acf0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	021b      	lsls	r3, r3, #8
 800acf6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	621a      	str	r2, [r3, #32]
}
 800ad0c:	bf00      	nop
 800ad0e:	371c      	adds	r7, #28
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	021b      	lsls	r3, r3, #8
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	031b      	lsls	r3, r3, #12
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ad6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	031b      	lsls	r3, r3, #12
 800ad70:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	621a      	str	r2, [r3, #32]
}
 800ad86:	bf00      	nop
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b085      	sub	sp, #20
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4313      	orrs	r3, r2
 800adb0:	f043 0307 	orr.w	r3, r3, #7
 800adb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	609a      	str	r2, [r3, #8]
}
 800adbc:	bf00      	nop
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ade2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	021a      	lsls	r2, r3, #8
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	431a      	orrs	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	4313      	orrs	r3, r2
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	609a      	str	r2, [r3, #8]
}
 800adfc:	bf00      	nop
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f003 031f 	and.w	r3, r3, #31
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6a1a      	ldr	r2, [r3, #32]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	43db      	mvns	r3, r3
 800ae2a:	401a      	ands	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6a1a      	ldr	r2, [r3, #32]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 031f 	and.w	r3, r3, #31
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae40:	431a      	orrs	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	621a      	str	r2, [r3, #32]
}
 800ae46:	bf00      	nop
 800ae48:	371c      	adds	r7, #28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
	...

0800ae54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d101      	bne.n	800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e06d      	b.n	800af48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a30      	ldr	r2, [pc, #192]	; (800af54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d004      	beq.n	800aea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a2f      	ldr	r2, [pc, #188]	; (800af58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d108      	bne.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a20      	ldr	r2, [pc, #128]	; (800af54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d022      	beq.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aede:	d01d      	beq.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a1d      	ldr	r2, [pc, #116]	; (800af5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d018      	beq.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a1c      	ldr	r2, [pc, #112]	; (800af60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d013      	beq.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a1a      	ldr	r2, [pc, #104]	; (800af64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d00e      	beq.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a15      	ldr	r2, [pc, #84]	; (800af58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d009      	beq.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a16      	ldr	r2, [pc, #88]	; (800af68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d004      	beq.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a15      	ldr	r2, [pc, #84]	; (800af6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d10c      	bne.n	800af36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	40010000 	.word	0x40010000
 800af58:	40010400 	.word	0x40010400
 800af5c:	40000400 	.word	0x40000400
 800af60:	40000800 	.word	0x40000800
 800af64:	40000c00 	.word	0x40000c00
 800af68:	40014000 	.word	0x40014000
 800af6c:	40001800 	.word	0x40001800

0800af70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af84:	2b01      	cmp	r3, #1
 800af86:	d101      	bne.n	800af8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af88:	2302      	movs	r3, #2
 800af8a:	e065      	b.n	800b058 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	695b      	ldr	r3, [r3, #20]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff2:	4313      	orrs	r3, r2
 800aff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	041b      	lsls	r3, r3, #16
 800b002:	4313      	orrs	r3, r2
 800b004:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a16      	ldr	r2, [pc, #88]	; (800b064 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d004      	beq.n	800b01a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a14      	ldr	r2, [pc, #80]	; (800b068 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d115      	bne.n	800b046 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b024:	051b      	lsls	r3, r3, #20
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	4313      	orrs	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	40010000 	.word	0x40010000
 800b068:	40010400 	.word	0x40010400

0800b06c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e040      	b.n	800b13c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7f8 faac 	bl	8003628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2224      	movs	r2, #36	; 0x24
 800b0d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 0201 	bic.w	r2, r2, #1
 800b0e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fc2a 	bl	800b940 <UART_SetConfig>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d101      	bne.n	800b0f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e022      	b.n	800b13c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fe82 	bl	800be08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685a      	ldr	r2, [r3, #4]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689a      	ldr	r2, [r3, #8]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f042 0201 	orr.w	r2, r2, #1
 800b132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 ff09 	bl	800bf4c <UART_CheckIdleState>
 800b13a:	4603      	mov	r3, r0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08a      	sub	sp, #40	; 0x28
 800b148:	af02      	add	r7, sp, #8
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	603b      	str	r3, [r7, #0]
 800b150:	4613      	mov	r3, r2
 800b152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b158:	2b20      	cmp	r3, #32
 800b15a:	d171      	bne.n	800b240 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <HAL_UART_Transmit+0x24>
 800b162:	88fb      	ldrh	r3, [r7, #6]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e06a      	b.n	800b242 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2221      	movs	r2, #33	; 0x21
 800b178:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b17a:	f7fa fd3b 	bl	8005bf4 <HAL_GetTick>
 800b17e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	88fa      	ldrh	r2, [r7, #6]
 800b184:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	88fa      	ldrh	r2, [r7, #6]
 800b18c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b198:	d108      	bne.n	800b1ac <HAL_UART_Transmit+0x68>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d104      	bne.n	800b1ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	61bb      	str	r3, [r7, #24]
 800b1aa:	e003      	b.n	800b1b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1b4:	e02c      	b.n	800b210 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2180      	movs	r1, #128	; 0x80
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 fefa 	bl	800bfba <UART_WaitOnFlagUntilTimeout>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e038      	b.n	800b242 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10b      	bne.n	800b1ee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	3302      	adds	r3, #2
 800b1ea:	61bb      	str	r3, [r7, #24]
 800b1ec:	e007      	b.n	800b1fe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	781a      	ldrb	r2, [r3, #0]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b204:	b29b      	uxth	r3, r3
 800b206:	3b01      	subs	r3, #1
 800b208:	b29a      	uxth	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b216:	b29b      	uxth	r3, r3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1cc      	bne.n	800b1b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	2200      	movs	r2, #0
 800b224:	2140      	movs	r1, #64	; 0x40
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 fec7 	bl	800bfba <UART_WaitOnFlagUntilTimeout>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800b232:	2303      	movs	r3, #3
 800b234:	e005      	b.n	800b242 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2220      	movs	r2, #32
 800b23a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	e000      	b.n	800b242 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b240:	2302      	movs	r3, #2
  }
}
 800b242:	4618      	mov	r0, r3
 800b244:	3720      	adds	r7, #32
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b08a      	sub	sp, #40	; 0x28
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	60b9      	str	r1, [r7, #8]
 800b254:	4613      	mov	r3, r2
 800b256:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b25e:	2b20      	cmp	r3, #32
 800b260:	d132      	bne.n	800b2c8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <HAL_UART_Receive_IT+0x24>
 800b268:	88fb      	ldrh	r3, [r7, #6]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e02b      	b.n	800b2ca <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d018      	beq.n	800b2b8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	e853 3f00 	ldrex	r3, [r3]
 800b292:	613b      	str	r3, [r7, #16]
   return(result);
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b29a:	627b      	str	r3, [r7, #36]	; 0x24
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	623b      	str	r3, [r7, #32]
 800b2a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a8:	69f9      	ldr	r1, [r7, #28]
 800b2aa:	6a3a      	ldr	r2, [r7, #32]
 800b2ac:	e841 2300 	strex	r3, r2, [r1]
 800b2b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e6      	bne.n	800b286 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b2b8:	88fb      	ldrh	r3, [r7, #6]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	68b9      	ldr	r1, [r7, #8]
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f000 ff42 	bl	800c148 <UART_Start_Receive_IT>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	e000      	b.n	800b2ca <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b2c8:	2302      	movs	r3, #2
  }
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3728      	adds	r7, #40	; 0x28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b08a      	sub	sp, #40	; 0x28
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	60b9      	str	r1, [r7, #8]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e6:	2b20      	cmp	r3, #32
 800b2e8:	d132      	bne.n	800b350 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <HAL_UART_Receive_DMA+0x24>
 800b2f0:	88fb      	ldrh	r3, [r7, #6]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e02b      	b.n	800b352 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d018      	beq.n	800b340 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	e853 3f00 	ldrex	r3, [r3]
 800b31a:	613b      	str	r3, [r7, #16]
   return(result);
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b322:	627b      	str	r3, [r7, #36]	; 0x24
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	461a      	mov	r2, r3
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	623b      	str	r3, [r7, #32]
 800b32e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b330:	69f9      	ldr	r1, [r7, #28]
 800b332:	6a3a      	ldr	r2, [r7, #32]
 800b334:	e841 2300 	strex	r3, r2, [r1]
 800b338:	61bb      	str	r3, [r7, #24]
   return(result);
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1e6      	bne.n	800b30e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b340:	88fb      	ldrh	r3, [r7, #6]
 800b342:	461a      	mov	r2, r3
 800b344:	68b9      	ldr	r1, [r7, #8]
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f000 ffc4 	bl	800c2d4 <UART_Start_Receive_DMA>
 800b34c:	4603      	mov	r3, r0
 800b34e:	e000      	b.n	800b352 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b350:	2302      	movs	r3, #2
  }
}
 800b352:	4618      	mov	r0, r3
 800b354:	3728      	adds	r7, #40	; 0x28
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b0ba      	sub	sp, #232	; 0xe8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b382:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b386:	f640 030f 	movw	r3, #2063	; 0x80f
 800b38a:	4013      	ands	r3, r2
 800b38c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b394:	2b00      	cmp	r3, #0
 800b396:	d115      	bne.n	800b3c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b39c:	f003 0320 	and.w	r3, r3, #32
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00f      	beq.n	800b3c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d009      	beq.n	800b3c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 8297 	beq.w	800b8e8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	4798      	blx	r3
      }
      return;
 800b3c2:	e291      	b.n	800b8e8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b3c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 8117 	beq.w	800b5fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b3da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b3de:	4b85      	ldr	r3, [pc, #532]	; (800b5f4 <HAL_UART_IRQHandler+0x298>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 810a 	beq.w	800b5fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d011      	beq.n	800b418 <HAL_UART_IRQHandler+0xbc>
 800b3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00b      	beq.n	800b418 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2201      	movs	r2, #1
 800b406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b40e:	f043 0201 	orr.w	r2, r3, #1
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d011      	beq.n	800b448 <HAL_UART_IRQHandler+0xec>
 800b424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b428:	f003 0301 	and.w	r3, r3, #1
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2202      	movs	r2, #2
 800b436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b43e:	f043 0204 	orr.w	r2, r3, #4
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b44c:	f003 0304 	and.w	r3, r3, #4
 800b450:	2b00      	cmp	r3, #0
 800b452:	d011      	beq.n	800b478 <HAL_UART_IRQHandler+0x11c>
 800b454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b458:	f003 0301 	and.w	r3, r3, #1
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00b      	beq.n	800b478 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2204      	movs	r2, #4
 800b466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b46e:	f043 0202 	orr.w	r2, r3, #2
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b47c:	f003 0308 	and.w	r3, r3, #8
 800b480:	2b00      	cmp	r3, #0
 800b482:	d017      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b488:	f003 0320 	and.w	r3, r3, #32
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d105      	bne.n	800b49c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b494:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00b      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2208      	movs	r2, #8
 800b4a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4aa:	f043 0208 	orr.w	r2, r3, #8
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d012      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x18a>
 800b4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00c      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4dc:	f043 0220 	orr.w	r2, r3, #32
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 81fd 	beq.w	800b8ec <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f6:	f003 0320 	and.w	r3, r3, #32
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b4fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b502:	f003 0320 	and.w	r3, r3, #32
 800b506:	2b00      	cmp	r3, #0
 800b508:	d007      	beq.n	800b51a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52e:	2b40      	cmp	r3, #64	; 0x40
 800b530:	d005      	beq.n	800b53e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d04f      	beq.n	800b5de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 ff8e 	bl	800c460 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54e:	2b40      	cmp	r3, #64	; 0x40
 800b550:	d141      	bne.n	800b5d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b560:	e853 3f00 	ldrex	r3, [r3]
 800b564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3308      	adds	r3, #8
 800b57a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b57e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b58a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1d9      	bne.n	800b552 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d013      	beq.n	800b5ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5aa:	4a13      	ldr	r2, [pc, #76]	; (800b5f8 <HAL_UART_IRQHandler+0x29c>)
 800b5ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fa fdae 	bl	8006114 <HAL_DMA_Abort_IT>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d017      	beq.n	800b5ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5cc:	e00f      	b.n	800b5ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7f7 f85c 	bl	800268c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5d4:	e00b      	b.n	800b5ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7f7 f858 	bl	800268c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5dc:	e007      	b.n	800b5ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7f7 f854 	bl	800268c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b5ec:	e17e      	b.n	800b8ec <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5ee:	bf00      	nop
    return;
 800b5f0:	e17c      	b.n	800b8ec <HAL_UART_IRQHandler+0x590>
 800b5f2:	bf00      	nop
 800b5f4:	04000120 	.word	0x04000120
 800b5f8:	0800c70d 	.word	0x0800c70d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b600:	2b01      	cmp	r3, #1
 800b602:	f040 814c 	bne.w	800b89e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b60a:	f003 0310 	and.w	r3, r3, #16
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f000 8145 	beq.w	800b89e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b618:	f003 0310 	and.w	r3, r3, #16
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 813e 	beq.w	800b89e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2210      	movs	r2, #16
 800b628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b634:	2b40      	cmp	r3, #64	; 0x40
 800b636:	f040 80b6 	bne.w	800b7a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b646:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f000 8150 	beq.w	800b8f0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b65a:	429a      	cmp	r2, r3
 800b65c:	f080 8148 	bcs.w	800b8f0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b666:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b66e:	69db      	ldr	r3, [r3, #28]
 800b670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b674:	f000 8086 	beq.w	800b784 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b68c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	461a      	mov	r2, r3
 800b69e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b6a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b6ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b6b2:	e841 2300 	strex	r3, r2, [r1]
 800b6b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b6ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1da      	bne.n	800b678 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6cc:	e853 3f00 	ldrex	r3, [r3]
 800b6d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b6d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6d4:	f023 0301 	bic.w	r3, r3, #1
 800b6d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3308      	adds	r3, #8
 800b6e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b6e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b6ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b6ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b6f2:	e841 2300 	strex	r3, r2, [r1]
 800b6f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b6f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e1      	bne.n	800b6c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3308      	adds	r3, #8
 800b704:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b70e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3308      	adds	r3, #8
 800b71e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b722:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b724:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b726:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b728:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b72a:	e841 2300 	strex	r3, r2, [r1]
 800b72e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1e3      	bne.n	800b6fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2220      	movs	r2, #32
 800b73a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b754:	f023 0310 	bic.w	r3, r3, #16
 800b758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	461a      	mov	r2, r3
 800b762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b766:	65bb      	str	r3, [r7, #88]	; 0x58
 800b768:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b76c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e4      	bne.n	800b744 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fa fc58 	bl	8006034 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2202      	movs	r2, #2
 800b788:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b796:	b29b      	uxth	r3, r3
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	4619      	mov	r1, r3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f8c2 	bl	800b928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7a4:	e0a4      	b.n	800b8f0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 8096 	beq.w	800b8f4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b7c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 8091 	beq.w	800b8f4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b7f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e4      	bne.n	800b7d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3308      	adds	r3, #8
 800b80e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	e853 3f00 	ldrex	r3, [r3]
 800b816:	623b      	str	r3, [r7, #32]
   return(result);
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	f023 0301 	bic.w	r3, r3, #1
 800b81e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3308      	adds	r3, #8
 800b828:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b82c:	633a      	str	r2, [r7, #48]	; 0x30
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b834:	e841 2300 	strex	r3, r2, [r1]
 800b838:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1e3      	bne.n	800b808 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2220      	movs	r2, #32
 800b844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	60fb      	str	r3, [r7, #12]
   return(result);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f023 0310 	bic.w	r3, r3, #16
 800b868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	461a      	mov	r2, r3
 800b872:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b876:	61fb      	str	r3, [r7, #28]
 800b878:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	69b9      	ldr	r1, [r7, #24]
 800b87c:	69fa      	ldr	r2, [r7, #28]
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	617b      	str	r3, [r7, #20]
   return(result);
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e4      	bne.n	800b854 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2202      	movs	r2, #2
 800b88e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f846 	bl	800b928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b89c:	e02a      	b.n	800b8f4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00e      	beq.n	800b8c8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d008      	beq.n	800b8c8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d01c      	beq.n	800b8f8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	4798      	blx	r3
    }
    return;
 800b8c6:	e017      	b.n	800b8f8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d012      	beq.n	800b8fa <HAL_UART_IRQHandler+0x59e>
 800b8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00c      	beq.n	800b8fa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 ff29 	bl	800c738 <UART_EndTransmit_IT>
    return;
 800b8e6:	e008      	b.n	800b8fa <HAL_UART_IRQHandler+0x59e>
      return;
 800b8e8:	bf00      	nop
 800b8ea:	e006      	b.n	800b8fa <HAL_UART_IRQHandler+0x59e>
    return;
 800b8ec:	bf00      	nop
 800b8ee:	e004      	b.n	800b8fa <HAL_UART_IRQHandler+0x59e>
      return;
 800b8f0:	bf00      	nop
 800b8f2:	e002      	b.n	800b8fa <HAL_UART_IRQHandler+0x59e>
      return;
 800b8f4:	bf00      	nop
 800b8f6:	e000      	b.n	800b8fa <HAL_UART_IRQHandler+0x59e>
    return;
 800b8f8:	bf00      	nop
  }

}
 800b8fa:	37e8      	adds	r7, #232	; 0xe8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	431a      	orrs	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	4313      	orrs	r3, r2
 800b962:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	4ba6      	ldr	r3, [pc, #664]	; (800bc04 <UART_SetConfig+0x2c4>)
 800b96c:	4013      	ands	r3, r2
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	6812      	ldr	r2, [r2, #0]
 800b972:	6979      	ldr	r1, [r7, #20]
 800b974:	430b      	orrs	r3, r1
 800b976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a94      	ldr	r2, [pc, #592]	; (800bc08 <UART_SetConfig+0x2c8>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d120      	bne.n	800b9fe <UART_SetConfig+0xbe>
 800b9bc:	4b93      	ldr	r3, [pc, #588]	; (800bc0c <UART_SetConfig+0x2cc>)
 800b9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	d816      	bhi.n	800b9f8 <UART_SetConfig+0xb8>
 800b9ca:	a201      	add	r2, pc, #4	; (adr r2, 800b9d0 <UART_SetConfig+0x90>)
 800b9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d0:	0800b9e1 	.word	0x0800b9e1
 800b9d4:	0800b9ed 	.word	0x0800b9ed
 800b9d8:	0800b9e7 	.word	0x0800b9e7
 800b9dc:	0800b9f3 	.word	0x0800b9f3
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	77fb      	strb	r3, [r7, #31]
 800b9e4:	e150      	b.n	800bc88 <UART_SetConfig+0x348>
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	77fb      	strb	r3, [r7, #31]
 800b9ea:	e14d      	b.n	800bc88 <UART_SetConfig+0x348>
 800b9ec:	2304      	movs	r3, #4
 800b9ee:	77fb      	strb	r3, [r7, #31]
 800b9f0:	e14a      	b.n	800bc88 <UART_SetConfig+0x348>
 800b9f2:	2308      	movs	r3, #8
 800b9f4:	77fb      	strb	r3, [r7, #31]
 800b9f6:	e147      	b.n	800bc88 <UART_SetConfig+0x348>
 800b9f8:	2310      	movs	r3, #16
 800b9fa:	77fb      	strb	r3, [r7, #31]
 800b9fc:	e144      	b.n	800bc88 <UART_SetConfig+0x348>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a83      	ldr	r2, [pc, #524]	; (800bc10 <UART_SetConfig+0x2d0>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d132      	bne.n	800ba6e <UART_SetConfig+0x12e>
 800ba08:	4b80      	ldr	r3, [pc, #512]	; (800bc0c <UART_SetConfig+0x2cc>)
 800ba0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba0e:	f003 030c 	and.w	r3, r3, #12
 800ba12:	2b0c      	cmp	r3, #12
 800ba14:	d828      	bhi.n	800ba68 <UART_SetConfig+0x128>
 800ba16:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <UART_SetConfig+0xdc>)
 800ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1c:	0800ba51 	.word	0x0800ba51
 800ba20:	0800ba69 	.word	0x0800ba69
 800ba24:	0800ba69 	.word	0x0800ba69
 800ba28:	0800ba69 	.word	0x0800ba69
 800ba2c:	0800ba5d 	.word	0x0800ba5d
 800ba30:	0800ba69 	.word	0x0800ba69
 800ba34:	0800ba69 	.word	0x0800ba69
 800ba38:	0800ba69 	.word	0x0800ba69
 800ba3c:	0800ba57 	.word	0x0800ba57
 800ba40:	0800ba69 	.word	0x0800ba69
 800ba44:	0800ba69 	.word	0x0800ba69
 800ba48:	0800ba69 	.word	0x0800ba69
 800ba4c:	0800ba63 	.word	0x0800ba63
 800ba50:	2300      	movs	r3, #0
 800ba52:	77fb      	strb	r3, [r7, #31]
 800ba54:	e118      	b.n	800bc88 <UART_SetConfig+0x348>
 800ba56:	2302      	movs	r3, #2
 800ba58:	77fb      	strb	r3, [r7, #31]
 800ba5a:	e115      	b.n	800bc88 <UART_SetConfig+0x348>
 800ba5c:	2304      	movs	r3, #4
 800ba5e:	77fb      	strb	r3, [r7, #31]
 800ba60:	e112      	b.n	800bc88 <UART_SetConfig+0x348>
 800ba62:	2308      	movs	r3, #8
 800ba64:	77fb      	strb	r3, [r7, #31]
 800ba66:	e10f      	b.n	800bc88 <UART_SetConfig+0x348>
 800ba68:	2310      	movs	r3, #16
 800ba6a:	77fb      	strb	r3, [r7, #31]
 800ba6c:	e10c      	b.n	800bc88 <UART_SetConfig+0x348>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a68      	ldr	r2, [pc, #416]	; (800bc14 <UART_SetConfig+0x2d4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d120      	bne.n	800baba <UART_SetConfig+0x17a>
 800ba78:	4b64      	ldr	r3, [pc, #400]	; (800bc0c <UART_SetConfig+0x2cc>)
 800ba7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ba82:	2b30      	cmp	r3, #48	; 0x30
 800ba84:	d013      	beq.n	800baae <UART_SetConfig+0x16e>
 800ba86:	2b30      	cmp	r3, #48	; 0x30
 800ba88:	d814      	bhi.n	800bab4 <UART_SetConfig+0x174>
 800ba8a:	2b20      	cmp	r3, #32
 800ba8c:	d009      	beq.n	800baa2 <UART_SetConfig+0x162>
 800ba8e:	2b20      	cmp	r3, #32
 800ba90:	d810      	bhi.n	800bab4 <UART_SetConfig+0x174>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <UART_SetConfig+0x15c>
 800ba96:	2b10      	cmp	r3, #16
 800ba98:	d006      	beq.n	800baa8 <UART_SetConfig+0x168>
 800ba9a:	e00b      	b.n	800bab4 <UART_SetConfig+0x174>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	77fb      	strb	r3, [r7, #31]
 800baa0:	e0f2      	b.n	800bc88 <UART_SetConfig+0x348>
 800baa2:	2302      	movs	r3, #2
 800baa4:	77fb      	strb	r3, [r7, #31]
 800baa6:	e0ef      	b.n	800bc88 <UART_SetConfig+0x348>
 800baa8:	2304      	movs	r3, #4
 800baaa:	77fb      	strb	r3, [r7, #31]
 800baac:	e0ec      	b.n	800bc88 <UART_SetConfig+0x348>
 800baae:	2308      	movs	r3, #8
 800bab0:	77fb      	strb	r3, [r7, #31]
 800bab2:	e0e9      	b.n	800bc88 <UART_SetConfig+0x348>
 800bab4:	2310      	movs	r3, #16
 800bab6:	77fb      	strb	r3, [r7, #31]
 800bab8:	e0e6      	b.n	800bc88 <UART_SetConfig+0x348>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a56      	ldr	r2, [pc, #344]	; (800bc18 <UART_SetConfig+0x2d8>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d120      	bne.n	800bb06 <UART_SetConfig+0x1c6>
 800bac4:	4b51      	ldr	r3, [pc, #324]	; (800bc0c <UART_SetConfig+0x2cc>)
 800bac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bace:	2bc0      	cmp	r3, #192	; 0xc0
 800bad0:	d013      	beq.n	800bafa <UART_SetConfig+0x1ba>
 800bad2:	2bc0      	cmp	r3, #192	; 0xc0
 800bad4:	d814      	bhi.n	800bb00 <UART_SetConfig+0x1c0>
 800bad6:	2b80      	cmp	r3, #128	; 0x80
 800bad8:	d009      	beq.n	800baee <UART_SetConfig+0x1ae>
 800bada:	2b80      	cmp	r3, #128	; 0x80
 800badc:	d810      	bhi.n	800bb00 <UART_SetConfig+0x1c0>
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <UART_SetConfig+0x1a8>
 800bae2:	2b40      	cmp	r3, #64	; 0x40
 800bae4:	d006      	beq.n	800baf4 <UART_SetConfig+0x1b4>
 800bae6:	e00b      	b.n	800bb00 <UART_SetConfig+0x1c0>
 800bae8:	2300      	movs	r3, #0
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	e0cc      	b.n	800bc88 <UART_SetConfig+0x348>
 800baee:	2302      	movs	r3, #2
 800baf0:	77fb      	strb	r3, [r7, #31]
 800baf2:	e0c9      	b.n	800bc88 <UART_SetConfig+0x348>
 800baf4:	2304      	movs	r3, #4
 800baf6:	77fb      	strb	r3, [r7, #31]
 800baf8:	e0c6      	b.n	800bc88 <UART_SetConfig+0x348>
 800bafa:	2308      	movs	r3, #8
 800bafc:	77fb      	strb	r3, [r7, #31]
 800bafe:	e0c3      	b.n	800bc88 <UART_SetConfig+0x348>
 800bb00:	2310      	movs	r3, #16
 800bb02:	77fb      	strb	r3, [r7, #31]
 800bb04:	e0c0      	b.n	800bc88 <UART_SetConfig+0x348>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a44      	ldr	r2, [pc, #272]	; (800bc1c <UART_SetConfig+0x2dc>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d125      	bne.n	800bb5c <UART_SetConfig+0x21c>
 800bb10:	4b3e      	ldr	r3, [pc, #248]	; (800bc0c <UART_SetConfig+0x2cc>)
 800bb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb1e:	d017      	beq.n	800bb50 <UART_SetConfig+0x210>
 800bb20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb24:	d817      	bhi.n	800bb56 <UART_SetConfig+0x216>
 800bb26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb2a:	d00b      	beq.n	800bb44 <UART_SetConfig+0x204>
 800bb2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb30:	d811      	bhi.n	800bb56 <UART_SetConfig+0x216>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d003      	beq.n	800bb3e <UART_SetConfig+0x1fe>
 800bb36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb3a:	d006      	beq.n	800bb4a <UART_SetConfig+0x20a>
 800bb3c:	e00b      	b.n	800bb56 <UART_SetConfig+0x216>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	77fb      	strb	r3, [r7, #31]
 800bb42:	e0a1      	b.n	800bc88 <UART_SetConfig+0x348>
 800bb44:	2302      	movs	r3, #2
 800bb46:	77fb      	strb	r3, [r7, #31]
 800bb48:	e09e      	b.n	800bc88 <UART_SetConfig+0x348>
 800bb4a:	2304      	movs	r3, #4
 800bb4c:	77fb      	strb	r3, [r7, #31]
 800bb4e:	e09b      	b.n	800bc88 <UART_SetConfig+0x348>
 800bb50:	2308      	movs	r3, #8
 800bb52:	77fb      	strb	r3, [r7, #31]
 800bb54:	e098      	b.n	800bc88 <UART_SetConfig+0x348>
 800bb56:	2310      	movs	r3, #16
 800bb58:	77fb      	strb	r3, [r7, #31]
 800bb5a:	e095      	b.n	800bc88 <UART_SetConfig+0x348>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a2f      	ldr	r2, [pc, #188]	; (800bc20 <UART_SetConfig+0x2e0>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d125      	bne.n	800bbb2 <UART_SetConfig+0x272>
 800bb66:	4b29      	ldr	r3, [pc, #164]	; (800bc0c <UART_SetConfig+0x2cc>)
 800bb68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb74:	d017      	beq.n	800bba6 <UART_SetConfig+0x266>
 800bb76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb7a:	d817      	bhi.n	800bbac <UART_SetConfig+0x26c>
 800bb7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb80:	d00b      	beq.n	800bb9a <UART_SetConfig+0x25a>
 800bb82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb86:	d811      	bhi.n	800bbac <UART_SetConfig+0x26c>
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <UART_SetConfig+0x254>
 800bb8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb90:	d006      	beq.n	800bba0 <UART_SetConfig+0x260>
 800bb92:	e00b      	b.n	800bbac <UART_SetConfig+0x26c>
 800bb94:	2301      	movs	r3, #1
 800bb96:	77fb      	strb	r3, [r7, #31]
 800bb98:	e076      	b.n	800bc88 <UART_SetConfig+0x348>
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	77fb      	strb	r3, [r7, #31]
 800bb9e:	e073      	b.n	800bc88 <UART_SetConfig+0x348>
 800bba0:	2304      	movs	r3, #4
 800bba2:	77fb      	strb	r3, [r7, #31]
 800bba4:	e070      	b.n	800bc88 <UART_SetConfig+0x348>
 800bba6:	2308      	movs	r3, #8
 800bba8:	77fb      	strb	r3, [r7, #31]
 800bbaa:	e06d      	b.n	800bc88 <UART_SetConfig+0x348>
 800bbac:	2310      	movs	r3, #16
 800bbae:	77fb      	strb	r3, [r7, #31]
 800bbb0:	e06a      	b.n	800bc88 <UART_SetConfig+0x348>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a1b      	ldr	r2, [pc, #108]	; (800bc24 <UART_SetConfig+0x2e4>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d138      	bne.n	800bc2e <UART_SetConfig+0x2ee>
 800bbbc:	4b13      	ldr	r3, [pc, #76]	; (800bc0c <UART_SetConfig+0x2cc>)
 800bbbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bbc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbca:	d017      	beq.n	800bbfc <UART_SetConfig+0x2bc>
 800bbcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbd0:	d82a      	bhi.n	800bc28 <UART_SetConfig+0x2e8>
 800bbd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd6:	d00b      	beq.n	800bbf0 <UART_SetConfig+0x2b0>
 800bbd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbdc:	d824      	bhi.n	800bc28 <UART_SetConfig+0x2e8>
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <UART_SetConfig+0x2aa>
 800bbe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe6:	d006      	beq.n	800bbf6 <UART_SetConfig+0x2b6>
 800bbe8:	e01e      	b.n	800bc28 <UART_SetConfig+0x2e8>
 800bbea:	2300      	movs	r3, #0
 800bbec:	77fb      	strb	r3, [r7, #31]
 800bbee:	e04b      	b.n	800bc88 <UART_SetConfig+0x348>
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	77fb      	strb	r3, [r7, #31]
 800bbf4:	e048      	b.n	800bc88 <UART_SetConfig+0x348>
 800bbf6:	2304      	movs	r3, #4
 800bbf8:	77fb      	strb	r3, [r7, #31]
 800bbfa:	e045      	b.n	800bc88 <UART_SetConfig+0x348>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	77fb      	strb	r3, [r7, #31]
 800bc00:	e042      	b.n	800bc88 <UART_SetConfig+0x348>
 800bc02:	bf00      	nop
 800bc04:	efff69f3 	.word	0xefff69f3
 800bc08:	40011000 	.word	0x40011000
 800bc0c:	40023800 	.word	0x40023800
 800bc10:	40004400 	.word	0x40004400
 800bc14:	40004800 	.word	0x40004800
 800bc18:	40004c00 	.word	0x40004c00
 800bc1c:	40005000 	.word	0x40005000
 800bc20:	40011400 	.word	0x40011400
 800bc24:	40007800 	.word	0x40007800
 800bc28:	2310      	movs	r3, #16
 800bc2a:	77fb      	strb	r3, [r7, #31]
 800bc2c:	e02c      	b.n	800bc88 <UART_SetConfig+0x348>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a72      	ldr	r2, [pc, #456]	; (800bdfc <UART_SetConfig+0x4bc>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d125      	bne.n	800bc84 <UART_SetConfig+0x344>
 800bc38:	4b71      	ldr	r3, [pc, #452]	; (800be00 <UART_SetConfig+0x4c0>)
 800bc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bc42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bc46:	d017      	beq.n	800bc78 <UART_SetConfig+0x338>
 800bc48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bc4c:	d817      	bhi.n	800bc7e <UART_SetConfig+0x33e>
 800bc4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc52:	d00b      	beq.n	800bc6c <UART_SetConfig+0x32c>
 800bc54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc58:	d811      	bhi.n	800bc7e <UART_SetConfig+0x33e>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <UART_SetConfig+0x326>
 800bc5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc62:	d006      	beq.n	800bc72 <UART_SetConfig+0x332>
 800bc64:	e00b      	b.n	800bc7e <UART_SetConfig+0x33e>
 800bc66:	2300      	movs	r3, #0
 800bc68:	77fb      	strb	r3, [r7, #31]
 800bc6a:	e00d      	b.n	800bc88 <UART_SetConfig+0x348>
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	77fb      	strb	r3, [r7, #31]
 800bc70:	e00a      	b.n	800bc88 <UART_SetConfig+0x348>
 800bc72:	2304      	movs	r3, #4
 800bc74:	77fb      	strb	r3, [r7, #31]
 800bc76:	e007      	b.n	800bc88 <UART_SetConfig+0x348>
 800bc78:	2308      	movs	r3, #8
 800bc7a:	77fb      	strb	r3, [r7, #31]
 800bc7c:	e004      	b.n	800bc88 <UART_SetConfig+0x348>
 800bc7e:	2310      	movs	r3, #16
 800bc80:	77fb      	strb	r3, [r7, #31]
 800bc82:	e001      	b.n	800bc88 <UART_SetConfig+0x348>
 800bc84:	2310      	movs	r3, #16
 800bc86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	69db      	ldr	r3, [r3, #28]
 800bc8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc90:	d15b      	bne.n	800bd4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bc92:	7ffb      	ldrb	r3, [r7, #31]
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	d828      	bhi.n	800bcea <UART_SetConfig+0x3aa>
 800bc98:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <UART_SetConfig+0x360>)
 800bc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9e:	bf00      	nop
 800bca0:	0800bcc5 	.word	0x0800bcc5
 800bca4:	0800bccd 	.word	0x0800bccd
 800bca8:	0800bcd5 	.word	0x0800bcd5
 800bcac:	0800bceb 	.word	0x0800bceb
 800bcb0:	0800bcdb 	.word	0x0800bcdb
 800bcb4:	0800bceb 	.word	0x0800bceb
 800bcb8:	0800bceb 	.word	0x0800bceb
 800bcbc:	0800bceb 	.word	0x0800bceb
 800bcc0:	0800bce3 	.word	0x0800bce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcc4:	f7fc f90a 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 800bcc8:	61b8      	str	r0, [r7, #24]
        break;
 800bcca:	e013      	b.n	800bcf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bccc:	f7fc f91a 	bl	8007f04 <HAL_RCC_GetPCLK2Freq>
 800bcd0:	61b8      	str	r0, [r7, #24]
        break;
 800bcd2:	e00f      	b.n	800bcf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcd4:	4b4b      	ldr	r3, [pc, #300]	; (800be04 <UART_SetConfig+0x4c4>)
 800bcd6:	61bb      	str	r3, [r7, #24]
        break;
 800bcd8:	e00c      	b.n	800bcf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcda:	f7fc f82d 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 800bcde:	61b8      	str	r0, [r7, #24]
        break;
 800bce0:	e008      	b.n	800bcf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bce6:	61bb      	str	r3, [r7, #24]
        break;
 800bce8:	e004      	b.n	800bcf4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bcea:	2300      	movs	r3, #0
 800bcec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	77bb      	strb	r3, [r7, #30]
        break;
 800bcf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d074      	beq.n	800bde4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	005a      	lsls	r2, r3, #1
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	085b      	lsrs	r3, r3, #1
 800bd04:	441a      	add	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	2b0f      	cmp	r3, #15
 800bd14:	d916      	bls.n	800bd44 <UART_SetConfig+0x404>
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd1c:	d212      	bcs.n	800bd44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	f023 030f 	bic.w	r3, r3, #15
 800bd26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	085b      	lsrs	r3, r3, #1
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	f003 0307 	and.w	r3, r3, #7
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	89fb      	ldrh	r3, [r7, #14]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	89fa      	ldrh	r2, [r7, #14]
 800bd40:	60da      	str	r2, [r3, #12]
 800bd42:	e04f      	b.n	800bde4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	77bb      	strb	r3, [r7, #30]
 800bd48:	e04c      	b.n	800bde4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd4a:	7ffb      	ldrb	r3, [r7, #31]
 800bd4c:	2b08      	cmp	r3, #8
 800bd4e:	d828      	bhi.n	800bda2 <UART_SetConfig+0x462>
 800bd50:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <UART_SetConfig+0x418>)
 800bd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd56:	bf00      	nop
 800bd58:	0800bd7d 	.word	0x0800bd7d
 800bd5c:	0800bd85 	.word	0x0800bd85
 800bd60:	0800bd8d 	.word	0x0800bd8d
 800bd64:	0800bda3 	.word	0x0800bda3
 800bd68:	0800bd93 	.word	0x0800bd93
 800bd6c:	0800bda3 	.word	0x0800bda3
 800bd70:	0800bda3 	.word	0x0800bda3
 800bd74:	0800bda3 	.word	0x0800bda3
 800bd78:	0800bd9b 	.word	0x0800bd9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd7c:	f7fc f8ae 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 800bd80:	61b8      	str	r0, [r7, #24]
        break;
 800bd82:	e013      	b.n	800bdac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd84:	f7fc f8be 	bl	8007f04 <HAL_RCC_GetPCLK2Freq>
 800bd88:	61b8      	str	r0, [r7, #24]
        break;
 800bd8a:	e00f      	b.n	800bdac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd8c:	4b1d      	ldr	r3, [pc, #116]	; (800be04 <UART_SetConfig+0x4c4>)
 800bd8e:	61bb      	str	r3, [r7, #24]
        break;
 800bd90:	e00c      	b.n	800bdac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd92:	f7fb ffd1 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 800bd96:	61b8      	str	r0, [r7, #24]
        break;
 800bd98:	e008      	b.n	800bdac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd9e:	61bb      	str	r3, [r7, #24]
        break;
 800bda0:	e004      	b.n	800bdac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	77bb      	strb	r3, [r7, #30]
        break;
 800bdaa:	bf00      	nop
    }

    if (pclk != 0U)
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d018      	beq.n	800bde4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	085a      	lsrs	r2, r3, #1
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	441a      	add	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	2b0f      	cmp	r3, #15
 800bdca:	d909      	bls.n	800bde0 <UART_SetConfig+0x4a0>
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd2:	d205      	bcs.n	800bde0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60da      	str	r2, [r3, #12]
 800bdde:	e001      	b.n	800bde4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bdf0:	7fbb      	ldrb	r3, [r7, #30]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3720      	adds	r7, #32
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40007c00 	.word	0x40007c00
 800be00:	40023800 	.word	0x40023800
 800be04:	00f42400 	.word	0x00f42400

0800be08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be14:	f003 0301 	and.w	r3, r3, #1
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00a      	beq.n	800be32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be36:	f003 0302 	and.w	r3, r3, #2
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00a      	beq.n	800be54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	430a      	orrs	r2, r1
 800be52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00a      	beq.n	800be76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	430a      	orrs	r2, r1
 800be74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7a:	f003 0308 	and.w	r3, r3, #8
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00a      	beq.n	800be98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	430a      	orrs	r2, r1
 800be96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9c:	f003 0310 	and.w	r3, r3, #16
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00a      	beq.n	800beba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	430a      	orrs	r2, r1
 800beb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	f003 0320 	and.w	r3, r3, #32
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00a      	beq.n	800bedc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	430a      	orrs	r2, r1
 800beda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01a      	beq.n	800bf1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf06:	d10a      	bne.n	800bf1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00a      	beq.n	800bf40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	605a      	str	r2, [r3, #4]
  }
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af02      	add	r7, sp, #8
 800bf52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf5c:	f7f9 fe4a 	bl	8005bf4 <HAL_GetTick>
 800bf60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 0308 	and.w	r3, r3, #8
 800bf6c:	2b08      	cmp	r3, #8
 800bf6e:	d10e      	bne.n	800bf8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f81b 	bl	800bfba <UART_WaitOnFlagUntilTimeout>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e011      	b.n	800bfb2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2220      	movs	r2, #32
 800bf92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2220      	movs	r2, #32
 800bf98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b09c      	sub	sp, #112	; 0x70
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	60f8      	str	r0, [r7, #12]
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	603b      	str	r3, [r7, #0]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfca:	e0a7      	b.n	800c11c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd2:	f000 80a3 	beq.w	800c11c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfd6:	f7f9 fe0d 	bl	8005bf4 <HAL_GetTick>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d302      	bcc.n	800bfec <UART_WaitOnFlagUntilTimeout+0x32>
 800bfe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d13f      	bne.n	800c06c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bff4:	e853 3f00 	ldrex	r3, [r3]
 800bff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c000:	667b      	str	r3, [r7, #100]	; 0x64
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c00a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c00c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c010:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c012:	e841 2300 	strex	r3, r2, [r1]
 800c016:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1e6      	bne.n	800bfec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3308      	adds	r3, #8
 800c024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c028:	e853 3f00 	ldrex	r3, [r3]
 800c02c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	f023 0301 	bic.w	r3, r3, #1
 800c034:	663b      	str	r3, [r7, #96]	; 0x60
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3308      	adds	r3, #8
 800c03c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c03e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c040:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c046:	e841 2300 	strex	r3, r2, [r1]
 800c04a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e5      	bne.n	800c01e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2220      	movs	r2, #32
 800c056:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2220      	movs	r2, #32
 800c05c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e068      	b.n	800c13e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 0304 	and.w	r3, r3, #4
 800c076:	2b00      	cmp	r3, #0
 800c078:	d050      	beq.n	800c11c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c088:	d148      	bne.n	800c11c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c092:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c0a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c0b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0ba:	e841 2300 	strex	r3, r2, [r1]
 800c0be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1e6      	bne.n	800c094 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f023 0301 	bic.w	r3, r3, #1
 800c0dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0e6:	623a      	str	r2, [r7, #32]
 800c0e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ea:	69f9      	ldr	r1, [r7, #28]
 800c0ec:	6a3a      	ldr	r2, [r7, #32]
 800c0ee:	e841 2300 	strex	r3, r2, [r1]
 800c0f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1e5      	bne.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2220      	movs	r2, #32
 800c104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2220      	movs	r2, #32
 800c10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e010      	b.n	800c13e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	69da      	ldr	r2, [r3, #28]
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	4013      	ands	r3, r2
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	429a      	cmp	r2, r3
 800c12a:	bf0c      	ite	eq
 800c12c:	2301      	moveq	r3, #1
 800c12e:	2300      	movne	r3, #0
 800c130:	b2db      	uxtb	r3, r3
 800c132:	461a      	mov	r2, r3
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	429a      	cmp	r2, r3
 800c138:	f43f af48 	beq.w	800bfcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3770      	adds	r7, #112	; 0x70
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c148:	b480      	push	{r7}
 800c14a:	b097      	sub	sp, #92	; 0x5c
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	4613      	mov	r3, r2
 800c154:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	88fa      	ldrh	r2, [r7, #6]
 800c160:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	88fa      	ldrh	r2, [r7, #6]
 800c168:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17a:	d10e      	bne.n	800c19a <UART_Start_Receive_IT+0x52>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d105      	bne.n	800c190 <UART_Start_Receive_IT+0x48>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c18a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c18e:	e02d      	b.n	800c1ec <UART_Start_Receive_IT+0xa4>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	22ff      	movs	r2, #255	; 0xff
 800c194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c198:	e028      	b.n	800c1ec <UART_Start_Receive_IT+0xa4>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10d      	bne.n	800c1be <UART_Start_Receive_IT+0x76>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d104      	bne.n	800c1b4 <UART_Start_Receive_IT+0x6c>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	22ff      	movs	r2, #255	; 0xff
 800c1ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1b2:	e01b      	b.n	800c1ec <UART_Start_Receive_IT+0xa4>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	227f      	movs	r2, #127	; 0x7f
 800c1b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1bc:	e016      	b.n	800c1ec <UART_Start_Receive_IT+0xa4>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1c6:	d10d      	bne.n	800c1e4 <UART_Start_Receive_IT+0x9c>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d104      	bne.n	800c1da <UART_Start_Receive_IT+0x92>
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	227f      	movs	r2, #127	; 0x7f
 800c1d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1d8:	e008      	b.n	800c1ec <UART_Start_Receive_IT+0xa4>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	223f      	movs	r2, #63	; 0x3f
 800c1de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1e2:	e003      	b.n	800c1ec <UART_Start_Receive_IT+0xa4>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2222      	movs	r2, #34	; 0x22
 800c1f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3308      	adds	r3, #8
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c206:	e853 3f00 	ldrex	r3, [r3]
 800c20a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	f043 0301 	orr.w	r3, r3, #1
 800c212:	657b      	str	r3, [r7, #84]	; 0x54
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3308      	adds	r3, #8
 800c21a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c21c:	64ba      	str	r2, [r7, #72]	; 0x48
 800c21e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c220:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c224:	e841 2300 	strex	r3, r2, [r1]
 800c228:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1e5      	bne.n	800c1fc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c238:	d107      	bne.n	800c24a <UART_Start_Receive_IT+0x102>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d103      	bne.n	800c24a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	4a21      	ldr	r2, [pc, #132]	; (800c2cc <UART_Start_Receive_IT+0x184>)
 800c246:	669a      	str	r2, [r3, #104]	; 0x68
 800c248:	e002      	b.n	800c250 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4a20      	ldr	r2, [pc, #128]	; (800c2d0 <UART_Start_Receive_IT+0x188>)
 800c24e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d019      	beq.n	800c28c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	e853 3f00 	ldrex	r3, [r3]
 800c264:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c26c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c276:	637b      	str	r3, [r7, #52]	; 0x34
 800c278:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c27c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c27e:	e841 2300 	strex	r3, r2, [r1]
 800c282:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1e6      	bne.n	800c258 <UART_Start_Receive_IT+0x110>
 800c28a:	e018      	b.n	800c2be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	e853 3f00 	ldrex	r3, [r3]
 800c298:	613b      	str	r3, [r7, #16]
   return(result);
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f043 0320 	orr.w	r3, r3, #32
 800c2a0:	653b      	str	r3, [r7, #80]	; 0x50
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2aa:	623b      	str	r3, [r7, #32]
 800c2ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ae:	69f9      	ldr	r1, [r7, #28]
 800c2b0:	6a3a      	ldr	r2, [r7, #32]
 800c2b2:	e841 2300 	strex	r3, r2, [r1]
 800c2b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1e6      	bne.n	800c28c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	375c      	adds	r7, #92	; 0x5c
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	0800c8f3 	.word	0x0800c8f3
 800c2d0:	0800c78d 	.word	0x0800c78d

0800c2d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b096      	sub	sp, #88	; 0x58
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	88fa      	ldrh	r2, [r7, #6]
 800c2ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2222      	movs	r2, #34	; 0x22
 800c2fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c304:	2b00      	cmp	r3, #0
 800c306:	d028      	beq.n	800c35a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c30c:	4a3e      	ldr	r2, [pc, #248]	; (800c408 <UART_Start_Receive_DMA+0x134>)
 800c30e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c314:	4a3d      	ldr	r2, [pc, #244]	; (800c40c <UART_Start_Receive_DMA+0x138>)
 800c316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c31c:	4a3c      	ldr	r2, [pc, #240]	; (800c410 <UART_Start_Receive_DMA+0x13c>)
 800c31e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c324:	2200      	movs	r2, #0
 800c326:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3324      	adds	r3, #36	; 0x24
 800c332:	4619      	mov	r1, r3
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c338:	461a      	mov	r2, r3
 800c33a:	88fb      	ldrh	r3, [r7, #6]
 800c33c:	f7f9 fe1a 	bl	8005f74 <HAL_DMA_Start_IT>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d009      	beq.n	800c35a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2210      	movs	r2, #16
 800c34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2220      	movs	r2, #32
 800c352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e051      	b.n	800c3fe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d018      	beq.n	800c394 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c36a:	e853 3f00 	ldrex	r3, [r3]
 800c36e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c376:	657b      	str	r3, [r7, #84]	; 0x54
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c380:	64bb      	str	r3, [r7, #72]	; 0x48
 800c382:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c38e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e6      	bne.n	800c362 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3308      	adds	r3, #8
 800c39a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39e:	e853 3f00 	ldrex	r3, [r3]
 800c3a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	f043 0301 	orr.w	r3, r3, #1
 800c3aa:	653b      	str	r3, [r7, #80]	; 0x50
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3b4:	637a      	str	r2, [r7, #52]	; 0x34
 800c3b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3bc:	e841 2300 	strex	r3, r2, [r1]
 800c3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1e5      	bne.n	800c394 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3e8:	623a      	str	r2, [r7, #32]
 800c3ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ec:	69f9      	ldr	r1, [r7, #28]
 800c3ee:	6a3a      	ldr	r2, [r7, #32]
 800c3f0:	e841 2300 	strex	r3, r2, [r1]
 800c3f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1e5      	bne.n	800c3c8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3758      	adds	r7, #88	; 0x58
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	0800c529 	.word	0x0800c529
 800c40c:	0800c651 	.word	0x0800c651
 800c410:	0800c68f 	.word	0x0800c68f

0800c414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c414:	b480      	push	{r7}
 800c416:	b089      	sub	sp, #36	; 0x24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	e853 3f00 	ldrex	r3, [r3]
 800c428:	60bb      	str	r3, [r7, #8]
   return(result);
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c430:	61fb      	str	r3, [r7, #28]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	61bb      	str	r3, [r7, #24]
 800c43c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43e:	6979      	ldr	r1, [r7, #20]
 800c440:	69ba      	ldr	r2, [r7, #24]
 800c442:	e841 2300 	strex	r3, r2, [r1]
 800c446:	613b      	str	r3, [r7, #16]
   return(result);
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1e6      	bne.n	800c41c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2220      	movs	r2, #32
 800c452:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c454:	bf00      	nop
 800c456:	3724      	adds	r7, #36	; 0x24
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c460:	b480      	push	{r7}
 800c462:	b095      	sub	sp, #84	; 0x54
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c470:	e853 3f00 	ldrex	r3, [r3]
 800c474:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c47c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c486:	643b      	str	r3, [r7, #64]	; 0x40
 800c488:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c48c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1e6      	bne.n	800c468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3308      	adds	r3, #8
 800c4a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	e853 3f00 	ldrex	r3, [r3]
 800c4a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	f023 0301 	bic.w	r3, r3, #1
 800c4b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4c2:	e841 2300 	strex	r3, r2, [r1]
 800c4c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1e5      	bne.n	800c49a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d118      	bne.n	800c508 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	e853 3f00 	ldrex	r3, [r3]
 800c4e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	f023 0310 	bic.w	r3, r3, #16
 800c4ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4f4:	61bb      	str	r3, [r7, #24]
 800c4f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f8:	6979      	ldr	r1, [r7, #20]
 800c4fa:	69ba      	ldr	r2, [r7, #24]
 800c4fc:	e841 2300 	strex	r3, r2, [r1]
 800c500:	613b      	str	r3, [r7, #16]
   return(result);
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e6      	bne.n	800c4d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2220      	movs	r2, #32
 800c50c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c51c:	bf00      	nop
 800c51e:	3754      	adds	r7, #84	; 0x54
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b09c      	sub	sp, #112	; 0x70
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c534:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c53e:	d071      	beq.n	800c624 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c542:	2200      	movs	r2, #0
 800c544:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c550:	e853 3f00 	ldrex	r3, [r3]
 800c554:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c55c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	461a      	mov	r2, r3
 800c564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c566:	65bb      	str	r3, [r7, #88]	; 0x58
 800c568:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c56c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c56e:	e841 2300 	strex	r3, r2, [r1]
 800c572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1e6      	bne.n	800c548 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c57a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	3308      	adds	r3, #8
 800c580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	e853 3f00 	ldrex	r3, [r3]
 800c588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58c:	f023 0301 	bic.w	r3, r3, #1
 800c590:	667b      	str	r3, [r7, #100]	; 0x64
 800c592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3308      	adds	r3, #8
 800c598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c59a:	647a      	str	r2, [r7, #68]	; 0x44
 800c59c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e5      	bne.n	800c57a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3308      	adds	r3, #8
 800c5b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c4:	663b      	str	r3, [r7, #96]	; 0x60
 800c5c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5ce:	633a      	str	r2, [r7, #48]	; 0x30
 800c5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5d6:	e841 2300 	strex	r3, r2, [r1]
 800c5da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1e5      	bne.n	800c5ae <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d118      	bne.n	800c624 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	e853 3f00 	ldrex	r3, [r3]
 800c5fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f023 0310 	bic.w	r3, r3, #16
 800c606:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	461a      	mov	r2, r3
 800c60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c610:	61fb      	str	r3, [r7, #28]
 800c612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c614:	69b9      	ldr	r1, [r7, #24]
 800c616:	69fa      	ldr	r2, [r7, #28]
 800c618:	e841 2300 	strex	r3, r2, [r1]
 800c61c:	617b      	str	r3, [r7, #20]
   return(result);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1e6      	bne.n	800c5f2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c626:	2200      	movs	r2, #0
 800c628:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c62a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c62c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d107      	bne.n	800c642 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c634:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c638:	4619      	mov	r1, r3
 800c63a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c63c:	f7ff f974 	bl	800b928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c640:	e002      	b.n	800c648 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c642:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c644:	f7f5 ff80 	bl	8002548 <HAL_UART_RxCpltCallback>
}
 800c648:	bf00      	nop
 800c64a:	3770      	adds	r7, #112	; 0x70
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2201      	movs	r2, #1
 800c662:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d109      	bne.n	800c680 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c672:	085b      	lsrs	r3, r3, #1
 800c674:	b29b      	uxth	r3, r3
 800c676:	4619      	mov	r1, r3
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f7ff f955 	bl	800b928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c67e:	e002      	b.n	800c686 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f7ff f947 	bl	800b914 <HAL_UART_RxHalfCpltCallback>
}
 800c686:	bf00      	nop
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b086      	sub	sp, #24
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6b4:	2b80      	cmp	r3, #128	; 0x80
 800c6b6:	d109      	bne.n	800c6cc <UART_DMAError+0x3e>
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	2b21      	cmp	r3, #33	; 0x21
 800c6bc:	d106      	bne.n	800c6cc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c6c6:	6978      	ldr	r0, [r7, #20]
 800c6c8:	f7ff fea4 	bl	800c414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d6:	2b40      	cmp	r3, #64	; 0x40
 800c6d8:	d109      	bne.n	800c6ee <UART_DMAError+0x60>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2b22      	cmp	r3, #34	; 0x22
 800c6de:	d106      	bne.n	800c6ee <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c6e8:	6978      	ldr	r0, [r7, #20]
 800c6ea:	f7ff feb9 	bl	800c460 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6f4:	f043 0210 	orr.w	r2, r3, #16
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6fe:	6978      	ldr	r0, [r7, #20]
 800c700:	f7f5 ffc4 	bl	800268c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c704:	bf00      	nop
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2200      	movs	r2, #0
 800c726:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f7f5 ffae 	bl	800268c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c730:	bf00      	nop
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	e853 3f00 	ldrex	r3, [r3]
 800c74c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c754:	61fb      	str	r3, [r7, #28]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	61bb      	str	r3, [r7, #24]
 800c760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c762:	6979      	ldr	r1, [r7, #20]
 800c764:	69ba      	ldr	r2, [r7, #24]
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	613b      	str	r3, [r7, #16]
   return(result);
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1e6      	bne.n	800c740 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2220      	movs	r2, #32
 800c776:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7ff f8be 	bl	800b900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c784:	bf00      	nop
 800c786:	3720      	adds	r7, #32
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b096      	sub	sp, #88	; 0x58
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c79a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7a4:	2b22      	cmp	r3, #34	; 0x22
 800c7a6:	f040 8098 	bne.w	800c8da <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c7b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c7b8:	b2d9      	uxtb	r1, r3
 800c7ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7c4:	400a      	ands	r2, r1
 800c7c6:	b2d2      	uxtb	r2, r2
 800c7c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d17b      	bne.n	800c8ea <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	e853 3f00 	ldrex	r3, [r3]
 800c7fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c806:	653b      	str	r3, [r7, #80]	; 0x50
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c810:	647b      	str	r3, [r7, #68]	; 0x44
 800c812:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c814:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c818:	e841 2300 	strex	r3, r2, [r1]
 800c81c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1e6      	bne.n	800c7f2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	3308      	adds	r3, #8
 800c82a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	e853 3f00 	ldrex	r3, [r3]
 800c832:	623b      	str	r3, [r7, #32]
   return(result);
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	f023 0301 	bic.w	r3, r3, #1
 800c83a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3308      	adds	r3, #8
 800c842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c844:	633a      	str	r2, [r7, #48]	; 0x30
 800c846:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c84c:	e841 2300 	strex	r3, r2, [r1]
 800c850:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1e5      	bne.n	800c824 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2220      	movs	r2, #32
 800c85c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c870:	2b01      	cmp	r3, #1
 800c872:	d12e      	bne.n	800c8d2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	e853 3f00 	ldrex	r3, [r3]
 800c886:	60fb      	str	r3, [r7, #12]
   return(result);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f023 0310 	bic.w	r3, r3, #16
 800c88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	461a      	mov	r2, r3
 800c896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c898:	61fb      	str	r3, [r7, #28]
 800c89a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89c:	69b9      	ldr	r1, [r7, #24]
 800c89e:	69fa      	ldr	r2, [r7, #28]
 800c8a0:	e841 2300 	strex	r3, r2, [r1]
 800c8a4:	617b      	str	r3, [r7, #20]
   return(result);
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1e6      	bne.n	800c87a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	69db      	ldr	r3, [r3, #28]
 800c8b2:	f003 0310 	and.w	r3, r3, #16
 800c8b6:	2b10      	cmp	r3, #16
 800c8b8:	d103      	bne.n	800c8c2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2210      	movs	r2, #16
 800c8c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff f82c 	bl	800b928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8d0:	e00b      	b.n	800c8ea <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7f5 fe38 	bl	8002548 <HAL_UART_RxCpltCallback>
}
 800c8d8:	e007      	b.n	800c8ea <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	699a      	ldr	r2, [r3, #24]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f042 0208 	orr.w	r2, r2, #8
 800c8e8:	619a      	str	r2, [r3, #24]
}
 800c8ea:	bf00      	nop
 800c8ec:	3758      	adds	r7, #88	; 0x58
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b096      	sub	sp, #88	; 0x58
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c900:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c90a:	2b22      	cmp	r3, #34	; 0x22
 800c90c:	f040 8098 	bne.w	800ca40 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c916:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c91e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c920:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c924:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c928:	4013      	ands	r3, r2
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c92e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c934:	1c9a      	adds	r2, r3, #2
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c940:	b29b      	uxth	r3, r3
 800c942:	3b01      	subs	r3, #1
 800c944:	b29a      	uxth	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c952:	b29b      	uxth	r3, r3
 800c954:	2b00      	cmp	r3, #0
 800c956:	d17b      	bne.n	800ca50 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c960:	e853 3f00 	ldrex	r3, [r3]
 800c964:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c96c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	461a      	mov	r2, r3
 800c974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c976:	643b      	str	r3, [r7, #64]	; 0x40
 800c978:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c97c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c97e:	e841 2300 	strex	r3, r2, [r1]
 800c982:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1e6      	bne.n	800c958 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3308      	adds	r3, #8
 800c990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	e853 3f00 	ldrex	r3, [r3]
 800c998:	61fb      	str	r3, [r7, #28]
   return(result);
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	f023 0301 	bic.w	r3, r3, #1
 800c9a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c9ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9b2:	e841 2300 	strex	r3, r2, [r1]
 800c9b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1e5      	bne.n	800c98a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2220      	movs	r2, #32
 800c9c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d12e      	bne.n	800ca38 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	e853 3f00 	ldrex	r3, [r3]
 800c9ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	f023 0310 	bic.w	r3, r3, #16
 800c9f4:	647b      	str	r3, [r7, #68]	; 0x44
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9fe:	61bb      	str	r3, [r7, #24]
 800ca00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca02:	6979      	ldr	r1, [r7, #20]
 800ca04:	69ba      	ldr	r2, [r7, #24]
 800ca06:	e841 2300 	strex	r3, r2, [r1]
 800ca0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1e6      	bne.n	800c9e0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69db      	ldr	r3, [r3, #28]
 800ca18:	f003 0310 	and.w	r3, r3, #16
 800ca1c:	2b10      	cmp	r3, #16
 800ca1e:	d103      	bne.n	800ca28 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2210      	movs	r2, #16
 800ca26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7fe ff79 	bl	800b928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca36:	e00b      	b.n	800ca50 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7f5 fd85 	bl	8002548 <HAL_UART_RxCpltCallback>
}
 800ca3e:	e007      	b.n	800ca50 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	699a      	ldr	r2, [r3, #24]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f042 0208 	orr.w	r2, r2, #8
 800ca4e:	619a      	str	r2, [r3, #24]
}
 800ca50:	bf00      	nop
 800ca52:	3758      	adds	r7, #88	; 0x58
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ca66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca6a:	2b84      	cmp	r3, #132	; 0x84
 800ca6c:	d005      	beq.n	800ca7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ca6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	4413      	add	r3, r2
 800ca76:	3303      	adds	r3, #3
 800ca78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca8e:	f3ef 8305 	mrs	r3, IPSR
 800ca92:	607b      	str	r3, [r7, #4]
  return(result);
 800ca94:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	bf14      	ite	ne
 800ca9a:	2301      	movne	r3, #1
 800ca9c:	2300      	moveq	r3, #0
 800ca9e:	b2db      	uxtb	r3, r3
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cab0:	f001 fafa 	bl	800e0a8 <vTaskStartScheduler>
  
  return osOK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	bd80      	pop	{r7, pc}

0800caba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800caba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cabc:	b089      	sub	sp, #36	; 0x24
 800cabe:	af04      	add	r7, sp, #16
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d020      	beq.n	800cb0e <osThreadCreate+0x54>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d01c      	beq.n	800cb0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	685c      	ldr	r4, [r3, #4]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	691e      	ldr	r6, [r3, #16]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff ffb6 	bl	800ca58 <makeFreeRtosPriority>
 800caec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	695b      	ldr	r3, [r3, #20]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800caf6:	9202      	str	r2, [sp, #8]
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	9100      	str	r1, [sp, #0]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	4632      	mov	r2, r6
 800cb00:	4629      	mov	r1, r5
 800cb02:	4620      	mov	r0, r4
 800cb04:	f001 f864 	bl	800dbd0 <xTaskCreateStatic>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	e01c      	b.n	800cb48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685c      	ldr	r4, [r3, #4]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb1a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff ff98 	bl	800ca58 <makeFreeRtosPriority>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	f107 030c 	add.w	r3, r7, #12
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	9200      	str	r2, [sp, #0]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	4632      	mov	r2, r6
 800cb36:	4629      	mov	r1, r5
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f001 f8ac 	bl	800dc96 <xTaskCreate>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d001      	beq.n	800cb48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	e000      	b.n	800cb4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cb48:	68fb      	ldr	r3, [r7, #12]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3714      	adds	r7, #20
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b084      	sub	sp, #16
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <osDelay+0x16>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	e000      	b.n	800cb6a <osDelay+0x18>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f001 fa66 	bl	800e03c <vTaskDelay>
  
  return osOK;
 800cb70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b082      	sub	sp, #8
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d007      	beq.n	800cb9a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	4619      	mov	r1, r3
 800cb90:	2001      	movs	r0, #1
 800cb92:	f000 fb84 	bl	800d29e <xQueueCreateMutexStatic>
 800cb96:	4603      	mov	r3, r0
 800cb98:	e003      	b.n	800cba2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cb9a:	2001      	movs	r0, #1
 800cb9c:	f000 fb67 	bl	800d26e <xQueueCreateMutex>
 800cba0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
	...

0800cbac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d101      	bne.n	800cbc4 <osMutexWait+0x18>
    return osErrorParameter;
 800cbc0:	2380      	movs	r3, #128	; 0x80
 800cbc2:	e03a      	b.n	800cc3a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbce:	d103      	bne.n	800cbd8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800cbd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd4:	60fb      	str	r3, [r7, #12]
 800cbd6:	e009      	b.n	800cbec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d006      	beq.n	800cbec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <osMutexWait+0x40>
      ticks = 1;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cbec:	f7ff ff4c 	bl	800ca88 <inHandlerMode>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d017      	beq.n	800cc26 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cbf6:	f107 0308 	add.w	r3, r7, #8
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fe18 	bl	800d834 <xQueueReceiveFromISR>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d001      	beq.n	800cc0e <osMutexWait+0x62>
      return osErrorOS;
 800cc0a:	23ff      	movs	r3, #255	; 0xff
 800cc0c:	e015      	b.n	800cc3a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d011      	beq.n	800cc38 <osMutexWait+0x8c>
 800cc14:	4b0b      	ldr	r3, [pc, #44]	; (800cc44 <osMutexWait+0x98>)
 800cc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	e008      	b.n	800cc38 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 fcef 	bl	800d60c <xQueueSemaphoreTake>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d001      	beq.n	800cc38 <osMutexWait+0x8c>
    return osErrorOS;
 800cc34:	23ff      	movs	r3, #255	; 0xff
 800cc36:	e000      	b.n	800cc3a <osMutexWait+0x8e>
  }
  
  return osOK;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	e000ed04 	.word	0xe000ed04

0800cc48 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cc54:	2300      	movs	r3, #0
 800cc56:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800cc58:	f7ff ff16 	bl	800ca88 <inHandlerMode>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d016      	beq.n	800cc90 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cc62:	f107 0308 	add.w	r3, r7, #8
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fc39 	bl	800d4e0 <xQueueGiveFromISR>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d001      	beq.n	800cc78 <osMutexRelease+0x30>
      return osErrorOS;
 800cc74:	23ff      	movs	r3, #255	; 0xff
 800cc76:	e017      	b.n	800cca8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d013      	beq.n	800cca6 <osMutexRelease+0x5e>
 800cc7e:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <osMutexRelease+0x68>)
 800cc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	e00a      	b.n	800cca6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800cc90:	2300      	movs	r3, #0
 800cc92:	2200      	movs	r2, #0
 800cc94:	2100      	movs	r1, #0
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 fb1c 	bl	800d2d4 <xQueueGenericSend>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d001      	beq.n	800cca6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800cca2:	23ff      	movs	r3, #255	; 0xff
 800cca4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800cca6:	68fb      	ldr	r3, [r7, #12]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	e000ed04 	.word	0xe000ed04

0800ccb4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af02      	add	r7, sp, #8
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00f      	beq.n	800cce6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d10a      	bne.n	800cce2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	2203      	movs	r2, #3
 800ccd2:	9200      	str	r2, [sp, #0]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	2001      	movs	r0, #1
 800ccda:	f000 f9cb 	bl	800d074 <xQueueGenericCreateStatic>
 800ccde:	4603      	mov	r3, r0
 800cce0:	e016      	b.n	800cd10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800cce2:	2300      	movs	r3, #0
 800cce4:	e014      	b.n	800cd10 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d110      	bne.n	800cd0e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ccec:	2203      	movs	r2, #3
 800ccee:	2100      	movs	r1, #0
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	f000 fa41 	bl	800d178 <xQueueGenericCreate>
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d005      	beq.n	800cd0a <osSemaphoreCreate+0x56>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	2200      	movs	r2, #0
 800cd02:	2100      	movs	r1, #0
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f000 fae5 	bl	800d2d4 <xQueueGenericSend>
      return sema;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	e000      	b.n	800cd10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800cd0e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cd22:	2300      	movs	r3, #0
 800cd24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800cd2c:	2380      	movs	r3, #128	; 0x80
 800cd2e:	e03a      	b.n	800cda6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3a:	d103      	bne.n	800cd44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800cd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	e009      	b.n	800cd58 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d006      	beq.n	800cd58 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <osSemaphoreWait+0x40>
      ticks = 1;
 800cd54:	2301      	movs	r3, #1
 800cd56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cd58:	f7ff fe96 	bl	800ca88 <inHandlerMode>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d017      	beq.n	800cd92 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cd62:	f107 0308 	add.w	r3, r7, #8
 800cd66:	461a      	mov	r2, r3
 800cd68:	2100      	movs	r1, #0
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fd62 	bl	800d834 <xQueueReceiveFromISR>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d001      	beq.n	800cd7a <osSemaphoreWait+0x62>
      return osErrorOS;
 800cd76:	23ff      	movs	r3, #255	; 0xff
 800cd78:	e015      	b.n	800cda6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d011      	beq.n	800cda4 <osSemaphoreWait+0x8c>
 800cd80:	4b0b      	ldr	r3, [pc, #44]	; (800cdb0 <osSemaphoreWait+0x98>)
 800cd82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd86:	601a      	str	r2, [r3, #0]
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	e008      	b.n	800cda4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800cd92:	68f9      	ldr	r1, [r7, #12]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fc39 	bl	800d60c <xQueueSemaphoreTake>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d001      	beq.n	800cda4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800cda0:	23ff      	movs	r3, #255	; 0xff
 800cda2:	e000      	b.n	800cda6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	e000ed04 	.word	0xe000ed04

0800cdb4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800cdc4:	f7ff fe60 	bl	800ca88 <inHandlerMode>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d016      	beq.n	800cdfc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cdce:	f107 0308 	add.w	r3, r7, #8
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fb83 	bl	800d4e0 <xQueueGiveFromISR>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d001      	beq.n	800cde4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800cde0:	23ff      	movs	r3, #255	; 0xff
 800cde2:	e017      	b.n	800ce14 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d013      	beq.n	800ce12 <osSemaphoreRelease+0x5e>
 800cdea:	4b0c      	ldr	r3, [pc, #48]	; (800ce1c <osSemaphoreRelease+0x68>)
 800cdec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf0:	601a      	str	r2, [r3, #0]
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	e00a      	b.n	800ce12 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	2200      	movs	r2, #0
 800ce00:	2100      	movs	r1, #0
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 fa66 	bl	800d2d4 <xQueueGenericSend>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d001      	beq.n	800ce12 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ce0e:	23ff      	movs	r3, #255	; 0xff
 800ce10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ce12:	68fb      	ldr	r3, [r7, #12]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	e000ed04 	.word	0xe000ed04

0800ce20 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fd89 	bl	800d940 <uxQueueMessagesWaiting>
 800ce2e:	4603      	mov	r3, r0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f103 0208 	add.w	r2, r3, #8
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f103 0208 	add.w	r2, r3, #8
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f103 0208 	add.w	r2, r3, #8
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce86:	bf00      	nop
 800ce88:	370c      	adds	r7, #12
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce92:	b480      	push	{r7}
 800ce94:	b085      	sub	sp, #20
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	689a      	ldr	r2, [r3, #8]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	1c5a      	adds	r2, r3, #1
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	601a      	str	r2, [r3, #0]
}
 800cece:	bf00      	nop
 800ced0:	3714      	adds	r7, #20
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr

0800ceda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceda:	b480      	push	{r7}
 800cedc:	b085      	sub	sp, #20
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
 800cee2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef0:	d103      	bne.n	800cefa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	e00c      	b.n	800cf14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	3308      	adds	r3, #8
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	e002      	b.n	800cf08 <vListInsert+0x2e>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	60fb      	str	r3, [r7, #12]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d2f6      	bcs.n	800cf02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	683a      	ldr	r2, [r7, #0]
 800cf2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	601a      	str	r2, [r3, #0]
}
 800cf40:	bf00      	nop
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	6892      	ldr	r2, [r2, #8]
 800cf62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	6852      	ldr	r2, [r2, #4]
 800cf6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d103      	bne.n	800cf80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689a      	ldr	r2, [r3, #8]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	1e5a      	subs	r2, r3, #1
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d10c      	bne.n	800cfce <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb8:	b672      	cpsid	i
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	b662      	cpsie	i
 800cfc8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cfca:	bf00      	nop
 800cfcc:	e7fe      	b.n	800cfcc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cfce:	f001 ffed 	bl	800efac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfda:	68f9      	ldr	r1, [r7, #12]
 800cfdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cfde:	fb01 f303 	mul.w	r3, r1, r3
 800cfe2:	441a      	add	r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffe:	3b01      	subs	r3, #1
 800d000:	68f9      	ldr	r1, [r7, #12]
 800d002:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d004:	fb01 f303 	mul.w	r3, r1, r3
 800d008:	441a      	add	r2, r3
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	22ff      	movs	r2, #255	; 0xff
 800d012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	22ff      	movs	r2, #255	; 0xff
 800d01a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d114      	bne.n	800d04e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d01a      	beq.n	800d062 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3310      	adds	r3, #16
 800d030:	4618      	mov	r0, r3
 800d032:	f001 faa7 	bl	800e584 <xTaskRemoveFromEventList>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d012      	beq.n	800d062 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d03c:	4b0c      	ldr	r3, [pc, #48]	; (800d070 <xQueueGenericReset+0xd0>)
 800d03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	e009      	b.n	800d062 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3310      	adds	r3, #16
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fef0 	bl	800ce38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3324      	adds	r3, #36	; 0x24
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff feeb 	bl	800ce38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d062:	f001 ffd7 	bl	800f014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d066:	2301      	movs	r3, #1
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	e000ed04 	.word	0xe000ed04

0800d074 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08e      	sub	sp, #56	; 0x38
 800d078:	af02      	add	r7, sp, #8
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
 800d080:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10c      	bne.n	800d0a2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08c:	b672      	cpsid	i
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	b662      	cpsie	i
 800d09c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d09e:	bf00      	nop
 800d0a0:	e7fe      	b.n	800d0a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10c      	bne.n	800d0c2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ac:	b672      	cpsid	i
 800d0ae:	f383 8811 	msr	BASEPRI, r3
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	b662      	cpsie	i
 800d0bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0be:	bf00      	nop
 800d0c0:	e7fe      	b.n	800d0c0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <xQueueGenericCreateStatic+0x5a>
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <xQueueGenericCreateStatic+0x5e>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e000      	b.n	800d0d4 <xQueueGenericCreateStatic+0x60>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10c      	bne.n	800d0f2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	b672      	cpsid	i
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	b662      	cpsie	i
 800d0ec:	623b      	str	r3, [r7, #32]
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d102      	bne.n	800d0fe <xQueueGenericCreateStatic+0x8a>
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <xQueueGenericCreateStatic+0x8e>
 800d0fe:	2301      	movs	r3, #1
 800d100:	e000      	b.n	800d104 <xQueueGenericCreateStatic+0x90>
 800d102:	2300      	movs	r3, #0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10c      	bne.n	800d122 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	b672      	cpsid	i
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	b662      	cpsie	i
 800d11c:	61fb      	str	r3, [r7, #28]
}
 800d11e:	bf00      	nop
 800d120:	e7fe      	b.n	800d120 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d122:	2348      	movs	r3, #72	; 0x48
 800d124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b48      	cmp	r3, #72	; 0x48
 800d12a:	d00c      	beq.n	800d146 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	b672      	cpsid	i
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	b662      	cpsie	i
 800d140:	61bb      	str	r3, [r7, #24]
}
 800d142:	bf00      	nop
 800d144:	e7fe      	b.n	800d144 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d146:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00d      	beq.n	800d16e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	2201      	movs	r2, #1
 800d156:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d15a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	4613      	mov	r3, r2
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	68b9      	ldr	r1, [r7, #8]
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f000 f847 	bl	800d1fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d170:	4618      	mov	r0, r3
 800d172:	3730      	adds	r7, #48	; 0x30
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08a      	sub	sp, #40	; 0x28
 800d17c:	af02      	add	r7, sp, #8
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	4613      	mov	r3, r2
 800d184:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10c      	bne.n	800d1a6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	b672      	cpsid	i
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	b662      	cpsie	i
 800d1a0:	613b      	str	r3, [r7, #16]
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d102      	bne.n	800d1b2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	61fb      	str	r3, [r7, #28]
 800d1b0:	e004      	b.n	800d1bc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	3348      	adds	r3, #72	; 0x48
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f002 f81f 	bl	800f204 <pvPortMalloc>
 800d1c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d011      	beq.n	800d1f2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	3348      	adds	r3, #72	; 0x48
 800d1d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1e0:	79fa      	ldrb	r2, [r7, #7]
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	68b9      	ldr	r1, [r7, #8]
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f000 f805 	bl	800d1fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1f2:	69bb      	ldr	r3, [r7, #24]
	}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3720      	adds	r7, #32
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d103      	bne.n	800d218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	e002      	b.n	800d21e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d22a:	2101      	movs	r1, #1
 800d22c:	69b8      	ldr	r0, [r7, #24]
 800d22e:	f7ff feb7 	bl	800cfa0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b082      	sub	sp, #8
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00e      	beq.n	800d266 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d25a:	2300      	movs	r3, #0
 800d25c:	2200      	movs	r2, #0
 800d25e:	2100      	movs	r1, #0
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f837 	bl	800d2d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d266:	bf00      	nop
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b086      	sub	sp, #24
 800d272:	af00      	add	r7, sp, #0
 800d274:	4603      	mov	r3, r0
 800d276:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d278:	2301      	movs	r3, #1
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	2300      	movs	r3, #0
 800d27e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d280:	79fb      	ldrb	r3, [r7, #7]
 800d282:	461a      	mov	r2, r3
 800d284:	6939      	ldr	r1, [r7, #16]
 800d286:	6978      	ldr	r0, [r7, #20]
 800d288:	f7ff ff76 	bl	800d178 <xQueueGenericCreate>
 800d28c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f7ff ffd3 	bl	800d23a <prvInitialiseMutex>

		return xNewQueue;
 800d294:	68fb      	ldr	r3, [r7, #12]
	}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b088      	sub	sp, #32
 800d2a2:	af02      	add	r7, sp, #8
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	6039      	str	r1, [r7, #0]
 800d2a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	617b      	str	r3, [r7, #20]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d2b2:	79fb      	ldrb	r3, [r7, #7]
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	6939      	ldr	r1, [r7, #16]
 800d2bc:	6978      	ldr	r0, [r7, #20]
 800d2be:	f7ff fed9 	bl	800d074 <xQueueGenericCreateStatic>
 800d2c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f7ff ffb8 	bl	800d23a <prvInitialiseMutex>

		return xNewQueue;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
	}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b08e      	sub	sp, #56	; 0x38
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
 800d2e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10c      	bne.n	800d30a <xQueueGenericSend+0x36>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f4:	b672      	cpsid	i
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	b662      	cpsie	i
 800d304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d306:	bf00      	nop
 800d308:	e7fe      	b.n	800d308 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d103      	bne.n	800d318 <xQueueGenericSend+0x44>
 800d310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d314:	2b00      	cmp	r3, #0
 800d316:	d101      	bne.n	800d31c <xQueueGenericSend+0x48>
 800d318:	2301      	movs	r3, #1
 800d31a:	e000      	b.n	800d31e <xQueueGenericSend+0x4a>
 800d31c:	2300      	movs	r3, #0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10c      	bne.n	800d33c <xQueueGenericSend+0x68>
	__asm volatile
 800d322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d326:	b672      	cpsid	i
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	b662      	cpsie	i
 800d336:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d338:	bf00      	nop
 800d33a:	e7fe      	b.n	800d33a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d103      	bne.n	800d34a <xQueueGenericSend+0x76>
 800d342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d346:	2b01      	cmp	r3, #1
 800d348:	d101      	bne.n	800d34e <xQueueGenericSend+0x7a>
 800d34a:	2301      	movs	r3, #1
 800d34c:	e000      	b.n	800d350 <xQueueGenericSend+0x7c>
 800d34e:	2300      	movs	r3, #0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10c      	bne.n	800d36e <xQueueGenericSend+0x9a>
	__asm volatile
 800d354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d358:	b672      	cpsid	i
 800d35a:	f383 8811 	msr	BASEPRI, r3
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	b662      	cpsie	i
 800d368:	623b      	str	r3, [r7, #32]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d36e:	f001 fad1 	bl	800e914 <xTaskGetSchedulerState>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d102      	bne.n	800d37e <xQueueGenericSend+0xaa>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <xQueueGenericSend+0xae>
 800d37e:	2301      	movs	r3, #1
 800d380:	e000      	b.n	800d384 <xQueueGenericSend+0xb0>
 800d382:	2300      	movs	r3, #0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10c      	bne.n	800d3a2 <xQueueGenericSend+0xce>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	b672      	cpsid	i
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	b662      	cpsie	i
 800d39c:	61fb      	str	r3, [r7, #28]
}
 800d39e:	bf00      	nop
 800d3a0:	e7fe      	b.n	800d3a0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3a2:	f001 fe03 	bl	800efac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d302      	bcc.n	800d3b8 <xQueueGenericSend+0xe4>
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d129      	bne.n	800d40c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	68b9      	ldr	r1, [r7, #8]
 800d3bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3be:	f000 faf7 	bl	800d9b0 <prvCopyDataToQueue>
 800d3c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d010      	beq.n	800d3ee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	3324      	adds	r3, #36	; 0x24
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f001 f8d7 	bl	800e584 <xTaskRemoveFromEventList>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d013      	beq.n	800d404 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d3dc:	4b3f      	ldr	r3, [pc, #252]	; (800d4dc <xQueueGenericSend+0x208>)
 800d3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	e00a      	b.n	800d404 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3f4:	4b39      	ldr	r3, [pc, #228]	; (800d4dc <xQueueGenericSend+0x208>)
 800d3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3fa:	601a      	str	r2, [r3, #0]
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d404:	f001 fe06 	bl	800f014 <vPortExitCritical>
				return pdPASS;
 800d408:	2301      	movs	r3, #1
 800d40a:	e063      	b.n	800d4d4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d103      	bne.n	800d41a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d412:	f001 fdff 	bl	800f014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d416:	2300      	movs	r3, #0
 800d418:	e05c      	b.n	800d4d4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d106      	bne.n	800d42e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d420:	f107 0314 	add.w	r3, r7, #20
 800d424:	4618      	mov	r0, r3
 800d426:	f001 f911 	bl	800e64c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d42a:	2301      	movs	r3, #1
 800d42c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d42e:	f001 fdf1 	bl	800f014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d432:	f000 fea7 	bl	800e184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d436:	f001 fdb9 	bl	800efac <vPortEnterCritical>
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d440:	b25b      	sxtb	r3, r3
 800d442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d446:	d103      	bne.n	800d450 <xQueueGenericSend+0x17c>
 800d448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d456:	b25b      	sxtb	r3, r3
 800d458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45c:	d103      	bne.n	800d466 <xQueueGenericSend+0x192>
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	2200      	movs	r2, #0
 800d462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d466:	f001 fdd5 	bl	800f014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d46a:	1d3a      	adds	r2, r7, #4
 800d46c:	f107 0314 	add.w	r3, r7, #20
 800d470:	4611      	mov	r1, r2
 800d472:	4618      	mov	r0, r3
 800d474:	f001 f900 	bl	800e678 <xTaskCheckForTimeOut>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d124      	bne.n	800d4c8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d47e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d480:	f000 fb8e 	bl	800dba0 <prvIsQueueFull>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d018      	beq.n	800d4bc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	3310      	adds	r3, #16
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	4611      	mov	r1, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f001 f850 	bl	800e538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d49a:	f000 fb19 	bl	800dad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d49e:	f000 fe7f 	bl	800e1a0 <xTaskResumeAll>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f47f af7c 	bne.w	800d3a2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d4aa:	4b0c      	ldr	r3, [pc, #48]	; (800d4dc <xQueueGenericSend+0x208>)
 800d4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4b0:	601a      	str	r2, [r3, #0]
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	e772      	b.n	800d3a2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4be:	f000 fb07 	bl	800dad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4c2:	f000 fe6d 	bl	800e1a0 <xTaskResumeAll>
 800d4c6:	e76c      	b.n	800d3a2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d4c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4ca:	f000 fb01 	bl	800dad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4ce:	f000 fe67 	bl	800e1a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d4d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3738      	adds	r7, #56	; 0x38
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	e000ed04 	.word	0xe000ed04

0800d4e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08e      	sub	sp, #56	; 0x38
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10c      	bne.n	800d50e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	b672      	cpsid	i
 800d4fa:	f383 8811 	msr	BASEPRI, r3
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	b662      	cpsie	i
 800d508:	623b      	str	r3, [r7, #32]
}
 800d50a:	bf00      	nop
 800d50c:	e7fe      	b.n	800d50c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00c      	beq.n	800d530 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51a:	b672      	cpsid	i
 800d51c:	f383 8811 	msr	BASEPRI, r3
 800d520:	f3bf 8f6f 	isb	sy
 800d524:	f3bf 8f4f 	dsb	sy
 800d528:	b662      	cpsie	i
 800d52a:	61fb      	str	r3, [r7, #28]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d103      	bne.n	800d540 <xQueueGiveFromISR+0x60>
 800d538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d101      	bne.n	800d544 <xQueueGiveFromISR+0x64>
 800d540:	2301      	movs	r3, #1
 800d542:	e000      	b.n	800d546 <xQueueGiveFromISR+0x66>
 800d544:	2300      	movs	r3, #0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d10c      	bne.n	800d564 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54e:	b672      	cpsid	i
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	b662      	cpsie	i
 800d55e:	61bb      	str	r3, [r7, #24]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d564:	f001 fe0a 	bl	800f17c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d568:	f3ef 8211 	mrs	r2, BASEPRI
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	b672      	cpsid	i
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	b662      	cpsie	i
 800d580:	617a      	str	r2, [r7, #20]
 800d582:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d584:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d586:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d594:	429a      	cmp	r2, r3
 800d596:	d22b      	bcs.n	800d5f0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a4:	1c5a      	adds	r2, r3, #1
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d5aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b2:	d112      	bne.n	800d5da <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d016      	beq.n	800d5ea <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5be:	3324      	adds	r3, #36	; 0x24
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f000 ffdf 	bl	800e584 <xTaskRemoveFromEventList>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00e      	beq.n	800d5ea <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00b      	beq.n	800d5ea <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	601a      	str	r2, [r3, #0]
 800d5d8:	e007      	b.n	800d5ea <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5de:	3301      	adds	r3, #1
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	b25a      	sxtb	r2, r3
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	637b      	str	r3, [r7, #52]	; 0x34
 800d5ee:	e001      	b.n	800d5f4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d5fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d602:	4618      	mov	r0, r3
 800d604:	3738      	adds	r7, #56	; 0x38
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
	...

0800d60c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b08e      	sub	sp, #56	; 0x38
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d616:	2300      	movs	r3, #0
 800d618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d61e:	2300      	movs	r3, #0
 800d620:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10c      	bne.n	800d642 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62c:	b672      	cpsid	i
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	b662      	cpsie	i
 800d63c:	623b      	str	r3, [r7, #32]
}
 800d63e:	bf00      	nop
 800d640:	e7fe      	b.n	800d640 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00c      	beq.n	800d664 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	b672      	cpsid	i
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	b662      	cpsie	i
 800d65e:	61fb      	str	r3, [r7, #28]
}
 800d660:	bf00      	nop
 800d662:	e7fe      	b.n	800d662 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d664:	f001 f956 	bl	800e914 <xTaskGetSchedulerState>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d102      	bne.n	800d674 <xQueueSemaphoreTake+0x68>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d101      	bne.n	800d678 <xQueueSemaphoreTake+0x6c>
 800d674:	2301      	movs	r3, #1
 800d676:	e000      	b.n	800d67a <xQueueSemaphoreTake+0x6e>
 800d678:	2300      	movs	r3, #0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10c      	bne.n	800d698 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	b672      	cpsid	i
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	b662      	cpsie	i
 800d692:	61bb      	str	r3, [r7, #24]
}
 800d694:	bf00      	nop
 800d696:	e7fe      	b.n	800d696 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d698:	f001 fc88 	bl	800efac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d024      	beq.n	800d6f2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	1e5a      	subs	r2, r3, #1
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d104      	bne.n	800d6c2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d6b8:	f001 faf2 	bl	800eca0 <pvTaskIncrementMutexHeldCount>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00f      	beq.n	800d6ea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6cc:	3310      	adds	r3, #16
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 ff58 	bl	800e584 <xTaskRemoveFromEventList>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d007      	beq.n	800d6ea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6da:	4b55      	ldr	r3, [pc, #340]	; (800d830 <xQueueSemaphoreTake+0x224>)
 800d6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6ea:	f001 fc93 	bl	800f014 <vPortExitCritical>
				return pdPASS;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e099      	b.n	800d826 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d113      	bne.n	800d720 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00c      	beq.n	800d718 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d702:	b672      	cpsid	i
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	b662      	cpsie	i
 800d712:	617b      	str	r3, [r7, #20]
}
 800d714:	bf00      	nop
 800d716:	e7fe      	b.n	800d716 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d718:	f001 fc7c 	bl	800f014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d71c:	2300      	movs	r3, #0
 800d71e:	e082      	b.n	800d826 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d722:	2b00      	cmp	r3, #0
 800d724:	d106      	bne.n	800d734 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d726:	f107 030c 	add.w	r3, r7, #12
 800d72a:	4618      	mov	r0, r3
 800d72c:	f000 ff8e 	bl	800e64c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d730:	2301      	movs	r3, #1
 800d732:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d734:	f001 fc6e 	bl	800f014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d738:	f000 fd24 	bl	800e184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d73c:	f001 fc36 	bl	800efac <vPortEnterCritical>
 800d740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d746:	b25b      	sxtb	r3, r3
 800d748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74c:	d103      	bne.n	800d756 <xQueueSemaphoreTake+0x14a>
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d75c:	b25b      	sxtb	r3, r3
 800d75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d762:	d103      	bne.n	800d76c <xQueueSemaphoreTake+0x160>
 800d764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d766:	2200      	movs	r2, #0
 800d768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d76c:	f001 fc52 	bl	800f014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d770:	463a      	mov	r2, r7
 800d772:	f107 030c 	add.w	r3, r7, #12
 800d776:	4611      	mov	r1, r2
 800d778:	4618      	mov	r0, r3
 800d77a:	f000 ff7d 	bl	800e678 <xTaskCheckForTimeOut>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d132      	bne.n	800d7ea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d786:	f000 f9f5 	bl	800db74 <prvIsQueueEmpty>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d026      	beq.n	800d7de <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d109      	bne.n	800d7ac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d798:	f001 fc08 	bl	800efac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f001 f8d5 	bl	800e950 <xTaskPriorityInherit>
 800d7a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d7a8:	f001 fc34 	bl	800f014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	3324      	adds	r3, #36	; 0x24
 800d7b0:	683a      	ldr	r2, [r7, #0]
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 febf 	bl	800e538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7bc:	f000 f988 	bl	800dad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7c0:	f000 fcee 	bl	800e1a0 <xTaskResumeAll>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f47f af66 	bne.w	800d698 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d7cc:	4b18      	ldr	r3, [pc, #96]	; (800d830 <xQueueSemaphoreTake+0x224>)
 800d7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	e75c      	b.n	800d698 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d7de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7e0:	f000 f976 	bl	800dad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7e4:	f000 fcdc 	bl	800e1a0 <xTaskResumeAll>
 800d7e8:	e756      	b.n	800d698 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d7ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7ec:	f000 f970 	bl	800dad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7f0:	f000 fcd6 	bl	800e1a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7f6:	f000 f9bd 	bl	800db74 <prvIsQueueEmpty>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f43f af4b 	beq.w	800d698 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00d      	beq.n	800d824 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d808:	f001 fbd0 	bl	800efac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d80c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d80e:	f000 f8b7 	bl	800d980 <prvGetDisinheritPriorityAfterTimeout>
 800d812:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d81a:	4618      	mov	r0, r3
 800d81c:	f001 f9a2 	bl	800eb64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d820:	f001 fbf8 	bl	800f014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d824:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d826:	4618      	mov	r0, r3
 800d828:	3738      	adds	r7, #56	; 0x38
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08e      	sub	sp, #56	; 0x38
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10c      	bne.n	800d864 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84e:	b672      	cpsid	i
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	b662      	cpsie	i
 800d85e:	623b      	str	r3, [r7, #32]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d103      	bne.n	800d872 <xQueueReceiveFromISR+0x3e>
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <xQueueReceiveFromISR+0x42>
 800d872:	2301      	movs	r3, #1
 800d874:	e000      	b.n	800d878 <xQueueReceiveFromISR+0x44>
 800d876:	2300      	movs	r3, #0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10c      	bne.n	800d896 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d880:	b672      	cpsid	i
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	b662      	cpsie	i
 800d890:	61fb      	str	r3, [r7, #28]
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d896:	f001 fc71 	bl	800f17c <vPortValidateInterruptPriority>
	__asm volatile
 800d89a:	f3ef 8211 	mrs	r2, BASEPRI
 800d89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a2:	b672      	cpsid	i
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	b662      	cpsie	i
 800d8b2:	61ba      	str	r2, [r7, #24]
 800d8b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d8b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d02f      	beq.n	800d926 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8d0:	68b9      	ldr	r1, [r7, #8]
 800d8d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8d4:	f000 f8d6 	bl	800da84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8da:	1e5a      	subs	r2, r3, #1
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d8e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e8:	d112      	bne.n	800d910 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d016      	beq.n	800d920 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	3310      	adds	r3, #16
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 fe44 	bl	800e584 <xTaskRemoveFromEventList>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00e      	beq.n	800d920 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00b      	beq.n	800d920 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2201      	movs	r2, #1
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	e007      	b.n	800d920 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d914:	3301      	adds	r3, #1
 800d916:	b2db      	uxtb	r3, r3
 800d918:	b25a      	sxtb	r2, r3
 800d91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d920:	2301      	movs	r3, #1
 800d922:	637b      	str	r3, [r7, #52]	; 0x34
 800d924:	e001      	b.n	800d92a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d926:	2300      	movs	r3, #0
 800d928:	637b      	str	r3, [r7, #52]	; 0x34
 800d92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	f383 8811 	msr	BASEPRI, r3
}
 800d934:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3738      	adds	r7, #56	; 0x38
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10c      	bne.n	800d968 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	b672      	cpsid	i
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	b662      	cpsie	i
 800d962:	60bb      	str	r3, [r7, #8]
}
 800d964:	bf00      	nop
 800d966:	e7fe      	b.n	800d966 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800d968:	f001 fb20 	bl	800efac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d970:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d972:	f001 fb4f 	bl	800f014 <vPortExitCritical>

	return uxReturn;
 800d976:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d978:	4618      	mov	r0, r3
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d006      	beq.n	800d99e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f1c3 0307 	rsb	r3, r3, #7
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	e001      	b.n	800d9a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
	}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10d      	bne.n	800d9ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d14d      	bne.n	800da72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f001 f838 	bl	800ea50 <xTaskPriorityDisinherit>
 800d9e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	609a      	str	r2, [r3, #8]
 800d9e8:	e043      	b.n	800da72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d119      	bne.n	800da24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6858      	ldr	r0, [r3, #4]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	68b9      	ldr	r1, [r7, #8]
 800d9fc:	f002 fe97 	bl	801072e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	685a      	ldr	r2, [r3, #4]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da08:	441a      	add	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	685a      	ldr	r2, [r3, #4]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	429a      	cmp	r2, r3
 800da18:	d32b      	bcc.n	800da72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	605a      	str	r2, [r3, #4]
 800da22:	e026      	b.n	800da72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	68d8      	ldr	r0, [r3, #12]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2c:	461a      	mov	r2, r3
 800da2e:	68b9      	ldr	r1, [r7, #8]
 800da30:	f002 fe7d 	bl	801072e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	68da      	ldr	r2, [r3, #12]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3c:	425b      	negs	r3, r3
 800da3e:	441a      	add	r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	68da      	ldr	r2, [r3, #12]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d207      	bcs.n	800da60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	689a      	ldr	r2, [r3, #8]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da58:	425b      	negs	r3, r3
 800da5a:	441a      	add	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b02      	cmp	r3, #2
 800da64:	d105      	bne.n	800da72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	3b01      	subs	r3, #1
 800da70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	1c5a      	adds	r2, r3, #1
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800da7a:	697b      	ldr	r3, [r7, #20]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da92:	2b00      	cmp	r3, #0
 800da94:	d018      	beq.n	800dac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da9e:	441a      	add	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68da      	ldr	r2, [r3, #12]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	429a      	cmp	r2, r3
 800daae:	d303      	bcc.n	800dab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	68d9      	ldr	r1, [r3, #12]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac0:	461a      	mov	r2, r3
 800dac2:	6838      	ldr	r0, [r7, #0]
 800dac4:	f002 fe33 	bl	801072e <memcpy>
	}
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dad8:	f001 fa68 	bl	800efac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dae4:	e011      	b.n	800db0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daea:	2b00      	cmp	r3, #0
 800daec:	d012      	beq.n	800db14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	3324      	adds	r3, #36	; 0x24
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 fd46 	bl	800e584 <xTaskRemoveFromEventList>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dafe:	f000 fe21 	bl	800e744 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db02:	7bfb      	ldrb	r3, [r7, #15]
 800db04:	3b01      	subs	r3, #1
 800db06:	b2db      	uxtb	r3, r3
 800db08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	dce9      	bgt.n	800dae6 <prvUnlockQueue+0x16>
 800db12:	e000      	b.n	800db16 <prvUnlockQueue+0x46>
					break;
 800db14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	22ff      	movs	r2, #255	; 0xff
 800db1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800db1e:	f001 fa79 	bl	800f014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db22:	f001 fa43 	bl	800efac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db2e:	e011      	b.n	800db54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d012      	beq.n	800db5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3310      	adds	r3, #16
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 fd21 	bl	800e584 <xTaskRemoveFromEventList>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db48:	f000 fdfc 	bl	800e744 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db4c:	7bbb      	ldrb	r3, [r7, #14]
 800db4e:	3b01      	subs	r3, #1
 800db50:	b2db      	uxtb	r3, r3
 800db52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	dce9      	bgt.n	800db30 <prvUnlockQueue+0x60>
 800db5c:	e000      	b.n	800db60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	22ff      	movs	r2, #255	; 0xff
 800db64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db68:	f001 fa54 	bl	800f014 <vPortExitCritical>
}
 800db6c:	bf00      	nop
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db7c:	f001 fa16 	bl	800efac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db88:	2301      	movs	r3, #1
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	e001      	b.n	800db92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db8e:	2300      	movs	r3, #0
 800db90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db92:	f001 fa3f 	bl	800f014 <vPortExitCritical>

	return xReturn;
 800db96:	68fb      	ldr	r3, [r7, #12]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dba8:	f001 fa00 	bl	800efac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d102      	bne.n	800dbbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	e001      	b.n	800dbc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbc2:	f001 fa27 	bl	800f014 <vPortExitCritical>

	return xReturn;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08e      	sub	sp, #56	; 0x38
 800dbd4:	af04      	add	r7, sp, #16
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
 800dbdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d10c      	bne.n	800dbfe <xTaskCreateStatic+0x2e>
	__asm volatile
 800dbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe8:	b672      	cpsid	i
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	b662      	cpsie	i
 800dbf8:	623b      	str	r3, [r7, #32]
}
 800dbfa:	bf00      	nop
 800dbfc:	e7fe      	b.n	800dbfc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800dbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10c      	bne.n	800dc1e <xTaskCreateStatic+0x4e>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc08:	b672      	cpsid	i
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	b662      	cpsie	i
 800dc18:	61fb      	str	r3, [r7, #28]
}
 800dc1a:	bf00      	nop
 800dc1c:	e7fe      	b.n	800dc1c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc1e:	23a0      	movs	r3, #160	; 0xa0
 800dc20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	2ba0      	cmp	r3, #160	; 0xa0
 800dc26:	d00c      	beq.n	800dc42 <xTaskCreateStatic+0x72>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	b672      	cpsid	i
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	b662      	cpsie	i
 800dc3c:	61bb      	str	r3, [r7, #24]
}
 800dc3e:	bf00      	nop
 800dc40:	e7fe      	b.n	800dc40 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d01e      	beq.n	800dc88 <xTaskCreateStatic+0xb8>
 800dc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d01b      	beq.n	800dc88 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	2202      	movs	r2, #2
 800dc5e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc62:	2300      	movs	r3, #0
 800dc64:	9303      	str	r3, [sp, #12]
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	9302      	str	r3, [sp, #8]
 800dc6a:	f107 0314 	add.w	r3, r7, #20
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	68b9      	ldr	r1, [r7, #8]
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 f850 	bl	800dd20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc82:	f000 f8ed 	bl	800de60 <prvAddNewTaskToReadyList>
 800dc86:	e001      	b.n	800dc8c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc8c:	697b      	ldr	r3, [r7, #20]
	}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3728      	adds	r7, #40	; 0x28
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b08c      	sub	sp, #48	; 0x30
 800dc9a:	af04      	add	r7, sp, #16
 800dc9c:	60f8      	str	r0, [r7, #12]
 800dc9e:	60b9      	str	r1, [r7, #8]
 800dca0:	603b      	str	r3, [r7, #0]
 800dca2:	4613      	mov	r3, r2
 800dca4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dca6:	88fb      	ldrh	r3, [r7, #6]
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f001 faaa 	bl	800f204 <pvPortMalloc>
 800dcb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00e      	beq.n	800dcd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dcb8:	20a0      	movs	r0, #160	; 0xa0
 800dcba:	f001 faa3 	bl	800f204 <pvPortMalloc>
 800dcbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d003      	beq.n	800dcce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	631a      	str	r2, [r3, #48]	; 0x30
 800dccc:	e005      	b.n	800dcda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dcce:	6978      	ldr	r0, [r7, #20]
 800dcd0:	f001 fb62 	bl	800f398 <vPortFree>
 800dcd4:	e001      	b.n	800dcda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d017      	beq.n	800dd10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dce8:	88fa      	ldrh	r2, [r7, #6]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9303      	str	r3, [sp, #12]
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	9302      	str	r3, [sp, #8]
 800dcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf4:	9301      	str	r3, [sp, #4]
 800dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	68b9      	ldr	r1, [r7, #8]
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	f000 f80e 	bl	800dd20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd04:	69f8      	ldr	r0, [r7, #28]
 800dd06:	f000 f8ab 	bl	800de60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	61bb      	str	r3, [r7, #24]
 800dd0e:	e002      	b.n	800dd16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd10:	f04f 33ff 	mov.w	r3, #4294967295
 800dd14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd16:	69bb      	ldr	r3, [r7, #24]
	}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3720      	adds	r7, #32
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b088      	sub	sp, #32
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dd38:	440b      	add	r3, r1
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4413      	add	r3, r2
 800dd3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	f023 0307 	bic.w	r3, r3, #7
 800dd46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	f003 0307 	and.w	r3, r3, #7
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00c      	beq.n	800dd6c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800dd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd56:	b672      	cpsid	i
 800dd58:	f383 8811 	msr	BASEPRI, r3
 800dd5c:	f3bf 8f6f 	isb	sy
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	b662      	cpsie	i
 800dd66:	617b      	str	r3, [r7, #20]
}
 800dd68:	bf00      	nop
 800dd6a:	e7fe      	b.n	800dd6a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d01f      	beq.n	800ddb2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd72:	2300      	movs	r3, #0
 800dd74:	61fb      	str	r3, [r7, #28]
 800dd76:	e012      	b.n	800dd9e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	7819      	ldrb	r1, [r3, #0]
 800dd80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	4413      	add	r3, r2
 800dd86:	3334      	adds	r3, #52	; 0x34
 800dd88:	460a      	mov	r2, r1
 800dd8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd8c:	68ba      	ldr	r2, [r7, #8]
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	4413      	add	r3, r2
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d006      	beq.n	800dda6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	61fb      	str	r3, [r7, #28]
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	2b0f      	cmp	r3, #15
 800dda2:	d9e9      	bls.n	800dd78 <prvInitialiseNewTask+0x58>
 800dda4:	e000      	b.n	800dda8 <prvInitialiseNewTask+0x88>
			{
				break;
 800dda6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ddb0:	e003      	b.n	800ddba <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbc:	2b06      	cmp	r3, #6
 800ddbe:	d901      	bls.n	800ddc4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ddc0:	2306      	movs	r3, #6
 800ddc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ddd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	3304      	adds	r3, #4
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7ff f84c 	bl	800ce78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	3318      	adds	r3, #24
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7ff f847 	bl	800ce78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ddea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	f1c3 0207 	rsb	r2, r3, #7
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de02:	2200      	movs	r2, #0
 800de04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	2200      	movs	r2, #0
 800de0c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de12:	334c      	adds	r3, #76	; 0x4c
 800de14:	224c      	movs	r2, #76	; 0x4c
 800de16:	2100      	movs	r1, #0
 800de18:	4618      	mov	r0, r3
 800de1a:	f002 fba0 	bl	801055e <memset>
 800de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de20:	4a0c      	ldr	r2, [pc, #48]	; (800de54 <prvInitialiseNewTask+0x134>)
 800de22:	651a      	str	r2, [r3, #80]	; 0x50
 800de24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de26:	4a0c      	ldr	r2, [pc, #48]	; (800de58 <prvInitialiseNewTask+0x138>)
 800de28:	655a      	str	r2, [r3, #84]	; 0x54
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	4a0b      	ldr	r2, [pc, #44]	; (800de5c <prvInitialiseNewTask+0x13c>)
 800de2e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	68f9      	ldr	r1, [r7, #12]
 800de34:	69b8      	ldr	r0, [r7, #24]
 800de36:	f000 ffad 	bl	800ed94 <pxPortInitialiseStack>
 800de3a:	4602      	mov	r2, r0
 800de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de4c:	bf00      	nop
 800de4e:	3720      	adds	r7, #32
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	20004a1c 	.word	0x20004a1c
 800de58:	20004a84 	.word	0x20004a84
 800de5c:	20004aec 	.word	0x20004aec

0800de60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de68:	f001 f8a0 	bl	800efac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de6c:	4b2a      	ldr	r3, [pc, #168]	; (800df18 <prvAddNewTaskToReadyList+0xb8>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3301      	adds	r3, #1
 800de72:	4a29      	ldr	r2, [pc, #164]	; (800df18 <prvAddNewTaskToReadyList+0xb8>)
 800de74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de76:	4b29      	ldr	r3, [pc, #164]	; (800df1c <prvAddNewTaskToReadyList+0xbc>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d109      	bne.n	800de92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de7e:	4a27      	ldr	r2, [pc, #156]	; (800df1c <prvAddNewTaskToReadyList+0xbc>)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de84:	4b24      	ldr	r3, [pc, #144]	; (800df18 <prvAddNewTaskToReadyList+0xb8>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d110      	bne.n	800deae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de8c:	f000 fc7e 	bl	800e78c <prvInitialiseTaskLists>
 800de90:	e00d      	b.n	800deae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de92:	4b23      	ldr	r3, [pc, #140]	; (800df20 <prvAddNewTaskToReadyList+0xc0>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d109      	bne.n	800deae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de9a:	4b20      	ldr	r3, [pc, #128]	; (800df1c <prvAddNewTaskToReadyList+0xbc>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d802      	bhi.n	800deae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dea8:	4a1c      	ldr	r2, [pc, #112]	; (800df1c <prvAddNewTaskToReadyList+0xbc>)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800deae:	4b1d      	ldr	r3, [pc, #116]	; (800df24 <prvAddNewTaskToReadyList+0xc4>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	3301      	adds	r3, #1
 800deb4:	4a1b      	ldr	r2, [pc, #108]	; (800df24 <prvAddNewTaskToReadyList+0xc4>)
 800deb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800debc:	2201      	movs	r2, #1
 800debe:	409a      	lsls	r2, r3
 800dec0:	4b19      	ldr	r3, [pc, #100]	; (800df28 <prvAddNewTaskToReadyList+0xc8>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4313      	orrs	r3, r2
 800dec6:	4a18      	ldr	r2, [pc, #96]	; (800df28 <prvAddNewTaskToReadyList+0xc8>)
 800dec8:	6013      	str	r3, [r2, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dece:	4613      	mov	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4a15      	ldr	r2, [pc, #84]	; (800df2c <prvAddNewTaskToReadyList+0xcc>)
 800ded8:	441a      	add	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3304      	adds	r3, #4
 800dede:	4619      	mov	r1, r3
 800dee0:	4610      	mov	r0, r2
 800dee2:	f7fe ffd6 	bl	800ce92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dee6:	f001 f895 	bl	800f014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800deea:	4b0d      	ldr	r3, [pc, #52]	; (800df20 <prvAddNewTaskToReadyList+0xc0>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00e      	beq.n	800df10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800def2:	4b0a      	ldr	r3, [pc, #40]	; (800df1c <prvAddNewTaskToReadyList+0xbc>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defc:	429a      	cmp	r2, r3
 800defe:	d207      	bcs.n	800df10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df00:	4b0b      	ldr	r3, [pc, #44]	; (800df30 <prvAddNewTaskToReadyList+0xd0>)
 800df02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df10:	bf00      	nop
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	20000dd0 	.word	0x20000dd0
 800df1c:	20000cd0 	.word	0x20000cd0
 800df20:	20000ddc 	.word	0x20000ddc
 800df24:	20000dec 	.word	0x20000dec
 800df28:	20000dd8 	.word	0x20000dd8
 800df2c:	20000cd4 	.word	0x20000cd4
 800df30:	e000ed04 	.word	0xe000ed04

0800df34 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800df34:	b580      	push	{r7, lr}
 800df36:	b08a      	sub	sp, #40	; 0x28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800df3e:	2300      	movs	r3, #0
 800df40:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10c      	bne.n	800df62 <vTaskDelayUntil+0x2e>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	b672      	cpsid	i
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	b662      	cpsie	i
 800df5c:	617b      	str	r3, [r7, #20]
}
 800df5e:	bf00      	nop
 800df60:	e7fe      	b.n	800df60 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10c      	bne.n	800df82 <vTaskDelayUntil+0x4e>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	b672      	cpsid	i
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	b662      	cpsie	i
 800df7c:	613b      	str	r3, [r7, #16]
}
 800df7e:	bf00      	nop
 800df80:	e7fe      	b.n	800df80 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800df82:	4b2b      	ldr	r3, [pc, #172]	; (800e030 <vTaskDelayUntil+0xfc>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00c      	beq.n	800dfa4 <vTaskDelayUntil+0x70>
	__asm volatile
 800df8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8e:	b672      	cpsid	i
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	b662      	cpsie	i
 800df9e:	60fb      	str	r3, [r7, #12]
}
 800dfa0:	bf00      	nop
 800dfa2:	e7fe      	b.n	800dfa2 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800dfa4:	f000 f8ee 	bl	800e184 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800dfa8:	4b22      	ldr	r3, [pc, #136]	; (800e034 <vTaskDelayUntil+0x100>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	6a3a      	ldr	r2, [r7, #32]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d20b      	bcs.n	800dfda <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	69fa      	ldr	r2, [r7, #28]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d211      	bcs.n	800dff0 <vTaskDelayUntil+0xbc>
 800dfcc:	69fa      	ldr	r2, [r7, #28]
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d90d      	bls.n	800dff0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	627b      	str	r3, [r7, #36]	; 0x24
 800dfd8:	e00a      	b.n	800dff0 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	69fa      	ldr	r2, [r7, #28]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d303      	bcc.n	800dfec <vTaskDelayUntil+0xb8>
 800dfe4:	69fa      	ldr	r2, [r7, #28]
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d901      	bls.n	800dff0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800dfec:	2301      	movs	r3, #1
 800dfee:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	69fa      	ldr	r2, [r7, #28]
 800dff4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d006      	beq.n	800e00a <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800dffc:	69fa      	ldr	r2, [r7, #28]
 800dffe:	6a3b      	ldr	r3, [r7, #32]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	2100      	movs	r1, #0
 800e004:	4618      	mov	r0, r3
 800e006:	f000 fe5f 	bl	800ecc8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e00a:	f000 f8c9 	bl	800e1a0 <xTaskResumeAll>
 800e00e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d107      	bne.n	800e026 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800e016:	4b08      	ldr	r3, [pc, #32]	; (800e038 <vTaskDelayUntil+0x104>)
 800e018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e01c:	601a      	str	r2, [r3, #0]
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e026:	bf00      	nop
 800e028:	3728      	adds	r7, #40	; 0x28
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20000df8 	.word	0x20000df8
 800e034:	20000dd4 	.word	0x20000dd4
 800e038:	e000ed04 	.word	0xe000ed04

0800e03c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e044:	2300      	movs	r3, #0
 800e046:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d019      	beq.n	800e082 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e04e:	4b14      	ldr	r3, [pc, #80]	; (800e0a0 <vTaskDelay+0x64>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00c      	beq.n	800e070 <vTaskDelay+0x34>
	__asm volatile
 800e056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05a:	b672      	cpsid	i
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	b662      	cpsie	i
 800e06a:	60bb      	str	r3, [r7, #8]
}
 800e06c:	bf00      	nop
 800e06e:	e7fe      	b.n	800e06e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e070:	f000 f888 	bl	800e184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e074:	2100      	movs	r1, #0
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 fe26 	bl	800ecc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e07c:	f000 f890 	bl	800e1a0 <xTaskResumeAll>
 800e080:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d107      	bne.n	800e098 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e088:	4b06      	ldr	r3, [pc, #24]	; (800e0a4 <vTaskDelay+0x68>)
 800e08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e08e:	601a      	str	r2, [r3, #0]
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e098:	bf00      	nop
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	20000df8 	.word	0x20000df8
 800e0a4:	e000ed04 	.word	0xe000ed04

0800e0a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b08a      	sub	sp, #40	; 0x28
 800e0ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e0b6:	463a      	mov	r2, r7
 800e0b8:	1d39      	adds	r1, r7, #4
 800e0ba:	f107 0308 	add.w	r3, r7, #8
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f4 fa28 	bl	8002514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	68ba      	ldr	r2, [r7, #8]
 800e0ca:	9202      	str	r2, [sp, #8]
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	460a      	mov	r2, r1
 800e0d6:	4923      	ldr	r1, [pc, #140]	; (800e164 <vTaskStartScheduler+0xbc>)
 800e0d8:	4823      	ldr	r0, [pc, #140]	; (800e168 <vTaskStartScheduler+0xc0>)
 800e0da:	f7ff fd79 	bl	800dbd0 <xTaskCreateStatic>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	4a22      	ldr	r2, [pc, #136]	; (800e16c <vTaskStartScheduler+0xc4>)
 800e0e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0e4:	4b21      	ldr	r3, [pc, #132]	; (800e16c <vTaskStartScheduler+0xc4>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	617b      	str	r3, [r7, #20]
 800e0f0:	e001      	b.n	800e0f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d11d      	bne.n	800e138 <vTaskStartScheduler+0x90>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	b672      	cpsid	i
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	b662      	cpsie	i
 800e110:	613b      	str	r3, [r7, #16]
}
 800e112:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e114:	4b16      	ldr	r3, [pc, #88]	; (800e170 <vTaskStartScheduler+0xc8>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	334c      	adds	r3, #76	; 0x4c
 800e11a:	4a16      	ldr	r2, [pc, #88]	; (800e174 <vTaskStartScheduler+0xcc>)
 800e11c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e11e:	4b16      	ldr	r3, [pc, #88]	; (800e178 <vTaskStartScheduler+0xd0>)
 800e120:	f04f 32ff 	mov.w	r2, #4294967295
 800e124:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e126:	4b15      	ldr	r3, [pc, #84]	; (800e17c <vTaskStartScheduler+0xd4>)
 800e128:	2201      	movs	r2, #1
 800e12a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e12c:	4b14      	ldr	r3, [pc, #80]	; (800e180 <vTaskStartScheduler+0xd8>)
 800e12e:	2200      	movs	r2, #0
 800e130:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e132:	f000 febd 	bl	800eeb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e136:	e010      	b.n	800e15a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13e:	d10c      	bne.n	800e15a <vTaskStartScheduler+0xb2>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	b672      	cpsid	i
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	b662      	cpsie	i
 800e154:	60fb      	str	r3, [r7, #12]
}
 800e156:	bf00      	nop
 800e158:	e7fe      	b.n	800e158 <vTaskStartScheduler+0xb0>
}
 800e15a:	bf00      	nop
 800e15c:	3718      	adds	r7, #24
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	08015ce0 	.word	0x08015ce0
 800e168:	0800e75d 	.word	0x0800e75d
 800e16c:	20000df4 	.word	0x20000df4
 800e170:	20000cd0 	.word	0x20000cd0
 800e174:	20000070 	.word	0x20000070
 800e178:	20000df0 	.word	0x20000df0
 800e17c:	20000ddc 	.word	0x20000ddc
 800e180:	20000dd4 	.word	0x20000dd4

0800e184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e184:	b480      	push	{r7}
 800e186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e188:	4b04      	ldr	r3, [pc, #16]	; (800e19c <vTaskSuspendAll+0x18>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3301      	adds	r3, #1
 800e18e:	4a03      	ldr	r2, [pc, #12]	; (800e19c <vTaskSuspendAll+0x18>)
 800e190:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e192:	bf00      	nop
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr
 800e19c:	20000df8 	.word	0x20000df8

0800e1a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e1ae:	4b42      	ldr	r3, [pc, #264]	; (800e2b8 <xTaskResumeAll+0x118>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10c      	bne.n	800e1d0 <xTaskResumeAll+0x30>
	__asm volatile
 800e1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ba:	b672      	cpsid	i
 800e1bc:	f383 8811 	msr	BASEPRI, r3
 800e1c0:	f3bf 8f6f 	isb	sy
 800e1c4:	f3bf 8f4f 	dsb	sy
 800e1c8:	b662      	cpsie	i
 800e1ca:	603b      	str	r3, [r7, #0]
}
 800e1cc:	bf00      	nop
 800e1ce:	e7fe      	b.n	800e1ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e1d0:	f000 feec 	bl	800efac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e1d4:	4b38      	ldr	r3, [pc, #224]	; (800e2b8 <xTaskResumeAll+0x118>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	4a37      	ldr	r2, [pc, #220]	; (800e2b8 <xTaskResumeAll+0x118>)
 800e1dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1de:	4b36      	ldr	r3, [pc, #216]	; (800e2b8 <xTaskResumeAll+0x118>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d161      	bne.n	800e2aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e1e6:	4b35      	ldr	r3, [pc, #212]	; (800e2bc <xTaskResumeAll+0x11c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d05d      	beq.n	800e2aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1ee:	e02e      	b.n	800e24e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f0:	4b33      	ldr	r3, [pc, #204]	; (800e2c0 <xTaskResumeAll+0x120>)
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	3318      	adds	r3, #24
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fe fea5 	bl	800cf4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	3304      	adds	r3, #4
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe fea0 	bl	800cf4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e210:	2201      	movs	r2, #1
 800e212:	409a      	lsls	r2, r3
 800e214:	4b2b      	ldr	r3, [pc, #172]	; (800e2c4 <xTaskResumeAll+0x124>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4313      	orrs	r3, r2
 800e21a:	4a2a      	ldr	r2, [pc, #168]	; (800e2c4 <xTaskResumeAll+0x124>)
 800e21c:	6013      	str	r3, [r2, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e222:	4613      	mov	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4a27      	ldr	r2, [pc, #156]	; (800e2c8 <xTaskResumeAll+0x128>)
 800e22c:	441a      	add	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	3304      	adds	r3, #4
 800e232:	4619      	mov	r1, r3
 800e234:	4610      	mov	r0, r2
 800e236:	f7fe fe2c 	bl	800ce92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23e:	4b23      	ldr	r3, [pc, #140]	; (800e2cc <xTaskResumeAll+0x12c>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e244:	429a      	cmp	r2, r3
 800e246:	d302      	bcc.n	800e24e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e248:	4b21      	ldr	r3, [pc, #132]	; (800e2d0 <xTaskResumeAll+0x130>)
 800e24a:	2201      	movs	r2, #1
 800e24c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e24e:	4b1c      	ldr	r3, [pc, #112]	; (800e2c0 <xTaskResumeAll+0x120>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1cc      	bne.n	800e1f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e25c:	f000 fb3a 	bl	800e8d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e260:	4b1c      	ldr	r3, [pc, #112]	; (800e2d4 <xTaskResumeAll+0x134>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d010      	beq.n	800e28e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e26c:	f000 f846 	bl	800e2fc <xTaskIncrementTick>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d002      	beq.n	800e27c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e276:	4b16      	ldr	r3, [pc, #88]	; (800e2d0 <xTaskResumeAll+0x130>)
 800e278:	2201      	movs	r2, #1
 800e27a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	3b01      	subs	r3, #1
 800e280:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1f1      	bne.n	800e26c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e288:	4b12      	ldr	r3, [pc, #72]	; (800e2d4 <xTaskResumeAll+0x134>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e28e:	4b10      	ldr	r3, [pc, #64]	; (800e2d0 <xTaskResumeAll+0x130>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d009      	beq.n	800e2aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e296:	2301      	movs	r3, #1
 800e298:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e29a:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <xTaskResumeAll+0x138>)
 800e29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2aa:	f000 feb3 	bl	800f014 <vPortExitCritical>

	return xAlreadyYielded;
 800e2ae:	68bb      	ldr	r3, [r7, #8]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	20000df8 	.word	0x20000df8
 800e2bc:	20000dd0 	.word	0x20000dd0
 800e2c0:	20000d90 	.word	0x20000d90
 800e2c4:	20000dd8 	.word	0x20000dd8
 800e2c8:	20000cd4 	.word	0x20000cd4
 800e2cc:	20000cd0 	.word	0x20000cd0
 800e2d0:	20000de4 	.word	0x20000de4
 800e2d4:	20000de0 	.word	0x20000de0
 800e2d8:	e000ed04 	.word	0xe000ed04

0800e2dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e2e2:	4b05      	ldr	r3, [pc, #20]	; (800e2f8 <xTaskGetTickCount+0x1c>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e2e8:	687b      	ldr	r3, [r7, #4]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	370c      	adds	r7, #12
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop
 800e2f8:	20000dd4 	.word	0x20000dd4

0800e2fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e302:	2300      	movs	r3, #0
 800e304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e306:	4b4f      	ldr	r3, [pc, #316]	; (800e444 <xTaskIncrementTick+0x148>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f040 808a 	bne.w	800e424 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e310:	4b4d      	ldr	r3, [pc, #308]	; (800e448 <xTaskIncrementTick+0x14c>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	3301      	adds	r3, #1
 800e316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e318:	4a4b      	ldr	r2, [pc, #300]	; (800e448 <xTaskIncrementTick+0x14c>)
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d122      	bne.n	800e36a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e324:	4b49      	ldr	r3, [pc, #292]	; (800e44c <xTaskIncrementTick+0x150>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d00c      	beq.n	800e348 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	b672      	cpsid	i
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	b662      	cpsie	i
 800e342:	603b      	str	r3, [r7, #0]
}
 800e344:	bf00      	nop
 800e346:	e7fe      	b.n	800e346 <xTaskIncrementTick+0x4a>
 800e348:	4b40      	ldr	r3, [pc, #256]	; (800e44c <xTaskIncrementTick+0x150>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	60fb      	str	r3, [r7, #12]
 800e34e:	4b40      	ldr	r3, [pc, #256]	; (800e450 <xTaskIncrementTick+0x154>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a3e      	ldr	r2, [pc, #248]	; (800e44c <xTaskIncrementTick+0x150>)
 800e354:	6013      	str	r3, [r2, #0]
 800e356:	4a3e      	ldr	r2, [pc, #248]	; (800e450 <xTaskIncrementTick+0x154>)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6013      	str	r3, [r2, #0]
 800e35c:	4b3d      	ldr	r3, [pc, #244]	; (800e454 <xTaskIncrementTick+0x158>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3301      	adds	r3, #1
 800e362:	4a3c      	ldr	r2, [pc, #240]	; (800e454 <xTaskIncrementTick+0x158>)
 800e364:	6013      	str	r3, [r2, #0]
 800e366:	f000 fab5 	bl	800e8d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e36a:	4b3b      	ldr	r3, [pc, #236]	; (800e458 <xTaskIncrementTick+0x15c>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	693a      	ldr	r2, [r7, #16]
 800e370:	429a      	cmp	r2, r3
 800e372:	d348      	bcc.n	800e406 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e374:	4b35      	ldr	r3, [pc, #212]	; (800e44c <xTaskIncrementTick+0x150>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d104      	bne.n	800e388 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e37e:	4b36      	ldr	r3, [pc, #216]	; (800e458 <xTaskIncrementTick+0x15c>)
 800e380:	f04f 32ff 	mov.w	r2, #4294967295
 800e384:	601a      	str	r2, [r3, #0]
					break;
 800e386:	e03e      	b.n	800e406 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e388:	4b30      	ldr	r3, [pc, #192]	; (800e44c <xTaskIncrementTick+0x150>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e398:	693a      	ldr	r2, [r7, #16]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d203      	bcs.n	800e3a8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e3a0:	4a2d      	ldr	r2, [pc, #180]	; (800e458 <xTaskIncrementTick+0x15c>)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e3a6:	e02e      	b.n	800e406 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe fdcd 	bl	800cf4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d004      	beq.n	800e3c4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	3318      	adds	r3, #24
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fe fdc4 	bl	800cf4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	409a      	lsls	r2, r3
 800e3cc:	4b23      	ldr	r3, [pc, #140]	; (800e45c <xTaskIncrementTick+0x160>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	4a22      	ldr	r2, [pc, #136]	; (800e45c <xTaskIncrementTick+0x160>)
 800e3d4:	6013      	str	r3, [r2, #0]
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3da:	4613      	mov	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	4a1f      	ldr	r2, [pc, #124]	; (800e460 <xTaskIncrementTick+0x164>)
 800e3e4:	441a      	add	r2, r3
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	3304      	adds	r3, #4
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	4610      	mov	r0, r2
 800e3ee:	f7fe fd50 	bl	800ce92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f6:	4b1b      	ldr	r3, [pc, #108]	; (800e464 <xTaskIncrementTick+0x168>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d3b9      	bcc.n	800e374 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e400:	2301      	movs	r3, #1
 800e402:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e404:	e7b6      	b.n	800e374 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e406:	4b17      	ldr	r3, [pc, #92]	; (800e464 <xTaskIncrementTick+0x168>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e40c:	4914      	ldr	r1, [pc, #80]	; (800e460 <xTaskIncrementTick+0x164>)
 800e40e:	4613      	mov	r3, r2
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4413      	add	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	440b      	add	r3, r1
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d907      	bls.n	800e42e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e41e:	2301      	movs	r3, #1
 800e420:	617b      	str	r3, [r7, #20]
 800e422:	e004      	b.n	800e42e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e424:	4b10      	ldr	r3, [pc, #64]	; (800e468 <xTaskIncrementTick+0x16c>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3301      	adds	r3, #1
 800e42a:	4a0f      	ldr	r2, [pc, #60]	; (800e468 <xTaskIncrementTick+0x16c>)
 800e42c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e42e:	4b0f      	ldr	r3, [pc, #60]	; (800e46c <xTaskIncrementTick+0x170>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e436:	2301      	movs	r3, #1
 800e438:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e43a:	697b      	ldr	r3, [r7, #20]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3718      	adds	r7, #24
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	20000df8 	.word	0x20000df8
 800e448:	20000dd4 	.word	0x20000dd4
 800e44c:	20000d88 	.word	0x20000d88
 800e450:	20000d8c 	.word	0x20000d8c
 800e454:	20000de8 	.word	0x20000de8
 800e458:	20000df0 	.word	0x20000df0
 800e45c:	20000dd8 	.word	0x20000dd8
 800e460:	20000cd4 	.word	0x20000cd4
 800e464:	20000cd0 	.word	0x20000cd0
 800e468:	20000de0 	.word	0x20000de0
 800e46c:	20000de4 	.word	0x20000de4

0800e470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e470:	b480      	push	{r7}
 800e472:	b087      	sub	sp, #28
 800e474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e476:	4b2a      	ldr	r3, [pc, #168]	; (800e520 <vTaskSwitchContext+0xb0>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d003      	beq.n	800e486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e47e:	4b29      	ldr	r3, [pc, #164]	; (800e524 <vTaskSwitchContext+0xb4>)
 800e480:	2201      	movs	r2, #1
 800e482:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e484:	e046      	b.n	800e514 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e486:	4b27      	ldr	r3, [pc, #156]	; (800e524 <vTaskSwitchContext+0xb4>)
 800e488:	2200      	movs	r2, #0
 800e48a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e48c:	4b26      	ldr	r3, [pc, #152]	; (800e528 <vTaskSwitchContext+0xb8>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	fab3 f383 	clz	r3, r3
 800e498:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e49a:	7afb      	ldrb	r3, [r7, #11]
 800e49c:	f1c3 031f 	rsb	r3, r3, #31
 800e4a0:	617b      	str	r3, [r7, #20]
 800e4a2:	4922      	ldr	r1, [pc, #136]	; (800e52c <vTaskSwitchContext+0xbc>)
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4413      	add	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	440b      	add	r3, r1
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10c      	bne.n	800e4d0 <vTaskSwitchContext+0x60>
	__asm volatile
 800e4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ba:	b672      	cpsid	i
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	b662      	cpsie	i
 800e4ca:	607b      	str	r3, [r7, #4]
}
 800e4cc:	bf00      	nop
 800e4ce:	e7fe      	b.n	800e4ce <vTaskSwitchContext+0x5e>
 800e4d0:	697a      	ldr	r2, [r7, #20]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	4413      	add	r3, r2
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	4a14      	ldr	r2, [pc, #80]	; (800e52c <vTaskSwitchContext+0xbc>)
 800e4dc:	4413      	add	r3, r2
 800e4de:	613b      	str	r3, [r7, #16]
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	685a      	ldr	r2, [r3, #4]
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	605a      	str	r2, [r3, #4]
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	685a      	ldr	r2, [r3, #4]
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d104      	bne.n	800e500 <vTaskSwitchContext+0x90>
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	685a      	ldr	r2, [r3, #4]
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	605a      	str	r2, [r3, #4]
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	4a0a      	ldr	r2, [pc, #40]	; (800e530 <vTaskSwitchContext+0xc0>)
 800e508:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e50a:	4b09      	ldr	r3, [pc, #36]	; (800e530 <vTaskSwitchContext+0xc0>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	334c      	adds	r3, #76	; 0x4c
 800e510:	4a08      	ldr	r2, [pc, #32]	; (800e534 <vTaskSwitchContext+0xc4>)
 800e512:	6013      	str	r3, [r2, #0]
}
 800e514:	bf00      	nop
 800e516:	371c      	adds	r7, #28
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr
 800e520:	20000df8 	.word	0x20000df8
 800e524:	20000de4 	.word	0x20000de4
 800e528:	20000dd8 	.word	0x20000dd8
 800e52c:	20000cd4 	.word	0x20000cd4
 800e530:	20000cd0 	.word	0x20000cd0
 800e534:	20000070 	.word	0x20000070

0800e538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10c      	bne.n	800e562 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	b672      	cpsid	i
 800e54e:	f383 8811 	msr	BASEPRI, r3
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	f3bf 8f4f 	dsb	sy
 800e55a:	b662      	cpsie	i
 800e55c:	60fb      	str	r3, [r7, #12]
}
 800e55e:	bf00      	nop
 800e560:	e7fe      	b.n	800e560 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e562:	4b07      	ldr	r3, [pc, #28]	; (800e580 <vTaskPlaceOnEventList+0x48>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	3318      	adds	r3, #24
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7fe fcb5 	bl	800ceda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e570:	2101      	movs	r1, #1
 800e572:	6838      	ldr	r0, [r7, #0]
 800e574:	f000 fba8 	bl	800ecc8 <prvAddCurrentTaskToDelayedList>
}
 800e578:	bf00      	nop
 800e57a:	3710      	adds	r7, #16
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	20000cd0 	.word	0x20000cd0

0800e584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d10c      	bne.n	800e5b4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59e:	b672      	cpsid	i
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	b662      	cpsie	i
 800e5ae:	60fb      	str	r3, [r7, #12]
}
 800e5b0:	bf00      	nop
 800e5b2:	e7fe      	b.n	800e5b2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	3318      	adds	r3, #24
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fe fcc7 	bl	800cf4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5be:	4b1d      	ldr	r3, [pc, #116]	; (800e634 <xTaskRemoveFromEventList+0xb0>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d11c      	bne.n	800e600 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe fcbe 	bl	800cf4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	409a      	lsls	r2, r3
 800e5d8:	4b17      	ldr	r3, [pc, #92]	; (800e638 <xTaskRemoveFromEventList+0xb4>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	4a16      	ldr	r2, [pc, #88]	; (800e638 <xTaskRemoveFromEventList+0xb4>)
 800e5e0:	6013      	str	r3, [r2, #0]
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	4413      	add	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4a13      	ldr	r2, [pc, #76]	; (800e63c <xTaskRemoveFromEventList+0xb8>)
 800e5f0:	441a      	add	r2, r3
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	3304      	adds	r3, #4
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	4610      	mov	r0, r2
 800e5fa:	f7fe fc4a 	bl	800ce92 <vListInsertEnd>
 800e5fe:	e005      	b.n	800e60c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	3318      	adds	r3, #24
 800e604:	4619      	mov	r1, r3
 800e606:	480e      	ldr	r0, [pc, #56]	; (800e640 <xTaskRemoveFromEventList+0xbc>)
 800e608:	f7fe fc43 	bl	800ce92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e610:	4b0c      	ldr	r3, [pc, #48]	; (800e644 <xTaskRemoveFromEventList+0xc0>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e616:	429a      	cmp	r2, r3
 800e618:	d905      	bls.n	800e626 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e61a:	2301      	movs	r3, #1
 800e61c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e61e:	4b0a      	ldr	r3, [pc, #40]	; (800e648 <xTaskRemoveFromEventList+0xc4>)
 800e620:	2201      	movs	r2, #1
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	e001      	b.n	800e62a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e626:	2300      	movs	r3, #0
 800e628:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e62a:	697b      	ldr	r3, [r7, #20]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3718      	adds	r7, #24
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	20000df8 	.word	0x20000df8
 800e638:	20000dd8 	.word	0x20000dd8
 800e63c:	20000cd4 	.word	0x20000cd4
 800e640:	20000d90 	.word	0x20000d90
 800e644:	20000cd0 	.word	0x20000cd0
 800e648:	20000de4 	.word	0x20000de4

0800e64c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e654:	4b06      	ldr	r3, [pc, #24]	; (800e670 <vTaskInternalSetTimeOutState+0x24>)
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e65c:	4b05      	ldr	r3, [pc, #20]	; (800e674 <vTaskInternalSetTimeOutState+0x28>)
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	605a      	str	r2, [r3, #4]
}
 800e664:	bf00      	nop
 800e666:	370c      	adds	r7, #12
 800e668:	46bd      	mov	sp, r7
 800e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66e:	4770      	bx	lr
 800e670:	20000de8 	.word	0x20000de8
 800e674:	20000dd4 	.word	0x20000dd4

0800e678 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b088      	sub	sp, #32
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d10c      	bne.n	800e6a2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68c:	b672      	cpsid	i
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	b662      	cpsie	i
 800e69c:	613b      	str	r3, [r7, #16]
}
 800e69e:	bf00      	nop
 800e6a0:	e7fe      	b.n	800e6a0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d10c      	bne.n	800e6c2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ac:	b672      	cpsid	i
 800e6ae:	f383 8811 	msr	BASEPRI, r3
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	f3bf 8f4f 	dsb	sy
 800e6ba:	b662      	cpsie	i
 800e6bc:	60fb      	str	r3, [r7, #12]
}
 800e6be:	bf00      	nop
 800e6c0:	e7fe      	b.n	800e6c0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e6c2:	f000 fc73 	bl	800efac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e6c6:	4b1d      	ldr	r3, [pc, #116]	; (800e73c <xTaskCheckForTimeOut+0xc4>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	69ba      	ldr	r2, [r7, #24]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6de:	d102      	bne.n	800e6e6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	61fb      	str	r3, [r7, #28]
 800e6e4:	e023      	b.n	800e72e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	4b15      	ldr	r3, [pc, #84]	; (800e740 <xTaskCheckForTimeOut+0xc8>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d007      	beq.n	800e702 <xTaskCheckForTimeOut+0x8a>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	69ba      	ldr	r2, [r7, #24]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d302      	bcc.n	800e702 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	61fb      	str	r3, [r7, #28]
 800e700:	e015      	b.n	800e72e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	697a      	ldr	r2, [r7, #20]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d20b      	bcs.n	800e724 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	1ad2      	subs	r2, r2, r3
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7ff ff97 	bl	800e64c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e71e:	2300      	movs	r3, #0
 800e720:	61fb      	str	r3, [r7, #28]
 800e722:	e004      	b.n	800e72e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e72a:	2301      	movs	r3, #1
 800e72c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e72e:	f000 fc71 	bl	800f014 <vPortExitCritical>

	return xReturn;
 800e732:	69fb      	ldr	r3, [r7, #28]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3720      	adds	r7, #32
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20000dd4 	.word	0x20000dd4
 800e740:	20000de8 	.word	0x20000de8

0800e744 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e744:	b480      	push	{r7}
 800e746:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e748:	4b03      	ldr	r3, [pc, #12]	; (800e758 <vTaskMissedYield+0x14>)
 800e74a:	2201      	movs	r2, #1
 800e74c:	601a      	str	r2, [r3, #0]
}
 800e74e:	bf00      	nop
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	20000de4 	.word	0x20000de4

0800e75c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e764:	f000 f852 	bl	800e80c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e768:	4b06      	ldr	r3, [pc, #24]	; (800e784 <prvIdleTask+0x28>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d9f9      	bls.n	800e764 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e770:	4b05      	ldr	r3, [pc, #20]	; (800e788 <prvIdleTask+0x2c>)
 800e772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e776:	601a      	str	r2, [r3, #0]
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e780:	e7f0      	b.n	800e764 <prvIdleTask+0x8>
 800e782:	bf00      	nop
 800e784:	20000cd4 	.word	0x20000cd4
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e792:	2300      	movs	r3, #0
 800e794:	607b      	str	r3, [r7, #4]
 800e796:	e00c      	b.n	800e7b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	4613      	mov	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	4413      	add	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4a12      	ldr	r2, [pc, #72]	; (800e7ec <prvInitialiseTaskLists+0x60>)
 800e7a4:	4413      	add	r3, r2
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fe fb46 	bl	800ce38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	607b      	str	r3, [r7, #4]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b06      	cmp	r3, #6
 800e7b6:	d9ef      	bls.n	800e798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e7b8:	480d      	ldr	r0, [pc, #52]	; (800e7f0 <prvInitialiseTaskLists+0x64>)
 800e7ba:	f7fe fb3d 	bl	800ce38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e7be:	480d      	ldr	r0, [pc, #52]	; (800e7f4 <prvInitialiseTaskLists+0x68>)
 800e7c0:	f7fe fb3a 	bl	800ce38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e7c4:	480c      	ldr	r0, [pc, #48]	; (800e7f8 <prvInitialiseTaskLists+0x6c>)
 800e7c6:	f7fe fb37 	bl	800ce38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e7ca:	480c      	ldr	r0, [pc, #48]	; (800e7fc <prvInitialiseTaskLists+0x70>)
 800e7cc:	f7fe fb34 	bl	800ce38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e7d0:	480b      	ldr	r0, [pc, #44]	; (800e800 <prvInitialiseTaskLists+0x74>)
 800e7d2:	f7fe fb31 	bl	800ce38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e7d6:	4b0b      	ldr	r3, [pc, #44]	; (800e804 <prvInitialiseTaskLists+0x78>)
 800e7d8:	4a05      	ldr	r2, [pc, #20]	; (800e7f0 <prvInitialiseTaskLists+0x64>)
 800e7da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e7dc:	4b0a      	ldr	r3, [pc, #40]	; (800e808 <prvInitialiseTaskLists+0x7c>)
 800e7de:	4a05      	ldr	r2, [pc, #20]	; (800e7f4 <prvInitialiseTaskLists+0x68>)
 800e7e0:	601a      	str	r2, [r3, #0]
}
 800e7e2:	bf00      	nop
 800e7e4:	3708      	adds	r7, #8
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	20000cd4 	.word	0x20000cd4
 800e7f0:	20000d60 	.word	0x20000d60
 800e7f4:	20000d74 	.word	0x20000d74
 800e7f8:	20000d90 	.word	0x20000d90
 800e7fc:	20000da4 	.word	0x20000da4
 800e800:	20000dbc 	.word	0x20000dbc
 800e804:	20000d88 	.word	0x20000d88
 800e808:	20000d8c 	.word	0x20000d8c

0800e80c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e812:	e019      	b.n	800e848 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e814:	f000 fbca 	bl	800efac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e818:	4b10      	ldr	r3, [pc, #64]	; (800e85c <prvCheckTasksWaitingTermination+0x50>)
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	3304      	adds	r3, #4
 800e824:	4618      	mov	r0, r3
 800e826:	f7fe fb91 	bl	800cf4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e82a:	4b0d      	ldr	r3, [pc, #52]	; (800e860 <prvCheckTasksWaitingTermination+0x54>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3b01      	subs	r3, #1
 800e830:	4a0b      	ldr	r2, [pc, #44]	; (800e860 <prvCheckTasksWaitingTermination+0x54>)
 800e832:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e834:	4b0b      	ldr	r3, [pc, #44]	; (800e864 <prvCheckTasksWaitingTermination+0x58>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	3b01      	subs	r3, #1
 800e83a:	4a0a      	ldr	r2, [pc, #40]	; (800e864 <prvCheckTasksWaitingTermination+0x58>)
 800e83c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e83e:	f000 fbe9 	bl	800f014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 f810 	bl	800e868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e848:	4b06      	ldr	r3, [pc, #24]	; (800e864 <prvCheckTasksWaitingTermination+0x58>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1e1      	bne.n	800e814 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e850:	bf00      	nop
 800e852:	bf00      	nop
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	20000da4 	.word	0x20000da4
 800e860:	20000dd0 	.word	0x20000dd0
 800e864:	20000db8 	.word	0x20000db8

0800e868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	334c      	adds	r3, #76	; 0x4c
 800e874:	4618      	mov	r0, r3
 800e876:	f001 fea1 	bl	80105bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e880:	2b00      	cmp	r3, #0
 800e882:	d108      	bne.n	800e896 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e888:	4618      	mov	r0, r3
 800e88a:	f000 fd85 	bl	800f398 <vPortFree>
				vPortFree( pxTCB );
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fd82 	bl	800f398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e894:	e01a      	b.n	800e8cc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d103      	bne.n	800e8a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 fd79 	bl	800f398 <vPortFree>
	}
 800e8a6:	e011      	b.n	800e8cc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d00c      	beq.n	800e8cc <prvDeleteTCB+0x64>
	__asm volatile
 800e8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b6:	b672      	cpsid	i
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	b662      	cpsie	i
 800e8c6:	60fb      	str	r3, [r7, #12]
}
 800e8c8:	bf00      	nop
 800e8ca:	e7fe      	b.n	800e8ca <prvDeleteTCB+0x62>
	}
 800e8cc:	bf00      	nop
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8da:	4b0c      	ldr	r3, [pc, #48]	; (800e90c <prvResetNextTaskUnblockTime+0x38>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d104      	bne.n	800e8ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e8e4:	4b0a      	ldr	r3, [pc, #40]	; (800e910 <prvResetNextTaskUnblockTime+0x3c>)
 800e8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e8ec:	e008      	b.n	800e900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ee:	4b07      	ldr	r3, [pc, #28]	; (800e90c <prvResetNextTaskUnblockTime+0x38>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	4a04      	ldr	r2, [pc, #16]	; (800e910 <prvResetNextTaskUnblockTime+0x3c>)
 800e8fe:	6013      	str	r3, [r2, #0]
}
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	20000d88 	.word	0x20000d88
 800e910:	20000df0 	.word	0x20000df0

0800e914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e91a:	4b0b      	ldr	r3, [pc, #44]	; (800e948 <xTaskGetSchedulerState+0x34>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d102      	bne.n	800e928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e922:	2301      	movs	r3, #1
 800e924:	607b      	str	r3, [r7, #4]
 800e926:	e008      	b.n	800e93a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e928:	4b08      	ldr	r3, [pc, #32]	; (800e94c <xTaskGetSchedulerState+0x38>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d102      	bne.n	800e936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e930:	2302      	movs	r3, #2
 800e932:	607b      	str	r3, [r7, #4]
 800e934:	e001      	b.n	800e93a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e936:	2300      	movs	r3, #0
 800e938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e93a:	687b      	ldr	r3, [r7, #4]
	}
 800e93c:	4618      	mov	r0, r3
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	20000ddc 	.word	0x20000ddc
 800e94c:	20000df8 	.word	0x20000df8

0800e950 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e95c:	2300      	movs	r3, #0
 800e95e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d069      	beq.n	800ea3a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e96a:	4b36      	ldr	r3, [pc, #216]	; (800ea44 <xTaskPriorityInherit+0xf4>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e970:	429a      	cmp	r2, r3
 800e972:	d259      	bcs.n	800ea28 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	db06      	blt.n	800e98a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e97c:	4b31      	ldr	r3, [pc, #196]	; (800ea44 <xTaskPriorityInherit+0xf4>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e982:	f1c3 0207 	rsb	r2, r3, #7
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	6959      	ldr	r1, [r3, #20]
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e992:	4613      	mov	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4413      	add	r3, r2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	4a2b      	ldr	r2, [pc, #172]	; (800ea48 <xTaskPriorityInherit+0xf8>)
 800e99c:	4413      	add	r3, r2
 800e99e:	4299      	cmp	r1, r3
 800e9a0:	d13a      	bne.n	800ea18 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	3304      	adds	r3, #4
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fe fad0 	bl	800cf4c <uxListRemove>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d115      	bne.n	800e9de <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9b6:	4924      	ldr	r1, [pc, #144]	; (800ea48 <xTaskPriorityInherit+0xf8>)
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	4413      	add	r3, r2
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	440b      	add	r3, r1
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d10a      	bne.n	800e9de <xTaskPriorityInherit+0x8e>
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e9d2:	43da      	mvns	r2, r3
 800e9d4:	4b1d      	ldr	r3, [pc, #116]	; (800ea4c <xTaskPriorityInherit+0xfc>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4013      	ands	r3, r2
 800e9da:	4a1c      	ldr	r2, [pc, #112]	; (800ea4c <xTaskPriorityInherit+0xfc>)
 800e9dc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e9de:	4b19      	ldr	r3, [pc, #100]	; (800ea44 <xTaskPriorityInherit+0xf4>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	409a      	lsls	r2, r3
 800e9f0:	4b16      	ldr	r3, [pc, #88]	; (800ea4c <xTaskPriorityInherit+0xfc>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	4a15      	ldr	r2, [pc, #84]	; (800ea4c <xTaskPriorityInherit+0xfc>)
 800e9f8:	6013      	str	r3, [r2, #0]
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9fe:	4613      	mov	r3, r2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	4413      	add	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4a10      	ldr	r2, [pc, #64]	; (800ea48 <xTaskPriorityInherit+0xf8>)
 800ea08:	441a      	add	r2, r3
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	3304      	adds	r3, #4
 800ea0e:	4619      	mov	r1, r3
 800ea10:	4610      	mov	r0, r2
 800ea12:	f7fe fa3e 	bl	800ce92 <vListInsertEnd>
 800ea16:	e004      	b.n	800ea22 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea18:	4b0a      	ldr	r3, [pc, #40]	; (800ea44 <xTaskPriorityInherit+0xf4>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ea22:	2301      	movs	r3, #1
 800ea24:	60fb      	str	r3, [r7, #12]
 800ea26:	e008      	b.n	800ea3a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea2c:	4b05      	ldr	r3, [pc, #20]	; (800ea44 <xTaskPriorityInherit+0xf4>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d201      	bcs.n	800ea3a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ea36:	2301      	movs	r3, #1
 800ea38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
	}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	20000cd0 	.word	0x20000cd0
 800ea48:	20000cd4 	.word	0x20000cd4
 800ea4c:	20000dd8 	.word	0x20000dd8

0800ea50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d072      	beq.n	800eb4c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ea66:	4b3c      	ldr	r3, [pc, #240]	; (800eb58 <xTaskPriorityDisinherit+0x108>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	693a      	ldr	r2, [r7, #16]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d00c      	beq.n	800ea8a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	b672      	cpsid	i
 800ea76:	f383 8811 	msr	BASEPRI, r3
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	f3bf 8f4f 	dsb	sy
 800ea82:	b662      	cpsie	i
 800ea84:	60fb      	str	r3, [r7, #12]
}
 800ea86:	bf00      	nop
 800ea88:	e7fe      	b.n	800ea88 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10c      	bne.n	800eaac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ea92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea96:	b672      	cpsid	i
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	b662      	cpsie	i
 800eaa6:	60bb      	str	r3, [r7, #8]
}
 800eaa8:	bf00      	nop
 800eaaa:	e7fe      	b.n	800eaaa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eab0:	1e5a      	subs	r2, r3, #1
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d044      	beq.n	800eb4c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d140      	bne.n	800eb4c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	3304      	adds	r3, #4
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fe fa3c 	bl	800cf4c <uxListRemove>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d115      	bne.n	800eb06 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eade:	491f      	ldr	r1, [pc, #124]	; (800eb5c <xTaskPriorityDisinherit+0x10c>)
 800eae0:	4613      	mov	r3, r2
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	4413      	add	r3, r2
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	440b      	add	r3, r1
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10a      	bne.n	800eb06 <xTaskPriorityDisinherit+0xb6>
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	fa02 f303 	lsl.w	r3, r2, r3
 800eafa:	43da      	mvns	r2, r3
 800eafc:	4b18      	ldr	r3, [pc, #96]	; (800eb60 <xTaskPriorityDisinherit+0x110>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4013      	ands	r3, r2
 800eb02:	4a17      	ldr	r2, [pc, #92]	; (800eb60 <xTaskPriorityDisinherit+0x110>)
 800eb04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb12:	f1c3 0207 	rsb	r2, r3, #7
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb1e:	2201      	movs	r2, #1
 800eb20:	409a      	lsls	r2, r3
 800eb22:	4b0f      	ldr	r3, [pc, #60]	; (800eb60 <xTaskPriorityDisinherit+0x110>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4313      	orrs	r3, r2
 800eb28:	4a0d      	ldr	r2, [pc, #52]	; (800eb60 <xTaskPriorityDisinherit+0x110>)
 800eb2a:	6013      	str	r3, [r2, #0]
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb30:	4613      	mov	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	4413      	add	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4a08      	ldr	r2, [pc, #32]	; (800eb5c <xTaskPriorityDisinherit+0x10c>)
 800eb3a:	441a      	add	r2, r3
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	3304      	adds	r3, #4
 800eb40:	4619      	mov	r1, r3
 800eb42:	4610      	mov	r0, r2
 800eb44:	f7fe f9a5 	bl	800ce92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb4c:	697b      	ldr	r3, [r7, #20]
	}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3718      	adds	r7, #24
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	20000cd0 	.word	0x20000cd0
 800eb5c:	20000cd4 	.word	0x20000cd4
 800eb60:	20000dd8 	.word	0x20000dd8

0800eb64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b088      	sub	sp, #32
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eb72:	2301      	movs	r3, #1
 800eb74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f000 8087 	beq.w	800ec8c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eb7e:	69bb      	ldr	r3, [r7, #24]
 800eb80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d10c      	bne.n	800eba0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800eb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8a:	b672      	cpsid	i
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	b662      	cpsie	i
 800eb9a:	60fb      	str	r3, [r7, #12]
}
 800eb9c:	bf00      	nop
 800eb9e:	e7fe      	b.n	800eb9e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eba4:	683a      	ldr	r2, [r7, #0]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d902      	bls.n	800ebb0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	61fb      	str	r3, [r7, #28]
 800ebae:	e002      	b.n	800ebb6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebb4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebba:	69fa      	ldr	r2, [r7, #28]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d065      	beq.n	800ec8c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebc4:	697a      	ldr	r2, [r7, #20]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d160      	bne.n	800ec8c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ebca:	4b32      	ldr	r3, [pc, #200]	; (800ec94 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	69ba      	ldr	r2, [r7, #24]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d10c      	bne.n	800ebee <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800ebd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd8:	b672      	cpsid	i
 800ebda:	f383 8811 	msr	BASEPRI, r3
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	b662      	cpsie	i
 800ebe8:	60bb      	str	r3, [r7, #8]
}
 800ebea:	bf00      	nop
 800ebec:	e7fe      	b.n	800ebec <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	69fa      	ldr	r2, [r7, #28]
 800ebf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	db04      	blt.n	800ec0c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	f1c3 0207 	rsb	r2, r3, #7
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	6959      	ldr	r1, [r3, #20]
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	4613      	mov	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4413      	add	r3, r2
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	4a1f      	ldr	r2, [pc, #124]	; (800ec98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ec1c:	4413      	add	r3, r2
 800ec1e:	4299      	cmp	r1, r3
 800ec20:	d134      	bne.n	800ec8c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	3304      	adds	r3, #4
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fe f990 	bl	800cf4c <uxListRemove>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d115      	bne.n	800ec5e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec36:	4918      	ldr	r1, [pc, #96]	; (800ec98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ec38:	4613      	mov	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4413      	add	r3, r2
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	440b      	add	r3, r1
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10a      	bne.n	800ec5e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec52:	43da      	mvns	r2, r3
 800ec54:	4b11      	ldr	r3, [pc, #68]	; (800ec9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4013      	ands	r3, r2
 800ec5a:	4a10      	ldr	r2, [pc, #64]	; (800ec9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ec5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec62:	2201      	movs	r2, #1
 800ec64:	409a      	lsls	r2, r3
 800ec66:	4b0d      	ldr	r3, [pc, #52]	; (800ec9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	4a0b      	ldr	r2, [pc, #44]	; (800ec9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ec6e:	6013      	str	r3, [r2, #0]
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec74:	4613      	mov	r3, r2
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	4413      	add	r3, r2
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	4a06      	ldr	r2, [pc, #24]	; (800ec98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ec7e:	441a      	add	r2, r3
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	3304      	adds	r3, #4
 800ec84:	4619      	mov	r1, r3
 800ec86:	4610      	mov	r0, r2
 800ec88:	f7fe f903 	bl	800ce92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec8c:	bf00      	nop
 800ec8e:	3720      	adds	r7, #32
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	20000cd0 	.word	0x20000cd0
 800ec98:	20000cd4 	.word	0x20000cd4
 800ec9c:	20000dd8 	.word	0x20000dd8

0800eca0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eca0:	b480      	push	{r7}
 800eca2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eca4:	4b07      	ldr	r3, [pc, #28]	; (800ecc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d004      	beq.n	800ecb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ecac:	4b05      	ldr	r3, [pc, #20]	; (800ecc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecb2:	3201      	adds	r2, #1
 800ecb4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ecb6:	4b03      	ldr	r3, [pc, #12]	; (800ecc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
	}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr
 800ecc4:	20000cd0 	.word	0x20000cd0

0800ecc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ecd2:	4b29      	ldr	r3, [pc, #164]	; (800ed78 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecd8:	4b28      	ldr	r3, [pc, #160]	; (800ed7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fe f934 	bl	800cf4c <uxListRemove>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10b      	bne.n	800ed02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ecea:	4b24      	ldr	r3, [pc, #144]	; (800ed7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ecf6:	43da      	mvns	r2, r3
 800ecf8:	4b21      	ldr	r3, [pc, #132]	; (800ed80 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4013      	ands	r3, r2
 800ecfe:	4a20      	ldr	r2, [pc, #128]	; (800ed80 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ed00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed08:	d10a      	bne.n	800ed20 <prvAddCurrentTaskToDelayedList+0x58>
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d007      	beq.n	800ed20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed10:	4b1a      	ldr	r3, [pc, #104]	; (800ed7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	3304      	adds	r3, #4
 800ed16:	4619      	mov	r1, r3
 800ed18:	481a      	ldr	r0, [pc, #104]	; (800ed84 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ed1a:	f7fe f8ba 	bl	800ce92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed1e:	e026      	b.n	800ed6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4413      	add	r3, r2
 800ed26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed28:	4b14      	ldr	r3, [pc, #80]	; (800ed7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed30:	68ba      	ldr	r2, [r7, #8]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d209      	bcs.n	800ed4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed38:	4b13      	ldr	r3, [pc, #76]	; (800ed88 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	4b0f      	ldr	r3, [pc, #60]	; (800ed7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	3304      	adds	r3, #4
 800ed42:	4619      	mov	r1, r3
 800ed44:	4610      	mov	r0, r2
 800ed46:	f7fe f8c8 	bl	800ceda <vListInsert>
}
 800ed4a:	e010      	b.n	800ed6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed4c:	4b0f      	ldr	r3, [pc, #60]	; (800ed8c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	4b0a      	ldr	r3, [pc, #40]	; (800ed7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	3304      	adds	r3, #4
 800ed56:	4619      	mov	r1, r3
 800ed58:	4610      	mov	r0, r2
 800ed5a:	f7fe f8be 	bl	800ceda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ed5e:	4b0c      	ldr	r3, [pc, #48]	; (800ed90 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d202      	bcs.n	800ed6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ed68:	4a09      	ldr	r2, [pc, #36]	; (800ed90 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	6013      	str	r3, [r2, #0]
}
 800ed6e:	bf00      	nop
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20000dd4 	.word	0x20000dd4
 800ed7c:	20000cd0 	.word	0x20000cd0
 800ed80:	20000dd8 	.word	0x20000dd8
 800ed84:	20000dbc 	.word	0x20000dbc
 800ed88:	20000d8c 	.word	0x20000d8c
 800ed8c:	20000d88 	.word	0x20000d88
 800ed90:	20000df0 	.word	0x20000df0

0800ed94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	3b04      	subs	r3, #4
 800eda4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800edac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3b04      	subs	r3, #4
 800edb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	f023 0201 	bic.w	r2, r3, #1
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	3b04      	subs	r3, #4
 800edc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800edc4:	4a0c      	ldr	r2, [pc, #48]	; (800edf8 <pxPortInitialiseStack+0x64>)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	3b14      	subs	r3, #20
 800edce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	3b04      	subs	r3, #4
 800edda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f06f 0202 	mvn.w	r2, #2
 800ede2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	3b20      	subs	r3, #32
 800ede8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800edea:	68fb      	ldr	r3, [r7, #12]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3714      	adds	r7, #20
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	0800edfd 	.word	0x0800edfd

0800edfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee06:	4b14      	ldr	r3, [pc, #80]	; (800ee58 <prvTaskExitError+0x5c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee0e:	d00c      	beq.n	800ee2a <prvTaskExitError+0x2e>
	__asm volatile
 800ee10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee14:	b672      	cpsid	i
 800ee16:	f383 8811 	msr	BASEPRI, r3
 800ee1a:	f3bf 8f6f 	isb	sy
 800ee1e:	f3bf 8f4f 	dsb	sy
 800ee22:	b662      	cpsie	i
 800ee24:	60fb      	str	r3, [r7, #12]
}
 800ee26:	bf00      	nop
 800ee28:	e7fe      	b.n	800ee28 <prvTaskExitError+0x2c>
	__asm volatile
 800ee2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2e:	b672      	cpsid	i
 800ee30:	f383 8811 	msr	BASEPRI, r3
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	f3bf 8f4f 	dsb	sy
 800ee3c:	b662      	cpsie	i
 800ee3e:	60bb      	str	r3, [r7, #8]
}
 800ee40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ee42:	bf00      	nop
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d0fc      	beq.n	800ee44 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ee4a:	bf00      	nop
 800ee4c:	bf00      	nop
 800ee4e:	3714      	adds	r7, #20
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	20000014 	.word	0x20000014
 800ee5c:	00000000 	.word	0x00000000

0800ee60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ee60:	4b07      	ldr	r3, [pc, #28]	; (800ee80 <pxCurrentTCBConst2>)
 800ee62:	6819      	ldr	r1, [r3, #0]
 800ee64:	6808      	ldr	r0, [r1, #0]
 800ee66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6a:	f380 8809 	msr	PSP, r0
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f04f 0000 	mov.w	r0, #0
 800ee76:	f380 8811 	msr	BASEPRI, r0
 800ee7a:	4770      	bx	lr
 800ee7c:	f3af 8000 	nop.w

0800ee80 <pxCurrentTCBConst2>:
 800ee80:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop

0800ee88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ee88:	4808      	ldr	r0, [pc, #32]	; (800eeac <prvPortStartFirstTask+0x24>)
 800ee8a:	6800      	ldr	r0, [r0, #0]
 800ee8c:	6800      	ldr	r0, [r0, #0]
 800ee8e:	f380 8808 	msr	MSP, r0
 800ee92:	f04f 0000 	mov.w	r0, #0
 800ee96:	f380 8814 	msr	CONTROL, r0
 800ee9a:	b662      	cpsie	i
 800ee9c:	b661      	cpsie	f
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	f3bf 8f6f 	isb	sy
 800eea6:	df00      	svc	0
 800eea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eeaa:	bf00      	nop
 800eeac:	e000ed08 	.word	0xe000ed08

0800eeb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eeb6:	4b37      	ldr	r3, [pc, #220]	; (800ef94 <xPortStartScheduler+0xe4>)
 800eeb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	22ff      	movs	r2, #255	; 0xff
 800eec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eed0:	78fb      	ldrb	r3, [r7, #3]
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eed8:	b2da      	uxtb	r2, r3
 800eeda:	4b2f      	ldr	r3, [pc, #188]	; (800ef98 <xPortStartScheduler+0xe8>)
 800eedc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eede:	4b2f      	ldr	r3, [pc, #188]	; (800ef9c <xPortStartScheduler+0xec>)
 800eee0:	2207      	movs	r2, #7
 800eee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eee4:	e009      	b.n	800eefa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eee6:	4b2d      	ldr	r3, [pc, #180]	; (800ef9c <xPortStartScheduler+0xec>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	3b01      	subs	r3, #1
 800eeec:	4a2b      	ldr	r2, [pc, #172]	; (800ef9c <xPortStartScheduler+0xec>)
 800eeee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eef0:	78fb      	ldrb	r3, [r7, #3]
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	005b      	lsls	r3, r3, #1
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eefa:	78fb      	ldrb	r3, [r7, #3]
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef02:	2b80      	cmp	r3, #128	; 0x80
 800ef04:	d0ef      	beq.n	800eee6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ef06:	4b25      	ldr	r3, [pc, #148]	; (800ef9c <xPortStartScheduler+0xec>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f1c3 0307 	rsb	r3, r3, #7
 800ef0e:	2b04      	cmp	r3, #4
 800ef10:	d00c      	beq.n	800ef2c <xPortStartScheduler+0x7c>
	__asm volatile
 800ef12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef16:	b672      	cpsid	i
 800ef18:	f383 8811 	msr	BASEPRI, r3
 800ef1c:	f3bf 8f6f 	isb	sy
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	b662      	cpsie	i
 800ef26:	60bb      	str	r3, [r7, #8]
}
 800ef28:	bf00      	nop
 800ef2a:	e7fe      	b.n	800ef2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ef2c:	4b1b      	ldr	r3, [pc, #108]	; (800ef9c <xPortStartScheduler+0xec>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	021b      	lsls	r3, r3, #8
 800ef32:	4a1a      	ldr	r2, [pc, #104]	; (800ef9c <xPortStartScheduler+0xec>)
 800ef34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ef36:	4b19      	ldr	r3, [pc, #100]	; (800ef9c <xPortStartScheduler+0xec>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ef3e:	4a17      	ldr	r2, [pc, #92]	; (800ef9c <xPortStartScheduler+0xec>)
 800ef40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ef4a:	4b15      	ldr	r3, [pc, #84]	; (800efa0 <xPortStartScheduler+0xf0>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a14      	ldr	r2, [pc, #80]	; (800efa0 <xPortStartScheduler+0xf0>)
 800ef50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ef54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ef56:	4b12      	ldr	r3, [pc, #72]	; (800efa0 <xPortStartScheduler+0xf0>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a11      	ldr	r2, [pc, #68]	; (800efa0 <xPortStartScheduler+0xf0>)
 800ef5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ef60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ef62:	f000 f8dd 	bl	800f120 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ef66:	4b0f      	ldr	r3, [pc, #60]	; (800efa4 <xPortStartScheduler+0xf4>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ef6c:	f000 f8fc 	bl	800f168 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ef70:	4b0d      	ldr	r3, [pc, #52]	; (800efa8 <xPortStartScheduler+0xf8>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a0c      	ldr	r2, [pc, #48]	; (800efa8 <xPortStartScheduler+0xf8>)
 800ef76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ef7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ef7c:	f7ff ff84 	bl	800ee88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef80:	f7ff fa76 	bl	800e470 <vTaskSwitchContext>
	prvTaskExitError();
 800ef84:	f7ff ff3a 	bl	800edfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	e000e400 	.word	0xe000e400
 800ef98:	20000dfc 	.word	0x20000dfc
 800ef9c:	20000e00 	.word	0x20000e00
 800efa0:	e000ed20 	.word	0xe000ed20
 800efa4:	20000014 	.word	0x20000014
 800efa8:	e000ef34 	.word	0xe000ef34

0800efac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
	__asm volatile
 800efb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb6:	b672      	cpsid	i
 800efb8:	f383 8811 	msr	BASEPRI, r3
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	b662      	cpsie	i
 800efc6:	607b      	str	r3, [r7, #4]
}
 800efc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800efca:	4b10      	ldr	r3, [pc, #64]	; (800f00c <vPortEnterCritical+0x60>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	3301      	adds	r3, #1
 800efd0:	4a0e      	ldr	r2, [pc, #56]	; (800f00c <vPortEnterCritical+0x60>)
 800efd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800efd4:	4b0d      	ldr	r3, [pc, #52]	; (800f00c <vPortEnterCritical+0x60>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d111      	bne.n	800f000 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800efdc:	4b0c      	ldr	r3, [pc, #48]	; (800f010 <vPortEnterCritical+0x64>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00c      	beq.n	800f000 <vPortEnterCritical+0x54>
	__asm volatile
 800efe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efea:	b672      	cpsid	i
 800efec:	f383 8811 	msr	BASEPRI, r3
 800eff0:	f3bf 8f6f 	isb	sy
 800eff4:	f3bf 8f4f 	dsb	sy
 800eff8:	b662      	cpsie	i
 800effa:	603b      	str	r3, [r7, #0]
}
 800effc:	bf00      	nop
 800effe:	e7fe      	b.n	800effe <vPortEnterCritical+0x52>
	}
}
 800f000:	bf00      	nop
 800f002:	370c      	adds	r7, #12
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr
 800f00c:	20000014 	.word	0x20000014
 800f010:	e000ed04 	.word	0xe000ed04

0800f014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f01a:	4b13      	ldr	r3, [pc, #76]	; (800f068 <vPortExitCritical+0x54>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d10c      	bne.n	800f03c <vPortExitCritical+0x28>
	__asm volatile
 800f022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f026:	b672      	cpsid	i
 800f028:	f383 8811 	msr	BASEPRI, r3
 800f02c:	f3bf 8f6f 	isb	sy
 800f030:	f3bf 8f4f 	dsb	sy
 800f034:	b662      	cpsie	i
 800f036:	607b      	str	r3, [r7, #4]
}
 800f038:	bf00      	nop
 800f03a:	e7fe      	b.n	800f03a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f03c:	4b0a      	ldr	r3, [pc, #40]	; (800f068 <vPortExitCritical+0x54>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	3b01      	subs	r3, #1
 800f042:	4a09      	ldr	r2, [pc, #36]	; (800f068 <vPortExitCritical+0x54>)
 800f044:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f046:	4b08      	ldr	r3, [pc, #32]	; (800f068 <vPortExitCritical+0x54>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d105      	bne.n	800f05a <vPortExitCritical+0x46>
 800f04e:	2300      	movs	r3, #0
 800f050:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	f383 8811 	msr	BASEPRI, r3
}
 800f058:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f05a:	bf00      	nop
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop
 800f068:	20000014 	.word	0x20000014
 800f06c:	00000000 	.word	0x00000000

0800f070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f070:	f3ef 8009 	mrs	r0, PSP
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	4b15      	ldr	r3, [pc, #84]	; (800f0d0 <pxCurrentTCBConst>)
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	f01e 0f10 	tst.w	lr, #16
 800f080:	bf08      	it	eq
 800f082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08a:	6010      	str	r0, [r2, #0]
 800f08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f090:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f094:	b672      	cpsid	i
 800f096:	f380 8811 	msr	BASEPRI, r0
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	b662      	cpsie	i
 800f0a4:	f7ff f9e4 	bl	800e470 <vTaskSwitchContext>
 800f0a8:	f04f 0000 	mov.w	r0, #0
 800f0ac:	f380 8811 	msr	BASEPRI, r0
 800f0b0:	bc09      	pop	{r0, r3}
 800f0b2:	6819      	ldr	r1, [r3, #0]
 800f0b4:	6808      	ldr	r0, [r1, #0]
 800f0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ba:	f01e 0f10 	tst.w	lr, #16
 800f0be:	bf08      	it	eq
 800f0c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f0c4:	f380 8809 	msr	PSP, r0
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop

0800f0d0 <pxCurrentTCBConst>:
 800f0d0:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f0d4:	bf00      	nop
 800f0d6:	bf00      	nop

0800f0d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e2:	b672      	cpsid	i
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	b662      	cpsie	i
 800f0f2:	607b      	str	r3, [r7, #4]
}
 800f0f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f0f6:	f7ff f901 	bl	800e2fc <xTaskIncrementTick>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d003      	beq.n	800f108 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f100:	4b06      	ldr	r3, [pc, #24]	; (800f11c <SysTick_Handler+0x44>)
 800f102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f106:	601a      	str	r2, [r3, #0]
 800f108:	2300      	movs	r3, #0
 800f10a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	f383 8811 	msr	BASEPRI, r3
}
 800f112:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f114:	bf00      	nop
 800f116:	3708      	adds	r7, #8
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	e000ed04 	.word	0xe000ed04

0800f120 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f120:	b480      	push	{r7}
 800f122:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f124:	4b0b      	ldr	r3, [pc, #44]	; (800f154 <vPortSetupTimerInterrupt+0x34>)
 800f126:	2200      	movs	r2, #0
 800f128:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f12a:	4b0b      	ldr	r3, [pc, #44]	; (800f158 <vPortSetupTimerInterrupt+0x38>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f130:	4b0a      	ldr	r3, [pc, #40]	; (800f15c <vPortSetupTimerInterrupt+0x3c>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a0a      	ldr	r2, [pc, #40]	; (800f160 <vPortSetupTimerInterrupt+0x40>)
 800f136:	fba2 2303 	umull	r2, r3, r2, r3
 800f13a:	099b      	lsrs	r3, r3, #6
 800f13c:	4a09      	ldr	r2, [pc, #36]	; (800f164 <vPortSetupTimerInterrupt+0x44>)
 800f13e:	3b01      	subs	r3, #1
 800f140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f142:	4b04      	ldr	r3, [pc, #16]	; (800f154 <vPortSetupTimerInterrupt+0x34>)
 800f144:	2207      	movs	r2, #7
 800f146:	601a      	str	r2, [r3, #0]
}
 800f148:	bf00      	nop
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	e000e010 	.word	0xe000e010
 800f158:	e000e018 	.word	0xe000e018
 800f15c:	20000008 	.word	0x20000008
 800f160:	10624dd3 	.word	0x10624dd3
 800f164:	e000e014 	.word	0xe000e014

0800f168 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f168:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f178 <vPortEnableVFP+0x10>
 800f16c:	6801      	ldr	r1, [r0, #0]
 800f16e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f172:	6001      	str	r1, [r0, #0]
 800f174:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f176:	bf00      	nop
 800f178:	e000ed88 	.word	0xe000ed88

0800f17c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f182:	f3ef 8305 	mrs	r3, IPSR
 800f186:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2b0f      	cmp	r3, #15
 800f18c:	d916      	bls.n	800f1bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f18e:	4a19      	ldr	r2, [pc, #100]	; (800f1f4 <vPortValidateInterruptPriority+0x78>)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	4413      	add	r3, r2
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f198:	4b17      	ldr	r3, [pc, #92]	; (800f1f8 <vPortValidateInterruptPriority+0x7c>)
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	7afa      	ldrb	r2, [r7, #11]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d20c      	bcs.n	800f1bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	b672      	cpsid	i
 800f1a8:	f383 8811 	msr	BASEPRI, r3
 800f1ac:	f3bf 8f6f 	isb	sy
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	b662      	cpsie	i
 800f1b6:	607b      	str	r3, [r7, #4]
}
 800f1b8:	bf00      	nop
 800f1ba:	e7fe      	b.n	800f1ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f1bc:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <vPortValidateInterruptPriority+0x80>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f1c4:	4b0e      	ldr	r3, [pc, #56]	; (800f200 <vPortValidateInterruptPriority+0x84>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d90c      	bls.n	800f1e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d0:	b672      	cpsid	i
 800f1d2:	f383 8811 	msr	BASEPRI, r3
 800f1d6:	f3bf 8f6f 	isb	sy
 800f1da:	f3bf 8f4f 	dsb	sy
 800f1de:	b662      	cpsie	i
 800f1e0:	603b      	str	r3, [r7, #0]
}
 800f1e2:	bf00      	nop
 800f1e4:	e7fe      	b.n	800f1e4 <vPortValidateInterruptPriority+0x68>
	}
 800f1e6:	bf00      	nop
 800f1e8:	3714      	adds	r7, #20
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	e000e3f0 	.word	0xe000e3f0
 800f1f8:	20000dfc 	.word	0x20000dfc
 800f1fc:	e000ed0c 	.word	0xe000ed0c
 800f200:	20000e00 	.word	0x20000e00

0800f204 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b08a      	sub	sp, #40	; 0x28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f20c:	2300      	movs	r3, #0
 800f20e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f210:	f7fe ffb8 	bl	800e184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f214:	4b5b      	ldr	r3, [pc, #364]	; (800f384 <pvPortMalloc+0x180>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d101      	bne.n	800f220 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f21c:	f000 f91a 	bl	800f454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f220:	4b59      	ldr	r3, [pc, #356]	; (800f388 <pvPortMalloc+0x184>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4013      	ands	r3, r2
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f040 8092 	bne.w	800f352 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d01f      	beq.n	800f274 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f234:	2208      	movs	r2, #8
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4413      	add	r3, r2
 800f23a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f003 0307 	and.w	r3, r3, #7
 800f242:	2b00      	cmp	r3, #0
 800f244:	d016      	beq.n	800f274 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f023 0307 	bic.w	r3, r3, #7
 800f24c:	3308      	adds	r3, #8
 800f24e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f003 0307 	and.w	r3, r3, #7
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00c      	beq.n	800f274 <pvPortMalloc+0x70>
	__asm volatile
 800f25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25e:	b672      	cpsid	i
 800f260:	f383 8811 	msr	BASEPRI, r3
 800f264:	f3bf 8f6f 	isb	sy
 800f268:	f3bf 8f4f 	dsb	sy
 800f26c:	b662      	cpsie	i
 800f26e:	617b      	str	r3, [r7, #20]
}
 800f270:	bf00      	nop
 800f272:	e7fe      	b.n	800f272 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d06b      	beq.n	800f352 <pvPortMalloc+0x14e>
 800f27a:	4b44      	ldr	r3, [pc, #272]	; (800f38c <pvPortMalloc+0x188>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	429a      	cmp	r2, r3
 800f282:	d866      	bhi.n	800f352 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f284:	4b42      	ldr	r3, [pc, #264]	; (800f390 <pvPortMalloc+0x18c>)
 800f286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f288:	4b41      	ldr	r3, [pc, #260]	; (800f390 <pvPortMalloc+0x18c>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f28e:	e004      	b.n	800f29a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d903      	bls.n	800f2ac <pvPortMalloc+0xa8>
 800f2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1f1      	bne.n	800f290 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f2ac:	4b35      	ldr	r3, [pc, #212]	; (800f384 <pvPortMalloc+0x180>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d04d      	beq.n	800f352 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f2b6:	6a3b      	ldr	r3, [r7, #32]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2208      	movs	r2, #8
 800f2bc:	4413      	add	r3, r2
 800f2be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	6a3b      	ldr	r3, [r7, #32]
 800f2c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	685a      	ldr	r2, [r3, #4]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	1ad2      	subs	r2, r2, r3
 800f2d0:	2308      	movs	r3, #8
 800f2d2:	005b      	lsls	r3, r3, #1
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d921      	bls.n	800f31c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4413      	add	r3, r2
 800f2de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	f003 0307 	and.w	r3, r3, #7
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00c      	beq.n	800f304 <pvPortMalloc+0x100>
	__asm volatile
 800f2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ee:	b672      	cpsid	i
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	b662      	cpsie	i
 800f2fe:	613b      	str	r3, [r7, #16]
}
 800f300:	bf00      	nop
 800f302:	e7fe      	b.n	800f302 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f306:	685a      	ldr	r2, [r3, #4]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	1ad2      	subs	r2, r2, r3
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f316:	69b8      	ldr	r0, [r7, #24]
 800f318:	f000 f8fe 	bl	800f518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f31c:	4b1b      	ldr	r3, [pc, #108]	; (800f38c <pvPortMalloc+0x188>)
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	1ad3      	subs	r3, r2, r3
 800f326:	4a19      	ldr	r2, [pc, #100]	; (800f38c <pvPortMalloc+0x188>)
 800f328:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f32a:	4b18      	ldr	r3, [pc, #96]	; (800f38c <pvPortMalloc+0x188>)
 800f32c:	681a      	ldr	r2, [r3, #0]
 800f32e:	4b19      	ldr	r3, [pc, #100]	; (800f394 <pvPortMalloc+0x190>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	429a      	cmp	r2, r3
 800f334:	d203      	bcs.n	800f33e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f336:	4b15      	ldr	r3, [pc, #84]	; (800f38c <pvPortMalloc+0x188>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4a16      	ldr	r2, [pc, #88]	; (800f394 <pvPortMalloc+0x190>)
 800f33c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f340:	685a      	ldr	r2, [r3, #4]
 800f342:	4b11      	ldr	r3, [pc, #68]	; (800f388 <pvPortMalloc+0x184>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	431a      	orrs	r2, r3
 800f348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	2200      	movs	r2, #0
 800f350:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f352:	f7fe ff25 	bl	800e1a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	f003 0307 	and.w	r3, r3, #7
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d00c      	beq.n	800f37a <pvPortMalloc+0x176>
	__asm volatile
 800f360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f364:	b672      	cpsid	i
 800f366:	f383 8811 	msr	BASEPRI, r3
 800f36a:	f3bf 8f6f 	isb	sy
 800f36e:	f3bf 8f4f 	dsb	sy
 800f372:	b662      	cpsie	i
 800f374:	60fb      	str	r3, [r7, #12]
}
 800f376:	bf00      	nop
 800f378:	e7fe      	b.n	800f378 <pvPortMalloc+0x174>
	return pvReturn;
 800f37a:	69fb      	ldr	r3, [r7, #28]
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3728      	adds	r7, #40	; 0x28
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	20004a0c 	.word	0x20004a0c
 800f388:	20004a18 	.word	0x20004a18
 800f38c:	20004a10 	.word	0x20004a10
 800f390:	20004a04 	.word	0x20004a04
 800f394:	20004a14 	.word	0x20004a14

0800f398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d04c      	beq.n	800f444 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f3aa:	2308      	movs	r3, #8
 800f3ac:	425b      	negs	r3, r3
 800f3ae:	697a      	ldr	r2, [r7, #20]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	685a      	ldr	r2, [r3, #4]
 800f3bc:	4b23      	ldr	r3, [pc, #140]	; (800f44c <vPortFree+0xb4>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4013      	ands	r3, r2
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d10c      	bne.n	800f3e0 <vPortFree+0x48>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ca:	b672      	cpsid	i
 800f3cc:	f383 8811 	msr	BASEPRI, r3
 800f3d0:	f3bf 8f6f 	isb	sy
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	b662      	cpsie	i
 800f3da:	60fb      	str	r3, [r7, #12]
}
 800f3dc:	bf00      	nop
 800f3de:	e7fe      	b.n	800f3de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d00c      	beq.n	800f402 <vPortFree+0x6a>
	__asm volatile
 800f3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ec:	b672      	cpsid	i
 800f3ee:	f383 8811 	msr	BASEPRI, r3
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	b662      	cpsie	i
 800f3fc:	60bb      	str	r3, [r7, #8]
}
 800f3fe:	bf00      	nop
 800f400:	e7fe      	b.n	800f400 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	685a      	ldr	r2, [r3, #4]
 800f406:	4b11      	ldr	r3, [pc, #68]	; (800f44c <vPortFree+0xb4>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4013      	ands	r3, r2
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d019      	beq.n	800f444 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d115      	bne.n	800f444 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	685a      	ldr	r2, [r3, #4]
 800f41c:	4b0b      	ldr	r3, [pc, #44]	; (800f44c <vPortFree+0xb4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	43db      	mvns	r3, r3
 800f422:	401a      	ands	r2, r3
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f428:	f7fe feac 	bl	800e184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	685a      	ldr	r2, [r3, #4]
 800f430:	4b07      	ldr	r3, [pc, #28]	; (800f450 <vPortFree+0xb8>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4413      	add	r3, r2
 800f436:	4a06      	ldr	r2, [pc, #24]	; (800f450 <vPortFree+0xb8>)
 800f438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f43a:	6938      	ldr	r0, [r7, #16]
 800f43c:	f000 f86c 	bl	800f518 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f440:	f7fe feae 	bl	800e1a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f444:	bf00      	nop
 800f446:	3718      	adds	r7, #24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	20004a18 	.word	0x20004a18
 800f450:	20004a10 	.word	0x20004a10

0800f454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f45a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f45e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f460:	4b27      	ldr	r3, [pc, #156]	; (800f500 <prvHeapInit+0xac>)
 800f462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f003 0307 	and.w	r3, r3, #7
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00c      	beq.n	800f488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3307      	adds	r3, #7
 800f472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f023 0307 	bic.w	r3, r3, #7
 800f47a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	4a1f      	ldr	r2, [pc, #124]	; (800f500 <prvHeapInit+0xac>)
 800f484:	4413      	add	r3, r2
 800f486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f48c:	4a1d      	ldr	r2, [pc, #116]	; (800f504 <prvHeapInit+0xb0>)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f492:	4b1c      	ldr	r3, [pc, #112]	; (800f504 <prvHeapInit+0xb0>)
 800f494:	2200      	movs	r2, #0
 800f496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	68ba      	ldr	r2, [r7, #8]
 800f49c:	4413      	add	r3, r2
 800f49e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f4a0:	2208      	movs	r2, #8
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	1a9b      	subs	r3, r3, r2
 800f4a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f023 0307 	bic.w	r3, r3, #7
 800f4ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	4a15      	ldr	r2, [pc, #84]	; (800f508 <prvHeapInit+0xb4>)
 800f4b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f4b6:	4b14      	ldr	r3, [pc, #80]	; (800f508 <prvHeapInit+0xb4>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f4be:	4b12      	ldr	r3, [pc, #72]	; (800f508 <prvHeapInit+0xb4>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	1ad2      	subs	r2, r2, r3
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f4d4:	4b0c      	ldr	r3, [pc, #48]	; (800f508 <prvHeapInit+0xb4>)
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	4a0a      	ldr	r2, [pc, #40]	; (800f50c <prvHeapInit+0xb8>)
 800f4e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	4a09      	ldr	r2, [pc, #36]	; (800f510 <prvHeapInit+0xbc>)
 800f4ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f4ec:	4b09      	ldr	r3, [pc, #36]	; (800f514 <prvHeapInit+0xc0>)
 800f4ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f4f2:	601a      	str	r2, [r3, #0]
}
 800f4f4:	bf00      	nop
 800f4f6:	3714      	adds	r7, #20
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr
 800f500:	20000e04 	.word	0x20000e04
 800f504:	20004a04 	.word	0x20004a04
 800f508:	20004a0c 	.word	0x20004a0c
 800f50c:	20004a14 	.word	0x20004a14
 800f510:	20004a10 	.word	0x20004a10
 800f514:	20004a18 	.word	0x20004a18

0800f518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f518:	b480      	push	{r7}
 800f51a:	b085      	sub	sp, #20
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f520:	4b28      	ldr	r3, [pc, #160]	; (800f5c4 <prvInsertBlockIntoFreeList+0xac>)
 800f522:	60fb      	str	r3, [r7, #12]
 800f524:	e002      	b.n	800f52c <prvInsertBlockIntoFreeList+0x14>
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	60fb      	str	r3, [r7, #12]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	429a      	cmp	r2, r3
 800f534:	d8f7      	bhi.n	800f526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	68ba      	ldr	r2, [r7, #8]
 800f540:	4413      	add	r3, r2
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	429a      	cmp	r2, r3
 800f546:	d108      	bne.n	800f55a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	685a      	ldr	r2, [r3, #4]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	441a      	add	r2, r3
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	68ba      	ldr	r2, [r7, #8]
 800f564:	441a      	add	r2, r3
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d118      	bne.n	800f5a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	4b15      	ldr	r3, [pc, #84]	; (800f5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	429a      	cmp	r2, r3
 800f578:	d00d      	beq.n	800f596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	441a      	add	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	e008      	b.n	800f5a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f596:	4b0c      	ldr	r3, [pc, #48]	; (800f5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	601a      	str	r2, [r3, #0]
 800f59e:	e003      	b.n	800f5a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d002      	beq.n	800f5b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5b6:	bf00      	nop
 800f5b8:	3714      	adds	r7, #20
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	20004a04 	.word	0x20004a04
 800f5c8:	20004a0c 	.word	0x20004a0c

0800f5cc <__cvt>:
 800f5cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5d0:	ec55 4b10 	vmov	r4, r5, d0
 800f5d4:	2d00      	cmp	r5, #0
 800f5d6:	460e      	mov	r6, r1
 800f5d8:	4619      	mov	r1, r3
 800f5da:	462b      	mov	r3, r5
 800f5dc:	bfbb      	ittet	lt
 800f5de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f5e2:	461d      	movlt	r5, r3
 800f5e4:	2300      	movge	r3, #0
 800f5e6:	232d      	movlt	r3, #45	; 0x2d
 800f5e8:	700b      	strb	r3, [r1, #0]
 800f5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f5f0:	4691      	mov	r9, r2
 800f5f2:	f023 0820 	bic.w	r8, r3, #32
 800f5f6:	bfbc      	itt	lt
 800f5f8:	4622      	movlt	r2, r4
 800f5fa:	4614      	movlt	r4, r2
 800f5fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f600:	d005      	beq.n	800f60e <__cvt+0x42>
 800f602:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f606:	d100      	bne.n	800f60a <__cvt+0x3e>
 800f608:	3601      	adds	r6, #1
 800f60a:	2102      	movs	r1, #2
 800f60c:	e000      	b.n	800f610 <__cvt+0x44>
 800f60e:	2103      	movs	r1, #3
 800f610:	ab03      	add	r3, sp, #12
 800f612:	9301      	str	r3, [sp, #4]
 800f614:	ab02      	add	r3, sp, #8
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	ec45 4b10 	vmov	d0, r4, r5
 800f61c:	4653      	mov	r3, sl
 800f61e:	4632      	mov	r2, r6
 800f620:	f001 f922 	bl	8010868 <_dtoa_r>
 800f624:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f628:	4607      	mov	r7, r0
 800f62a:	d102      	bne.n	800f632 <__cvt+0x66>
 800f62c:	f019 0f01 	tst.w	r9, #1
 800f630:	d022      	beq.n	800f678 <__cvt+0xac>
 800f632:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f636:	eb07 0906 	add.w	r9, r7, r6
 800f63a:	d110      	bne.n	800f65e <__cvt+0x92>
 800f63c:	783b      	ldrb	r3, [r7, #0]
 800f63e:	2b30      	cmp	r3, #48	; 0x30
 800f640:	d10a      	bne.n	800f658 <__cvt+0x8c>
 800f642:	2200      	movs	r2, #0
 800f644:	2300      	movs	r3, #0
 800f646:	4620      	mov	r0, r4
 800f648:	4629      	mov	r1, r5
 800f64a:	f7f1 fa65 	bl	8000b18 <__aeabi_dcmpeq>
 800f64e:	b918      	cbnz	r0, 800f658 <__cvt+0x8c>
 800f650:	f1c6 0601 	rsb	r6, r6, #1
 800f654:	f8ca 6000 	str.w	r6, [sl]
 800f658:	f8da 3000 	ldr.w	r3, [sl]
 800f65c:	4499      	add	r9, r3
 800f65e:	2200      	movs	r2, #0
 800f660:	2300      	movs	r3, #0
 800f662:	4620      	mov	r0, r4
 800f664:	4629      	mov	r1, r5
 800f666:	f7f1 fa57 	bl	8000b18 <__aeabi_dcmpeq>
 800f66a:	b108      	cbz	r0, 800f670 <__cvt+0xa4>
 800f66c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f670:	2230      	movs	r2, #48	; 0x30
 800f672:	9b03      	ldr	r3, [sp, #12]
 800f674:	454b      	cmp	r3, r9
 800f676:	d307      	bcc.n	800f688 <__cvt+0xbc>
 800f678:	9b03      	ldr	r3, [sp, #12]
 800f67a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f67c:	1bdb      	subs	r3, r3, r7
 800f67e:	4638      	mov	r0, r7
 800f680:	6013      	str	r3, [r2, #0]
 800f682:	b004      	add	sp, #16
 800f684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f688:	1c59      	adds	r1, r3, #1
 800f68a:	9103      	str	r1, [sp, #12]
 800f68c:	701a      	strb	r2, [r3, #0]
 800f68e:	e7f0      	b.n	800f672 <__cvt+0xa6>

0800f690 <__exponent>:
 800f690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f692:	4603      	mov	r3, r0
 800f694:	2900      	cmp	r1, #0
 800f696:	bfb8      	it	lt
 800f698:	4249      	neglt	r1, r1
 800f69a:	f803 2b02 	strb.w	r2, [r3], #2
 800f69e:	bfb4      	ite	lt
 800f6a0:	222d      	movlt	r2, #45	; 0x2d
 800f6a2:	222b      	movge	r2, #43	; 0x2b
 800f6a4:	2909      	cmp	r1, #9
 800f6a6:	7042      	strb	r2, [r0, #1]
 800f6a8:	dd2a      	ble.n	800f700 <__exponent+0x70>
 800f6aa:	f10d 0207 	add.w	r2, sp, #7
 800f6ae:	4617      	mov	r7, r2
 800f6b0:	260a      	movs	r6, #10
 800f6b2:	4694      	mov	ip, r2
 800f6b4:	fb91 f5f6 	sdiv	r5, r1, r6
 800f6b8:	fb06 1415 	mls	r4, r6, r5, r1
 800f6bc:	3430      	adds	r4, #48	; 0x30
 800f6be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	2c63      	cmp	r4, #99	; 0x63
 800f6c6:	f102 32ff 	add.w	r2, r2, #4294967295
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	dcf1      	bgt.n	800f6b2 <__exponent+0x22>
 800f6ce:	3130      	adds	r1, #48	; 0x30
 800f6d0:	f1ac 0402 	sub.w	r4, ip, #2
 800f6d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f6d8:	1c41      	adds	r1, r0, #1
 800f6da:	4622      	mov	r2, r4
 800f6dc:	42ba      	cmp	r2, r7
 800f6de:	d30a      	bcc.n	800f6f6 <__exponent+0x66>
 800f6e0:	f10d 0209 	add.w	r2, sp, #9
 800f6e4:	eba2 020c 	sub.w	r2, r2, ip
 800f6e8:	42bc      	cmp	r4, r7
 800f6ea:	bf88      	it	hi
 800f6ec:	2200      	movhi	r2, #0
 800f6ee:	4413      	add	r3, r2
 800f6f0:	1a18      	subs	r0, r3, r0
 800f6f2:	b003      	add	sp, #12
 800f6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f6fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f6fe:	e7ed      	b.n	800f6dc <__exponent+0x4c>
 800f700:	2330      	movs	r3, #48	; 0x30
 800f702:	3130      	adds	r1, #48	; 0x30
 800f704:	7083      	strb	r3, [r0, #2]
 800f706:	70c1      	strb	r1, [r0, #3]
 800f708:	1d03      	adds	r3, r0, #4
 800f70a:	e7f1      	b.n	800f6f0 <__exponent+0x60>

0800f70c <_printf_float>:
 800f70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f710:	ed2d 8b02 	vpush	{d8}
 800f714:	b08d      	sub	sp, #52	; 0x34
 800f716:	460c      	mov	r4, r1
 800f718:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f71c:	4616      	mov	r6, r2
 800f71e:	461f      	mov	r7, r3
 800f720:	4605      	mov	r5, r0
 800f722:	f000 ff37 	bl	8010594 <_localeconv_r>
 800f726:	f8d0 a000 	ldr.w	sl, [r0]
 800f72a:	4650      	mov	r0, sl
 800f72c:	f7f0 fdc8 	bl	80002c0 <strlen>
 800f730:	2300      	movs	r3, #0
 800f732:	930a      	str	r3, [sp, #40]	; 0x28
 800f734:	6823      	ldr	r3, [r4, #0]
 800f736:	9305      	str	r3, [sp, #20]
 800f738:	f8d8 3000 	ldr.w	r3, [r8]
 800f73c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f740:	3307      	adds	r3, #7
 800f742:	f023 0307 	bic.w	r3, r3, #7
 800f746:	f103 0208 	add.w	r2, r3, #8
 800f74a:	f8c8 2000 	str.w	r2, [r8]
 800f74e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f756:	9307      	str	r3, [sp, #28]
 800f758:	f8cd 8018 	str.w	r8, [sp, #24]
 800f75c:	ee08 0a10 	vmov	s16, r0
 800f760:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f768:	4b9e      	ldr	r3, [pc, #632]	; (800f9e4 <_printf_float+0x2d8>)
 800f76a:	f04f 32ff 	mov.w	r2, #4294967295
 800f76e:	f7f1 fa05 	bl	8000b7c <__aeabi_dcmpun>
 800f772:	bb88      	cbnz	r0, 800f7d8 <_printf_float+0xcc>
 800f774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f778:	4b9a      	ldr	r3, [pc, #616]	; (800f9e4 <_printf_float+0x2d8>)
 800f77a:	f04f 32ff 	mov.w	r2, #4294967295
 800f77e:	f7f1 f9df 	bl	8000b40 <__aeabi_dcmple>
 800f782:	bb48      	cbnz	r0, 800f7d8 <_printf_float+0xcc>
 800f784:	2200      	movs	r2, #0
 800f786:	2300      	movs	r3, #0
 800f788:	4640      	mov	r0, r8
 800f78a:	4649      	mov	r1, r9
 800f78c:	f7f1 f9ce 	bl	8000b2c <__aeabi_dcmplt>
 800f790:	b110      	cbz	r0, 800f798 <_printf_float+0x8c>
 800f792:	232d      	movs	r3, #45	; 0x2d
 800f794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f798:	4a93      	ldr	r2, [pc, #588]	; (800f9e8 <_printf_float+0x2dc>)
 800f79a:	4b94      	ldr	r3, [pc, #592]	; (800f9ec <_printf_float+0x2e0>)
 800f79c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f7a0:	bf94      	ite	ls
 800f7a2:	4690      	movls	r8, r2
 800f7a4:	4698      	movhi	r8, r3
 800f7a6:	2303      	movs	r3, #3
 800f7a8:	6123      	str	r3, [r4, #16]
 800f7aa:	9b05      	ldr	r3, [sp, #20]
 800f7ac:	f023 0304 	bic.w	r3, r3, #4
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	f04f 0900 	mov.w	r9, #0
 800f7b6:	9700      	str	r7, [sp, #0]
 800f7b8:	4633      	mov	r3, r6
 800f7ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800f7bc:	4621      	mov	r1, r4
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f000 f9da 	bl	800fb78 <_printf_common>
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	f040 8090 	bne.w	800f8ea <_printf_float+0x1de>
 800f7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ce:	b00d      	add	sp, #52	; 0x34
 800f7d0:	ecbd 8b02 	vpop	{d8}
 800f7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d8:	4642      	mov	r2, r8
 800f7da:	464b      	mov	r3, r9
 800f7dc:	4640      	mov	r0, r8
 800f7de:	4649      	mov	r1, r9
 800f7e0:	f7f1 f9cc 	bl	8000b7c <__aeabi_dcmpun>
 800f7e4:	b140      	cbz	r0, 800f7f8 <_printf_float+0xec>
 800f7e6:	464b      	mov	r3, r9
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	bfbc      	itt	lt
 800f7ec:	232d      	movlt	r3, #45	; 0x2d
 800f7ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f7f2:	4a7f      	ldr	r2, [pc, #508]	; (800f9f0 <_printf_float+0x2e4>)
 800f7f4:	4b7f      	ldr	r3, [pc, #508]	; (800f9f4 <_printf_float+0x2e8>)
 800f7f6:	e7d1      	b.n	800f79c <_printf_float+0x90>
 800f7f8:	6863      	ldr	r3, [r4, #4]
 800f7fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f7fe:	9206      	str	r2, [sp, #24]
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	d13f      	bne.n	800f884 <_printf_float+0x178>
 800f804:	2306      	movs	r3, #6
 800f806:	6063      	str	r3, [r4, #4]
 800f808:	9b05      	ldr	r3, [sp, #20]
 800f80a:	6861      	ldr	r1, [r4, #4]
 800f80c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f810:	2300      	movs	r3, #0
 800f812:	9303      	str	r3, [sp, #12]
 800f814:	ab0a      	add	r3, sp, #40	; 0x28
 800f816:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f81a:	ab09      	add	r3, sp, #36	; 0x24
 800f81c:	ec49 8b10 	vmov	d0, r8, r9
 800f820:	9300      	str	r3, [sp, #0]
 800f822:	6022      	str	r2, [r4, #0]
 800f824:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f828:	4628      	mov	r0, r5
 800f82a:	f7ff fecf 	bl	800f5cc <__cvt>
 800f82e:	9b06      	ldr	r3, [sp, #24]
 800f830:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f832:	2b47      	cmp	r3, #71	; 0x47
 800f834:	4680      	mov	r8, r0
 800f836:	d108      	bne.n	800f84a <_printf_float+0x13e>
 800f838:	1cc8      	adds	r0, r1, #3
 800f83a:	db02      	blt.n	800f842 <_printf_float+0x136>
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	4299      	cmp	r1, r3
 800f840:	dd41      	ble.n	800f8c6 <_printf_float+0x1ba>
 800f842:	f1ab 0302 	sub.w	r3, fp, #2
 800f846:	fa5f fb83 	uxtb.w	fp, r3
 800f84a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f84e:	d820      	bhi.n	800f892 <_printf_float+0x186>
 800f850:	3901      	subs	r1, #1
 800f852:	465a      	mov	r2, fp
 800f854:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f858:	9109      	str	r1, [sp, #36]	; 0x24
 800f85a:	f7ff ff19 	bl	800f690 <__exponent>
 800f85e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f860:	1813      	adds	r3, r2, r0
 800f862:	2a01      	cmp	r2, #1
 800f864:	4681      	mov	r9, r0
 800f866:	6123      	str	r3, [r4, #16]
 800f868:	dc02      	bgt.n	800f870 <_printf_float+0x164>
 800f86a:	6822      	ldr	r2, [r4, #0]
 800f86c:	07d2      	lsls	r2, r2, #31
 800f86e:	d501      	bpl.n	800f874 <_printf_float+0x168>
 800f870:	3301      	adds	r3, #1
 800f872:	6123      	str	r3, [r4, #16]
 800f874:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d09c      	beq.n	800f7b6 <_printf_float+0xaa>
 800f87c:	232d      	movs	r3, #45	; 0x2d
 800f87e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f882:	e798      	b.n	800f7b6 <_printf_float+0xaa>
 800f884:	9a06      	ldr	r2, [sp, #24]
 800f886:	2a47      	cmp	r2, #71	; 0x47
 800f888:	d1be      	bne.n	800f808 <_printf_float+0xfc>
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1bc      	bne.n	800f808 <_printf_float+0xfc>
 800f88e:	2301      	movs	r3, #1
 800f890:	e7b9      	b.n	800f806 <_printf_float+0xfa>
 800f892:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f896:	d118      	bne.n	800f8ca <_printf_float+0x1be>
 800f898:	2900      	cmp	r1, #0
 800f89a:	6863      	ldr	r3, [r4, #4]
 800f89c:	dd0b      	ble.n	800f8b6 <_printf_float+0x1aa>
 800f89e:	6121      	str	r1, [r4, #16]
 800f8a0:	b913      	cbnz	r3, 800f8a8 <_printf_float+0x19c>
 800f8a2:	6822      	ldr	r2, [r4, #0]
 800f8a4:	07d0      	lsls	r0, r2, #31
 800f8a6:	d502      	bpl.n	800f8ae <_printf_float+0x1a2>
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	440b      	add	r3, r1
 800f8ac:	6123      	str	r3, [r4, #16]
 800f8ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800f8b0:	f04f 0900 	mov.w	r9, #0
 800f8b4:	e7de      	b.n	800f874 <_printf_float+0x168>
 800f8b6:	b913      	cbnz	r3, 800f8be <_printf_float+0x1b2>
 800f8b8:	6822      	ldr	r2, [r4, #0]
 800f8ba:	07d2      	lsls	r2, r2, #31
 800f8bc:	d501      	bpl.n	800f8c2 <_printf_float+0x1b6>
 800f8be:	3302      	adds	r3, #2
 800f8c0:	e7f4      	b.n	800f8ac <_printf_float+0x1a0>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e7f2      	b.n	800f8ac <_printf_float+0x1a0>
 800f8c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8cc:	4299      	cmp	r1, r3
 800f8ce:	db05      	blt.n	800f8dc <_printf_float+0x1d0>
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	6121      	str	r1, [r4, #16]
 800f8d4:	07d8      	lsls	r0, r3, #31
 800f8d6:	d5ea      	bpl.n	800f8ae <_printf_float+0x1a2>
 800f8d8:	1c4b      	adds	r3, r1, #1
 800f8da:	e7e7      	b.n	800f8ac <_printf_float+0x1a0>
 800f8dc:	2900      	cmp	r1, #0
 800f8de:	bfd4      	ite	le
 800f8e0:	f1c1 0202 	rsble	r2, r1, #2
 800f8e4:	2201      	movgt	r2, #1
 800f8e6:	4413      	add	r3, r2
 800f8e8:	e7e0      	b.n	800f8ac <_printf_float+0x1a0>
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	055a      	lsls	r2, r3, #21
 800f8ee:	d407      	bmi.n	800f900 <_printf_float+0x1f4>
 800f8f0:	6923      	ldr	r3, [r4, #16]
 800f8f2:	4642      	mov	r2, r8
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	47b8      	blx	r7
 800f8fa:	3001      	adds	r0, #1
 800f8fc:	d12c      	bne.n	800f958 <_printf_float+0x24c>
 800f8fe:	e764      	b.n	800f7ca <_printf_float+0xbe>
 800f900:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f904:	f240 80e0 	bls.w	800fac8 <_printf_float+0x3bc>
 800f908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f90c:	2200      	movs	r2, #0
 800f90e:	2300      	movs	r3, #0
 800f910:	f7f1 f902 	bl	8000b18 <__aeabi_dcmpeq>
 800f914:	2800      	cmp	r0, #0
 800f916:	d034      	beq.n	800f982 <_printf_float+0x276>
 800f918:	4a37      	ldr	r2, [pc, #220]	; (800f9f8 <_printf_float+0x2ec>)
 800f91a:	2301      	movs	r3, #1
 800f91c:	4631      	mov	r1, r6
 800f91e:	4628      	mov	r0, r5
 800f920:	47b8      	blx	r7
 800f922:	3001      	adds	r0, #1
 800f924:	f43f af51 	beq.w	800f7ca <_printf_float+0xbe>
 800f928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f92c:	429a      	cmp	r2, r3
 800f92e:	db02      	blt.n	800f936 <_printf_float+0x22a>
 800f930:	6823      	ldr	r3, [r4, #0]
 800f932:	07d8      	lsls	r0, r3, #31
 800f934:	d510      	bpl.n	800f958 <_printf_float+0x24c>
 800f936:	ee18 3a10 	vmov	r3, s16
 800f93a:	4652      	mov	r2, sl
 800f93c:	4631      	mov	r1, r6
 800f93e:	4628      	mov	r0, r5
 800f940:	47b8      	blx	r7
 800f942:	3001      	adds	r0, #1
 800f944:	f43f af41 	beq.w	800f7ca <_printf_float+0xbe>
 800f948:	f04f 0800 	mov.w	r8, #0
 800f94c:	f104 091a 	add.w	r9, r4, #26
 800f950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f952:	3b01      	subs	r3, #1
 800f954:	4543      	cmp	r3, r8
 800f956:	dc09      	bgt.n	800f96c <_printf_float+0x260>
 800f958:	6823      	ldr	r3, [r4, #0]
 800f95a:	079b      	lsls	r3, r3, #30
 800f95c:	f100 8107 	bmi.w	800fb6e <_printf_float+0x462>
 800f960:	68e0      	ldr	r0, [r4, #12]
 800f962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f964:	4298      	cmp	r0, r3
 800f966:	bfb8      	it	lt
 800f968:	4618      	movlt	r0, r3
 800f96a:	e730      	b.n	800f7ce <_printf_float+0xc2>
 800f96c:	2301      	movs	r3, #1
 800f96e:	464a      	mov	r2, r9
 800f970:	4631      	mov	r1, r6
 800f972:	4628      	mov	r0, r5
 800f974:	47b8      	blx	r7
 800f976:	3001      	adds	r0, #1
 800f978:	f43f af27 	beq.w	800f7ca <_printf_float+0xbe>
 800f97c:	f108 0801 	add.w	r8, r8, #1
 800f980:	e7e6      	b.n	800f950 <_printf_float+0x244>
 800f982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f984:	2b00      	cmp	r3, #0
 800f986:	dc39      	bgt.n	800f9fc <_printf_float+0x2f0>
 800f988:	4a1b      	ldr	r2, [pc, #108]	; (800f9f8 <_printf_float+0x2ec>)
 800f98a:	2301      	movs	r3, #1
 800f98c:	4631      	mov	r1, r6
 800f98e:	4628      	mov	r0, r5
 800f990:	47b8      	blx	r7
 800f992:	3001      	adds	r0, #1
 800f994:	f43f af19 	beq.w	800f7ca <_printf_float+0xbe>
 800f998:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f99c:	4313      	orrs	r3, r2
 800f99e:	d102      	bne.n	800f9a6 <_printf_float+0x29a>
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	07d9      	lsls	r1, r3, #31
 800f9a4:	d5d8      	bpl.n	800f958 <_printf_float+0x24c>
 800f9a6:	ee18 3a10 	vmov	r3, s16
 800f9aa:	4652      	mov	r2, sl
 800f9ac:	4631      	mov	r1, r6
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	47b8      	blx	r7
 800f9b2:	3001      	adds	r0, #1
 800f9b4:	f43f af09 	beq.w	800f7ca <_printf_float+0xbe>
 800f9b8:	f04f 0900 	mov.w	r9, #0
 800f9bc:	f104 0a1a 	add.w	sl, r4, #26
 800f9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9c2:	425b      	negs	r3, r3
 800f9c4:	454b      	cmp	r3, r9
 800f9c6:	dc01      	bgt.n	800f9cc <_printf_float+0x2c0>
 800f9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9ca:	e792      	b.n	800f8f2 <_printf_float+0x1e6>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	4652      	mov	r2, sl
 800f9d0:	4631      	mov	r1, r6
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	47b8      	blx	r7
 800f9d6:	3001      	adds	r0, #1
 800f9d8:	f43f aef7 	beq.w	800f7ca <_printf_float+0xbe>
 800f9dc:	f109 0901 	add.w	r9, r9, #1
 800f9e0:	e7ee      	b.n	800f9c0 <_printf_float+0x2b4>
 800f9e2:	bf00      	nop
 800f9e4:	7fefffff 	.word	0x7fefffff
 800f9e8:	08015d14 	.word	0x08015d14
 800f9ec:	08015d18 	.word	0x08015d18
 800f9f0:	08015d1c 	.word	0x08015d1c
 800f9f4:	08015d20 	.word	0x08015d20
 800f9f8:	080160b0 	.word	0x080160b0
 800f9fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa00:	429a      	cmp	r2, r3
 800fa02:	bfa8      	it	ge
 800fa04:	461a      	movge	r2, r3
 800fa06:	2a00      	cmp	r2, #0
 800fa08:	4691      	mov	r9, r2
 800fa0a:	dc37      	bgt.n	800fa7c <_printf_float+0x370>
 800fa0c:	f04f 0b00 	mov.w	fp, #0
 800fa10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa14:	f104 021a 	add.w	r2, r4, #26
 800fa18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa1a:	9305      	str	r3, [sp, #20]
 800fa1c:	eba3 0309 	sub.w	r3, r3, r9
 800fa20:	455b      	cmp	r3, fp
 800fa22:	dc33      	bgt.n	800fa8c <_printf_float+0x380>
 800fa24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	db3b      	blt.n	800faa4 <_printf_float+0x398>
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	07da      	lsls	r2, r3, #31
 800fa30:	d438      	bmi.n	800faa4 <_printf_float+0x398>
 800fa32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fa36:	eba2 0903 	sub.w	r9, r2, r3
 800fa3a:	9b05      	ldr	r3, [sp, #20]
 800fa3c:	1ad2      	subs	r2, r2, r3
 800fa3e:	4591      	cmp	r9, r2
 800fa40:	bfa8      	it	ge
 800fa42:	4691      	movge	r9, r2
 800fa44:	f1b9 0f00 	cmp.w	r9, #0
 800fa48:	dc35      	bgt.n	800fab6 <_printf_float+0x3aa>
 800fa4a:	f04f 0800 	mov.w	r8, #0
 800fa4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa52:	f104 0a1a 	add.w	sl, r4, #26
 800fa56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa5a:	1a9b      	subs	r3, r3, r2
 800fa5c:	eba3 0309 	sub.w	r3, r3, r9
 800fa60:	4543      	cmp	r3, r8
 800fa62:	f77f af79 	ble.w	800f958 <_printf_float+0x24c>
 800fa66:	2301      	movs	r3, #1
 800fa68:	4652      	mov	r2, sl
 800fa6a:	4631      	mov	r1, r6
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	47b8      	blx	r7
 800fa70:	3001      	adds	r0, #1
 800fa72:	f43f aeaa 	beq.w	800f7ca <_printf_float+0xbe>
 800fa76:	f108 0801 	add.w	r8, r8, #1
 800fa7a:	e7ec      	b.n	800fa56 <_printf_float+0x34a>
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	4631      	mov	r1, r6
 800fa80:	4642      	mov	r2, r8
 800fa82:	4628      	mov	r0, r5
 800fa84:	47b8      	blx	r7
 800fa86:	3001      	adds	r0, #1
 800fa88:	d1c0      	bne.n	800fa0c <_printf_float+0x300>
 800fa8a:	e69e      	b.n	800f7ca <_printf_float+0xbe>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	4631      	mov	r1, r6
 800fa90:	4628      	mov	r0, r5
 800fa92:	9205      	str	r2, [sp, #20]
 800fa94:	47b8      	blx	r7
 800fa96:	3001      	adds	r0, #1
 800fa98:	f43f ae97 	beq.w	800f7ca <_printf_float+0xbe>
 800fa9c:	9a05      	ldr	r2, [sp, #20]
 800fa9e:	f10b 0b01 	add.w	fp, fp, #1
 800faa2:	e7b9      	b.n	800fa18 <_printf_float+0x30c>
 800faa4:	ee18 3a10 	vmov	r3, s16
 800faa8:	4652      	mov	r2, sl
 800faaa:	4631      	mov	r1, r6
 800faac:	4628      	mov	r0, r5
 800faae:	47b8      	blx	r7
 800fab0:	3001      	adds	r0, #1
 800fab2:	d1be      	bne.n	800fa32 <_printf_float+0x326>
 800fab4:	e689      	b.n	800f7ca <_printf_float+0xbe>
 800fab6:	9a05      	ldr	r2, [sp, #20]
 800fab8:	464b      	mov	r3, r9
 800faba:	4442      	add	r2, r8
 800fabc:	4631      	mov	r1, r6
 800fabe:	4628      	mov	r0, r5
 800fac0:	47b8      	blx	r7
 800fac2:	3001      	adds	r0, #1
 800fac4:	d1c1      	bne.n	800fa4a <_printf_float+0x33e>
 800fac6:	e680      	b.n	800f7ca <_printf_float+0xbe>
 800fac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800faca:	2a01      	cmp	r2, #1
 800facc:	dc01      	bgt.n	800fad2 <_printf_float+0x3c6>
 800face:	07db      	lsls	r3, r3, #31
 800fad0:	d53a      	bpl.n	800fb48 <_printf_float+0x43c>
 800fad2:	2301      	movs	r3, #1
 800fad4:	4642      	mov	r2, r8
 800fad6:	4631      	mov	r1, r6
 800fad8:	4628      	mov	r0, r5
 800fada:	47b8      	blx	r7
 800fadc:	3001      	adds	r0, #1
 800fade:	f43f ae74 	beq.w	800f7ca <_printf_float+0xbe>
 800fae2:	ee18 3a10 	vmov	r3, s16
 800fae6:	4652      	mov	r2, sl
 800fae8:	4631      	mov	r1, r6
 800faea:	4628      	mov	r0, r5
 800faec:	47b8      	blx	r7
 800faee:	3001      	adds	r0, #1
 800faf0:	f43f ae6b 	beq.w	800f7ca <_printf_float+0xbe>
 800faf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800faf8:	2200      	movs	r2, #0
 800fafa:	2300      	movs	r3, #0
 800fafc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fb00:	f7f1 f80a 	bl	8000b18 <__aeabi_dcmpeq>
 800fb04:	b9d8      	cbnz	r0, 800fb3e <_printf_float+0x432>
 800fb06:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fb0a:	f108 0201 	add.w	r2, r8, #1
 800fb0e:	4631      	mov	r1, r6
 800fb10:	4628      	mov	r0, r5
 800fb12:	47b8      	blx	r7
 800fb14:	3001      	adds	r0, #1
 800fb16:	d10e      	bne.n	800fb36 <_printf_float+0x42a>
 800fb18:	e657      	b.n	800f7ca <_printf_float+0xbe>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	4652      	mov	r2, sl
 800fb1e:	4631      	mov	r1, r6
 800fb20:	4628      	mov	r0, r5
 800fb22:	47b8      	blx	r7
 800fb24:	3001      	adds	r0, #1
 800fb26:	f43f ae50 	beq.w	800f7ca <_printf_float+0xbe>
 800fb2a:	f108 0801 	add.w	r8, r8, #1
 800fb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb30:	3b01      	subs	r3, #1
 800fb32:	4543      	cmp	r3, r8
 800fb34:	dcf1      	bgt.n	800fb1a <_printf_float+0x40e>
 800fb36:	464b      	mov	r3, r9
 800fb38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fb3c:	e6da      	b.n	800f8f4 <_printf_float+0x1e8>
 800fb3e:	f04f 0800 	mov.w	r8, #0
 800fb42:	f104 0a1a 	add.w	sl, r4, #26
 800fb46:	e7f2      	b.n	800fb2e <_printf_float+0x422>
 800fb48:	2301      	movs	r3, #1
 800fb4a:	4642      	mov	r2, r8
 800fb4c:	e7df      	b.n	800fb0e <_printf_float+0x402>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	464a      	mov	r2, r9
 800fb52:	4631      	mov	r1, r6
 800fb54:	4628      	mov	r0, r5
 800fb56:	47b8      	blx	r7
 800fb58:	3001      	adds	r0, #1
 800fb5a:	f43f ae36 	beq.w	800f7ca <_printf_float+0xbe>
 800fb5e:	f108 0801 	add.w	r8, r8, #1
 800fb62:	68e3      	ldr	r3, [r4, #12]
 800fb64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb66:	1a5b      	subs	r3, r3, r1
 800fb68:	4543      	cmp	r3, r8
 800fb6a:	dcf0      	bgt.n	800fb4e <_printf_float+0x442>
 800fb6c:	e6f8      	b.n	800f960 <_printf_float+0x254>
 800fb6e:	f04f 0800 	mov.w	r8, #0
 800fb72:	f104 0919 	add.w	r9, r4, #25
 800fb76:	e7f4      	b.n	800fb62 <_printf_float+0x456>

0800fb78 <_printf_common>:
 800fb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb7c:	4616      	mov	r6, r2
 800fb7e:	4699      	mov	r9, r3
 800fb80:	688a      	ldr	r2, [r1, #8]
 800fb82:	690b      	ldr	r3, [r1, #16]
 800fb84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	bfb8      	it	lt
 800fb8c:	4613      	movlt	r3, r2
 800fb8e:	6033      	str	r3, [r6, #0]
 800fb90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb94:	4607      	mov	r7, r0
 800fb96:	460c      	mov	r4, r1
 800fb98:	b10a      	cbz	r2, 800fb9e <_printf_common+0x26>
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	6033      	str	r3, [r6, #0]
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	0699      	lsls	r1, r3, #26
 800fba2:	bf42      	ittt	mi
 800fba4:	6833      	ldrmi	r3, [r6, #0]
 800fba6:	3302      	addmi	r3, #2
 800fba8:	6033      	strmi	r3, [r6, #0]
 800fbaa:	6825      	ldr	r5, [r4, #0]
 800fbac:	f015 0506 	ands.w	r5, r5, #6
 800fbb0:	d106      	bne.n	800fbc0 <_printf_common+0x48>
 800fbb2:	f104 0a19 	add.w	sl, r4, #25
 800fbb6:	68e3      	ldr	r3, [r4, #12]
 800fbb8:	6832      	ldr	r2, [r6, #0]
 800fbba:	1a9b      	subs	r3, r3, r2
 800fbbc:	42ab      	cmp	r3, r5
 800fbbe:	dc26      	bgt.n	800fc0e <_printf_common+0x96>
 800fbc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fbc4:	1e13      	subs	r3, r2, #0
 800fbc6:	6822      	ldr	r2, [r4, #0]
 800fbc8:	bf18      	it	ne
 800fbca:	2301      	movne	r3, #1
 800fbcc:	0692      	lsls	r2, r2, #26
 800fbce:	d42b      	bmi.n	800fc28 <_printf_common+0xb0>
 800fbd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbd4:	4649      	mov	r1, r9
 800fbd6:	4638      	mov	r0, r7
 800fbd8:	47c0      	blx	r8
 800fbda:	3001      	adds	r0, #1
 800fbdc:	d01e      	beq.n	800fc1c <_printf_common+0xa4>
 800fbde:	6823      	ldr	r3, [r4, #0]
 800fbe0:	6922      	ldr	r2, [r4, #16]
 800fbe2:	f003 0306 	and.w	r3, r3, #6
 800fbe6:	2b04      	cmp	r3, #4
 800fbe8:	bf02      	ittt	eq
 800fbea:	68e5      	ldreq	r5, [r4, #12]
 800fbec:	6833      	ldreq	r3, [r6, #0]
 800fbee:	1aed      	subeq	r5, r5, r3
 800fbf0:	68a3      	ldr	r3, [r4, #8]
 800fbf2:	bf0c      	ite	eq
 800fbf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbf8:	2500      	movne	r5, #0
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	bfc4      	itt	gt
 800fbfe:	1a9b      	subgt	r3, r3, r2
 800fc00:	18ed      	addgt	r5, r5, r3
 800fc02:	2600      	movs	r6, #0
 800fc04:	341a      	adds	r4, #26
 800fc06:	42b5      	cmp	r5, r6
 800fc08:	d11a      	bne.n	800fc40 <_printf_common+0xc8>
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	e008      	b.n	800fc20 <_printf_common+0xa8>
 800fc0e:	2301      	movs	r3, #1
 800fc10:	4652      	mov	r2, sl
 800fc12:	4649      	mov	r1, r9
 800fc14:	4638      	mov	r0, r7
 800fc16:	47c0      	blx	r8
 800fc18:	3001      	adds	r0, #1
 800fc1a:	d103      	bne.n	800fc24 <_printf_common+0xac>
 800fc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc24:	3501      	adds	r5, #1
 800fc26:	e7c6      	b.n	800fbb6 <_printf_common+0x3e>
 800fc28:	18e1      	adds	r1, r4, r3
 800fc2a:	1c5a      	adds	r2, r3, #1
 800fc2c:	2030      	movs	r0, #48	; 0x30
 800fc2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc32:	4422      	add	r2, r4
 800fc34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc3c:	3302      	adds	r3, #2
 800fc3e:	e7c7      	b.n	800fbd0 <_printf_common+0x58>
 800fc40:	2301      	movs	r3, #1
 800fc42:	4622      	mov	r2, r4
 800fc44:	4649      	mov	r1, r9
 800fc46:	4638      	mov	r0, r7
 800fc48:	47c0      	blx	r8
 800fc4a:	3001      	adds	r0, #1
 800fc4c:	d0e6      	beq.n	800fc1c <_printf_common+0xa4>
 800fc4e:	3601      	adds	r6, #1
 800fc50:	e7d9      	b.n	800fc06 <_printf_common+0x8e>
	...

0800fc54 <_printf_i>:
 800fc54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc58:	7e0f      	ldrb	r7, [r1, #24]
 800fc5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc5c:	2f78      	cmp	r7, #120	; 0x78
 800fc5e:	4691      	mov	r9, r2
 800fc60:	4680      	mov	r8, r0
 800fc62:	460c      	mov	r4, r1
 800fc64:	469a      	mov	sl, r3
 800fc66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc6a:	d807      	bhi.n	800fc7c <_printf_i+0x28>
 800fc6c:	2f62      	cmp	r7, #98	; 0x62
 800fc6e:	d80a      	bhi.n	800fc86 <_printf_i+0x32>
 800fc70:	2f00      	cmp	r7, #0
 800fc72:	f000 80d4 	beq.w	800fe1e <_printf_i+0x1ca>
 800fc76:	2f58      	cmp	r7, #88	; 0x58
 800fc78:	f000 80c0 	beq.w	800fdfc <_printf_i+0x1a8>
 800fc7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc84:	e03a      	b.n	800fcfc <_printf_i+0xa8>
 800fc86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc8a:	2b15      	cmp	r3, #21
 800fc8c:	d8f6      	bhi.n	800fc7c <_printf_i+0x28>
 800fc8e:	a101      	add	r1, pc, #4	; (adr r1, 800fc94 <_printf_i+0x40>)
 800fc90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc94:	0800fced 	.word	0x0800fced
 800fc98:	0800fd01 	.word	0x0800fd01
 800fc9c:	0800fc7d 	.word	0x0800fc7d
 800fca0:	0800fc7d 	.word	0x0800fc7d
 800fca4:	0800fc7d 	.word	0x0800fc7d
 800fca8:	0800fc7d 	.word	0x0800fc7d
 800fcac:	0800fd01 	.word	0x0800fd01
 800fcb0:	0800fc7d 	.word	0x0800fc7d
 800fcb4:	0800fc7d 	.word	0x0800fc7d
 800fcb8:	0800fc7d 	.word	0x0800fc7d
 800fcbc:	0800fc7d 	.word	0x0800fc7d
 800fcc0:	0800fe05 	.word	0x0800fe05
 800fcc4:	0800fd2d 	.word	0x0800fd2d
 800fcc8:	0800fdbf 	.word	0x0800fdbf
 800fccc:	0800fc7d 	.word	0x0800fc7d
 800fcd0:	0800fc7d 	.word	0x0800fc7d
 800fcd4:	0800fe27 	.word	0x0800fe27
 800fcd8:	0800fc7d 	.word	0x0800fc7d
 800fcdc:	0800fd2d 	.word	0x0800fd2d
 800fce0:	0800fc7d 	.word	0x0800fc7d
 800fce4:	0800fc7d 	.word	0x0800fc7d
 800fce8:	0800fdc7 	.word	0x0800fdc7
 800fcec:	682b      	ldr	r3, [r5, #0]
 800fcee:	1d1a      	adds	r2, r3, #4
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	602a      	str	r2, [r5, #0]
 800fcf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	e09f      	b.n	800fe40 <_printf_i+0x1ec>
 800fd00:	6820      	ldr	r0, [r4, #0]
 800fd02:	682b      	ldr	r3, [r5, #0]
 800fd04:	0607      	lsls	r7, r0, #24
 800fd06:	f103 0104 	add.w	r1, r3, #4
 800fd0a:	6029      	str	r1, [r5, #0]
 800fd0c:	d501      	bpl.n	800fd12 <_printf_i+0xbe>
 800fd0e:	681e      	ldr	r6, [r3, #0]
 800fd10:	e003      	b.n	800fd1a <_printf_i+0xc6>
 800fd12:	0646      	lsls	r6, r0, #25
 800fd14:	d5fb      	bpl.n	800fd0e <_printf_i+0xba>
 800fd16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fd1a:	2e00      	cmp	r6, #0
 800fd1c:	da03      	bge.n	800fd26 <_printf_i+0xd2>
 800fd1e:	232d      	movs	r3, #45	; 0x2d
 800fd20:	4276      	negs	r6, r6
 800fd22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd26:	485a      	ldr	r0, [pc, #360]	; (800fe90 <_printf_i+0x23c>)
 800fd28:	230a      	movs	r3, #10
 800fd2a:	e012      	b.n	800fd52 <_printf_i+0xfe>
 800fd2c:	682b      	ldr	r3, [r5, #0]
 800fd2e:	6820      	ldr	r0, [r4, #0]
 800fd30:	1d19      	adds	r1, r3, #4
 800fd32:	6029      	str	r1, [r5, #0]
 800fd34:	0605      	lsls	r5, r0, #24
 800fd36:	d501      	bpl.n	800fd3c <_printf_i+0xe8>
 800fd38:	681e      	ldr	r6, [r3, #0]
 800fd3a:	e002      	b.n	800fd42 <_printf_i+0xee>
 800fd3c:	0641      	lsls	r1, r0, #25
 800fd3e:	d5fb      	bpl.n	800fd38 <_printf_i+0xe4>
 800fd40:	881e      	ldrh	r6, [r3, #0]
 800fd42:	4853      	ldr	r0, [pc, #332]	; (800fe90 <_printf_i+0x23c>)
 800fd44:	2f6f      	cmp	r7, #111	; 0x6f
 800fd46:	bf0c      	ite	eq
 800fd48:	2308      	moveq	r3, #8
 800fd4a:	230a      	movne	r3, #10
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd52:	6865      	ldr	r5, [r4, #4]
 800fd54:	60a5      	str	r5, [r4, #8]
 800fd56:	2d00      	cmp	r5, #0
 800fd58:	bfa2      	ittt	ge
 800fd5a:	6821      	ldrge	r1, [r4, #0]
 800fd5c:	f021 0104 	bicge.w	r1, r1, #4
 800fd60:	6021      	strge	r1, [r4, #0]
 800fd62:	b90e      	cbnz	r6, 800fd68 <_printf_i+0x114>
 800fd64:	2d00      	cmp	r5, #0
 800fd66:	d04b      	beq.n	800fe00 <_printf_i+0x1ac>
 800fd68:	4615      	mov	r5, r2
 800fd6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd6e:	fb03 6711 	mls	r7, r3, r1, r6
 800fd72:	5dc7      	ldrb	r7, [r0, r7]
 800fd74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd78:	4637      	mov	r7, r6
 800fd7a:	42bb      	cmp	r3, r7
 800fd7c:	460e      	mov	r6, r1
 800fd7e:	d9f4      	bls.n	800fd6a <_printf_i+0x116>
 800fd80:	2b08      	cmp	r3, #8
 800fd82:	d10b      	bne.n	800fd9c <_printf_i+0x148>
 800fd84:	6823      	ldr	r3, [r4, #0]
 800fd86:	07de      	lsls	r6, r3, #31
 800fd88:	d508      	bpl.n	800fd9c <_printf_i+0x148>
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	6861      	ldr	r1, [r4, #4]
 800fd8e:	4299      	cmp	r1, r3
 800fd90:	bfde      	ittt	le
 800fd92:	2330      	movle	r3, #48	; 0x30
 800fd94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd9c:	1b52      	subs	r2, r2, r5
 800fd9e:	6122      	str	r2, [r4, #16]
 800fda0:	f8cd a000 	str.w	sl, [sp]
 800fda4:	464b      	mov	r3, r9
 800fda6:	aa03      	add	r2, sp, #12
 800fda8:	4621      	mov	r1, r4
 800fdaa:	4640      	mov	r0, r8
 800fdac:	f7ff fee4 	bl	800fb78 <_printf_common>
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	d14a      	bne.n	800fe4a <_printf_i+0x1f6>
 800fdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb8:	b004      	add	sp, #16
 800fdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdbe:	6823      	ldr	r3, [r4, #0]
 800fdc0:	f043 0320 	orr.w	r3, r3, #32
 800fdc4:	6023      	str	r3, [r4, #0]
 800fdc6:	4833      	ldr	r0, [pc, #204]	; (800fe94 <_printf_i+0x240>)
 800fdc8:	2778      	movs	r7, #120	; 0x78
 800fdca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fdce:	6823      	ldr	r3, [r4, #0]
 800fdd0:	6829      	ldr	r1, [r5, #0]
 800fdd2:	061f      	lsls	r7, r3, #24
 800fdd4:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdd8:	d402      	bmi.n	800fde0 <_printf_i+0x18c>
 800fdda:	065f      	lsls	r7, r3, #25
 800fddc:	bf48      	it	mi
 800fdde:	b2b6      	uxthmi	r6, r6
 800fde0:	07df      	lsls	r7, r3, #31
 800fde2:	bf48      	it	mi
 800fde4:	f043 0320 	orrmi.w	r3, r3, #32
 800fde8:	6029      	str	r1, [r5, #0]
 800fdea:	bf48      	it	mi
 800fdec:	6023      	strmi	r3, [r4, #0]
 800fdee:	b91e      	cbnz	r6, 800fdf8 <_printf_i+0x1a4>
 800fdf0:	6823      	ldr	r3, [r4, #0]
 800fdf2:	f023 0320 	bic.w	r3, r3, #32
 800fdf6:	6023      	str	r3, [r4, #0]
 800fdf8:	2310      	movs	r3, #16
 800fdfa:	e7a7      	b.n	800fd4c <_printf_i+0xf8>
 800fdfc:	4824      	ldr	r0, [pc, #144]	; (800fe90 <_printf_i+0x23c>)
 800fdfe:	e7e4      	b.n	800fdca <_printf_i+0x176>
 800fe00:	4615      	mov	r5, r2
 800fe02:	e7bd      	b.n	800fd80 <_printf_i+0x12c>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	6826      	ldr	r6, [r4, #0]
 800fe08:	6961      	ldr	r1, [r4, #20]
 800fe0a:	1d18      	adds	r0, r3, #4
 800fe0c:	6028      	str	r0, [r5, #0]
 800fe0e:	0635      	lsls	r5, r6, #24
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	d501      	bpl.n	800fe18 <_printf_i+0x1c4>
 800fe14:	6019      	str	r1, [r3, #0]
 800fe16:	e002      	b.n	800fe1e <_printf_i+0x1ca>
 800fe18:	0670      	lsls	r0, r6, #25
 800fe1a:	d5fb      	bpl.n	800fe14 <_printf_i+0x1c0>
 800fe1c:	8019      	strh	r1, [r3, #0]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	6123      	str	r3, [r4, #16]
 800fe22:	4615      	mov	r5, r2
 800fe24:	e7bc      	b.n	800fda0 <_printf_i+0x14c>
 800fe26:	682b      	ldr	r3, [r5, #0]
 800fe28:	1d1a      	adds	r2, r3, #4
 800fe2a:	602a      	str	r2, [r5, #0]
 800fe2c:	681d      	ldr	r5, [r3, #0]
 800fe2e:	6862      	ldr	r2, [r4, #4]
 800fe30:	2100      	movs	r1, #0
 800fe32:	4628      	mov	r0, r5
 800fe34:	f7f0 f9f4 	bl	8000220 <memchr>
 800fe38:	b108      	cbz	r0, 800fe3e <_printf_i+0x1ea>
 800fe3a:	1b40      	subs	r0, r0, r5
 800fe3c:	6060      	str	r0, [r4, #4]
 800fe3e:	6863      	ldr	r3, [r4, #4]
 800fe40:	6123      	str	r3, [r4, #16]
 800fe42:	2300      	movs	r3, #0
 800fe44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe48:	e7aa      	b.n	800fda0 <_printf_i+0x14c>
 800fe4a:	6923      	ldr	r3, [r4, #16]
 800fe4c:	462a      	mov	r2, r5
 800fe4e:	4649      	mov	r1, r9
 800fe50:	4640      	mov	r0, r8
 800fe52:	47d0      	blx	sl
 800fe54:	3001      	adds	r0, #1
 800fe56:	d0ad      	beq.n	800fdb4 <_printf_i+0x160>
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	079b      	lsls	r3, r3, #30
 800fe5c:	d413      	bmi.n	800fe86 <_printf_i+0x232>
 800fe5e:	68e0      	ldr	r0, [r4, #12]
 800fe60:	9b03      	ldr	r3, [sp, #12]
 800fe62:	4298      	cmp	r0, r3
 800fe64:	bfb8      	it	lt
 800fe66:	4618      	movlt	r0, r3
 800fe68:	e7a6      	b.n	800fdb8 <_printf_i+0x164>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	4632      	mov	r2, r6
 800fe6e:	4649      	mov	r1, r9
 800fe70:	4640      	mov	r0, r8
 800fe72:	47d0      	blx	sl
 800fe74:	3001      	adds	r0, #1
 800fe76:	d09d      	beq.n	800fdb4 <_printf_i+0x160>
 800fe78:	3501      	adds	r5, #1
 800fe7a:	68e3      	ldr	r3, [r4, #12]
 800fe7c:	9903      	ldr	r1, [sp, #12]
 800fe7e:	1a5b      	subs	r3, r3, r1
 800fe80:	42ab      	cmp	r3, r5
 800fe82:	dcf2      	bgt.n	800fe6a <_printf_i+0x216>
 800fe84:	e7eb      	b.n	800fe5e <_printf_i+0x20a>
 800fe86:	2500      	movs	r5, #0
 800fe88:	f104 0619 	add.w	r6, r4, #25
 800fe8c:	e7f5      	b.n	800fe7a <_printf_i+0x226>
 800fe8e:	bf00      	nop
 800fe90:	08015d24 	.word	0x08015d24
 800fe94:	08015d35 	.word	0x08015d35

0800fe98 <_scanf_float>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	b087      	sub	sp, #28
 800fe9e:	4617      	mov	r7, r2
 800fea0:	9303      	str	r3, [sp, #12]
 800fea2:	688b      	ldr	r3, [r1, #8]
 800fea4:	1e5a      	subs	r2, r3, #1
 800fea6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800feaa:	bf83      	ittte	hi
 800feac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800feb0:	195b      	addhi	r3, r3, r5
 800feb2:	9302      	strhi	r3, [sp, #8]
 800feb4:	2300      	movls	r3, #0
 800feb6:	bf86      	itte	hi
 800feb8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800febc:	608b      	strhi	r3, [r1, #8]
 800febe:	9302      	strls	r3, [sp, #8]
 800fec0:	680b      	ldr	r3, [r1, #0]
 800fec2:	468b      	mov	fp, r1
 800fec4:	2500      	movs	r5, #0
 800fec6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800feca:	f84b 3b1c 	str.w	r3, [fp], #28
 800fece:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fed2:	4680      	mov	r8, r0
 800fed4:	460c      	mov	r4, r1
 800fed6:	465e      	mov	r6, fp
 800fed8:	46aa      	mov	sl, r5
 800feda:	46a9      	mov	r9, r5
 800fedc:	9501      	str	r5, [sp, #4]
 800fede:	68a2      	ldr	r2, [r4, #8]
 800fee0:	b152      	cbz	r2, 800fef8 <_scanf_float+0x60>
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	2b4e      	cmp	r3, #78	; 0x4e
 800fee8:	d864      	bhi.n	800ffb4 <_scanf_float+0x11c>
 800feea:	2b40      	cmp	r3, #64	; 0x40
 800feec:	d83c      	bhi.n	800ff68 <_scanf_float+0xd0>
 800feee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fef2:	b2c8      	uxtb	r0, r1
 800fef4:	280e      	cmp	r0, #14
 800fef6:	d93a      	bls.n	800ff6e <_scanf_float+0xd6>
 800fef8:	f1b9 0f00 	cmp.w	r9, #0
 800fefc:	d003      	beq.n	800ff06 <_scanf_float+0x6e>
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff04:	6023      	str	r3, [r4, #0]
 800ff06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff0a:	f1ba 0f01 	cmp.w	sl, #1
 800ff0e:	f200 8113 	bhi.w	8010138 <_scanf_float+0x2a0>
 800ff12:	455e      	cmp	r6, fp
 800ff14:	f200 8105 	bhi.w	8010122 <_scanf_float+0x28a>
 800ff18:	2501      	movs	r5, #1
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	b007      	add	sp, #28
 800ff1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ff26:	2a0d      	cmp	r2, #13
 800ff28:	d8e6      	bhi.n	800fef8 <_scanf_float+0x60>
 800ff2a:	a101      	add	r1, pc, #4	; (adr r1, 800ff30 <_scanf_float+0x98>)
 800ff2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ff30:	0801006f 	.word	0x0801006f
 800ff34:	0800fef9 	.word	0x0800fef9
 800ff38:	0800fef9 	.word	0x0800fef9
 800ff3c:	0800fef9 	.word	0x0800fef9
 800ff40:	080100cf 	.word	0x080100cf
 800ff44:	080100a7 	.word	0x080100a7
 800ff48:	0800fef9 	.word	0x0800fef9
 800ff4c:	0800fef9 	.word	0x0800fef9
 800ff50:	0801007d 	.word	0x0801007d
 800ff54:	0800fef9 	.word	0x0800fef9
 800ff58:	0800fef9 	.word	0x0800fef9
 800ff5c:	0800fef9 	.word	0x0800fef9
 800ff60:	0800fef9 	.word	0x0800fef9
 800ff64:	08010035 	.word	0x08010035
 800ff68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ff6c:	e7db      	b.n	800ff26 <_scanf_float+0x8e>
 800ff6e:	290e      	cmp	r1, #14
 800ff70:	d8c2      	bhi.n	800fef8 <_scanf_float+0x60>
 800ff72:	a001      	add	r0, pc, #4	; (adr r0, 800ff78 <_scanf_float+0xe0>)
 800ff74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ff78:	08010027 	.word	0x08010027
 800ff7c:	0800fef9 	.word	0x0800fef9
 800ff80:	08010027 	.word	0x08010027
 800ff84:	080100bb 	.word	0x080100bb
 800ff88:	0800fef9 	.word	0x0800fef9
 800ff8c:	0800ffd5 	.word	0x0800ffd5
 800ff90:	08010011 	.word	0x08010011
 800ff94:	08010011 	.word	0x08010011
 800ff98:	08010011 	.word	0x08010011
 800ff9c:	08010011 	.word	0x08010011
 800ffa0:	08010011 	.word	0x08010011
 800ffa4:	08010011 	.word	0x08010011
 800ffa8:	08010011 	.word	0x08010011
 800ffac:	08010011 	.word	0x08010011
 800ffb0:	08010011 	.word	0x08010011
 800ffb4:	2b6e      	cmp	r3, #110	; 0x6e
 800ffb6:	d809      	bhi.n	800ffcc <_scanf_float+0x134>
 800ffb8:	2b60      	cmp	r3, #96	; 0x60
 800ffba:	d8b2      	bhi.n	800ff22 <_scanf_float+0x8a>
 800ffbc:	2b54      	cmp	r3, #84	; 0x54
 800ffbe:	d077      	beq.n	80100b0 <_scanf_float+0x218>
 800ffc0:	2b59      	cmp	r3, #89	; 0x59
 800ffc2:	d199      	bne.n	800fef8 <_scanf_float+0x60>
 800ffc4:	2d07      	cmp	r5, #7
 800ffc6:	d197      	bne.n	800fef8 <_scanf_float+0x60>
 800ffc8:	2508      	movs	r5, #8
 800ffca:	e029      	b.n	8010020 <_scanf_float+0x188>
 800ffcc:	2b74      	cmp	r3, #116	; 0x74
 800ffce:	d06f      	beq.n	80100b0 <_scanf_float+0x218>
 800ffd0:	2b79      	cmp	r3, #121	; 0x79
 800ffd2:	e7f6      	b.n	800ffc2 <_scanf_float+0x12a>
 800ffd4:	6821      	ldr	r1, [r4, #0]
 800ffd6:	05c8      	lsls	r0, r1, #23
 800ffd8:	d51a      	bpl.n	8010010 <_scanf_float+0x178>
 800ffda:	9b02      	ldr	r3, [sp, #8]
 800ffdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ffe0:	6021      	str	r1, [r4, #0]
 800ffe2:	f109 0901 	add.w	r9, r9, #1
 800ffe6:	b11b      	cbz	r3, 800fff0 <_scanf_float+0x158>
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	3201      	adds	r2, #1
 800ffec:	9302      	str	r3, [sp, #8]
 800ffee:	60a2      	str	r2, [r4, #8]
 800fff0:	68a3      	ldr	r3, [r4, #8]
 800fff2:	3b01      	subs	r3, #1
 800fff4:	60a3      	str	r3, [r4, #8]
 800fff6:	6923      	ldr	r3, [r4, #16]
 800fff8:	3301      	adds	r3, #1
 800fffa:	6123      	str	r3, [r4, #16]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	3b01      	subs	r3, #1
 8010000:	2b00      	cmp	r3, #0
 8010002:	607b      	str	r3, [r7, #4]
 8010004:	f340 8084 	ble.w	8010110 <_scanf_float+0x278>
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	3301      	adds	r3, #1
 801000c:	603b      	str	r3, [r7, #0]
 801000e:	e766      	b.n	800fede <_scanf_float+0x46>
 8010010:	eb1a 0f05 	cmn.w	sl, r5
 8010014:	f47f af70 	bne.w	800fef8 <_scanf_float+0x60>
 8010018:	6822      	ldr	r2, [r4, #0]
 801001a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801001e:	6022      	str	r2, [r4, #0]
 8010020:	f806 3b01 	strb.w	r3, [r6], #1
 8010024:	e7e4      	b.n	800fff0 <_scanf_float+0x158>
 8010026:	6822      	ldr	r2, [r4, #0]
 8010028:	0610      	lsls	r0, r2, #24
 801002a:	f57f af65 	bpl.w	800fef8 <_scanf_float+0x60>
 801002e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010032:	e7f4      	b.n	801001e <_scanf_float+0x186>
 8010034:	f1ba 0f00 	cmp.w	sl, #0
 8010038:	d10e      	bne.n	8010058 <_scanf_float+0x1c0>
 801003a:	f1b9 0f00 	cmp.w	r9, #0
 801003e:	d10e      	bne.n	801005e <_scanf_float+0x1c6>
 8010040:	6822      	ldr	r2, [r4, #0]
 8010042:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010046:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801004a:	d108      	bne.n	801005e <_scanf_float+0x1c6>
 801004c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010050:	6022      	str	r2, [r4, #0]
 8010052:	f04f 0a01 	mov.w	sl, #1
 8010056:	e7e3      	b.n	8010020 <_scanf_float+0x188>
 8010058:	f1ba 0f02 	cmp.w	sl, #2
 801005c:	d055      	beq.n	801010a <_scanf_float+0x272>
 801005e:	2d01      	cmp	r5, #1
 8010060:	d002      	beq.n	8010068 <_scanf_float+0x1d0>
 8010062:	2d04      	cmp	r5, #4
 8010064:	f47f af48 	bne.w	800fef8 <_scanf_float+0x60>
 8010068:	3501      	adds	r5, #1
 801006a:	b2ed      	uxtb	r5, r5
 801006c:	e7d8      	b.n	8010020 <_scanf_float+0x188>
 801006e:	f1ba 0f01 	cmp.w	sl, #1
 8010072:	f47f af41 	bne.w	800fef8 <_scanf_float+0x60>
 8010076:	f04f 0a02 	mov.w	sl, #2
 801007a:	e7d1      	b.n	8010020 <_scanf_float+0x188>
 801007c:	b97d      	cbnz	r5, 801009e <_scanf_float+0x206>
 801007e:	f1b9 0f00 	cmp.w	r9, #0
 8010082:	f47f af3c 	bne.w	800fefe <_scanf_float+0x66>
 8010086:	6822      	ldr	r2, [r4, #0]
 8010088:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801008c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010090:	f47f af39 	bne.w	800ff06 <_scanf_float+0x6e>
 8010094:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010098:	6022      	str	r2, [r4, #0]
 801009a:	2501      	movs	r5, #1
 801009c:	e7c0      	b.n	8010020 <_scanf_float+0x188>
 801009e:	2d03      	cmp	r5, #3
 80100a0:	d0e2      	beq.n	8010068 <_scanf_float+0x1d0>
 80100a2:	2d05      	cmp	r5, #5
 80100a4:	e7de      	b.n	8010064 <_scanf_float+0x1cc>
 80100a6:	2d02      	cmp	r5, #2
 80100a8:	f47f af26 	bne.w	800fef8 <_scanf_float+0x60>
 80100ac:	2503      	movs	r5, #3
 80100ae:	e7b7      	b.n	8010020 <_scanf_float+0x188>
 80100b0:	2d06      	cmp	r5, #6
 80100b2:	f47f af21 	bne.w	800fef8 <_scanf_float+0x60>
 80100b6:	2507      	movs	r5, #7
 80100b8:	e7b2      	b.n	8010020 <_scanf_float+0x188>
 80100ba:	6822      	ldr	r2, [r4, #0]
 80100bc:	0591      	lsls	r1, r2, #22
 80100be:	f57f af1b 	bpl.w	800fef8 <_scanf_float+0x60>
 80100c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80100c6:	6022      	str	r2, [r4, #0]
 80100c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80100cc:	e7a8      	b.n	8010020 <_scanf_float+0x188>
 80100ce:	6822      	ldr	r2, [r4, #0]
 80100d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80100d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80100d8:	d006      	beq.n	80100e8 <_scanf_float+0x250>
 80100da:	0550      	lsls	r0, r2, #21
 80100dc:	f57f af0c 	bpl.w	800fef8 <_scanf_float+0x60>
 80100e0:	f1b9 0f00 	cmp.w	r9, #0
 80100e4:	f43f af0f 	beq.w	800ff06 <_scanf_float+0x6e>
 80100e8:	0591      	lsls	r1, r2, #22
 80100ea:	bf58      	it	pl
 80100ec:	9901      	ldrpl	r1, [sp, #4]
 80100ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80100f2:	bf58      	it	pl
 80100f4:	eba9 0101 	subpl.w	r1, r9, r1
 80100f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80100fc:	bf58      	it	pl
 80100fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010102:	6022      	str	r2, [r4, #0]
 8010104:	f04f 0900 	mov.w	r9, #0
 8010108:	e78a      	b.n	8010020 <_scanf_float+0x188>
 801010a:	f04f 0a03 	mov.w	sl, #3
 801010e:	e787      	b.n	8010020 <_scanf_float+0x188>
 8010110:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010114:	4639      	mov	r1, r7
 8010116:	4640      	mov	r0, r8
 8010118:	4798      	blx	r3
 801011a:	2800      	cmp	r0, #0
 801011c:	f43f aedf 	beq.w	800fede <_scanf_float+0x46>
 8010120:	e6ea      	b.n	800fef8 <_scanf_float+0x60>
 8010122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801012a:	463a      	mov	r2, r7
 801012c:	4640      	mov	r0, r8
 801012e:	4798      	blx	r3
 8010130:	6923      	ldr	r3, [r4, #16]
 8010132:	3b01      	subs	r3, #1
 8010134:	6123      	str	r3, [r4, #16]
 8010136:	e6ec      	b.n	800ff12 <_scanf_float+0x7a>
 8010138:	1e6b      	subs	r3, r5, #1
 801013a:	2b06      	cmp	r3, #6
 801013c:	d825      	bhi.n	801018a <_scanf_float+0x2f2>
 801013e:	2d02      	cmp	r5, #2
 8010140:	d836      	bhi.n	80101b0 <_scanf_float+0x318>
 8010142:	455e      	cmp	r6, fp
 8010144:	f67f aee8 	bls.w	800ff18 <_scanf_float+0x80>
 8010148:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801014c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010150:	463a      	mov	r2, r7
 8010152:	4640      	mov	r0, r8
 8010154:	4798      	blx	r3
 8010156:	6923      	ldr	r3, [r4, #16]
 8010158:	3b01      	subs	r3, #1
 801015a:	6123      	str	r3, [r4, #16]
 801015c:	e7f1      	b.n	8010142 <_scanf_float+0x2aa>
 801015e:	9802      	ldr	r0, [sp, #8]
 8010160:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010164:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010168:	9002      	str	r0, [sp, #8]
 801016a:	463a      	mov	r2, r7
 801016c:	4640      	mov	r0, r8
 801016e:	4798      	blx	r3
 8010170:	6923      	ldr	r3, [r4, #16]
 8010172:	3b01      	subs	r3, #1
 8010174:	6123      	str	r3, [r4, #16]
 8010176:	f10a 3aff 	add.w	sl, sl, #4294967295
 801017a:	fa5f fa8a 	uxtb.w	sl, sl
 801017e:	f1ba 0f02 	cmp.w	sl, #2
 8010182:	d1ec      	bne.n	801015e <_scanf_float+0x2c6>
 8010184:	3d03      	subs	r5, #3
 8010186:	b2ed      	uxtb	r5, r5
 8010188:	1b76      	subs	r6, r6, r5
 801018a:	6823      	ldr	r3, [r4, #0]
 801018c:	05da      	lsls	r2, r3, #23
 801018e:	d52f      	bpl.n	80101f0 <_scanf_float+0x358>
 8010190:	055b      	lsls	r3, r3, #21
 8010192:	d510      	bpl.n	80101b6 <_scanf_float+0x31e>
 8010194:	455e      	cmp	r6, fp
 8010196:	f67f aebf 	bls.w	800ff18 <_scanf_float+0x80>
 801019a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801019e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80101a2:	463a      	mov	r2, r7
 80101a4:	4640      	mov	r0, r8
 80101a6:	4798      	blx	r3
 80101a8:	6923      	ldr	r3, [r4, #16]
 80101aa:	3b01      	subs	r3, #1
 80101ac:	6123      	str	r3, [r4, #16]
 80101ae:	e7f1      	b.n	8010194 <_scanf_float+0x2fc>
 80101b0:	46aa      	mov	sl, r5
 80101b2:	9602      	str	r6, [sp, #8]
 80101b4:	e7df      	b.n	8010176 <_scanf_float+0x2de>
 80101b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80101ba:	6923      	ldr	r3, [r4, #16]
 80101bc:	2965      	cmp	r1, #101	; 0x65
 80101be:	f103 33ff 	add.w	r3, r3, #4294967295
 80101c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80101c6:	6123      	str	r3, [r4, #16]
 80101c8:	d00c      	beq.n	80101e4 <_scanf_float+0x34c>
 80101ca:	2945      	cmp	r1, #69	; 0x45
 80101cc:	d00a      	beq.n	80101e4 <_scanf_float+0x34c>
 80101ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101d2:	463a      	mov	r2, r7
 80101d4:	4640      	mov	r0, r8
 80101d6:	4798      	blx	r3
 80101d8:	6923      	ldr	r3, [r4, #16]
 80101da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80101de:	3b01      	subs	r3, #1
 80101e0:	1eb5      	subs	r5, r6, #2
 80101e2:	6123      	str	r3, [r4, #16]
 80101e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101e8:	463a      	mov	r2, r7
 80101ea:	4640      	mov	r0, r8
 80101ec:	4798      	blx	r3
 80101ee:	462e      	mov	r6, r5
 80101f0:	6825      	ldr	r5, [r4, #0]
 80101f2:	f015 0510 	ands.w	r5, r5, #16
 80101f6:	d158      	bne.n	80102aa <_scanf_float+0x412>
 80101f8:	7035      	strb	r5, [r6, #0]
 80101fa:	6823      	ldr	r3, [r4, #0]
 80101fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010204:	d11c      	bne.n	8010240 <_scanf_float+0x3a8>
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	454b      	cmp	r3, r9
 801020a:	eba3 0209 	sub.w	r2, r3, r9
 801020e:	d124      	bne.n	801025a <_scanf_float+0x3c2>
 8010210:	2200      	movs	r2, #0
 8010212:	4659      	mov	r1, fp
 8010214:	4640      	mov	r0, r8
 8010216:	f002 fcd3 	bl	8012bc0 <_strtod_r>
 801021a:	9b03      	ldr	r3, [sp, #12]
 801021c:	6821      	ldr	r1, [r4, #0]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f011 0f02 	tst.w	r1, #2
 8010224:	ec57 6b10 	vmov	r6, r7, d0
 8010228:	f103 0204 	add.w	r2, r3, #4
 801022c:	d020      	beq.n	8010270 <_scanf_float+0x3d8>
 801022e:	9903      	ldr	r1, [sp, #12]
 8010230:	600a      	str	r2, [r1, #0]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	e9c3 6700 	strd	r6, r7, [r3]
 8010238:	68e3      	ldr	r3, [r4, #12]
 801023a:	3301      	adds	r3, #1
 801023c:	60e3      	str	r3, [r4, #12]
 801023e:	e66c      	b.n	800ff1a <_scanf_float+0x82>
 8010240:	9b04      	ldr	r3, [sp, #16]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d0e4      	beq.n	8010210 <_scanf_float+0x378>
 8010246:	9905      	ldr	r1, [sp, #20]
 8010248:	230a      	movs	r3, #10
 801024a:	462a      	mov	r2, r5
 801024c:	3101      	adds	r1, #1
 801024e:	4640      	mov	r0, r8
 8010250:	f002 fd3e 	bl	8012cd0 <_strtol_r>
 8010254:	9b04      	ldr	r3, [sp, #16]
 8010256:	9e05      	ldr	r6, [sp, #20]
 8010258:	1ac2      	subs	r2, r0, r3
 801025a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801025e:	429e      	cmp	r6, r3
 8010260:	bf28      	it	cs
 8010262:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010266:	4912      	ldr	r1, [pc, #72]	; (80102b0 <_scanf_float+0x418>)
 8010268:	4630      	mov	r0, r6
 801026a:	f000 f8e7 	bl	801043c <siprintf>
 801026e:	e7cf      	b.n	8010210 <_scanf_float+0x378>
 8010270:	f011 0f04 	tst.w	r1, #4
 8010274:	9903      	ldr	r1, [sp, #12]
 8010276:	600a      	str	r2, [r1, #0]
 8010278:	d1db      	bne.n	8010232 <_scanf_float+0x39a>
 801027a:	f8d3 8000 	ldr.w	r8, [r3]
 801027e:	ee10 2a10 	vmov	r2, s0
 8010282:	ee10 0a10 	vmov	r0, s0
 8010286:	463b      	mov	r3, r7
 8010288:	4639      	mov	r1, r7
 801028a:	f7f0 fc77 	bl	8000b7c <__aeabi_dcmpun>
 801028e:	b128      	cbz	r0, 801029c <_scanf_float+0x404>
 8010290:	4808      	ldr	r0, [pc, #32]	; (80102b4 <_scanf_float+0x41c>)
 8010292:	f000 fa5b 	bl	801074c <nanf>
 8010296:	ed88 0a00 	vstr	s0, [r8]
 801029a:	e7cd      	b.n	8010238 <_scanf_float+0x3a0>
 801029c:	4630      	mov	r0, r6
 801029e:	4639      	mov	r1, r7
 80102a0:	f7f0 fcca 	bl	8000c38 <__aeabi_d2f>
 80102a4:	f8c8 0000 	str.w	r0, [r8]
 80102a8:	e7c6      	b.n	8010238 <_scanf_float+0x3a0>
 80102aa:	2500      	movs	r5, #0
 80102ac:	e635      	b.n	800ff1a <_scanf_float+0x82>
 80102ae:	bf00      	nop
 80102b0:	08015d46 	.word	0x08015d46
 80102b4:	080160f8 	.word	0x080160f8

080102b8 <std>:
 80102b8:	2300      	movs	r3, #0
 80102ba:	b510      	push	{r4, lr}
 80102bc:	4604      	mov	r4, r0
 80102be:	e9c0 3300 	strd	r3, r3, [r0]
 80102c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102c6:	6083      	str	r3, [r0, #8]
 80102c8:	8181      	strh	r1, [r0, #12]
 80102ca:	6643      	str	r3, [r0, #100]	; 0x64
 80102cc:	81c2      	strh	r2, [r0, #14]
 80102ce:	6183      	str	r3, [r0, #24]
 80102d0:	4619      	mov	r1, r3
 80102d2:	2208      	movs	r2, #8
 80102d4:	305c      	adds	r0, #92	; 0x5c
 80102d6:	f000 f942 	bl	801055e <memset>
 80102da:	4b0d      	ldr	r3, [pc, #52]	; (8010310 <std+0x58>)
 80102dc:	6263      	str	r3, [r4, #36]	; 0x24
 80102de:	4b0d      	ldr	r3, [pc, #52]	; (8010314 <std+0x5c>)
 80102e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80102e2:	4b0d      	ldr	r3, [pc, #52]	; (8010318 <std+0x60>)
 80102e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80102e6:	4b0d      	ldr	r3, [pc, #52]	; (801031c <std+0x64>)
 80102e8:	6323      	str	r3, [r4, #48]	; 0x30
 80102ea:	4b0d      	ldr	r3, [pc, #52]	; (8010320 <std+0x68>)
 80102ec:	6224      	str	r4, [r4, #32]
 80102ee:	429c      	cmp	r4, r3
 80102f0:	d006      	beq.n	8010300 <std+0x48>
 80102f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80102f6:	4294      	cmp	r4, r2
 80102f8:	d002      	beq.n	8010300 <std+0x48>
 80102fa:	33d0      	adds	r3, #208	; 0xd0
 80102fc:	429c      	cmp	r4, r3
 80102fe:	d105      	bne.n	801030c <std+0x54>
 8010300:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010308:	f000 ba0e 	b.w	8010728 <__retarget_lock_init_recursive>
 801030c:	bd10      	pop	{r4, pc}
 801030e:	bf00      	nop
 8010310:	080104d5 	.word	0x080104d5
 8010314:	080104fb 	.word	0x080104fb
 8010318:	08010533 	.word	0x08010533
 801031c:	08010557 	.word	0x08010557
 8010320:	20004a1c 	.word	0x20004a1c

08010324 <stdio_exit_handler>:
 8010324:	4a02      	ldr	r2, [pc, #8]	; (8010330 <stdio_exit_handler+0xc>)
 8010326:	4903      	ldr	r1, [pc, #12]	; (8010334 <stdio_exit_handler+0x10>)
 8010328:	4803      	ldr	r0, [pc, #12]	; (8010338 <stdio_exit_handler+0x14>)
 801032a:	f000 b869 	b.w	8010400 <_fwalk_sglue>
 801032e:	bf00      	nop
 8010330:	20000018 	.word	0x20000018
 8010334:	080136d1 	.word	0x080136d1
 8010338:	20000024 	.word	0x20000024

0801033c <cleanup_stdio>:
 801033c:	6841      	ldr	r1, [r0, #4]
 801033e:	4b0c      	ldr	r3, [pc, #48]	; (8010370 <cleanup_stdio+0x34>)
 8010340:	4299      	cmp	r1, r3
 8010342:	b510      	push	{r4, lr}
 8010344:	4604      	mov	r4, r0
 8010346:	d001      	beq.n	801034c <cleanup_stdio+0x10>
 8010348:	f003 f9c2 	bl	80136d0 <_fflush_r>
 801034c:	68a1      	ldr	r1, [r4, #8]
 801034e:	4b09      	ldr	r3, [pc, #36]	; (8010374 <cleanup_stdio+0x38>)
 8010350:	4299      	cmp	r1, r3
 8010352:	d002      	beq.n	801035a <cleanup_stdio+0x1e>
 8010354:	4620      	mov	r0, r4
 8010356:	f003 f9bb 	bl	80136d0 <_fflush_r>
 801035a:	68e1      	ldr	r1, [r4, #12]
 801035c:	4b06      	ldr	r3, [pc, #24]	; (8010378 <cleanup_stdio+0x3c>)
 801035e:	4299      	cmp	r1, r3
 8010360:	d004      	beq.n	801036c <cleanup_stdio+0x30>
 8010362:	4620      	mov	r0, r4
 8010364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010368:	f003 b9b2 	b.w	80136d0 <_fflush_r>
 801036c:	bd10      	pop	{r4, pc}
 801036e:	bf00      	nop
 8010370:	20004a1c 	.word	0x20004a1c
 8010374:	20004a84 	.word	0x20004a84
 8010378:	20004aec 	.word	0x20004aec

0801037c <global_stdio_init.part.0>:
 801037c:	b510      	push	{r4, lr}
 801037e:	4b0b      	ldr	r3, [pc, #44]	; (80103ac <global_stdio_init.part.0+0x30>)
 8010380:	4c0b      	ldr	r4, [pc, #44]	; (80103b0 <global_stdio_init.part.0+0x34>)
 8010382:	4a0c      	ldr	r2, [pc, #48]	; (80103b4 <global_stdio_init.part.0+0x38>)
 8010384:	601a      	str	r2, [r3, #0]
 8010386:	4620      	mov	r0, r4
 8010388:	2200      	movs	r2, #0
 801038a:	2104      	movs	r1, #4
 801038c:	f7ff ff94 	bl	80102b8 <std>
 8010390:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010394:	2201      	movs	r2, #1
 8010396:	2109      	movs	r1, #9
 8010398:	f7ff ff8e 	bl	80102b8 <std>
 801039c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80103a0:	2202      	movs	r2, #2
 80103a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103a6:	2112      	movs	r1, #18
 80103a8:	f7ff bf86 	b.w	80102b8 <std>
 80103ac:	20004b54 	.word	0x20004b54
 80103b0:	20004a1c 	.word	0x20004a1c
 80103b4:	08010325 	.word	0x08010325

080103b8 <__sfp_lock_acquire>:
 80103b8:	4801      	ldr	r0, [pc, #4]	; (80103c0 <__sfp_lock_acquire+0x8>)
 80103ba:	f000 b9b6 	b.w	801072a <__retarget_lock_acquire_recursive>
 80103be:	bf00      	nop
 80103c0:	20004b5d 	.word	0x20004b5d

080103c4 <__sfp_lock_release>:
 80103c4:	4801      	ldr	r0, [pc, #4]	; (80103cc <__sfp_lock_release+0x8>)
 80103c6:	f000 b9b1 	b.w	801072c <__retarget_lock_release_recursive>
 80103ca:	bf00      	nop
 80103cc:	20004b5d 	.word	0x20004b5d

080103d0 <__sinit>:
 80103d0:	b510      	push	{r4, lr}
 80103d2:	4604      	mov	r4, r0
 80103d4:	f7ff fff0 	bl	80103b8 <__sfp_lock_acquire>
 80103d8:	6a23      	ldr	r3, [r4, #32]
 80103da:	b11b      	cbz	r3, 80103e4 <__sinit+0x14>
 80103dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e0:	f7ff bff0 	b.w	80103c4 <__sfp_lock_release>
 80103e4:	4b04      	ldr	r3, [pc, #16]	; (80103f8 <__sinit+0x28>)
 80103e6:	6223      	str	r3, [r4, #32]
 80103e8:	4b04      	ldr	r3, [pc, #16]	; (80103fc <__sinit+0x2c>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d1f5      	bne.n	80103dc <__sinit+0xc>
 80103f0:	f7ff ffc4 	bl	801037c <global_stdio_init.part.0>
 80103f4:	e7f2      	b.n	80103dc <__sinit+0xc>
 80103f6:	bf00      	nop
 80103f8:	0801033d 	.word	0x0801033d
 80103fc:	20004b54 	.word	0x20004b54

08010400 <_fwalk_sglue>:
 8010400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010404:	4607      	mov	r7, r0
 8010406:	4688      	mov	r8, r1
 8010408:	4614      	mov	r4, r2
 801040a:	2600      	movs	r6, #0
 801040c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010410:	f1b9 0901 	subs.w	r9, r9, #1
 8010414:	d505      	bpl.n	8010422 <_fwalk_sglue+0x22>
 8010416:	6824      	ldr	r4, [r4, #0]
 8010418:	2c00      	cmp	r4, #0
 801041a:	d1f7      	bne.n	801040c <_fwalk_sglue+0xc>
 801041c:	4630      	mov	r0, r6
 801041e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010422:	89ab      	ldrh	r3, [r5, #12]
 8010424:	2b01      	cmp	r3, #1
 8010426:	d907      	bls.n	8010438 <_fwalk_sglue+0x38>
 8010428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801042c:	3301      	adds	r3, #1
 801042e:	d003      	beq.n	8010438 <_fwalk_sglue+0x38>
 8010430:	4629      	mov	r1, r5
 8010432:	4638      	mov	r0, r7
 8010434:	47c0      	blx	r8
 8010436:	4306      	orrs	r6, r0
 8010438:	3568      	adds	r5, #104	; 0x68
 801043a:	e7e9      	b.n	8010410 <_fwalk_sglue+0x10>

0801043c <siprintf>:
 801043c:	b40e      	push	{r1, r2, r3}
 801043e:	b500      	push	{lr}
 8010440:	b09c      	sub	sp, #112	; 0x70
 8010442:	ab1d      	add	r3, sp, #116	; 0x74
 8010444:	9002      	str	r0, [sp, #8]
 8010446:	9006      	str	r0, [sp, #24]
 8010448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801044c:	4809      	ldr	r0, [pc, #36]	; (8010474 <siprintf+0x38>)
 801044e:	9107      	str	r1, [sp, #28]
 8010450:	9104      	str	r1, [sp, #16]
 8010452:	4909      	ldr	r1, [pc, #36]	; (8010478 <siprintf+0x3c>)
 8010454:	f853 2b04 	ldr.w	r2, [r3], #4
 8010458:	9105      	str	r1, [sp, #20]
 801045a:	6800      	ldr	r0, [r0, #0]
 801045c:	9301      	str	r3, [sp, #4]
 801045e:	a902      	add	r1, sp, #8
 8010460:	f002 fc92 	bl	8012d88 <_svfiprintf_r>
 8010464:	9b02      	ldr	r3, [sp, #8]
 8010466:	2200      	movs	r2, #0
 8010468:	701a      	strb	r2, [r3, #0]
 801046a:	b01c      	add	sp, #112	; 0x70
 801046c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010470:	b003      	add	sp, #12
 8010472:	4770      	bx	lr
 8010474:	20000070 	.word	0x20000070
 8010478:	ffff0208 	.word	0xffff0208

0801047c <siscanf>:
 801047c:	b40e      	push	{r1, r2, r3}
 801047e:	b510      	push	{r4, lr}
 8010480:	b09f      	sub	sp, #124	; 0x7c
 8010482:	ac21      	add	r4, sp, #132	; 0x84
 8010484:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010488:	f854 2b04 	ldr.w	r2, [r4], #4
 801048c:	9201      	str	r2, [sp, #4]
 801048e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010492:	9004      	str	r0, [sp, #16]
 8010494:	9008      	str	r0, [sp, #32]
 8010496:	f7ef ff13 	bl	80002c0 <strlen>
 801049a:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <siscanf+0x50>)
 801049c:	9005      	str	r0, [sp, #20]
 801049e:	9009      	str	r0, [sp, #36]	; 0x24
 80104a0:	930d      	str	r3, [sp, #52]	; 0x34
 80104a2:	480b      	ldr	r0, [pc, #44]	; (80104d0 <siscanf+0x54>)
 80104a4:	9a01      	ldr	r2, [sp, #4]
 80104a6:	6800      	ldr	r0, [r0, #0]
 80104a8:	9403      	str	r4, [sp, #12]
 80104aa:	2300      	movs	r3, #0
 80104ac:	9311      	str	r3, [sp, #68]	; 0x44
 80104ae:	9316      	str	r3, [sp, #88]	; 0x58
 80104b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80104b8:	a904      	add	r1, sp, #16
 80104ba:	4623      	mov	r3, r4
 80104bc:	f002 fdbc 	bl	8013038 <__ssvfiscanf_r>
 80104c0:	b01f      	add	sp, #124	; 0x7c
 80104c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c6:	b003      	add	sp, #12
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	080104f7 	.word	0x080104f7
 80104d0:	20000070 	.word	0x20000070

080104d4 <__sread>:
 80104d4:	b510      	push	{r4, lr}
 80104d6:	460c      	mov	r4, r1
 80104d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104dc:	f000 f8d6 	bl	801068c <_read_r>
 80104e0:	2800      	cmp	r0, #0
 80104e2:	bfab      	itete	ge
 80104e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80104e6:	89a3      	ldrhlt	r3, [r4, #12]
 80104e8:	181b      	addge	r3, r3, r0
 80104ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80104ee:	bfac      	ite	ge
 80104f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80104f2:	81a3      	strhlt	r3, [r4, #12]
 80104f4:	bd10      	pop	{r4, pc}

080104f6 <__seofread>:
 80104f6:	2000      	movs	r0, #0
 80104f8:	4770      	bx	lr

080104fa <__swrite>:
 80104fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104fe:	461f      	mov	r7, r3
 8010500:	898b      	ldrh	r3, [r1, #12]
 8010502:	05db      	lsls	r3, r3, #23
 8010504:	4605      	mov	r5, r0
 8010506:	460c      	mov	r4, r1
 8010508:	4616      	mov	r6, r2
 801050a:	d505      	bpl.n	8010518 <__swrite+0x1e>
 801050c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010510:	2302      	movs	r3, #2
 8010512:	2200      	movs	r2, #0
 8010514:	f000 f8a8 	bl	8010668 <_lseek_r>
 8010518:	89a3      	ldrh	r3, [r4, #12]
 801051a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801051e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010522:	81a3      	strh	r3, [r4, #12]
 8010524:	4632      	mov	r2, r6
 8010526:	463b      	mov	r3, r7
 8010528:	4628      	mov	r0, r5
 801052a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801052e:	f000 b8bf 	b.w	80106b0 <_write_r>

08010532 <__sseek>:
 8010532:	b510      	push	{r4, lr}
 8010534:	460c      	mov	r4, r1
 8010536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801053a:	f000 f895 	bl	8010668 <_lseek_r>
 801053e:	1c43      	adds	r3, r0, #1
 8010540:	89a3      	ldrh	r3, [r4, #12]
 8010542:	bf15      	itete	ne
 8010544:	6560      	strne	r0, [r4, #84]	; 0x54
 8010546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801054a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801054e:	81a3      	strheq	r3, [r4, #12]
 8010550:	bf18      	it	ne
 8010552:	81a3      	strhne	r3, [r4, #12]
 8010554:	bd10      	pop	{r4, pc}

08010556 <__sclose>:
 8010556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801055a:	f000 b81f 	b.w	801059c <_close_r>

0801055e <memset>:
 801055e:	4402      	add	r2, r0
 8010560:	4603      	mov	r3, r0
 8010562:	4293      	cmp	r3, r2
 8010564:	d100      	bne.n	8010568 <memset+0xa>
 8010566:	4770      	bx	lr
 8010568:	f803 1b01 	strb.w	r1, [r3], #1
 801056c:	e7f9      	b.n	8010562 <memset+0x4>

0801056e <strncmp>:
 801056e:	b510      	push	{r4, lr}
 8010570:	b16a      	cbz	r2, 801058e <strncmp+0x20>
 8010572:	3901      	subs	r1, #1
 8010574:	1884      	adds	r4, r0, r2
 8010576:	f810 2b01 	ldrb.w	r2, [r0], #1
 801057a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801057e:	429a      	cmp	r2, r3
 8010580:	d103      	bne.n	801058a <strncmp+0x1c>
 8010582:	42a0      	cmp	r0, r4
 8010584:	d001      	beq.n	801058a <strncmp+0x1c>
 8010586:	2a00      	cmp	r2, #0
 8010588:	d1f5      	bne.n	8010576 <strncmp+0x8>
 801058a:	1ad0      	subs	r0, r2, r3
 801058c:	bd10      	pop	{r4, pc}
 801058e:	4610      	mov	r0, r2
 8010590:	e7fc      	b.n	801058c <strncmp+0x1e>
	...

08010594 <_localeconv_r>:
 8010594:	4800      	ldr	r0, [pc, #0]	; (8010598 <_localeconv_r+0x4>)
 8010596:	4770      	bx	lr
 8010598:	20000164 	.word	0x20000164

0801059c <_close_r>:
 801059c:	b538      	push	{r3, r4, r5, lr}
 801059e:	4d06      	ldr	r5, [pc, #24]	; (80105b8 <_close_r+0x1c>)
 80105a0:	2300      	movs	r3, #0
 80105a2:	4604      	mov	r4, r0
 80105a4:	4608      	mov	r0, r1
 80105a6:	602b      	str	r3, [r5, #0]
 80105a8:	f7f3 fa89 	bl	8003abe <_close>
 80105ac:	1c43      	adds	r3, r0, #1
 80105ae:	d102      	bne.n	80105b6 <_close_r+0x1a>
 80105b0:	682b      	ldr	r3, [r5, #0]
 80105b2:	b103      	cbz	r3, 80105b6 <_close_r+0x1a>
 80105b4:	6023      	str	r3, [r4, #0]
 80105b6:	bd38      	pop	{r3, r4, r5, pc}
 80105b8:	20004b58 	.word	0x20004b58

080105bc <_reclaim_reent>:
 80105bc:	4b29      	ldr	r3, [pc, #164]	; (8010664 <_reclaim_reent+0xa8>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4283      	cmp	r3, r0
 80105c2:	b570      	push	{r4, r5, r6, lr}
 80105c4:	4604      	mov	r4, r0
 80105c6:	d04b      	beq.n	8010660 <_reclaim_reent+0xa4>
 80105c8:	69c3      	ldr	r3, [r0, #28]
 80105ca:	b143      	cbz	r3, 80105de <_reclaim_reent+0x22>
 80105cc:	68db      	ldr	r3, [r3, #12]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d144      	bne.n	801065c <_reclaim_reent+0xa0>
 80105d2:	69e3      	ldr	r3, [r4, #28]
 80105d4:	6819      	ldr	r1, [r3, #0]
 80105d6:	b111      	cbz	r1, 80105de <_reclaim_reent+0x22>
 80105d8:	4620      	mov	r0, r4
 80105da:	f000 ff37 	bl	801144c <_free_r>
 80105de:	6961      	ldr	r1, [r4, #20]
 80105e0:	b111      	cbz	r1, 80105e8 <_reclaim_reent+0x2c>
 80105e2:	4620      	mov	r0, r4
 80105e4:	f000 ff32 	bl	801144c <_free_r>
 80105e8:	69e1      	ldr	r1, [r4, #28]
 80105ea:	b111      	cbz	r1, 80105f2 <_reclaim_reent+0x36>
 80105ec:	4620      	mov	r0, r4
 80105ee:	f000 ff2d 	bl	801144c <_free_r>
 80105f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80105f4:	b111      	cbz	r1, 80105fc <_reclaim_reent+0x40>
 80105f6:	4620      	mov	r0, r4
 80105f8:	f000 ff28 	bl	801144c <_free_r>
 80105fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105fe:	b111      	cbz	r1, 8010606 <_reclaim_reent+0x4a>
 8010600:	4620      	mov	r0, r4
 8010602:	f000 ff23 	bl	801144c <_free_r>
 8010606:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010608:	b111      	cbz	r1, 8010610 <_reclaim_reent+0x54>
 801060a:	4620      	mov	r0, r4
 801060c:	f000 ff1e 	bl	801144c <_free_r>
 8010610:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010612:	b111      	cbz	r1, 801061a <_reclaim_reent+0x5e>
 8010614:	4620      	mov	r0, r4
 8010616:	f000 ff19 	bl	801144c <_free_r>
 801061a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801061c:	b111      	cbz	r1, 8010624 <_reclaim_reent+0x68>
 801061e:	4620      	mov	r0, r4
 8010620:	f000 ff14 	bl	801144c <_free_r>
 8010624:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010626:	b111      	cbz	r1, 801062e <_reclaim_reent+0x72>
 8010628:	4620      	mov	r0, r4
 801062a:	f000 ff0f 	bl	801144c <_free_r>
 801062e:	6a23      	ldr	r3, [r4, #32]
 8010630:	b1b3      	cbz	r3, 8010660 <_reclaim_reent+0xa4>
 8010632:	4620      	mov	r0, r4
 8010634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010638:	4718      	bx	r3
 801063a:	5949      	ldr	r1, [r1, r5]
 801063c:	b941      	cbnz	r1, 8010650 <_reclaim_reent+0x94>
 801063e:	3504      	adds	r5, #4
 8010640:	69e3      	ldr	r3, [r4, #28]
 8010642:	2d80      	cmp	r5, #128	; 0x80
 8010644:	68d9      	ldr	r1, [r3, #12]
 8010646:	d1f8      	bne.n	801063a <_reclaim_reent+0x7e>
 8010648:	4620      	mov	r0, r4
 801064a:	f000 feff 	bl	801144c <_free_r>
 801064e:	e7c0      	b.n	80105d2 <_reclaim_reent+0x16>
 8010650:	680e      	ldr	r6, [r1, #0]
 8010652:	4620      	mov	r0, r4
 8010654:	f000 fefa 	bl	801144c <_free_r>
 8010658:	4631      	mov	r1, r6
 801065a:	e7ef      	b.n	801063c <_reclaim_reent+0x80>
 801065c:	2500      	movs	r5, #0
 801065e:	e7ef      	b.n	8010640 <_reclaim_reent+0x84>
 8010660:	bd70      	pop	{r4, r5, r6, pc}
 8010662:	bf00      	nop
 8010664:	20000070 	.word	0x20000070

08010668 <_lseek_r>:
 8010668:	b538      	push	{r3, r4, r5, lr}
 801066a:	4d07      	ldr	r5, [pc, #28]	; (8010688 <_lseek_r+0x20>)
 801066c:	4604      	mov	r4, r0
 801066e:	4608      	mov	r0, r1
 8010670:	4611      	mov	r1, r2
 8010672:	2200      	movs	r2, #0
 8010674:	602a      	str	r2, [r5, #0]
 8010676:	461a      	mov	r2, r3
 8010678:	f7f3 fa48 	bl	8003b0c <_lseek>
 801067c:	1c43      	adds	r3, r0, #1
 801067e:	d102      	bne.n	8010686 <_lseek_r+0x1e>
 8010680:	682b      	ldr	r3, [r5, #0]
 8010682:	b103      	cbz	r3, 8010686 <_lseek_r+0x1e>
 8010684:	6023      	str	r3, [r4, #0]
 8010686:	bd38      	pop	{r3, r4, r5, pc}
 8010688:	20004b58 	.word	0x20004b58

0801068c <_read_r>:
 801068c:	b538      	push	{r3, r4, r5, lr}
 801068e:	4d07      	ldr	r5, [pc, #28]	; (80106ac <_read_r+0x20>)
 8010690:	4604      	mov	r4, r0
 8010692:	4608      	mov	r0, r1
 8010694:	4611      	mov	r1, r2
 8010696:	2200      	movs	r2, #0
 8010698:	602a      	str	r2, [r5, #0]
 801069a:	461a      	mov	r2, r3
 801069c:	f7f3 f9d6 	bl	8003a4c <_read>
 80106a0:	1c43      	adds	r3, r0, #1
 80106a2:	d102      	bne.n	80106aa <_read_r+0x1e>
 80106a4:	682b      	ldr	r3, [r5, #0]
 80106a6:	b103      	cbz	r3, 80106aa <_read_r+0x1e>
 80106a8:	6023      	str	r3, [r4, #0]
 80106aa:	bd38      	pop	{r3, r4, r5, pc}
 80106ac:	20004b58 	.word	0x20004b58

080106b0 <_write_r>:
 80106b0:	b538      	push	{r3, r4, r5, lr}
 80106b2:	4d07      	ldr	r5, [pc, #28]	; (80106d0 <_write_r+0x20>)
 80106b4:	4604      	mov	r4, r0
 80106b6:	4608      	mov	r0, r1
 80106b8:	4611      	mov	r1, r2
 80106ba:	2200      	movs	r2, #0
 80106bc:	602a      	str	r2, [r5, #0]
 80106be:	461a      	mov	r2, r3
 80106c0:	f7f3 f9e1 	bl	8003a86 <_write>
 80106c4:	1c43      	adds	r3, r0, #1
 80106c6:	d102      	bne.n	80106ce <_write_r+0x1e>
 80106c8:	682b      	ldr	r3, [r5, #0]
 80106ca:	b103      	cbz	r3, 80106ce <_write_r+0x1e>
 80106cc:	6023      	str	r3, [r4, #0]
 80106ce:	bd38      	pop	{r3, r4, r5, pc}
 80106d0:	20004b58 	.word	0x20004b58

080106d4 <__errno>:
 80106d4:	4b01      	ldr	r3, [pc, #4]	; (80106dc <__errno+0x8>)
 80106d6:	6818      	ldr	r0, [r3, #0]
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	20000070 	.word	0x20000070

080106e0 <__libc_init_array>:
 80106e0:	b570      	push	{r4, r5, r6, lr}
 80106e2:	4d0d      	ldr	r5, [pc, #52]	; (8010718 <__libc_init_array+0x38>)
 80106e4:	4c0d      	ldr	r4, [pc, #52]	; (801071c <__libc_init_array+0x3c>)
 80106e6:	1b64      	subs	r4, r4, r5
 80106e8:	10a4      	asrs	r4, r4, #2
 80106ea:	2600      	movs	r6, #0
 80106ec:	42a6      	cmp	r6, r4
 80106ee:	d109      	bne.n	8010704 <__libc_init_array+0x24>
 80106f0:	4d0b      	ldr	r5, [pc, #44]	; (8010720 <__libc_init_array+0x40>)
 80106f2:	4c0c      	ldr	r4, [pc, #48]	; (8010724 <__libc_init_array+0x44>)
 80106f4:	f005 f8ae 	bl	8015854 <_init>
 80106f8:	1b64      	subs	r4, r4, r5
 80106fa:	10a4      	asrs	r4, r4, #2
 80106fc:	2600      	movs	r6, #0
 80106fe:	42a6      	cmp	r6, r4
 8010700:	d105      	bne.n	801070e <__libc_init_array+0x2e>
 8010702:	bd70      	pop	{r4, r5, r6, pc}
 8010704:	f855 3b04 	ldr.w	r3, [r5], #4
 8010708:	4798      	blx	r3
 801070a:	3601      	adds	r6, #1
 801070c:	e7ee      	b.n	80106ec <__libc_init_array+0xc>
 801070e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010712:	4798      	blx	r3
 8010714:	3601      	adds	r6, #1
 8010716:	e7f2      	b.n	80106fe <__libc_init_array+0x1e>
 8010718:	080161d0 	.word	0x080161d0
 801071c:	080161d0 	.word	0x080161d0
 8010720:	080161d0 	.word	0x080161d0
 8010724:	080161d4 	.word	0x080161d4

08010728 <__retarget_lock_init_recursive>:
 8010728:	4770      	bx	lr

0801072a <__retarget_lock_acquire_recursive>:
 801072a:	4770      	bx	lr

0801072c <__retarget_lock_release_recursive>:
 801072c:	4770      	bx	lr

0801072e <memcpy>:
 801072e:	440a      	add	r2, r1
 8010730:	4291      	cmp	r1, r2
 8010732:	f100 33ff 	add.w	r3, r0, #4294967295
 8010736:	d100      	bne.n	801073a <memcpy+0xc>
 8010738:	4770      	bx	lr
 801073a:	b510      	push	{r4, lr}
 801073c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010744:	4291      	cmp	r1, r2
 8010746:	d1f9      	bne.n	801073c <memcpy+0xe>
 8010748:	bd10      	pop	{r4, pc}
	...

0801074c <nanf>:
 801074c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010754 <nanf+0x8>
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	7fc00000 	.word	0x7fc00000

08010758 <quorem>:
 8010758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075c:	6903      	ldr	r3, [r0, #16]
 801075e:	690c      	ldr	r4, [r1, #16]
 8010760:	42a3      	cmp	r3, r4
 8010762:	4607      	mov	r7, r0
 8010764:	db7e      	blt.n	8010864 <quorem+0x10c>
 8010766:	3c01      	subs	r4, #1
 8010768:	f101 0814 	add.w	r8, r1, #20
 801076c:	f100 0514 	add.w	r5, r0, #20
 8010770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801077a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801077e:	3301      	adds	r3, #1
 8010780:	429a      	cmp	r2, r3
 8010782:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010786:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801078a:	fbb2 f6f3 	udiv	r6, r2, r3
 801078e:	d331      	bcc.n	80107f4 <quorem+0x9c>
 8010790:	f04f 0e00 	mov.w	lr, #0
 8010794:	4640      	mov	r0, r8
 8010796:	46ac      	mov	ip, r5
 8010798:	46f2      	mov	sl, lr
 801079a:	f850 2b04 	ldr.w	r2, [r0], #4
 801079e:	b293      	uxth	r3, r2
 80107a0:	fb06 e303 	mla	r3, r6, r3, lr
 80107a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80107a8:	0c1a      	lsrs	r2, r3, #16
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	ebaa 0303 	sub.w	r3, sl, r3
 80107b0:	f8dc a000 	ldr.w	sl, [ip]
 80107b4:	fa13 f38a 	uxtah	r3, r3, sl
 80107b8:	fb06 220e 	mla	r2, r6, lr, r2
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	9b00      	ldr	r3, [sp, #0]
 80107c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80107c4:	b292      	uxth	r2, r2
 80107c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80107ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80107d2:	4581      	cmp	r9, r0
 80107d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107d8:	f84c 3b04 	str.w	r3, [ip], #4
 80107dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80107e0:	d2db      	bcs.n	801079a <quorem+0x42>
 80107e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80107e6:	b92b      	cbnz	r3, 80107f4 <quorem+0x9c>
 80107e8:	9b01      	ldr	r3, [sp, #4]
 80107ea:	3b04      	subs	r3, #4
 80107ec:	429d      	cmp	r5, r3
 80107ee:	461a      	mov	r2, r3
 80107f0:	d32c      	bcc.n	801084c <quorem+0xf4>
 80107f2:	613c      	str	r4, [r7, #16]
 80107f4:	4638      	mov	r0, r7
 80107f6:	f001 f9ef 	bl	8011bd8 <__mcmp>
 80107fa:	2800      	cmp	r0, #0
 80107fc:	db22      	blt.n	8010844 <quorem+0xec>
 80107fe:	3601      	adds	r6, #1
 8010800:	4629      	mov	r1, r5
 8010802:	2000      	movs	r0, #0
 8010804:	f858 2b04 	ldr.w	r2, [r8], #4
 8010808:	f8d1 c000 	ldr.w	ip, [r1]
 801080c:	b293      	uxth	r3, r2
 801080e:	1ac3      	subs	r3, r0, r3
 8010810:	0c12      	lsrs	r2, r2, #16
 8010812:	fa13 f38c 	uxtah	r3, r3, ip
 8010816:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801081a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801081e:	b29b      	uxth	r3, r3
 8010820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010824:	45c1      	cmp	r9, r8
 8010826:	f841 3b04 	str.w	r3, [r1], #4
 801082a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801082e:	d2e9      	bcs.n	8010804 <quorem+0xac>
 8010830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010834:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010838:	b922      	cbnz	r2, 8010844 <quorem+0xec>
 801083a:	3b04      	subs	r3, #4
 801083c:	429d      	cmp	r5, r3
 801083e:	461a      	mov	r2, r3
 8010840:	d30a      	bcc.n	8010858 <quorem+0x100>
 8010842:	613c      	str	r4, [r7, #16]
 8010844:	4630      	mov	r0, r6
 8010846:	b003      	add	sp, #12
 8010848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084c:	6812      	ldr	r2, [r2, #0]
 801084e:	3b04      	subs	r3, #4
 8010850:	2a00      	cmp	r2, #0
 8010852:	d1ce      	bne.n	80107f2 <quorem+0x9a>
 8010854:	3c01      	subs	r4, #1
 8010856:	e7c9      	b.n	80107ec <quorem+0x94>
 8010858:	6812      	ldr	r2, [r2, #0]
 801085a:	3b04      	subs	r3, #4
 801085c:	2a00      	cmp	r2, #0
 801085e:	d1f0      	bne.n	8010842 <quorem+0xea>
 8010860:	3c01      	subs	r4, #1
 8010862:	e7eb      	b.n	801083c <quorem+0xe4>
 8010864:	2000      	movs	r0, #0
 8010866:	e7ee      	b.n	8010846 <quorem+0xee>

08010868 <_dtoa_r>:
 8010868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086c:	ed2d 8b04 	vpush	{d8-d9}
 8010870:	69c5      	ldr	r5, [r0, #28]
 8010872:	b093      	sub	sp, #76	; 0x4c
 8010874:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010878:	ec57 6b10 	vmov	r6, r7, d0
 801087c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010880:	9107      	str	r1, [sp, #28]
 8010882:	4604      	mov	r4, r0
 8010884:	920a      	str	r2, [sp, #40]	; 0x28
 8010886:	930d      	str	r3, [sp, #52]	; 0x34
 8010888:	b975      	cbnz	r5, 80108a8 <_dtoa_r+0x40>
 801088a:	2010      	movs	r0, #16
 801088c:	f000 fe2a 	bl	80114e4 <malloc>
 8010890:	4602      	mov	r2, r0
 8010892:	61e0      	str	r0, [r4, #28]
 8010894:	b920      	cbnz	r0, 80108a0 <_dtoa_r+0x38>
 8010896:	4bae      	ldr	r3, [pc, #696]	; (8010b50 <_dtoa_r+0x2e8>)
 8010898:	21ef      	movs	r1, #239	; 0xef
 801089a:	48ae      	ldr	r0, [pc, #696]	; (8010b54 <_dtoa_r+0x2ec>)
 801089c:	f002 ffe8 	bl	8013870 <__assert_func>
 80108a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108a4:	6005      	str	r5, [r0, #0]
 80108a6:	60c5      	str	r5, [r0, #12]
 80108a8:	69e3      	ldr	r3, [r4, #28]
 80108aa:	6819      	ldr	r1, [r3, #0]
 80108ac:	b151      	cbz	r1, 80108c4 <_dtoa_r+0x5c>
 80108ae:	685a      	ldr	r2, [r3, #4]
 80108b0:	604a      	str	r2, [r1, #4]
 80108b2:	2301      	movs	r3, #1
 80108b4:	4093      	lsls	r3, r2
 80108b6:	608b      	str	r3, [r1, #8]
 80108b8:	4620      	mov	r0, r4
 80108ba:	f000 ff07 	bl	80116cc <_Bfree>
 80108be:	69e3      	ldr	r3, [r4, #28]
 80108c0:	2200      	movs	r2, #0
 80108c2:	601a      	str	r2, [r3, #0]
 80108c4:	1e3b      	subs	r3, r7, #0
 80108c6:	bfbb      	ittet	lt
 80108c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80108cc:	9303      	strlt	r3, [sp, #12]
 80108ce:	2300      	movge	r3, #0
 80108d0:	2201      	movlt	r2, #1
 80108d2:	bfac      	ite	ge
 80108d4:	f8c8 3000 	strge.w	r3, [r8]
 80108d8:	f8c8 2000 	strlt.w	r2, [r8]
 80108dc:	4b9e      	ldr	r3, [pc, #632]	; (8010b58 <_dtoa_r+0x2f0>)
 80108de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80108e2:	ea33 0308 	bics.w	r3, r3, r8
 80108e6:	d11b      	bne.n	8010920 <_dtoa_r+0xb8>
 80108e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80108ee:	6013      	str	r3, [r2, #0]
 80108f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80108f4:	4333      	orrs	r3, r6
 80108f6:	f000 8593 	beq.w	8011420 <_dtoa_r+0xbb8>
 80108fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108fc:	b963      	cbnz	r3, 8010918 <_dtoa_r+0xb0>
 80108fe:	4b97      	ldr	r3, [pc, #604]	; (8010b5c <_dtoa_r+0x2f4>)
 8010900:	e027      	b.n	8010952 <_dtoa_r+0xea>
 8010902:	4b97      	ldr	r3, [pc, #604]	; (8010b60 <_dtoa_r+0x2f8>)
 8010904:	9300      	str	r3, [sp, #0]
 8010906:	3308      	adds	r3, #8
 8010908:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801090a:	6013      	str	r3, [r2, #0]
 801090c:	9800      	ldr	r0, [sp, #0]
 801090e:	b013      	add	sp, #76	; 0x4c
 8010910:	ecbd 8b04 	vpop	{d8-d9}
 8010914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010918:	4b90      	ldr	r3, [pc, #576]	; (8010b5c <_dtoa_r+0x2f4>)
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	3303      	adds	r3, #3
 801091e:	e7f3      	b.n	8010908 <_dtoa_r+0xa0>
 8010920:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010924:	2200      	movs	r2, #0
 8010926:	ec51 0b17 	vmov	r0, r1, d7
 801092a:	eeb0 8a47 	vmov.f32	s16, s14
 801092e:	eef0 8a67 	vmov.f32	s17, s15
 8010932:	2300      	movs	r3, #0
 8010934:	f7f0 f8f0 	bl	8000b18 <__aeabi_dcmpeq>
 8010938:	4681      	mov	r9, r0
 801093a:	b160      	cbz	r0, 8010956 <_dtoa_r+0xee>
 801093c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801093e:	2301      	movs	r3, #1
 8010940:	6013      	str	r3, [r2, #0]
 8010942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010944:	2b00      	cmp	r3, #0
 8010946:	f000 8568 	beq.w	801141a <_dtoa_r+0xbb2>
 801094a:	4b86      	ldr	r3, [pc, #536]	; (8010b64 <_dtoa_r+0x2fc>)
 801094c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801094e:	6013      	str	r3, [r2, #0]
 8010950:	3b01      	subs	r3, #1
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	e7da      	b.n	801090c <_dtoa_r+0xa4>
 8010956:	aa10      	add	r2, sp, #64	; 0x40
 8010958:	a911      	add	r1, sp, #68	; 0x44
 801095a:	4620      	mov	r0, r4
 801095c:	eeb0 0a48 	vmov.f32	s0, s16
 8010960:	eef0 0a68 	vmov.f32	s1, s17
 8010964:	f001 fa4e 	bl	8011e04 <__d2b>
 8010968:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801096c:	4682      	mov	sl, r0
 801096e:	2d00      	cmp	r5, #0
 8010970:	d07f      	beq.n	8010a72 <_dtoa_r+0x20a>
 8010972:	ee18 3a90 	vmov	r3, s17
 8010976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801097a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801097e:	ec51 0b18 	vmov	r0, r1, d8
 8010982:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801098a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801098e:	4619      	mov	r1, r3
 8010990:	2200      	movs	r2, #0
 8010992:	4b75      	ldr	r3, [pc, #468]	; (8010b68 <_dtoa_r+0x300>)
 8010994:	f7ef fca0 	bl	80002d8 <__aeabi_dsub>
 8010998:	a367      	add	r3, pc, #412	; (adr r3, 8010b38 <_dtoa_r+0x2d0>)
 801099a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099e:	f7ef fe53 	bl	8000648 <__aeabi_dmul>
 80109a2:	a367      	add	r3, pc, #412	; (adr r3, 8010b40 <_dtoa_r+0x2d8>)
 80109a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a8:	f7ef fc98 	bl	80002dc <__adddf3>
 80109ac:	4606      	mov	r6, r0
 80109ae:	4628      	mov	r0, r5
 80109b0:	460f      	mov	r7, r1
 80109b2:	f7ef fddf 	bl	8000574 <__aeabi_i2d>
 80109b6:	a364      	add	r3, pc, #400	; (adr r3, 8010b48 <_dtoa_r+0x2e0>)
 80109b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109bc:	f7ef fe44 	bl	8000648 <__aeabi_dmul>
 80109c0:	4602      	mov	r2, r0
 80109c2:	460b      	mov	r3, r1
 80109c4:	4630      	mov	r0, r6
 80109c6:	4639      	mov	r1, r7
 80109c8:	f7ef fc88 	bl	80002dc <__adddf3>
 80109cc:	4606      	mov	r6, r0
 80109ce:	460f      	mov	r7, r1
 80109d0:	f7f0 f8ea 	bl	8000ba8 <__aeabi_d2iz>
 80109d4:	2200      	movs	r2, #0
 80109d6:	4683      	mov	fp, r0
 80109d8:	2300      	movs	r3, #0
 80109da:	4630      	mov	r0, r6
 80109dc:	4639      	mov	r1, r7
 80109de:	f7f0 f8a5 	bl	8000b2c <__aeabi_dcmplt>
 80109e2:	b148      	cbz	r0, 80109f8 <_dtoa_r+0x190>
 80109e4:	4658      	mov	r0, fp
 80109e6:	f7ef fdc5 	bl	8000574 <__aeabi_i2d>
 80109ea:	4632      	mov	r2, r6
 80109ec:	463b      	mov	r3, r7
 80109ee:	f7f0 f893 	bl	8000b18 <__aeabi_dcmpeq>
 80109f2:	b908      	cbnz	r0, 80109f8 <_dtoa_r+0x190>
 80109f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80109f8:	f1bb 0f16 	cmp.w	fp, #22
 80109fc:	d857      	bhi.n	8010aae <_dtoa_r+0x246>
 80109fe:	4b5b      	ldr	r3, [pc, #364]	; (8010b6c <_dtoa_r+0x304>)
 8010a00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a08:	ec51 0b18 	vmov	r0, r1, d8
 8010a0c:	f7f0 f88e 	bl	8000b2c <__aeabi_dcmplt>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d04e      	beq.n	8010ab2 <_dtoa_r+0x24a>
 8010a14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a18:	2300      	movs	r3, #0
 8010a1a:	930c      	str	r3, [sp, #48]	; 0x30
 8010a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a1e:	1b5b      	subs	r3, r3, r5
 8010a20:	1e5a      	subs	r2, r3, #1
 8010a22:	bf45      	ittet	mi
 8010a24:	f1c3 0301 	rsbmi	r3, r3, #1
 8010a28:	9305      	strmi	r3, [sp, #20]
 8010a2a:	2300      	movpl	r3, #0
 8010a2c:	2300      	movmi	r3, #0
 8010a2e:	9206      	str	r2, [sp, #24]
 8010a30:	bf54      	ite	pl
 8010a32:	9305      	strpl	r3, [sp, #20]
 8010a34:	9306      	strmi	r3, [sp, #24]
 8010a36:	f1bb 0f00 	cmp.w	fp, #0
 8010a3a:	db3c      	blt.n	8010ab6 <_dtoa_r+0x24e>
 8010a3c:	9b06      	ldr	r3, [sp, #24]
 8010a3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010a42:	445b      	add	r3, fp
 8010a44:	9306      	str	r3, [sp, #24]
 8010a46:	2300      	movs	r3, #0
 8010a48:	9308      	str	r3, [sp, #32]
 8010a4a:	9b07      	ldr	r3, [sp, #28]
 8010a4c:	2b09      	cmp	r3, #9
 8010a4e:	d868      	bhi.n	8010b22 <_dtoa_r+0x2ba>
 8010a50:	2b05      	cmp	r3, #5
 8010a52:	bfc4      	itt	gt
 8010a54:	3b04      	subgt	r3, #4
 8010a56:	9307      	strgt	r3, [sp, #28]
 8010a58:	9b07      	ldr	r3, [sp, #28]
 8010a5a:	f1a3 0302 	sub.w	r3, r3, #2
 8010a5e:	bfcc      	ite	gt
 8010a60:	2500      	movgt	r5, #0
 8010a62:	2501      	movle	r5, #1
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	f200 8085 	bhi.w	8010b74 <_dtoa_r+0x30c>
 8010a6a:	e8df f003 	tbb	[pc, r3]
 8010a6e:	3b2e      	.short	0x3b2e
 8010a70:	5839      	.short	0x5839
 8010a72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010a76:	441d      	add	r5, r3
 8010a78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010a7c:	2b20      	cmp	r3, #32
 8010a7e:	bfc1      	itttt	gt
 8010a80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a84:	fa08 f803 	lslgt.w	r8, r8, r3
 8010a88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010a8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010a90:	bfd6      	itet	le
 8010a92:	f1c3 0320 	rsble	r3, r3, #32
 8010a96:	ea48 0003 	orrgt.w	r0, r8, r3
 8010a9a:	fa06 f003 	lslle.w	r0, r6, r3
 8010a9e:	f7ef fd59 	bl	8000554 <__aeabi_ui2d>
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010aa8:	3d01      	subs	r5, #1
 8010aaa:	920e      	str	r2, [sp, #56]	; 0x38
 8010aac:	e76f      	b.n	801098e <_dtoa_r+0x126>
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e7b3      	b.n	8010a1a <_dtoa_r+0x1b2>
 8010ab2:	900c      	str	r0, [sp, #48]	; 0x30
 8010ab4:	e7b2      	b.n	8010a1c <_dtoa_r+0x1b4>
 8010ab6:	9b05      	ldr	r3, [sp, #20]
 8010ab8:	eba3 030b 	sub.w	r3, r3, fp
 8010abc:	9305      	str	r3, [sp, #20]
 8010abe:	f1cb 0300 	rsb	r3, fp, #0
 8010ac2:	9308      	str	r3, [sp, #32]
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ac8:	e7bf      	b.n	8010a4a <_dtoa_r+0x1e2>
 8010aca:	2300      	movs	r3, #0
 8010acc:	9309      	str	r3, [sp, #36]	; 0x24
 8010ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	dc52      	bgt.n	8010b7a <_dtoa_r+0x312>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	9304      	str	r3, [sp, #16]
 8010ada:	461a      	mov	r2, r3
 8010adc:	920a      	str	r2, [sp, #40]	; 0x28
 8010ade:	e00b      	b.n	8010af8 <_dtoa_r+0x290>
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e7f3      	b.n	8010acc <_dtoa_r+0x264>
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aea:	445b      	add	r3, fp
 8010aec:	9301      	str	r3, [sp, #4]
 8010aee:	3301      	adds	r3, #1
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	9304      	str	r3, [sp, #16]
 8010af4:	bfb8      	it	lt
 8010af6:	2301      	movlt	r3, #1
 8010af8:	69e0      	ldr	r0, [r4, #28]
 8010afa:	2100      	movs	r1, #0
 8010afc:	2204      	movs	r2, #4
 8010afe:	f102 0614 	add.w	r6, r2, #20
 8010b02:	429e      	cmp	r6, r3
 8010b04:	d93d      	bls.n	8010b82 <_dtoa_r+0x31a>
 8010b06:	6041      	str	r1, [r0, #4]
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f000 fd9f 	bl	801164c <_Balloc>
 8010b0e:	9000      	str	r0, [sp, #0]
 8010b10:	2800      	cmp	r0, #0
 8010b12:	d139      	bne.n	8010b88 <_dtoa_r+0x320>
 8010b14:	4b16      	ldr	r3, [pc, #88]	; (8010b70 <_dtoa_r+0x308>)
 8010b16:	4602      	mov	r2, r0
 8010b18:	f240 11af 	movw	r1, #431	; 0x1af
 8010b1c:	e6bd      	b.n	801089a <_dtoa_r+0x32>
 8010b1e:	2301      	movs	r3, #1
 8010b20:	e7e1      	b.n	8010ae6 <_dtoa_r+0x27e>
 8010b22:	2501      	movs	r5, #1
 8010b24:	2300      	movs	r3, #0
 8010b26:	9307      	str	r3, [sp, #28]
 8010b28:	9509      	str	r5, [sp, #36]	; 0x24
 8010b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b2e:	9301      	str	r3, [sp, #4]
 8010b30:	9304      	str	r3, [sp, #16]
 8010b32:	2200      	movs	r2, #0
 8010b34:	2312      	movs	r3, #18
 8010b36:	e7d1      	b.n	8010adc <_dtoa_r+0x274>
 8010b38:	636f4361 	.word	0x636f4361
 8010b3c:	3fd287a7 	.word	0x3fd287a7
 8010b40:	8b60c8b3 	.word	0x8b60c8b3
 8010b44:	3fc68a28 	.word	0x3fc68a28
 8010b48:	509f79fb 	.word	0x509f79fb
 8010b4c:	3fd34413 	.word	0x3fd34413
 8010b50:	08015d58 	.word	0x08015d58
 8010b54:	08015d6f 	.word	0x08015d6f
 8010b58:	7ff00000 	.word	0x7ff00000
 8010b5c:	08015d54 	.word	0x08015d54
 8010b60:	08015d4b 	.word	0x08015d4b
 8010b64:	080160b1 	.word	0x080160b1
 8010b68:	3ff80000 	.word	0x3ff80000
 8010b6c:	08015e60 	.word	0x08015e60
 8010b70:	08015dc7 	.word	0x08015dc7
 8010b74:	2301      	movs	r3, #1
 8010b76:	9309      	str	r3, [sp, #36]	; 0x24
 8010b78:	e7d7      	b.n	8010b2a <_dtoa_r+0x2c2>
 8010b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	9304      	str	r3, [sp, #16]
 8010b80:	e7ba      	b.n	8010af8 <_dtoa_r+0x290>
 8010b82:	3101      	adds	r1, #1
 8010b84:	0052      	lsls	r2, r2, #1
 8010b86:	e7ba      	b.n	8010afe <_dtoa_r+0x296>
 8010b88:	69e3      	ldr	r3, [r4, #28]
 8010b8a:	9a00      	ldr	r2, [sp, #0]
 8010b8c:	601a      	str	r2, [r3, #0]
 8010b8e:	9b04      	ldr	r3, [sp, #16]
 8010b90:	2b0e      	cmp	r3, #14
 8010b92:	f200 80a8 	bhi.w	8010ce6 <_dtoa_r+0x47e>
 8010b96:	2d00      	cmp	r5, #0
 8010b98:	f000 80a5 	beq.w	8010ce6 <_dtoa_r+0x47e>
 8010b9c:	f1bb 0f00 	cmp.w	fp, #0
 8010ba0:	dd38      	ble.n	8010c14 <_dtoa_r+0x3ac>
 8010ba2:	4bc0      	ldr	r3, [pc, #768]	; (8010ea4 <_dtoa_r+0x63c>)
 8010ba4:	f00b 020f 	and.w	r2, fp, #15
 8010ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010bb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010bb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010bb8:	d019      	beq.n	8010bee <_dtoa_r+0x386>
 8010bba:	4bbb      	ldr	r3, [pc, #748]	; (8010ea8 <_dtoa_r+0x640>)
 8010bbc:	ec51 0b18 	vmov	r0, r1, d8
 8010bc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010bc4:	f7ef fe6a 	bl	800089c <__aeabi_ddiv>
 8010bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bcc:	f008 080f 	and.w	r8, r8, #15
 8010bd0:	2503      	movs	r5, #3
 8010bd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010ea8 <_dtoa_r+0x640>
 8010bd6:	f1b8 0f00 	cmp.w	r8, #0
 8010bda:	d10a      	bne.n	8010bf2 <_dtoa_r+0x38a>
 8010bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010be0:	4632      	mov	r2, r6
 8010be2:	463b      	mov	r3, r7
 8010be4:	f7ef fe5a 	bl	800089c <__aeabi_ddiv>
 8010be8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bec:	e02b      	b.n	8010c46 <_dtoa_r+0x3de>
 8010bee:	2502      	movs	r5, #2
 8010bf0:	e7ef      	b.n	8010bd2 <_dtoa_r+0x36a>
 8010bf2:	f018 0f01 	tst.w	r8, #1
 8010bf6:	d008      	beq.n	8010c0a <_dtoa_r+0x3a2>
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	4639      	mov	r1, r7
 8010bfc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010c00:	f7ef fd22 	bl	8000648 <__aeabi_dmul>
 8010c04:	3501      	adds	r5, #1
 8010c06:	4606      	mov	r6, r0
 8010c08:	460f      	mov	r7, r1
 8010c0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010c0e:	f109 0908 	add.w	r9, r9, #8
 8010c12:	e7e0      	b.n	8010bd6 <_dtoa_r+0x36e>
 8010c14:	f000 809f 	beq.w	8010d56 <_dtoa_r+0x4ee>
 8010c18:	f1cb 0600 	rsb	r6, fp, #0
 8010c1c:	4ba1      	ldr	r3, [pc, #644]	; (8010ea4 <_dtoa_r+0x63c>)
 8010c1e:	4fa2      	ldr	r7, [pc, #648]	; (8010ea8 <_dtoa_r+0x640>)
 8010c20:	f006 020f 	and.w	r2, r6, #15
 8010c24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2c:	ec51 0b18 	vmov	r0, r1, d8
 8010c30:	f7ef fd0a 	bl	8000648 <__aeabi_dmul>
 8010c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c38:	1136      	asrs	r6, r6, #4
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	2502      	movs	r5, #2
 8010c3e:	2e00      	cmp	r6, #0
 8010c40:	d17e      	bne.n	8010d40 <_dtoa_r+0x4d8>
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d1d0      	bne.n	8010be8 <_dtoa_r+0x380>
 8010c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f000 8084 	beq.w	8010d5a <_dtoa_r+0x4f2>
 8010c52:	4b96      	ldr	r3, [pc, #600]	; (8010eac <_dtoa_r+0x644>)
 8010c54:	2200      	movs	r2, #0
 8010c56:	4640      	mov	r0, r8
 8010c58:	4649      	mov	r1, r9
 8010c5a:	f7ef ff67 	bl	8000b2c <__aeabi_dcmplt>
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	d07b      	beq.n	8010d5a <_dtoa_r+0x4f2>
 8010c62:	9b04      	ldr	r3, [sp, #16]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d078      	beq.n	8010d5a <_dtoa_r+0x4f2>
 8010c68:	9b01      	ldr	r3, [sp, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	dd39      	ble.n	8010ce2 <_dtoa_r+0x47a>
 8010c6e:	4b90      	ldr	r3, [pc, #576]	; (8010eb0 <_dtoa_r+0x648>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	4640      	mov	r0, r8
 8010c74:	4649      	mov	r1, r9
 8010c76:	f7ef fce7 	bl	8000648 <__aeabi_dmul>
 8010c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c7e:	9e01      	ldr	r6, [sp, #4]
 8010c80:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010c84:	3501      	adds	r5, #1
 8010c86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	f7ef fc72 	bl	8000574 <__aeabi_i2d>
 8010c90:	4642      	mov	r2, r8
 8010c92:	464b      	mov	r3, r9
 8010c94:	f7ef fcd8 	bl	8000648 <__aeabi_dmul>
 8010c98:	4b86      	ldr	r3, [pc, #536]	; (8010eb4 <_dtoa_r+0x64c>)
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f7ef fb1e 	bl	80002dc <__adddf3>
 8010ca0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ca8:	9303      	str	r3, [sp, #12]
 8010caa:	2e00      	cmp	r6, #0
 8010cac:	d158      	bne.n	8010d60 <_dtoa_r+0x4f8>
 8010cae:	4b82      	ldr	r3, [pc, #520]	; (8010eb8 <_dtoa_r+0x650>)
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	4640      	mov	r0, r8
 8010cb4:	4649      	mov	r1, r9
 8010cb6:	f7ef fb0f 	bl	80002d8 <__aeabi_dsub>
 8010cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cbe:	4680      	mov	r8, r0
 8010cc0:	4689      	mov	r9, r1
 8010cc2:	f7ef ff51 	bl	8000b68 <__aeabi_dcmpgt>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	f040 8296 	bne.w	80111f8 <_dtoa_r+0x990>
 8010ccc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010cd0:	4640      	mov	r0, r8
 8010cd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010cd6:	4649      	mov	r1, r9
 8010cd8:	f7ef ff28 	bl	8000b2c <__aeabi_dcmplt>
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	f040 8289 	bne.w	80111f4 <_dtoa_r+0x98c>
 8010ce2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f2c0 814e 	blt.w	8010f8a <_dtoa_r+0x722>
 8010cee:	f1bb 0f0e 	cmp.w	fp, #14
 8010cf2:	f300 814a 	bgt.w	8010f8a <_dtoa_r+0x722>
 8010cf6:	4b6b      	ldr	r3, [pc, #428]	; (8010ea4 <_dtoa_r+0x63c>)
 8010cf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f280 80dc 	bge.w	8010ec0 <_dtoa_r+0x658>
 8010d08:	9b04      	ldr	r3, [sp, #16]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	f300 80d8 	bgt.w	8010ec0 <_dtoa_r+0x658>
 8010d10:	f040 826f 	bne.w	80111f2 <_dtoa_r+0x98a>
 8010d14:	4b68      	ldr	r3, [pc, #416]	; (8010eb8 <_dtoa_r+0x650>)
 8010d16:	2200      	movs	r2, #0
 8010d18:	4640      	mov	r0, r8
 8010d1a:	4649      	mov	r1, r9
 8010d1c:	f7ef fc94 	bl	8000648 <__aeabi_dmul>
 8010d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d24:	f7ef ff16 	bl	8000b54 <__aeabi_dcmpge>
 8010d28:	9e04      	ldr	r6, [sp, #16]
 8010d2a:	4637      	mov	r7, r6
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	f040 8245 	bne.w	80111bc <_dtoa_r+0x954>
 8010d32:	9d00      	ldr	r5, [sp, #0]
 8010d34:	2331      	movs	r3, #49	; 0x31
 8010d36:	f805 3b01 	strb.w	r3, [r5], #1
 8010d3a:	f10b 0b01 	add.w	fp, fp, #1
 8010d3e:	e241      	b.n	80111c4 <_dtoa_r+0x95c>
 8010d40:	07f2      	lsls	r2, r6, #31
 8010d42:	d505      	bpl.n	8010d50 <_dtoa_r+0x4e8>
 8010d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d48:	f7ef fc7e 	bl	8000648 <__aeabi_dmul>
 8010d4c:	3501      	adds	r5, #1
 8010d4e:	2301      	movs	r3, #1
 8010d50:	1076      	asrs	r6, r6, #1
 8010d52:	3708      	adds	r7, #8
 8010d54:	e773      	b.n	8010c3e <_dtoa_r+0x3d6>
 8010d56:	2502      	movs	r5, #2
 8010d58:	e775      	b.n	8010c46 <_dtoa_r+0x3de>
 8010d5a:	9e04      	ldr	r6, [sp, #16]
 8010d5c:	465f      	mov	r7, fp
 8010d5e:	e792      	b.n	8010c86 <_dtoa_r+0x41e>
 8010d60:	9900      	ldr	r1, [sp, #0]
 8010d62:	4b50      	ldr	r3, [pc, #320]	; (8010ea4 <_dtoa_r+0x63c>)
 8010d64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d68:	4431      	add	r1, r6
 8010d6a:	9102      	str	r1, [sp, #8]
 8010d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d6e:	eeb0 9a47 	vmov.f32	s18, s14
 8010d72:	eef0 9a67 	vmov.f32	s19, s15
 8010d76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010d7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d7e:	2900      	cmp	r1, #0
 8010d80:	d044      	beq.n	8010e0c <_dtoa_r+0x5a4>
 8010d82:	494e      	ldr	r1, [pc, #312]	; (8010ebc <_dtoa_r+0x654>)
 8010d84:	2000      	movs	r0, #0
 8010d86:	f7ef fd89 	bl	800089c <__aeabi_ddiv>
 8010d8a:	ec53 2b19 	vmov	r2, r3, d9
 8010d8e:	f7ef faa3 	bl	80002d8 <__aeabi_dsub>
 8010d92:	9d00      	ldr	r5, [sp, #0]
 8010d94:	ec41 0b19 	vmov	d9, r0, r1
 8010d98:	4649      	mov	r1, r9
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	f7ef ff04 	bl	8000ba8 <__aeabi_d2iz>
 8010da0:	4606      	mov	r6, r0
 8010da2:	f7ef fbe7 	bl	8000574 <__aeabi_i2d>
 8010da6:	4602      	mov	r2, r0
 8010da8:	460b      	mov	r3, r1
 8010daa:	4640      	mov	r0, r8
 8010dac:	4649      	mov	r1, r9
 8010dae:	f7ef fa93 	bl	80002d8 <__aeabi_dsub>
 8010db2:	3630      	adds	r6, #48	; 0x30
 8010db4:	f805 6b01 	strb.w	r6, [r5], #1
 8010db8:	ec53 2b19 	vmov	r2, r3, d9
 8010dbc:	4680      	mov	r8, r0
 8010dbe:	4689      	mov	r9, r1
 8010dc0:	f7ef feb4 	bl	8000b2c <__aeabi_dcmplt>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d164      	bne.n	8010e92 <_dtoa_r+0x62a>
 8010dc8:	4642      	mov	r2, r8
 8010dca:	464b      	mov	r3, r9
 8010dcc:	4937      	ldr	r1, [pc, #220]	; (8010eac <_dtoa_r+0x644>)
 8010dce:	2000      	movs	r0, #0
 8010dd0:	f7ef fa82 	bl	80002d8 <__aeabi_dsub>
 8010dd4:	ec53 2b19 	vmov	r2, r3, d9
 8010dd8:	f7ef fea8 	bl	8000b2c <__aeabi_dcmplt>
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	f040 80b6 	bne.w	8010f4e <_dtoa_r+0x6e6>
 8010de2:	9b02      	ldr	r3, [sp, #8]
 8010de4:	429d      	cmp	r5, r3
 8010de6:	f43f af7c 	beq.w	8010ce2 <_dtoa_r+0x47a>
 8010dea:	4b31      	ldr	r3, [pc, #196]	; (8010eb0 <_dtoa_r+0x648>)
 8010dec:	ec51 0b19 	vmov	r0, r1, d9
 8010df0:	2200      	movs	r2, #0
 8010df2:	f7ef fc29 	bl	8000648 <__aeabi_dmul>
 8010df6:	4b2e      	ldr	r3, [pc, #184]	; (8010eb0 <_dtoa_r+0x648>)
 8010df8:	ec41 0b19 	vmov	d9, r0, r1
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	4640      	mov	r0, r8
 8010e00:	4649      	mov	r1, r9
 8010e02:	f7ef fc21 	bl	8000648 <__aeabi_dmul>
 8010e06:	4680      	mov	r8, r0
 8010e08:	4689      	mov	r9, r1
 8010e0a:	e7c5      	b.n	8010d98 <_dtoa_r+0x530>
 8010e0c:	ec51 0b17 	vmov	r0, r1, d7
 8010e10:	f7ef fc1a 	bl	8000648 <__aeabi_dmul>
 8010e14:	9b02      	ldr	r3, [sp, #8]
 8010e16:	9d00      	ldr	r5, [sp, #0]
 8010e18:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e1a:	ec41 0b19 	vmov	d9, r0, r1
 8010e1e:	4649      	mov	r1, r9
 8010e20:	4640      	mov	r0, r8
 8010e22:	f7ef fec1 	bl	8000ba8 <__aeabi_d2iz>
 8010e26:	4606      	mov	r6, r0
 8010e28:	f7ef fba4 	bl	8000574 <__aeabi_i2d>
 8010e2c:	3630      	adds	r6, #48	; 0x30
 8010e2e:	4602      	mov	r2, r0
 8010e30:	460b      	mov	r3, r1
 8010e32:	4640      	mov	r0, r8
 8010e34:	4649      	mov	r1, r9
 8010e36:	f7ef fa4f 	bl	80002d8 <__aeabi_dsub>
 8010e3a:	f805 6b01 	strb.w	r6, [r5], #1
 8010e3e:	9b02      	ldr	r3, [sp, #8]
 8010e40:	429d      	cmp	r5, r3
 8010e42:	4680      	mov	r8, r0
 8010e44:	4689      	mov	r9, r1
 8010e46:	f04f 0200 	mov.w	r2, #0
 8010e4a:	d124      	bne.n	8010e96 <_dtoa_r+0x62e>
 8010e4c:	4b1b      	ldr	r3, [pc, #108]	; (8010ebc <_dtoa_r+0x654>)
 8010e4e:	ec51 0b19 	vmov	r0, r1, d9
 8010e52:	f7ef fa43 	bl	80002dc <__adddf3>
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	4640      	mov	r0, r8
 8010e5c:	4649      	mov	r1, r9
 8010e5e:	f7ef fe83 	bl	8000b68 <__aeabi_dcmpgt>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	d173      	bne.n	8010f4e <_dtoa_r+0x6e6>
 8010e66:	ec53 2b19 	vmov	r2, r3, d9
 8010e6a:	4914      	ldr	r1, [pc, #80]	; (8010ebc <_dtoa_r+0x654>)
 8010e6c:	2000      	movs	r0, #0
 8010e6e:	f7ef fa33 	bl	80002d8 <__aeabi_dsub>
 8010e72:	4602      	mov	r2, r0
 8010e74:	460b      	mov	r3, r1
 8010e76:	4640      	mov	r0, r8
 8010e78:	4649      	mov	r1, r9
 8010e7a:	f7ef fe57 	bl	8000b2c <__aeabi_dcmplt>
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	f43f af2f 	beq.w	8010ce2 <_dtoa_r+0x47a>
 8010e84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010e86:	1e6b      	subs	r3, r5, #1
 8010e88:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e8e:	2b30      	cmp	r3, #48	; 0x30
 8010e90:	d0f8      	beq.n	8010e84 <_dtoa_r+0x61c>
 8010e92:	46bb      	mov	fp, r7
 8010e94:	e04a      	b.n	8010f2c <_dtoa_r+0x6c4>
 8010e96:	4b06      	ldr	r3, [pc, #24]	; (8010eb0 <_dtoa_r+0x648>)
 8010e98:	f7ef fbd6 	bl	8000648 <__aeabi_dmul>
 8010e9c:	4680      	mov	r8, r0
 8010e9e:	4689      	mov	r9, r1
 8010ea0:	e7bd      	b.n	8010e1e <_dtoa_r+0x5b6>
 8010ea2:	bf00      	nop
 8010ea4:	08015e60 	.word	0x08015e60
 8010ea8:	08015e38 	.word	0x08015e38
 8010eac:	3ff00000 	.word	0x3ff00000
 8010eb0:	40240000 	.word	0x40240000
 8010eb4:	401c0000 	.word	0x401c0000
 8010eb8:	40140000 	.word	0x40140000
 8010ebc:	3fe00000 	.word	0x3fe00000
 8010ec0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ec4:	9d00      	ldr	r5, [sp, #0]
 8010ec6:	4642      	mov	r2, r8
 8010ec8:	464b      	mov	r3, r9
 8010eca:	4630      	mov	r0, r6
 8010ecc:	4639      	mov	r1, r7
 8010ece:	f7ef fce5 	bl	800089c <__aeabi_ddiv>
 8010ed2:	f7ef fe69 	bl	8000ba8 <__aeabi_d2iz>
 8010ed6:	9001      	str	r0, [sp, #4]
 8010ed8:	f7ef fb4c 	bl	8000574 <__aeabi_i2d>
 8010edc:	4642      	mov	r2, r8
 8010ede:	464b      	mov	r3, r9
 8010ee0:	f7ef fbb2 	bl	8000648 <__aeabi_dmul>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	4630      	mov	r0, r6
 8010eea:	4639      	mov	r1, r7
 8010eec:	f7ef f9f4 	bl	80002d8 <__aeabi_dsub>
 8010ef0:	9e01      	ldr	r6, [sp, #4]
 8010ef2:	9f04      	ldr	r7, [sp, #16]
 8010ef4:	3630      	adds	r6, #48	; 0x30
 8010ef6:	f805 6b01 	strb.w	r6, [r5], #1
 8010efa:	9e00      	ldr	r6, [sp, #0]
 8010efc:	1bae      	subs	r6, r5, r6
 8010efe:	42b7      	cmp	r7, r6
 8010f00:	4602      	mov	r2, r0
 8010f02:	460b      	mov	r3, r1
 8010f04:	d134      	bne.n	8010f70 <_dtoa_r+0x708>
 8010f06:	f7ef f9e9 	bl	80002dc <__adddf3>
 8010f0a:	4642      	mov	r2, r8
 8010f0c:	464b      	mov	r3, r9
 8010f0e:	4606      	mov	r6, r0
 8010f10:	460f      	mov	r7, r1
 8010f12:	f7ef fe29 	bl	8000b68 <__aeabi_dcmpgt>
 8010f16:	b9c8      	cbnz	r0, 8010f4c <_dtoa_r+0x6e4>
 8010f18:	4642      	mov	r2, r8
 8010f1a:	464b      	mov	r3, r9
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	4639      	mov	r1, r7
 8010f20:	f7ef fdfa 	bl	8000b18 <__aeabi_dcmpeq>
 8010f24:	b110      	cbz	r0, 8010f2c <_dtoa_r+0x6c4>
 8010f26:	9b01      	ldr	r3, [sp, #4]
 8010f28:	07db      	lsls	r3, r3, #31
 8010f2a:	d40f      	bmi.n	8010f4c <_dtoa_r+0x6e4>
 8010f2c:	4651      	mov	r1, sl
 8010f2e:	4620      	mov	r0, r4
 8010f30:	f000 fbcc 	bl	80116cc <_Bfree>
 8010f34:	2300      	movs	r3, #0
 8010f36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f38:	702b      	strb	r3, [r5, #0]
 8010f3a:	f10b 0301 	add.w	r3, fp, #1
 8010f3e:	6013      	str	r3, [r2, #0]
 8010f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	f43f ace2 	beq.w	801090c <_dtoa_r+0xa4>
 8010f48:	601d      	str	r5, [r3, #0]
 8010f4a:	e4df      	b.n	801090c <_dtoa_r+0xa4>
 8010f4c:	465f      	mov	r7, fp
 8010f4e:	462b      	mov	r3, r5
 8010f50:	461d      	mov	r5, r3
 8010f52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f56:	2a39      	cmp	r2, #57	; 0x39
 8010f58:	d106      	bne.n	8010f68 <_dtoa_r+0x700>
 8010f5a:	9a00      	ldr	r2, [sp, #0]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d1f7      	bne.n	8010f50 <_dtoa_r+0x6e8>
 8010f60:	9900      	ldr	r1, [sp, #0]
 8010f62:	2230      	movs	r2, #48	; 0x30
 8010f64:	3701      	adds	r7, #1
 8010f66:	700a      	strb	r2, [r1, #0]
 8010f68:	781a      	ldrb	r2, [r3, #0]
 8010f6a:	3201      	adds	r2, #1
 8010f6c:	701a      	strb	r2, [r3, #0]
 8010f6e:	e790      	b.n	8010e92 <_dtoa_r+0x62a>
 8010f70:	4ba3      	ldr	r3, [pc, #652]	; (8011200 <_dtoa_r+0x998>)
 8010f72:	2200      	movs	r2, #0
 8010f74:	f7ef fb68 	bl	8000648 <__aeabi_dmul>
 8010f78:	2200      	movs	r2, #0
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	4606      	mov	r6, r0
 8010f7e:	460f      	mov	r7, r1
 8010f80:	f7ef fdca 	bl	8000b18 <__aeabi_dcmpeq>
 8010f84:	2800      	cmp	r0, #0
 8010f86:	d09e      	beq.n	8010ec6 <_dtoa_r+0x65e>
 8010f88:	e7d0      	b.n	8010f2c <_dtoa_r+0x6c4>
 8010f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f8c:	2a00      	cmp	r2, #0
 8010f8e:	f000 80ca 	beq.w	8011126 <_dtoa_r+0x8be>
 8010f92:	9a07      	ldr	r2, [sp, #28]
 8010f94:	2a01      	cmp	r2, #1
 8010f96:	f300 80ad 	bgt.w	80110f4 <_dtoa_r+0x88c>
 8010f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f9c:	2a00      	cmp	r2, #0
 8010f9e:	f000 80a5 	beq.w	80110ec <_dtoa_r+0x884>
 8010fa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010fa6:	9e08      	ldr	r6, [sp, #32]
 8010fa8:	9d05      	ldr	r5, [sp, #20]
 8010faa:	9a05      	ldr	r2, [sp, #20]
 8010fac:	441a      	add	r2, r3
 8010fae:	9205      	str	r2, [sp, #20]
 8010fb0:	9a06      	ldr	r2, [sp, #24]
 8010fb2:	2101      	movs	r1, #1
 8010fb4:	441a      	add	r2, r3
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	9206      	str	r2, [sp, #24]
 8010fba:	f000 fc87 	bl	80118cc <__i2b>
 8010fbe:	4607      	mov	r7, r0
 8010fc0:	b165      	cbz	r5, 8010fdc <_dtoa_r+0x774>
 8010fc2:	9b06      	ldr	r3, [sp, #24]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	dd09      	ble.n	8010fdc <_dtoa_r+0x774>
 8010fc8:	42ab      	cmp	r3, r5
 8010fca:	9a05      	ldr	r2, [sp, #20]
 8010fcc:	bfa8      	it	ge
 8010fce:	462b      	movge	r3, r5
 8010fd0:	1ad2      	subs	r2, r2, r3
 8010fd2:	9205      	str	r2, [sp, #20]
 8010fd4:	9a06      	ldr	r2, [sp, #24]
 8010fd6:	1aed      	subs	r5, r5, r3
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	9306      	str	r3, [sp, #24]
 8010fdc:	9b08      	ldr	r3, [sp, #32]
 8010fde:	b1f3      	cbz	r3, 801101e <_dtoa_r+0x7b6>
 8010fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f000 80a3 	beq.w	801112e <_dtoa_r+0x8c6>
 8010fe8:	2e00      	cmp	r6, #0
 8010fea:	dd10      	ble.n	801100e <_dtoa_r+0x7a6>
 8010fec:	4639      	mov	r1, r7
 8010fee:	4632      	mov	r2, r6
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f000 fd2b 	bl	8011a4c <__pow5mult>
 8010ff6:	4652      	mov	r2, sl
 8010ff8:	4601      	mov	r1, r0
 8010ffa:	4607      	mov	r7, r0
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f000 fc7b 	bl	80118f8 <__multiply>
 8011002:	4651      	mov	r1, sl
 8011004:	4680      	mov	r8, r0
 8011006:	4620      	mov	r0, r4
 8011008:	f000 fb60 	bl	80116cc <_Bfree>
 801100c:	46c2      	mov	sl, r8
 801100e:	9b08      	ldr	r3, [sp, #32]
 8011010:	1b9a      	subs	r2, r3, r6
 8011012:	d004      	beq.n	801101e <_dtoa_r+0x7b6>
 8011014:	4651      	mov	r1, sl
 8011016:	4620      	mov	r0, r4
 8011018:	f000 fd18 	bl	8011a4c <__pow5mult>
 801101c:	4682      	mov	sl, r0
 801101e:	2101      	movs	r1, #1
 8011020:	4620      	mov	r0, r4
 8011022:	f000 fc53 	bl	80118cc <__i2b>
 8011026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011028:	2b00      	cmp	r3, #0
 801102a:	4606      	mov	r6, r0
 801102c:	f340 8081 	ble.w	8011132 <_dtoa_r+0x8ca>
 8011030:	461a      	mov	r2, r3
 8011032:	4601      	mov	r1, r0
 8011034:	4620      	mov	r0, r4
 8011036:	f000 fd09 	bl	8011a4c <__pow5mult>
 801103a:	9b07      	ldr	r3, [sp, #28]
 801103c:	2b01      	cmp	r3, #1
 801103e:	4606      	mov	r6, r0
 8011040:	dd7a      	ble.n	8011138 <_dtoa_r+0x8d0>
 8011042:	f04f 0800 	mov.w	r8, #0
 8011046:	6933      	ldr	r3, [r6, #16]
 8011048:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801104c:	6918      	ldr	r0, [r3, #16]
 801104e:	f000 fbef 	bl	8011830 <__hi0bits>
 8011052:	f1c0 0020 	rsb	r0, r0, #32
 8011056:	9b06      	ldr	r3, [sp, #24]
 8011058:	4418      	add	r0, r3
 801105a:	f010 001f 	ands.w	r0, r0, #31
 801105e:	f000 8094 	beq.w	801118a <_dtoa_r+0x922>
 8011062:	f1c0 0320 	rsb	r3, r0, #32
 8011066:	2b04      	cmp	r3, #4
 8011068:	f340 8085 	ble.w	8011176 <_dtoa_r+0x90e>
 801106c:	9b05      	ldr	r3, [sp, #20]
 801106e:	f1c0 001c 	rsb	r0, r0, #28
 8011072:	4403      	add	r3, r0
 8011074:	9305      	str	r3, [sp, #20]
 8011076:	9b06      	ldr	r3, [sp, #24]
 8011078:	4403      	add	r3, r0
 801107a:	4405      	add	r5, r0
 801107c:	9306      	str	r3, [sp, #24]
 801107e:	9b05      	ldr	r3, [sp, #20]
 8011080:	2b00      	cmp	r3, #0
 8011082:	dd05      	ble.n	8011090 <_dtoa_r+0x828>
 8011084:	4651      	mov	r1, sl
 8011086:	461a      	mov	r2, r3
 8011088:	4620      	mov	r0, r4
 801108a:	f000 fd39 	bl	8011b00 <__lshift>
 801108e:	4682      	mov	sl, r0
 8011090:	9b06      	ldr	r3, [sp, #24]
 8011092:	2b00      	cmp	r3, #0
 8011094:	dd05      	ble.n	80110a2 <_dtoa_r+0x83a>
 8011096:	4631      	mov	r1, r6
 8011098:	461a      	mov	r2, r3
 801109a:	4620      	mov	r0, r4
 801109c:	f000 fd30 	bl	8011b00 <__lshift>
 80110a0:	4606      	mov	r6, r0
 80110a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d072      	beq.n	801118e <_dtoa_r+0x926>
 80110a8:	4631      	mov	r1, r6
 80110aa:	4650      	mov	r0, sl
 80110ac:	f000 fd94 	bl	8011bd8 <__mcmp>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	da6c      	bge.n	801118e <_dtoa_r+0x926>
 80110b4:	2300      	movs	r3, #0
 80110b6:	4651      	mov	r1, sl
 80110b8:	220a      	movs	r2, #10
 80110ba:	4620      	mov	r0, r4
 80110bc:	f000 fb28 	bl	8011710 <__multadd>
 80110c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80110c6:	4682      	mov	sl, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 81b0 	beq.w	801142e <_dtoa_r+0xbc6>
 80110ce:	2300      	movs	r3, #0
 80110d0:	4639      	mov	r1, r7
 80110d2:	220a      	movs	r2, #10
 80110d4:	4620      	mov	r0, r4
 80110d6:	f000 fb1b 	bl	8011710 <__multadd>
 80110da:	9b01      	ldr	r3, [sp, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	4607      	mov	r7, r0
 80110e0:	f300 8096 	bgt.w	8011210 <_dtoa_r+0x9a8>
 80110e4:	9b07      	ldr	r3, [sp, #28]
 80110e6:	2b02      	cmp	r3, #2
 80110e8:	dc59      	bgt.n	801119e <_dtoa_r+0x936>
 80110ea:	e091      	b.n	8011210 <_dtoa_r+0x9a8>
 80110ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80110f2:	e758      	b.n	8010fa6 <_dtoa_r+0x73e>
 80110f4:	9b04      	ldr	r3, [sp, #16]
 80110f6:	1e5e      	subs	r6, r3, #1
 80110f8:	9b08      	ldr	r3, [sp, #32]
 80110fa:	42b3      	cmp	r3, r6
 80110fc:	bfbf      	itttt	lt
 80110fe:	9b08      	ldrlt	r3, [sp, #32]
 8011100:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011102:	9608      	strlt	r6, [sp, #32]
 8011104:	1af3      	sublt	r3, r6, r3
 8011106:	bfb4      	ite	lt
 8011108:	18d2      	addlt	r2, r2, r3
 801110a:	1b9e      	subge	r6, r3, r6
 801110c:	9b04      	ldr	r3, [sp, #16]
 801110e:	bfbc      	itt	lt
 8011110:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011112:	2600      	movlt	r6, #0
 8011114:	2b00      	cmp	r3, #0
 8011116:	bfb7      	itett	lt
 8011118:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801111c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011120:	1a9d      	sublt	r5, r3, r2
 8011122:	2300      	movlt	r3, #0
 8011124:	e741      	b.n	8010faa <_dtoa_r+0x742>
 8011126:	9e08      	ldr	r6, [sp, #32]
 8011128:	9d05      	ldr	r5, [sp, #20]
 801112a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801112c:	e748      	b.n	8010fc0 <_dtoa_r+0x758>
 801112e:	9a08      	ldr	r2, [sp, #32]
 8011130:	e770      	b.n	8011014 <_dtoa_r+0x7ac>
 8011132:	9b07      	ldr	r3, [sp, #28]
 8011134:	2b01      	cmp	r3, #1
 8011136:	dc19      	bgt.n	801116c <_dtoa_r+0x904>
 8011138:	9b02      	ldr	r3, [sp, #8]
 801113a:	b9bb      	cbnz	r3, 801116c <_dtoa_r+0x904>
 801113c:	9b03      	ldr	r3, [sp, #12]
 801113e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011142:	b99b      	cbnz	r3, 801116c <_dtoa_r+0x904>
 8011144:	9b03      	ldr	r3, [sp, #12]
 8011146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801114a:	0d1b      	lsrs	r3, r3, #20
 801114c:	051b      	lsls	r3, r3, #20
 801114e:	b183      	cbz	r3, 8011172 <_dtoa_r+0x90a>
 8011150:	9b05      	ldr	r3, [sp, #20]
 8011152:	3301      	adds	r3, #1
 8011154:	9305      	str	r3, [sp, #20]
 8011156:	9b06      	ldr	r3, [sp, #24]
 8011158:	3301      	adds	r3, #1
 801115a:	9306      	str	r3, [sp, #24]
 801115c:	f04f 0801 	mov.w	r8, #1
 8011160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011162:	2b00      	cmp	r3, #0
 8011164:	f47f af6f 	bne.w	8011046 <_dtoa_r+0x7de>
 8011168:	2001      	movs	r0, #1
 801116a:	e774      	b.n	8011056 <_dtoa_r+0x7ee>
 801116c:	f04f 0800 	mov.w	r8, #0
 8011170:	e7f6      	b.n	8011160 <_dtoa_r+0x8f8>
 8011172:	4698      	mov	r8, r3
 8011174:	e7f4      	b.n	8011160 <_dtoa_r+0x8f8>
 8011176:	d082      	beq.n	801107e <_dtoa_r+0x816>
 8011178:	9a05      	ldr	r2, [sp, #20]
 801117a:	331c      	adds	r3, #28
 801117c:	441a      	add	r2, r3
 801117e:	9205      	str	r2, [sp, #20]
 8011180:	9a06      	ldr	r2, [sp, #24]
 8011182:	441a      	add	r2, r3
 8011184:	441d      	add	r5, r3
 8011186:	9206      	str	r2, [sp, #24]
 8011188:	e779      	b.n	801107e <_dtoa_r+0x816>
 801118a:	4603      	mov	r3, r0
 801118c:	e7f4      	b.n	8011178 <_dtoa_r+0x910>
 801118e:	9b04      	ldr	r3, [sp, #16]
 8011190:	2b00      	cmp	r3, #0
 8011192:	dc37      	bgt.n	8011204 <_dtoa_r+0x99c>
 8011194:	9b07      	ldr	r3, [sp, #28]
 8011196:	2b02      	cmp	r3, #2
 8011198:	dd34      	ble.n	8011204 <_dtoa_r+0x99c>
 801119a:	9b04      	ldr	r3, [sp, #16]
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	9b01      	ldr	r3, [sp, #4]
 80111a0:	b963      	cbnz	r3, 80111bc <_dtoa_r+0x954>
 80111a2:	4631      	mov	r1, r6
 80111a4:	2205      	movs	r2, #5
 80111a6:	4620      	mov	r0, r4
 80111a8:	f000 fab2 	bl	8011710 <__multadd>
 80111ac:	4601      	mov	r1, r0
 80111ae:	4606      	mov	r6, r0
 80111b0:	4650      	mov	r0, sl
 80111b2:	f000 fd11 	bl	8011bd8 <__mcmp>
 80111b6:	2800      	cmp	r0, #0
 80111b8:	f73f adbb 	bgt.w	8010d32 <_dtoa_r+0x4ca>
 80111bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111be:	9d00      	ldr	r5, [sp, #0]
 80111c0:	ea6f 0b03 	mvn.w	fp, r3
 80111c4:	f04f 0800 	mov.w	r8, #0
 80111c8:	4631      	mov	r1, r6
 80111ca:	4620      	mov	r0, r4
 80111cc:	f000 fa7e 	bl	80116cc <_Bfree>
 80111d0:	2f00      	cmp	r7, #0
 80111d2:	f43f aeab 	beq.w	8010f2c <_dtoa_r+0x6c4>
 80111d6:	f1b8 0f00 	cmp.w	r8, #0
 80111da:	d005      	beq.n	80111e8 <_dtoa_r+0x980>
 80111dc:	45b8      	cmp	r8, r7
 80111de:	d003      	beq.n	80111e8 <_dtoa_r+0x980>
 80111e0:	4641      	mov	r1, r8
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 fa72 	bl	80116cc <_Bfree>
 80111e8:	4639      	mov	r1, r7
 80111ea:	4620      	mov	r0, r4
 80111ec:	f000 fa6e 	bl	80116cc <_Bfree>
 80111f0:	e69c      	b.n	8010f2c <_dtoa_r+0x6c4>
 80111f2:	2600      	movs	r6, #0
 80111f4:	4637      	mov	r7, r6
 80111f6:	e7e1      	b.n	80111bc <_dtoa_r+0x954>
 80111f8:	46bb      	mov	fp, r7
 80111fa:	4637      	mov	r7, r6
 80111fc:	e599      	b.n	8010d32 <_dtoa_r+0x4ca>
 80111fe:	bf00      	nop
 8011200:	40240000 	.word	0x40240000
 8011204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011206:	2b00      	cmp	r3, #0
 8011208:	f000 80c8 	beq.w	801139c <_dtoa_r+0xb34>
 801120c:	9b04      	ldr	r3, [sp, #16]
 801120e:	9301      	str	r3, [sp, #4]
 8011210:	2d00      	cmp	r5, #0
 8011212:	dd05      	ble.n	8011220 <_dtoa_r+0x9b8>
 8011214:	4639      	mov	r1, r7
 8011216:	462a      	mov	r2, r5
 8011218:	4620      	mov	r0, r4
 801121a:	f000 fc71 	bl	8011b00 <__lshift>
 801121e:	4607      	mov	r7, r0
 8011220:	f1b8 0f00 	cmp.w	r8, #0
 8011224:	d05b      	beq.n	80112de <_dtoa_r+0xa76>
 8011226:	6879      	ldr	r1, [r7, #4]
 8011228:	4620      	mov	r0, r4
 801122a:	f000 fa0f 	bl	801164c <_Balloc>
 801122e:	4605      	mov	r5, r0
 8011230:	b928      	cbnz	r0, 801123e <_dtoa_r+0x9d6>
 8011232:	4b83      	ldr	r3, [pc, #524]	; (8011440 <_dtoa_r+0xbd8>)
 8011234:	4602      	mov	r2, r0
 8011236:	f240 21ef 	movw	r1, #751	; 0x2ef
 801123a:	f7ff bb2e 	b.w	801089a <_dtoa_r+0x32>
 801123e:	693a      	ldr	r2, [r7, #16]
 8011240:	3202      	adds	r2, #2
 8011242:	0092      	lsls	r2, r2, #2
 8011244:	f107 010c 	add.w	r1, r7, #12
 8011248:	300c      	adds	r0, #12
 801124a:	f7ff fa70 	bl	801072e <memcpy>
 801124e:	2201      	movs	r2, #1
 8011250:	4629      	mov	r1, r5
 8011252:	4620      	mov	r0, r4
 8011254:	f000 fc54 	bl	8011b00 <__lshift>
 8011258:	9b00      	ldr	r3, [sp, #0]
 801125a:	3301      	adds	r3, #1
 801125c:	9304      	str	r3, [sp, #16]
 801125e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011262:	4413      	add	r3, r2
 8011264:	9308      	str	r3, [sp, #32]
 8011266:	9b02      	ldr	r3, [sp, #8]
 8011268:	f003 0301 	and.w	r3, r3, #1
 801126c:	46b8      	mov	r8, r7
 801126e:	9306      	str	r3, [sp, #24]
 8011270:	4607      	mov	r7, r0
 8011272:	9b04      	ldr	r3, [sp, #16]
 8011274:	4631      	mov	r1, r6
 8011276:	3b01      	subs	r3, #1
 8011278:	4650      	mov	r0, sl
 801127a:	9301      	str	r3, [sp, #4]
 801127c:	f7ff fa6c 	bl	8010758 <quorem>
 8011280:	4641      	mov	r1, r8
 8011282:	9002      	str	r0, [sp, #8]
 8011284:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011288:	4650      	mov	r0, sl
 801128a:	f000 fca5 	bl	8011bd8 <__mcmp>
 801128e:	463a      	mov	r2, r7
 8011290:	9005      	str	r0, [sp, #20]
 8011292:	4631      	mov	r1, r6
 8011294:	4620      	mov	r0, r4
 8011296:	f000 fcbb 	bl	8011c10 <__mdiff>
 801129a:	68c2      	ldr	r2, [r0, #12]
 801129c:	4605      	mov	r5, r0
 801129e:	bb02      	cbnz	r2, 80112e2 <_dtoa_r+0xa7a>
 80112a0:	4601      	mov	r1, r0
 80112a2:	4650      	mov	r0, sl
 80112a4:	f000 fc98 	bl	8011bd8 <__mcmp>
 80112a8:	4602      	mov	r2, r0
 80112aa:	4629      	mov	r1, r5
 80112ac:	4620      	mov	r0, r4
 80112ae:	9209      	str	r2, [sp, #36]	; 0x24
 80112b0:	f000 fa0c 	bl	80116cc <_Bfree>
 80112b4:	9b07      	ldr	r3, [sp, #28]
 80112b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112b8:	9d04      	ldr	r5, [sp, #16]
 80112ba:	ea43 0102 	orr.w	r1, r3, r2
 80112be:	9b06      	ldr	r3, [sp, #24]
 80112c0:	4319      	orrs	r1, r3
 80112c2:	d110      	bne.n	80112e6 <_dtoa_r+0xa7e>
 80112c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80112c8:	d029      	beq.n	801131e <_dtoa_r+0xab6>
 80112ca:	9b05      	ldr	r3, [sp, #20]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	dd02      	ble.n	80112d6 <_dtoa_r+0xa6e>
 80112d0:	9b02      	ldr	r3, [sp, #8]
 80112d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80112d6:	9b01      	ldr	r3, [sp, #4]
 80112d8:	f883 9000 	strb.w	r9, [r3]
 80112dc:	e774      	b.n	80111c8 <_dtoa_r+0x960>
 80112de:	4638      	mov	r0, r7
 80112e0:	e7ba      	b.n	8011258 <_dtoa_r+0x9f0>
 80112e2:	2201      	movs	r2, #1
 80112e4:	e7e1      	b.n	80112aa <_dtoa_r+0xa42>
 80112e6:	9b05      	ldr	r3, [sp, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	db04      	blt.n	80112f6 <_dtoa_r+0xa8e>
 80112ec:	9907      	ldr	r1, [sp, #28]
 80112ee:	430b      	orrs	r3, r1
 80112f0:	9906      	ldr	r1, [sp, #24]
 80112f2:	430b      	orrs	r3, r1
 80112f4:	d120      	bne.n	8011338 <_dtoa_r+0xad0>
 80112f6:	2a00      	cmp	r2, #0
 80112f8:	dded      	ble.n	80112d6 <_dtoa_r+0xa6e>
 80112fa:	4651      	mov	r1, sl
 80112fc:	2201      	movs	r2, #1
 80112fe:	4620      	mov	r0, r4
 8011300:	f000 fbfe 	bl	8011b00 <__lshift>
 8011304:	4631      	mov	r1, r6
 8011306:	4682      	mov	sl, r0
 8011308:	f000 fc66 	bl	8011bd8 <__mcmp>
 801130c:	2800      	cmp	r0, #0
 801130e:	dc03      	bgt.n	8011318 <_dtoa_r+0xab0>
 8011310:	d1e1      	bne.n	80112d6 <_dtoa_r+0xa6e>
 8011312:	f019 0f01 	tst.w	r9, #1
 8011316:	d0de      	beq.n	80112d6 <_dtoa_r+0xa6e>
 8011318:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801131c:	d1d8      	bne.n	80112d0 <_dtoa_r+0xa68>
 801131e:	9a01      	ldr	r2, [sp, #4]
 8011320:	2339      	movs	r3, #57	; 0x39
 8011322:	7013      	strb	r3, [r2, #0]
 8011324:	462b      	mov	r3, r5
 8011326:	461d      	mov	r5, r3
 8011328:	3b01      	subs	r3, #1
 801132a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801132e:	2a39      	cmp	r2, #57	; 0x39
 8011330:	d06c      	beq.n	801140c <_dtoa_r+0xba4>
 8011332:	3201      	adds	r2, #1
 8011334:	701a      	strb	r2, [r3, #0]
 8011336:	e747      	b.n	80111c8 <_dtoa_r+0x960>
 8011338:	2a00      	cmp	r2, #0
 801133a:	dd07      	ble.n	801134c <_dtoa_r+0xae4>
 801133c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011340:	d0ed      	beq.n	801131e <_dtoa_r+0xab6>
 8011342:	9a01      	ldr	r2, [sp, #4]
 8011344:	f109 0301 	add.w	r3, r9, #1
 8011348:	7013      	strb	r3, [r2, #0]
 801134a:	e73d      	b.n	80111c8 <_dtoa_r+0x960>
 801134c:	9b04      	ldr	r3, [sp, #16]
 801134e:	9a08      	ldr	r2, [sp, #32]
 8011350:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011354:	4293      	cmp	r3, r2
 8011356:	d043      	beq.n	80113e0 <_dtoa_r+0xb78>
 8011358:	4651      	mov	r1, sl
 801135a:	2300      	movs	r3, #0
 801135c:	220a      	movs	r2, #10
 801135e:	4620      	mov	r0, r4
 8011360:	f000 f9d6 	bl	8011710 <__multadd>
 8011364:	45b8      	cmp	r8, r7
 8011366:	4682      	mov	sl, r0
 8011368:	f04f 0300 	mov.w	r3, #0
 801136c:	f04f 020a 	mov.w	r2, #10
 8011370:	4641      	mov	r1, r8
 8011372:	4620      	mov	r0, r4
 8011374:	d107      	bne.n	8011386 <_dtoa_r+0xb1e>
 8011376:	f000 f9cb 	bl	8011710 <__multadd>
 801137a:	4680      	mov	r8, r0
 801137c:	4607      	mov	r7, r0
 801137e:	9b04      	ldr	r3, [sp, #16]
 8011380:	3301      	adds	r3, #1
 8011382:	9304      	str	r3, [sp, #16]
 8011384:	e775      	b.n	8011272 <_dtoa_r+0xa0a>
 8011386:	f000 f9c3 	bl	8011710 <__multadd>
 801138a:	4639      	mov	r1, r7
 801138c:	4680      	mov	r8, r0
 801138e:	2300      	movs	r3, #0
 8011390:	220a      	movs	r2, #10
 8011392:	4620      	mov	r0, r4
 8011394:	f000 f9bc 	bl	8011710 <__multadd>
 8011398:	4607      	mov	r7, r0
 801139a:	e7f0      	b.n	801137e <_dtoa_r+0xb16>
 801139c:	9b04      	ldr	r3, [sp, #16]
 801139e:	9301      	str	r3, [sp, #4]
 80113a0:	9d00      	ldr	r5, [sp, #0]
 80113a2:	4631      	mov	r1, r6
 80113a4:	4650      	mov	r0, sl
 80113a6:	f7ff f9d7 	bl	8010758 <quorem>
 80113aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80113ae:	9b00      	ldr	r3, [sp, #0]
 80113b0:	f805 9b01 	strb.w	r9, [r5], #1
 80113b4:	1aea      	subs	r2, r5, r3
 80113b6:	9b01      	ldr	r3, [sp, #4]
 80113b8:	4293      	cmp	r3, r2
 80113ba:	dd07      	ble.n	80113cc <_dtoa_r+0xb64>
 80113bc:	4651      	mov	r1, sl
 80113be:	2300      	movs	r3, #0
 80113c0:	220a      	movs	r2, #10
 80113c2:	4620      	mov	r0, r4
 80113c4:	f000 f9a4 	bl	8011710 <__multadd>
 80113c8:	4682      	mov	sl, r0
 80113ca:	e7ea      	b.n	80113a2 <_dtoa_r+0xb3a>
 80113cc:	9b01      	ldr	r3, [sp, #4]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	bfc8      	it	gt
 80113d2:	461d      	movgt	r5, r3
 80113d4:	9b00      	ldr	r3, [sp, #0]
 80113d6:	bfd8      	it	le
 80113d8:	2501      	movle	r5, #1
 80113da:	441d      	add	r5, r3
 80113dc:	f04f 0800 	mov.w	r8, #0
 80113e0:	4651      	mov	r1, sl
 80113e2:	2201      	movs	r2, #1
 80113e4:	4620      	mov	r0, r4
 80113e6:	f000 fb8b 	bl	8011b00 <__lshift>
 80113ea:	4631      	mov	r1, r6
 80113ec:	4682      	mov	sl, r0
 80113ee:	f000 fbf3 	bl	8011bd8 <__mcmp>
 80113f2:	2800      	cmp	r0, #0
 80113f4:	dc96      	bgt.n	8011324 <_dtoa_r+0xabc>
 80113f6:	d102      	bne.n	80113fe <_dtoa_r+0xb96>
 80113f8:	f019 0f01 	tst.w	r9, #1
 80113fc:	d192      	bne.n	8011324 <_dtoa_r+0xabc>
 80113fe:	462b      	mov	r3, r5
 8011400:	461d      	mov	r5, r3
 8011402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011406:	2a30      	cmp	r2, #48	; 0x30
 8011408:	d0fa      	beq.n	8011400 <_dtoa_r+0xb98>
 801140a:	e6dd      	b.n	80111c8 <_dtoa_r+0x960>
 801140c:	9a00      	ldr	r2, [sp, #0]
 801140e:	429a      	cmp	r2, r3
 8011410:	d189      	bne.n	8011326 <_dtoa_r+0xabe>
 8011412:	f10b 0b01 	add.w	fp, fp, #1
 8011416:	2331      	movs	r3, #49	; 0x31
 8011418:	e796      	b.n	8011348 <_dtoa_r+0xae0>
 801141a:	4b0a      	ldr	r3, [pc, #40]	; (8011444 <_dtoa_r+0xbdc>)
 801141c:	f7ff ba99 	b.w	8010952 <_dtoa_r+0xea>
 8011420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011422:	2b00      	cmp	r3, #0
 8011424:	f47f aa6d 	bne.w	8010902 <_dtoa_r+0x9a>
 8011428:	4b07      	ldr	r3, [pc, #28]	; (8011448 <_dtoa_r+0xbe0>)
 801142a:	f7ff ba92 	b.w	8010952 <_dtoa_r+0xea>
 801142e:	9b01      	ldr	r3, [sp, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	dcb5      	bgt.n	80113a0 <_dtoa_r+0xb38>
 8011434:	9b07      	ldr	r3, [sp, #28]
 8011436:	2b02      	cmp	r3, #2
 8011438:	f73f aeb1 	bgt.w	801119e <_dtoa_r+0x936>
 801143c:	e7b0      	b.n	80113a0 <_dtoa_r+0xb38>
 801143e:	bf00      	nop
 8011440:	08015dc7 	.word	0x08015dc7
 8011444:	080160b0 	.word	0x080160b0
 8011448:	08015d4b 	.word	0x08015d4b

0801144c <_free_r>:
 801144c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801144e:	2900      	cmp	r1, #0
 8011450:	d044      	beq.n	80114dc <_free_r+0x90>
 8011452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011456:	9001      	str	r0, [sp, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	f1a1 0404 	sub.w	r4, r1, #4
 801145e:	bfb8      	it	lt
 8011460:	18e4      	addlt	r4, r4, r3
 8011462:	f000 f8e7 	bl	8011634 <__malloc_lock>
 8011466:	4a1e      	ldr	r2, [pc, #120]	; (80114e0 <_free_r+0x94>)
 8011468:	9801      	ldr	r0, [sp, #4]
 801146a:	6813      	ldr	r3, [r2, #0]
 801146c:	b933      	cbnz	r3, 801147c <_free_r+0x30>
 801146e:	6063      	str	r3, [r4, #4]
 8011470:	6014      	str	r4, [r2, #0]
 8011472:	b003      	add	sp, #12
 8011474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011478:	f000 b8e2 	b.w	8011640 <__malloc_unlock>
 801147c:	42a3      	cmp	r3, r4
 801147e:	d908      	bls.n	8011492 <_free_r+0x46>
 8011480:	6825      	ldr	r5, [r4, #0]
 8011482:	1961      	adds	r1, r4, r5
 8011484:	428b      	cmp	r3, r1
 8011486:	bf01      	itttt	eq
 8011488:	6819      	ldreq	r1, [r3, #0]
 801148a:	685b      	ldreq	r3, [r3, #4]
 801148c:	1949      	addeq	r1, r1, r5
 801148e:	6021      	streq	r1, [r4, #0]
 8011490:	e7ed      	b.n	801146e <_free_r+0x22>
 8011492:	461a      	mov	r2, r3
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	b10b      	cbz	r3, 801149c <_free_r+0x50>
 8011498:	42a3      	cmp	r3, r4
 801149a:	d9fa      	bls.n	8011492 <_free_r+0x46>
 801149c:	6811      	ldr	r1, [r2, #0]
 801149e:	1855      	adds	r5, r2, r1
 80114a0:	42a5      	cmp	r5, r4
 80114a2:	d10b      	bne.n	80114bc <_free_r+0x70>
 80114a4:	6824      	ldr	r4, [r4, #0]
 80114a6:	4421      	add	r1, r4
 80114a8:	1854      	adds	r4, r2, r1
 80114aa:	42a3      	cmp	r3, r4
 80114ac:	6011      	str	r1, [r2, #0]
 80114ae:	d1e0      	bne.n	8011472 <_free_r+0x26>
 80114b0:	681c      	ldr	r4, [r3, #0]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	6053      	str	r3, [r2, #4]
 80114b6:	440c      	add	r4, r1
 80114b8:	6014      	str	r4, [r2, #0]
 80114ba:	e7da      	b.n	8011472 <_free_r+0x26>
 80114bc:	d902      	bls.n	80114c4 <_free_r+0x78>
 80114be:	230c      	movs	r3, #12
 80114c0:	6003      	str	r3, [r0, #0]
 80114c2:	e7d6      	b.n	8011472 <_free_r+0x26>
 80114c4:	6825      	ldr	r5, [r4, #0]
 80114c6:	1961      	adds	r1, r4, r5
 80114c8:	428b      	cmp	r3, r1
 80114ca:	bf04      	itt	eq
 80114cc:	6819      	ldreq	r1, [r3, #0]
 80114ce:	685b      	ldreq	r3, [r3, #4]
 80114d0:	6063      	str	r3, [r4, #4]
 80114d2:	bf04      	itt	eq
 80114d4:	1949      	addeq	r1, r1, r5
 80114d6:	6021      	streq	r1, [r4, #0]
 80114d8:	6054      	str	r4, [r2, #4]
 80114da:	e7ca      	b.n	8011472 <_free_r+0x26>
 80114dc:	b003      	add	sp, #12
 80114de:	bd30      	pop	{r4, r5, pc}
 80114e0:	20004b60 	.word	0x20004b60

080114e4 <malloc>:
 80114e4:	4b02      	ldr	r3, [pc, #8]	; (80114f0 <malloc+0xc>)
 80114e6:	4601      	mov	r1, r0
 80114e8:	6818      	ldr	r0, [r3, #0]
 80114ea:	f000 b823 	b.w	8011534 <_malloc_r>
 80114ee:	bf00      	nop
 80114f0:	20000070 	.word	0x20000070

080114f4 <sbrk_aligned>:
 80114f4:	b570      	push	{r4, r5, r6, lr}
 80114f6:	4e0e      	ldr	r6, [pc, #56]	; (8011530 <sbrk_aligned+0x3c>)
 80114f8:	460c      	mov	r4, r1
 80114fa:	6831      	ldr	r1, [r6, #0]
 80114fc:	4605      	mov	r5, r0
 80114fe:	b911      	cbnz	r1, 8011506 <sbrk_aligned+0x12>
 8011500:	f002 f99c 	bl	801383c <_sbrk_r>
 8011504:	6030      	str	r0, [r6, #0]
 8011506:	4621      	mov	r1, r4
 8011508:	4628      	mov	r0, r5
 801150a:	f002 f997 	bl	801383c <_sbrk_r>
 801150e:	1c43      	adds	r3, r0, #1
 8011510:	d00a      	beq.n	8011528 <sbrk_aligned+0x34>
 8011512:	1cc4      	adds	r4, r0, #3
 8011514:	f024 0403 	bic.w	r4, r4, #3
 8011518:	42a0      	cmp	r0, r4
 801151a:	d007      	beq.n	801152c <sbrk_aligned+0x38>
 801151c:	1a21      	subs	r1, r4, r0
 801151e:	4628      	mov	r0, r5
 8011520:	f002 f98c 	bl	801383c <_sbrk_r>
 8011524:	3001      	adds	r0, #1
 8011526:	d101      	bne.n	801152c <sbrk_aligned+0x38>
 8011528:	f04f 34ff 	mov.w	r4, #4294967295
 801152c:	4620      	mov	r0, r4
 801152e:	bd70      	pop	{r4, r5, r6, pc}
 8011530:	20004b64 	.word	0x20004b64

08011534 <_malloc_r>:
 8011534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011538:	1ccd      	adds	r5, r1, #3
 801153a:	f025 0503 	bic.w	r5, r5, #3
 801153e:	3508      	adds	r5, #8
 8011540:	2d0c      	cmp	r5, #12
 8011542:	bf38      	it	cc
 8011544:	250c      	movcc	r5, #12
 8011546:	2d00      	cmp	r5, #0
 8011548:	4607      	mov	r7, r0
 801154a:	db01      	blt.n	8011550 <_malloc_r+0x1c>
 801154c:	42a9      	cmp	r1, r5
 801154e:	d905      	bls.n	801155c <_malloc_r+0x28>
 8011550:	230c      	movs	r3, #12
 8011552:	603b      	str	r3, [r7, #0]
 8011554:	2600      	movs	r6, #0
 8011556:	4630      	mov	r0, r6
 8011558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801155c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011630 <_malloc_r+0xfc>
 8011560:	f000 f868 	bl	8011634 <__malloc_lock>
 8011564:	f8d8 3000 	ldr.w	r3, [r8]
 8011568:	461c      	mov	r4, r3
 801156a:	bb5c      	cbnz	r4, 80115c4 <_malloc_r+0x90>
 801156c:	4629      	mov	r1, r5
 801156e:	4638      	mov	r0, r7
 8011570:	f7ff ffc0 	bl	80114f4 <sbrk_aligned>
 8011574:	1c43      	adds	r3, r0, #1
 8011576:	4604      	mov	r4, r0
 8011578:	d155      	bne.n	8011626 <_malloc_r+0xf2>
 801157a:	f8d8 4000 	ldr.w	r4, [r8]
 801157e:	4626      	mov	r6, r4
 8011580:	2e00      	cmp	r6, #0
 8011582:	d145      	bne.n	8011610 <_malloc_r+0xdc>
 8011584:	2c00      	cmp	r4, #0
 8011586:	d048      	beq.n	801161a <_malloc_r+0xe6>
 8011588:	6823      	ldr	r3, [r4, #0]
 801158a:	4631      	mov	r1, r6
 801158c:	4638      	mov	r0, r7
 801158e:	eb04 0903 	add.w	r9, r4, r3
 8011592:	f002 f953 	bl	801383c <_sbrk_r>
 8011596:	4581      	cmp	r9, r0
 8011598:	d13f      	bne.n	801161a <_malloc_r+0xe6>
 801159a:	6821      	ldr	r1, [r4, #0]
 801159c:	1a6d      	subs	r5, r5, r1
 801159e:	4629      	mov	r1, r5
 80115a0:	4638      	mov	r0, r7
 80115a2:	f7ff ffa7 	bl	80114f4 <sbrk_aligned>
 80115a6:	3001      	adds	r0, #1
 80115a8:	d037      	beq.n	801161a <_malloc_r+0xe6>
 80115aa:	6823      	ldr	r3, [r4, #0]
 80115ac:	442b      	add	r3, r5
 80115ae:	6023      	str	r3, [r4, #0]
 80115b0:	f8d8 3000 	ldr.w	r3, [r8]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d038      	beq.n	801162a <_malloc_r+0xf6>
 80115b8:	685a      	ldr	r2, [r3, #4]
 80115ba:	42a2      	cmp	r2, r4
 80115bc:	d12b      	bne.n	8011616 <_malloc_r+0xe2>
 80115be:	2200      	movs	r2, #0
 80115c0:	605a      	str	r2, [r3, #4]
 80115c2:	e00f      	b.n	80115e4 <_malloc_r+0xb0>
 80115c4:	6822      	ldr	r2, [r4, #0]
 80115c6:	1b52      	subs	r2, r2, r5
 80115c8:	d41f      	bmi.n	801160a <_malloc_r+0xd6>
 80115ca:	2a0b      	cmp	r2, #11
 80115cc:	d917      	bls.n	80115fe <_malloc_r+0xca>
 80115ce:	1961      	adds	r1, r4, r5
 80115d0:	42a3      	cmp	r3, r4
 80115d2:	6025      	str	r5, [r4, #0]
 80115d4:	bf18      	it	ne
 80115d6:	6059      	strne	r1, [r3, #4]
 80115d8:	6863      	ldr	r3, [r4, #4]
 80115da:	bf08      	it	eq
 80115dc:	f8c8 1000 	streq.w	r1, [r8]
 80115e0:	5162      	str	r2, [r4, r5]
 80115e2:	604b      	str	r3, [r1, #4]
 80115e4:	4638      	mov	r0, r7
 80115e6:	f104 060b 	add.w	r6, r4, #11
 80115ea:	f000 f829 	bl	8011640 <__malloc_unlock>
 80115ee:	f026 0607 	bic.w	r6, r6, #7
 80115f2:	1d23      	adds	r3, r4, #4
 80115f4:	1af2      	subs	r2, r6, r3
 80115f6:	d0ae      	beq.n	8011556 <_malloc_r+0x22>
 80115f8:	1b9b      	subs	r3, r3, r6
 80115fa:	50a3      	str	r3, [r4, r2]
 80115fc:	e7ab      	b.n	8011556 <_malloc_r+0x22>
 80115fe:	42a3      	cmp	r3, r4
 8011600:	6862      	ldr	r2, [r4, #4]
 8011602:	d1dd      	bne.n	80115c0 <_malloc_r+0x8c>
 8011604:	f8c8 2000 	str.w	r2, [r8]
 8011608:	e7ec      	b.n	80115e4 <_malloc_r+0xb0>
 801160a:	4623      	mov	r3, r4
 801160c:	6864      	ldr	r4, [r4, #4]
 801160e:	e7ac      	b.n	801156a <_malloc_r+0x36>
 8011610:	4634      	mov	r4, r6
 8011612:	6876      	ldr	r6, [r6, #4]
 8011614:	e7b4      	b.n	8011580 <_malloc_r+0x4c>
 8011616:	4613      	mov	r3, r2
 8011618:	e7cc      	b.n	80115b4 <_malloc_r+0x80>
 801161a:	230c      	movs	r3, #12
 801161c:	603b      	str	r3, [r7, #0]
 801161e:	4638      	mov	r0, r7
 8011620:	f000 f80e 	bl	8011640 <__malloc_unlock>
 8011624:	e797      	b.n	8011556 <_malloc_r+0x22>
 8011626:	6025      	str	r5, [r4, #0]
 8011628:	e7dc      	b.n	80115e4 <_malloc_r+0xb0>
 801162a:	605b      	str	r3, [r3, #4]
 801162c:	deff      	udf	#255	; 0xff
 801162e:	bf00      	nop
 8011630:	20004b60 	.word	0x20004b60

08011634 <__malloc_lock>:
 8011634:	4801      	ldr	r0, [pc, #4]	; (801163c <__malloc_lock+0x8>)
 8011636:	f7ff b878 	b.w	801072a <__retarget_lock_acquire_recursive>
 801163a:	bf00      	nop
 801163c:	20004b5c 	.word	0x20004b5c

08011640 <__malloc_unlock>:
 8011640:	4801      	ldr	r0, [pc, #4]	; (8011648 <__malloc_unlock+0x8>)
 8011642:	f7ff b873 	b.w	801072c <__retarget_lock_release_recursive>
 8011646:	bf00      	nop
 8011648:	20004b5c 	.word	0x20004b5c

0801164c <_Balloc>:
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	69c6      	ldr	r6, [r0, #28]
 8011650:	4604      	mov	r4, r0
 8011652:	460d      	mov	r5, r1
 8011654:	b976      	cbnz	r6, 8011674 <_Balloc+0x28>
 8011656:	2010      	movs	r0, #16
 8011658:	f7ff ff44 	bl	80114e4 <malloc>
 801165c:	4602      	mov	r2, r0
 801165e:	61e0      	str	r0, [r4, #28]
 8011660:	b920      	cbnz	r0, 801166c <_Balloc+0x20>
 8011662:	4b18      	ldr	r3, [pc, #96]	; (80116c4 <_Balloc+0x78>)
 8011664:	4818      	ldr	r0, [pc, #96]	; (80116c8 <_Balloc+0x7c>)
 8011666:	216b      	movs	r1, #107	; 0x6b
 8011668:	f002 f902 	bl	8013870 <__assert_func>
 801166c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011670:	6006      	str	r6, [r0, #0]
 8011672:	60c6      	str	r6, [r0, #12]
 8011674:	69e6      	ldr	r6, [r4, #28]
 8011676:	68f3      	ldr	r3, [r6, #12]
 8011678:	b183      	cbz	r3, 801169c <_Balloc+0x50>
 801167a:	69e3      	ldr	r3, [r4, #28]
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011682:	b9b8      	cbnz	r0, 80116b4 <_Balloc+0x68>
 8011684:	2101      	movs	r1, #1
 8011686:	fa01 f605 	lsl.w	r6, r1, r5
 801168a:	1d72      	adds	r2, r6, #5
 801168c:	0092      	lsls	r2, r2, #2
 801168e:	4620      	mov	r0, r4
 8011690:	f002 f90c 	bl	80138ac <_calloc_r>
 8011694:	b160      	cbz	r0, 80116b0 <_Balloc+0x64>
 8011696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801169a:	e00e      	b.n	80116ba <_Balloc+0x6e>
 801169c:	2221      	movs	r2, #33	; 0x21
 801169e:	2104      	movs	r1, #4
 80116a0:	4620      	mov	r0, r4
 80116a2:	f002 f903 	bl	80138ac <_calloc_r>
 80116a6:	69e3      	ldr	r3, [r4, #28]
 80116a8:	60f0      	str	r0, [r6, #12]
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d1e4      	bne.n	801167a <_Balloc+0x2e>
 80116b0:	2000      	movs	r0, #0
 80116b2:	bd70      	pop	{r4, r5, r6, pc}
 80116b4:	6802      	ldr	r2, [r0, #0]
 80116b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116ba:	2300      	movs	r3, #0
 80116bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80116c0:	e7f7      	b.n	80116b2 <_Balloc+0x66>
 80116c2:	bf00      	nop
 80116c4:	08015d58 	.word	0x08015d58
 80116c8:	08015dd8 	.word	0x08015dd8

080116cc <_Bfree>:
 80116cc:	b570      	push	{r4, r5, r6, lr}
 80116ce:	69c6      	ldr	r6, [r0, #28]
 80116d0:	4605      	mov	r5, r0
 80116d2:	460c      	mov	r4, r1
 80116d4:	b976      	cbnz	r6, 80116f4 <_Bfree+0x28>
 80116d6:	2010      	movs	r0, #16
 80116d8:	f7ff ff04 	bl	80114e4 <malloc>
 80116dc:	4602      	mov	r2, r0
 80116de:	61e8      	str	r0, [r5, #28]
 80116e0:	b920      	cbnz	r0, 80116ec <_Bfree+0x20>
 80116e2:	4b09      	ldr	r3, [pc, #36]	; (8011708 <_Bfree+0x3c>)
 80116e4:	4809      	ldr	r0, [pc, #36]	; (801170c <_Bfree+0x40>)
 80116e6:	218f      	movs	r1, #143	; 0x8f
 80116e8:	f002 f8c2 	bl	8013870 <__assert_func>
 80116ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116f0:	6006      	str	r6, [r0, #0]
 80116f2:	60c6      	str	r6, [r0, #12]
 80116f4:	b13c      	cbz	r4, 8011706 <_Bfree+0x3a>
 80116f6:	69eb      	ldr	r3, [r5, #28]
 80116f8:	6862      	ldr	r2, [r4, #4]
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011700:	6021      	str	r1, [r4, #0]
 8011702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011706:	bd70      	pop	{r4, r5, r6, pc}
 8011708:	08015d58 	.word	0x08015d58
 801170c:	08015dd8 	.word	0x08015dd8

08011710 <__multadd>:
 8011710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011714:	690d      	ldr	r5, [r1, #16]
 8011716:	4607      	mov	r7, r0
 8011718:	460c      	mov	r4, r1
 801171a:	461e      	mov	r6, r3
 801171c:	f101 0c14 	add.w	ip, r1, #20
 8011720:	2000      	movs	r0, #0
 8011722:	f8dc 3000 	ldr.w	r3, [ip]
 8011726:	b299      	uxth	r1, r3
 8011728:	fb02 6101 	mla	r1, r2, r1, r6
 801172c:	0c1e      	lsrs	r6, r3, #16
 801172e:	0c0b      	lsrs	r3, r1, #16
 8011730:	fb02 3306 	mla	r3, r2, r6, r3
 8011734:	b289      	uxth	r1, r1
 8011736:	3001      	adds	r0, #1
 8011738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801173c:	4285      	cmp	r5, r0
 801173e:	f84c 1b04 	str.w	r1, [ip], #4
 8011742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011746:	dcec      	bgt.n	8011722 <__multadd+0x12>
 8011748:	b30e      	cbz	r6, 801178e <__multadd+0x7e>
 801174a:	68a3      	ldr	r3, [r4, #8]
 801174c:	42ab      	cmp	r3, r5
 801174e:	dc19      	bgt.n	8011784 <__multadd+0x74>
 8011750:	6861      	ldr	r1, [r4, #4]
 8011752:	4638      	mov	r0, r7
 8011754:	3101      	adds	r1, #1
 8011756:	f7ff ff79 	bl	801164c <_Balloc>
 801175a:	4680      	mov	r8, r0
 801175c:	b928      	cbnz	r0, 801176a <__multadd+0x5a>
 801175e:	4602      	mov	r2, r0
 8011760:	4b0c      	ldr	r3, [pc, #48]	; (8011794 <__multadd+0x84>)
 8011762:	480d      	ldr	r0, [pc, #52]	; (8011798 <__multadd+0x88>)
 8011764:	21ba      	movs	r1, #186	; 0xba
 8011766:	f002 f883 	bl	8013870 <__assert_func>
 801176a:	6922      	ldr	r2, [r4, #16]
 801176c:	3202      	adds	r2, #2
 801176e:	f104 010c 	add.w	r1, r4, #12
 8011772:	0092      	lsls	r2, r2, #2
 8011774:	300c      	adds	r0, #12
 8011776:	f7fe ffda 	bl	801072e <memcpy>
 801177a:	4621      	mov	r1, r4
 801177c:	4638      	mov	r0, r7
 801177e:	f7ff ffa5 	bl	80116cc <_Bfree>
 8011782:	4644      	mov	r4, r8
 8011784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011788:	3501      	adds	r5, #1
 801178a:	615e      	str	r6, [r3, #20]
 801178c:	6125      	str	r5, [r4, #16]
 801178e:	4620      	mov	r0, r4
 8011790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011794:	08015dc7 	.word	0x08015dc7
 8011798:	08015dd8 	.word	0x08015dd8

0801179c <__s2b>:
 801179c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117a0:	460c      	mov	r4, r1
 80117a2:	4615      	mov	r5, r2
 80117a4:	461f      	mov	r7, r3
 80117a6:	2209      	movs	r2, #9
 80117a8:	3308      	adds	r3, #8
 80117aa:	4606      	mov	r6, r0
 80117ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80117b0:	2100      	movs	r1, #0
 80117b2:	2201      	movs	r2, #1
 80117b4:	429a      	cmp	r2, r3
 80117b6:	db09      	blt.n	80117cc <__s2b+0x30>
 80117b8:	4630      	mov	r0, r6
 80117ba:	f7ff ff47 	bl	801164c <_Balloc>
 80117be:	b940      	cbnz	r0, 80117d2 <__s2b+0x36>
 80117c0:	4602      	mov	r2, r0
 80117c2:	4b19      	ldr	r3, [pc, #100]	; (8011828 <__s2b+0x8c>)
 80117c4:	4819      	ldr	r0, [pc, #100]	; (801182c <__s2b+0x90>)
 80117c6:	21d3      	movs	r1, #211	; 0xd3
 80117c8:	f002 f852 	bl	8013870 <__assert_func>
 80117cc:	0052      	lsls	r2, r2, #1
 80117ce:	3101      	adds	r1, #1
 80117d0:	e7f0      	b.n	80117b4 <__s2b+0x18>
 80117d2:	9b08      	ldr	r3, [sp, #32]
 80117d4:	6143      	str	r3, [r0, #20]
 80117d6:	2d09      	cmp	r5, #9
 80117d8:	f04f 0301 	mov.w	r3, #1
 80117dc:	6103      	str	r3, [r0, #16]
 80117de:	dd16      	ble.n	801180e <__s2b+0x72>
 80117e0:	f104 0909 	add.w	r9, r4, #9
 80117e4:	46c8      	mov	r8, r9
 80117e6:	442c      	add	r4, r5
 80117e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80117ec:	4601      	mov	r1, r0
 80117ee:	3b30      	subs	r3, #48	; 0x30
 80117f0:	220a      	movs	r2, #10
 80117f2:	4630      	mov	r0, r6
 80117f4:	f7ff ff8c 	bl	8011710 <__multadd>
 80117f8:	45a0      	cmp	r8, r4
 80117fa:	d1f5      	bne.n	80117e8 <__s2b+0x4c>
 80117fc:	f1a5 0408 	sub.w	r4, r5, #8
 8011800:	444c      	add	r4, r9
 8011802:	1b2d      	subs	r5, r5, r4
 8011804:	1963      	adds	r3, r4, r5
 8011806:	42bb      	cmp	r3, r7
 8011808:	db04      	blt.n	8011814 <__s2b+0x78>
 801180a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801180e:	340a      	adds	r4, #10
 8011810:	2509      	movs	r5, #9
 8011812:	e7f6      	b.n	8011802 <__s2b+0x66>
 8011814:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011818:	4601      	mov	r1, r0
 801181a:	3b30      	subs	r3, #48	; 0x30
 801181c:	220a      	movs	r2, #10
 801181e:	4630      	mov	r0, r6
 8011820:	f7ff ff76 	bl	8011710 <__multadd>
 8011824:	e7ee      	b.n	8011804 <__s2b+0x68>
 8011826:	bf00      	nop
 8011828:	08015dc7 	.word	0x08015dc7
 801182c:	08015dd8 	.word	0x08015dd8

08011830 <__hi0bits>:
 8011830:	0c03      	lsrs	r3, r0, #16
 8011832:	041b      	lsls	r3, r3, #16
 8011834:	b9d3      	cbnz	r3, 801186c <__hi0bits+0x3c>
 8011836:	0400      	lsls	r0, r0, #16
 8011838:	2310      	movs	r3, #16
 801183a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801183e:	bf04      	itt	eq
 8011840:	0200      	lsleq	r0, r0, #8
 8011842:	3308      	addeq	r3, #8
 8011844:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011848:	bf04      	itt	eq
 801184a:	0100      	lsleq	r0, r0, #4
 801184c:	3304      	addeq	r3, #4
 801184e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011852:	bf04      	itt	eq
 8011854:	0080      	lsleq	r0, r0, #2
 8011856:	3302      	addeq	r3, #2
 8011858:	2800      	cmp	r0, #0
 801185a:	db05      	blt.n	8011868 <__hi0bits+0x38>
 801185c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011860:	f103 0301 	add.w	r3, r3, #1
 8011864:	bf08      	it	eq
 8011866:	2320      	moveq	r3, #32
 8011868:	4618      	mov	r0, r3
 801186a:	4770      	bx	lr
 801186c:	2300      	movs	r3, #0
 801186e:	e7e4      	b.n	801183a <__hi0bits+0xa>

08011870 <__lo0bits>:
 8011870:	6803      	ldr	r3, [r0, #0]
 8011872:	f013 0207 	ands.w	r2, r3, #7
 8011876:	d00c      	beq.n	8011892 <__lo0bits+0x22>
 8011878:	07d9      	lsls	r1, r3, #31
 801187a:	d422      	bmi.n	80118c2 <__lo0bits+0x52>
 801187c:	079a      	lsls	r2, r3, #30
 801187e:	bf49      	itett	mi
 8011880:	085b      	lsrmi	r3, r3, #1
 8011882:	089b      	lsrpl	r3, r3, #2
 8011884:	6003      	strmi	r3, [r0, #0]
 8011886:	2201      	movmi	r2, #1
 8011888:	bf5c      	itt	pl
 801188a:	6003      	strpl	r3, [r0, #0]
 801188c:	2202      	movpl	r2, #2
 801188e:	4610      	mov	r0, r2
 8011890:	4770      	bx	lr
 8011892:	b299      	uxth	r1, r3
 8011894:	b909      	cbnz	r1, 801189a <__lo0bits+0x2a>
 8011896:	0c1b      	lsrs	r3, r3, #16
 8011898:	2210      	movs	r2, #16
 801189a:	b2d9      	uxtb	r1, r3
 801189c:	b909      	cbnz	r1, 80118a2 <__lo0bits+0x32>
 801189e:	3208      	adds	r2, #8
 80118a0:	0a1b      	lsrs	r3, r3, #8
 80118a2:	0719      	lsls	r1, r3, #28
 80118a4:	bf04      	itt	eq
 80118a6:	091b      	lsreq	r3, r3, #4
 80118a8:	3204      	addeq	r2, #4
 80118aa:	0799      	lsls	r1, r3, #30
 80118ac:	bf04      	itt	eq
 80118ae:	089b      	lsreq	r3, r3, #2
 80118b0:	3202      	addeq	r2, #2
 80118b2:	07d9      	lsls	r1, r3, #31
 80118b4:	d403      	bmi.n	80118be <__lo0bits+0x4e>
 80118b6:	085b      	lsrs	r3, r3, #1
 80118b8:	f102 0201 	add.w	r2, r2, #1
 80118bc:	d003      	beq.n	80118c6 <__lo0bits+0x56>
 80118be:	6003      	str	r3, [r0, #0]
 80118c0:	e7e5      	b.n	801188e <__lo0bits+0x1e>
 80118c2:	2200      	movs	r2, #0
 80118c4:	e7e3      	b.n	801188e <__lo0bits+0x1e>
 80118c6:	2220      	movs	r2, #32
 80118c8:	e7e1      	b.n	801188e <__lo0bits+0x1e>
	...

080118cc <__i2b>:
 80118cc:	b510      	push	{r4, lr}
 80118ce:	460c      	mov	r4, r1
 80118d0:	2101      	movs	r1, #1
 80118d2:	f7ff febb 	bl	801164c <_Balloc>
 80118d6:	4602      	mov	r2, r0
 80118d8:	b928      	cbnz	r0, 80118e6 <__i2b+0x1a>
 80118da:	4b05      	ldr	r3, [pc, #20]	; (80118f0 <__i2b+0x24>)
 80118dc:	4805      	ldr	r0, [pc, #20]	; (80118f4 <__i2b+0x28>)
 80118de:	f240 1145 	movw	r1, #325	; 0x145
 80118e2:	f001 ffc5 	bl	8013870 <__assert_func>
 80118e6:	2301      	movs	r3, #1
 80118e8:	6144      	str	r4, [r0, #20]
 80118ea:	6103      	str	r3, [r0, #16]
 80118ec:	bd10      	pop	{r4, pc}
 80118ee:	bf00      	nop
 80118f0:	08015dc7 	.word	0x08015dc7
 80118f4:	08015dd8 	.word	0x08015dd8

080118f8 <__multiply>:
 80118f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	4691      	mov	r9, r2
 80118fe:	690a      	ldr	r2, [r1, #16]
 8011900:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011904:	429a      	cmp	r2, r3
 8011906:	bfb8      	it	lt
 8011908:	460b      	movlt	r3, r1
 801190a:	460c      	mov	r4, r1
 801190c:	bfbc      	itt	lt
 801190e:	464c      	movlt	r4, r9
 8011910:	4699      	movlt	r9, r3
 8011912:	6927      	ldr	r7, [r4, #16]
 8011914:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011918:	68a3      	ldr	r3, [r4, #8]
 801191a:	6861      	ldr	r1, [r4, #4]
 801191c:	eb07 060a 	add.w	r6, r7, sl
 8011920:	42b3      	cmp	r3, r6
 8011922:	b085      	sub	sp, #20
 8011924:	bfb8      	it	lt
 8011926:	3101      	addlt	r1, #1
 8011928:	f7ff fe90 	bl	801164c <_Balloc>
 801192c:	b930      	cbnz	r0, 801193c <__multiply+0x44>
 801192e:	4602      	mov	r2, r0
 8011930:	4b44      	ldr	r3, [pc, #272]	; (8011a44 <__multiply+0x14c>)
 8011932:	4845      	ldr	r0, [pc, #276]	; (8011a48 <__multiply+0x150>)
 8011934:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011938:	f001 ff9a 	bl	8013870 <__assert_func>
 801193c:	f100 0514 	add.w	r5, r0, #20
 8011940:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011944:	462b      	mov	r3, r5
 8011946:	2200      	movs	r2, #0
 8011948:	4543      	cmp	r3, r8
 801194a:	d321      	bcc.n	8011990 <__multiply+0x98>
 801194c:	f104 0314 	add.w	r3, r4, #20
 8011950:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011954:	f109 0314 	add.w	r3, r9, #20
 8011958:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801195c:	9202      	str	r2, [sp, #8]
 801195e:	1b3a      	subs	r2, r7, r4
 8011960:	3a15      	subs	r2, #21
 8011962:	f022 0203 	bic.w	r2, r2, #3
 8011966:	3204      	adds	r2, #4
 8011968:	f104 0115 	add.w	r1, r4, #21
 801196c:	428f      	cmp	r7, r1
 801196e:	bf38      	it	cc
 8011970:	2204      	movcc	r2, #4
 8011972:	9201      	str	r2, [sp, #4]
 8011974:	9a02      	ldr	r2, [sp, #8]
 8011976:	9303      	str	r3, [sp, #12]
 8011978:	429a      	cmp	r2, r3
 801197a:	d80c      	bhi.n	8011996 <__multiply+0x9e>
 801197c:	2e00      	cmp	r6, #0
 801197e:	dd03      	ble.n	8011988 <__multiply+0x90>
 8011980:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011984:	2b00      	cmp	r3, #0
 8011986:	d05b      	beq.n	8011a40 <__multiply+0x148>
 8011988:	6106      	str	r6, [r0, #16]
 801198a:	b005      	add	sp, #20
 801198c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011990:	f843 2b04 	str.w	r2, [r3], #4
 8011994:	e7d8      	b.n	8011948 <__multiply+0x50>
 8011996:	f8b3 a000 	ldrh.w	sl, [r3]
 801199a:	f1ba 0f00 	cmp.w	sl, #0
 801199e:	d024      	beq.n	80119ea <__multiply+0xf2>
 80119a0:	f104 0e14 	add.w	lr, r4, #20
 80119a4:	46a9      	mov	r9, r5
 80119a6:	f04f 0c00 	mov.w	ip, #0
 80119aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80119ae:	f8d9 1000 	ldr.w	r1, [r9]
 80119b2:	fa1f fb82 	uxth.w	fp, r2
 80119b6:	b289      	uxth	r1, r1
 80119b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80119bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80119c0:	f8d9 2000 	ldr.w	r2, [r9]
 80119c4:	4461      	add	r1, ip
 80119c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80119ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80119d2:	b289      	uxth	r1, r1
 80119d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119d8:	4577      	cmp	r7, lr
 80119da:	f849 1b04 	str.w	r1, [r9], #4
 80119de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119e2:	d8e2      	bhi.n	80119aa <__multiply+0xb2>
 80119e4:	9a01      	ldr	r2, [sp, #4]
 80119e6:	f845 c002 	str.w	ip, [r5, r2]
 80119ea:	9a03      	ldr	r2, [sp, #12]
 80119ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80119f0:	3304      	adds	r3, #4
 80119f2:	f1b9 0f00 	cmp.w	r9, #0
 80119f6:	d021      	beq.n	8011a3c <__multiply+0x144>
 80119f8:	6829      	ldr	r1, [r5, #0]
 80119fa:	f104 0c14 	add.w	ip, r4, #20
 80119fe:	46ae      	mov	lr, r5
 8011a00:	f04f 0a00 	mov.w	sl, #0
 8011a04:	f8bc b000 	ldrh.w	fp, [ip]
 8011a08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a0c:	fb09 220b 	mla	r2, r9, fp, r2
 8011a10:	4452      	add	r2, sl
 8011a12:	b289      	uxth	r1, r1
 8011a14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a18:	f84e 1b04 	str.w	r1, [lr], #4
 8011a1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011a20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a24:	f8be 1000 	ldrh.w	r1, [lr]
 8011a28:	fb09 110a 	mla	r1, r9, sl, r1
 8011a2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011a30:	4567      	cmp	r7, ip
 8011a32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a36:	d8e5      	bhi.n	8011a04 <__multiply+0x10c>
 8011a38:	9a01      	ldr	r2, [sp, #4]
 8011a3a:	50a9      	str	r1, [r5, r2]
 8011a3c:	3504      	adds	r5, #4
 8011a3e:	e799      	b.n	8011974 <__multiply+0x7c>
 8011a40:	3e01      	subs	r6, #1
 8011a42:	e79b      	b.n	801197c <__multiply+0x84>
 8011a44:	08015dc7 	.word	0x08015dc7
 8011a48:	08015dd8 	.word	0x08015dd8

08011a4c <__pow5mult>:
 8011a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a50:	4615      	mov	r5, r2
 8011a52:	f012 0203 	ands.w	r2, r2, #3
 8011a56:	4606      	mov	r6, r0
 8011a58:	460f      	mov	r7, r1
 8011a5a:	d007      	beq.n	8011a6c <__pow5mult+0x20>
 8011a5c:	4c25      	ldr	r4, [pc, #148]	; (8011af4 <__pow5mult+0xa8>)
 8011a5e:	3a01      	subs	r2, #1
 8011a60:	2300      	movs	r3, #0
 8011a62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a66:	f7ff fe53 	bl	8011710 <__multadd>
 8011a6a:	4607      	mov	r7, r0
 8011a6c:	10ad      	asrs	r5, r5, #2
 8011a6e:	d03d      	beq.n	8011aec <__pow5mult+0xa0>
 8011a70:	69f4      	ldr	r4, [r6, #28]
 8011a72:	b97c      	cbnz	r4, 8011a94 <__pow5mult+0x48>
 8011a74:	2010      	movs	r0, #16
 8011a76:	f7ff fd35 	bl	80114e4 <malloc>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	61f0      	str	r0, [r6, #28]
 8011a7e:	b928      	cbnz	r0, 8011a8c <__pow5mult+0x40>
 8011a80:	4b1d      	ldr	r3, [pc, #116]	; (8011af8 <__pow5mult+0xac>)
 8011a82:	481e      	ldr	r0, [pc, #120]	; (8011afc <__pow5mult+0xb0>)
 8011a84:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011a88:	f001 fef2 	bl	8013870 <__assert_func>
 8011a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a90:	6004      	str	r4, [r0, #0]
 8011a92:	60c4      	str	r4, [r0, #12]
 8011a94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a9c:	b94c      	cbnz	r4, 8011ab2 <__pow5mult+0x66>
 8011a9e:	f240 2171 	movw	r1, #625	; 0x271
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	f7ff ff12 	bl	80118cc <__i2b>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8011aae:	4604      	mov	r4, r0
 8011ab0:	6003      	str	r3, [r0, #0]
 8011ab2:	f04f 0900 	mov.w	r9, #0
 8011ab6:	07eb      	lsls	r3, r5, #31
 8011ab8:	d50a      	bpl.n	8011ad0 <__pow5mult+0x84>
 8011aba:	4639      	mov	r1, r7
 8011abc:	4622      	mov	r2, r4
 8011abe:	4630      	mov	r0, r6
 8011ac0:	f7ff ff1a 	bl	80118f8 <__multiply>
 8011ac4:	4639      	mov	r1, r7
 8011ac6:	4680      	mov	r8, r0
 8011ac8:	4630      	mov	r0, r6
 8011aca:	f7ff fdff 	bl	80116cc <_Bfree>
 8011ace:	4647      	mov	r7, r8
 8011ad0:	106d      	asrs	r5, r5, #1
 8011ad2:	d00b      	beq.n	8011aec <__pow5mult+0xa0>
 8011ad4:	6820      	ldr	r0, [r4, #0]
 8011ad6:	b938      	cbnz	r0, 8011ae8 <__pow5mult+0x9c>
 8011ad8:	4622      	mov	r2, r4
 8011ada:	4621      	mov	r1, r4
 8011adc:	4630      	mov	r0, r6
 8011ade:	f7ff ff0b 	bl	80118f8 <__multiply>
 8011ae2:	6020      	str	r0, [r4, #0]
 8011ae4:	f8c0 9000 	str.w	r9, [r0]
 8011ae8:	4604      	mov	r4, r0
 8011aea:	e7e4      	b.n	8011ab6 <__pow5mult+0x6a>
 8011aec:	4638      	mov	r0, r7
 8011aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011af2:	bf00      	nop
 8011af4:	08015f28 	.word	0x08015f28
 8011af8:	08015d58 	.word	0x08015d58
 8011afc:	08015dd8 	.word	0x08015dd8

08011b00 <__lshift>:
 8011b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b04:	460c      	mov	r4, r1
 8011b06:	6849      	ldr	r1, [r1, #4]
 8011b08:	6923      	ldr	r3, [r4, #16]
 8011b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b0e:	68a3      	ldr	r3, [r4, #8]
 8011b10:	4607      	mov	r7, r0
 8011b12:	4691      	mov	r9, r2
 8011b14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b18:	f108 0601 	add.w	r6, r8, #1
 8011b1c:	42b3      	cmp	r3, r6
 8011b1e:	db0b      	blt.n	8011b38 <__lshift+0x38>
 8011b20:	4638      	mov	r0, r7
 8011b22:	f7ff fd93 	bl	801164c <_Balloc>
 8011b26:	4605      	mov	r5, r0
 8011b28:	b948      	cbnz	r0, 8011b3e <__lshift+0x3e>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	4b28      	ldr	r3, [pc, #160]	; (8011bd0 <__lshift+0xd0>)
 8011b2e:	4829      	ldr	r0, [pc, #164]	; (8011bd4 <__lshift+0xd4>)
 8011b30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011b34:	f001 fe9c 	bl	8013870 <__assert_func>
 8011b38:	3101      	adds	r1, #1
 8011b3a:	005b      	lsls	r3, r3, #1
 8011b3c:	e7ee      	b.n	8011b1c <__lshift+0x1c>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	f100 0114 	add.w	r1, r0, #20
 8011b44:	f100 0210 	add.w	r2, r0, #16
 8011b48:	4618      	mov	r0, r3
 8011b4a:	4553      	cmp	r3, sl
 8011b4c:	db33      	blt.n	8011bb6 <__lshift+0xb6>
 8011b4e:	6920      	ldr	r0, [r4, #16]
 8011b50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b54:	f104 0314 	add.w	r3, r4, #20
 8011b58:	f019 091f 	ands.w	r9, r9, #31
 8011b5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b64:	d02b      	beq.n	8011bbe <__lshift+0xbe>
 8011b66:	f1c9 0e20 	rsb	lr, r9, #32
 8011b6a:	468a      	mov	sl, r1
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	6818      	ldr	r0, [r3, #0]
 8011b70:	fa00 f009 	lsl.w	r0, r0, r9
 8011b74:	4310      	orrs	r0, r2
 8011b76:	f84a 0b04 	str.w	r0, [sl], #4
 8011b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b7e:	459c      	cmp	ip, r3
 8011b80:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b84:	d8f3      	bhi.n	8011b6e <__lshift+0x6e>
 8011b86:	ebac 0304 	sub.w	r3, ip, r4
 8011b8a:	3b15      	subs	r3, #21
 8011b8c:	f023 0303 	bic.w	r3, r3, #3
 8011b90:	3304      	adds	r3, #4
 8011b92:	f104 0015 	add.w	r0, r4, #21
 8011b96:	4584      	cmp	ip, r0
 8011b98:	bf38      	it	cc
 8011b9a:	2304      	movcc	r3, #4
 8011b9c:	50ca      	str	r2, [r1, r3]
 8011b9e:	b10a      	cbz	r2, 8011ba4 <__lshift+0xa4>
 8011ba0:	f108 0602 	add.w	r6, r8, #2
 8011ba4:	3e01      	subs	r6, #1
 8011ba6:	4638      	mov	r0, r7
 8011ba8:	612e      	str	r6, [r5, #16]
 8011baa:	4621      	mov	r1, r4
 8011bac:	f7ff fd8e 	bl	80116cc <_Bfree>
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8011bba:	3301      	adds	r3, #1
 8011bbc:	e7c5      	b.n	8011b4a <__lshift+0x4a>
 8011bbe:	3904      	subs	r1, #4
 8011bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8011bc8:	459c      	cmp	ip, r3
 8011bca:	d8f9      	bhi.n	8011bc0 <__lshift+0xc0>
 8011bcc:	e7ea      	b.n	8011ba4 <__lshift+0xa4>
 8011bce:	bf00      	nop
 8011bd0:	08015dc7 	.word	0x08015dc7
 8011bd4:	08015dd8 	.word	0x08015dd8

08011bd8 <__mcmp>:
 8011bd8:	b530      	push	{r4, r5, lr}
 8011bda:	6902      	ldr	r2, [r0, #16]
 8011bdc:	690c      	ldr	r4, [r1, #16]
 8011bde:	1b12      	subs	r2, r2, r4
 8011be0:	d10e      	bne.n	8011c00 <__mcmp+0x28>
 8011be2:	f100 0314 	add.w	r3, r0, #20
 8011be6:	3114      	adds	r1, #20
 8011be8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011bec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011bf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011bf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011bf8:	42a5      	cmp	r5, r4
 8011bfa:	d003      	beq.n	8011c04 <__mcmp+0x2c>
 8011bfc:	d305      	bcc.n	8011c0a <__mcmp+0x32>
 8011bfe:	2201      	movs	r2, #1
 8011c00:	4610      	mov	r0, r2
 8011c02:	bd30      	pop	{r4, r5, pc}
 8011c04:	4283      	cmp	r3, r0
 8011c06:	d3f3      	bcc.n	8011bf0 <__mcmp+0x18>
 8011c08:	e7fa      	b.n	8011c00 <__mcmp+0x28>
 8011c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c0e:	e7f7      	b.n	8011c00 <__mcmp+0x28>

08011c10 <__mdiff>:
 8011c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c14:	460c      	mov	r4, r1
 8011c16:	4606      	mov	r6, r0
 8011c18:	4611      	mov	r1, r2
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	4690      	mov	r8, r2
 8011c1e:	f7ff ffdb 	bl	8011bd8 <__mcmp>
 8011c22:	1e05      	subs	r5, r0, #0
 8011c24:	d110      	bne.n	8011c48 <__mdiff+0x38>
 8011c26:	4629      	mov	r1, r5
 8011c28:	4630      	mov	r0, r6
 8011c2a:	f7ff fd0f 	bl	801164c <_Balloc>
 8011c2e:	b930      	cbnz	r0, 8011c3e <__mdiff+0x2e>
 8011c30:	4b3a      	ldr	r3, [pc, #232]	; (8011d1c <__mdiff+0x10c>)
 8011c32:	4602      	mov	r2, r0
 8011c34:	f240 2137 	movw	r1, #567	; 0x237
 8011c38:	4839      	ldr	r0, [pc, #228]	; (8011d20 <__mdiff+0x110>)
 8011c3a:	f001 fe19 	bl	8013870 <__assert_func>
 8011c3e:	2301      	movs	r3, #1
 8011c40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c48:	bfa4      	itt	ge
 8011c4a:	4643      	movge	r3, r8
 8011c4c:	46a0      	movge	r8, r4
 8011c4e:	4630      	mov	r0, r6
 8011c50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c54:	bfa6      	itte	ge
 8011c56:	461c      	movge	r4, r3
 8011c58:	2500      	movge	r5, #0
 8011c5a:	2501      	movlt	r5, #1
 8011c5c:	f7ff fcf6 	bl	801164c <_Balloc>
 8011c60:	b920      	cbnz	r0, 8011c6c <__mdiff+0x5c>
 8011c62:	4b2e      	ldr	r3, [pc, #184]	; (8011d1c <__mdiff+0x10c>)
 8011c64:	4602      	mov	r2, r0
 8011c66:	f240 2145 	movw	r1, #581	; 0x245
 8011c6a:	e7e5      	b.n	8011c38 <__mdiff+0x28>
 8011c6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c70:	6926      	ldr	r6, [r4, #16]
 8011c72:	60c5      	str	r5, [r0, #12]
 8011c74:	f104 0914 	add.w	r9, r4, #20
 8011c78:	f108 0514 	add.w	r5, r8, #20
 8011c7c:	f100 0e14 	add.w	lr, r0, #20
 8011c80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011c84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011c88:	f108 0210 	add.w	r2, r8, #16
 8011c8c:	46f2      	mov	sl, lr
 8011c8e:	2100      	movs	r1, #0
 8011c90:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011c98:	fa11 f88b 	uxtah	r8, r1, fp
 8011c9c:	b299      	uxth	r1, r3
 8011c9e:	0c1b      	lsrs	r3, r3, #16
 8011ca0:	eba8 0801 	sub.w	r8, r8, r1
 8011ca4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011ca8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011cac:	fa1f f888 	uxth.w	r8, r8
 8011cb0:	1419      	asrs	r1, r3, #16
 8011cb2:	454e      	cmp	r6, r9
 8011cb4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011cb8:	f84a 3b04 	str.w	r3, [sl], #4
 8011cbc:	d8e8      	bhi.n	8011c90 <__mdiff+0x80>
 8011cbe:	1b33      	subs	r3, r6, r4
 8011cc0:	3b15      	subs	r3, #21
 8011cc2:	f023 0303 	bic.w	r3, r3, #3
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	3415      	adds	r4, #21
 8011cca:	42a6      	cmp	r6, r4
 8011ccc:	bf38      	it	cc
 8011cce:	2304      	movcc	r3, #4
 8011cd0:	441d      	add	r5, r3
 8011cd2:	4473      	add	r3, lr
 8011cd4:	469e      	mov	lr, r3
 8011cd6:	462e      	mov	r6, r5
 8011cd8:	4566      	cmp	r6, ip
 8011cda:	d30e      	bcc.n	8011cfa <__mdiff+0xea>
 8011cdc:	f10c 0203 	add.w	r2, ip, #3
 8011ce0:	1b52      	subs	r2, r2, r5
 8011ce2:	f022 0203 	bic.w	r2, r2, #3
 8011ce6:	3d03      	subs	r5, #3
 8011ce8:	45ac      	cmp	ip, r5
 8011cea:	bf38      	it	cc
 8011cec:	2200      	movcc	r2, #0
 8011cee:	4413      	add	r3, r2
 8011cf0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011cf4:	b17a      	cbz	r2, 8011d16 <__mdiff+0x106>
 8011cf6:	6107      	str	r7, [r0, #16]
 8011cf8:	e7a4      	b.n	8011c44 <__mdiff+0x34>
 8011cfa:	f856 8b04 	ldr.w	r8, [r6], #4
 8011cfe:	fa11 f288 	uxtah	r2, r1, r8
 8011d02:	1414      	asrs	r4, r2, #16
 8011d04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d08:	b292      	uxth	r2, r2
 8011d0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d0e:	f84e 2b04 	str.w	r2, [lr], #4
 8011d12:	1421      	asrs	r1, r4, #16
 8011d14:	e7e0      	b.n	8011cd8 <__mdiff+0xc8>
 8011d16:	3f01      	subs	r7, #1
 8011d18:	e7ea      	b.n	8011cf0 <__mdiff+0xe0>
 8011d1a:	bf00      	nop
 8011d1c:	08015dc7 	.word	0x08015dc7
 8011d20:	08015dd8 	.word	0x08015dd8

08011d24 <__ulp>:
 8011d24:	b082      	sub	sp, #8
 8011d26:	ed8d 0b00 	vstr	d0, [sp]
 8011d2a:	9a01      	ldr	r2, [sp, #4]
 8011d2c:	4b0f      	ldr	r3, [pc, #60]	; (8011d6c <__ulp+0x48>)
 8011d2e:	4013      	ands	r3, r2
 8011d30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dc08      	bgt.n	8011d4a <__ulp+0x26>
 8011d38:	425b      	negs	r3, r3
 8011d3a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011d3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011d42:	da04      	bge.n	8011d4e <__ulp+0x2a>
 8011d44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011d48:	4113      	asrs	r3, r2
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	e008      	b.n	8011d60 <__ulp+0x3c>
 8011d4e:	f1a2 0314 	sub.w	r3, r2, #20
 8011d52:	2b1e      	cmp	r3, #30
 8011d54:	bfda      	itte	le
 8011d56:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011d5a:	40da      	lsrle	r2, r3
 8011d5c:	2201      	movgt	r2, #1
 8011d5e:	2300      	movs	r3, #0
 8011d60:	4619      	mov	r1, r3
 8011d62:	4610      	mov	r0, r2
 8011d64:	ec41 0b10 	vmov	d0, r0, r1
 8011d68:	b002      	add	sp, #8
 8011d6a:	4770      	bx	lr
 8011d6c:	7ff00000 	.word	0x7ff00000

08011d70 <__b2d>:
 8011d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d74:	6906      	ldr	r6, [r0, #16]
 8011d76:	f100 0814 	add.w	r8, r0, #20
 8011d7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011d7e:	1f37      	subs	r7, r6, #4
 8011d80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011d84:	4610      	mov	r0, r2
 8011d86:	f7ff fd53 	bl	8011830 <__hi0bits>
 8011d8a:	f1c0 0320 	rsb	r3, r0, #32
 8011d8e:	280a      	cmp	r0, #10
 8011d90:	600b      	str	r3, [r1, #0]
 8011d92:	491b      	ldr	r1, [pc, #108]	; (8011e00 <__b2d+0x90>)
 8011d94:	dc15      	bgt.n	8011dc2 <__b2d+0x52>
 8011d96:	f1c0 0c0b 	rsb	ip, r0, #11
 8011d9a:	fa22 f30c 	lsr.w	r3, r2, ip
 8011d9e:	45b8      	cmp	r8, r7
 8011da0:	ea43 0501 	orr.w	r5, r3, r1
 8011da4:	bf34      	ite	cc
 8011da6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011daa:	2300      	movcs	r3, #0
 8011dac:	3015      	adds	r0, #21
 8011dae:	fa02 f000 	lsl.w	r0, r2, r0
 8011db2:	fa23 f30c 	lsr.w	r3, r3, ip
 8011db6:	4303      	orrs	r3, r0
 8011db8:	461c      	mov	r4, r3
 8011dba:	ec45 4b10 	vmov	d0, r4, r5
 8011dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc2:	45b8      	cmp	r8, r7
 8011dc4:	bf3a      	itte	cc
 8011dc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011dca:	f1a6 0708 	subcc.w	r7, r6, #8
 8011dce:	2300      	movcs	r3, #0
 8011dd0:	380b      	subs	r0, #11
 8011dd2:	d012      	beq.n	8011dfa <__b2d+0x8a>
 8011dd4:	f1c0 0120 	rsb	r1, r0, #32
 8011dd8:	fa23 f401 	lsr.w	r4, r3, r1
 8011ddc:	4082      	lsls	r2, r0
 8011dde:	4322      	orrs	r2, r4
 8011de0:	4547      	cmp	r7, r8
 8011de2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011de6:	bf8c      	ite	hi
 8011de8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011dec:	2200      	movls	r2, #0
 8011dee:	4083      	lsls	r3, r0
 8011df0:	40ca      	lsrs	r2, r1
 8011df2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011df6:	4313      	orrs	r3, r2
 8011df8:	e7de      	b.n	8011db8 <__b2d+0x48>
 8011dfa:	ea42 0501 	orr.w	r5, r2, r1
 8011dfe:	e7db      	b.n	8011db8 <__b2d+0x48>
 8011e00:	3ff00000 	.word	0x3ff00000

08011e04 <__d2b>:
 8011e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e08:	460f      	mov	r7, r1
 8011e0a:	2101      	movs	r1, #1
 8011e0c:	ec59 8b10 	vmov	r8, r9, d0
 8011e10:	4616      	mov	r6, r2
 8011e12:	f7ff fc1b 	bl	801164c <_Balloc>
 8011e16:	4604      	mov	r4, r0
 8011e18:	b930      	cbnz	r0, 8011e28 <__d2b+0x24>
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	4b24      	ldr	r3, [pc, #144]	; (8011eb0 <__d2b+0xac>)
 8011e1e:	4825      	ldr	r0, [pc, #148]	; (8011eb4 <__d2b+0xb0>)
 8011e20:	f240 310f 	movw	r1, #783	; 0x30f
 8011e24:	f001 fd24 	bl	8013870 <__assert_func>
 8011e28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011e2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e30:	bb2d      	cbnz	r5, 8011e7e <__d2b+0x7a>
 8011e32:	9301      	str	r3, [sp, #4]
 8011e34:	f1b8 0300 	subs.w	r3, r8, #0
 8011e38:	d026      	beq.n	8011e88 <__d2b+0x84>
 8011e3a:	4668      	mov	r0, sp
 8011e3c:	9300      	str	r3, [sp, #0]
 8011e3e:	f7ff fd17 	bl	8011870 <__lo0bits>
 8011e42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011e46:	b1e8      	cbz	r0, 8011e84 <__d2b+0x80>
 8011e48:	f1c0 0320 	rsb	r3, r0, #32
 8011e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e50:	430b      	orrs	r3, r1
 8011e52:	40c2      	lsrs	r2, r0
 8011e54:	6163      	str	r3, [r4, #20]
 8011e56:	9201      	str	r2, [sp, #4]
 8011e58:	9b01      	ldr	r3, [sp, #4]
 8011e5a:	61a3      	str	r3, [r4, #24]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	bf14      	ite	ne
 8011e60:	2202      	movne	r2, #2
 8011e62:	2201      	moveq	r2, #1
 8011e64:	6122      	str	r2, [r4, #16]
 8011e66:	b1bd      	cbz	r5, 8011e98 <__d2b+0x94>
 8011e68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011e6c:	4405      	add	r5, r0
 8011e6e:	603d      	str	r5, [r7, #0]
 8011e70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011e74:	6030      	str	r0, [r6, #0]
 8011e76:	4620      	mov	r0, r4
 8011e78:	b003      	add	sp, #12
 8011e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e82:	e7d6      	b.n	8011e32 <__d2b+0x2e>
 8011e84:	6161      	str	r1, [r4, #20]
 8011e86:	e7e7      	b.n	8011e58 <__d2b+0x54>
 8011e88:	a801      	add	r0, sp, #4
 8011e8a:	f7ff fcf1 	bl	8011870 <__lo0bits>
 8011e8e:	9b01      	ldr	r3, [sp, #4]
 8011e90:	6163      	str	r3, [r4, #20]
 8011e92:	3020      	adds	r0, #32
 8011e94:	2201      	movs	r2, #1
 8011e96:	e7e5      	b.n	8011e64 <__d2b+0x60>
 8011e98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ea0:	6038      	str	r0, [r7, #0]
 8011ea2:	6918      	ldr	r0, [r3, #16]
 8011ea4:	f7ff fcc4 	bl	8011830 <__hi0bits>
 8011ea8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011eac:	e7e2      	b.n	8011e74 <__d2b+0x70>
 8011eae:	bf00      	nop
 8011eb0:	08015dc7 	.word	0x08015dc7
 8011eb4:	08015dd8 	.word	0x08015dd8

08011eb8 <__ratio>:
 8011eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	4688      	mov	r8, r1
 8011ebe:	4669      	mov	r1, sp
 8011ec0:	4681      	mov	r9, r0
 8011ec2:	f7ff ff55 	bl	8011d70 <__b2d>
 8011ec6:	a901      	add	r1, sp, #4
 8011ec8:	4640      	mov	r0, r8
 8011eca:	ec55 4b10 	vmov	r4, r5, d0
 8011ece:	f7ff ff4f 	bl	8011d70 <__b2d>
 8011ed2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ed6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011eda:	eba3 0c02 	sub.w	ip, r3, r2
 8011ede:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011ee2:	1a9b      	subs	r3, r3, r2
 8011ee4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011ee8:	ec51 0b10 	vmov	r0, r1, d0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	bfd6      	itet	le
 8011ef0:	460a      	movle	r2, r1
 8011ef2:	462a      	movgt	r2, r5
 8011ef4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011ef8:	468b      	mov	fp, r1
 8011efa:	462f      	mov	r7, r5
 8011efc:	bfd4      	ite	le
 8011efe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011f02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011f06:	4620      	mov	r0, r4
 8011f08:	ee10 2a10 	vmov	r2, s0
 8011f0c:	465b      	mov	r3, fp
 8011f0e:	4639      	mov	r1, r7
 8011f10:	f7ee fcc4 	bl	800089c <__aeabi_ddiv>
 8011f14:	ec41 0b10 	vmov	d0, r0, r1
 8011f18:	b003      	add	sp, #12
 8011f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f1e <__copybits>:
 8011f1e:	3901      	subs	r1, #1
 8011f20:	b570      	push	{r4, r5, r6, lr}
 8011f22:	1149      	asrs	r1, r1, #5
 8011f24:	6914      	ldr	r4, [r2, #16]
 8011f26:	3101      	adds	r1, #1
 8011f28:	f102 0314 	add.w	r3, r2, #20
 8011f2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011f30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f34:	1f05      	subs	r5, r0, #4
 8011f36:	42a3      	cmp	r3, r4
 8011f38:	d30c      	bcc.n	8011f54 <__copybits+0x36>
 8011f3a:	1aa3      	subs	r3, r4, r2
 8011f3c:	3b11      	subs	r3, #17
 8011f3e:	f023 0303 	bic.w	r3, r3, #3
 8011f42:	3211      	adds	r2, #17
 8011f44:	42a2      	cmp	r2, r4
 8011f46:	bf88      	it	hi
 8011f48:	2300      	movhi	r3, #0
 8011f4a:	4418      	add	r0, r3
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	4288      	cmp	r0, r1
 8011f50:	d305      	bcc.n	8011f5e <__copybits+0x40>
 8011f52:	bd70      	pop	{r4, r5, r6, pc}
 8011f54:	f853 6b04 	ldr.w	r6, [r3], #4
 8011f58:	f845 6f04 	str.w	r6, [r5, #4]!
 8011f5c:	e7eb      	b.n	8011f36 <__copybits+0x18>
 8011f5e:	f840 3b04 	str.w	r3, [r0], #4
 8011f62:	e7f4      	b.n	8011f4e <__copybits+0x30>

08011f64 <__any_on>:
 8011f64:	f100 0214 	add.w	r2, r0, #20
 8011f68:	6900      	ldr	r0, [r0, #16]
 8011f6a:	114b      	asrs	r3, r1, #5
 8011f6c:	4298      	cmp	r0, r3
 8011f6e:	b510      	push	{r4, lr}
 8011f70:	db11      	blt.n	8011f96 <__any_on+0x32>
 8011f72:	dd0a      	ble.n	8011f8a <__any_on+0x26>
 8011f74:	f011 011f 	ands.w	r1, r1, #31
 8011f78:	d007      	beq.n	8011f8a <__any_on+0x26>
 8011f7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011f7e:	fa24 f001 	lsr.w	r0, r4, r1
 8011f82:	fa00 f101 	lsl.w	r1, r0, r1
 8011f86:	428c      	cmp	r4, r1
 8011f88:	d10b      	bne.n	8011fa2 <__any_on+0x3e>
 8011f8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	d803      	bhi.n	8011f9a <__any_on+0x36>
 8011f92:	2000      	movs	r0, #0
 8011f94:	bd10      	pop	{r4, pc}
 8011f96:	4603      	mov	r3, r0
 8011f98:	e7f7      	b.n	8011f8a <__any_on+0x26>
 8011f9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011f9e:	2900      	cmp	r1, #0
 8011fa0:	d0f5      	beq.n	8011f8e <__any_on+0x2a>
 8011fa2:	2001      	movs	r0, #1
 8011fa4:	e7f6      	b.n	8011f94 <__any_on+0x30>

08011fa6 <sulp>:
 8011fa6:	b570      	push	{r4, r5, r6, lr}
 8011fa8:	4604      	mov	r4, r0
 8011faa:	460d      	mov	r5, r1
 8011fac:	ec45 4b10 	vmov	d0, r4, r5
 8011fb0:	4616      	mov	r6, r2
 8011fb2:	f7ff feb7 	bl	8011d24 <__ulp>
 8011fb6:	ec51 0b10 	vmov	r0, r1, d0
 8011fba:	b17e      	cbz	r6, 8011fdc <sulp+0x36>
 8011fbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011fc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	dd09      	ble.n	8011fdc <sulp+0x36>
 8011fc8:	051b      	lsls	r3, r3, #20
 8011fca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011fce:	2400      	movs	r4, #0
 8011fd0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011fd4:	4622      	mov	r2, r4
 8011fd6:	462b      	mov	r3, r5
 8011fd8:	f7ee fb36 	bl	8000648 <__aeabi_dmul>
 8011fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08011fe0 <_strtod_l>:
 8011fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe4:	ed2d 8b02 	vpush	{d8}
 8011fe8:	b09b      	sub	sp, #108	; 0x6c
 8011fea:	4604      	mov	r4, r0
 8011fec:	9213      	str	r2, [sp, #76]	; 0x4c
 8011fee:	2200      	movs	r2, #0
 8011ff0:	9216      	str	r2, [sp, #88]	; 0x58
 8011ff2:	460d      	mov	r5, r1
 8011ff4:	f04f 0800 	mov.w	r8, #0
 8011ff8:	f04f 0900 	mov.w	r9, #0
 8011ffc:	460a      	mov	r2, r1
 8011ffe:	9215      	str	r2, [sp, #84]	; 0x54
 8012000:	7811      	ldrb	r1, [r2, #0]
 8012002:	292b      	cmp	r1, #43	; 0x2b
 8012004:	d04c      	beq.n	80120a0 <_strtod_l+0xc0>
 8012006:	d83a      	bhi.n	801207e <_strtod_l+0x9e>
 8012008:	290d      	cmp	r1, #13
 801200a:	d834      	bhi.n	8012076 <_strtod_l+0x96>
 801200c:	2908      	cmp	r1, #8
 801200e:	d834      	bhi.n	801207a <_strtod_l+0x9a>
 8012010:	2900      	cmp	r1, #0
 8012012:	d03d      	beq.n	8012090 <_strtod_l+0xb0>
 8012014:	2200      	movs	r2, #0
 8012016:	920a      	str	r2, [sp, #40]	; 0x28
 8012018:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801201a:	7832      	ldrb	r2, [r6, #0]
 801201c:	2a30      	cmp	r2, #48	; 0x30
 801201e:	f040 80b4 	bne.w	801218a <_strtod_l+0x1aa>
 8012022:	7872      	ldrb	r2, [r6, #1]
 8012024:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012028:	2a58      	cmp	r2, #88	; 0x58
 801202a:	d170      	bne.n	801210e <_strtod_l+0x12e>
 801202c:	9302      	str	r3, [sp, #8]
 801202e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012030:	9301      	str	r3, [sp, #4]
 8012032:	ab16      	add	r3, sp, #88	; 0x58
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	4a8e      	ldr	r2, [pc, #568]	; (8012270 <_strtod_l+0x290>)
 8012038:	ab17      	add	r3, sp, #92	; 0x5c
 801203a:	a915      	add	r1, sp, #84	; 0x54
 801203c:	4620      	mov	r0, r4
 801203e:	f001 fcb3 	bl	80139a8 <__gethex>
 8012042:	f010 070f 	ands.w	r7, r0, #15
 8012046:	4605      	mov	r5, r0
 8012048:	d005      	beq.n	8012056 <_strtod_l+0x76>
 801204a:	2f06      	cmp	r7, #6
 801204c:	d12a      	bne.n	80120a4 <_strtod_l+0xc4>
 801204e:	3601      	adds	r6, #1
 8012050:	2300      	movs	r3, #0
 8012052:	9615      	str	r6, [sp, #84]	; 0x54
 8012054:	930a      	str	r3, [sp, #40]	; 0x28
 8012056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012058:	2b00      	cmp	r3, #0
 801205a:	f040 857f 	bne.w	8012b5c <_strtod_l+0xb7c>
 801205e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012060:	b1db      	cbz	r3, 801209a <_strtod_l+0xba>
 8012062:	4642      	mov	r2, r8
 8012064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012068:	ec43 2b10 	vmov	d0, r2, r3
 801206c:	b01b      	add	sp, #108	; 0x6c
 801206e:	ecbd 8b02 	vpop	{d8}
 8012072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012076:	2920      	cmp	r1, #32
 8012078:	d1cc      	bne.n	8012014 <_strtod_l+0x34>
 801207a:	3201      	adds	r2, #1
 801207c:	e7bf      	b.n	8011ffe <_strtod_l+0x1e>
 801207e:	292d      	cmp	r1, #45	; 0x2d
 8012080:	d1c8      	bne.n	8012014 <_strtod_l+0x34>
 8012082:	2101      	movs	r1, #1
 8012084:	910a      	str	r1, [sp, #40]	; 0x28
 8012086:	1c51      	adds	r1, r2, #1
 8012088:	9115      	str	r1, [sp, #84]	; 0x54
 801208a:	7852      	ldrb	r2, [r2, #1]
 801208c:	2a00      	cmp	r2, #0
 801208e:	d1c3      	bne.n	8012018 <_strtod_l+0x38>
 8012090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012092:	9515      	str	r5, [sp, #84]	; 0x54
 8012094:	2b00      	cmp	r3, #0
 8012096:	f040 855f 	bne.w	8012b58 <_strtod_l+0xb78>
 801209a:	4642      	mov	r2, r8
 801209c:	464b      	mov	r3, r9
 801209e:	e7e3      	b.n	8012068 <_strtod_l+0x88>
 80120a0:	2100      	movs	r1, #0
 80120a2:	e7ef      	b.n	8012084 <_strtod_l+0xa4>
 80120a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120a6:	b13a      	cbz	r2, 80120b8 <_strtod_l+0xd8>
 80120a8:	2135      	movs	r1, #53	; 0x35
 80120aa:	a818      	add	r0, sp, #96	; 0x60
 80120ac:	f7ff ff37 	bl	8011f1e <__copybits>
 80120b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80120b2:	4620      	mov	r0, r4
 80120b4:	f7ff fb0a 	bl	80116cc <_Bfree>
 80120b8:	3f01      	subs	r7, #1
 80120ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80120bc:	2f04      	cmp	r7, #4
 80120be:	d806      	bhi.n	80120ce <_strtod_l+0xee>
 80120c0:	e8df f007 	tbb	[pc, r7]
 80120c4:	201d0314 	.word	0x201d0314
 80120c8:	14          	.byte	0x14
 80120c9:	00          	.byte	0x00
 80120ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80120ce:	05e9      	lsls	r1, r5, #23
 80120d0:	bf48      	it	mi
 80120d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80120d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120da:	0d1b      	lsrs	r3, r3, #20
 80120dc:	051b      	lsls	r3, r3, #20
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d1b9      	bne.n	8012056 <_strtod_l+0x76>
 80120e2:	f7fe faf7 	bl	80106d4 <__errno>
 80120e6:	2322      	movs	r3, #34	; 0x22
 80120e8:	6003      	str	r3, [r0, #0]
 80120ea:	e7b4      	b.n	8012056 <_strtod_l+0x76>
 80120ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80120f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80120f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80120f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80120fc:	e7e7      	b.n	80120ce <_strtod_l+0xee>
 80120fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012278 <_strtod_l+0x298>
 8012102:	e7e4      	b.n	80120ce <_strtod_l+0xee>
 8012104:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012108:	f04f 38ff 	mov.w	r8, #4294967295
 801210c:	e7df      	b.n	80120ce <_strtod_l+0xee>
 801210e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012110:	1c5a      	adds	r2, r3, #1
 8012112:	9215      	str	r2, [sp, #84]	; 0x54
 8012114:	785b      	ldrb	r3, [r3, #1]
 8012116:	2b30      	cmp	r3, #48	; 0x30
 8012118:	d0f9      	beq.n	801210e <_strtod_l+0x12e>
 801211a:	2b00      	cmp	r3, #0
 801211c:	d09b      	beq.n	8012056 <_strtod_l+0x76>
 801211e:	2301      	movs	r3, #1
 8012120:	f04f 0a00 	mov.w	sl, #0
 8012124:	9304      	str	r3, [sp, #16]
 8012126:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012128:	930b      	str	r3, [sp, #44]	; 0x2c
 801212a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801212e:	46d3      	mov	fp, sl
 8012130:	220a      	movs	r2, #10
 8012132:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012134:	7806      	ldrb	r6, [r0, #0]
 8012136:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801213a:	b2d9      	uxtb	r1, r3
 801213c:	2909      	cmp	r1, #9
 801213e:	d926      	bls.n	801218e <_strtod_l+0x1ae>
 8012140:	494c      	ldr	r1, [pc, #304]	; (8012274 <_strtod_l+0x294>)
 8012142:	2201      	movs	r2, #1
 8012144:	f7fe fa13 	bl	801056e <strncmp>
 8012148:	2800      	cmp	r0, #0
 801214a:	d030      	beq.n	80121ae <_strtod_l+0x1ce>
 801214c:	2000      	movs	r0, #0
 801214e:	4632      	mov	r2, r6
 8012150:	9005      	str	r0, [sp, #20]
 8012152:	465e      	mov	r6, fp
 8012154:	4603      	mov	r3, r0
 8012156:	2a65      	cmp	r2, #101	; 0x65
 8012158:	d001      	beq.n	801215e <_strtod_l+0x17e>
 801215a:	2a45      	cmp	r2, #69	; 0x45
 801215c:	d113      	bne.n	8012186 <_strtod_l+0x1a6>
 801215e:	b91e      	cbnz	r6, 8012168 <_strtod_l+0x188>
 8012160:	9a04      	ldr	r2, [sp, #16]
 8012162:	4302      	orrs	r2, r0
 8012164:	d094      	beq.n	8012090 <_strtod_l+0xb0>
 8012166:	2600      	movs	r6, #0
 8012168:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801216a:	1c6a      	adds	r2, r5, #1
 801216c:	9215      	str	r2, [sp, #84]	; 0x54
 801216e:	786a      	ldrb	r2, [r5, #1]
 8012170:	2a2b      	cmp	r2, #43	; 0x2b
 8012172:	d074      	beq.n	801225e <_strtod_l+0x27e>
 8012174:	2a2d      	cmp	r2, #45	; 0x2d
 8012176:	d078      	beq.n	801226a <_strtod_l+0x28a>
 8012178:	f04f 0c00 	mov.w	ip, #0
 801217c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012180:	2909      	cmp	r1, #9
 8012182:	d97f      	bls.n	8012284 <_strtod_l+0x2a4>
 8012184:	9515      	str	r5, [sp, #84]	; 0x54
 8012186:	2700      	movs	r7, #0
 8012188:	e09e      	b.n	80122c8 <_strtod_l+0x2e8>
 801218a:	2300      	movs	r3, #0
 801218c:	e7c8      	b.n	8012120 <_strtod_l+0x140>
 801218e:	f1bb 0f08 	cmp.w	fp, #8
 8012192:	bfd8      	it	le
 8012194:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012196:	f100 0001 	add.w	r0, r0, #1
 801219a:	bfda      	itte	le
 801219c:	fb02 3301 	mlale	r3, r2, r1, r3
 80121a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80121a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80121a6:	f10b 0b01 	add.w	fp, fp, #1
 80121aa:	9015      	str	r0, [sp, #84]	; 0x54
 80121ac:	e7c1      	b.n	8012132 <_strtod_l+0x152>
 80121ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121b0:	1c5a      	adds	r2, r3, #1
 80121b2:	9215      	str	r2, [sp, #84]	; 0x54
 80121b4:	785a      	ldrb	r2, [r3, #1]
 80121b6:	f1bb 0f00 	cmp.w	fp, #0
 80121ba:	d037      	beq.n	801222c <_strtod_l+0x24c>
 80121bc:	9005      	str	r0, [sp, #20]
 80121be:	465e      	mov	r6, fp
 80121c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80121c4:	2b09      	cmp	r3, #9
 80121c6:	d912      	bls.n	80121ee <_strtod_l+0x20e>
 80121c8:	2301      	movs	r3, #1
 80121ca:	e7c4      	b.n	8012156 <_strtod_l+0x176>
 80121cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121ce:	1c5a      	adds	r2, r3, #1
 80121d0:	9215      	str	r2, [sp, #84]	; 0x54
 80121d2:	785a      	ldrb	r2, [r3, #1]
 80121d4:	3001      	adds	r0, #1
 80121d6:	2a30      	cmp	r2, #48	; 0x30
 80121d8:	d0f8      	beq.n	80121cc <_strtod_l+0x1ec>
 80121da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80121de:	2b08      	cmp	r3, #8
 80121e0:	f200 84c1 	bhi.w	8012b66 <_strtod_l+0xb86>
 80121e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121e6:	9005      	str	r0, [sp, #20]
 80121e8:	2000      	movs	r0, #0
 80121ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80121ec:	4606      	mov	r6, r0
 80121ee:	3a30      	subs	r2, #48	; 0x30
 80121f0:	f100 0301 	add.w	r3, r0, #1
 80121f4:	d014      	beq.n	8012220 <_strtod_l+0x240>
 80121f6:	9905      	ldr	r1, [sp, #20]
 80121f8:	4419      	add	r1, r3
 80121fa:	9105      	str	r1, [sp, #20]
 80121fc:	4633      	mov	r3, r6
 80121fe:	eb00 0c06 	add.w	ip, r0, r6
 8012202:	210a      	movs	r1, #10
 8012204:	4563      	cmp	r3, ip
 8012206:	d113      	bne.n	8012230 <_strtod_l+0x250>
 8012208:	1833      	adds	r3, r6, r0
 801220a:	2b08      	cmp	r3, #8
 801220c:	f106 0601 	add.w	r6, r6, #1
 8012210:	4406      	add	r6, r0
 8012212:	dc1a      	bgt.n	801224a <_strtod_l+0x26a>
 8012214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012216:	230a      	movs	r3, #10
 8012218:	fb03 2301 	mla	r3, r3, r1, r2
 801221c:	9309      	str	r3, [sp, #36]	; 0x24
 801221e:	2300      	movs	r3, #0
 8012220:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012222:	1c51      	adds	r1, r2, #1
 8012224:	9115      	str	r1, [sp, #84]	; 0x54
 8012226:	7852      	ldrb	r2, [r2, #1]
 8012228:	4618      	mov	r0, r3
 801222a:	e7c9      	b.n	80121c0 <_strtod_l+0x1e0>
 801222c:	4658      	mov	r0, fp
 801222e:	e7d2      	b.n	80121d6 <_strtod_l+0x1f6>
 8012230:	2b08      	cmp	r3, #8
 8012232:	f103 0301 	add.w	r3, r3, #1
 8012236:	dc03      	bgt.n	8012240 <_strtod_l+0x260>
 8012238:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801223a:	434f      	muls	r7, r1
 801223c:	9709      	str	r7, [sp, #36]	; 0x24
 801223e:	e7e1      	b.n	8012204 <_strtod_l+0x224>
 8012240:	2b10      	cmp	r3, #16
 8012242:	bfd8      	it	le
 8012244:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012248:	e7dc      	b.n	8012204 <_strtod_l+0x224>
 801224a:	2e10      	cmp	r6, #16
 801224c:	bfdc      	itt	le
 801224e:	230a      	movle	r3, #10
 8012250:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8012254:	e7e3      	b.n	801221e <_strtod_l+0x23e>
 8012256:	2300      	movs	r3, #0
 8012258:	9305      	str	r3, [sp, #20]
 801225a:	2301      	movs	r3, #1
 801225c:	e780      	b.n	8012160 <_strtod_l+0x180>
 801225e:	f04f 0c00 	mov.w	ip, #0
 8012262:	1caa      	adds	r2, r5, #2
 8012264:	9215      	str	r2, [sp, #84]	; 0x54
 8012266:	78aa      	ldrb	r2, [r5, #2]
 8012268:	e788      	b.n	801217c <_strtod_l+0x19c>
 801226a:	f04f 0c01 	mov.w	ip, #1
 801226e:	e7f8      	b.n	8012262 <_strtod_l+0x282>
 8012270:	08015f38 	.word	0x08015f38
 8012274:	08015f34 	.word	0x08015f34
 8012278:	7ff00000 	.word	0x7ff00000
 801227c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801227e:	1c51      	adds	r1, r2, #1
 8012280:	9115      	str	r1, [sp, #84]	; 0x54
 8012282:	7852      	ldrb	r2, [r2, #1]
 8012284:	2a30      	cmp	r2, #48	; 0x30
 8012286:	d0f9      	beq.n	801227c <_strtod_l+0x29c>
 8012288:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801228c:	2908      	cmp	r1, #8
 801228e:	f63f af7a 	bhi.w	8012186 <_strtod_l+0x1a6>
 8012292:	3a30      	subs	r2, #48	; 0x30
 8012294:	9208      	str	r2, [sp, #32]
 8012296:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012298:	920c      	str	r2, [sp, #48]	; 0x30
 801229a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801229c:	1c57      	adds	r7, r2, #1
 801229e:	9715      	str	r7, [sp, #84]	; 0x54
 80122a0:	7852      	ldrb	r2, [r2, #1]
 80122a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80122a6:	f1be 0f09 	cmp.w	lr, #9
 80122aa:	d938      	bls.n	801231e <_strtod_l+0x33e>
 80122ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80122ae:	1a7f      	subs	r7, r7, r1
 80122b0:	2f08      	cmp	r7, #8
 80122b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80122b6:	dc03      	bgt.n	80122c0 <_strtod_l+0x2e0>
 80122b8:	9908      	ldr	r1, [sp, #32]
 80122ba:	428f      	cmp	r7, r1
 80122bc:	bfa8      	it	ge
 80122be:	460f      	movge	r7, r1
 80122c0:	f1bc 0f00 	cmp.w	ip, #0
 80122c4:	d000      	beq.n	80122c8 <_strtod_l+0x2e8>
 80122c6:	427f      	negs	r7, r7
 80122c8:	2e00      	cmp	r6, #0
 80122ca:	d14f      	bne.n	801236c <_strtod_l+0x38c>
 80122cc:	9904      	ldr	r1, [sp, #16]
 80122ce:	4301      	orrs	r1, r0
 80122d0:	f47f aec1 	bne.w	8012056 <_strtod_l+0x76>
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f47f aedb 	bne.w	8012090 <_strtod_l+0xb0>
 80122da:	2a69      	cmp	r2, #105	; 0x69
 80122dc:	d029      	beq.n	8012332 <_strtod_l+0x352>
 80122de:	dc26      	bgt.n	801232e <_strtod_l+0x34e>
 80122e0:	2a49      	cmp	r2, #73	; 0x49
 80122e2:	d026      	beq.n	8012332 <_strtod_l+0x352>
 80122e4:	2a4e      	cmp	r2, #78	; 0x4e
 80122e6:	f47f aed3 	bne.w	8012090 <_strtod_l+0xb0>
 80122ea:	499b      	ldr	r1, [pc, #620]	; (8012558 <_strtod_l+0x578>)
 80122ec:	a815      	add	r0, sp, #84	; 0x54
 80122ee:	f001 fd9b 	bl	8013e28 <__match>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	f43f aecc 	beq.w	8012090 <_strtod_l+0xb0>
 80122f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	2b28      	cmp	r3, #40	; 0x28
 80122fe:	d12f      	bne.n	8012360 <_strtod_l+0x380>
 8012300:	4996      	ldr	r1, [pc, #600]	; (801255c <_strtod_l+0x57c>)
 8012302:	aa18      	add	r2, sp, #96	; 0x60
 8012304:	a815      	add	r0, sp, #84	; 0x54
 8012306:	f001 fda3 	bl	8013e50 <__hexnan>
 801230a:	2805      	cmp	r0, #5
 801230c:	d128      	bne.n	8012360 <_strtod_l+0x380>
 801230e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012310:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012314:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012318:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801231c:	e69b      	b.n	8012056 <_strtod_l+0x76>
 801231e:	9f08      	ldr	r7, [sp, #32]
 8012320:	210a      	movs	r1, #10
 8012322:	fb01 2107 	mla	r1, r1, r7, r2
 8012326:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801232a:	9208      	str	r2, [sp, #32]
 801232c:	e7b5      	b.n	801229a <_strtod_l+0x2ba>
 801232e:	2a6e      	cmp	r2, #110	; 0x6e
 8012330:	e7d9      	b.n	80122e6 <_strtod_l+0x306>
 8012332:	498b      	ldr	r1, [pc, #556]	; (8012560 <_strtod_l+0x580>)
 8012334:	a815      	add	r0, sp, #84	; 0x54
 8012336:	f001 fd77 	bl	8013e28 <__match>
 801233a:	2800      	cmp	r0, #0
 801233c:	f43f aea8 	beq.w	8012090 <_strtod_l+0xb0>
 8012340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012342:	4988      	ldr	r1, [pc, #544]	; (8012564 <_strtod_l+0x584>)
 8012344:	3b01      	subs	r3, #1
 8012346:	a815      	add	r0, sp, #84	; 0x54
 8012348:	9315      	str	r3, [sp, #84]	; 0x54
 801234a:	f001 fd6d 	bl	8013e28 <__match>
 801234e:	b910      	cbnz	r0, 8012356 <_strtod_l+0x376>
 8012350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012352:	3301      	adds	r3, #1
 8012354:	9315      	str	r3, [sp, #84]	; 0x54
 8012356:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012574 <_strtod_l+0x594>
 801235a:	f04f 0800 	mov.w	r8, #0
 801235e:	e67a      	b.n	8012056 <_strtod_l+0x76>
 8012360:	4881      	ldr	r0, [pc, #516]	; (8012568 <_strtod_l+0x588>)
 8012362:	f001 fa7d 	bl	8013860 <nan>
 8012366:	ec59 8b10 	vmov	r8, r9, d0
 801236a:	e674      	b.n	8012056 <_strtod_l+0x76>
 801236c:	9b05      	ldr	r3, [sp, #20]
 801236e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012370:	1afb      	subs	r3, r7, r3
 8012372:	f1bb 0f00 	cmp.w	fp, #0
 8012376:	bf08      	it	eq
 8012378:	46b3      	moveq	fp, r6
 801237a:	2e10      	cmp	r6, #16
 801237c:	9308      	str	r3, [sp, #32]
 801237e:	4635      	mov	r5, r6
 8012380:	bfa8      	it	ge
 8012382:	2510      	movge	r5, #16
 8012384:	f7ee f8e6 	bl	8000554 <__aeabi_ui2d>
 8012388:	2e09      	cmp	r6, #9
 801238a:	4680      	mov	r8, r0
 801238c:	4689      	mov	r9, r1
 801238e:	dd13      	ble.n	80123b8 <_strtod_l+0x3d8>
 8012390:	4b76      	ldr	r3, [pc, #472]	; (801256c <_strtod_l+0x58c>)
 8012392:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012396:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801239a:	f7ee f955 	bl	8000648 <__aeabi_dmul>
 801239e:	4680      	mov	r8, r0
 80123a0:	4650      	mov	r0, sl
 80123a2:	4689      	mov	r9, r1
 80123a4:	f7ee f8d6 	bl	8000554 <__aeabi_ui2d>
 80123a8:	4602      	mov	r2, r0
 80123aa:	460b      	mov	r3, r1
 80123ac:	4640      	mov	r0, r8
 80123ae:	4649      	mov	r1, r9
 80123b0:	f7ed ff94 	bl	80002dc <__adddf3>
 80123b4:	4680      	mov	r8, r0
 80123b6:	4689      	mov	r9, r1
 80123b8:	2e0f      	cmp	r6, #15
 80123ba:	dc38      	bgt.n	801242e <_strtod_l+0x44e>
 80123bc:	9b08      	ldr	r3, [sp, #32]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	f43f ae49 	beq.w	8012056 <_strtod_l+0x76>
 80123c4:	dd24      	ble.n	8012410 <_strtod_l+0x430>
 80123c6:	2b16      	cmp	r3, #22
 80123c8:	dc0b      	bgt.n	80123e2 <_strtod_l+0x402>
 80123ca:	4968      	ldr	r1, [pc, #416]	; (801256c <_strtod_l+0x58c>)
 80123cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80123d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123d4:	4642      	mov	r2, r8
 80123d6:	464b      	mov	r3, r9
 80123d8:	f7ee f936 	bl	8000648 <__aeabi_dmul>
 80123dc:	4680      	mov	r8, r0
 80123de:	4689      	mov	r9, r1
 80123e0:	e639      	b.n	8012056 <_strtod_l+0x76>
 80123e2:	9a08      	ldr	r2, [sp, #32]
 80123e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80123e8:	4293      	cmp	r3, r2
 80123ea:	db20      	blt.n	801242e <_strtod_l+0x44e>
 80123ec:	4c5f      	ldr	r4, [pc, #380]	; (801256c <_strtod_l+0x58c>)
 80123ee:	f1c6 060f 	rsb	r6, r6, #15
 80123f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80123f6:	4642      	mov	r2, r8
 80123f8:	464b      	mov	r3, r9
 80123fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123fe:	f7ee f923 	bl	8000648 <__aeabi_dmul>
 8012402:	9b08      	ldr	r3, [sp, #32]
 8012404:	1b9e      	subs	r6, r3, r6
 8012406:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801240a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801240e:	e7e3      	b.n	80123d8 <_strtod_l+0x3f8>
 8012410:	9b08      	ldr	r3, [sp, #32]
 8012412:	3316      	adds	r3, #22
 8012414:	db0b      	blt.n	801242e <_strtod_l+0x44e>
 8012416:	9b05      	ldr	r3, [sp, #20]
 8012418:	1bdf      	subs	r7, r3, r7
 801241a:	4b54      	ldr	r3, [pc, #336]	; (801256c <_strtod_l+0x58c>)
 801241c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012424:	4640      	mov	r0, r8
 8012426:	4649      	mov	r1, r9
 8012428:	f7ee fa38 	bl	800089c <__aeabi_ddiv>
 801242c:	e7d6      	b.n	80123dc <_strtod_l+0x3fc>
 801242e:	9b08      	ldr	r3, [sp, #32]
 8012430:	1b75      	subs	r5, r6, r5
 8012432:	441d      	add	r5, r3
 8012434:	2d00      	cmp	r5, #0
 8012436:	dd70      	ble.n	801251a <_strtod_l+0x53a>
 8012438:	f015 030f 	ands.w	r3, r5, #15
 801243c:	d00a      	beq.n	8012454 <_strtod_l+0x474>
 801243e:	494b      	ldr	r1, [pc, #300]	; (801256c <_strtod_l+0x58c>)
 8012440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012444:	4642      	mov	r2, r8
 8012446:	464b      	mov	r3, r9
 8012448:	e9d1 0100 	ldrd	r0, r1, [r1]
 801244c:	f7ee f8fc 	bl	8000648 <__aeabi_dmul>
 8012450:	4680      	mov	r8, r0
 8012452:	4689      	mov	r9, r1
 8012454:	f035 050f 	bics.w	r5, r5, #15
 8012458:	d04d      	beq.n	80124f6 <_strtod_l+0x516>
 801245a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801245e:	dd22      	ble.n	80124a6 <_strtod_l+0x4c6>
 8012460:	2500      	movs	r5, #0
 8012462:	46ab      	mov	fp, r5
 8012464:	9509      	str	r5, [sp, #36]	; 0x24
 8012466:	9505      	str	r5, [sp, #20]
 8012468:	2322      	movs	r3, #34	; 0x22
 801246a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012574 <_strtod_l+0x594>
 801246e:	6023      	str	r3, [r4, #0]
 8012470:	f04f 0800 	mov.w	r8, #0
 8012474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012476:	2b00      	cmp	r3, #0
 8012478:	f43f aded 	beq.w	8012056 <_strtod_l+0x76>
 801247c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801247e:	4620      	mov	r0, r4
 8012480:	f7ff f924 	bl	80116cc <_Bfree>
 8012484:	9905      	ldr	r1, [sp, #20]
 8012486:	4620      	mov	r0, r4
 8012488:	f7ff f920 	bl	80116cc <_Bfree>
 801248c:	4659      	mov	r1, fp
 801248e:	4620      	mov	r0, r4
 8012490:	f7ff f91c 	bl	80116cc <_Bfree>
 8012494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012496:	4620      	mov	r0, r4
 8012498:	f7ff f918 	bl	80116cc <_Bfree>
 801249c:	4629      	mov	r1, r5
 801249e:	4620      	mov	r0, r4
 80124a0:	f7ff f914 	bl	80116cc <_Bfree>
 80124a4:	e5d7      	b.n	8012056 <_strtod_l+0x76>
 80124a6:	4b32      	ldr	r3, [pc, #200]	; (8012570 <_strtod_l+0x590>)
 80124a8:	9304      	str	r3, [sp, #16]
 80124aa:	2300      	movs	r3, #0
 80124ac:	112d      	asrs	r5, r5, #4
 80124ae:	4640      	mov	r0, r8
 80124b0:	4649      	mov	r1, r9
 80124b2:	469a      	mov	sl, r3
 80124b4:	2d01      	cmp	r5, #1
 80124b6:	dc21      	bgt.n	80124fc <_strtod_l+0x51c>
 80124b8:	b10b      	cbz	r3, 80124be <_strtod_l+0x4de>
 80124ba:	4680      	mov	r8, r0
 80124bc:	4689      	mov	r9, r1
 80124be:	492c      	ldr	r1, [pc, #176]	; (8012570 <_strtod_l+0x590>)
 80124c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80124c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80124c8:	4642      	mov	r2, r8
 80124ca:	464b      	mov	r3, r9
 80124cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124d0:	f7ee f8ba 	bl	8000648 <__aeabi_dmul>
 80124d4:	4b27      	ldr	r3, [pc, #156]	; (8012574 <_strtod_l+0x594>)
 80124d6:	460a      	mov	r2, r1
 80124d8:	400b      	ands	r3, r1
 80124da:	4927      	ldr	r1, [pc, #156]	; (8012578 <_strtod_l+0x598>)
 80124dc:	428b      	cmp	r3, r1
 80124de:	4680      	mov	r8, r0
 80124e0:	d8be      	bhi.n	8012460 <_strtod_l+0x480>
 80124e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80124e6:	428b      	cmp	r3, r1
 80124e8:	bf86      	itte	hi
 80124ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801257c <_strtod_l+0x59c>
 80124ee:	f04f 38ff 	movhi.w	r8, #4294967295
 80124f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80124f6:	2300      	movs	r3, #0
 80124f8:	9304      	str	r3, [sp, #16]
 80124fa:	e07b      	b.n	80125f4 <_strtod_l+0x614>
 80124fc:	07ea      	lsls	r2, r5, #31
 80124fe:	d505      	bpl.n	801250c <_strtod_l+0x52c>
 8012500:	9b04      	ldr	r3, [sp, #16]
 8012502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012506:	f7ee f89f 	bl	8000648 <__aeabi_dmul>
 801250a:	2301      	movs	r3, #1
 801250c:	9a04      	ldr	r2, [sp, #16]
 801250e:	3208      	adds	r2, #8
 8012510:	f10a 0a01 	add.w	sl, sl, #1
 8012514:	106d      	asrs	r5, r5, #1
 8012516:	9204      	str	r2, [sp, #16]
 8012518:	e7cc      	b.n	80124b4 <_strtod_l+0x4d4>
 801251a:	d0ec      	beq.n	80124f6 <_strtod_l+0x516>
 801251c:	426d      	negs	r5, r5
 801251e:	f015 020f 	ands.w	r2, r5, #15
 8012522:	d00a      	beq.n	801253a <_strtod_l+0x55a>
 8012524:	4b11      	ldr	r3, [pc, #68]	; (801256c <_strtod_l+0x58c>)
 8012526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801252a:	4640      	mov	r0, r8
 801252c:	4649      	mov	r1, r9
 801252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012532:	f7ee f9b3 	bl	800089c <__aeabi_ddiv>
 8012536:	4680      	mov	r8, r0
 8012538:	4689      	mov	r9, r1
 801253a:	112d      	asrs	r5, r5, #4
 801253c:	d0db      	beq.n	80124f6 <_strtod_l+0x516>
 801253e:	2d1f      	cmp	r5, #31
 8012540:	dd1e      	ble.n	8012580 <_strtod_l+0x5a0>
 8012542:	2500      	movs	r5, #0
 8012544:	46ab      	mov	fp, r5
 8012546:	9509      	str	r5, [sp, #36]	; 0x24
 8012548:	9505      	str	r5, [sp, #20]
 801254a:	2322      	movs	r3, #34	; 0x22
 801254c:	f04f 0800 	mov.w	r8, #0
 8012550:	f04f 0900 	mov.w	r9, #0
 8012554:	6023      	str	r3, [r4, #0]
 8012556:	e78d      	b.n	8012474 <_strtod_l+0x494>
 8012558:	08015d21 	.word	0x08015d21
 801255c:	08015f4c 	.word	0x08015f4c
 8012560:	08015d19 	.word	0x08015d19
 8012564:	08015d4e 	.word	0x08015d4e
 8012568:	080160f8 	.word	0x080160f8
 801256c:	08015e60 	.word	0x08015e60
 8012570:	08015e38 	.word	0x08015e38
 8012574:	7ff00000 	.word	0x7ff00000
 8012578:	7ca00000 	.word	0x7ca00000
 801257c:	7fefffff 	.word	0x7fefffff
 8012580:	f015 0310 	ands.w	r3, r5, #16
 8012584:	bf18      	it	ne
 8012586:	236a      	movne	r3, #106	; 0x6a
 8012588:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801292c <_strtod_l+0x94c>
 801258c:	9304      	str	r3, [sp, #16]
 801258e:	4640      	mov	r0, r8
 8012590:	4649      	mov	r1, r9
 8012592:	2300      	movs	r3, #0
 8012594:	07ea      	lsls	r2, r5, #31
 8012596:	d504      	bpl.n	80125a2 <_strtod_l+0x5c2>
 8012598:	e9da 2300 	ldrd	r2, r3, [sl]
 801259c:	f7ee f854 	bl	8000648 <__aeabi_dmul>
 80125a0:	2301      	movs	r3, #1
 80125a2:	106d      	asrs	r5, r5, #1
 80125a4:	f10a 0a08 	add.w	sl, sl, #8
 80125a8:	d1f4      	bne.n	8012594 <_strtod_l+0x5b4>
 80125aa:	b10b      	cbz	r3, 80125b0 <_strtod_l+0x5d0>
 80125ac:	4680      	mov	r8, r0
 80125ae:	4689      	mov	r9, r1
 80125b0:	9b04      	ldr	r3, [sp, #16]
 80125b2:	b1bb      	cbz	r3, 80125e4 <_strtod_l+0x604>
 80125b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80125b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80125bc:	2b00      	cmp	r3, #0
 80125be:	4649      	mov	r1, r9
 80125c0:	dd10      	ble.n	80125e4 <_strtod_l+0x604>
 80125c2:	2b1f      	cmp	r3, #31
 80125c4:	f340 811e 	ble.w	8012804 <_strtod_l+0x824>
 80125c8:	2b34      	cmp	r3, #52	; 0x34
 80125ca:	bfde      	ittt	le
 80125cc:	f04f 33ff 	movle.w	r3, #4294967295
 80125d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80125d4:	4093      	lslle	r3, r2
 80125d6:	f04f 0800 	mov.w	r8, #0
 80125da:	bfcc      	ite	gt
 80125dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80125e0:	ea03 0901 	andle.w	r9, r3, r1
 80125e4:	2200      	movs	r2, #0
 80125e6:	2300      	movs	r3, #0
 80125e8:	4640      	mov	r0, r8
 80125ea:	4649      	mov	r1, r9
 80125ec:	f7ee fa94 	bl	8000b18 <__aeabi_dcmpeq>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d1a6      	bne.n	8012542 <_strtod_l+0x562>
 80125f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80125fa:	4633      	mov	r3, r6
 80125fc:	465a      	mov	r2, fp
 80125fe:	4620      	mov	r0, r4
 8012600:	f7ff f8cc 	bl	801179c <__s2b>
 8012604:	9009      	str	r0, [sp, #36]	; 0x24
 8012606:	2800      	cmp	r0, #0
 8012608:	f43f af2a 	beq.w	8012460 <_strtod_l+0x480>
 801260c:	9a08      	ldr	r2, [sp, #32]
 801260e:	9b05      	ldr	r3, [sp, #20]
 8012610:	2a00      	cmp	r2, #0
 8012612:	eba3 0307 	sub.w	r3, r3, r7
 8012616:	bfa8      	it	ge
 8012618:	2300      	movge	r3, #0
 801261a:	930c      	str	r3, [sp, #48]	; 0x30
 801261c:	2500      	movs	r5, #0
 801261e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012622:	9312      	str	r3, [sp, #72]	; 0x48
 8012624:	46ab      	mov	fp, r5
 8012626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012628:	4620      	mov	r0, r4
 801262a:	6859      	ldr	r1, [r3, #4]
 801262c:	f7ff f80e 	bl	801164c <_Balloc>
 8012630:	9005      	str	r0, [sp, #20]
 8012632:	2800      	cmp	r0, #0
 8012634:	f43f af18 	beq.w	8012468 <_strtod_l+0x488>
 8012638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801263a:	691a      	ldr	r2, [r3, #16]
 801263c:	3202      	adds	r2, #2
 801263e:	f103 010c 	add.w	r1, r3, #12
 8012642:	0092      	lsls	r2, r2, #2
 8012644:	300c      	adds	r0, #12
 8012646:	f7fe f872 	bl	801072e <memcpy>
 801264a:	ec49 8b10 	vmov	d0, r8, r9
 801264e:	aa18      	add	r2, sp, #96	; 0x60
 8012650:	a917      	add	r1, sp, #92	; 0x5c
 8012652:	4620      	mov	r0, r4
 8012654:	f7ff fbd6 	bl	8011e04 <__d2b>
 8012658:	ec49 8b18 	vmov	d8, r8, r9
 801265c:	9016      	str	r0, [sp, #88]	; 0x58
 801265e:	2800      	cmp	r0, #0
 8012660:	f43f af02 	beq.w	8012468 <_strtod_l+0x488>
 8012664:	2101      	movs	r1, #1
 8012666:	4620      	mov	r0, r4
 8012668:	f7ff f930 	bl	80118cc <__i2b>
 801266c:	4683      	mov	fp, r0
 801266e:	2800      	cmp	r0, #0
 8012670:	f43f aefa 	beq.w	8012468 <_strtod_l+0x488>
 8012674:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012676:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012678:	2e00      	cmp	r6, #0
 801267a:	bfab      	itete	ge
 801267c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801267e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012680:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012682:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012686:	bfac      	ite	ge
 8012688:	eb06 0a03 	addge.w	sl, r6, r3
 801268c:	1b9f      	sublt	r7, r3, r6
 801268e:	9b04      	ldr	r3, [sp, #16]
 8012690:	1af6      	subs	r6, r6, r3
 8012692:	4416      	add	r6, r2
 8012694:	4ba0      	ldr	r3, [pc, #640]	; (8012918 <_strtod_l+0x938>)
 8012696:	3e01      	subs	r6, #1
 8012698:	429e      	cmp	r6, r3
 801269a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801269e:	f280 80c4 	bge.w	801282a <_strtod_l+0x84a>
 80126a2:	1b9b      	subs	r3, r3, r6
 80126a4:	2b1f      	cmp	r3, #31
 80126a6:	eba2 0203 	sub.w	r2, r2, r3
 80126aa:	f04f 0101 	mov.w	r1, #1
 80126ae:	f300 80b0 	bgt.w	8012812 <_strtod_l+0x832>
 80126b2:	fa01 f303 	lsl.w	r3, r1, r3
 80126b6:	930e      	str	r3, [sp, #56]	; 0x38
 80126b8:	2300      	movs	r3, #0
 80126ba:	930d      	str	r3, [sp, #52]	; 0x34
 80126bc:	eb0a 0602 	add.w	r6, sl, r2
 80126c0:	9b04      	ldr	r3, [sp, #16]
 80126c2:	45b2      	cmp	sl, r6
 80126c4:	4417      	add	r7, r2
 80126c6:	441f      	add	r7, r3
 80126c8:	4653      	mov	r3, sl
 80126ca:	bfa8      	it	ge
 80126cc:	4633      	movge	r3, r6
 80126ce:	42bb      	cmp	r3, r7
 80126d0:	bfa8      	it	ge
 80126d2:	463b      	movge	r3, r7
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	bfc2      	ittt	gt
 80126d8:	1af6      	subgt	r6, r6, r3
 80126da:	1aff      	subgt	r7, r7, r3
 80126dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80126e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	dd17      	ble.n	8012716 <_strtod_l+0x736>
 80126e6:	4659      	mov	r1, fp
 80126e8:	461a      	mov	r2, r3
 80126ea:	4620      	mov	r0, r4
 80126ec:	f7ff f9ae 	bl	8011a4c <__pow5mult>
 80126f0:	4683      	mov	fp, r0
 80126f2:	2800      	cmp	r0, #0
 80126f4:	f43f aeb8 	beq.w	8012468 <_strtod_l+0x488>
 80126f8:	4601      	mov	r1, r0
 80126fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80126fc:	4620      	mov	r0, r4
 80126fe:	f7ff f8fb 	bl	80118f8 <__multiply>
 8012702:	900b      	str	r0, [sp, #44]	; 0x2c
 8012704:	2800      	cmp	r0, #0
 8012706:	f43f aeaf 	beq.w	8012468 <_strtod_l+0x488>
 801270a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801270c:	4620      	mov	r0, r4
 801270e:	f7fe ffdd 	bl	80116cc <_Bfree>
 8012712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012714:	9316      	str	r3, [sp, #88]	; 0x58
 8012716:	2e00      	cmp	r6, #0
 8012718:	f300 808c 	bgt.w	8012834 <_strtod_l+0x854>
 801271c:	9b08      	ldr	r3, [sp, #32]
 801271e:	2b00      	cmp	r3, #0
 8012720:	dd08      	ble.n	8012734 <_strtod_l+0x754>
 8012722:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012724:	9905      	ldr	r1, [sp, #20]
 8012726:	4620      	mov	r0, r4
 8012728:	f7ff f990 	bl	8011a4c <__pow5mult>
 801272c:	9005      	str	r0, [sp, #20]
 801272e:	2800      	cmp	r0, #0
 8012730:	f43f ae9a 	beq.w	8012468 <_strtod_l+0x488>
 8012734:	2f00      	cmp	r7, #0
 8012736:	dd08      	ble.n	801274a <_strtod_l+0x76a>
 8012738:	9905      	ldr	r1, [sp, #20]
 801273a:	463a      	mov	r2, r7
 801273c:	4620      	mov	r0, r4
 801273e:	f7ff f9df 	bl	8011b00 <__lshift>
 8012742:	9005      	str	r0, [sp, #20]
 8012744:	2800      	cmp	r0, #0
 8012746:	f43f ae8f 	beq.w	8012468 <_strtod_l+0x488>
 801274a:	f1ba 0f00 	cmp.w	sl, #0
 801274e:	dd08      	ble.n	8012762 <_strtod_l+0x782>
 8012750:	4659      	mov	r1, fp
 8012752:	4652      	mov	r2, sl
 8012754:	4620      	mov	r0, r4
 8012756:	f7ff f9d3 	bl	8011b00 <__lshift>
 801275a:	4683      	mov	fp, r0
 801275c:	2800      	cmp	r0, #0
 801275e:	f43f ae83 	beq.w	8012468 <_strtod_l+0x488>
 8012762:	9a05      	ldr	r2, [sp, #20]
 8012764:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012766:	4620      	mov	r0, r4
 8012768:	f7ff fa52 	bl	8011c10 <__mdiff>
 801276c:	4605      	mov	r5, r0
 801276e:	2800      	cmp	r0, #0
 8012770:	f43f ae7a 	beq.w	8012468 <_strtod_l+0x488>
 8012774:	68c3      	ldr	r3, [r0, #12]
 8012776:	930b      	str	r3, [sp, #44]	; 0x2c
 8012778:	2300      	movs	r3, #0
 801277a:	60c3      	str	r3, [r0, #12]
 801277c:	4659      	mov	r1, fp
 801277e:	f7ff fa2b 	bl	8011bd8 <__mcmp>
 8012782:	2800      	cmp	r0, #0
 8012784:	da60      	bge.n	8012848 <_strtod_l+0x868>
 8012786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012788:	ea53 0308 	orrs.w	r3, r3, r8
 801278c:	f040 8084 	bne.w	8012898 <_strtod_l+0x8b8>
 8012790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012794:	2b00      	cmp	r3, #0
 8012796:	d17f      	bne.n	8012898 <_strtod_l+0x8b8>
 8012798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801279c:	0d1b      	lsrs	r3, r3, #20
 801279e:	051b      	lsls	r3, r3, #20
 80127a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80127a4:	d978      	bls.n	8012898 <_strtod_l+0x8b8>
 80127a6:	696b      	ldr	r3, [r5, #20]
 80127a8:	b913      	cbnz	r3, 80127b0 <_strtod_l+0x7d0>
 80127aa:	692b      	ldr	r3, [r5, #16]
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	dd73      	ble.n	8012898 <_strtod_l+0x8b8>
 80127b0:	4629      	mov	r1, r5
 80127b2:	2201      	movs	r2, #1
 80127b4:	4620      	mov	r0, r4
 80127b6:	f7ff f9a3 	bl	8011b00 <__lshift>
 80127ba:	4659      	mov	r1, fp
 80127bc:	4605      	mov	r5, r0
 80127be:	f7ff fa0b 	bl	8011bd8 <__mcmp>
 80127c2:	2800      	cmp	r0, #0
 80127c4:	dd68      	ble.n	8012898 <_strtod_l+0x8b8>
 80127c6:	9904      	ldr	r1, [sp, #16]
 80127c8:	4a54      	ldr	r2, [pc, #336]	; (801291c <_strtod_l+0x93c>)
 80127ca:	464b      	mov	r3, r9
 80127cc:	2900      	cmp	r1, #0
 80127ce:	f000 8084 	beq.w	80128da <_strtod_l+0x8fa>
 80127d2:	ea02 0109 	and.w	r1, r2, r9
 80127d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80127da:	dc7e      	bgt.n	80128da <_strtod_l+0x8fa>
 80127dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80127e0:	f77f aeb3 	ble.w	801254a <_strtod_l+0x56a>
 80127e4:	4b4e      	ldr	r3, [pc, #312]	; (8012920 <_strtod_l+0x940>)
 80127e6:	4640      	mov	r0, r8
 80127e8:	4649      	mov	r1, r9
 80127ea:	2200      	movs	r2, #0
 80127ec:	f7ed ff2c 	bl	8000648 <__aeabi_dmul>
 80127f0:	4b4a      	ldr	r3, [pc, #296]	; (801291c <_strtod_l+0x93c>)
 80127f2:	400b      	ands	r3, r1
 80127f4:	4680      	mov	r8, r0
 80127f6:	4689      	mov	r9, r1
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f47f ae3f 	bne.w	801247c <_strtod_l+0x49c>
 80127fe:	2322      	movs	r3, #34	; 0x22
 8012800:	6023      	str	r3, [r4, #0]
 8012802:	e63b      	b.n	801247c <_strtod_l+0x49c>
 8012804:	f04f 32ff 	mov.w	r2, #4294967295
 8012808:	fa02 f303 	lsl.w	r3, r2, r3
 801280c:	ea03 0808 	and.w	r8, r3, r8
 8012810:	e6e8      	b.n	80125e4 <_strtod_l+0x604>
 8012812:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012816:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801281a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801281e:	36e2      	adds	r6, #226	; 0xe2
 8012820:	fa01 f306 	lsl.w	r3, r1, r6
 8012824:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012828:	e748      	b.n	80126bc <_strtod_l+0x6dc>
 801282a:	2100      	movs	r1, #0
 801282c:	2301      	movs	r3, #1
 801282e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012832:	e743      	b.n	80126bc <_strtod_l+0x6dc>
 8012834:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012836:	4632      	mov	r2, r6
 8012838:	4620      	mov	r0, r4
 801283a:	f7ff f961 	bl	8011b00 <__lshift>
 801283e:	9016      	str	r0, [sp, #88]	; 0x58
 8012840:	2800      	cmp	r0, #0
 8012842:	f47f af6b 	bne.w	801271c <_strtod_l+0x73c>
 8012846:	e60f      	b.n	8012468 <_strtod_l+0x488>
 8012848:	46ca      	mov	sl, r9
 801284a:	d171      	bne.n	8012930 <_strtod_l+0x950>
 801284c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801284e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012852:	b352      	cbz	r2, 80128aa <_strtod_l+0x8ca>
 8012854:	4a33      	ldr	r2, [pc, #204]	; (8012924 <_strtod_l+0x944>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d12a      	bne.n	80128b0 <_strtod_l+0x8d0>
 801285a:	9b04      	ldr	r3, [sp, #16]
 801285c:	4641      	mov	r1, r8
 801285e:	b1fb      	cbz	r3, 80128a0 <_strtod_l+0x8c0>
 8012860:	4b2e      	ldr	r3, [pc, #184]	; (801291c <_strtod_l+0x93c>)
 8012862:	ea09 0303 	and.w	r3, r9, r3
 8012866:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801286a:	f04f 32ff 	mov.w	r2, #4294967295
 801286e:	d81a      	bhi.n	80128a6 <_strtod_l+0x8c6>
 8012870:	0d1b      	lsrs	r3, r3, #20
 8012872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012876:	fa02 f303 	lsl.w	r3, r2, r3
 801287a:	4299      	cmp	r1, r3
 801287c:	d118      	bne.n	80128b0 <_strtod_l+0x8d0>
 801287e:	4b2a      	ldr	r3, [pc, #168]	; (8012928 <_strtod_l+0x948>)
 8012880:	459a      	cmp	sl, r3
 8012882:	d102      	bne.n	801288a <_strtod_l+0x8aa>
 8012884:	3101      	adds	r1, #1
 8012886:	f43f adef 	beq.w	8012468 <_strtod_l+0x488>
 801288a:	4b24      	ldr	r3, [pc, #144]	; (801291c <_strtod_l+0x93c>)
 801288c:	ea0a 0303 	and.w	r3, sl, r3
 8012890:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012894:	f04f 0800 	mov.w	r8, #0
 8012898:	9b04      	ldr	r3, [sp, #16]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d1a2      	bne.n	80127e4 <_strtod_l+0x804>
 801289e:	e5ed      	b.n	801247c <_strtod_l+0x49c>
 80128a0:	f04f 33ff 	mov.w	r3, #4294967295
 80128a4:	e7e9      	b.n	801287a <_strtod_l+0x89a>
 80128a6:	4613      	mov	r3, r2
 80128a8:	e7e7      	b.n	801287a <_strtod_l+0x89a>
 80128aa:	ea53 0308 	orrs.w	r3, r3, r8
 80128ae:	d08a      	beq.n	80127c6 <_strtod_l+0x7e6>
 80128b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128b2:	b1e3      	cbz	r3, 80128ee <_strtod_l+0x90e>
 80128b4:	ea13 0f0a 	tst.w	r3, sl
 80128b8:	d0ee      	beq.n	8012898 <_strtod_l+0x8b8>
 80128ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128bc:	9a04      	ldr	r2, [sp, #16]
 80128be:	4640      	mov	r0, r8
 80128c0:	4649      	mov	r1, r9
 80128c2:	b1c3      	cbz	r3, 80128f6 <_strtod_l+0x916>
 80128c4:	f7ff fb6f 	bl	8011fa6 <sulp>
 80128c8:	4602      	mov	r2, r0
 80128ca:	460b      	mov	r3, r1
 80128cc:	ec51 0b18 	vmov	r0, r1, d8
 80128d0:	f7ed fd04 	bl	80002dc <__adddf3>
 80128d4:	4680      	mov	r8, r0
 80128d6:	4689      	mov	r9, r1
 80128d8:	e7de      	b.n	8012898 <_strtod_l+0x8b8>
 80128da:	4013      	ands	r3, r2
 80128dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80128e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80128e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80128e8:	f04f 38ff 	mov.w	r8, #4294967295
 80128ec:	e7d4      	b.n	8012898 <_strtod_l+0x8b8>
 80128ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128f0:	ea13 0f08 	tst.w	r3, r8
 80128f4:	e7e0      	b.n	80128b8 <_strtod_l+0x8d8>
 80128f6:	f7ff fb56 	bl	8011fa6 <sulp>
 80128fa:	4602      	mov	r2, r0
 80128fc:	460b      	mov	r3, r1
 80128fe:	ec51 0b18 	vmov	r0, r1, d8
 8012902:	f7ed fce9 	bl	80002d8 <__aeabi_dsub>
 8012906:	2200      	movs	r2, #0
 8012908:	2300      	movs	r3, #0
 801290a:	4680      	mov	r8, r0
 801290c:	4689      	mov	r9, r1
 801290e:	f7ee f903 	bl	8000b18 <__aeabi_dcmpeq>
 8012912:	2800      	cmp	r0, #0
 8012914:	d0c0      	beq.n	8012898 <_strtod_l+0x8b8>
 8012916:	e618      	b.n	801254a <_strtod_l+0x56a>
 8012918:	fffffc02 	.word	0xfffffc02
 801291c:	7ff00000 	.word	0x7ff00000
 8012920:	39500000 	.word	0x39500000
 8012924:	000fffff 	.word	0x000fffff
 8012928:	7fefffff 	.word	0x7fefffff
 801292c:	08015f60 	.word	0x08015f60
 8012930:	4659      	mov	r1, fp
 8012932:	4628      	mov	r0, r5
 8012934:	f7ff fac0 	bl	8011eb8 <__ratio>
 8012938:	ec57 6b10 	vmov	r6, r7, d0
 801293c:	ee10 0a10 	vmov	r0, s0
 8012940:	2200      	movs	r2, #0
 8012942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012946:	4639      	mov	r1, r7
 8012948:	f7ee f8fa 	bl	8000b40 <__aeabi_dcmple>
 801294c:	2800      	cmp	r0, #0
 801294e:	d071      	beq.n	8012a34 <_strtod_l+0xa54>
 8012950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012952:	2b00      	cmp	r3, #0
 8012954:	d17c      	bne.n	8012a50 <_strtod_l+0xa70>
 8012956:	f1b8 0f00 	cmp.w	r8, #0
 801295a:	d15a      	bne.n	8012a12 <_strtod_l+0xa32>
 801295c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012960:	2b00      	cmp	r3, #0
 8012962:	d15d      	bne.n	8012a20 <_strtod_l+0xa40>
 8012964:	4b90      	ldr	r3, [pc, #576]	; (8012ba8 <_strtod_l+0xbc8>)
 8012966:	2200      	movs	r2, #0
 8012968:	4630      	mov	r0, r6
 801296a:	4639      	mov	r1, r7
 801296c:	f7ee f8de 	bl	8000b2c <__aeabi_dcmplt>
 8012970:	2800      	cmp	r0, #0
 8012972:	d15c      	bne.n	8012a2e <_strtod_l+0xa4e>
 8012974:	4630      	mov	r0, r6
 8012976:	4639      	mov	r1, r7
 8012978:	4b8c      	ldr	r3, [pc, #560]	; (8012bac <_strtod_l+0xbcc>)
 801297a:	2200      	movs	r2, #0
 801297c:	f7ed fe64 	bl	8000648 <__aeabi_dmul>
 8012980:	4606      	mov	r6, r0
 8012982:	460f      	mov	r7, r1
 8012984:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012988:	9606      	str	r6, [sp, #24]
 801298a:	9307      	str	r3, [sp, #28]
 801298c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012990:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012994:	4b86      	ldr	r3, [pc, #536]	; (8012bb0 <_strtod_l+0xbd0>)
 8012996:	ea0a 0303 	and.w	r3, sl, r3
 801299a:	930d      	str	r3, [sp, #52]	; 0x34
 801299c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801299e:	4b85      	ldr	r3, [pc, #532]	; (8012bb4 <_strtod_l+0xbd4>)
 80129a0:	429a      	cmp	r2, r3
 80129a2:	f040 8090 	bne.w	8012ac6 <_strtod_l+0xae6>
 80129a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80129aa:	ec49 8b10 	vmov	d0, r8, r9
 80129ae:	f7ff f9b9 	bl	8011d24 <__ulp>
 80129b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129b6:	ec51 0b10 	vmov	r0, r1, d0
 80129ba:	f7ed fe45 	bl	8000648 <__aeabi_dmul>
 80129be:	4642      	mov	r2, r8
 80129c0:	464b      	mov	r3, r9
 80129c2:	f7ed fc8b 	bl	80002dc <__adddf3>
 80129c6:	460b      	mov	r3, r1
 80129c8:	4979      	ldr	r1, [pc, #484]	; (8012bb0 <_strtod_l+0xbd0>)
 80129ca:	4a7b      	ldr	r2, [pc, #492]	; (8012bb8 <_strtod_l+0xbd8>)
 80129cc:	4019      	ands	r1, r3
 80129ce:	4291      	cmp	r1, r2
 80129d0:	4680      	mov	r8, r0
 80129d2:	d944      	bls.n	8012a5e <_strtod_l+0xa7e>
 80129d4:	ee18 2a90 	vmov	r2, s17
 80129d8:	4b78      	ldr	r3, [pc, #480]	; (8012bbc <_strtod_l+0xbdc>)
 80129da:	429a      	cmp	r2, r3
 80129dc:	d104      	bne.n	80129e8 <_strtod_l+0xa08>
 80129de:	ee18 3a10 	vmov	r3, s16
 80129e2:	3301      	adds	r3, #1
 80129e4:	f43f ad40 	beq.w	8012468 <_strtod_l+0x488>
 80129e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012bbc <_strtod_l+0xbdc>
 80129ec:	f04f 38ff 	mov.w	r8, #4294967295
 80129f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80129f2:	4620      	mov	r0, r4
 80129f4:	f7fe fe6a 	bl	80116cc <_Bfree>
 80129f8:	9905      	ldr	r1, [sp, #20]
 80129fa:	4620      	mov	r0, r4
 80129fc:	f7fe fe66 	bl	80116cc <_Bfree>
 8012a00:	4659      	mov	r1, fp
 8012a02:	4620      	mov	r0, r4
 8012a04:	f7fe fe62 	bl	80116cc <_Bfree>
 8012a08:	4629      	mov	r1, r5
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f7fe fe5e 	bl	80116cc <_Bfree>
 8012a10:	e609      	b.n	8012626 <_strtod_l+0x646>
 8012a12:	f1b8 0f01 	cmp.w	r8, #1
 8012a16:	d103      	bne.n	8012a20 <_strtod_l+0xa40>
 8012a18:	f1b9 0f00 	cmp.w	r9, #0
 8012a1c:	f43f ad95 	beq.w	801254a <_strtod_l+0x56a>
 8012a20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012b78 <_strtod_l+0xb98>
 8012a24:	4f60      	ldr	r7, [pc, #384]	; (8012ba8 <_strtod_l+0xbc8>)
 8012a26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a2a:	2600      	movs	r6, #0
 8012a2c:	e7ae      	b.n	801298c <_strtod_l+0x9ac>
 8012a2e:	4f5f      	ldr	r7, [pc, #380]	; (8012bac <_strtod_l+0xbcc>)
 8012a30:	2600      	movs	r6, #0
 8012a32:	e7a7      	b.n	8012984 <_strtod_l+0x9a4>
 8012a34:	4b5d      	ldr	r3, [pc, #372]	; (8012bac <_strtod_l+0xbcc>)
 8012a36:	4630      	mov	r0, r6
 8012a38:	4639      	mov	r1, r7
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	f7ed fe04 	bl	8000648 <__aeabi_dmul>
 8012a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a42:	4606      	mov	r6, r0
 8012a44:	460f      	mov	r7, r1
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d09c      	beq.n	8012984 <_strtod_l+0x9a4>
 8012a4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012a4e:	e79d      	b.n	801298c <_strtod_l+0x9ac>
 8012a50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012b80 <_strtod_l+0xba0>
 8012a54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a58:	ec57 6b17 	vmov	r6, r7, d7
 8012a5c:	e796      	b.n	801298c <_strtod_l+0x9ac>
 8012a5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012a62:	9b04      	ldr	r3, [sp, #16]
 8012a64:	46ca      	mov	sl, r9
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d1c2      	bne.n	80129f0 <_strtod_l+0xa10>
 8012a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012a6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a70:	0d1b      	lsrs	r3, r3, #20
 8012a72:	051b      	lsls	r3, r3, #20
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d1bb      	bne.n	80129f0 <_strtod_l+0xa10>
 8012a78:	4630      	mov	r0, r6
 8012a7a:	4639      	mov	r1, r7
 8012a7c:	f7ee f994 	bl	8000da8 <__aeabi_d2lz>
 8012a80:	f7ed fdb4 	bl	80005ec <__aeabi_l2d>
 8012a84:	4602      	mov	r2, r0
 8012a86:	460b      	mov	r3, r1
 8012a88:	4630      	mov	r0, r6
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	f7ed fc24 	bl	80002d8 <__aeabi_dsub>
 8012a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a96:	ea43 0308 	orr.w	r3, r3, r8
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	4606      	mov	r6, r0
 8012a9e:	460f      	mov	r7, r1
 8012aa0:	d054      	beq.n	8012b4c <_strtod_l+0xb6c>
 8012aa2:	a339      	add	r3, pc, #228	; (adr r3, 8012b88 <_strtod_l+0xba8>)
 8012aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa8:	f7ee f840 	bl	8000b2c <__aeabi_dcmplt>
 8012aac:	2800      	cmp	r0, #0
 8012aae:	f47f ace5 	bne.w	801247c <_strtod_l+0x49c>
 8012ab2:	a337      	add	r3, pc, #220	; (adr r3, 8012b90 <_strtod_l+0xbb0>)
 8012ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab8:	4630      	mov	r0, r6
 8012aba:	4639      	mov	r1, r7
 8012abc:	f7ee f854 	bl	8000b68 <__aeabi_dcmpgt>
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	d095      	beq.n	80129f0 <_strtod_l+0xa10>
 8012ac4:	e4da      	b.n	801247c <_strtod_l+0x49c>
 8012ac6:	9b04      	ldr	r3, [sp, #16]
 8012ac8:	b333      	cbz	r3, 8012b18 <_strtod_l+0xb38>
 8012aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012acc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012ad0:	d822      	bhi.n	8012b18 <_strtod_l+0xb38>
 8012ad2:	a331      	add	r3, pc, #196	; (adr r3, 8012b98 <_strtod_l+0xbb8>)
 8012ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad8:	4630      	mov	r0, r6
 8012ada:	4639      	mov	r1, r7
 8012adc:	f7ee f830 	bl	8000b40 <__aeabi_dcmple>
 8012ae0:	b1a0      	cbz	r0, 8012b0c <_strtod_l+0xb2c>
 8012ae2:	4639      	mov	r1, r7
 8012ae4:	4630      	mov	r0, r6
 8012ae6:	f7ee f887 	bl	8000bf8 <__aeabi_d2uiz>
 8012aea:	2801      	cmp	r0, #1
 8012aec:	bf38      	it	cc
 8012aee:	2001      	movcc	r0, #1
 8012af0:	f7ed fd30 	bl	8000554 <__aeabi_ui2d>
 8012af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012af6:	4606      	mov	r6, r0
 8012af8:	460f      	mov	r7, r1
 8012afa:	bb23      	cbnz	r3, 8012b46 <_strtod_l+0xb66>
 8012afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b00:	9010      	str	r0, [sp, #64]	; 0x40
 8012b02:	9311      	str	r3, [sp, #68]	; 0x44
 8012b04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012b08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012b14:	1a9b      	subs	r3, r3, r2
 8012b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b20:	eef0 0a68 	vmov.f32	s1, s17
 8012b24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012b28:	f7ff f8fc 	bl	8011d24 <__ulp>
 8012b2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012b30:	ec53 2b10 	vmov	r2, r3, d0
 8012b34:	f7ed fd88 	bl	8000648 <__aeabi_dmul>
 8012b38:	ec53 2b18 	vmov	r2, r3, d8
 8012b3c:	f7ed fbce 	bl	80002dc <__adddf3>
 8012b40:	4680      	mov	r8, r0
 8012b42:	4689      	mov	r9, r1
 8012b44:	e78d      	b.n	8012a62 <_strtod_l+0xa82>
 8012b46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012b4a:	e7db      	b.n	8012b04 <_strtod_l+0xb24>
 8012b4c:	a314      	add	r3, pc, #80	; (adr r3, 8012ba0 <_strtod_l+0xbc0>)
 8012b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b52:	f7ed ffeb 	bl	8000b2c <__aeabi_dcmplt>
 8012b56:	e7b3      	b.n	8012ac0 <_strtod_l+0xae0>
 8012b58:	2300      	movs	r3, #0
 8012b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8012b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b60:	6013      	str	r3, [r2, #0]
 8012b62:	f7ff ba7c 	b.w	801205e <_strtod_l+0x7e>
 8012b66:	2a65      	cmp	r2, #101	; 0x65
 8012b68:	f43f ab75 	beq.w	8012256 <_strtod_l+0x276>
 8012b6c:	2a45      	cmp	r2, #69	; 0x45
 8012b6e:	f43f ab72 	beq.w	8012256 <_strtod_l+0x276>
 8012b72:	2301      	movs	r3, #1
 8012b74:	f7ff bbaa 	b.w	80122cc <_strtod_l+0x2ec>
 8012b78:	00000000 	.word	0x00000000
 8012b7c:	bff00000 	.word	0xbff00000
 8012b80:	00000000 	.word	0x00000000
 8012b84:	3ff00000 	.word	0x3ff00000
 8012b88:	94a03595 	.word	0x94a03595
 8012b8c:	3fdfffff 	.word	0x3fdfffff
 8012b90:	35afe535 	.word	0x35afe535
 8012b94:	3fe00000 	.word	0x3fe00000
 8012b98:	ffc00000 	.word	0xffc00000
 8012b9c:	41dfffff 	.word	0x41dfffff
 8012ba0:	94a03595 	.word	0x94a03595
 8012ba4:	3fcfffff 	.word	0x3fcfffff
 8012ba8:	3ff00000 	.word	0x3ff00000
 8012bac:	3fe00000 	.word	0x3fe00000
 8012bb0:	7ff00000 	.word	0x7ff00000
 8012bb4:	7fe00000 	.word	0x7fe00000
 8012bb8:	7c9fffff 	.word	0x7c9fffff
 8012bbc:	7fefffff 	.word	0x7fefffff

08012bc0 <_strtod_r>:
 8012bc0:	4b01      	ldr	r3, [pc, #4]	; (8012bc8 <_strtod_r+0x8>)
 8012bc2:	f7ff ba0d 	b.w	8011fe0 <_strtod_l>
 8012bc6:	bf00      	nop
 8012bc8:	20000074 	.word	0x20000074

08012bcc <_strtol_l.constprop.0>:
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bd2:	d001      	beq.n	8012bd8 <_strtol_l.constprop.0+0xc>
 8012bd4:	2b24      	cmp	r3, #36	; 0x24
 8012bd6:	d906      	bls.n	8012be6 <_strtol_l.constprop.0+0x1a>
 8012bd8:	f7fd fd7c 	bl	80106d4 <__errno>
 8012bdc:	2316      	movs	r3, #22
 8012bde:	6003      	str	r3, [r0, #0]
 8012be0:	2000      	movs	r0, #0
 8012be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012be6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012ccc <_strtol_l.constprop.0+0x100>
 8012bea:	460d      	mov	r5, r1
 8012bec:	462e      	mov	r6, r5
 8012bee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bf2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012bf6:	f017 0708 	ands.w	r7, r7, #8
 8012bfa:	d1f7      	bne.n	8012bec <_strtol_l.constprop.0+0x20>
 8012bfc:	2c2d      	cmp	r4, #45	; 0x2d
 8012bfe:	d132      	bne.n	8012c66 <_strtol_l.constprop.0+0x9a>
 8012c00:	782c      	ldrb	r4, [r5, #0]
 8012c02:	2701      	movs	r7, #1
 8012c04:	1cb5      	adds	r5, r6, #2
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d05b      	beq.n	8012cc2 <_strtol_l.constprop.0+0xf6>
 8012c0a:	2b10      	cmp	r3, #16
 8012c0c:	d109      	bne.n	8012c22 <_strtol_l.constprop.0+0x56>
 8012c0e:	2c30      	cmp	r4, #48	; 0x30
 8012c10:	d107      	bne.n	8012c22 <_strtol_l.constprop.0+0x56>
 8012c12:	782c      	ldrb	r4, [r5, #0]
 8012c14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012c18:	2c58      	cmp	r4, #88	; 0x58
 8012c1a:	d14d      	bne.n	8012cb8 <_strtol_l.constprop.0+0xec>
 8012c1c:	786c      	ldrb	r4, [r5, #1]
 8012c1e:	2310      	movs	r3, #16
 8012c20:	3502      	adds	r5, #2
 8012c22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012c26:	f108 38ff 	add.w	r8, r8, #4294967295
 8012c2a:	f04f 0e00 	mov.w	lr, #0
 8012c2e:	fbb8 f9f3 	udiv	r9, r8, r3
 8012c32:	4676      	mov	r6, lr
 8012c34:	fb03 8a19 	mls	sl, r3, r9, r8
 8012c38:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012c3c:	f1bc 0f09 	cmp.w	ip, #9
 8012c40:	d816      	bhi.n	8012c70 <_strtol_l.constprop.0+0xa4>
 8012c42:	4664      	mov	r4, ip
 8012c44:	42a3      	cmp	r3, r4
 8012c46:	dd24      	ble.n	8012c92 <_strtol_l.constprop.0+0xc6>
 8012c48:	f1be 3fff 	cmp.w	lr, #4294967295
 8012c4c:	d008      	beq.n	8012c60 <_strtol_l.constprop.0+0x94>
 8012c4e:	45b1      	cmp	r9, r6
 8012c50:	d31c      	bcc.n	8012c8c <_strtol_l.constprop.0+0xc0>
 8012c52:	d101      	bne.n	8012c58 <_strtol_l.constprop.0+0x8c>
 8012c54:	45a2      	cmp	sl, r4
 8012c56:	db19      	blt.n	8012c8c <_strtol_l.constprop.0+0xc0>
 8012c58:	fb06 4603 	mla	r6, r6, r3, r4
 8012c5c:	f04f 0e01 	mov.w	lr, #1
 8012c60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c64:	e7e8      	b.n	8012c38 <_strtol_l.constprop.0+0x6c>
 8012c66:	2c2b      	cmp	r4, #43	; 0x2b
 8012c68:	bf04      	itt	eq
 8012c6a:	782c      	ldrbeq	r4, [r5, #0]
 8012c6c:	1cb5      	addeq	r5, r6, #2
 8012c6e:	e7ca      	b.n	8012c06 <_strtol_l.constprop.0+0x3a>
 8012c70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012c74:	f1bc 0f19 	cmp.w	ip, #25
 8012c78:	d801      	bhi.n	8012c7e <_strtol_l.constprop.0+0xb2>
 8012c7a:	3c37      	subs	r4, #55	; 0x37
 8012c7c:	e7e2      	b.n	8012c44 <_strtol_l.constprop.0+0x78>
 8012c7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012c82:	f1bc 0f19 	cmp.w	ip, #25
 8012c86:	d804      	bhi.n	8012c92 <_strtol_l.constprop.0+0xc6>
 8012c88:	3c57      	subs	r4, #87	; 0x57
 8012c8a:	e7db      	b.n	8012c44 <_strtol_l.constprop.0+0x78>
 8012c8c:	f04f 3eff 	mov.w	lr, #4294967295
 8012c90:	e7e6      	b.n	8012c60 <_strtol_l.constprop.0+0x94>
 8012c92:	f1be 3fff 	cmp.w	lr, #4294967295
 8012c96:	d105      	bne.n	8012ca4 <_strtol_l.constprop.0+0xd8>
 8012c98:	2322      	movs	r3, #34	; 0x22
 8012c9a:	6003      	str	r3, [r0, #0]
 8012c9c:	4646      	mov	r6, r8
 8012c9e:	b942      	cbnz	r2, 8012cb2 <_strtol_l.constprop.0+0xe6>
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	e79e      	b.n	8012be2 <_strtol_l.constprop.0+0x16>
 8012ca4:	b107      	cbz	r7, 8012ca8 <_strtol_l.constprop.0+0xdc>
 8012ca6:	4276      	negs	r6, r6
 8012ca8:	2a00      	cmp	r2, #0
 8012caa:	d0f9      	beq.n	8012ca0 <_strtol_l.constprop.0+0xd4>
 8012cac:	f1be 0f00 	cmp.w	lr, #0
 8012cb0:	d000      	beq.n	8012cb4 <_strtol_l.constprop.0+0xe8>
 8012cb2:	1e69      	subs	r1, r5, #1
 8012cb4:	6011      	str	r1, [r2, #0]
 8012cb6:	e7f3      	b.n	8012ca0 <_strtol_l.constprop.0+0xd4>
 8012cb8:	2430      	movs	r4, #48	; 0x30
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d1b1      	bne.n	8012c22 <_strtol_l.constprop.0+0x56>
 8012cbe:	2308      	movs	r3, #8
 8012cc0:	e7af      	b.n	8012c22 <_strtol_l.constprop.0+0x56>
 8012cc2:	2c30      	cmp	r4, #48	; 0x30
 8012cc4:	d0a5      	beq.n	8012c12 <_strtol_l.constprop.0+0x46>
 8012cc6:	230a      	movs	r3, #10
 8012cc8:	e7ab      	b.n	8012c22 <_strtol_l.constprop.0+0x56>
 8012cca:	bf00      	nop
 8012ccc:	08015f89 	.word	0x08015f89

08012cd0 <_strtol_r>:
 8012cd0:	f7ff bf7c 	b.w	8012bcc <_strtol_l.constprop.0>

08012cd4 <__ssputs_r>:
 8012cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cd8:	688e      	ldr	r6, [r1, #8]
 8012cda:	461f      	mov	r7, r3
 8012cdc:	42be      	cmp	r6, r7
 8012cde:	680b      	ldr	r3, [r1, #0]
 8012ce0:	4682      	mov	sl, r0
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	4690      	mov	r8, r2
 8012ce6:	d82c      	bhi.n	8012d42 <__ssputs_r+0x6e>
 8012ce8:	898a      	ldrh	r2, [r1, #12]
 8012cea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012cee:	d026      	beq.n	8012d3e <__ssputs_r+0x6a>
 8012cf0:	6965      	ldr	r5, [r4, #20]
 8012cf2:	6909      	ldr	r1, [r1, #16]
 8012cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012cf8:	eba3 0901 	sub.w	r9, r3, r1
 8012cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d00:	1c7b      	adds	r3, r7, #1
 8012d02:	444b      	add	r3, r9
 8012d04:	106d      	asrs	r5, r5, #1
 8012d06:	429d      	cmp	r5, r3
 8012d08:	bf38      	it	cc
 8012d0a:	461d      	movcc	r5, r3
 8012d0c:	0553      	lsls	r3, r2, #21
 8012d0e:	d527      	bpl.n	8012d60 <__ssputs_r+0x8c>
 8012d10:	4629      	mov	r1, r5
 8012d12:	f7fe fc0f 	bl	8011534 <_malloc_r>
 8012d16:	4606      	mov	r6, r0
 8012d18:	b360      	cbz	r0, 8012d74 <__ssputs_r+0xa0>
 8012d1a:	6921      	ldr	r1, [r4, #16]
 8012d1c:	464a      	mov	r2, r9
 8012d1e:	f7fd fd06 	bl	801072e <memcpy>
 8012d22:	89a3      	ldrh	r3, [r4, #12]
 8012d24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d2c:	81a3      	strh	r3, [r4, #12]
 8012d2e:	6126      	str	r6, [r4, #16]
 8012d30:	6165      	str	r5, [r4, #20]
 8012d32:	444e      	add	r6, r9
 8012d34:	eba5 0509 	sub.w	r5, r5, r9
 8012d38:	6026      	str	r6, [r4, #0]
 8012d3a:	60a5      	str	r5, [r4, #8]
 8012d3c:	463e      	mov	r6, r7
 8012d3e:	42be      	cmp	r6, r7
 8012d40:	d900      	bls.n	8012d44 <__ssputs_r+0x70>
 8012d42:	463e      	mov	r6, r7
 8012d44:	6820      	ldr	r0, [r4, #0]
 8012d46:	4632      	mov	r2, r6
 8012d48:	4641      	mov	r1, r8
 8012d4a:	f000 fd5c 	bl	8013806 <memmove>
 8012d4e:	68a3      	ldr	r3, [r4, #8]
 8012d50:	1b9b      	subs	r3, r3, r6
 8012d52:	60a3      	str	r3, [r4, #8]
 8012d54:	6823      	ldr	r3, [r4, #0]
 8012d56:	4433      	add	r3, r6
 8012d58:	6023      	str	r3, [r4, #0]
 8012d5a:	2000      	movs	r0, #0
 8012d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d60:	462a      	mov	r2, r5
 8012d62:	f001 f922 	bl	8013faa <_realloc_r>
 8012d66:	4606      	mov	r6, r0
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	d1e0      	bne.n	8012d2e <__ssputs_r+0x5a>
 8012d6c:	6921      	ldr	r1, [r4, #16]
 8012d6e:	4650      	mov	r0, sl
 8012d70:	f7fe fb6c 	bl	801144c <_free_r>
 8012d74:	230c      	movs	r3, #12
 8012d76:	f8ca 3000 	str.w	r3, [sl]
 8012d7a:	89a3      	ldrh	r3, [r4, #12]
 8012d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d80:	81a3      	strh	r3, [r4, #12]
 8012d82:	f04f 30ff 	mov.w	r0, #4294967295
 8012d86:	e7e9      	b.n	8012d5c <__ssputs_r+0x88>

08012d88 <_svfiprintf_r>:
 8012d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8c:	4698      	mov	r8, r3
 8012d8e:	898b      	ldrh	r3, [r1, #12]
 8012d90:	061b      	lsls	r3, r3, #24
 8012d92:	b09d      	sub	sp, #116	; 0x74
 8012d94:	4607      	mov	r7, r0
 8012d96:	460d      	mov	r5, r1
 8012d98:	4614      	mov	r4, r2
 8012d9a:	d50e      	bpl.n	8012dba <_svfiprintf_r+0x32>
 8012d9c:	690b      	ldr	r3, [r1, #16]
 8012d9e:	b963      	cbnz	r3, 8012dba <_svfiprintf_r+0x32>
 8012da0:	2140      	movs	r1, #64	; 0x40
 8012da2:	f7fe fbc7 	bl	8011534 <_malloc_r>
 8012da6:	6028      	str	r0, [r5, #0]
 8012da8:	6128      	str	r0, [r5, #16]
 8012daa:	b920      	cbnz	r0, 8012db6 <_svfiprintf_r+0x2e>
 8012dac:	230c      	movs	r3, #12
 8012dae:	603b      	str	r3, [r7, #0]
 8012db0:	f04f 30ff 	mov.w	r0, #4294967295
 8012db4:	e0d0      	b.n	8012f58 <_svfiprintf_r+0x1d0>
 8012db6:	2340      	movs	r3, #64	; 0x40
 8012db8:	616b      	str	r3, [r5, #20]
 8012dba:	2300      	movs	r3, #0
 8012dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8012dbe:	2320      	movs	r3, #32
 8012dc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012dc8:	2330      	movs	r3, #48	; 0x30
 8012dca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012f70 <_svfiprintf_r+0x1e8>
 8012dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012dd2:	f04f 0901 	mov.w	r9, #1
 8012dd6:	4623      	mov	r3, r4
 8012dd8:	469a      	mov	sl, r3
 8012dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dde:	b10a      	cbz	r2, 8012de4 <_svfiprintf_r+0x5c>
 8012de0:	2a25      	cmp	r2, #37	; 0x25
 8012de2:	d1f9      	bne.n	8012dd8 <_svfiprintf_r+0x50>
 8012de4:	ebba 0b04 	subs.w	fp, sl, r4
 8012de8:	d00b      	beq.n	8012e02 <_svfiprintf_r+0x7a>
 8012dea:	465b      	mov	r3, fp
 8012dec:	4622      	mov	r2, r4
 8012dee:	4629      	mov	r1, r5
 8012df0:	4638      	mov	r0, r7
 8012df2:	f7ff ff6f 	bl	8012cd4 <__ssputs_r>
 8012df6:	3001      	adds	r0, #1
 8012df8:	f000 80a9 	beq.w	8012f4e <_svfiprintf_r+0x1c6>
 8012dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dfe:	445a      	add	r2, fp
 8012e00:	9209      	str	r2, [sp, #36]	; 0x24
 8012e02:	f89a 3000 	ldrb.w	r3, [sl]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	f000 80a1 	beq.w	8012f4e <_svfiprintf_r+0x1c6>
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e16:	f10a 0a01 	add.w	sl, sl, #1
 8012e1a:	9304      	str	r3, [sp, #16]
 8012e1c:	9307      	str	r3, [sp, #28]
 8012e1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e22:	931a      	str	r3, [sp, #104]	; 0x68
 8012e24:	4654      	mov	r4, sl
 8012e26:	2205      	movs	r2, #5
 8012e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e2c:	4850      	ldr	r0, [pc, #320]	; (8012f70 <_svfiprintf_r+0x1e8>)
 8012e2e:	f7ed f9f7 	bl	8000220 <memchr>
 8012e32:	9a04      	ldr	r2, [sp, #16]
 8012e34:	b9d8      	cbnz	r0, 8012e6e <_svfiprintf_r+0xe6>
 8012e36:	06d0      	lsls	r0, r2, #27
 8012e38:	bf44      	itt	mi
 8012e3a:	2320      	movmi	r3, #32
 8012e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e40:	0711      	lsls	r1, r2, #28
 8012e42:	bf44      	itt	mi
 8012e44:	232b      	movmi	r3, #43	; 0x2b
 8012e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8012e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8012e50:	d015      	beq.n	8012e7e <_svfiprintf_r+0xf6>
 8012e52:	9a07      	ldr	r2, [sp, #28]
 8012e54:	4654      	mov	r4, sl
 8012e56:	2000      	movs	r0, #0
 8012e58:	f04f 0c0a 	mov.w	ip, #10
 8012e5c:	4621      	mov	r1, r4
 8012e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e62:	3b30      	subs	r3, #48	; 0x30
 8012e64:	2b09      	cmp	r3, #9
 8012e66:	d94d      	bls.n	8012f04 <_svfiprintf_r+0x17c>
 8012e68:	b1b0      	cbz	r0, 8012e98 <_svfiprintf_r+0x110>
 8012e6a:	9207      	str	r2, [sp, #28]
 8012e6c:	e014      	b.n	8012e98 <_svfiprintf_r+0x110>
 8012e6e:	eba0 0308 	sub.w	r3, r0, r8
 8012e72:	fa09 f303 	lsl.w	r3, r9, r3
 8012e76:	4313      	orrs	r3, r2
 8012e78:	9304      	str	r3, [sp, #16]
 8012e7a:	46a2      	mov	sl, r4
 8012e7c:	e7d2      	b.n	8012e24 <_svfiprintf_r+0x9c>
 8012e7e:	9b03      	ldr	r3, [sp, #12]
 8012e80:	1d19      	adds	r1, r3, #4
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	9103      	str	r1, [sp, #12]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	bfbb      	ittet	lt
 8012e8a:	425b      	neglt	r3, r3
 8012e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8012e90:	9307      	strge	r3, [sp, #28]
 8012e92:	9307      	strlt	r3, [sp, #28]
 8012e94:	bfb8      	it	lt
 8012e96:	9204      	strlt	r2, [sp, #16]
 8012e98:	7823      	ldrb	r3, [r4, #0]
 8012e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8012e9c:	d10c      	bne.n	8012eb8 <_svfiprintf_r+0x130>
 8012e9e:	7863      	ldrb	r3, [r4, #1]
 8012ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ea2:	d134      	bne.n	8012f0e <_svfiprintf_r+0x186>
 8012ea4:	9b03      	ldr	r3, [sp, #12]
 8012ea6:	1d1a      	adds	r2, r3, #4
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	9203      	str	r2, [sp, #12]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	bfb8      	it	lt
 8012eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012eb4:	3402      	adds	r4, #2
 8012eb6:	9305      	str	r3, [sp, #20]
 8012eb8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012f80 <_svfiprintf_r+0x1f8>
 8012ebc:	7821      	ldrb	r1, [r4, #0]
 8012ebe:	2203      	movs	r2, #3
 8012ec0:	4650      	mov	r0, sl
 8012ec2:	f7ed f9ad 	bl	8000220 <memchr>
 8012ec6:	b138      	cbz	r0, 8012ed8 <_svfiprintf_r+0x150>
 8012ec8:	9b04      	ldr	r3, [sp, #16]
 8012eca:	eba0 000a 	sub.w	r0, r0, sl
 8012ece:	2240      	movs	r2, #64	; 0x40
 8012ed0:	4082      	lsls	r2, r0
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	3401      	adds	r4, #1
 8012ed6:	9304      	str	r3, [sp, #16]
 8012ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012edc:	4825      	ldr	r0, [pc, #148]	; (8012f74 <_svfiprintf_r+0x1ec>)
 8012ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ee2:	2206      	movs	r2, #6
 8012ee4:	f7ed f99c 	bl	8000220 <memchr>
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	d038      	beq.n	8012f5e <_svfiprintf_r+0x1d6>
 8012eec:	4b22      	ldr	r3, [pc, #136]	; (8012f78 <_svfiprintf_r+0x1f0>)
 8012eee:	bb1b      	cbnz	r3, 8012f38 <_svfiprintf_r+0x1b0>
 8012ef0:	9b03      	ldr	r3, [sp, #12]
 8012ef2:	3307      	adds	r3, #7
 8012ef4:	f023 0307 	bic.w	r3, r3, #7
 8012ef8:	3308      	adds	r3, #8
 8012efa:	9303      	str	r3, [sp, #12]
 8012efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012efe:	4433      	add	r3, r6
 8012f00:	9309      	str	r3, [sp, #36]	; 0x24
 8012f02:	e768      	b.n	8012dd6 <_svfiprintf_r+0x4e>
 8012f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f08:	460c      	mov	r4, r1
 8012f0a:	2001      	movs	r0, #1
 8012f0c:	e7a6      	b.n	8012e5c <_svfiprintf_r+0xd4>
 8012f0e:	2300      	movs	r3, #0
 8012f10:	3401      	adds	r4, #1
 8012f12:	9305      	str	r3, [sp, #20]
 8012f14:	4619      	mov	r1, r3
 8012f16:	f04f 0c0a 	mov.w	ip, #10
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f20:	3a30      	subs	r2, #48	; 0x30
 8012f22:	2a09      	cmp	r2, #9
 8012f24:	d903      	bls.n	8012f2e <_svfiprintf_r+0x1a6>
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d0c6      	beq.n	8012eb8 <_svfiprintf_r+0x130>
 8012f2a:	9105      	str	r1, [sp, #20]
 8012f2c:	e7c4      	b.n	8012eb8 <_svfiprintf_r+0x130>
 8012f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f32:	4604      	mov	r4, r0
 8012f34:	2301      	movs	r3, #1
 8012f36:	e7f0      	b.n	8012f1a <_svfiprintf_r+0x192>
 8012f38:	ab03      	add	r3, sp, #12
 8012f3a:	9300      	str	r3, [sp, #0]
 8012f3c:	462a      	mov	r2, r5
 8012f3e:	4b0f      	ldr	r3, [pc, #60]	; (8012f7c <_svfiprintf_r+0x1f4>)
 8012f40:	a904      	add	r1, sp, #16
 8012f42:	4638      	mov	r0, r7
 8012f44:	f7fc fbe2 	bl	800f70c <_printf_float>
 8012f48:	1c42      	adds	r2, r0, #1
 8012f4a:	4606      	mov	r6, r0
 8012f4c:	d1d6      	bne.n	8012efc <_svfiprintf_r+0x174>
 8012f4e:	89ab      	ldrh	r3, [r5, #12]
 8012f50:	065b      	lsls	r3, r3, #25
 8012f52:	f53f af2d 	bmi.w	8012db0 <_svfiprintf_r+0x28>
 8012f56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f58:	b01d      	add	sp, #116	; 0x74
 8012f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5e:	ab03      	add	r3, sp, #12
 8012f60:	9300      	str	r3, [sp, #0]
 8012f62:	462a      	mov	r2, r5
 8012f64:	4b05      	ldr	r3, [pc, #20]	; (8012f7c <_svfiprintf_r+0x1f4>)
 8012f66:	a904      	add	r1, sp, #16
 8012f68:	4638      	mov	r0, r7
 8012f6a:	f7fc fe73 	bl	800fc54 <_printf_i>
 8012f6e:	e7eb      	b.n	8012f48 <_svfiprintf_r+0x1c0>
 8012f70:	08016089 	.word	0x08016089
 8012f74:	08016093 	.word	0x08016093
 8012f78:	0800f70d 	.word	0x0800f70d
 8012f7c:	08012cd5 	.word	0x08012cd5
 8012f80:	0801608f 	.word	0x0801608f

08012f84 <_sungetc_r>:
 8012f84:	b538      	push	{r3, r4, r5, lr}
 8012f86:	1c4b      	adds	r3, r1, #1
 8012f88:	4614      	mov	r4, r2
 8012f8a:	d103      	bne.n	8012f94 <_sungetc_r+0x10>
 8012f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8012f90:	4628      	mov	r0, r5
 8012f92:	bd38      	pop	{r3, r4, r5, pc}
 8012f94:	8993      	ldrh	r3, [r2, #12]
 8012f96:	f023 0320 	bic.w	r3, r3, #32
 8012f9a:	8193      	strh	r3, [r2, #12]
 8012f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f9e:	6852      	ldr	r2, [r2, #4]
 8012fa0:	b2cd      	uxtb	r5, r1
 8012fa2:	b18b      	cbz	r3, 8012fc8 <_sungetc_r+0x44>
 8012fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	dd08      	ble.n	8012fbc <_sungetc_r+0x38>
 8012faa:	6823      	ldr	r3, [r4, #0]
 8012fac:	1e5a      	subs	r2, r3, #1
 8012fae:	6022      	str	r2, [r4, #0]
 8012fb0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012fb4:	6863      	ldr	r3, [r4, #4]
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	6063      	str	r3, [r4, #4]
 8012fba:	e7e9      	b.n	8012f90 <_sungetc_r+0xc>
 8012fbc:	4621      	mov	r1, r4
 8012fbe:	f000 fbe8 	bl	8013792 <__submore>
 8012fc2:	2800      	cmp	r0, #0
 8012fc4:	d0f1      	beq.n	8012faa <_sungetc_r+0x26>
 8012fc6:	e7e1      	b.n	8012f8c <_sungetc_r+0x8>
 8012fc8:	6921      	ldr	r1, [r4, #16]
 8012fca:	6823      	ldr	r3, [r4, #0]
 8012fcc:	b151      	cbz	r1, 8012fe4 <_sungetc_r+0x60>
 8012fce:	4299      	cmp	r1, r3
 8012fd0:	d208      	bcs.n	8012fe4 <_sungetc_r+0x60>
 8012fd2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012fd6:	42a9      	cmp	r1, r5
 8012fd8:	d104      	bne.n	8012fe4 <_sungetc_r+0x60>
 8012fda:	3b01      	subs	r3, #1
 8012fdc:	3201      	adds	r2, #1
 8012fde:	6023      	str	r3, [r4, #0]
 8012fe0:	6062      	str	r2, [r4, #4]
 8012fe2:	e7d5      	b.n	8012f90 <_sungetc_r+0xc>
 8012fe4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fec:	6363      	str	r3, [r4, #52]	; 0x34
 8012fee:	2303      	movs	r3, #3
 8012ff0:	63a3      	str	r3, [r4, #56]	; 0x38
 8012ff2:	4623      	mov	r3, r4
 8012ff4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012ff8:	6023      	str	r3, [r4, #0]
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e7dc      	b.n	8012fb8 <_sungetc_r+0x34>

08012ffe <__ssrefill_r>:
 8012ffe:	b510      	push	{r4, lr}
 8013000:	460c      	mov	r4, r1
 8013002:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013004:	b169      	cbz	r1, 8013022 <__ssrefill_r+0x24>
 8013006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801300a:	4299      	cmp	r1, r3
 801300c:	d001      	beq.n	8013012 <__ssrefill_r+0x14>
 801300e:	f7fe fa1d 	bl	801144c <_free_r>
 8013012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013014:	6063      	str	r3, [r4, #4]
 8013016:	2000      	movs	r0, #0
 8013018:	6360      	str	r0, [r4, #52]	; 0x34
 801301a:	b113      	cbz	r3, 8013022 <__ssrefill_r+0x24>
 801301c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801301e:	6023      	str	r3, [r4, #0]
 8013020:	bd10      	pop	{r4, pc}
 8013022:	6923      	ldr	r3, [r4, #16]
 8013024:	6023      	str	r3, [r4, #0]
 8013026:	2300      	movs	r3, #0
 8013028:	6063      	str	r3, [r4, #4]
 801302a:	89a3      	ldrh	r3, [r4, #12]
 801302c:	f043 0320 	orr.w	r3, r3, #32
 8013030:	81a3      	strh	r3, [r4, #12]
 8013032:	f04f 30ff 	mov.w	r0, #4294967295
 8013036:	e7f3      	b.n	8013020 <__ssrefill_r+0x22>

08013038 <__ssvfiscanf_r>:
 8013038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801303c:	460c      	mov	r4, r1
 801303e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013042:	2100      	movs	r1, #0
 8013044:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013048:	49a6      	ldr	r1, [pc, #664]	; (80132e4 <__ssvfiscanf_r+0x2ac>)
 801304a:	91a0      	str	r1, [sp, #640]	; 0x280
 801304c:	f10d 0804 	add.w	r8, sp, #4
 8013050:	49a5      	ldr	r1, [pc, #660]	; (80132e8 <__ssvfiscanf_r+0x2b0>)
 8013052:	4fa6      	ldr	r7, [pc, #664]	; (80132ec <__ssvfiscanf_r+0x2b4>)
 8013054:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80132f0 <__ssvfiscanf_r+0x2b8>
 8013058:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801305c:	4606      	mov	r6, r0
 801305e:	91a1      	str	r1, [sp, #644]	; 0x284
 8013060:	9300      	str	r3, [sp, #0]
 8013062:	7813      	ldrb	r3, [r2, #0]
 8013064:	2b00      	cmp	r3, #0
 8013066:	f000 815a 	beq.w	801331e <__ssvfiscanf_r+0x2e6>
 801306a:	5cf9      	ldrb	r1, [r7, r3]
 801306c:	f011 0108 	ands.w	r1, r1, #8
 8013070:	f102 0501 	add.w	r5, r2, #1
 8013074:	d019      	beq.n	80130aa <__ssvfiscanf_r+0x72>
 8013076:	6863      	ldr	r3, [r4, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	dd0f      	ble.n	801309c <__ssvfiscanf_r+0x64>
 801307c:	6823      	ldr	r3, [r4, #0]
 801307e:	781a      	ldrb	r2, [r3, #0]
 8013080:	5cba      	ldrb	r2, [r7, r2]
 8013082:	0712      	lsls	r2, r2, #28
 8013084:	d401      	bmi.n	801308a <__ssvfiscanf_r+0x52>
 8013086:	462a      	mov	r2, r5
 8013088:	e7eb      	b.n	8013062 <__ssvfiscanf_r+0x2a>
 801308a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801308c:	3201      	adds	r2, #1
 801308e:	9245      	str	r2, [sp, #276]	; 0x114
 8013090:	6862      	ldr	r2, [r4, #4]
 8013092:	3301      	adds	r3, #1
 8013094:	3a01      	subs	r2, #1
 8013096:	6062      	str	r2, [r4, #4]
 8013098:	6023      	str	r3, [r4, #0]
 801309a:	e7ec      	b.n	8013076 <__ssvfiscanf_r+0x3e>
 801309c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801309e:	4621      	mov	r1, r4
 80130a0:	4630      	mov	r0, r6
 80130a2:	4798      	blx	r3
 80130a4:	2800      	cmp	r0, #0
 80130a6:	d0e9      	beq.n	801307c <__ssvfiscanf_r+0x44>
 80130a8:	e7ed      	b.n	8013086 <__ssvfiscanf_r+0x4e>
 80130aa:	2b25      	cmp	r3, #37	; 0x25
 80130ac:	d012      	beq.n	80130d4 <__ssvfiscanf_r+0x9c>
 80130ae:	469a      	mov	sl, r3
 80130b0:	6863      	ldr	r3, [r4, #4]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	f340 8091 	ble.w	80131da <__ssvfiscanf_r+0x1a2>
 80130b8:	6822      	ldr	r2, [r4, #0]
 80130ba:	7813      	ldrb	r3, [r2, #0]
 80130bc:	4553      	cmp	r3, sl
 80130be:	f040 812e 	bne.w	801331e <__ssvfiscanf_r+0x2e6>
 80130c2:	6863      	ldr	r3, [r4, #4]
 80130c4:	3b01      	subs	r3, #1
 80130c6:	6063      	str	r3, [r4, #4]
 80130c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80130ca:	3201      	adds	r2, #1
 80130cc:	3301      	adds	r3, #1
 80130ce:	6022      	str	r2, [r4, #0]
 80130d0:	9345      	str	r3, [sp, #276]	; 0x114
 80130d2:	e7d8      	b.n	8013086 <__ssvfiscanf_r+0x4e>
 80130d4:	9141      	str	r1, [sp, #260]	; 0x104
 80130d6:	9143      	str	r1, [sp, #268]	; 0x10c
 80130d8:	7853      	ldrb	r3, [r2, #1]
 80130da:	2b2a      	cmp	r3, #42	; 0x2a
 80130dc:	bf02      	ittt	eq
 80130de:	2310      	moveq	r3, #16
 80130e0:	1c95      	addeq	r5, r2, #2
 80130e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80130e4:	220a      	movs	r2, #10
 80130e6:	46aa      	mov	sl, r5
 80130e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80130ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80130f0:	2b09      	cmp	r3, #9
 80130f2:	d91c      	bls.n	801312e <__ssvfiscanf_r+0xf6>
 80130f4:	487e      	ldr	r0, [pc, #504]	; (80132f0 <__ssvfiscanf_r+0x2b8>)
 80130f6:	2203      	movs	r2, #3
 80130f8:	f7ed f892 	bl	8000220 <memchr>
 80130fc:	b138      	cbz	r0, 801310e <__ssvfiscanf_r+0xd6>
 80130fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013100:	eba0 0009 	sub.w	r0, r0, r9
 8013104:	2301      	movs	r3, #1
 8013106:	4083      	lsls	r3, r0
 8013108:	4313      	orrs	r3, r2
 801310a:	9341      	str	r3, [sp, #260]	; 0x104
 801310c:	4655      	mov	r5, sl
 801310e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013112:	2b78      	cmp	r3, #120	; 0x78
 8013114:	d806      	bhi.n	8013124 <__ssvfiscanf_r+0xec>
 8013116:	2b57      	cmp	r3, #87	; 0x57
 8013118:	d810      	bhi.n	801313c <__ssvfiscanf_r+0x104>
 801311a:	2b25      	cmp	r3, #37	; 0x25
 801311c:	d0c7      	beq.n	80130ae <__ssvfiscanf_r+0x76>
 801311e:	d857      	bhi.n	80131d0 <__ssvfiscanf_r+0x198>
 8013120:	2b00      	cmp	r3, #0
 8013122:	d065      	beq.n	80131f0 <__ssvfiscanf_r+0x1b8>
 8013124:	2303      	movs	r3, #3
 8013126:	9347      	str	r3, [sp, #284]	; 0x11c
 8013128:	230a      	movs	r3, #10
 801312a:	9342      	str	r3, [sp, #264]	; 0x108
 801312c:	e076      	b.n	801321c <__ssvfiscanf_r+0x1e4>
 801312e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013130:	fb02 1103 	mla	r1, r2, r3, r1
 8013134:	3930      	subs	r1, #48	; 0x30
 8013136:	9143      	str	r1, [sp, #268]	; 0x10c
 8013138:	4655      	mov	r5, sl
 801313a:	e7d4      	b.n	80130e6 <__ssvfiscanf_r+0xae>
 801313c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013140:	2a20      	cmp	r2, #32
 8013142:	d8ef      	bhi.n	8013124 <__ssvfiscanf_r+0xec>
 8013144:	a101      	add	r1, pc, #4	; (adr r1, 801314c <__ssvfiscanf_r+0x114>)
 8013146:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801314a:	bf00      	nop
 801314c:	080131ff 	.word	0x080131ff
 8013150:	08013125 	.word	0x08013125
 8013154:	08013125 	.word	0x08013125
 8013158:	0801325d 	.word	0x0801325d
 801315c:	08013125 	.word	0x08013125
 8013160:	08013125 	.word	0x08013125
 8013164:	08013125 	.word	0x08013125
 8013168:	08013125 	.word	0x08013125
 801316c:	08013125 	.word	0x08013125
 8013170:	08013125 	.word	0x08013125
 8013174:	08013125 	.word	0x08013125
 8013178:	08013273 	.word	0x08013273
 801317c:	08013259 	.word	0x08013259
 8013180:	080131d7 	.word	0x080131d7
 8013184:	080131d7 	.word	0x080131d7
 8013188:	080131d7 	.word	0x080131d7
 801318c:	08013125 	.word	0x08013125
 8013190:	08013215 	.word	0x08013215
 8013194:	08013125 	.word	0x08013125
 8013198:	08013125 	.word	0x08013125
 801319c:	08013125 	.word	0x08013125
 80131a0:	08013125 	.word	0x08013125
 80131a4:	08013283 	.word	0x08013283
 80131a8:	08013251 	.word	0x08013251
 80131ac:	080131f7 	.word	0x080131f7
 80131b0:	08013125 	.word	0x08013125
 80131b4:	08013125 	.word	0x08013125
 80131b8:	0801327f 	.word	0x0801327f
 80131bc:	08013125 	.word	0x08013125
 80131c0:	08013259 	.word	0x08013259
 80131c4:	08013125 	.word	0x08013125
 80131c8:	08013125 	.word	0x08013125
 80131cc:	080131ff 	.word	0x080131ff
 80131d0:	3b45      	subs	r3, #69	; 0x45
 80131d2:	2b02      	cmp	r3, #2
 80131d4:	d8a6      	bhi.n	8013124 <__ssvfiscanf_r+0xec>
 80131d6:	2305      	movs	r3, #5
 80131d8:	e01f      	b.n	801321a <__ssvfiscanf_r+0x1e2>
 80131da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131dc:	4621      	mov	r1, r4
 80131de:	4630      	mov	r0, r6
 80131e0:	4798      	blx	r3
 80131e2:	2800      	cmp	r0, #0
 80131e4:	f43f af68 	beq.w	80130b8 <__ssvfiscanf_r+0x80>
 80131e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80131ea:	2800      	cmp	r0, #0
 80131ec:	f040 808d 	bne.w	801330a <__ssvfiscanf_r+0x2d2>
 80131f0:	f04f 30ff 	mov.w	r0, #4294967295
 80131f4:	e08f      	b.n	8013316 <__ssvfiscanf_r+0x2de>
 80131f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80131f8:	f042 0220 	orr.w	r2, r2, #32
 80131fc:	9241      	str	r2, [sp, #260]	; 0x104
 80131fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013204:	9241      	str	r2, [sp, #260]	; 0x104
 8013206:	2210      	movs	r2, #16
 8013208:	2b6f      	cmp	r3, #111	; 0x6f
 801320a:	9242      	str	r2, [sp, #264]	; 0x108
 801320c:	bf34      	ite	cc
 801320e:	2303      	movcc	r3, #3
 8013210:	2304      	movcs	r3, #4
 8013212:	e002      	b.n	801321a <__ssvfiscanf_r+0x1e2>
 8013214:	2300      	movs	r3, #0
 8013216:	9342      	str	r3, [sp, #264]	; 0x108
 8013218:	2303      	movs	r3, #3
 801321a:	9347      	str	r3, [sp, #284]	; 0x11c
 801321c:	6863      	ldr	r3, [r4, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	dd3d      	ble.n	801329e <__ssvfiscanf_r+0x266>
 8013222:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013224:	0659      	lsls	r1, r3, #25
 8013226:	d404      	bmi.n	8013232 <__ssvfiscanf_r+0x1fa>
 8013228:	6823      	ldr	r3, [r4, #0]
 801322a:	781a      	ldrb	r2, [r3, #0]
 801322c:	5cba      	ldrb	r2, [r7, r2]
 801322e:	0712      	lsls	r2, r2, #28
 8013230:	d43c      	bmi.n	80132ac <__ssvfiscanf_r+0x274>
 8013232:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013234:	2b02      	cmp	r3, #2
 8013236:	dc4b      	bgt.n	80132d0 <__ssvfiscanf_r+0x298>
 8013238:	466b      	mov	r3, sp
 801323a:	4622      	mov	r2, r4
 801323c:	a941      	add	r1, sp, #260	; 0x104
 801323e:	4630      	mov	r0, r6
 8013240:	f000 f872 	bl	8013328 <_scanf_chars>
 8013244:	2801      	cmp	r0, #1
 8013246:	d06a      	beq.n	801331e <__ssvfiscanf_r+0x2e6>
 8013248:	2802      	cmp	r0, #2
 801324a:	f47f af1c 	bne.w	8013086 <__ssvfiscanf_r+0x4e>
 801324e:	e7cb      	b.n	80131e8 <__ssvfiscanf_r+0x1b0>
 8013250:	2308      	movs	r3, #8
 8013252:	9342      	str	r3, [sp, #264]	; 0x108
 8013254:	2304      	movs	r3, #4
 8013256:	e7e0      	b.n	801321a <__ssvfiscanf_r+0x1e2>
 8013258:	220a      	movs	r2, #10
 801325a:	e7d5      	b.n	8013208 <__ssvfiscanf_r+0x1d0>
 801325c:	4629      	mov	r1, r5
 801325e:	4640      	mov	r0, r8
 8013260:	f000 fa5e 	bl	8013720 <__sccl>
 8013264:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801326a:	9341      	str	r3, [sp, #260]	; 0x104
 801326c:	4605      	mov	r5, r0
 801326e:	2301      	movs	r3, #1
 8013270:	e7d3      	b.n	801321a <__ssvfiscanf_r+0x1e2>
 8013272:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013278:	9341      	str	r3, [sp, #260]	; 0x104
 801327a:	2300      	movs	r3, #0
 801327c:	e7cd      	b.n	801321a <__ssvfiscanf_r+0x1e2>
 801327e:	2302      	movs	r3, #2
 8013280:	e7cb      	b.n	801321a <__ssvfiscanf_r+0x1e2>
 8013282:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013284:	06c3      	lsls	r3, r0, #27
 8013286:	f53f aefe 	bmi.w	8013086 <__ssvfiscanf_r+0x4e>
 801328a:	9b00      	ldr	r3, [sp, #0]
 801328c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801328e:	1d19      	adds	r1, r3, #4
 8013290:	9100      	str	r1, [sp, #0]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	07c0      	lsls	r0, r0, #31
 8013296:	bf4c      	ite	mi
 8013298:	801a      	strhmi	r2, [r3, #0]
 801329a:	601a      	strpl	r2, [r3, #0]
 801329c:	e6f3      	b.n	8013086 <__ssvfiscanf_r+0x4e>
 801329e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80132a0:	4621      	mov	r1, r4
 80132a2:	4630      	mov	r0, r6
 80132a4:	4798      	blx	r3
 80132a6:	2800      	cmp	r0, #0
 80132a8:	d0bb      	beq.n	8013222 <__ssvfiscanf_r+0x1ea>
 80132aa:	e79d      	b.n	80131e8 <__ssvfiscanf_r+0x1b0>
 80132ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80132ae:	3201      	adds	r2, #1
 80132b0:	9245      	str	r2, [sp, #276]	; 0x114
 80132b2:	6862      	ldr	r2, [r4, #4]
 80132b4:	3a01      	subs	r2, #1
 80132b6:	2a00      	cmp	r2, #0
 80132b8:	6062      	str	r2, [r4, #4]
 80132ba:	dd02      	ble.n	80132c2 <__ssvfiscanf_r+0x28a>
 80132bc:	3301      	adds	r3, #1
 80132be:	6023      	str	r3, [r4, #0]
 80132c0:	e7b2      	b.n	8013228 <__ssvfiscanf_r+0x1f0>
 80132c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80132c4:	4621      	mov	r1, r4
 80132c6:	4630      	mov	r0, r6
 80132c8:	4798      	blx	r3
 80132ca:	2800      	cmp	r0, #0
 80132cc:	d0ac      	beq.n	8013228 <__ssvfiscanf_r+0x1f0>
 80132ce:	e78b      	b.n	80131e8 <__ssvfiscanf_r+0x1b0>
 80132d0:	2b04      	cmp	r3, #4
 80132d2:	dc0f      	bgt.n	80132f4 <__ssvfiscanf_r+0x2bc>
 80132d4:	466b      	mov	r3, sp
 80132d6:	4622      	mov	r2, r4
 80132d8:	a941      	add	r1, sp, #260	; 0x104
 80132da:	4630      	mov	r0, r6
 80132dc:	f000 f87e 	bl	80133dc <_scanf_i>
 80132e0:	e7b0      	b.n	8013244 <__ssvfiscanf_r+0x20c>
 80132e2:	bf00      	nop
 80132e4:	08012f85 	.word	0x08012f85
 80132e8:	08012fff 	.word	0x08012fff
 80132ec:	08015f89 	.word	0x08015f89
 80132f0:	0801608f 	.word	0x0801608f
 80132f4:	4b0b      	ldr	r3, [pc, #44]	; (8013324 <__ssvfiscanf_r+0x2ec>)
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	f43f aec5 	beq.w	8013086 <__ssvfiscanf_r+0x4e>
 80132fc:	466b      	mov	r3, sp
 80132fe:	4622      	mov	r2, r4
 8013300:	a941      	add	r1, sp, #260	; 0x104
 8013302:	4630      	mov	r0, r6
 8013304:	f7fc fdc8 	bl	800fe98 <_scanf_float>
 8013308:	e79c      	b.n	8013244 <__ssvfiscanf_r+0x20c>
 801330a:	89a3      	ldrh	r3, [r4, #12]
 801330c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013310:	bf18      	it	ne
 8013312:	f04f 30ff 	movne.w	r0, #4294967295
 8013316:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801331a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801331e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013320:	e7f9      	b.n	8013316 <__ssvfiscanf_r+0x2de>
 8013322:	bf00      	nop
 8013324:	0800fe99 	.word	0x0800fe99

08013328 <_scanf_chars>:
 8013328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801332c:	4615      	mov	r5, r2
 801332e:	688a      	ldr	r2, [r1, #8]
 8013330:	4680      	mov	r8, r0
 8013332:	460c      	mov	r4, r1
 8013334:	b932      	cbnz	r2, 8013344 <_scanf_chars+0x1c>
 8013336:	698a      	ldr	r2, [r1, #24]
 8013338:	2a00      	cmp	r2, #0
 801333a:	bf0c      	ite	eq
 801333c:	2201      	moveq	r2, #1
 801333e:	f04f 32ff 	movne.w	r2, #4294967295
 8013342:	608a      	str	r2, [r1, #8]
 8013344:	6822      	ldr	r2, [r4, #0]
 8013346:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80133d8 <_scanf_chars+0xb0>
 801334a:	06d1      	lsls	r1, r2, #27
 801334c:	bf5f      	itttt	pl
 801334e:	681a      	ldrpl	r2, [r3, #0]
 8013350:	1d11      	addpl	r1, r2, #4
 8013352:	6019      	strpl	r1, [r3, #0]
 8013354:	6816      	ldrpl	r6, [r2, #0]
 8013356:	2700      	movs	r7, #0
 8013358:	69a0      	ldr	r0, [r4, #24]
 801335a:	b188      	cbz	r0, 8013380 <_scanf_chars+0x58>
 801335c:	2801      	cmp	r0, #1
 801335e:	d107      	bne.n	8013370 <_scanf_chars+0x48>
 8013360:	682a      	ldr	r2, [r5, #0]
 8013362:	7811      	ldrb	r1, [r2, #0]
 8013364:	6962      	ldr	r2, [r4, #20]
 8013366:	5c52      	ldrb	r2, [r2, r1]
 8013368:	b952      	cbnz	r2, 8013380 <_scanf_chars+0x58>
 801336a:	2f00      	cmp	r7, #0
 801336c:	d031      	beq.n	80133d2 <_scanf_chars+0xaa>
 801336e:	e022      	b.n	80133b6 <_scanf_chars+0x8e>
 8013370:	2802      	cmp	r0, #2
 8013372:	d120      	bne.n	80133b6 <_scanf_chars+0x8e>
 8013374:	682b      	ldr	r3, [r5, #0]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	f819 3003 	ldrb.w	r3, [r9, r3]
 801337c:	071b      	lsls	r3, r3, #28
 801337e:	d41a      	bmi.n	80133b6 <_scanf_chars+0x8e>
 8013380:	6823      	ldr	r3, [r4, #0]
 8013382:	06da      	lsls	r2, r3, #27
 8013384:	bf5e      	ittt	pl
 8013386:	682b      	ldrpl	r3, [r5, #0]
 8013388:	781b      	ldrbpl	r3, [r3, #0]
 801338a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801338e:	682a      	ldr	r2, [r5, #0]
 8013390:	686b      	ldr	r3, [r5, #4]
 8013392:	3201      	adds	r2, #1
 8013394:	602a      	str	r2, [r5, #0]
 8013396:	68a2      	ldr	r2, [r4, #8]
 8013398:	3b01      	subs	r3, #1
 801339a:	3a01      	subs	r2, #1
 801339c:	606b      	str	r3, [r5, #4]
 801339e:	3701      	adds	r7, #1
 80133a0:	60a2      	str	r2, [r4, #8]
 80133a2:	b142      	cbz	r2, 80133b6 <_scanf_chars+0x8e>
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	dcd7      	bgt.n	8013358 <_scanf_chars+0x30>
 80133a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80133ac:	4629      	mov	r1, r5
 80133ae:	4640      	mov	r0, r8
 80133b0:	4798      	blx	r3
 80133b2:	2800      	cmp	r0, #0
 80133b4:	d0d0      	beq.n	8013358 <_scanf_chars+0x30>
 80133b6:	6823      	ldr	r3, [r4, #0]
 80133b8:	f013 0310 	ands.w	r3, r3, #16
 80133bc:	d105      	bne.n	80133ca <_scanf_chars+0xa2>
 80133be:	68e2      	ldr	r2, [r4, #12]
 80133c0:	3201      	adds	r2, #1
 80133c2:	60e2      	str	r2, [r4, #12]
 80133c4:	69a2      	ldr	r2, [r4, #24]
 80133c6:	b102      	cbz	r2, 80133ca <_scanf_chars+0xa2>
 80133c8:	7033      	strb	r3, [r6, #0]
 80133ca:	6923      	ldr	r3, [r4, #16]
 80133cc:	443b      	add	r3, r7
 80133ce:	6123      	str	r3, [r4, #16]
 80133d0:	2000      	movs	r0, #0
 80133d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133d6:	bf00      	nop
 80133d8:	08015f89 	.word	0x08015f89

080133dc <_scanf_i>:
 80133dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133e0:	4698      	mov	r8, r3
 80133e2:	4b74      	ldr	r3, [pc, #464]	; (80135b4 <_scanf_i+0x1d8>)
 80133e4:	460c      	mov	r4, r1
 80133e6:	4682      	mov	sl, r0
 80133e8:	4616      	mov	r6, r2
 80133ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80133ee:	b087      	sub	sp, #28
 80133f0:	ab03      	add	r3, sp, #12
 80133f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80133f6:	4b70      	ldr	r3, [pc, #448]	; (80135b8 <_scanf_i+0x1dc>)
 80133f8:	69a1      	ldr	r1, [r4, #24]
 80133fa:	4a70      	ldr	r2, [pc, #448]	; (80135bc <_scanf_i+0x1e0>)
 80133fc:	2903      	cmp	r1, #3
 80133fe:	bf18      	it	ne
 8013400:	461a      	movne	r2, r3
 8013402:	68a3      	ldr	r3, [r4, #8]
 8013404:	9201      	str	r2, [sp, #4]
 8013406:	1e5a      	subs	r2, r3, #1
 8013408:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801340c:	bf88      	it	hi
 801340e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013412:	4627      	mov	r7, r4
 8013414:	bf82      	ittt	hi
 8013416:	eb03 0905 	addhi.w	r9, r3, r5
 801341a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801341e:	60a3      	strhi	r3, [r4, #8]
 8013420:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013424:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013428:	bf98      	it	ls
 801342a:	f04f 0900 	movls.w	r9, #0
 801342e:	6023      	str	r3, [r4, #0]
 8013430:	463d      	mov	r5, r7
 8013432:	f04f 0b00 	mov.w	fp, #0
 8013436:	6831      	ldr	r1, [r6, #0]
 8013438:	ab03      	add	r3, sp, #12
 801343a:	7809      	ldrb	r1, [r1, #0]
 801343c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013440:	2202      	movs	r2, #2
 8013442:	f7ec feed 	bl	8000220 <memchr>
 8013446:	b328      	cbz	r0, 8013494 <_scanf_i+0xb8>
 8013448:	f1bb 0f01 	cmp.w	fp, #1
 801344c:	d159      	bne.n	8013502 <_scanf_i+0x126>
 801344e:	6862      	ldr	r2, [r4, #4]
 8013450:	b92a      	cbnz	r2, 801345e <_scanf_i+0x82>
 8013452:	6822      	ldr	r2, [r4, #0]
 8013454:	2308      	movs	r3, #8
 8013456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801345a:	6063      	str	r3, [r4, #4]
 801345c:	6022      	str	r2, [r4, #0]
 801345e:	6822      	ldr	r2, [r4, #0]
 8013460:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013464:	6022      	str	r2, [r4, #0]
 8013466:	68a2      	ldr	r2, [r4, #8]
 8013468:	1e51      	subs	r1, r2, #1
 801346a:	60a1      	str	r1, [r4, #8]
 801346c:	b192      	cbz	r2, 8013494 <_scanf_i+0xb8>
 801346e:	6832      	ldr	r2, [r6, #0]
 8013470:	1c51      	adds	r1, r2, #1
 8013472:	6031      	str	r1, [r6, #0]
 8013474:	7812      	ldrb	r2, [r2, #0]
 8013476:	f805 2b01 	strb.w	r2, [r5], #1
 801347a:	6872      	ldr	r2, [r6, #4]
 801347c:	3a01      	subs	r2, #1
 801347e:	2a00      	cmp	r2, #0
 8013480:	6072      	str	r2, [r6, #4]
 8013482:	dc07      	bgt.n	8013494 <_scanf_i+0xb8>
 8013484:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013488:	4631      	mov	r1, r6
 801348a:	4650      	mov	r0, sl
 801348c:	4790      	blx	r2
 801348e:	2800      	cmp	r0, #0
 8013490:	f040 8085 	bne.w	801359e <_scanf_i+0x1c2>
 8013494:	f10b 0b01 	add.w	fp, fp, #1
 8013498:	f1bb 0f03 	cmp.w	fp, #3
 801349c:	d1cb      	bne.n	8013436 <_scanf_i+0x5a>
 801349e:	6863      	ldr	r3, [r4, #4]
 80134a0:	b90b      	cbnz	r3, 80134a6 <_scanf_i+0xca>
 80134a2:	230a      	movs	r3, #10
 80134a4:	6063      	str	r3, [r4, #4]
 80134a6:	6863      	ldr	r3, [r4, #4]
 80134a8:	4945      	ldr	r1, [pc, #276]	; (80135c0 <_scanf_i+0x1e4>)
 80134aa:	6960      	ldr	r0, [r4, #20]
 80134ac:	1ac9      	subs	r1, r1, r3
 80134ae:	f000 f937 	bl	8013720 <__sccl>
 80134b2:	f04f 0b00 	mov.w	fp, #0
 80134b6:	68a3      	ldr	r3, [r4, #8]
 80134b8:	6822      	ldr	r2, [r4, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d03d      	beq.n	801353a <_scanf_i+0x15e>
 80134be:	6831      	ldr	r1, [r6, #0]
 80134c0:	6960      	ldr	r0, [r4, #20]
 80134c2:	f891 c000 	ldrb.w	ip, [r1]
 80134c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80134ca:	2800      	cmp	r0, #0
 80134cc:	d035      	beq.n	801353a <_scanf_i+0x15e>
 80134ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80134d2:	d124      	bne.n	801351e <_scanf_i+0x142>
 80134d4:	0510      	lsls	r0, r2, #20
 80134d6:	d522      	bpl.n	801351e <_scanf_i+0x142>
 80134d8:	f10b 0b01 	add.w	fp, fp, #1
 80134dc:	f1b9 0f00 	cmp.w	r9, #0
 80134e0:	d003      	beq.n	80134ea <_scanf_i+0x10e>
 80134e2:	3301      	adds	r3, #1
 80134e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80134e8:	60a3      	str	r3, [r4, #8]
 80134ea:	6873      	ldr	r3, [r6, #4]
 80134ec:	3b01      	subs	r3, #1
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	6073      	str	r3, [r6, #4]
 80134f2:	dd1b      	ble.n	801352c <_scanf_i+0x150>
 80134f4:	6833      	ldr	r3, [r6, #0]
 80134f6:	3301      	adds	r3, #1
 80134f8:	6033      	str	r3, [r6, #0]
 80134fa:	68a3      	ldr	r3, [r4, #8]
 80134fc:	3b01      	subs	r3, #1
 80134fe:	60a3      	str	r3, [r4, #8]
 8013500:	e7d9      	b.n	80134b6 <_scanf_i+0xda>
 8013502:	f1bb 0f02 	cmp.w	fp, #2
 8013506:	d1ae      	bne.n	8013466 <_scanf_i+0x8a>
 8013508:	6822      	ldr	r2, [r4, #0]
 801350a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801350e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013512:	d1bf      	bne.n	8013494 <_scanf_i+0xb8>
 8013514:	2310      	movs	r3, #16
 8013516:	6063      	str	r3, [r4, #4]
 8013518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801351c:	e7a2      	b.n	8013464 <_scanf_i+0x88>
 801351e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013522:	6022      	str	r2, [r4, #0]
 8013524:	780b      	ldrb	r3, [r1, #0]
 8013526:	f805 3b01 	strb.w	r3, [r5], #1
 801352a:	e7de      	b.n	80134ea <_scanf_i+0x10e>
 801352c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013530:	4631      	mov	r1, r6
 8013532:	4650      	mov	r0, sl
 8013534:	4798      	blx	r3
 8013536:	2800      	cmp	r0, #0
 8013538:	d0df      	beq.n	80134fa <_scanf_i+0x11e>
 801353a:	6823      	ldr	r3, [r4, #0]
 801353c:	05d9      	lsls	r1, r3, #23
 801353e:	d50d      	bpl.n	801355c <_scanf_i+0x180>
 8013540:	42bd      	cmp	r5, r7
 8013542:	d909      	bls.n	8013558 <_scanf_i+0x17c>
 8013544:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013548:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801354c:	4632      	mov	r2, r6
 801354e:	4650      	mov	r0, sl
 8013550:	4798      	blx	r3
 8013552:	f105 39ff 	add.w	r9, r5, #4294967295
 8013556:	464d      	mov	r5, r9
 8013558:	42bd      	cmp	r5, r7
 801355a:	d028      	beq.n	80135ae <_scanf_i+0x1d2>
 801355c:	6822      	ldr	r2, [r4, #0]
 801355e:	f012 0210 	ands.w	r2, r2, #16
 8013562:	d113      	bne.n	801358c <_scanf_i+0x1b0>
 8013564:	702a      	strb	r2, [r5, #0]
 8013566:	6863      	ldr	r3, [r4, #4]
 8013568:	9e01      	ldr	r6, [sp, #4]
 801356a:	4639      	mov	r1, r7
 801356c:	4650      	mov	r0, sl
 801356e:	47b0      	blx	r6
 8013570:	f8d8 3000 	ldr.w	r3, [r8]
 8013574:	6821      	ldr	r1, [r4, #0]
 8013576:	1d1a      	adds	r2, r3, #4
 8013578:	f8c8 2000 	str.w	r2, [r8]
 801357c:	f011 0f20 	tst.w	r1, #32
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	d00f      	beq.n	80135a4 <_scanf_i+0x1c8>
 8013584:	6018      	str	r0, [r3, #0]
 8013586:	68e3      	ldr	r3, [r4, #12]
 8013588:	3301      	adds	r3, #1
 801358a:	60e3      	str	r3, [r4, #12]
 801358c:	6923      	ldr	r3, [r4, #16]
 801358e:	1bed      	subs	r5, r5, r7
 8013590:	445d      	add	r5, fp
 8013592:	442b      	add	r3, r5
 8013594:	6123      	str	r3, [r4, #16]
 8013596:	2000      	movs	r0, #0
 8013598:	b007      	add	sp, #28
 801359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801359e:	f04f 0b00 	mov.w	fp, #0
 80135a2:	e7ca      	b.n	801353a <_scanf_i+0x15e>
 80135a4:	07ca      	lsls	r2, r1, #31
 80135a6:	bf4c      	ite	mi
 80135a8:	8018      	strhmi	r0, [r3, #0]
 80135aa:	6018      	strpl	r0, [r3, #0]
 80135ac:	e7eb      	b.n	8013586 <_scanf_i+0x1aa>
 80135ae:	2001      	movs	r0, #1
 80135b0:	e7f2      	b.n	8013598 <_scanf_i+0x1bc>
 80135b2:	bf00      	nop
 80135b4:	08015ce8 	.word	0x08015ce8
 80135b8:	080140ed 	.word	0x080140ed
 80135bc:	08012cd1 	.word	0x08012cd1
 80135c0:	080160aa 	.word	0x080160aa

080135c4 <__sflush_r>:
 80135c4:	898a      	ldrh	r2, [r1, #12]
 80135c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ca:	4605      	mov	r5, r0
 80135cc:	0710      	lsls	r0, r2, #28
 80135ce:	460c      	mov	r4, r1
 80135d0:	d458      	bmi.n	8013684 <__sflush_r+0xc0>
 80135d2:	684b      	ldr	r3, [r1, #4]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	dc05      	bgt.n	80135e4 <__sflush_r+0x20>
 80135d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80135da:	2b00      	cmp	r3, #0
 80135dc:	dc02      	bgt.n	80135e4 <__sflush_r+0x20>
 80135de:	2000      	movs	r0, #0
 80135e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135e6:	2e00      	cmp	r6, #0
 80135e8:	d0f9      	beq.n	80135de <__sflush_r+0x1a>
 80135ea:	2300      	movs	r3, #0
 80135ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80135f0:	682f      	ldr	r7, [r5, #0]
 80135f2:	6a21      	ldr	r1, [r4, #32]
 80135f4:	602b      	str	r3, [r5, #0]
 80135f6:	d032      	beq.n	801365e <__sflush_r+0x9a>
 80135f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80135fa:	89a3      	ldrh	r3, [r4, #12]
 80135fc:	075a      	lsls	r2, r3, #29
 80135fe:	d505      	bpl.n	801360c <__sflush_r+0x48>
 8013600:	6863      	ldr	r3, [r4, #4]
 8013602:	1ac0      	subs	r0, r0, r3
 8013604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013606:	b10b      	cbz	r3, 801360c <__sflush_r+0x48>
 8013608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801360a:	1ac0      	subs	r0, r0, r3
 801360c:	2300      	movs	r3, #0
 801360e:	4602      	mov	r2, r0
 8013610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013612:	6a21      	ldr	r1, [r4, #32]
 8013614:	4628      	mov	r0, r5
 8013616:	47b0      	blx	r6
 8013618:	1c43      	adds	r3, r0, #1
 801361a:	89a3      	ldrh	r3, [r4, #12]
 801361c:	d106      	bne.n	801362c <__sflush_r+0x68>
 801361e:	6829      	ldr	r1, [r5, #0]
 8013620:	291d      	cmp	r1, #29
 8013622:	d82b      	bhi.n	801367c <__sflush_r+0xb8>
 8013624:	4a29      	ldr	r2, [pc, #164]	; (80136cc <__sflush_r+0x108>)
 8013626:	410a      	asrs	r2, r1
 8013628:	07d6      	lsls	r6, r2, #31
 801362a:	d427      	bmi.n	801367c <__sflush_r+0xb8>
 801362c:	2200      	movs	r2, #0
 801362e:	6062      	str	r2, [r4, #4]
 8013630:	04d9      	lsls	r1, r3, #19
 8013632:	6922      	ldr	r2, [r4, #16]
 8013634:	6022      	str	r2, [r4, #0]
 8013636:	d504      	bpl.n	8013642 <__sflush_r+0x7e>
 8013638:	1c42      	adds	r2, r0, #1
 801363a:	d101      	bne.n	8013640 <__sflush_r+0x7c>
 801363c:	682b      	ldr	r3, [r5, #0]
 801363e:	b903      	cbnz	r3, 8013642 <__sflush_r+0x7e>
 8013640:	6560      	str	r0, [r4, #84]	; 0x54
 8013642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013644:	602f      	str	r7, [r5, #0]
 8013646:	2900      	cmp	r1, #0
 8013648:	d0c9      	beq.n	80135de <__sflush_r+0x1a>
 801364a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801364e:	4299      	cmp	r1, r3
 8013650:	d002      	beq.n	8013658 <__sflush_r+0x94>
 8013652:	4628      	mov	r0, r5
 8013654:	f7fd fefa 	bl	801144c <_free_r>
 8013658:	2000      	movs	r0, #0
 801365a:	6360      	str	r0, [r4, #52]	; 0x34
 801365c:	e7c0      	b.n	80135e0 <__sflush_r+0x1c>
 801365e:	2301      	movs	r3, #1
 8013660:	4628      	mov	r0, r5
 8013662:	47b0      	blx	r6
 8013664:	1c41      	adds	r1, r0, #1
 8013666:	d1c8      	bne.n	80135fa <__sflush_r+0x36>
 8013668:	682b      	ldr	r3, [r5, #0]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d0c5      	beq.n	80135fa <__sflush_r+0x36>
 801366e:	2b1d      	cmp	r3, #29
 8013670:	d001      	beq.n	8013676 <__sflush_r+0xb2>
 8013672:	2b16      	cmp	r3, #22
 8013674:	d101      	bne.n	801367a <__sflush_r+0xb6>
 8013676:	602f      	str	r7, [r5, #0]
 8013678:	e7b1      	b.n	80135de <__sflush_r+0x1a>
 801367a:	89a3      	ldrh	r3, [r4, #12]
 801367c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013680:	81a3      	strh	r3, [r4, #12]
 8013682:	e7ad      	b.n	80135e0 <__sflush_r+0x1c>
 8013684:	690f      	ldr	r7, [r1, #16]
 8013686:	2f00      	cmp	r7, #0
 8013688:	d0a9      	beq.n	80135de <__sflush_r+0x1a>
 801368a:	0793      	lsls	r3, r2, #30
 801368c:	680e      	ldr	r6, [r1, #0]
 801368e:	bf08      	it	eq
 8013690:	694b      	ldreq	r3, [r1, #20]
 8013692:	600f      	str	r7, [r1, #0]
 8013694:	bf18      	it	ne
 8013696:	2300      	movne	r3, #0
 8013698:	eba6 0807 	sub.w	r8, r6, r7
 801369c:	608b      	str	r3, [r1, #8]
 801369e:	f1b8 0f00 	cmp.w	r8, #0
 80136a2:	dd9c      	ble.n	80135de <__sflush_r+0x1a>
 80136a4:	6a21      	ldr	r1, [r4, #32]
 80136a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80136a8:	4643      	mov	r3, r8
 80136aa:	463a      	mov	r2, r7
 80136ac:	4628      	mov	r0, r5
 80136ae:	47b0      	blx	r6
 80136b0:	2800      	cmp	r0, #0
 80136b2:	dc06      	bgt.n	80136c2 <__sflush_r+0xfe>
 80136b4:	89a3      	ldrh	r3, [r4, #12]
 80136b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136ba:	81a3      	strh	r3, [r4, #12]
 80136bc:	f04f 30ff 	mov.w	r0, #4294967295
 80136c0:	e78e      	b.n	80135e0 <__sflush_r+0x1c>
 80136c2:	4407      	add	r7, r0
 80136c4:	eba8 0800 	sub.w	r8, r8, r0
 80136c8:	e7e9      	b.n	801369e <__sflush_r+0xda>
 80136ca:	bf00      	nop
 80136cc:	dfbffffe 	.word	0xdfbffffe

080136d0 <_fflush_r>:
 80136d0:	b538      	push	{r3, r4, r5, lr}
 80136d2:	690b      	ldr	r3, [r1, #16]
 80136d4:	4605      	mov	r5, r0
 80136d6:	460c      	mov	r4, r1
 80136d8:	b913      	cbnz	r3, 80136e0 <_fflush_r+0x10>
 80136da:	2500      	movs	r5, #0
 80136dc:	4628      	mov	r0, r5
 80136de:	bd38      	pop	{r3, r4, r5, pc}
 80136e0:	b118      	cbz	r0, 80136ea <_fflush_r+0x1a>
 80136e2:	6a03      	ldr	r3, [r0, #32]
 80136e4:	b90b      	cbnz	r3, 80136ea <_fflush_r+0x1a>
 80136e6:	f7fc fe73 	bl	80103d0 <__sinit>
 80136ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d0f3      	beq.n	80136da <_fflush_r+0xa>
 80136f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80136f4:	07d0      	lsls	r0, r2, #31
 80136f6:	d404      	bmi.n	8013702 <_fflush_r+0x32>
 80136f8:	0599      	lsls	r1, r3, #22
 80136fa:	d402      	bmi.n	8013702 <_fflush_r+0x32>
 80136fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136fe:	f7fd f814 	bl	801072a <__retarget_lock_acquire_recursive>
 8013702:	4628      	mov	r0, r5
 8013704:	4621      	mov	r1, r4
 8013706:	f7ff ff5d 	bl	80135c4 <__sflush_r>
 801370a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801370c:	07da      	lsls	r2, r3, #31
 801370e:	4605      	mov	r5, r0
 8013710:	d4e4      	bmi.n	80136dc <_fflush_r+0xc>
 8013712:	89a3      	ldrh	r3, [r4, #12]
 8013714:	059b      	lsls	r3, r3, #22
 8013716:	d4e1      	bmi.n	80136dc <_fflush_r+0xc>
 8013718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801371a:	f7fd f807 	bl	801072c <__retarget_lock_release_recursive>
 801371e:	e7dd      	b.n	80136dc <_fflush_r+0xc>

08013720 <__sccl>:
 8013720:	b570      	push	{r4, r5, r6, lr}
 8013722:	780b      	ldrb	r3, [r1, #0]
 8013724:	4604      	mov	r4, r0
 8013726:	2b5e      	cmp	r3, #94	; 0x5e
 8013728:	bf0b      	itete	eq
 801372a:	784b      	ldrbeq	r3, [r1, #1]
 801372c:	1c4a      	addne	r2, r1, #1
 801372e:	1c8a      	addeq	r2, r1, #2
 8013730:	2100      	movne	r1, #0
 8013732:	bf08      	it	eq
 8013734:	2101      	moveq	r1, #1
 8013736:	3801      	subs	r0, #1
 8013738:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801373c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013740:	42a8      	cmp	r0, r5
 8013742:	d1fb      	bne.n	801373c <__sccl+0x1c>
 8013744:	b90b      	cbnz	r3, 801374a <__sccl+0x2a>
 8013746:	1e50      	subs	r0, r2, #1
 8013748:	bd70      	pop	{r4, r5, r6, pc}
 801374a:	f081 0101 	eor.w	r1, r1, #1
 801374e:	54e1      	strb	r1, [r4, r3]
 8013750:	4610      	mov	r0, r2
 8013752:	4602      	mov	r2, r0
 8013754:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013758:	2d2d      	cmp	r5, #45	; 0x2d
 801375a:	d005      	beq.n	8013768 <__sccl+0x48>
 801375c:	2d5d      	cmp	r5, #93	; 0x5d
 801375e:	d016      	beq.n	801378e <__sccl+0x6e>
 8013760:	2d00      	cmp	r5, #0
 8013762:	d0f1      	beq.n	8013748 <__sccl+0x28>
 8013764:	462b      	mov	r3, r5
 8013766:	e7f2      	b.n	801374e <__sccl+0x2e>
 8013768:	7846      	ldrb	r6, [r0, #1]
 801376a:	2e5d      	cmp	r6, #93	; 0x5d
 801376c:	d0fa      	beq.n	8013764 <__sccl+0x44>
 801376e:	42b3      	cmp	r3, r6
 8013770:	dcf8      	bgt.n	8013764 <__sccl+0x44>
 8013772:	3002      	adds	r0, #2
 8013774:	461a      	mov	r2, r3
 8013776:	3201      	adds	r2, #1
 8013778:	4296      	cmp	r6, r2
 801377a:	54a1      	strb	r1, [r4, r2]
 801377c:	dcfb      	bgt.n	8013776 <__sccl+0x56>
 801377e:	1af2      	subs	r2, r6, r3
 8013780:	3a01      	subs	r2, #1
 8013782:	1c5d      	adds	r5, r3, #1
 8013784:	42b3      	cmp	r3, r6
 8013786:	bfa8      	it	ge
 8013788:	2200      	movge	r2, #0
 801378a:	18ab      	adds	r3, r5, r2
 801378c:	e7e1      	b.n	8013752 <__sccl+0x32>
 801378e:	4610      	mov	r0, r2
 8013790:	e7da      	b.n	8013748 <__sccl+0x28>

08013792 <__submore>:
 8013792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013796:	460c      	mov	r4, r1
 8013798:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801379a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801379e:	4299      	cmp	r1, r3
 80137a0:	d11d      	bne.n	80137de <__submore+0x4c>
 80137a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80137a6:	f7fd fec5 	bl	8011534 <_malloc_r>
 80137aa:	b918      	cbnz	r0, 80137b4 <__submore+0x22>
 80137ac:	f04f 30ff 	mov.w	r0, #4294967295
 80137b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80137ba:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80137be:	6360      	str	r0, [r4, #52]	; 0x34
 80137c0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80137c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80137c8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80137cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80137d0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80137d4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80137d8:	6020      	str	r0, [r4, #0]
 80137da:	2000      	movs	r0, #0
 80137dc:	e7e8      	b.n	80137b0 <__submore+0x1e>
 80137de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80137e0:	0077      	lsls	r7, r6, #1
 80137e2:	463a      	mov	r2, r7
 80137e4:	f000 fbe1 	bl	8013faa <_realloc_r>
 80137e8:	4605      	mov	r5, r0
 80137ea:	2800      	cmp	r0, #0
 80137ec:	d0de      	beq.n	80137ac <__submore+0x1a>
 80137ee:	eb00 0806 	add.w	r8, r0, r6
 80137f2:	4601      	mov	r1, r0
 80137f4:	4632      	mov	r2, r6
 80137f6:	4640      	mov	r0, r8
 80137f8:	f7fc ff99 	bl	801072e <memcpy>
 80137fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013800:	f8c4 8000 	str.w	r8, [r4]
 8013804:	e7e9      	b.n	80137da <__submore+0x48>

08013806 <memmove>:
 8013806:	4288      	cmp	r0, r1
 8013808:	b510      	push	{r4, lr}
 801380a:	eb01 0402 	add.w	r4, r1, r2
 801380e:	d902      	bls.n	8013816 <memmove+0x10>
 8013810:	4284      	cmp	r4, r0
 8013812:	4623      	mov	r3, r4
 8013814:	d807      	bhi.n	8013826 <memmove+0x20>
 8013816:	1e43      	subs	r3, r0, #1
 8013818:	42a1      	cmp	r1, r4
 801381a:	d008      	beq.n	801382e <memmove+0x28>
 801381c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013820:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013824:	e7f8      	b.n	8013818 <memmove+0x12>
 8013826:	4402      	add	r2, r0
 8013828:	4601      	mov	r1, r0
 801382a:	428a      	cmp	r2, r1
 801382c:	d100      	bne.n	8013830 <memmove+0x2a>
 801382e:	bd10      	pop	{r4, pc}
 8013830:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013834:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013838:	e7f7      	b.n	801382a <memmove+0x24>
	...

0801383c <_sbrk_r>:
 801383c:	b538      	push	{r3, r4, r5, lr}
 801383e:	4d06      	ldr	r5, [pc, #24]	; (8013858 <_sbrk_r+0x1c>)
 8013840:	2300      	movs	r3, #0
 8013842:	4604      	mov	r4, r0
 8013844:	4608      	mov	r0, r1
 8013846:	602b      	str	r3, [r5, #0]
 8013848:	f7f0 f96e 	bl	8003b28 <_sbrk>
 801384c:	1c43      	adds	r3, r0, #1
 801384e:	d102      	bne.n	8013856 <_sbrk_r+0x1a>
 8013850:	682b      	ldr	r3, [r5, #0]
 8013852:	b103      	cbz	r3, 8013856 <_sbrk_r+0x1a>
 8013854:	6023      	str	r3, [r4, #0]
 8013856:	bd38      	pop	{r3, r4, r5, pc}
 8013858:	20004b58 	.word	0x20004b58
 801385c:	00000000 	.word	0x00000000

08013860 <nan>:
 8013860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013868 <nan+0x8>
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	00000000 	.word	0x00000000
 801386c:	7ff80000 	.word	0x7ff80000

08013870 <__assert_func>:
 8013870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013872:	4614      	mov	r4, r2
 8013874:	461a      	mov	r2, r3
 8013876:	4b09      	ldr	r3, [pc, #36]	; (801389c <__assert_func+0x2c>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	4605      	mov	r5, r0
 801387c:	68d8      	ldr	r0, [r3, #12]
 801387e:	b14c      	cbz	r4, 8013894 <__assert_func+0x24>
 8013880:	4b07      	ldr	r3, [pc, #28]	; (80138a0 <__assert_func+0x30>)
 8013882:	9100      	str	r1, [sp, #0]
 8013884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013888:	4906      	ldr	r1, [pc, #24]	; (80138a4 <__assert_func+0x34>)
 801388a:	462b      	mov	r3, r5
 801388c:	f000 fc3e 	bl	801410c <fiprintf>
 8013890:	f000 fc4e 	bl	8014130 <abort>
 8013894:	4b04      	ldr	r3, [pc, #16]	; (80138a8 <__assert_func+0x38>)
 8013896:	461c      	mov	r4, r3
 8013898:	e7f3      	b.n	8013882 <__assert_func+0x12>
 801389a:	bf00      	nop
 801389c:	20000070 	.word	0x20000070
 80138a0:	080160bd 	.word	0x080160bd
 80138a4:	080160ca 	.word	0x080160ca
 80138a8:	080160f8 	.word	0x080160f8

080138ac <_calloc_r>:
 80138ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138ae:	fba1 2402 	umull	r2, r4, r1, r2
 80138b2:	b94c      	cbnz	r4, 80138c8 <_calloc_r+0x1c>
 80138b4:	4611      	mov	r1, r2
 80138b6:	9201      	str	r2, [sp, #4]
 80138b8:	f7fd fe3c 	bl	8011534 <_malloc_r>
 80138bc:	9a01      	ldr	r2, [sp, #4]
 80138be:	4605      	mov	r5, r0
 80138c0:	b930      	cbnz	r0, 80138d0 <_calloc_r+0x24>
 80138c2:	4628      	mov	r0, r5
 80138c4:	b003      	add	sp, #12
 80138c6:	bd30      	pop	{r4, r5, pc}
 80138c8:	220c      	movs	r2, #12
 80138ca:	6002      	str	r2, [r0, #0]
 80138cc:	2500      	movs	r5, #0
 80138ce:	e7f8      	b.n	80138c2 <_calloc_r+0x16>
 80138d0:	4621      	mov	r1, r4
 80138d2:	f7fc fe44 	bl	801055e <memset>
 80138d6:	e7f4      	b.n	80138c2 <_calloc_r+0x16>

080138d8 <rshift>:
 80138d8:	6903      	ldr	r3, [r0, #16]
 80138da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80138de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80138e6:	f100 0414 	add.w	r4, r0, #20
 80138ea:	dd45      	ble.n	8013978 <rshift+0xa0>
 80138ec:	f011 011f 	ands.w	r1, r1, #31
 80138f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80138f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80138f8:	d10c      	bne.n	8013914 <rshift+0x3c>
 80138fa:	f100 0710 	add.w	r7, r0, #16
 80138fe:	4629      	mov	r1, r5
 8013900:	42b1      	cmp	r1, r6
 8013902:	d334      	bcc.n	801396e <rshift+0x96>
 8013904:	1a9b      	subs	r3, r3, r2
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	1eea      	subs	r2, r5, #3
 801390a:	4296      	cmp	r6, r2
 801390c:	bf38      	it	cc
 801390e:	2300      	movcc	r3, #0
 8013910:	4423      	add	r3, r4
 8013912:	e015      	b.n	8013940 <rshift+0x68>
 8013914:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013918:	f1c1 0820 	rsb	r8, r1, #32
 801391c:	40cf      	lsrs	r7, r1
 801391e:	f105 0e04 	add.w	lr, r5, #4
 8013922:	46a1      	mov	r9, r4
 8013924:	4576      	cmp	r6, lr
 8013926:	46f4      	mov	ip, lr
 8013928:	d815      	bhi.n	8013956 <rshift+0x7e>
 801392a:	1a9a      	subs	r2, r3, r2
 801392c:	0092      	lsls	r2, r2, #2
 801392e:	3a04      	subs	r2, #4
 8013930:	3501      	adds	r5, #1
 8013932:	42ae      	cmp	r6, r5
 8013934:	bf38      	it	cc
 8013936:	2200      	movcc	r2, #0
 8013938:	18a3      	adds	r3, r4, r2
 801393a:	50a7      	str	r7, [r4, r2]
 801393c:	b107      	cbz	r7, 8013940 <rshift+0x68>
 801393e:	3304      	adds	r3, #4
 8013940:	1b1a      	subs	r2, r3, r4
 8013942:	42a3      	cmp	r3, r4
 8013944:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013948:	bf08      	it	eq
 801394a:	2300      	moveq	r3, #0
 801394c:	6102      	str	r2, [r0, #16]
 801394e:	bf08      	it	eq
 8013950:	6143      	streq	r3, [r0, #20]
 8013952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013956:	f8dc c000 	ldr.w	ip, [ip]
 801395a:	fa0c fc08 	lsl.w	ip, ip, r8
 801395e:	ea4c 0707 	orr.w	r7, ip, r7
 8013962:	f849 7b04 	str.w	r7, [r9], #4
 8013966:	f85e 7b04 	ldr.w	r7, [lr], #4
 801396a:	40cf      	lsrs	r7, r1
 801396c:	e7da      	b.n	8013924 <rshift+0x4c>
 801396e:	f851 cb04 	ldr.w	ip, [r1], #4
 8013972:	f847 cf04 	str.w	ip, [r7, #4]!
 8013976:	e7c3      	b.n	8013900 <rshift+0x28>
 8013978:	4623      	mov	r3, r4
 801397a:	e7e1      	b.n	8013940 <rshift+0x68>

0801397c <__hexdig_fun>:
 801397c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013980:	2b09      	cmp	r3, #9
 8013982:	d802      	bhi.n	801398a <__hexdig_fun+0xe>
 8013984:	3820      	subs	r0, #32
 8013986:	b2c0      	uxtb	r0, r0
 8013988:	4770      	bx	lr
 801398a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801398e:	2b05      	cmp	r3, #5
 8013990:	d801      	bhi.n	8013996 <__hexdig_fun+0x1a>
 8013992:	3847      	subs	r0, #71	; 0x47
 8013994:	e7f7      	b.n	8013986 <__hexdig_fun+0xa>
 8013996:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801399a:	2b05      	cmp	r3, #5
 801399c:	d801      	bhi.n	80139a2 <__hexdig_fun+0x26>
 801399e:	3827      	subs	r0, #39	; 0x27
 80139a0:	e7f1      	b.n	8013986 <__hexdig_fun+0xa>
 80139a2:	2000      	movs	r0, #0
 80139a4:	4770      	bx	lr
	...

080139a8 <__gethex>:
 80139a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ac:	4617      	mov	r7, r2
 80139ae:	680a      	ldr	r2, [r1, #0]
 80139b0:	b085      	sub	sp, #20
 80139b2:	f102 0b02 	add.w	fp, r2, #2
 80139b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80139ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80139be:	4681      	mov	r9, r0
 80139c0:	468a      	mov	sl, r1
 80139c2:	9302      	str	r3, [sp, #8]
 80139c4:	32fe      	adds	r2, #254	; 0xfe
 80139c6:	eb02 030b 	add.w	r3, r2, fp
 80139ca:	46d8      	mov	r8, fp
 80139cc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80139d0:	9301      	str	r3, [sp, #4]
 80139d2:	2830      	cmp	r0, #48	; 0x30
 80139d4:	d0f7      	beq.n	80139c6 <__gethex+0x1e>
 80139d6:	f7ff ffd1 	bl	801397c <__hexdig_fun>
 80139da:	4604      	mov	r4, r0
 80139dc:	2800      	cmp	r0, #0
 80139de:	d138      	bne.n	8013a52 <__gethex+0xaa>
 80139e0:	49a7      	ldr	r1, [pc, #668]	; (8013c80 <__gethex+0x2d8>)
 80139e2:	2201      	movs	r2, #1
 80139e4:	4640      	mov	r0, r8
 80139e6:	f7fc fdc2 	bl	801056e <strncmp>
 80139ea:	4606      	mov	r6, r0
 80139ec:	2800      	cmp	r0, #0
 80139ee:	d169      	bne.n	8013ac4 <__gethex+0x11c>
 80139f0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80139f4:	465d      	mov	r5, fp
 80139f6:	f7ff ffc1 	bl	801397c <__hexdig_fun>
 80139fa:	2800      	cmp	r0, #0
 80139fc:	d064      	beq.n	8013ac8 <__gethex+0x120>
 80139fe:	465a      	mov	r2, fp
 8013a00:	7810      	ldrb	r0, [r2, #0]
 8013a02:	2830      	cmp	r0, #48	; 0x30
 8013a04:	4690      	mov	r8, r2
 8013a06:	f102 0201 	add.w	r2, r2, #1
 8013a0a:	d0f9      	beq.n	8013a00 <__gethex+0x58>
 8013a0c:	f7ff ffb6 	bl	801397c <__hexdig_fun>
 8013a10:	2301      	movs	r3, #1
 8013a12:	fab0 f480 	clz	r4, r0
 8013a16:	0964      	lsrs	r4, r4, #5
 8013a18:	465e      	mov	r6, fp
 8013a1a:	9301      	str	r3, [sp, #4]
 8013a1c:	4642      	mov	r2, r8
 8013a1e:	4615      	mov	r5, r2
 8013a20:	3201      	adds	r2, #1
 8013a22:	7828      	ldrb	r0, [r5, #0]
 8013a24:	f7ff ffaa 	bl	801397c <__hexdig_fun>
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d1f8      	bne.n	8013a1e <__gethex+0x76>
 8013a2c:	4994      	ldr	r1, [pc, #592]	; (8013c80 <__gethex+0x2d8>)
 8013a2e:	2201      	movs	r2, #1
 8013a30:	4628      	mov	r0, r5
 8013a32:	f7fc fd9c 	bl	801056e <strncmp>
 8013a36:	b978      	cbnz	r0, 8013a58 <__gethex+0xb0>
 8013a38:	b946      	cbnz	r6, 8013a4c <__gethex+0xa4>
 8013a3a:	1c6e      	adds	r6, r5, #1
 8013a3c:	4632      	mov	r2, r6
 8013a3e:	4615      	mov	r5, r2
 8013a40:	3201      	adds	r2, #1
 8013a42:	7828      	ldrb	r0, [r5, #0]
 8013a44:	f7ff ff9a 	bl	801397c <__hexdig_fun>
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	d1f8      	bne.n	8013a3e <__gethex+0x96>
 8013a4c:	1b73      	subs	r3, r6, r5
 8013a4e:	009e      	lsls	r6, r3, #2
 8013a50:	e004      	b.n	8013a5c <__gethex+0xb4>
 8013a52:	2400      	movs	r4, #0
 8013a54:	4626      	mov	r6, r4
 8013a56:	e7e1      	b.n	8013a1c <__gethex+0x74>
 8013a58:	2e00      	cmp	r6, #0
 8013a5a:	d1f7      	bne.n	8013a4c <__gethex+0xa4>
 8013a5c:	782b      	ldrb	r3, [r5, #0]
 8013a5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013a62:	2b50      	cmp	r3, #80	; 0x50
 8013a64:	d13d      	bne.n	8013ae2 <__gethex+0x13a>
 8013a66:	786b      	ldrb	r3, [r5, #1]
 8013a68:	2b2b      	cmp	r3, #43	; 0x2b
 8013a6a:	d02f      	beq.n	8013acc <__gethex+0x124>
 8013a6c:	2b2d      	cmp	r3, #45	; 0x2d
 8013a6e:	d031      	beq.n	8013ad4 <__gethex+0x12c>
 8013a70:	1c69      	adds	r1, r5, #1
 8013a72:	f04f 0b00 	mov.w	fp, #0
 8013a76:	7808      	ldrb	r0, [r1, #0]
 8013a78:	f7ff ff80 	bl	801397c <__hexdig_fun>
 8013a7c:	1e42      	subs	r2, r0, #1
 8013a7e:	b2d2      	uxtb	r2, r2
 8013a80:	2a18      	cmp	r2, #24
 8013a82:	d82e      	bhi.n	8013ae2 <__gethex+0x13a>
 8013a84:	f1a0 0210 	sub.w	r2, r0, #16
 8013a88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013a8c:	f7ff ff76 	bl	801397c <__hexdig_fun>
 8013a90:	f100 3cff 	add.w	ip, r0, #4294967295
 8013a94:	fa5f fc8c 	uxtb.w	ip, ip
 8013a98:	f1bc 0f18 	cmp.w	ip, #24
 8013a9c:	d91d      	bls.n	8013ada <__gethex+0x132>
 8013a9e:	f1bb 0f00 	cmp.w	fp, #0
 8013aa2:	d000      	beq.n	8013aa6 <__gethex+0xfe>
 8013aa4:	4252      	negs	r2, r2
 8013aa6:	4416      	add	r6, r2
 8013aa8:	f8ca 1000 	str.w	r1, [sl]
 8013aac:	b1dc      	cbz	r4, 8013ae6 <__gethex+0x13e>
 8013aae:	9b01      	ldr	r3, [sp, #4]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	bf14      	ite	ne
 8013ab4:	f04f 0800 	movne.w	r8, #0
 8013ab8:	f04f 0806 	moveq.w	r8, #6
 8013abc:	4640      	mov	r0, r8
 8013abe:	b005      	add	sp, #20
 8013ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac4:	4645      	mov	r5, r8
 8013ac6:	4626      	mov	r6, r4
 8013ac8:	2401      	movs	r4, #1
 8013aca:	e7c7      	b.n	8013a5c <__gethex+0xb4>
 8013acc:	f04f 0b00 	mov.w	fp, #0
 8013ad0:	1ca9      	adds	r1, r5, #2
 8013ad2:	e7d0      	b.n	8013a76 <__gethex+0xce>
 8013ad4:	f04f 0b01 	mov.w	fp, #1
 8013ad8:	e7fa      	b.n	8013ad0 <__gethex+0x128>
 8013ada:	230a      	movs	r3, #10
 8013adc:	fb03 0002 	mla	r0, r3, r2, r0
 8013ae0:	e7d0      	b.n	8013a84 <__gethex+0xdc>
 8013ae2:	4629      	mov	r1, r5
 8013ae4:	e7e0      	b.n	8013aa8 <__gethex+0x100>
 8013ae6:	eba5 0308 	sub.w	r3, r5, r8
 8013aea:	3b01      	subs	r3, #1
 8013aec:	4621      	mov	r1, r4
 8013aee:	2b07      	cmp	r3, #7
 8013af0:	dc0a      	bgt.n	8013b08 <__gethex+0x160>
 8013af2:	4648      	mov	r0, r9
 8013af4:	f7fd fdaa 	bl	801164c <_Balloc>
 8013af8:	4604      	mov	r4, r0
 8013afa:	b940      	cbnz	r0, 8013b0e <__gethex+0x166>
 8013afc:	4b61      	ldr	r3, [pc, #388]	; (8013c84 <__gethex+0x2dc>)
 8013afe:	4602      	mov	r2, r0
 8013b00:	21e4      	movs	r1, #228	; 0xe4
 8013b02:	4861      	ldr	r0, [pc, #388]	; (8013c88 <__gethex+0x2e0>)
 8013b04:	f7ff feb4 	bl	8013870 <__assert_func>
 8013b08:	3101      	adds	r1, #1
 8013b0a:	105b      	asrs	r3, r3, #1
 8013b0c:	e7ef      	b.n	8013aee <__gethex+0x146>
 8013b0e:	f100 0a14 	add.w	sl, r0, #20
 8013b12:	2300      	movs	r3, #0
 8013b14:	495a      	ldr	r1, [pc, #360]	; (8013c80 <__gethex+0x2d8>)
 8013b16:	f8cd a004 	str.w	sl, [sp, #4]
 8013b1a:	469b      	mov	fp, r3
 8013b1c:	45a8      	cmp	r8, r5
 8013b1e:	d342      	bcc.n	8013ba6 <__gethex+0x1fe>
 8013b20:	9801      	ldr	r0, [sp, #4]
 8013b22:	f840 bb04 	str.w	fp, [r0], #4
 8013b26:	eba0 000a 	sub.w	r0, r0, sl
 8013b2a:	1080      	asrs	r0, r0, #2
 8013b2c:	6120      	str	r0, [r4, #16]
 8013b2e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013b32:	4658      	mov	r0, fp
 8013b34:	f7fd fe7c 	bl	8011830 <__hi0bits>
 8013b38:	683d      	ldr	r5, [r7, #0]
 8013b3a:	eba8 0000 	sub.w	r0, r8, r0
 8013b3e:	42a8      	cmp	r0, r5
 8013b40:	dd59      	ble.n	8013bf6 <__gethex+0x24e>
 8013b42:	eba0 0805 	sub.w	r8, r0, r5
 8013b46:	4641      	mov	r1, r8
 8013b48:	4620      	mov	r0, r4
 8013b4a:	f7fe fa0b 	bl	8011f64 <__any_on>
 8013b4e:	4683      	mov	fp, r0
 8013b50:	b1b8      	cbz	r0, 8013b82 <__gethex+0x1da>
 8013b52:	f108 33ff 	add.w	r3, r8, #4294967295
 8013b56:	1159      	asrs	r1, r3, #5
 8013b58:	f003 021f 	and.w	r2, r3, #31
 8013b5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013b60:	f04f 0b01 	mov.w	fp, #1
 8013b64:	fa0b f202 	lsl.w	r2, fp, r2
 8013b68:	420a      	tst	r2, r1
 8013b6a:	d00a      	beq.n	8013b82 <__gethex+0x1da>
 8013b6c:	455b      	cmp	r3, fp
 8013b6e:	dd06      	ble.n	8013b7e <__gethex+0x1d6>
 8013b70:	f1a8 0102 	sub.w	r1, r8, #2
 8013b74:	4620      	mov	r0, r4
 8013b76:	f7fe f9f5 	bl	8011f64 <__any_on>
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	d138      	bne.n	8013bf0 <__gethex+0x248>
 8013b7e:	f04f 0b02 	mov.w	fp, #2
 8013b82:	4641      	mov	r1, r8
 8013b84:	4620      	mov	r0, r4
 8013b86:	f7ff fea7 	bl	80138d8 <rshift>
 8013b8a:	4446      	add	r6, r8
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	42b3      	cmp	r3, r6
 8013b90:	da41      	bge.n	8013c16 <__gethex+0x26e>
 8013b92:	4621      	mov	r1, r4
 8013b94:	4648      	mov	r0, r9
 8013b96:	f7fd fd99 	bl	80116cc <_Bfree>
 8013b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	6013      	str	r3, [r2, #0]
 8013ba0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013ba4:	e78a      	b.n	8013abc <__gethex+0x114>
 8013ba6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8013baa:	2a2e      	cmp	r2, #46	; 0x2e
 8013bac:	d014      	beq.n	8013bd8 <__gethex+0x230>
 8013bae:	2b20      	cmp	r3, #32
 8013bb0:	d106      	bne.n	8013bc0 <__gethex+0x218>
 8013bb2:	9b01      	ldr	r3, [sp, #4]
 8013bb4:	f843 bb04 	str.w	fp, [r3], #4
 8013bb8:	f04f 0b00 	mov.w	fp, #0
 8013bbc:	9301      	str	r3, [sp, #4]
 8013bbe:	465b      	mov	r3, fp
 8013bc0:	7828      	ldrb	r0, [r5, #0]
 8013bc2:	9303      	str	r3, [sp, #12]
 8013bc4:	f7ff feda 	bl	801397c <__hexdig_fun>
 8013bc8:	9b03      	ldr	r3, [sp, #12]
 8013bca:	f000 000f 	and.w	r0, r0, #15
 8013bce:	4098      	lsls	r0, r3
 8013bd0:	ea4b 0b00 	orr.w	fp, fp, r0
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	e7a1      	b.n	8013b1c <__gethex+0x174>
 8013bd8:	45a8      	cmp	r8, r5
 8013bda:	d8e8      	bhi.n	8013bae <__gethex+0x206>
 8013bdc:	2201      	movs	r2, #1
 8013bde:	4628      	mov	r0, r5
 8013be0:	9303      	str	r3, [sp, #12]
 8013be2:	f7fc fcc4 	bl	801056e <strncmp>
 8013be6:	4926      	ldr	r1, [pc, #152]	; (8013c80 <__gethex+0x2d8>)
 8013be8:	9b03      	ldr	r3, [sp, #12]
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d1df      	bne.n	8013bae <__gethex+0x206>
 8013bee:	e795      	b.n	8013b1c <__gethex+0x174>
 8013bf0:	f04f 0b03 	mov.w	fp, #3
 8013bf4:	e7c5      	b.n	8013b82 <__gethex+0x1da>
 8013bf6:	da0b      	bge.n	8013c10 <__gethex+0x268>
 8013bf8:	eba5 0800 	sub.w	r8, r5, r0
 8013bfc:	4621      	mov	r1, r4
 8013bfe:	4642      	mov	r2, r8
 8013c00:	4648      	mov	r0, r9
 8013c02:	f7fd ff7d 	bl	8011b00 <__lshift>
 8013c06:	eba6 0608 	sub.w	r6, r6, r8
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	f100 0a14 	add.w	sl, r0, #20
 8013c10:	f04f 0b00 	mov.w	fp, #0
 8013c14:	e7ba      	b.n	8013b8c <__gethex+0x1e4>
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	42b3      	cmp	r3, r6
 8013c1a:	dd73      	ble.n	8013d04 <__gethex+0x35c>
 8013c1c:	1b9e      	subs	r6, r3, r6
 8013c1e:	42b5      	cmp	r5, r6
 8013c20:	dc34      	bgt.n	8013c8c <__gethex+0x2e4>
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2b02      	cmp	r3, #2
 8013c26:	d023      	beq.n	8013c70 <__gethex+0x2c8>
 8013c28:	2b03      	cmp	r3, #3
 8013c2a:	d025      	beq.n	8013c78 <__gethex+0x2d0>
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d115      	bne.n	8013c5c <__gethex+0x2b4>
 8013c30:	42b5      	cmp	r5, r6
 8013c32:	d113      	bne.n	8013c5c <__gethex+0x2b4>
 8013c34:	2d01      	cmp	r5, #1
 8013c36:	d10b      	bne.n	8013c50 <__gethex+0x2a8>
 8013c38:	9a02      	ldr	r2, [sp, #8]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6013      	str	r3, [r2, #0]
 8013c3e:	2301      	movs	r3, #1
 8013c40:	6123      	str	r3, [r4, #16]
 8013c42:	f8ca 3000 	str.w	r3, [sl]
 8013c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c48:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013c4c:	601c      	str	r4, [r3, #0]
 8013c4e:	e735      	b.n	8013abc <__gethex+0x114>
 8013c50:	1e69      	subs	r1, r5, #1
 8013c52:	4620      	mov	r0, r4
 8013c54:	f7fe f986 	bl	8011f64 <__any_on>
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	d1ed      	bne.n	8013c38 <__gethex+0x290>
 8013c5c:	4621      	mov	r1, r4
 8013c5e:	4648      	mov	r0, r9
 8013c60:	f7fd fd34 	bl	80116cc <_Bfree>
 8013c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c66:	2300      	movs	r3, #0
 8013c68:	6013      	str	r3, [r2, #0]
 8013c6a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8013c6e:	e725      	b.n	8013abc <__gethex+0x114>
 8013c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d1f2      	bne.n	8013c5c <__gethex+0x2b4>
 8013c76:	e7df      	b.n	8013c38 <__gethex+0x290>
 8013c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d1dc      	bne.n	8013c38 <__gethex+0x290>
 8013c7e:	e7ed      	b.n	8013c5c <__gethex+0x2b4>
 8013c80:	08015f34 	.word	0x08015f34
 8013c84:	08015dc7 	.word	0x08015dc7
 8013c88:	080160f9 	.word	0x080160f9
 8013c8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8013c90:	f1bb 0f00 	cmp.w	fp, #0
 8013c94:	d133      	bne.n	8013cfe <__gethex+0x356>
 8013c96:	f1b8 0f00 	cmp.w	r8, #0
 8013c9a:	d004      	beq.n	8013ca6 <__gethex+0x2fe>
 8013c9c:	4641      	mov	r1, r8
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	f7fe f960 	bl	8011f64 <__any_on>
 8013ca4:	4683      	mov	fp, r0
 8013ca6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8013caa:	2301      	movs	r3, #1
 8013cac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013cb0:	f008 081f 	and.w	r8, r8, #31
 8013cb4:	fa03 f308 	lsl.w	r3, r3, r8
 8013cb8:	4213      	tst	r3, r2
 8013cba:	4631      	mov	r1, r6
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	bf18      	it	ne
 8013cc0:	f04b 0b02 	orrne.w	fp, fp, #2
 8013cc4:	1bad      	subs	r5, r5, r6
 8013cc6:	f7ff fe07 	bl	80138d8 <rshift>
 8013cca:	687e      	ldr	r6, [r7, #4]
 8013ccc:	f04f 0802 	mov.w	r8, #2
 8013cd0:	f1bb 0f00 	cmp.w	fp, #0
 8013cd4:	d04a      	beq.n	8013d6c <__gethex+0x3c4>
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2b02      	cmp	r3, #2
 8013cda:	d016      	beq.n	8013d0a <__gethex+0x362>
 8013cdc:	2b03      	cmp	r3, #3
 8013cde:	d018      	beq.n	8013d12 <__gethex+0x36a>
 8013ce0:	2b01      	cmp	r3, #1
 8013ce2:	d109      	bne.n	8013cf8 <__gethex+0x350>
 8013ce4:	f01b 0f02 	tst.w	fp, #2
 8013ce8:	d006      	beq.n	8013cf8 <__gethex+0x350>
 8013cea:	f8da 3000 	ldr.w	r3, [sl]
 8013cee:	ea4b 0b03 	orr.w	fp, fp, r3
 8013cf2:	f01b 0f01 	tst.w	fp, #1
 8013cf6:	d10f      	bne.n	8013d18 <__gethex+0x370>
 8013cf8:	f048 0810 	orr.w	r8, r8, #16
 8013cfc:	e036      	b.n	8013d6c <__gethex+0x3c4>
 8013cfe:	f04f 0b01 	mov.w	fp, #1
 8013d02:	e7d0      	b.n	8013ca6 <__gethex+0x2fe>
 8013d04:	f04f 0801 	mov.w	r8, #1
 8013d08:	e7e2      	b.n	8013cd0 <__gethex+0x328>
 8013d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d0c:	f1c3 0301 	rsb	r3, r3, #1
 8013d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d0ef      	beq.n	8013cf8 <__gethex+0x350>
 8013d18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013d1c:	f104 0214 	add.w	r2, r4, #20
 8013d20:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013d24:	9301      	str	r3, [sp, #4]
 8013d26:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	4694      	mov	ip, r2
 8013d2e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013d32:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013d36:	d01e      	beq.n	8013d76 <__gethex+0x3ce>
 8013d38:	3101      	adds	r1, #1
 8013d3a:	f8cc 1000 	str.w	r1, [ip]
 8013d3e:	f1b8 0f02 	cmp.w	r8, #2
 8013d42:	f104 0214 	add.w	r2, r4, #20
 8013d46:	d13d      	bne.n	8013dc4 <__gethex+0x41c>
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	3b01      	subs	r3, #1
 8013d4c:	42ab      	cmp	r3, r5
 8013d4e:	d10b      	bne.n	8013d68 <__gethex+0x3c0>
 8013d50:	1169      	asrs	r1, r5, #5
 8013d52:	2301      	movs	r3, #1
 8013d54:	f005 051f 	and.w	r5, r5, #31
 8013d58:	fa03 f505 	lsl.w	r5, r3, r5
 8013d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d60:	421d      	tst	r5, r3
 8013d62:	bf18      	it	ne
 8013d64:	f04f 0801 	movne.w	r8, #1
 8013d68:	f048 0820 	orr.w	r8, r8, #32
 8013d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d6e:	601c      	str	r4, [r3, #0]
 8013d70:	9b02      	ldr	r3, [sp, #8]
 8013d72:	601e      	str	r6, [r3, #0]
 8013d74:	e6a2      	b.n	8013abc <__gethex+0x114>
 8013d76:	4290      	cmp	r0, r2
 8013d78:	f842 3c04 	str.w	r3, [r2, #-4]
 8013d7c:	d8d6      	bhi.n	8013d2c <__gethex+0x384>
 8013d7e:	68a2      	ldr	r2, [r4, #8]
 8013d80:	4593      	cmp	fp, r2
 8013d82:	db17      	blt.n	8013db4 <__gethex+0x40c>
 8013d84:	6861      	ldr	r1, [r4, #4]
 8013d86:	4648      	mov	r0, r9
 8013d88:	3101      	adds	r1, #1
 8013d8a:	f7fd fc5f 	bl	801164c <_Balloc>
 8013d8e:	4682      	mov	sl, r0
 8013d90:	b918      	cbnz	r0, 8013d9a <__gethex+0x3f2>
 8013d92:	4b1b      	ldr	r3, [pc, #108]	; (8013e00 <__gethex+0x458>)
 8013d94:	4602      	mov	r2, r0
 8013d96:	2184      	movs	r1, #132	; 0x84
 8013d98:	e6b3      	b.n	8013b02 <__gethex+0x15a>
 8013d9a:	6922      	ldr	r2, [r4, #16]
 8013d9c:	3202      	adds	r2, #2
 8013d9e:	f104 010c 	add.w	r1, r4, #12
 8013da2:	0092      	lsls	r2, r2, #2
 8013da4:	300c      	adds	r0, #12
 8013da6:	f7fc fcc2 	bl	801072e <memcpy>
 8013daa:	4621      	mov	r1, r4
 8013dac:	4648      	mov	r0, r9
 8013dae:	f7fd fc8d 	bl	80116cc <_Bfree>
 8013db2:	4654      	mov	r4, sl
 8013db4:	6922      	ldr	r2, [r4, #16]
 8013db6:	1c51      	adds	r1, r2, #1
 8013db8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013dbc:	6121      	str	r1, [r4, #16]
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	6151      	str	r1, [r2, #20]
 8013dc2:	e7bc      	b.n	8013d3e <__gethex+0x396>
 8013dc4:	6921      	ldr	r1, [r4, #16]
 8013dc6:	4559      	cmp	r1, fp
 8013dc8:	dd0b      	ble.n	8013de2 <__gethex+0x43a>
 8013dca:	2101      	movs	r1, #1
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f7ff fd83 	bl	80138d8 <rshift>
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	3601      	adds	r6, #1
 8013dd6:	42b3      	cmp	r3, r6
 8013dd8:	f6ff aedb 	blt.w	8013b92 <__gethex+0x1ea>
 8013ddc:	f04f 0801 	mov.w	r8, #1
 8013de0:	e7c2      	b.n	8013d68 <__gethex+0x3c0>
 8013de2:	f015 051f 	ands.w	r5, r5, #31
 8013de6:	d0f9      	beq.n	8013ddc <__gethex+0x434>
 8013de8:	9b01      	ldr	r3, [sp, #4]
 8013dea:	441a      	add	r2, r3
 8013dec:	f1c5 0520 	rsb	r5, r5, #32
 8013df0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013df4:	f7fd fd1c 	bl	8011830 <__hi0bits>
 8013df8:	42a8      	cmp	r0, r5
 8013dfa:	dbe6      	blt.n	8013dca <__gethex+0x422>
 8013dfc:	e7ee      	b.n	8013ddc <__gethex+0x434>
 8013dfe:	bf00      	nop
 8013e00:	08015dc7 	.word	0x08015dc7

08013e04 <L_shift>:
 8013e04:	f1c2 0208 	rsb	r2, r2, #8
 8013e08:	0092      	lsls	r2, r2, #2
 8013e0a:	b570      	push	{r4, r5, r6, lr}
 8013e0c:	f1c2 0620 	rsb	r6, r2, #32
 8013e10:	6843      	ldr	r3, [r0, #4]
 8013e12:	6804      	ldr	r4, [r0, #0]
 8013e14:	fa03 f506 	lsl.w	r5, r3, r6
 8013e18:	432c      	orrs	r4, r5
 8013e1a:	40d3      	lsrs	r3, r2
 8013e1c:	6004      	str	r4, [r0, #0]
 8013e1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013e22:	4288      	cmp	r0, r1
 8013e24:	d3f4      	bcc.n	8013e10 <L_shift+0xc>
 8013e26:	bd70      	pop	{r4, r5, r6, pc}

08013e28 <__match>:
 8013e28:	b530      	push	{r4, r5, lr}
 8013e2a:	6803      	ldr	r3, [r0, #0]
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e32:	b914      	cbnz	r4, 8013e3a <__match+0x12>
 8013e34:	6003      	str	r3, [r0, #0]
 8013e36:	2001      	movs	r0, #1
 8013e38:	bd30      	pop	{r4, r5, pc}
 8013e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013e42:	2d19      	cmp	r5, #25
 8013e44:	bf98      	it	ls
 8013e46:	3220      	addls	r2, #32
 8013e48:	42a2      	cmp	r2, r4
 8013e4a:	d0f0      	beq.n	8013e2e <__match+0x6>
 8013e4c:	2000      	movs	r0, #0
 8013e4e:	e7f3      	b.n	8013e38 <__match+0x10>

08013e50 <__hexnan>:
 8013e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e54:	680b      	ldr	r3, [r1, #0]
 8013e56:	6801      	ldr	r1, [r0, #0]
 8013e58:	115e      	asrs	r6, r3, #5
 8013e5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013e5e:	f013 031f 	ands.w	r3, r3, #31
 8013e62:	b087      	sub	sp, #28
 8013e64:	bf18      	it	ne
 8013e66:	3604      	addne	r6, #4
 8013e68:	2500      	movs	r5, #0
 8013e6a:	1f37      	subs	r7, r6, #4
 8013e6c:	4682      	mov	sl, r0
 8013e6e:	4690      	mov	r8, r2
 8013e70:	9301      	str	r3, [sp, #4]
 8013e72:	f846 5c04 	str.w	r5, [r6, #-4]
 8013e76:	46b9      	mov	r9, r7
 8013e78:	463c      	mov	r4, r7
 8013e7a:	9502      	str	r5, [sp, #8]
 8013e7c:	46ab      	mov	fp, r5
 8013e7e:	784a      	ldrb	r2, [r1, #1]
 8013e80:	1c4b      	adds	r3, r1, #1
 8013e82:	9303      	str	r3, [sp, #12]
 8013e84:	b342      	cbz	r2, 8013ed8 <__hexnan+0x88>
 8013e86:	4610      	mov	r0, r2
 8013e88:	9105      	str	r1, [sp, #20]
 8013e8a:	9204      	str	r2, [sp, #16]
 8013e8c:	f7ff fd76 	bl	801397c <__hexdig_fun>
 8013e90:	2800      	cmp	r0, #0
 8013e92:	d14f      	bne.n	8013f34 <__hexnan+0xe4>
 8013e94:	9a04      	ldr	r2, [sp, #16]
 8013e96:	9905      	ldr	r1, [sp, #20]
 8013e98:	2a20      	cmp	r2, #32
 8013e9a:	d818      	bhi.n	8013ece <__hexnan+0x7e>
 8013e9c:	9b02      	ldr	r3, [sp, #8]
 8013e9e:	459b      	cmp	fp, r3
 8013ea0:	dd13      	ble.n	8013eca <__hexnan+0x7a>
 8013ea2:	454c      	cmp	r4, r9
 8013ea4:	d206      	bcs.n	8013eb4 <__hexnan+0x64>
 8013ea6:	2d07      	cmp	r5, #7
 8013ea8:	dc04      	bgt.n	8013eb4 <__hexnan+0x64>
 8013eaa:	462a      	mov	r2, r5
 8013eac:	4649      	mov	r1, r9
 8013eae:	4620      	mov	r0, r4
 8013eb0:	f7ff ffa8 	bl	8013e04 <L_shift>
 8013eb4:	4544      	cmp	r4, r8
 8013eb6:	d950      	bls.n	8013f5a <__hexnan+0x10a>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	f1a4 0904 	sub.w	r9, r4, #4
 8013ebe:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ec2:	f8cd b008 	str.w	fp, [sp, #8]
 8013ec6:	464c      	mov	r4, r9
 8013ec8:	461d      	mov	r5, r3
 8013eca:	9903      	ldr	r1, [sp, #12]
 8013ecc:	e7d7      	b.n	8013e7e <__hexnan+0x2e>
 8013ece:	2a29      	cmp	r2, #41	; 0x29
 8013ed0:	d155      	bne.n	8013f7e <__hexnan+0x12e>
 8013ed2:	3102      	adds	r1, #2
 8013ed4:	f8ca 1000 	str.w	r1, [sl]
 8013ed8:	f1bb 0f00 	cmp.w	fp, #0
 8013edc:	d04f      	beq.n	8013f7e <__hexnan+0x12e>
 8013ede:	454c      	cmp	r4, r9
 8013ee0:	d206      	bcs.n	8013ef0 <__hexnan+0xa0>
 8013ee2:	2d07      	cmp	r5, #7
 8013ee4:	dc04      	bgt.n	8013ef0 <__hexnan+0xa0>
 8013ee6:	462a      	mov	r2, r5
 8013ee8:	4649      	mov	r1, r9
 8013eea:	4620      	mov	r0, r4
 8013eec:	f7ff ff8a 	bl	8013e04 <L_shift>
 8013ef0:	4544      	cmp	r4, r8
 8013ef2:	d934      	bls.n	8013f5e <__hexnan+0x10e>
 8013ef4:	f1a8 0204 	sub.w	r2, r8, #4
 8013ef8:	4623      	mov	r3, r4
 8013efa:	f853 1b04 	ldr.w	r1, [r3], #4
 8013efe:	f842 1f04 	str.w	r1, [r2, #4]!
 8013f02:	429f      	cmp	r7, r3
 8013f04:	d2f9      	bcs.n	8013efa <__hexnan+0xaa>
 8013f06:	1b3b      	subs	r3, r7, r4
 8013f08:	f023 0303 	bic.w	r3, r3, #3
 8013f0c:	3304      	adds	r3, #4
 8013f0e:	3e03      	subs	r6, #3
 8013f10:	3401      	adds	r4, #1
 8013f12:	42a6      	cmp	r6, r4
 8013f14:	bf38      	it	cc
 8013f16:	2304      	movcc	r3, #4
 8013f18:	4443      	add	r3, r8
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	f843 2b04 	str.w	r2, [r3], #4
 8013f20:	429f      	cmp	r7, r3
 8013f22:	d2fb      	bcs.n	8013f1c <__hexnan+0xcc>
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	b91b      	cbnz	r3, 8013f30 <__hexnan+0xe0>
 8013f28:	4547      	cmp	r7, r8
 8013f2a:	d126      	bne.n	8013f7a <__hexnan+0x12a>
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	603b      	str	r3, [r7, #0]
 8013f30:	2005      	movs	r0, #5
 8013f32:	e025      	b.n	8013f80 <__hexnan+0x130>
 8013f34:	3501      	adds	r5, #1
 8013f36:	2d08      	cmp	r5, #8
 8013f38:	f10b 0b01 	add.w	fp, fp, #1
 8013f3c:	dd06      	ble.n	8013f4c <__hexnan+0xfc>
 8013f3e:	4544      	cmp	r4, r8
 8013f40:	d9c3      	bls.n	8013eca <__hexnan+0x7a>
 8013f42:	2300      	movs	r3, #0
 8013f44:	f844 3c04 	str.w	r3, [r4, #-4]
 8013f48:	2501      	movs	r5, #1
 8013f4a:	3c04      	subs	r4, #4
 8013f4c:	6822      	ldr	r2, [r4, #0]
 8013f4e:	f000 000f 	and.w	r0, r0, #15
 8013f52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013f56:	6020      	str	r0, [r4, #0]
 8013f58:	e7b7      	b.n	8013eca <__hexnan+0x7a>
 8013f5a:	2508      	movs	r5, #8
 8013f5c:	e7b5      	b.n	8013eca <__hexnan+0x7a>
 8013f5e:	9b01      	ldr	r3, [sp, #4]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d0df      	beq.n	8013f24 <__hexnan+0xd4>
 8013f64:	f1c3 0320 	rsb	r3, r3, #32
 8013f68:	f04f 32ff 	mov.w	r2, #4294967295
 8013f6c:	40da      	lsrs	r2, r3
 8013f6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013f72:	4013      	ands	r3, r2
 8013f74:	f846 3c04 	str.w	r3, [r6, #-4]
 8013f78:	e7d4      	b.n	8013f24 <__hexnan+0xd4>
 8013f7a:	3f04      	subs	r7, #4
 8013f7c:	e7d2      	b.n	8013f24 <__hexnan+0xd4>
 8013f7e:	2004      	movs	r0, #4
 8013f80:	b007      	add	sp, #28
 8013f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f86 <__ascii_mbtowc>:
 8013f86:	b082      	sub	sp, #8
 8013f88:	b901      	cbnz	r1, 8013f8c <__ascii_mbtowc+0x6>
 8013f8a:	a901      	add	r1, sp, #4
 8013f8c:	b142      	cbz	r2, 8013fa0 <__ascii_mbtowc+0x1a>
 8013f8e:	b14b      	cbz	r3, 8013fa4 <__ascii_mbtowc+0x1e>
 8013f90:	7813      	ldrb	r3, [r2, #0]
 8013f92:	600b      	str	r3, [r1, #0]
 8013f94:	7812      	ldrb	r2, [r2, #0]
 8013f96:	1e10      	subs	r0, r2, #0
 8013f98:	bf18      	it	ne
 8013f9a:	2001      	movne	r0, #1
 8013f9c:	b002      	add	sp, #8
 8013f9e:	4770      	bx	lr
 8013fa0:	4610      	mov	r0, r2
 8013fa2:	e7fb      	b.n	8013f9c <__ascii_mbtowc+0x16>
 8013fa4:	f06f 0001 	mvn.w	r0, #1
 8013fa8:	e7f8      	b.n	8013f9c <__ascii_mbtowc+0x16>

08013faa <_realloc_r>:
 8013faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fae:	4680      	mov	r8, r0
 8013fb0:	4614      	mov	r4, r2
 8013fb2:	460e      	mov	r6, r1
 8013fb4:	b921      	cbnz	r1, 8013fc0 <_realloc_r+0x16>
 8013fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fba:	4611      	mov	r1, r2
 8013fbc:	f7fd baba 	b.w	8011534 <_malloc_r>
 8013fc0:	b92a      	cbnz	r2, 8013fce <_realloc_r+0x24>
 8013fc2:	f7fd fa43 	bl	801144c <_free_r>
 8013fc6:	4625      	mov	r5, r4
 8013fc8:	4628      	mov	r0, r5
 8013fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fce:	f000 f8b6 	bl	801413e <_malloc_usable_size_r>
 8013fd2:	4284      	cmp	r4, r0
 8013fd4:	4607      	mov	r7, r0
 8013fd6:	d802      	bhi.n	8013fde <_realloc_r+0x34>
 8013fd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013fdc:	d812      	bhi.n	8014004 <_realloc_r+0x5a>
 8013fde:	4621      	mov	r1, r4
 8013fe0:	4640      	mov	r0, r8
 8013fe2:	f7fd faa7 	bl	8011534 <_malloc_r>
 8013fe6:	4605      	mov	r5, r0
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d0ed      	beq.n	8013fc8 <_realloc_r+0x1e>
 8013fec:	42bc      	cmp	r4, r7
 8013fee:	4622      	mov	r2, r4
 8013ff0:	4631      	mov	r1, r6
 8013ff2:	bf28      	it	cs
 8013ff4:	463a      	movcs	r2, r7
 8013ff6:	f7fc fb9a 	bl	801072e <memcpy>
 8013ffa:	4631      	mov	r1, r6
 8013ffc:	4640      	mov	r0, r8
 8013ffe:	f7fd fa25 	bl	801144c <_free_r>
 8014002:	e7e1      	b.n	8013fc8 <_realloc_r+0x1e>
 8014004:	4635      	mov	r5, r6
 8014006:	e7df      	b.n	8013fc8 <_realloc_r+0x1e>

08014008 <_strtoul_l.constprop.0>:
 8014008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801400c:	4f36      	ldr	r7, [pc, #216]	; (80140e8 <_strtoul_l.constprop.0+0xe0>)
 801400e:	4686      	mov	lr, r0
 8014010:	460d      	mov	r5, r1
 8014012:	4628      	mov	r0, r5
 8014014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014018:	5d3e      	ldrb	r6, [r7, r4]
 801401a:	f016 0608 	ands.w	r6, r6, #8
 801401e:	d1f8      	bne.n	8014012 <_strtoul_l.constprop.0+0xa>
 8014020:	2c2d      	cmp	r4, #45	; 0x2d
 8014022:	d130      	bne.n	8014086 <_strtoul_l.constprop.0+0x7e>
 8014024:	782c      	ldrb	r4, [r5, #0]
 8014026:	2601      	movs	r6, #1
 8014028:	1c85      	adds	r5, r0, #2
 801402a:	2b00      	cmp	r3, #0
 801402c:	d057      	beq.n	80140de <_strtoul_l.constprop.0+0xd6>
 801402e:	2b10      	cmp	r3, #16
 8014030:	d109      	bne.n	8014046 <_strtoul_l.constprop.0+0x3e>
 8014032:	2c30      	cmp	r4, #48	; 0x30
 8014034:	d107      	bne.n	8014046 <_strtoul_l.constprop.0+0x3e>
 8014036:	7828      	ldrb	r0, [r5, #0]
 8014038:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801403c:	2858      	cmp	r0, #88	; 0x58
 801403e:	d149      	bne.n	80140d4 <_strtoul_l.constprop.0+0xcc>
 8014040:	786c      	ldrb	r4, [r5, #1]
 8014042:	2310      	movs	r3, #16
 8014044:	3502      	adds	r5, #2
 8014046:	f04f 38ff 	mov.w	r8, #4294967295
 801404a:	2700      	movs	r7, #0
 801404c:	fbb8 f8f3 	udiv	r8, r8, r3
 8014050:	fb03 f908 	mul.w	r9, r3, r8
 8014054:	ea6f 0909 	mvn.w	r9, r9
 8014058:	4638      	mov	r0, r7
 801405a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801405e:	f1bc 0f09 	cmp.w	ip, #9
 8014062:	d815      	bhi.n	8014090 <_strtoul_l.constprop.0+0x88>
 8014064:	4664      	mov	r4, ip
 8014066:	42a3      	cmp	r3, r4
 8014068:	dd23      	ble.n	80140b2 <_strtoul_l.constprop.0+0xaa>
 801406a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801406e:	d007      	beq.n	8014080 <_strtoul_l.constprop.0+0x78>
 8014070:	4580      	cmp	r8, r0
 8014072:	d31b      	bcc.n	80140ac <_strtoul_l.constprop.0+0xa4>
 8014074:	d101      	bne.n	801407a <_strtoul_l.constprop.0+0x72>
 8014076:	45a1      	cmp	r9, r4
 8014078:	db18      	blt.n	80140ac <_strtoul_l.constprop.0+0xa4>
 801407a:	fb00 4003 	mla	r0, r0, r3, r4
 801407e:	2701      	movs	r7, #1
 8014080:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014084:	e7e9      	b.n	801405a <_strtoul_l.constprop.0+0x52>
 8014086:	2c2b      	cmp	r4, #43	; 0x2b
 8014088:	bf04      	itt	eq
 801408a:	782c      	ldrbeq	r4, [r5, #0]
 801408c:	1c85      	addeq	r5, r0, #2
 801408e:	e7cc      	b.n	801402a <_strtoul_l.constprop.0+0x22>
 8014090:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014094:	f1bc 0f19 	cmp.w	ip, #25
 8014098:	d801      	bhi.n	801409e <_strtoul_l.constprop.0+0x96>
 801409a:	3c37      	subs	r4, #55	; 0x37
 801409c:	e7e3      	b.n	8014066 <_strtoul_l.constprop.0+0x5e>
 801409e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80140a2:	f1bc 0f19 	cmp.w	ip, #25
 80140a6:	d804      	bhi.n	80140b2 <_strtoul_l.constprop.0+0xaa>
 80140a8:	3c57      	subs	r4, #87	; 0x57
 80140aa:	e7dc      	b.n	8014066 <_strtoul_l.constprop.0+0x5e>
 80140ac:	f04f 37ff 	mov.w	r7, #4294967295
 80140b0:	e7e6      	b.n	8014080 <_strtoul_l.constprop.0+0x78>
 80140b2:	1c7b      	adds	r3, r7, #1
 80140b4:	d106      	bne.n	80140c4 <_strtoul_l.constprop.0+0xbc>
 80140b6:	2322      	movs	r3, #34	; 0x22
 80140b8:	f8ce 3000 	str.w	r3, [lr]
 80140bc:	4638      	mov	r0, r7
 80140be:	b932      	cbnz	r2, 80140ce <_strtoul_l.constprop.0+0xc6>
 80140c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140c4:	b106      	cbz	r6, 80140c8 <_strtoul_l.constprop.0+0xc0>
 80140c6:	4240      	negs	r0, r0
 80140c8:	2a00      	cmp	r2, #0
 80140ca:	d0f9      	beq.n	80140c0 <_strtoul_l.constprop.0+0xb8>
 80140cc:	b107      	cbz	r7, 80140d0 <_strtoul_l.constprop.0+0xc8>
 80140ce:	1e69      	subs	r1, r5, #1
 80140d0:	6011      	str	r1, [r2, #0]
 80140d2:	e7f5      	b.n	80140c0 <_strtoul_l.constprop.0+0xb8>
 80140d4:	2430      	movs	r4, #48	; 0x30
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d1b5      	bne.n	8014046 <_strtoul_l.constprop.0+0x3e>
 80140da:	2308      	movs	r3, #8
 80140dc:	e7b3      	b.n	8014046 <_strtoul_l.constprop.0+0x3e>
 80140de:	2c30      	cmp	r4, #48	; 0x30
 80140e0:	d0a9      	beq.n	8014036 <_strtoul_l.constprop.0+0x2e>
 80140e2:	230a      	movs	r3, #10
 80140e4:	e7af      	b.n	8014046 <_strtoul_l.constprop.0+0x3e>
 80140e6:	bf00      	nop
 80140e8:	08015f89 	.word	0x08015f89

080140ec <_strtoul_r>:
 80140ec:	f7ff bf8c 	b.w	8014008 <_strtoul_l.constprop.0>

080140f0 <__ascii_wctomb>:
 80140f0:	b149      	cbz	r1, 8014106 <__ascii_wctomb+0x16>
 80140f2:	2aff      	cmp	r2, #255	; 0xff
 80140f4:	bf85      	ittet	hi
 80140f6:	238a      	movhi	r3, #138	; 0x8a
 80140f8:	6003      	strhi	r3, [r0, #0]
 80140fa:	700a      	strbls	r2, [r1, #0]
 80140fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8014100:	bf98      	it	ls
 8014102:	2001      	movls	r0, #1
 8014104:	4770      	bx	lr
 8014106:	4608      	mov	r0, r1
 8014108:	4770      	bx	lr
	...

0801410c <fiprintf>:
 801410c:	b40e      	push	{r1, r2, r3}
 801410e:	b503      	push	{r0, r1, lr}
 8014110:	4601      	mov	r1, r0
 8014112:	ab03      	add	r3, sp, #12
 8014114:	4805      	ldr	r0, [pc, #20]	; (801412c <fiprintf+0x20>)
 8014116:	f853 2b04 	ldr.w	r2, [r3], #4
 801411a:	6800      	ldr	r0, [r0, #0]
 801411c:	9301      	str	r3, [sp, #4]
 801411e:	f000 f83f 	bl	80141a0 <_vfiprintf_r>
 8014122:	b002      	add	sp, #8
 8014124:	f85d eb04 	ldr.w	lr, [sp], #4
 8014128:	b003      	add	sp, #12
 801412a:	4770      	bx	lr
 801412c:	20000070 	.word	0x20000070

08014130 <abort>:
 8014130:	b508      	push	{r3, lr}
 8014132:	2006      	movs	r0, #6
 8014134:	f000 fa0c 	bl	8014550 <raise>
 8014138:	2001      	movs	r0, #1
 801413a:	f7ef fc7d 	bl	8003a38 <_exit>

0801413e <_malloc_usable_size_r>:
 801413e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014142:	1f18      	subs	r0, r3, #4
 8014144:	2b00      	cmp	r3, #0
 8014146:	bfbc      	itt	lt
 8014148:	580b      	ldrlt	r3, [r1, r0]
 801414a:	18c0      	addlt	r0, r0, r3
 801414c:	4770      	bx	lr

0801414e <__sfputc_r>:
 801414e:	6893      	ldr	r3, [r2, #8]
 8014150:	3b01      	subs	r3, #1
 8014152:	2b00      	cmp	r3, #0
 8014154:	b410      	push	{r4}
 8014156:	6093      	str	r3, [r2, #8]
 8014158:	da08      	bge.n	801416c <__sfputc_r+0x1e>
 801415a:	6994      	ldr	r4, [r2, #24]
 801415c:	42a3      	cmp	r3, r4
 801415e:	db01      	blt.n	8014164 <__sfputc_r+0x16>
 8014160:	290a      	cmp	r1, #10
 8014162:	d103      	bne.n	801416c <__sfputc_r+0x1e>
 8014164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014168:	f000 b934 	b.w	80143d4 <__swbuf_r>
 801416c:	6813      	ldr	r3, [r2, #0]
 801416e:	1c58      	adds	r0, r3, #1
 8014170:	6010      	str	r0, [r2, #0]
 8014172:	7019      	strb	r1, [r3, #0]
 8014174:	4608      	mov	r0, r1
 8014176:	f85d 4b04 	ldr.w	r4, [sp], #4
 801417a:	4770      	bx	lr

0801417c <__sfputs_r>:
 801417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801417e:	4606      	mov	r6, r0
 8014180:	460f      	mov	r7, r1
 8014182:	4614      	mov	r4, r2
 8014184:	18d5      	adds	r5, r2, r3
 8014186:	42ac      	cmp	r4, r5
 8014188:	d101      	bne.n	801418e <__sfputs_r+0x12>
 801418a:	2000      	movs	r0, #0
 801418c:	e007      	b.n	801419e <__sfputs_r+0x22>
 801418e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014192:	463a      	mov	r2, r7
 8014194:	4630      	mov	r0, r6
 8014196:	f7ff ffda 	bl	801414e <__sfputc_r>
 801419a:	1c43      	adds	r3, r0, #1
 801419c:	d1f3      	bne.n	8014186 <__sfputs_r+0xa>
 801419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080141a0 <_vfiprintf_r>:
 80141a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a4:	460d      	mov	r5, r1
 80141a6:	b09d      	sub	sp, #116	; 0x74
 80141a8:	4614      	mov	r4, r2
 80141aa:	4698      	mov	r8, r3
 80141ac:	4606      	mov	r6, r0
 80141ae:	b118      	cbz	r0, 80141b8 <_vfiprintf_r+0x18>
 80141b0:	6a03      	ldr	r3, [r0, #32]
 80141b2:	b90b      	cbnz	r3, 80141b8 <_vfiprintf_r+0x18>
 80141b4:	f7fc f90c 	bl	80103d0 <__sinit>
 80141b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141ba:	07d9      	lsls	r1, r3, #31
 80141bc:	d405      	bmi.n	80141ca <_vfiprintf_r+0x2a>
 80141be:	89ab      	ldrh	r3, [r5, #12]
 80141c0:	059a      	lsls	r2, r3, #22
 80141c2:	d402      	bmi.n	80141ca <_vfiprintf_r+0x2a>
 80141c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141c6:	f7fc fab0 	bl	801072a <__retarget_lock_acquire_recursive>
 80141ca:	89ab      	ldrh	r3, [r5, #12]
 80141cc:	071b      	lsls	r3, r3, #28
 80141ce:	d501      	bpl.n	80141d4 <_vfiprintf_r+0x34>
 80141d0:	692b      	ldr	r3, [r5, #16]
 80141d2:	b99b      	cbnz	r3, 80141fc <_vfiprintf_r+0x5c>
 80141d4:	4629      	mov	r1, r5
 80141d6:	4630      	mov	r0, r6
 80141d8:	f000 f93a 	bl	8014450 <__swsetup_r>
 80141dc:	b170      	cbz	r0, 80141fc <_vfiprintf_r+0x5c>
 80141de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141e0:	07dc      	lsls	r4, r3, #31
 80141e2:	d504      	bpl.n	80141ee <_vfiprintf_r+0x4e>
 80141e4:	f04f 30ff 	mov.w	r0, #4294967295
 80141e8:	b01d      	add	sp, #116	; 0x74
 80141ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ee:	89ab      	ldrh	r3, [r5, #12]
 80141f0:	0598      	lsls	r0, r3, #22
 80141f2:	d4f7      	bmi.n	80141e4 <_vfiprintf_r+0x44>
 80141f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141f6:	f7fc fa99 	bl	801072c <__retarget_lock_release_recursive>
 80141fa:	e7f3      	b.n	80141e4 <_vfiprintf_r+0x44>
 80141fc:	2300      	movs	r3, #0
 80141fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014200:	2320      	movs	r3, #32
 8014202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014206:	f8cd 800c 	str.w	r8, [sp, #12]
 801420a:	2330      	movs	r3, #48	; 0x30
 801420c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80143c0 <_vfiprintf_r+0x220>
 8014210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014214:	f04f 0901 	mov.w	r9, #1
 8014218:	4623      	mov	r3, r4
 801421a:	469a      	mov	sl, r3
 801421c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014220:	b10a      	cbz	r2, 8014226 <_vfiprintf_r+0x86>
 8014222:	2a25      	cmp	r2, #37	; 0x25
 8014224:	d1f9      	bne.n	801421a <_vfiprintf_r+0x7a>
 8014226:	ebba 0b04 	subs.w	fp, sl, r4
 801422a:	d00b      	beq.n	8014244 <_vfiprintf_r+0xa4>
 801422c:	465b      	mov	r3, fp
 801422e:	4622      	mov	r2, r4
 8014230:	4629      	mov	r1, r5
 8014232:	4630      	mov	r0, r6
 8014234:	f7ff ffa2 	bl	801417c <__sfputs_r>
 8014238:	3001      	adds	r0, #1
 801423a:	f000 80a9 	beq.w	8014390 <_vfiprintf_r+0x1f0>
 801423e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014240:	445a      	add	r2, fp
 8014242:	9209      	str	r2, [sp, #36]	; 0x24
 8014244:	f89a 3000 	ldrb.w	r3, [sl]
 8014248:	2b00      	cmp	r3, #0
 801424a:	f000 80a1 	beq.w	8014390 <_vfiprintf_r+0x1f0>
 801424e:	2300      	movs	r3, #0
 8014250:	f04f 32ff 	mov.w	r2, #4294967295
 8014254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014258:	f10a 0a01 	add.w	sl, sl, #1
 801425c:	9304      	str	r3, [sp, #16]
 801425e:	9307      	str	r3, [sp, #28]
 8014260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014264:	931a      	str	r3, [sp, #104]	; 0x68
 8014266:	4654      	mov	r4, sl
 8014268:	2205      	movs	r2, #5
 801426a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801426e:	4854      	ldr	r0, [pc, #336]	; (80143c0 <_vfiprintf_r+0x220>)
 8014270:	f7eb ffd6 	bl	8000220 <memchr>
 8014274:	9a04      	ldr	r2, [sp, #16]
 8014276:	b9d8      	cbnz	r0, 80142b0 <_vfiprintf_r+0x110>
 8014278:	06d1      	lsls	r1, r2, #27
 801427a:	bf44      	itt	mi
 801427c:	2320      	movmi	r3, #32
 801427e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014282:	0713      	lsls	r3, r2, #28
 8014284:	bf44      	itt	mi
 8014286:	232b      	movmi	r3, #43	; 0x2b
 8014288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801428c:	f89a 3000 	ldrb.w	r3, [sl]
 8014290:	2b2a      	cmp	r3, #42	; 0x2a
 8014292:	d015      	beq.n	80142c0 <_vfiprintf_r+0x120>
 8014294:	9a07      	ldr	r2, [sp, #28]
 8014296:	4654      	mov	r4, sl
 8014298:	2000      	movs	r0, #0
 801429a:	f04f 0c0a 	mov.w	ip, #10
 801429e:	4621      	mov	r1, r4
 80142a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142a4:	3b30      	subs	r3, #48	; 0x30
 80142a6:	2b09      	cmp	r3, #9
 80142a8:	d94d      	bls.n	8014346 <_vfiprintf_r+0x1a6>
 80142aa:	b1b0      	cbz	r0, 80142da <_vfiprintf_r+0x13a>
 80142ac:	9207      	str	r2, [sp, #28]
 80142ae:	e014      	b.n	80142da <_vfiprintf_r+0x13a>
 80142b0:	eba0 0308 	sub.w	r3, r0, r8
 80142b4:	fa09 f303 	lsl.w	r3, r9, r3
 80142b8:	4313      	orrs	r3, r2
 80142ba:	9304      	str	r3, [sp, #16]
 80142bc:	46a2      	mov	sl, r4
 80142be:	e7d2      	b.n	8014266 <_vfiprintf_r+0xc6>
 80142c0:	9b03      	ldr	r3, [sp, #12]
 80142c2:	1d19      	adds	r1, r3, #4
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	9103      	str	r1, [sp, #12]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	bfbb      	ittet	lt
 80142cc:	425b      	neglt	r3, r3
 80142ce:	f042 0202 	orrlt.w	r2, r2, #2
 80142d2:	9307      	strge	r3, [sp, #28]
 80142d4:	9307      	strlt	r3, [sp, #28]
 80142d6:	bfb8      	it	lt
 80142d8:	9204      	strlt	r2, [sp, #16]
 80142da:	7823      	ldrb	r3, [r4, #0]
 80142dc:	2b2e      	cmp	r3, #46	; 0x2e
 80142de:	d10c      	bne.n	80142fa <_vfiprintf_r+0x15a>
 80142e0:	7863      	ldrb	r3, [r4, #1]
 80142e2:	2b2a      	cmp	r3, #42	; 0x2a
 80142e4:	d134      	bne.n	8014350 <_vfiprintf_r+0x1b0>
 80142e6:	9b03      	ldr	r3, [sp, #12]
 80142e8:	1d1a      	adds	r2, r3, #4
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	9203      	str	r2, [sp, #12]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	bfb8      	it	lt
 80142f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80142f6:	3402      	adds	r4, #2
 80142f8:	9305      	str	r3, [sp, #20]
 80142fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80143d0 <_vfiprintf_r+0x230>
 80142fe:	7821      	ldrb	r1, [r4, #0]
 8014300:	2203      	movs	r2, #3
 8014302:	4650      	mov	r0, sl
 8014304:	f7eb ff8c 	bl	8000220 <memchr>
 8014308:	b138      	cbz	r0, 801431a <_vfiprintf_r+0x17a>
 801430a:	9b04      	ldr	r3, [sp, #16]
 801430c:	eba0 000a 	sub.w	r0, r0, sl
 8014310:	2240      	movs	r2, #64	; 0x40
 8014312:	4082      	lsls	r2, r0
 8014314:	4313      	orrs	r3, r2
 8014316:	3401      	adds	r4, #1
 8014318:	9304      	str	r3, [sp, #16]
 801431a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801431e:	4829      	ldr	r0, [pc, #164]	; (80143c4 <_vfiprintf_r+0x224>)
 8014320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014324:	2206      	movs	r2, #6
 8014326:	f7eb ff7b 	bl	8000220 <memchr>
 801432a:	2800      	cmp	r0, #0
 801432c:	d03f      	beq.n	80143ae <_vfiprintf_r+0x20e>
 801432e:	4b26      	ldr	r3, [pc, #152]	; (80143c8 <_vfiprintf_r+0x228>)
 8014330:	bb1b      	cbnz	r3, 801437a <_vfiprintf_r+0x1da>
 8014332:	9b03      	ldr	r3, [sp, #12]
 8014334:	3307      	adds	r3, #7
 8014336:	f023 0307 	bic.w	r3, r3, #7
 801433a:	3308      	adds	r3, #8
 801433c:	9303      	str	r3, [sp, #12]
 801433e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014340:	443b      	add	r3, r7
 8014342:	9309      	str	r3, [sp, #36]	; 0x24
 8014344:	e768      	b.n	8014218 <_vfiprintf_r+0x78>
 8014346:	fb0c 3202 	mla	r2, ip, r2, r3
 801434a:	460c      	mov	r4, r1
 801434c:	2001      	movs	r0, #1
 801434e:	e7a6      	b.n	801429e <_vfiprintf_r+0xfe>
 8014350:	2300      	movs	r3, #0
 8014352:	3401      	adds	r4, #1
 8014354:	9305      	str	r3, [sp, #20]
 8014356:	4619      	mov	r1, r3
 8014358:	f04f 0c0a 	mov.w	ip, #10
 801435c:	4620      	mov	r0, r4
 801435e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014362:	3a30      	subs	r2, #48	; 0x30
 8014364:	2a09      	cmp	r2, #9
 8014366:	d903      	bls.n	8014370 <_vfiprintf_r+0x1d0>
 8014368:	2b00      	cmp	r3, #0
 801436a:	d0c6      	beq.n	80142fa <_vfiprintf_r+0x15a>
 801436c:	9105      	str	r1, [sp, #20]
 801436e:	e7c4      	b.n	80142fa <_vfiprintf_r+0x15a>
 8014370:	fb0c 2101 	mla	r1, ip, r1, r2
 8014374:	4604      	mov	r4, r0
 8014376:	2301      	movs	r3, #1
 8014378:	e7f0      	b.n	801435c <_vfiprintf_r+0x1bc>
 801437a:	ab03      	add	r3, sp, #12
 801437c:	9300      	str	r3, [sp, #0]
 801437e:	462a      	mov	r2, r5
 8014380:	4b12      	ldr	r3, [pc, #72]	; (80143cc <_vfiprintf_r+0x22c>)
 8014382:	a904      	add	r1, sp, #16
 8014384:	4630      	mov	r0, r6
 8014386:	f7fb f9c1 	bl	800f70c <_printf_float>
 801438a:	4607      	mov	r7, r0
 801438c:	1c78      	adds	r0, r7, #1
 801438e:	d1d6      	bne.n	801433e <_vfiprintf_r+0x19e>
 8014390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014392:	07d9      	lsls	r1, r3, #31
 8014394:	d405      	bmi.n	80143a2 <_vfiprintf_r+0x202>
 8014396:	89ab      	ldrh	r3, [r5, #12]
 8014398:	059a      	lsls	r2, r3, #22
 801439a:	d402      	bmi.n	80143a2 <_vfiprintf_r+0x202>
 801439c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801439e:	f7fc f9c5 	bl	801072c <__retarget_lock_release_recursive>
 80143a2:	89ab      	ldrh	r3, [r5, #12]
 80143a4:	065b      	lsls	r3, r3, #25
 80143a6:	f53f af1d 	bmi.w	80141e4 <_vfiprintf_r+0x44>
 80143aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143ac:	e71c      	b.n	80141e8 <_vfiprintf_r+0x48>
 80143ae:	ab03      	add	r3, sp, #12
 80143b0:	9300      	str	r3, [sp, #0]
 80143b2:	462a      	mov	r2, r5
 80143b4:	4b05      	ldr	r3, [pc, #20]	; (80143cc <_vfiprintf_r+0x22c>)
 80143b6:	a904      	add	r1, sp, #16
 80143b8:	4630      	mov	r0, r6
 80143ba:	f7fb fc4b 	bl	800fc54 <_printf_i>
 80143be:	e7e4      	b.n	801438a <_vfiprintf_r+0x1ea>
 80143c0:	08016089 	.word	0x08016089
 80143c4:	08016093 	.word	0x08016093
 80143c8:	0800f70d 	.word	0x0800f70d
 80143cc:	0801417d 	.word	0x0801417d
 80143d0:	0801608f 	.word	0x0801608f

080143d4 <__swbuf_r>:
 80143d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d6:	460e      	mov	r6, r1
 80143d8:	4614      	mov	r4, r2
 80143da:	4605      	mov	r5, r0
 80143dc:	b118      	cbz	r0, 80143e6 <__swbuf_r+0x12>
 80143de:	6a03      	ldr	r3, [r0, #32]
 80143e0:	b90b      	cbnz	r3, 80143e6 <__swbuf_r+0x12>
 80143e2:	f7fb fff5 	bl	80103d0 <__sinit>
 80143e6:	69a3      	ldr	r3, [r4, #24]
 80143e8:	60a3      	str	r3, [r4, #8]
 80143ea:	89a3      	ldrh	r3, [r4, #12]
 80143ec:	071a      	lsls	r2, r3, #28
 80143ee:	d525      	bpl.n	801443c <__swbuf_r+0x68>
 80143f0:	6923      	ldr	r3, [r4, #16]
 80143f2:	b31b      	cbz	r3, 801443c <__swbuf_r+0x68>
 80143f4:	6823      	ldr	r3, [r4, #0]
 80143f6:	6922      	ldr	r2, [r4, #16]
 80143f8:	1a98      	subs	r0, r3, r2
 80143fa:	6963      	ldr	r3, [r4, #20]
 80143fc:	b2f6      	uxtb	r6, r6
 80143fe:	4283      	cmp	r3, r0
 8014400:	4637      	mov	r7, r6
 8014402:	dc04      	bgt.n	801440e <__swbuf_r+0x3a>
 8014404:	4621      	mov	r1, r4
 8014406:	4628      	mov	r0, r5
 8014408:	f7ff f962 	bl	80136d0 <_fflush_r>
 801440c:	b9e0      	cbnz	r0, 8014448 <__swbuf_r+0x74>
 801440e:	68a3      	ldr	r3, [r4, #8]
 8014410:	3b01      	subs	r3, #1
 8014412:	60a3      	str	r3, [r4, #8]
 8014414:	6823      	ldr	r3, [r4, #0]
 8014416:	1c5a      	adds	r2, r3, #1
 8014418:	6022      	str	r2, [r4, #0]
 801441a:	701e      	strb	r6, [r3, #0]
 801441c:	6962      	ldr	r2, [r4, #20]
 801441e:	1c43      	adds	r3, r0, #1
 8014420:	429a      	cmp	r2, r3
 8014422:	d004      	beq.n	801442e <__swbuf_r+0x5a>
 8014424:	89a3      	ldrh	r3, [r4, #12]
 8014426:	07db      	lsls	r3, r3, #31
 8014428:	d506      	bpl.n	8014438 <__swbuf_r+0x64>
 801442a:	2e0a      	cmp	r6, #10
 801442c:	d104      	bne.n	8014438 <__swbuf_r+0x64>
 801442e:	4621      	mov	r1, r4
 8014430:	4628      	mov	r0, r5
 8014432:	f7ff f94d 	bl	80136d0 <_fflush_r>
 8014436:	b938      	cbnz	r0, 8014448 <__swbuf_r+0x74>
 8014438:	4638      	mov	r0, r7
 801443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801443c:	4621      	mov	r1, r4
 801443e:	4628      	mov	r0, r5
 8014440:	f000 f806 	bl	8014450 <__swsetup_r>
 8014444:	2800      	cmp	r0, #0
 8014446:	d0d5      	beq.n	80143f4 <__swbuf_r+0x20>
 8014448:	f04f 37ff 	mov.w	r7, #4294967295
 801444c:	e7f4      	b.n	8014438 <__swbuf_r+0x64>
	...

08014450 <__swsetup_r>:
 8014450:	b538      	push	{r3, r4, r5, lr}
 8014452:	4b2a      	ldr	r3, [pc, #168]	; (80144fc <__swsetup_r+0xac>)
 8014454:	4605      	mov	r5, r0
 8014456:	6818      	ldr	r0, [r3, #0]
 8014458:	460c      	mov	r4, r1
 801445a:	b118      	cbz	r0, 8014464 <__swsetup_r+0x14>
 801445c:	6a03      	ldr	r3, [r0, #32]
 801445e:	b90b      	cbnz	r3, 8014464 <__swsetup_r+0x14>
 8014460:	f7fb ffb6 	bl	80103d0 <__sinit>
 8014464:	89a3      	ldrh	r3, [r4, #12]
 8014466:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801446a:	0718      	lsls	r0, r3, #28
 801446c:	d422      	bmi.n	80144b4 <__swsetup_r+0x64>
 801446e:	06d9      	lsls	r1, r3, #27
 8014470:	d407      	bmi.n	8014482 <__swsetup_r+0x32>
 8014472:	2309      	movs	r3, #9
 8014474:	602b      	str	r3, [r5, #0]
 8014476:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801447a:	81a3      	strh	r3, [r4, #12]
 801447c:	f04f 30ff 	mov.w	r0, #4294967295
 8014480:	e034      	b.n	80144ec <__swsetup_r+0x9c>
 8014482:	0758      	lsls	r0, r3, #29
 8014484:	d512      	bpl.n	80144ac <__swsetup_r+0x5c>
 8014486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014488:	b141      	cbz	r1, 801449c <__swsetup_r+0x4c>
 801448a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801448e:	4299      	cmp	r1, r3
 8014490:	d002      	beq.n	8014498 <__swsetup_r+0x48>
 8014492:	4628      	mov	r0, r5
 8014494:	f7fc ffda 	bl	801144c <_free_r>
 8014498:	2300      	movs	r3, #0
 801449a:	6363      	str	r3, [r4, #52]	; 0x34
 801449c:	89a3      	ldrh	r3, [r4, #12]
 801449e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144a2:	81a3      	strh	r3, [r4, #12]
 80144a4:	2300      	movs	r3, #0
 80144a6:	6063      	str	r3, [r4, #4]
 80144a8:	6923      	ldr	r3, [r4, #16]
 80144aa:	6023      	str	r3, [r4, #0]
 80144ac:	89a3      	ldrh	r3, [r4, #12]
 80144ae:	f043 0308 	orr.w	r3, r3, #8
 80144b2:	81a3      	strh	r3, [r4, #12]
 80144b4:	6923      	ldr	r3, [r4, #16]
 80144b6:	b94b      	cbnz	r3, 80144cc <__swsetup_r+0x7c>
 80144b8:	89a3      	ldrh	r3, [r4, #12]
 80144ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144c2:	d003      	beq.n	80144cc <__swsetup_r+0x7c>
 80144c4:	4621      	mov	r1, r4
 80144c6:	4628      	mov	r0, r5
 80144c8:	f000 f884 	bl	80145d4 <__smakebuf_r>
 80144cc:	89a0      	ldrh	r0, [r4, #12]
 80144ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80144d2:	f010 0301 	ands.w	r3, r0, #1
 80144d6:	d00a      	beq.n	80144ee <__swsetup_r+0x9e>
 80144d8:	2300      	movs	r3, #0
 80144da:	60a3      	str	r3, [r4, #8]
 80144dc:	6963      	ldr	r3, [r4, #20]
 80144de:	425b      	negs	r3, r3
 80144e0:	61a3      	str	r3, [r4, #24]
 80144e2:	6923      	ldr	r3, [r4, #16]
 80144e4:	b943      	cbnz	r3, 80144f8 <__swsetup_r+0xa8>
 80144e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80144ea:	d1c4      	bne.n	8014476 <__swsetup_r+0x26>
 80144ec:	bd38      	pop	{r3, r4, r5, pc}
 80144ee:	0781      	lsls	r1, r0, #30
 80144f0:	bf58      	it	pl
 80144f2:	6963      	ldrpl	r3, [r4, #20]
 80144f4:	60a3      	str	r3, [r4, #8]
 80144f6:	e7f4      	b.n	80144e2 <__swsetup_r+0x92>
 80144f8:	2000      	movs	r0, #0
 80144fa:	e7f7      	b.n	80144ec <__swsetup_r+0x9c>
 80144fc:	20000070 	.word	0x20000070

08014500 <_raise_r>:
 8014500:	291f      	cmp	r1, #31
 8014502:	b538      	push	{r3, r4, r5, lr}
 8014504:	4604      	mov	r4, r0
 8014506:	460d      	mov	r5, r1
 8014508:	d904      	bls.n	8014514 <_raise_r+0x14>
 801450a:	2316      	movs	r3, #22
 801450c:	6003      	str	r3, [r0, #0]
 801450e:	f04f 30ff 	mov.w	r0, #4294967295
 8014512:	bd38      	pop	{r3, r4, r5, pc}
 8014514:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014516:	b112      	cbz	r2, 801451e <_raise_r+0x1e>
 8014518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801451c:	b94b      	cbnz	r3, 8014532 <_raise_r+0x32>
 801451e:	4620      	mov	r0, r4
 8014520:	f000 f830 	bl	8014584 <_getpid_r>
 8014524:	462a      	mov	r2, r5
 8014526:	4601      	mov	r1, r0
 8014528:	4620      	mov	r0, r4
 801452a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801452e:	f000 b817 	b.w	8014560 <_kill_r>
 8014532:	2b01      	cmp	r3, #1
 8014534:	d00a      	beq.n	801454c <_raise_r+0x4c>
 8014536:	1c59      	adds	r1, r3, #1
 8014538:	d103      	bne.n	8014542 <_raise_r+0x42>
 801453a:	2316      	movs	r3, #22
 801453c:	6003      	str	r3, [r0, #0]
 801453e:	2001      	movs	r0, #1
 8014540:	e7e7      	b.n	8014512 <_raise_r+0x12>
 8014542:	2400      	movs	r4, #0
 8014544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014548:	4628      	mov	r0, r5
 801454a:	4798      	blx	r3
 801454c:	2000      	movs	r0, #0
 801454e:	e7e0      	b.n	8014512 <_raise_r+0x12>

08014550 <raise>:
 8014550:	4b02      	ldr	r3, [pc, #8]	; (801455c <raise+0xc>)
 8014552:	4601      	mov	r1, r0
 8014554:	6818      	ldr	r0, [r3, #0]
 8014556:	f7ff bfd3 	b.w	8014500 <_raise_r>
 801455a:	bf00      	nop
 801455c:	20000070 	.word	0x20000070

08014560 <_kill_r>:
 8014560:	b538      	push	{r3, r4, r5, lr}
 8014562:	4d07      	ldr	r5, [pc, #28]	; (8014580 <_kill_r+0x20>)
 8014564:	2300      	movs	r3, #0
 8014566:	4604      	mov	r4, r0
 8014568:	4608      	mov	r0, r1
 801456a:	4611      	mov	r1, r2
 801456c:	602b      	str	r3, [r5, #0]
 801456e:	f7ef fa53 	bl	8003a18 <_kill>
 8014572:	1c43      	adds	r3, r0, #1
 8014574:	d102      	bne.n	801457c <_kill_r+0x1c>
 8014576:	682b      	ldr	r3, [r5, #0]
 8014578:	b103      	cbz	r3, 801457c <_kill_r+0x1c>
 801457a:	6023      	str	r3, [r4, #0]
 801457c:	bd38      	pop	{r3, r4, r5, pc}
 801457e:	bf00      	nop
 8014580:	20004b58 	.word	0x20004b58

08014584 <_getpid_r>:
 8014584:	f7ef ba40 	b.w	8003a08 <_getpid>

08014588 <__swhatbuf_r>:
 8014588:	b570      	push	{r4, r5, r6, lr}
 801458a:	460c      	mov	r4, r1
 801458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014590:	2900      	cmp	r1, #0
 8014592:	b096      	sub	sp, #88	; 0x58
 8014594:	4615      	mov	r5, r2
 8014596:	461e      	mov	r6, r3
 8014598:	da0d      	bge.n	80145b6 <__swhatbuf_r+0x2e>
 801459a:	89a3      	ldrh	r3, [r4, #12]
 801459c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80145a0:	f04f 0100 	mov.w	r1, #0
 80145a4:	bf0c      	ite	eq
 80145a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80145aa:	2340      	movne	r3, #64	; 0x40
 80145ac:	2000      	movs	r0, #0
 80145ae:	6031      	str	r1, [r6, #0]
 80145b0:	602b      	str	r3, [r5, #0]
 80145b2:	b016      	add	sp, #88	; 0x58
 80145b4:	bd70      	pop	{r4, r5, r6, pc}
 80145b6:	466a      	mov	r2, sp
 80145b8:	f000 f848 	bl	801464c <_fstat_r>
 80145bc:	2800      	cmp	r0, #0
 80145be:	dbec      	blt.n	801459a <__swhatbuf_r+0x12>
 80145c0:	9901      	ldr	r1, [sp, #4]
 80145c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80145c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80145ca:	4259      	negs	r1, r3
 80145cc:	4159      	adcs	r1, r3
 80145ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145d2:	e7eb      	b.n	80145ac <__swhatbuf_r+0x24>

080145d4 <__smakebuf_r>:
 80145d4:	898b      	ldrh	r3, [r1, #12]
 80145d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145d8:	079d      	lsls	r5, r3, #30
 80145da:	4606      	mov	r6, r0
 80145dc:	460c      	mov	r4, r1
 80145de:	d507      	bpl.n	80145f0 <__smakebuf_r+0x1c>
 80145e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145e4:	6023      	str	r3, [r4, #0]
 80145e6:	6123      	str	r3, [r4, #16]
 80145e8:	2301      	movs	r3, #1
 80145ea:	6163      	str	r3, [r4, #20]
 80145ec:	b002      	add	sp, #8
 80145ee:	bd70      	pop	{r4, r5, r6, pc}
 80145f0:	ab01      	add	r3, sp, #4
 80145f2:	466a      	mov	r2, sp
 80145f4:	f7ff ffc8 	bl	8014588 <__swhatbuf_r>
 80145f8:	9900      	ldr	r1, [sp, #0]
 80145fa:	4605      	mov	r5, r0
 80145fc:	4630      	mov	r0, r6
 80145fe:	f7fc ff99 	bl	8011534 <_malloc_r>
 8014602:	b948      	cbnz	r0, 8014618 <__smakebuf_r+0x44>
 8014604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014608:	059a      	lsls	r2, r3, #22
 801460a:	d4ef      	bmi.n	80145ec <__smakebuf_r+0x18>
 801460c:	f023 0303 	bic.w	r3, r3, #3
 8014610:	f043 0302 	orr.w	r3, r3, #2
 8014614:	81a3      	strh	r3, [r4, #12]
 8014616:	e7e3      	b.n	80145e0 <__smakebuf_r+0xc>
 8014618:	89a3      	ldrh	r3, [r4, #12]
 801461a:	6020      	str	r0, [r4, #0]
 801461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014620:	81a3      	strh	r3, [r4, #12]
 8014622:	9b00      	ldr	r3, [sp, #0]
 8014624:	6163      	str	r3, [r4, #20]
 8014626:	9b01      	ldr	r3, [sp, #4]
 8014628:	6120      	str	r0, [r4, #16]
 801462a:	b15b      	cbz	r3, 8014644 <__smakebuf_r+0x70>
 801462c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014630:	4630      	mov	r0, r6
 8014632:	f000 f81d 	bl	8014670 <_isatty_r>
 8014636:	b128      	cbz	r0, 8014644 <__smakebuf_r+0x70>
 8014638:	89a3      	ldrh	r3, [r4, #12]
 801463a:	f023 0303 	bic.w	r3, r3, #3
 801463e:	f043 0301 	orr.w	r3, r3, #1
 8014642:	81a3      	strh	r3, [r4, #12]
 8014644:	89a3      	ldrh	r3, [r4, #12]
 8014646:	431d      	orrs	r5, r3
 8014648:	81a5      	strh	r5, [r4, #12]
 801464a:	e7cf      	b.n	80145ec <__smakebuf_r+0x18>

0801464c <_fstat_r>:
 801464c:	b538      	push	{r3, r4, r5, lr}
 801464e:	4d07      	ldr	r5, [pc, #28]	; (801466c <_fstat_r+0x20>)
 8014650:	2300      	movs	r3, #0
 8014652:	4604      	mov	r4, r0
 8014654:	4608      	mov	r0, r1
 8014656:	4611      	mov	r1, r2
 8014658:	602b      	str	r3, [r5, #0]
 801465a:	f7ef fa3c 	bl	8003ad6 <_fstat>
 801465e:	1c43      	adds	r3, r0, #1
 8014660:	d102      	bne.n	8014668 <_fstat_r+0x1c>
 8014662:	682b      	ldr	r3, [r5, #0]
 8014664:	b103      	cbz	r3, 8014668 <_fstat_r+0x1c>
 8014666:	6023      	str	r3, [r4, #0]
 8014668:	bd38      	pop	{r3, r4, r5, pc}
 801466a:	bf00      	nop
 801466c:	20004b58 	.word	0x20004b58

08014670 <_isatty_r>:
 8014670:	b538      	push	{r3, r4, r5, lr}
 8014672:	4d06      	ldr	r5, [pc, #24]	; (801468c <_isatty_r+0x1c>)
 8014674:	2300      	movs	r3, #0
 8014676:	4604      	mov	r4, r0
 8014678:	4608      	mov	r0, r1
 801467a:	602b      	str	r3, [r5, #0]
 801467c:	f7ef fa3b 	bl	8003af6 <_isatty>
 8014680:	1c43      	adds	r3, r0, #1
 8014682:	d102      	bne.n	801468a <_isatty_r+0x1a>
 8014684:	682b      	ldr	r3, [r5, #0]
 8014686:	b103      	cbz	r3, 801468a <_isatty_r+0x1a>
 8014688:	6023      	str	r3, [r4, #0]
 801468a:	bd38      	pop	{r3, r4, r5, pc}
 801468c:	20004b58 	.word	0x20004b58

08014690 <pow>:
 8014690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014692:	ed2d 8b02 	vpush	{d8}
 8014696:	eeb0 8a40 	vmov.f32	s16, s0
 801469a:	eef0 8a60 	vmov.f32	s17, s1
 801469e:	ec55 4b11 	vmov	r4, r5, d1
 80146a2:	f000 f979 	bl	8014998 <__ieee754_pow>
 80146a6:	4622      	mov	r2, r4
 80146a8:	462b      	mov	r3, r5
 80146aa:	4620      	mov	r0, r4
 80146ac:	4629      	mov	r1, r5
 80146ae:	ec57 6b10 	vmov	r6, r7, d0
 80146b2:	f7ec fa63 	bl	8000b7c <__aeabi_dcmpun>
 80146b6:	2800      	cmp	r0, #0
 80146b8:	d13b      	bne.n	8014732 <pow+0xa2>
 80146ba:	ec51 0b18 	vmov	r0, r1, d8
 80146be:	2200      	movs	r2, #0
 80146c0:	2300      	movs	r3, #0
 80146c2:	f7ec fa29 	bl	8000b18 <__aeabi_dcmpeq>
 80146c6:	b1b8      	cbz	r0, 80146f8 <pow+0x68>
 80146c8:	2200      	movs	r2, #0
 80146ca:	2300      	movs	r3, #0
 80146cc:	4620      	mov	r0, r4
 80146ce:	4629      	mov	r1, r5
 80146d0:	f7ec fa22 	bl	8000b18 <__aeabi_dcmpeq>
 80146d4:	2800      	cmp	r0, #0
 80146d6:	d146      	bne.n	8014766 <pow+0xd6>
 80146d8:	ec45 4b10 	vmov	d0, r4, r5
 80146dc:	f000 f876 	bl	80147cc <finite>
 80146e0:	b338      	cbz	r0, 8014732 <pow+0xa2>
 80146e2:	2200      	movs	r2, #0
 80146e4:	2300      	movs	r3, #0
 80146e6:	4620      	mov	r0, r4
 80146e8:	4629      	mov	r1, r5
 80146ea:	f7ec fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80146ee:	b300      	cbz	r0, 8014732 <pow+0xa2>
 80146f0:	f7fb fff0 	bl	80106d4 <__errno>
 80146f4:	2322      	movs	r3, #34	; 0x22
 80146f6:	e01b      	b.n	8014730 <pow+0xa0>
 80146f8:	ec47 6b10 	vmov	d0, r6, r7
 80146fc:	f000 f866 	bl	80147cc <finite>
 8014700:	b9e0      	cbnz	r0, 801473c <pow+0xac>
 8014702:	eeb0 0a48 	vmov.f32	s0, s16
 8014706:	eef0 0a68 	vmov.f32	s1, s17
 801470a:	f000 f85f 	bl	80147cc <finite>
 801470e:	b1a8      	cbz	r0, 801473c <pow+0xac>
 8014710:	ec45 4b10 	vmov	d0, r4, r5
 8014714:	f000 f85a 	bl	80147cc <finite>
 8014718:	b180      	cbz	r0, 801473c <pow+0xac>
 801471a:	4632      	mov	r2, r6
 801471c:	463b      	mov	r3, r7
 801471e:	4630      	mov	r0, r6
 8014720:	4639      	mov	r1, r7
 8014722:	f7ec fa2b 	bl	8000b7c <__aeabi_dcmpun>
 8014726:	2800      	cmp	r0, #0
 8014728:	d0e2      	beq.n	80146f0 <pow+0x60>
 801472a:	f7fb ffd3 	bl	80106d4 <__errno>
 801472e:	2321      	movs	r3, #33	; 0x21
 8014730:	6003      	str	r3, [r0, #0]
 8014732:	ecbd 8b02 	vpop	{d8}
 8014736:	ec47 6b10 	vmov	d0, r6, r7
 801473a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801473c:	2200      	movs	r2, #0
 801473e:	2300      	movs	r3, #0
 8014740:	4630      	mov	r0, r6
 8014742:	4639      	mov	r1, r7
 8014744:	f7ec f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 8014748:	2800      	cmp	r0, #0
 801474a:	d0f2      	beq.n	8014732 <pow+0xa2>
 801474c:	eeb0 0a48 	vmov.f32	s0, s16
 8014750:	eef0 0a68 	vmov.f32	s1, s17
 8014754:	f000 f83a 	bl	80147cc <finite>
 8014758:	2800      	cmp	r0, #0
 801475a:	d0ea      	beq.n	8014732 <pow+0xa2>
 801475c:	ec45 4b10 	vmov	d0, r4, r5
 8014760:	f000 f834 	bl	80147cc <finite>
 8014764:	e7c3      	b.n	80146ee <pow+0x5e>
 8014766:	4f01      	ldr	r7, [pc, #4]	; (801476c <pow+0xdc>)
 8014768:	2600      	movs	r6, #0
 801476a:	e7e2      	b.n	8014732 <pow+0xa2>
 801476c:	3ff00000 	.word	0x3ff00000

08014770 <sqrt>:
 8014770:	b538      	push	{r3, r4, r5, lr}
 8014772:	ed2d 8b02 	vpush	{d8}
 8014776:	ec55 4b10 	vmov	r4, r5, d0
 801477a:	f000 f833 	bl	80147e4 <__ieee754_sqrt>
 801477e:	4622      	mov	r2, r4
 8014780:	462b      	mov	r3, r5
 8014782:	4620      	mov	r0, r4
 8014784:	4629      	mov	r1, r5
 8014786:	eeb0 8a40 	vmov.f32	s16, s0
 801478a:	eef0 8a60 	vmov.f32	s17, s1
 801478e:	f7ec f9f5 	bl	8000b7c <__aeabi_dcmpun>
 8014792:	b990      	cbnz	r0, 80147ba <sqrt+0x4a>
 8014794:	2200      	movs	r2, #0
 8014796:	2300      	movs	r3, #0
 8014798:	4620      	mov	r0, r4
 801479a:	4629      	mov	r1, r5
 801479c:	f7ec f9c6 	bl	8000b2c <__aeabi_dcmplt>
 80147a0:	b158      	cbz	r0, 80147ba <sqrt+0x4a>
 80147a2:	f7fb ff97 	bl	80106d4 <__errno>
 80147a6:	2321      	movs	r3, #33	; 0x21
 80147a8:	6003      	str	r3, [r0, #0]
 80147aa:	2200      	movs	r2, #0
 80147ac:	2300      	movs	r3, #0
 80147ae:	4610      	mov	r0, r2
 80147b0:	4619      	mov	r1, r3
 80147b2:	f7ec f873 	bl	800089c <__aeabi_ddiv>
 80147b6:	ec41 0b18 	vmov	d8, r0, r1
 80147ba:	eeb0 0a48 	vmov.f32	s0, s16
 80147be:	eef0 0a68 	vmov.f32	s1, s17
 80147c2:	ecbd 8b02 	vpop	{d8}
 80147c6:	bd38      	pop	{r3, r4, r5, pc}

080147c8 <atan2f>:
 80147c8:	f000 be1a 	b.w	8015400 <__ieee754_atan2f>

080147cc <finite>:
 80147cc:	b082      	sub	sp, #8
 80147ce:	ed8d 0b00 	vstr	d0, [sp]
 80147d2:	9801      	ldr	r0, [sp, #4]
 80147d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80147d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80147dc:	0fc0      	lsrs	r0, r0, #31
 80147de:	b002      	add	sp, #8
 80147e0:	4770      	bx	lr
	...

080147e4 <__ieee754_sqrt>:
 80147e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e8:	ec55 4b10 	vmov	r4, r5, d0
 80147ec:	4e67      	ldr	r6, [pc, #412]	; (801498c <__ieee754_sqrt+0x1a8>)
 80147ee:	43ae      	bics	r6, r5
 80147f0:	ee10 0a10 	vmov	r0, s0
 80147f4:	ee10 2a10 	vmov	r2, s0
 80147f8:	4629      	mov	r1, r5
 80147fa:	462b      	mov	r3, r5
 80147fc:	d10d      	bne.n	801481a <__ieee754_sqrt+0x36>
 80147fe:	f7eb ff23 	bl	8000648 <__aeabi_dmul>
 8014802:	4602      	mov	r2, r0
 8014804:	460b      	mov	r3, r1
 8014806:	4620      	mov	r0, r4
 8014808:	4629      	mov	r1, r5
 801480a:	f7eb fd67 	bl	80002dc <__adddf3>
 801480e:	4604      	mov	r4, r0
 8014810:	460d      	mov	r5, r1
 8014812:	ec45 4b10 	vmov	d0, r4, r5
 8014816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801481a:	2d00      	cmp	r5, #0
 801481c:	dc0b      	bgt.n	8014836 <__ieee754_sqrt+0x52>
 801481e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014822:	4326      	orrs	r6, r4
 8014824:	d0f5      	beq.n	8014812 <__ieee754_sqrt+0x2e>
 8014826:	b135      	cbz	r5, 8014836 <__ieee754_sqrt+0x52>
 8014828:	f7eb fd56 	bl	80002d8 <__aeabi_dsub>
 801482c:	4602      	mov	r2, r0
 801482e:	460b      	mov	r3, r1
 8014830:	f7ec f834 	bl	800089c <__aeabi_ddiv>
 8014834:	e7eb      	b.n	801480e <__ieee754_sqrt+0x2a>
 8014836:	1509      	asrs	r1, r1, #20
 8014838:	f000 808d 	beq.w	8014956 <__ieee754_sqrt+0x172>
 801483c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014840:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014848:	07c9      	lsls	r1, r1, #31
 801484a:	bf5c      	itt	pl
 801484c:	005b      	lslpl	r3, r3, #1
 801484e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8014852:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014856:	bf58      	it	pl
 8014858:	0052      	lslpl	r2, r2, #1
 801485a:	2500      	movs	r5, #0
 801485c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014860:	1076      	asrs	r6, r6, #1
 8014862:	0052      	lsls	r2, r2, #1
 8014864:	f04f 0e16 	mov.w	lr, #22
 8014868:	46ac      	mov	ip, r5
 801486a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801486e:	eb0c 0001 	add.w	r0, ip, r1
 8014872:	4298      	cmp	r0, r3
 8014874:	bfde      	ittt	le
 8014876:	1a1b      	suble	r3, r3, r0
 8014878:	eb00 0c01 	addle.w	ip, r0, r1
 801487c:	186d      	addle	r5, r5, r1
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	f1be 0e01 	subs.w	lr, lr, #1
 8014884:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014888:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801488c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014890:	d1ed      	bne.n	801486e <__ieee754_sqrt+0x8a>
 8014892:	4674      	mov	r4, lr
 8014894:	2720      	movs	r7, #32
 8014896:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801489a:	4563      	cmp	r3, ip
 801489c:	eb01 000e 	add.w	r0, r1, lr
 80148a0:	dc02      	bgt.n	80148a8 <__ieee754_sqrt+0xc4>
 80148a2:	d113      	bne.n	80148cc <__ieee754_sqrt+0xe8>
 80148a4:	4290      	cmp	r0, r2
 80148a6:	d811      	bhi.n	80148cc <__ieee754_sqrt+0xe8>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	eb00 0e01 	add.w	lr, r0, r1
 80148ae:	da57      	bge.n	8014960 <__ieee754_sqrt+0x17c>
 80148b0:	f1be 0f00 	cmp.w	lr, #0
 80148b4:	db54      	blt.n	8014960 <__ieee754_sqrt+0x17c>
 80148b6:	f10c 0801 	add.w	r8, ip, #1
 80148ba:	eba3 030c 	sub.w	r3, r3, ip
 80148be:	4290      	cmp	r0, r2
 80148c0:	bf88      	it	hi
 80148c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80148c6:	1a12      	subs	r2, r2, r0
 80148c8:	440c      	add	r4, r1
 80148ca:	46c4      	mov	ip, r8
 80148cc:	005b      	lsls	r3, r3, #1
 80148ce:	3f01      	subs	r7, #1
 80148d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80148d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80148d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80148dc:	d1dd      	bne.n	801489a <__ieee754_sqrt+0xb6>
 80148de:	4313      	orrs	r3, r2
 80148e0:	d01b      	beq.n	801491a <__ieee754_sqrt+0x136>
 80148e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8014990 <__ieee754_sqrt+0x1ac>
 80148e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8014994 <__ieee754_sqrt+0x1b0>
 80148ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80148ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80148f2:	f7eb fcf1 	bl	80002d8 <__aeabi_dsub>
 80148f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80148fa:	4602      	mov	r2, r0
 80148fc:	460b      	mov	r3, r1
 80148fe:	4640      	mov	r0, r8
 8014900:	4649      	mov	r1, r9
 8014902:	f7ec f91d 	bl	8000b40 <__aeabi_dcmple>
 8014906:	b140      	cbz	r0, 801491a <__ieee754_sqrt+0x136>
 8014908:	f1b4 3fff 	cmp.w	r4, #4294967295
 801490c:	e9da 0100 	ldrd	r0, r1, [sl]
 8014910:	e9db 2300 	ldrd	r2, r3, [fp]
 8014914:	d126      	bne.n	8014964 <__ieee754_sqrt+0x180>
 8014916:	3501      	adds	r5, #1
 8014918:	463c      	mov	r4, r7
 801491a:	106a      	asrs	r2, r5, #1
 801491c:	0863      	lsrs	r3, r4, #1
 801491e:	07e9      	lsls	r1, r5, #31
 8014920:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014924:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014928:	bf48      	it	mi
 801492a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801492e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8014932:	461c      	mov	r4, r3
 8014934:	e76d      	b.n	8014812 <__ieee754_sqrt+0x2e>
 8014936:	0ad3      	lsrs	r3, r2, #11
 8014938:	3815      	subs	r0, #21
 801493a:	0552      	lsls	r2, r2, #21
 801493c:	2b00      	cmp	r3, #0
 801493e:	d0fa      	beq.n	8014936 <__ieee754_sqrt+0x152>
 8014940:	02dc      	lsls	r4, r3, #11
 8014942:	d50a      	bpl.n	801495a <__ieee754_sqrt+0x176>
 8014944:	f1c1 0420 	rsb	r4, r1, #32
 8014948:	fa22 f404 	lsr.w	r4, r2, r4
 801494c:	1e4d      	subs	r5, r1, #1
 801494e:	408a      	lsls	r2, r1
 8014950:	4323      	orrs	r3, r4
 8014952:	1b41      	subs	r1, r0, r5
 8014954:	e772      	b.n	801483c <__ieee754_sqrt+0x58>
 8014956:	4608      	mov	r0, r1
 8014958:	e7f0      	b.n	801493c <__ieee754_sqrt+0x158>
 801495a:	005b      	lsls	r3, r3, #1
 801495c:	3101      	adds	r1, #1
 801495e:	e7ef      	b.n	8014940 <__ieee754_sqrt+0x15c>
 8014960:	46e0      	mov	r8, ip
 8014962:	e7aa      	b.n	80148ba <__ieee754_sqrt+0xd6>
 8014964:	f7eb fcba 	bl	80002dc <__adddf3>
 8014968:	e9da 8900 	ldrd	r8, r9, [sl]
 801496c:	4602      	mov	r2, r0
 801496e:	460b      	mov	r3, r1
 8014970:	4640      	mov	r0, r8
 8014972:	4649      	mov	r1, r9
 8014974:	f7ec f8da 	bl	8000b2c <__aeabi_dcmplt>
 8014978:	b120      	cbz	r0, 8014984 <__ieee754_sqrt+0x1a0>
 801497a:	1ca0      	adds	r0, r4, #2
 801497c:	bf08      	it	eq
 801497e:	3501      	addeq	r5, #1
 8014980:	3402      	adds	r4, #2
 8014982:	e7ca      	b.n	801491a <__ieee754_sqrt+0x136>
 8014984:	3401      	adds	r4, #1
 8014986:	f024 0401 	bic.w	r4, r4, #1
 801498a:	e7c6      	b.n	801491a <__ieee754_sqrt+0x136>
 801498c:	7ff00000 	.word	0x7ff00000
 8014990:	200001e0 	.word	0x200001e0
 8014994:	200001e8 	.word	0x200001e8

08014998 <__ieee754_pow>:
 8014998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801499c:	ed2d 8b06 	vpush	{d8-d10}
 80149a0:	b089      	sub	sp, #36	; 0x24
 80149a2:	ed8d 1b00 	vstr	d1, [sp]
 80149a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80149aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80149ae:	ea58 0102 	orrs.w	r1, r8, r2
 80149b2:	ec57 6b10 	vmov	r6, r7, d0
 80149b6:	d115      	bne.n	80149e4 <__ieee754_pow+0x4c>
 80149b8:	19b3      	adds	r3, r6, r6
 80149ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80149be:	4152      	adcs	r2, r2
 80149c0:	4299      	cmp	r1, r3
 80149c2:	4b89      	ldr	r3, [pc, #548]	; (8014be8 <__ieee754_pow+0x250>)
 80149c4:	4193      	sbcs	r3, r2
 80149c6:	f080 84d1 	bcs.w	801536c <__ieee754_pow+0x9d4>
 80149ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149ce:	4630      	mov	r0, r6
 80149d0:	4639      	mov	r1, r7
 80149d2:	f7eb fc83 	bl	80002dc <__adddf3>
 80149d6:	ec41 0b10 	vmov	d0, r0, r1
 80149da:	b009      	add	sp, #36	; 0x24
 80149dc:	ecbd 8b06 	vpop	{d8-d10}
 80149e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e4:	4b81      	ldr	r3, [pc, #516]	; (8014bec <__ieee754_pow+0x254>)
 80149e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80149ea:	429c      	cmp	r4, r3
 80149ec:	ee10 aa10 	vmov	sl, s0
 80149f0:	463d      	mov	r5, r7
 80149f2:	dc06      	bgt.n	8014a02 <__ieee754_pow+0x6a>
 80149f4:	d101      	bne.n	80149fa <__ieee754_pow+0x62>
 80149f6:	2e00      	cmp	r6, #0
 80149f8:	d1e7      	bne.n	80149ca <__ieee754_pow+0x32>
 80149fa:	4598      	cmp	r8, r3
 80149fc:	dc01      	bgt.n	8014a02 <__ieee754_pow+0x6a>
 80149fe:	d10f      	bne.n	8014a20 <__ieee754_pow+0x88>
 8014a00:	b172      	cbz	r2, 8014a20 <__ieee754_pow+0x88>
 8014a02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8014a06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8014a0a:	ea55 050a 	orrs.w	r5, r5, sl
 8014a0e:	d1dc      	bne.n	80149ca <__ieee754_pow+0x32>
 8014a10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014a14:	18db      	adds	r3, r3, r3
 8014a16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8014a1a:	4152      	adcs	r2, r2
 8014a1c:	429d      	cmp	r5, r3
 8014a1e:	e7d0      	b.n	80149c2 <__ieee754_pow+0x2a>
 8014a20:	2d00      	cmp	r5, #0
 8014a22:	da3b      	bge.n	8014a9c <__ieee754_pow+0x104>
 8014a24:	4b72      	ldr	r3, [pc, #456]	; (8014bf0 <__ieee754_pow+0x258>)
 8014a26:	4598      	cmp	r8, r3
 8014a28:	dc51      	bgt.n	8014ace <__ieee754_pow+0x136>
 8014a2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014a2e:	4598      	cmp	r8, r3
 8014a30:	f340 84ab 	ble.w	801538a <__ieee754_pow+0x9f2>
 8014a34:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014a38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014a3c:	2b14      	cmp	r3, #20
 8014a3e:	dd0f      	ble.n	8014a60 <__ieee754_pow+0xc8>
 8014a40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014a44:	fa22 f103 	lsr.w	r1, r2, r3
 8014a48:	fa01 f303 	lsl.w	r3, r1, r3
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	f040 849c 	bne.w	801538a <__ieee754_pow+0x9f2>
 8014a52:	f001 0101 	and.w	r1, r1, #1
 8014a56:	f1c1 0302 	rsb	r3, r1, #2
 8014a5a:	9304      	str	r3, [sp, #16]
 8014a5c:	b182      	cbz	r2, 8014a80 <__ieee754_pow+0xe8>
 8014a5e:	e05f      	b.n	8014b20 <__ieee754_pow+0x188>
 8014a60:	2a00      	cmp	r2, #0
 8014a62:	d15b      	bne.n	8014b1c <__ieee754_pow+0x184>
 8014a64:	f1c3 0314 	rsb	r3, r3, #20
 8014a68:	fa48 f103 	asr.w	r1, r8, r3
 8014a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8014a70:	4543      	cmp	r3, r8
 8014a72:	f040 8487 	bne.w	8015384 <__ieee754_pow+0x9ec>
 8014a76:	f001 0101 	and.w	r1, r1, #1
 8014a7a:	f1c1 0302 	rsb	r3, r1, #2
 8014a7e:	9304      	str	r3, [sp, #16]
 8014a80:	4b5c      	ldr	r3, [pc, #368]	; (8014bf4 <__ieee754_pow+0x25c>)
 8014a82:	4598      	cmp	r8, r3
 8014a84:	d132      	bne.n	8014aec <__ieee754_pow+0x154>
 8014a86:	f1b9 0f00 	cmp.w	r9, #0
 8014a8a:	f280 8477 	bge.w	801537c <__ieee754_pow+0x9e4>
 8014a8e:	4959      	ldr	r1, [pc, #356]	; (8014bf4 <__ieee754_pow+0x25c>)
 8014a90:	4632      	mov	r2, r6
 8014a92:	463b      	mov	r3, r7
 8014a94:	2000      	movs	r0, #0
 8014a96:	f7eb ff01 	bl	800089c <__aeabi_ddiv>
 8014a9a:	e79c      	b.n	80149d6 <__ieee754_pow+0x3e>
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	9304      	str	r3, [sp, #16]
 8014aa0:	2a00      	cmp	r2, #0
 8014aa2:	d13d      	bne.n	8014b20 <__ieee754_pow+0x188>
 8014aa4:	4b51      	ldr	r3, [pc, #324]	; (8014bec <__ieee754_pow+0x254>)
 8014aa6:	4598      	cmp	r8, r3
 8014aa8:	d1ea      	bne.n	8014a80 <__ieee754_pow+0xe8>
 8014aaa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014aae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014ab2:	ea53 030a 	orrs.w	r3, r3, sl
 8014ab6:	f000 8459 	beq.w	801536c <__ieee754_pow+0x9d4>
 8014aba:	4b4f      	ldr	r3, [pc, #316]	; (8014bf8 <__ieee754_pow+0x260>)
 8014abc:	429c      	cmp	r4, r3
 8014abe:	dd08      	ble.n	8014ad2 <__ieee754_pow+0x13a>
 8014ac0:	f1b9 0f00 	cmp.w	r9, #0
 8014ac4:	f2c0 8456 	blt.w	8015374 <__ieee754_pow+0x9dc>
 8014ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014acc:	e783      	b.n	80149d6 <__ieee754_pow+0x3e>
 8014ace:	2302      	movs	r3, #2
 8014ad0:	e7e5      	b.n	8014a9e <__ieee754_pow+0x106>
 8014ad2:	f1b9 0f00 	cmp.w	r9, #0
 8014ad6:	f04f 0000 	mov.w	r0, #0
 8014ada:	f04f 0100 	mov.w	r1, #0
 8014ade:	f6bf af7a 	bge.w	80149d6 <__ieee754_pow+0x3e>
 8014ae2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014ae6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014aea:	e774      	b.n	80149d6 <__ieee754_pow+0x3e>
 8014aec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014af0:	d106      	bne.n	8014b00 <__ieee754_pow+0x168>
 8014af2:	4632      	mov	r2, r6
 8014af4:	463b      	mov	r3, r7
 8014af6:	4630      	mov	r0, r6
 8014af8:	4639      	mov	r1, r7
 8014afa:	f7eb fda5 	bl	8000648 <__aeabi_dmul>
 8014afe:	e76a      	b.n	80149d6 <__ieee754_pow+0x3e>
 8014b00:	4b3e      	ldr	r3, [pc, #248]	; (8014bfc <__ieee754_pow+0x264>)
 8014b02:	4599      	cmp	r9, r3
 8014b04:	d10c      	bne.n	8014b20 <__ieee754_pow+0x188>
 8014b06:	2d00      	cmp	r5, #0
 8014b08:	db0a      	blt.n	8014b20 <__ieee754_pow+0x188>
 8014b0a:	ec47 6b10 	vmov	d0, r6, r7
 8014b0e:	b009      	add	sp, #36	; 0x24
 8014b10:	ecbd 8b06 	vpop	{d8-d10}
 8014b14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b18:	f7ff be64 	b.w	80147e4 <__ieee754_sqrt>
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	9304      	str	r3, [sp, #16]
 8014b20:	ec47 6b10 	vmov	d0, r6, r7
 8014b24:	f000 fc62 	bl	80153ec <fabs>
 8014b28:	ec51 0b10 	vmov	r0, r1, d0
 8014b2c:	f1ba 0f00 	cmp.w	sl, #0
 8014b30:	d129      	bne.n	8014b86 <__ieee754_pow+0x1ee>
 8014b32:	b124      	cbz	r4, 8014b3e <__ieee754_pow+0x1a6>
 8014b34:	4b2f      	ldr	r3, [pc, #188]	; (8014bf4 <__ieee754_pow+0x25c>)
 8014b36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d123      	bne.n	8014b86 <__ieee754_pow+0x1ee>
 8014b3e:	f1b9 0f00 	cmp.w	r9, #0
 8014b42:	da05      	bge.n	8014b50 <__ieee754_pow+0x1b8>
 8014b44:	4602      	mov	r2, r0
 8014b46:	460b      	mov	r3, r1
 8014b48:	2000      	movs	r0, #0
 8014b4a:	492a      	ldr	r1, [pc, #168]	; (8014bf4 <__ieee754_pow+0x25c>)
 8014b4c:	f7eb fea6 	bl	800089c <__aeabi_ddiv>
 8014b50:	2d00      	cmp	r5, #0
 8014b52:	f6bf af40 	bge.w	80149d6 <__ieee754_pow+0x3e>
 8014b56:	9b04      	ldr	r3, [sp, #16]
 8014b58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014b5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014b60:	431c      	orrs	r4, r3
 8014b62:	d108      	bne.n	8014b76 <__ieee754_pow+0x1de>
 8014b64:	4602      	mov	r2, r0
 8014b66:	460b      	mov	r3, r1
 8014b68:	4610      	mov	r0, r2
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	f7eb fbb4 	bl	80002d8 <__aeabi_dsub>
 8014b70:	4602      	mov	r2, r0
 8014b72:	460b      	mov	r3, r1
 8014b74:	e78f      	b.n	8014a96 <__ieee754_pow+0xfe>
 8014b76:	9b04      	ldr	r3, [sp, #16]
 8014b78:	2b01      	cmp	r3, #1
 8014b7a:	f47f af2c 	bne.w	80149d6 <__ieee754_pow+0x3e>
 8014b7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b82:	4619      	mov	r1, r3
 8014b84:	e727      	b.n	80149d6 <__ieee754_pow+0x3e>
 8014b86:	0feb      	lsrs	r3, r5, #31
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	9306      	str	r3, [sp, #24]
 8014b8c:	9a06      	ldr	r2, [sp, #24]
 8014b8e:	9b04      	ldr	r3, [sp, #16]
 8014b90:	4313      	orrs	r3, r2
 8014b92:	d102      	bne.n	8014b9a <__ieee754_pow+0x202>
 8014b94:	4632      	mov	r2, r6
 8014b96:	463b      	mov	r3, r7
 8014b98:	e7e6      	b.n	8014b68 <__ieee754_pow+0x1d0>
 8014b9a:	4b19      	ldr	r3, [pc, #100]	; (8014c00 <__ieee754_pow+0x268>)
 8014b9c:	4598      	cmp	r8, r3
 8014b9e:	f340 80fb 	ble.w	8014d98 <__ieee754_pow+0x400>
 8014ba2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014ba6:	4598      	cmp	r8, r3
 8014ba8:	4b13      	ldr	r3, [pc, #76]	; (8014bf8 <__ieee754_pow+0x260>)
 8014baa:	dd0c      	ble.n	8014bc6 <__ieee754_pow+0x22e>
 8014bac:	429c      	cmp	r4, r3
 8014bae:	dc0f      	bgt.n	8014bd0 <__ieee754_pow+0x238>
 8014bb0:	f1b9 0f00 	cmp.w	r9, #0
 8014bb4:	da0f      	bge.n	8014bd6 <__ieee754_pow+0x23e>
 8014bb6:	2000      	movs	r0, #0
 8014bb8:	b009      	add	sp, #36	; 0x24
 8014bba:	ecbd 8b06 	vpop	{d8-d10}
 8014bbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc2:	f000 be3e 	b.w	8015842 <__math_oflow>
 8014bc6:	429c      	cmp	r4, r3
 8014bc8:	dbf2      	blt.n	8014bb0 <__ieee754_pow+0x218>
 8014bca:	4b0a      	ldr	r3, [pc, #40]	; (8014bf4 <__ieee754_pow+0x25c>)
 8014bcc:	429c      	cmp	r4, r3
 8014bce:	dd19      	ble.n	8014c04 <__ieee754_pow+0x26c>
 8014bd0:	f1b9 0f00 	cmp.w	r9, #0
 8014bd4:	dcef      	bgt.n	8014bb6 <__ieee754_pow+0x21e>
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	b009      	add	sp, #36	; 0x24
 8014bda:	ecbd 8b06 	vpop	{d8-d10}
 8014bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be2:	f000 be25 	b.w	8015830 <__math_uflow>
 8014be6:	bf00      	nop
 8014be8:	fff00000 	.word	0xfff00000
 8014bec:	7ff00000 	.word	0x7ff00000
 8014bf0:	433fffff 	.word	0x433fffff
 8014bf4:	3ff00000 	.word	0x3ff00000
 8014bf8:	3fefffff 	.word	0x3fefffff
 8014bfc:	3fe00000 	.word	0x3fe00000
 8014c00:	41e00000 	.word	0x41e00000
 8014c04:	4b60      	ldr	r3, [pc, #384]	; (8014d88 <__ieee754_pow+0x3f0>)
 8014c06:	2200      	movs	r2, #0
 8014c08:	f7eb fb66 	bl	80002d8 <__aeabi_dsub>
 8014c0c:	a354      	add	r3, pc, #336	; (adr r3, 8014d60 <__ieee754_pow+0x3c8>)
 8014c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c12:	4604      	mov	r4, r0
 8014c14:	460d      	mov	r5, r1
 8014c16:	f7eb fd17 	bl	8000648 <__aeabi_dmul>
 8014c1a:	a353      	add	r3, pc, #332	; (adr r3, 8014d68 <__ieee754_pow+0x3d0>)
 8014c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c20:	4606      	mov	r6, r0
 8014c22:	460f      	mov	r7, r1
 8014c24:	4620      	mov	r0, r4
 8014c26:	4629      	mov	r1, r5
 8014c28:	f7eb fd0e 	bl	8000648 <__aeabi_dmul>
 8014c2c:	4b57      	ldr	r3, [pc, #348]	; (8014d8c <__ieee754_pow+0x3f4>)
 8014c2e:	4682      	mov	sl, r0
 8014c30:	468b      	mov	fp, r1
 8014c32:	2200      	movs	r2, #0
 8014c34:	4620      	mov	r0, r4
 8014c36:	4629      	mov	r1, r5
 8014c38:	f7eb fd06 	bl	8000648 <__aeabi_dmul>
 8014c3c:	4602      	mov	r2, r0
 8014c3e:	460b      	mov	r3, r1
 8014c40:	a14b      	add	r1, pc, #300	; (adr r1, 8014d70 <__ieee754_pow+0x3d8>)
 8014c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c46:	f7eb fb47 	bl	80002d8 <__aeabi_dsub>
 8014c4a:	4622      	mov	r2, r4
 8014c4c:	462b      	mov	r3, r5
 8014c4e:	f7eb fcfb 	bl	8000648 <__aeabi_dmul>
 8014c52:	4602      	mov	r2, r0
 8014c54:	460b      	mov	r3, r1
 8014c56:	2000      	movs	r0, #0
 8014c58:	494d      	ldr	r1, [pc, #308]	; (8014d90 <__ieee754_pow+0x3f8>)
 8014c5a:	f7eb fb3d 	bl	80002d8 <__aeabi_dsub>
 8014c5e:	4622      	mov	r2, r4
 8014c60:	4680      	mov	r8, r0
 8014c62:	4689      	mov	r9, r1
 8014c64:	462b      	mov	r3, r5
 8014c66:	4620      	mov	r0, r4
 8014c68:	4629      	mov	r1, r5
 8014c6a:	f7eb fced 	bl	8000648 <__aeabi_dmul>
 8014c6e:	4602      	mov	r2, r0
 8014c70:	460b      	mov	r3, r1
 8014c72:	4640      	mov	r0, r8
 8014c74:	4649      	mov	r1, r9
 8014c76:	f7eb fce7 	bl	8000648 <__aeabi_dmul>
 8014c7a:	a33f      	add	r3, pc, #252	; (adr r3, 8014d78 <__ieee754_pow+0x3e0>)
 8014c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c80:	f7eb fce2 	bl	8000648 <__aeabi_dmul>
 8014c84:	4602      	mov	r2, r0
 8014c86:	460b      	mov	r3, r1
 8014c88:	4650      	mov	r0, sl
 8014c8a:	4659      	mov	r1, fp
 8014c8c:	f7eb fb24 	bl	80002d8 <__aeabi_dsub>
 8014c90:	4602      	mov	r2, r0
 8014c92:	460b      	mov	r3, r1
 8014c94:	4680      	mov	r8, r0
 8014c96:	4689      	mov	r9, r1
 8014c98:	4630      	mov	r0, r6
 8014c9a:	4639      	mov	r1, r7
 8014c9c:	f7eb fb1e 	bl	80002dc <__adddf3>
 8014ca0:	2000      	movs	r0, #0
 8014ca2:	4632      	mov	r2, r6
 8014ca4:	463b      	mov	r3, r7
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	460d      	mov	r5, r1
 8014caa:	f7eb fb15 	bl	80002d8 <__aeabi_dsub>
 8014cae:	4602      	mov	r2, r0
 8014cb0:	460b      	mov	r3, r1
 8014cb2:	4640      	mov	r0, r8
 8014cb4:	4649      	mov	r1, r9
 8014cb6:	f7eb fb0f 	bl	80002d8 <__aeabi_dsub>
 8014cba:	9b04      	ldr	r3, [sp, #16]
 8014cbc:	9a06      	ldr	r2, [sp, #24]
 8014cbe:	3b01      	subs	r3, #1
 8014cc0:	4313      	orrs	r3, r2
 8014cc2:	4682      	mov	sl, r0
 8014cc4:	468b      	mov	fp, r1
 8014cc6:	f040 81e7 	bne.w	8015098 <__ieee754_pow+0x700>
 8014cca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8014d80 <__ieee754_pow+0x3e8>
 8014cce:	eeb0 8a47 	vmov.f32	s16, s14
 8014cd2:	eef0 8a67 	vmov.f32	s17, s15
 8014cd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014cda:	2600      	movs	r6, #0
 8014cdc:	4632      	mov	r2, r6
 8014cde:	463b      	mov	r3, r7
 8014ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ce4:	f7eb faf8 	bl	80002d8 <__aeabi_dsub>
 8014ce8:	4622      	mov	r2, r4
 8014cea:	462b      	mov	r3, r5
 8014cec:	f7eb fcac 	bl	8000648 <__aeabi_dmul>
 8014cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cf4:	4680      	mov	r8, r0
 8014cf6:	4689      	mov	r9, r1
 8014cf8:	4650      	mov	r0, sl
 8014cfa:	4659      	mov	r1, fp
 8014cfc:	f7eb fca4 	bl	8000648 <__aeabi_dmul>
 8014d00:	4602      	mov	r2, r0
 8014d02:	460b      	mov	r3, r1
 8014d04:	4640      	mov	r0, r8
 8014d06:	4649      	mov	r1, r9
 8014d08:	f7eb fae8 	bl	80002dc <__adddf3>
 8014d0c:	4632      	mov	r2, r6
 8014d0e:	463b      	mov	r3, r7
 8014d10:	4680      	mov	r8, r0
 8014d12:	4689      	mov	r9, r1
 8014d14:	4620      	mov	r0, r4
 8014d16:	4629      	mov	r1, r5
 8014d18:	f7eb fc96 	bl	8000648 <__aeabi_dmul>
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	4604      	mov	r4, r0
 8014d20:	460d      	mov	r5, r1
 8014d22:	4602      	mov	r2, r0
 8014d24:	4649      	mov	r1, r9
 8014d26:	4640      	mov	r0, r8
 8014d28:	f7eb fad8 	bl	80002dc <__adddf3>
 8014d2c:	4b19      	ldr	r3, [pc, #100]	; (8014d94 <__ieee754_pow+0x3fc>)
 8014d2e:	4299      	cmp	r1, r3
 8014d30:	ec45 4b19 	vmov	d9, r4, r5
 8014d34:	4606      	mov	r6, r0
 8014d36:	460f      	mov	r7, r1
 8014d38:	468b      	mov	fp, r1
 8014d3a:	f340 82f0 	ble.w	801531e <__ieee754_pow+0x986>
 8014d3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014d42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014d46:	4303      	orrs	r3, r0
 8014d48:	f000 81e4 	beq.w	8015114 <__ieee754_pow+0x77c>
 8014d4c:	ec51 0b18 	vmov	r0, r1, d8
 8014d50:	2200      	movs	r2, #0
 8014d52:	2300      	movs	r3, #0
 8014d54:	f7eb feea 	bl	8000b2c <__aeabi_dcmplt>
 8014d58:	3800      	subs	r0, #0
 8014d5a:	bf18      	it	ne
 8014d5c:	2001      	movne	r0, #1
 8014d5e:	e72b      	b.n	8014bb8 <__ieee754_pow+0x220>
 8014d60:	60000000 	.word	0x60000000
 8014d64:	3ff71547 	.word	0x3ff71547
 8014d68:	f85ddf44 	.word	0xf85ddf44
 8014d6c:	3e54ae0b 	.word	0x3e54ae0b
 8014d70:	55555555 	.word	0x55555555
 8014d74:	3fd55555 	.word	0x3fd55555
 8014d78:	652b82fe 	.word	0x652b82fe
 8014d7c:	3ff71547 	.word	0x3ff71547
 8014d80:	00000000 	.word	0x00000000
 8014d84:	bff00000 	.word	0xbff00000
 8014d88:	3ff00000 	.word	0x3ff00000
 8014d8c:	3fd00000 	.word	0x3fd00000
 8014d90:	3fe00000 	.word	0x3fe00000
 8014d94:	408fffff 	.word	0x408fffff
 8014d98:	4bd5      	ldr	r3, [pc, #852]	; (80150f0 <__ieee754_pow+0x758>)
 8014d9a:	402b      	ands	r3, r5
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	b92b      	cbnz	r3, 8014dac <__ieee754_pow+0x414>
 8014da0:	4bd4      	ldr	r3, [pc, #848]	; (80150f4 <__ieee754_pow+0x75c>)
 8014da2:	f7eb fc51 	bl	8000648 <__aeabi_dmul>
 8014da6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014daa:	460c      	mov	r4, r1
 8014dac:	1523      	asrs	r3, r4, #20
 8014dae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014db2:	4413      	add	r3, r2
 8014db4:	9305      	str	r3, [sp, #20]
 8014db6:	4bd0      	ldr	r3, [pc, #832]	; (80150f8 <__ieee754_pow+0x760>)
 8014db8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014dbc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014dc0:	429c      	cmp	r4, r3
 8014dc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014dc6:	dd08      	ble.n	8014dda <__ieee754_pow+0x442>
 8014dc8:	4bcc      	ldr	r3, [pc, #816]	; (80150fc <__ieee754_pow+0x764>)
 8014dca:	429c      	cmp	r4, r3
 8014dcc:	f340 8162 	ble.w	8015094 <__ieee754_pow+0x6fc>
 8014dd0:	9b05      	ldr	r3, [sp, #20]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	9305      	str	r3, [sp, #20]
 8014dd6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014dda:	2400      	movs	r4, #0
 8014ddc:	00e3      	lsls	r3, r4, #3
 8014dde:	9307      	str	r3, [sp, #28]
 8014de0:	4bc7      	ldr	r3, [pc, #796]	; (8015100 <__ieee754_pow+0x768>)
 8014de2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014de6:	ed93 7b00 	vldr	d7, [r3]
 8014dea:	4629      	mov	r1, r5
 8014dec:	ec53 2b17 	vmov	r2, r3, d7
 8014df0:	eeb0 9a47 	vmov.f32	s18, s14
 8014df4:	eef0 9a67 	vmov.f32	s19, s15
 8014df8:	4682      	mov	sl, r0
 8014dfa:	f7eb fa6d 	bl	80002d8 <__aeabi_dsub>
 8014dfe:	4652      	mov	r2, sl
 8014e00:	4606      	mov	r6, r0
 8014e02:	460f      	mov	r7, r1
 8014e04:	462b      	mov	r3, r5
 8014e06:	ec51 0b19 	vmov	r0, r1, d9
 8014e0a:	f7eb fa67 	bl	80002dc <__adddf3>
 8014e0e:	4602      	mov	r2, r0
 8014e10:	460b      	mov	r3, r1
 8014e12:	2000      	movs	r0, #0
 8014e14:	49bb      	ldr	r1, [pc, #748]	; (8015104 <__ieee754_pow+0x76c>)
 8014e16:	f7eb fd41 	bl	800089c <__aeabi_ddiv>
 8014e1a:	ec41 0b1a 	vmov	d10, r0, r1
 8014e1e:	4602      	mov	r2, r0
 8014e20:	460b      	mov	r3, r1
 8014e22:	4630      	mov	r0, r6
 8014e24:	4639      	mov	r1, r7
 8014e26:	f7eb fc0f 	bl	8000648 <__aeabi_dmul>
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e30:	9302      	str	r3, [sp, #8]
 8014e32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014e36:	46ab      	mov	fp, r5
 8014e38:	106d      	asrs	r5, r5, #1
 8014e3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014e3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014e42:	ec41 0b18 	vmov	d8, r0, r1
 8014e46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	4640      	mov	r0, r8
 8014e4e:	4649      	mov	r1, r9
 8014e50:	4614      	mov	r4, r2
 8014e52:	461d      	mov	r5, r3
 8014e54:	f7eb fbf8 	bl	8000648 <__aeabi_dmul>
 8014e58:	4602      	mov	r2, r0
 8014e5a:	460b      	mov	r3, r1
 8014e5c:	4630      	mov	r0, r6
 8014e5e:	4639      	mov	r1, r7
 8014e60:	f7eb fa3a 	bl	80002d8 <__aeabi_dsub>
 8014e64:	ec53 2b19 	vmov	r2, r3, d9
 8014e68:	4606      	mov	r6, r0
 8014e6a:	460f      	mov	r7, r1
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	4629      	mov	r1, r5
 8014e70:	f7eb fa32 	bl	80002d8 <__aeabi_dsub>
 8014e74:	4602      	mov	r2, r0
 8014e76:	460b      	mov	r3, r1
 8014e78:	4650      	mov	r0, sl
 8014e7a:	4659      	mov	r1, fp
 8014e7c:	f7eb fa2c 	bl	80002d8 <__aeabi_dsub>
 8014e80:	4642      	mov	r2, r8
 8014e82:	464b      	mov	r3, r9
 8014e84:	f7eb fbe0 	bl	8000648 <__aeabi_dmul>
 8014e88:	4602      	mov	r2, r0
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	4630      	mov	r0, r6
 8014e8e:	4639      	mov	r1, r7
 8014e90:	f7eb fa22 	bl	80002d8 <__aeabi_dsub>
 8014e94:	ec53 2b1a 	vmov	r2, r3, d10
 8014e98:	f7eb fbd6 	bl	8000648 <__aeabi_dmul>
 8014e9c:	ec53 2b18 	vmov	r2, r3, d8
 8014ea0:	ec41 0b19 	vmov	d9, r0, r1
 8014ea4:	ec51 0b18 	vmov	r0, r1, d8
 8014ea8:	f7eb fbce 	bl	8000648 <__aeabi_dmul>
 8014eac:	a37c      	add	r3, pc, #496	; (adr r3, 80150a0 <__ieee754_pow+0x708>)
 8014eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	460d      	mov	r5, r1
 8014eb6:	f7eb fbc7 	bl	8000648 <__aeabi_dmul>
 8014eba:	a37b      	add	r3, pc, #492	; (adr r3, 80150a8 <__ieee754_pow+0x710>)
 8014ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec0:	f7eb fa0c 	bl	80002dc <__adddf3>
 8014ec4:	4622      	mov	r2, r4
 8014ec6:	462b      	mov	r3, r5
 8014ec8:	f7eb fbbe 	bl	8000648 <__aeabi_dmul>
 8014ecc:	a378      	add	r3, pc, #480	; (adr r3, 80150b0 <__ieee754_pow+0x718>)
 8014ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed2:	f7eb fa03 	bl	80002dc <__adddf3>
 8014ed6:	4622      	mov	r2, r4
 8014ed8:	462b      	mov	r3, r5
 8014eda:	f7eb fbb5 	bl	8000648 <__aeabi_dmul>
 8014ede:	a376      	add	r3, pc, #472	; (adr r3, 80150b8 <__ieee754_pow+0x720>)
 8014ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee4:	f7eb f9fa 	bl	80002dc <__adddf3>
 8014ee8:	4622      	mov	r2, r4
 8014eea:	462b      	mov	r3, r5
 8014eec:	f7eb fbac 	bl	8000648 <__aeabi_dmul>
 8014ef0:	a373      	add	r3, pc, #460	; (adr r3, 80150c0 <__ieee754_pow+0x728>)
 8014ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ef6:	f7eb f9f1 	bl	80002dc <__adddf3>
 8014efa:	4622      	mov	r2, r4
 8014efc:	462b      	mov	r3, r5
 8014efe:	f7eb fba3 	bl	8000648 <__aeabi_dmul>
 8014f02:	a371      	add	r3, pc, #452	; (adr r3, 80150c8 <__ieee754_pow+0x730>)
 8014f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f08:	f7eb f9e8 	bl	80002dc <__adddf3>
 8014f0c:	4622      	mov	r2, r4
 8014f0e:	4606      	mov	r6, r0
 8014f10:	460f      	mov	r7, r1
 8014f12:	462b      	mov	r3, r5
 8014f14:	4620      	mov	r0, r4
 8014f16:	4629      	mov	r1, r5
 8014f18:	f7eb fb96 	bl	8000648 <__aeabi_dmul>
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	460b      	mov	r3, r1
 8014f20:	4630      	mov	r0, r6
 8014f22:	4639      	mov	r1, r7
 8014f24:	f7eb fb90 	bl	8000648 <__aeabi_dmul>
 8014f28:	4642      	mov	r2, r8
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	460d      	mov	r5, r1
 8014f2e:	464b      	mov	r3, r9
 8014f30:	ec51 0b18 	vmov	r0, r1, d8
 8014f34:	f7eb f9d2 	bl	80002dc <__adddf3>
 8014f38:	ec53 2b19 	vmov	r2, r3, d9
 8014f3c:	f7eb fb84 	bl	8000648 <__aeabi_dmul>
 8014f40:	4622      	mov	r2, r4
 8014f42:	462b      	mov	r3, r5
 8014f44:	f7eb f9ca 	bl	80002dc <__adddf3>
 8014f48:	4642      	mov	r2, r8
 8014f4a:	4682      	mov	sl, r0
 8014f4c:	468b      	mov	fp, r1
 8014f4e:	464b      	mov	r3, r9
 8014f50:	4640      	mov	r0, r8
 8014f52:	4649      	mov	r1, r9
 8014f54:	f7eb fb78 	bl	8000648 <__aeabi_dmul>
 8014f58:	4b6b      	ldr	r3, [pc, #428]	; (8015108 <__ieee754_pow+0x770>)
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	4606      	mov	r6, r0
 8014f5e:	460f      	mov	r7, r1
 8014f60:	f7eb f9bc 	bl	80002dc <__adddf3>
 8014f64:	4652      	mov	r2, sl
 8014f66:	465b      	mov	r3, fp
 8014f68:	f7eb f9b8 	bl	80002dc <__adddf3>
 8014f6c:	2000      	movs	r0, #0
 8014f6e:	4604      	mov	r4, r0
 8014f70:	460d      	mov	r5, r1
 8014f72:	4602      	mov	r2, r0
 8014f74:	460b      	mov	r3, r1
 8014f76:	4640      	mov	r0, r8
 8014f78:	4649      	mov	r1, r9
 8014f7a:	f7eb fb65 	bl	8000648 <__aeabi_dmul>
 8014f7e:	4b62      	ldr	r3, [pc, #392]	; (8015108 <__ieee754_pow+0x770>)
 8014f80:	4680      	mov	r8, r0
 8014f82:	4689      	mov	r9, r1
 8014f84:	2200      	movs	r2, #0
 8014f86:	4620      	mov	r0, r4
 8014f88:	4629      	mov	r1, r5
 8014f8a:	f7eb f9a5 	bl	80002d8 <__aeabi_dsub>
 8014f8e:	4632      	mov	r2, r6
 8014f90:	463b      	mov	r3, r7
 8014f92:	f7eb f9a1 	bl	80002d8 <__aeabi_dsub>
 8014f96:	4602      	mov	r2, r0
 8014f98:	460b      	mov	r3, r1
 8014f9a:	4650      	mov	r0, sl
 8014f9c:	4659      	mov	r1, fp
 8014f9e:	f7eb f99b 	bl	80002d8 <__aeabi_dsub>
 8014fa2:	ec53 2b18 	vmov	r2, r3, d8
 8014fa6:	f7eb fb4f 	bl	8000648 <__aeabi_dmul>
 8014faa:	4622      	mov	r2, r4
 8014fac:	4606      	mov	r6, r0
 8014fae:	460f      	mov	r7, r1
 8014fb0:	462b      	mov	r3, r5
 8014fb2:	ec51 0b19 	vmov	r0, r1, d9
 8014fb6:	f7eb fb47 	bl	8000648 <__aeabi_dmul>
 8014fba:	4602      	mov	r2, r0
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	4630      	mov	r0, r6
 8014fc0:	4639      	mov	r1, r7
 8014fc2:	f7eb f98b 	bl	80002dc <__adddf3>
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	460f      	mov	r7, r1
 8014fca:	4602      	mov	r2, r0
 8014fcc:	460b      	mov	r3, r1
 8014fce:	4640      	mov	r0, r8
 8014fd0:	4649      	mov	r1, r9
 8014fd2:	f7eb f983 	bl	80002dc <__adddf3>
 8014fd6:	a33e      	add	r3, pc, #248	; (adr r3, 80150d0 <__ieee754_pow+0x738>)
 8014fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fdc:	2000      	movs	r0, #0
 8014fde:	4604      	mov	r4, r0
 8014fe0:	460d      	mov	r5, r1
 8014fe2:	f7eb fb31 	bl	8000648 <__aeabi_dmul>
 8014fe6:	4642      	mov	r2, r8
 8014fe8:	ec41 0b18 	vmov	d8, r0, r1
 8014fec:	464b      	mov	r3, r9
 8014fee:	4620      	mov	r0, r4
 8014ff0:	4629      	mov	r1, r5
 8014ff2:	f7eb f971 	bl	80002d8 <__aeabi_dsub>
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	4630      	mov	r0, r6
 8014ffc:	4639      	mov	r1, r7
 8014ffe:	f7eb f96b 	bl	80002d8 <__aeabi_dsub>
 8015002:	a335      	add	r3, pc, #212	; (adr r3, 80150d8 <__ieee754_pow+0x740>)
 8015004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015008:	f7eb fb1e 	bl	8000648 <__aeabi_dmul>
 801500c:	a334      	add	r3, pc, #208	; (adr r3, 80150e0 <__ieee754_pow+0x748>)
 801500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015012:	4606      	mov	r6, r0
 8015014:	460f      	mov	r7, r1
 8015016:	4620      	mov	r0, r4
 8015018:	4629      	mov	r1, r5
 801501a:	f7eb fb15 	bl	8000648 <__aeabi_dmul>
 801501e:	4602      	mov	r2, r0
 8015020:	460b      	mov	r3, r1
 8015022:	4630      	mov	r0, r6
 8015024:	4639      	mov	r1, r7
 8015026:	f7eb f959 	bl	80002dc <__adddf3>
 801502a:	9a07      	ldr	r2, [sp, #28]
 801502c:	4b37      	ldr	r3, [pc, #220]	; (801510c <__ieee754_pow+0x774>)
 801502e:	4413      	add	r3, r2
 8015030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015034:	f7eb f952 	bl	80002dc <__adddf3>
 8015038:	4682      	mov	sl, r0
 801503a:	9805      	ldr	r0, [sp, #20]
 801503c:	468b      	mov	fp, r1
 801503e:	f7eb fa99 	bl	8000574 <__aeabi_i2d>
 8015042:	9a07      	ldr	r2, [sp, #28]
 8015044:	4b32      	ldr	r3, [pc, #200]	; (8015110 <__ieee754_pow+0x778>)
 8015046:	4413      	add	r3, r2
 8015048:	e9d3 8900 	ldrd	r8, r9, [r3]
 801504c:	4606      	mov	r6, r0
 801504e:	460f      	mov	r7, r1
 8015050:	4652      	mov	r2, sl
 8015052:	465b      	mov	r3, fp
 8015054:	ec51 0b18 	vmov	r0, r1, d8
 8015058:	f7eb f940 	bl	80002dc <__adddf3>
 801505c:	4642      	mov	r2, r8
 801505e:	464b      	mov	r3, r9
 8015060:	f7eb f93c 	bl	80002dc <__adddf3>
 8015064:	4632      	mov	r2, r6
 8015066:	463b      	mov	r3, r7
 8015068:	f7eb f938 	bl	80002dc <__adddf3>
 801506c:	2000      	movs	r0, #0
 801506e:	4632      	mov	r2, r6
 8015070:	463b      	mov	r3, r7
 8015072:	4604      	mov	r4, r0
 8015074:	460d      	mov	r5, r1
 8015076:	f7eb f92f 	bl	80002d8 <__aeabi_dsub>
 801507a:	4642      	mov	r2, r8
 801507c:	464b      	mov	r3, r9
 801507e:	f7eb f92b 	bl	80002d8 <__aeabi_dsub>
 8015082:	ec53 2b18 	vmov	r2, r3, d8
 8015086:	f7eb f927 	bl	80002d8 <__aeabi_dsub>
 801508a:	4602      	mov	r2, r0
 801508c:	460b      	mov	r3, r1
 801508e:	4650      	mov	r0, sl
 8015090:	4659      	mov	r1, fp
 8015092:	e610      	b.n	8014cb6 <__ieee754_pow+0x31e>
 8015094:	2401      	movs	r4, #1
 8015096:	e6a1      	b.n	8014ddc <__ieee754_pow+0x444>
 8015098:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80150e8 <__ieee754_pow+0x750>
 801509c:	e617      	b.n	8014cce <__ieee754_pow+0x336>
 801509e:	bf00      	nop
 80150a0:	4a454eef 	.word	0x4a454eef
 80150a4:	3fca7e28 	.word	0x3fca7e28
 80150a8:	93c9db65 	.word	0x93c9db65
 80150ac:	3fcd864a 	.word	0x3fcd864a
 80150b0:	a91d4101 	.word	0xa91d4101
 80150b4:	3fd17460 	.word	0x3fd17460
 80150b8:	518f264d 	.word	0x518f264d
 80150bc:	3fd55555 	.word	0x3fd55555
 80150c0:	db6fabff 	.word	0xdb6fabff
 80150c4:	3fdb6db6 	.word	0x3fdb6db6
 80150c8:	33333303 	.word	0x33333303
 80150cc:	3fe33333 	.word	0x3fe33333
 80150d0:	e0000000 	.word	0xe0000000
 80150d4:	3feec709 	.word	0x3feec709
 80150d8:	dc3a03fd 	.word	0xdc3a03fd
 80150dc:	3feec709 	.word	0x3feec709
 80150e0:	145b01f5 	.word	0x145b01f5
 80150e4:	be3e2fe0 	.word	0xbe3e2fe0
 80150e8:	00000000 	.word	0x00000000
 80150ec:	3ff00000 	.word	0x3ff00000
 80150f0:	7ff00000 	.word	0x7ff00000
 80150f4:	43400000 	.word	0x43400000
 80150f8:	0003988e 	.word	0x0003988e
 80150fc:	000bb679 	.word	0x000bb679
 8015100:	08016160 	.word	0x08016160
 8015104:	3ff00000 	.word	0x3ff00000
 8015108:	40080000 	.word	0x40080000
 801510c:	08016180 	.word	0x08016180
 8015110:	08016170 	.word	0x08016170
 8015114:	a3b3      	add	r3, pc, #716	; (adr r3, 80153e4 <__ieee754_pow+0xa4c>)
 8015116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511a:	4640      	mov	r0, r8
 801511c:	4649      	mov	r1, r9
 801511e:	f7eb f8dd 	bl	80002dc <__adddf3>
 8015122:	4622      	mov	r2, r4
 8015124:	ec41 0b1a 	vmov	d10, r0, r1
 8015128:	462b      	mov	r3, r5
 801512a:	4630      	mov	r0, r6
 801512c:	4639      	mov	r1, r7
 801512e:	f7eb f8d3 	bl	80002d8 <__aeabi_dsub>
 8015132:	4602      	mov	r2, r0
 8015134:	460b      	mov	r3, r1
 8015136:	ec51 0b1a 	vmov	r0, r1, d10
 801513a:	f7eb fd15 	bl	8000b68 <__aeabi_dcmpgt>
 801513e:	2800      	cmp	r0, #0
 8015140:	f47f ae04 	bne.w	8014d4c <__ieee754_pow+0x3b4>
 8015144:	4aa2      	ldr	r2, [pc, #648]	; (80153d0 <__ieee754_pow+0xa38>)
 8015146:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801514a:	4293      	cmp	r3, r2
 801514c:	f340 8107 	ble.w	801535e <__ieee754_pow+0x9c6>
 8015150:	151b      	asrs	r3, r3, #20
 8015152:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015156:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801515a:	fa4a fa03 	asr.w	sl, sl, r3
 801515e:	44da      	add	sl, fp
 8015160:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8015164:	489b      	ldr	r0, [pc, #620]	; (80153d4 <__ieee754_pow+0xa3c>)
 8015166:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801516a:	4108      	asrs	r0, r1
 801516c:	ea00 030a 	and.w	r3, r0, sl
 8015170:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8015174:	f1c1 0114 	rsb	r1, r1, #20
 8015178:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801517c:	fa4a fa01 	asr.w	sl, sl, r1
 8015180:	f1bb 0f00 	cmp.w	fp, #0
 8015184:	f04f 0200 	mov.w	r2, #0
 8015188:	4620      	mov	r0, r4
 801518a:	4629      	mov	r1, r5
 801518c:	bfb8      	it	lt
 801518e:	f1ca 0a00 	rsblt	sl, sl, #0
 8015192:	f7eb f8a1 	bl	80002d8 <__aeabi_dsub>
 8015196:	ec41 0b19 	vmov	d9, r0, r1
 801519a:	4642      	mov	r2, r8
 801519c:	464b      	mov	r3, r9
 801519e:	ec51 0b19 	vmov	r0, r1, d9
 80151a2:	f7eb f89b 	bl	80002dc <__adddf3>
 80151a6:	a37a      	add	r3, pc, #488	; (adr r3, 8015390 <__ieee754_pow+0x9f8>)
 80151a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ac:	2000      	movs	r0, #0
 80151ae:	4604      	mov	r4, r0
 80151b0:	460d      	mov	r5, r1
 80151b2:	f7eb fa49 	bl	8000648 <__aeabi_dmul>
 80151b6:	ec53 2b19 	vmov	r2, r3, d9
 80151ba:	4606      	mov	r6, r0
 80151bc:	460f      	mov	r7, r1
 80151be:	4620      	mov	r0, r4
 80151c0:	4629      	mov	r1, r5
 80151c2:	f7eb f889 	bl	80002d8 <__aeabi_dsub>
 80151c6:	4602      	mov	r2, r0
 80151c8:	460b      	mov	r3, r1
 80151ca:	4640      	mov	r0, r8
 80151cc:	4649      	mov	r1, r9
 80151ce:	f7eb f883 	bl	80002d8 <__aeabi_dsub>
 80151d2:	a371      	add	r3, pc, #452	; (adr r3, 8015398 <__ieee754_pow+0xa00>)
 80151d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d8:	f7eb fa36 	bl	8000648 <__aeabi_dmul>
 80151dc:	a370      	add	r3, pc, #448	; (adr r3, 80153a0 <__ieee754_pow+0xa08>)
 80151de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e2:	4680      	mov	r8, r0
 80151e4:	4689      	mov	r9, r1
 80151e6:	4620      	mov	r0, r4
 80151e8:	4629      	mov	r1, r5
 80151ea:	f7eb fa2d 	bl	8000648 <__aeabi_dmul>
 80151ee:	4602      	mov	r2, r0
 80151f0:	460b      	mov	r3, r1
 80151f2:	4640      	mov	r0, r8
 80151f4:	4649      	mov	r1, r9
 80151f6:	f7eb f871 	bl	80002dc <__adddf3>
 80151fa:	4604      	mov	r4, r0
 80151fc:	460d      	mov	r5, r1
 80151fe:	4602      	mov	r2, r0
 8015200:	460b      	mov	r3, r1
 8015202:	4630      	mov	r0, r6
 8015204:	4639      	mov	r1, r7
 8015206:	f7eb f869 	bl	80002dc <__adddf3>
 801520a:	4632      	mov	r2, r6
 801520c:	463b      	mov	r3, r7
 801520e:	4680      	mov	r8, r0
 8015210:	4689      	mov	r9, r1
 8015212:	f7eb f861 	bl	80002d8 <__aeabi_dsub>
 8015216:	4602      	mov	r2, r0
 8015218:	460b      	mov	r3, r1
 801521a:	4620      	mov	r0, r4
 801521c:	4629      	mov	r1, r5
 801521e:	f7eb f85b 	bl	80002d8 <__aeabi_dsub>
 8015222:	4642      	mov	r2, r8
 8015224:	4606      	mov	r6, r0
 8015226:	460f      	mov	r7, r1
 8015228:	464b      	mov	r3, r9
 801522a:	4640      	mov	r0, r8
 801522c:	4649      	mov	r1, r9
 801522e:	f7eb fa0b 	bl	8000648 <__aeabi_dmul>
 8015232:	a35d      	add	r3, pc, #372	; (adr r3, 80153a8 <__ieee754_pow+0xa10>)
 8015234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015238:	4604      	mov	r4, r0
 801523a:	460d      	mov	r5, r1
 801523c:	f7eb fa04 	bl	8000648 <__aeabi_dmul>
 8015240:	a35b      	add	r3, pc, #364	; (adr r3, 80153b0 <__ieee754_pow+0xa18>)
 8015242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015246:	f7eb f847 	bl	80002d8 <__aeabi_dsub>
 801524a:	4622      	mov	r2, r4
 801524c:	462b      	mov	r3, r5
 801524e:	f7eb f9fb 	bl	8000648 <__aeabi_dmul>
 8015252:	a359      	add	r3, pc, #356	; (adr r3, 80153b8 <__ieee754_pow+0xa20>)
 8015254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015258:	f7eb f840 	bl	80002dc <__adddf3>
 801525c:	4622      	mov	r2, r4
 801525e:	462b      	mov	r3, r5
 8015260:	f7eb f9f2 	bl	8000648 <__aeabi_dmul>
 8015264:	a356      	add	r3, pc, #344	; (adr r3, 80153c0 <__ieee754_pow+0xa28>)
 8015266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526a:	f7eb f835 	bl	80002d8 <__aeabi_dsub>
 801526e:	4622      	mov	r2, r4
 8015270:	462b      	mov	r3, r5
 8015272:	f7eb f9e9 	bl	8000648 <__aeabi_dmul>
 8015276:	a354      	add	r3, pc, #336	; (adr r3, 80153c8 <__ieee754_pow+0xa30>)
 8015278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527c:	f7eb f82e 	bl	80002dc <__adddf3>
 8015280:	4622      	mov	r2, r4
 8015282:	462b      	mov	r3, r5
 8015284:	f7eb f9e0 	bl	8000648 <__aeabi_dmul>
 8015288:	4602      	mov	r2, r0
 801528a:	460b      	mov	r3, r1
 801528c:	4640      	mov	r0, r8
 801528e:	4649      	mov	r1, r9
 8015290:	f7eb f822 	bl	80002d8 <__aeabi_dsub>
 8015294:	4604      	mov	r4, r0
 8015296:	460d      	mov	r5, r1
 8015298:	4602      	mov	r2, r0
 801529a:	460b      	mov	r3, r1
 801529c:	4640      	mov	r0, r8
 801529e:	4649      	mov	r1, r9
 80152a0:	f7eb f9d2 	bl	8000648 <__aeabi_dmul>
 80152a4:	2200      	movs	r2, #0
 80152a6:	ec41 0b19 	vmov	d9, r0, r1
 80152aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80152ae:	4620      	mov	r0, r4
 80152b0:	4629      	mov	r1, r5
 80152b2:	f7eb f811 	bl	80002d8 <__aeabi_dsub>
 80152b6:	4602      	mov	r2, r0
 80152b8:	460b      	mov	r3, r1
 80152ba:	ec51 0b19 	vmov	r0, r1, d9
 80152be:	f7eb faed 	bl	800089c <__aeabi_ddiv>
 80152c2:	4632      	mov	r2, r6
 80152c4:	4604      	mov	r4, r0
 80152c6:	460d      	mov	r5, r1
 80152c8:	463b      	mov	r3, r7
 80152ca:	4640      	mov	r0, r8
 80152cc:	4649      	mov	r1, r9
 80152ce:	f7eb f9bb 	bl	8000648 <__aeabi_dmul>
 80152d2:	4632      	mov	r2, r6
 80152d4:	463b      	mov	r3, r7
 80152d6:	f7eb f801 	bl	80002dc <__adddf3>
 80152da:	4602      	mov	r2, r0
 80152dc:	460b      	mov	r3, r1
 80152de:	4620      	mov	r0, r4
 80152e0:	4629      	mov	r1, r5
 80152e2:	f7ea fff9 	bl	80002d8 <__aeabi_dsub>
 80152e6:	4642      	mov	r2, r8
 80152e8:	464b      	mov	r3, r9
 80152ea:	f7ea fff5 	bl	80002d8 <__aeabi_dsub>
 80152ee:	460b      	mov	r3, r1
 80152f0:	4602      	mov	r2, r0
 80152f2:	4939      	ldr	r1, [pc, #228]	; (80153d8 <__ieee754_pow+0xa40>)
 80152f4:	2000      	movs	r0, #0
 80152f6:	f7ea ffef 	bl	80002d8 <__aeabi_dsub>
 80152fa:	ec41 0b10 	vmov	d0, r0, r1
 80152fe:	ee10 3a90 	vmov	r3, s1
 8015302:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801530a:	da2b      	bge.n	8015364 <__ieee754_pow+0x9cc>
 801530c:	4650      	mov	r0, sl
 801530e:	f000 f9f3 	bl	80156f8 <scalbn>
 8015312:	ec51 0b10 	vmov	r0, r1, d0
 8015316:	ec53 2b18 	vmov	r2, r3, d8
 801531a:	f7ff bbee 	b.w	8014afa <__ieee754_pow+0x162>
 801531e:	4b2f      	ldr	r3, [pc, #188]	; (80153dc <__ieee754_pow+0xa44>)
 8015320:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015324:	429e      	cmp	r6, r3
 8015326:	f77f af0d 	ble.w	8015144 <__ieee754_pow+0x7ac>
 801532a:	4b2d      	ldr	r3, [pc, #180]	; (80153e0 <__ieee754_pow+0xa48>)
 801532c:	440b      	add	r3, r1
 801532e:	4303      	orrs	r3, r0
 8015330:	d009      	beq.n	8015346 <__ieee754_pow+0x9ae>
 8015332:	ec51 0b18 	vmov	r0, r1, d8
 8015336:	2200      	movs	r2, #0
 8015338:	2300      	movs	r3, #0
 801533a:	f7eb fbf7 	bl	8000b2c <__aeabi_dcmplt>
 801533e:	3800      	subs	r0, #0
 8015340:	bf18      	it	ne
 8015342:	2001      	movne	r0, #1
 8015344:	e448      	b.n	8014bd8 <__ieee754_pow+0x240>
 8015346:	4622      	mov	r2, r4
 8015348:	462b      	mov	r3, r5
 801534a:	f7ea ffc5 	bl	80002d8 <__aeabi_dsub>
 801534e:	4642      	mov	r2, r8
 8015350:	464b      	mov	r3, r9
 8015352:	f7eb fbff 	bl	8000b54 <__aeabi_dcmpge>
 8015356:	2800      	cmp	r0, #0
 8015358:	f43f aef4 	beq.w	8015144 <__ieee754_pow+0x7ac>
 801535c:	e7e9      	b.n	8015332 <__ieee754_pow+0x99a>
 801535e:	f04f 0a00 	mov.w	sl, #0
 8015362:	e71a      	b.n	801519a <__ieee754_pow+0x802>
 8015364:	ec51 0b10 	vmov	r0, r1, d0
 8015368:	4619      	mov	r1, r3
 801536a:	e7d4      	b.n	8015316 <__ieee754_pow+0x97e>
 801536c:	491a      	ldr	r1, [pc, #104]	; (80153d8 <__ieee754_pow+0xa40>)
 801536e:	2000      	movs	r0, #0
 8015370:	f7ff bb31 	b.w	80149d6 <__ieee754_pow+0x3e>
 8015374:	2000      	movs	r0, #0
 8015376:	2100      	movs	r1, #0
 8015378:	f7ff bb2d 	b.w	80149d6 <__ieee754_pow+0x3e>
 801537c:	4630      	mov	r0, r6
 801537e:	4639      	mov	r1, r7
 8015380:	f7ff bb29 	b.w	80149d6 <__ieee754_pow+0x3e>
 8015384:	9204      	str	r2, [sp, #16]
 8015386:	f7ff bb7b 	b.w	8014a80 <__ieee754_pow+0xe8>
 801538a:	2300      	movs	r3, #0
 801538c:	f7ff bb65 	b.w	8014a5a <__ieee754_pow+0xc2>
 8015390:	00000000 	.word	0x00000000
 8015394:	3fe62e43 	.word	0x3fe62e43
 8015398:	fefa39ef 	.word	0xfefa39ef
 801539c:	3fe62e42 	.word	0x3fe62e42
 80153a0:	0ca86c39 	.word	0x0ca86c39
 80153a4:	be205c61 	.word	0xbe205c61
 80153a8:	72bea4d0 	.word	0x72bea4d0
 80153ac:	3e663769 	.word	0x3e663769
 80153b0:	c5d26bf1 	.word	0xc5d26bf1
 80153b4:	3ebbbd41 	.word	0x3ebbbd41
 80153b8:	af25de2c 	.word	0xaf25de2c
 80153bc:	3f11566a 	.word	0x3f11566a
 80153c0:	16bebd93 	.word	0x16bebd93
 80153c4:	3f66c16c 	.word	0x3f66c16c
 80153c8:	5555553e 	.word	0x5555553e
 80153cc:	3fc55555 	.word	0x3fc55555
 80153d0:	3fe00000 	.word	0x3fe00000
 80153d4:	fff00000 	.word	0xfff00000
 80153d8:	3ff00000 	.word	0x3ff00000
 80153dc:	4090cbff 	.word	0x4090cbff
 80153e0:	3f6f3400 	.word	0x3f6f3400
 80153e4:	652b82fe 	.word	0x652b82fe
 80153e8:	3c971547 	.word	0x3c971547

080153ec <fabs>:
 80153ec:	ec51 0b10 	vmov	r0, r1, d0
 80153f0:	ee10 2a10 	vmov	r2, s0
 80153f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80153f8:	ec43 2b10 	vmov	d0, r2, r3
 80153fc:	4770      	bx	lr
	...

08015400 <__ieee754_atan2f>:
 8015400:	ee10 2a90 	vmov	r2, s1
 8015404:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015408:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801540c:	b510      	push	{r4, lr}
 801540e:	eef0 7a40 	vmov.f32	s15, s0
 8015412:	dc06      	bgt.n	8015422 <__ieee754_atan2f+0x22>
 8015414:	ee10 0a10 	vmov	r0, s0
 8015418:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801541c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015420:	dd04      	ble.n	801542c <__ieee754_atan2f+0x2c>
 8015422:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015426:	eeb0 0a67 	vmov.f32	s0, s15
 801542a:	bd10      	pop	{r4, pc}
 801542c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015430:	d103      	bne.n	801543a <__ieee754_atan2f+0x3a>
 8015432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015436:	f000 b883 	b.w	8015540 <atanf>
 801543a:	1794      	asrs	r4, r2, #30
 801543c:	f004 0402 	and.w	r4, r4, #2
 8015440:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015444:	b943      	cbnz	r3, 8015458 <__ieee754_atan2f+0x58>
 8015446:	2c02      	cmp	r4, #2
 8015448:	d05e      	beq.n	8015508 <__ieee754_atan2f+0x108>
 801544a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801551c <__ieee754_atan2f+0x11c>
 801544e:	2c03      	cmp	r4, #3
 8015450:	bf08      	it	eq
 8015452:	eef0 7a47 	vmoveq.f32	s15, s14
 8015456:	e7e6      	b.n	8015426 <__ieee754_atan2f+0x26>
 8015458:	b941      	cbnz	r1, 801546c <__ieee754_atan2f+0x6c>
 801545a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015520 <__ieee754_atan2f+0x120>
 801545e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015524 <__ieee754_atan2f+0x124>
 8015462:	2800      	cmp	r0, #0
 8015464:	bfb8      	it	lt
 8015466:	eef0 7a47 	vmovlt.f32	s15, s14
 801546a:	e7dc      	b.n	8015426 <__ieee754_atan2f+0x26>
 801546c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015470:	d110      	bne.n	8015494 <__ieee754_atan2f+0x94>
 8015472:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015476:	f104 34ff 	add.w	r4, r4, #4294967295
 801547a:	d107      	bne.n	801548c <__ieee754_atan2f+0x8c>
 801547c:	2c02      	cmp	r4, #2
 801547e:	d846      	bhi.n	801550e <__ieee754_atan2f+0x10e>
 8015480:	4b29      	ldr	r3, [pc, #164]	; (8015528 <__ieee754_atan2f+0x128>)
 8015482:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015486:	edd3 7a00 	vldr	s15, [r3]
 801548a:	e7cc      	b.n	8015426 <__ieee754_atan2f+0x26>
 801548c:	2c02      	cmp	r4, #2
 801548e:	d841      	bhi.n	8015514 <__ieee754_atan2f+0x114>
 8015490:	4b26      	ldr	r3, [pc, #152]	; (801552c <__ieee754_atan2f+0x12c>)
 8015492:	e7f6      	b.n	8015482 <__ieee754_atan2f+0x82>
 8015494:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015498:	d0df      	beq.n	801545a <__ieee754_atan2f+0x5a>
 801549a:	1a5b      	subs	r3, r3, r1
 801549c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80154a0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80154a4:	da1a      	bge.n	80154dc <__ieee754_atan2f+0xdc>
 80154a6:	2a00      	cmp	r2, #0
 80154a8:	da01      	bge.n	80154ae <__ieee754_atan2f+0xae>
 80154aa:	313c      	adds	r1, #60	; 0x3c
 80154ac:	db19      	blt.n	80154e2 <__ieee754_atan2f+0xe2>
 80154ae:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80154b2:	f000 f919 	bl	80156e8 <fabsf>
 80154b6:	f000 f843 	bl	8015540 <atanf>
 80154ba:	eef0 7a40 	vmov.f32	s15, s0
 80154be:	2c01      	cmp	r4, #1
 80154c0:	d012      	beq.n	80154e8 <__ieee754_atan2f+0xe8>
 80154c2:	2c02      	cmp	r4, #2
 80154c4:	d017      	beq.n	80154f6 <__ieee754_atan2f+0xf6>
 80154c6:	2c00      	cmp	r4, #0
 80154c8:	d0ad      	beq.n	8015426 <__ieee754_atan2f+0x26>
 80154ca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8015530 <__ieee754_atan2f+0x130>
 80154ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80154d2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8015534 <__ieee754_atan2f+0x134>
 80154d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80154da:	e7a4      	b.n	8015426 <__ieee754_atan2f+0x26>
 80154dc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015520 <__ieee754_atan2f+0x120>
 80154e0:	e7ed      	b.n	80154be <__ieee754_atan2f+0xbe>
 80154e2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015538 <__ieee754_atan2f+0x138>
 80154e6:	e7ea      	b.n	80154be <__ieee754_atan2f+0xbe>
 80154e8:	ee17 3a90 	vmov	r3, s15
 80154ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80154f0:	ee07 3a90 	vmov	s15, r3
 80154f4:	e797      	b.n	8015426 <__ieee754_atan2f+0x26>
 80154f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8015530 <__ieee754_atan2f+0x130>
 80154fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80154fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8015534 <__ieee754_atan2f+0x134>
 8015502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015506:	e78e      	b.n	8015426 <__ieee754_atan2f+0x26>
 8015508:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015534 <__ieee754_atan2f+0x134>
 801550c:	e78b      	b.n	8015426 <__ieee754_atan2f+0x26>
 801550e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801553c <__ieee754_atan2f+0x13c>
 8015512:	e788      	b.n	8015426 <__ieee754_atan2f+0x26>
 8015514:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015538 <__ieee754_atan2f+0x138>
 8015518:	e785      	b.n	8015426 <__ieee754_atan2f+0x26>
 801551a:	bf00      	nop
 801551c:	c0490fdb 	.word	0xc0490fdb
 8015520:	3fc90fdb 	.word	0x3fc90fdb
 8015524:	bfc90fdb 	.word	0xbfc90fdb
 8015528:	08016190 	.word	0x08016190
 801552c:	0801619c 	.word	0x0801619c
 8015530:	33bbbd2e 	.word	0x33bbbd2e
 8015534:	40490fdb 	.word	0x40490fdb
 8015538:	00000000 	.word	0x00000000
 801553c:	3f490fdb 	.word	0x3f490fdb

08015540 <atanf>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	ee10 5a10 	vmov	r5, s0
 8015546:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801554a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801554e:	eef0 7a40 	vmov.f32	s15, s0
 8015552:	db10      	blt.n	8015576 <atanf+0x36>
 8015554:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015558:	dd04      	ble.n	8015564 <atanf+0x24>
 801555a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801555e:	eeb0 0a67 	vmov.f32	s0, s15
 8015562:	bd38      	pop	{r3, r4, r5, pc}
 8015564:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801569c <atanf+0x15c>
 8015568:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80156a0 <atanf+0x160>
 801556c:	2d00      	cmp	r5, #0
 801556e:	bfd8      	it	le
 8015570:	eef0 7a47 	vmovle.f32	s15, s14
 8015574:	e7f3      	b.n	801555e <atanf+0x1e>
 8015576:	4b4b      	ldr	r3, [pc, #300]	; (80156a4 <atanf+0x164>)
 8015578:	429c      	cmp	r4, r3
 801557a:	dc10      	bgt.n	801559e <atanf+0x5e>
 801557c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015580:	da0a      	bge.n	8015598 <atanf+0x58>
 8015582:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80156a8 <atanf+0x168>
 8015586:	ee30 7a07 	vadd.f32	s14, s0, s14
 801558a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801558e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015596:	dce2      	bgt.n	801555e <atanf+0x1e>
 8015598:	f04f 33ff 	mov.w	r3, #4294967295
 801559c:	e013      	b.n	80155c6 <atanf+0x86>
 801559e:	f000 f8a3 	bl	80156e8 <fabsf>
 80155a2:	4b42      	ldr	r3, [pc, #264]	; (80156ac <atanf+0x16c>)
 80155a4:	429c      	cmp	r4, r3
 80155a6:	dc4f      	bgt.n	8015648 <atanf+0x108>
 80155a8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80155ac:	429c      	cmp	r4, r3
 80155ae:	dc41      	bgt.n	8015634 <atanf+0xf4>
 80155b0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80155b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80155b8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80155bc:	2300      	movs	r3, #0
 80155be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80155c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80155c6:	1c5a      	adds	r2, r3, #1
 80155c8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80155cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80156b0 <atanf+0x170>
 80155d0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80156b4 <atanf+0x174>
 80155d4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80156b8 <atanf+0x178>
 80155d8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80155dc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80155e0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80156bc <atanf+0x17c>
 80155e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80155e8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80156c0 <atanf+0x180>
 80155ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 80155f0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80156c4 <atanf+0x184>
 80155f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80155f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80156c8 <atanf+0x188>
 80155fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015600:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80156cc <atanf+0x18c>
 8015604:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015608:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80156d0 <atanf+0x190>
 801560c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015610:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80156d4 <atanf+0x194>
 8015614:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015618:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80156d8 <atanf+0x198>
 801561c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015620:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015624:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015628:	ee27 7a87 	vmul.f32	s14, s15, s14
 801562c:	d121      	bne.n	8015672 <atanf+0x132>
 801562e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015632:	e794      	b.n	801555e <atanf+0x1e>
 8015634:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015638:	ee30 7a67 	vsub.f32	s14, s0, s15
 801563c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015640:	2301      	movs	r3, #1
 8015642:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015646:	e7be      	b.n	80155c6 <atanf+0x86>
 8015648:	4b24      	ldr	r3, [pc, #144]	; (80156dc <atanf+0x19c>)
 801564a:	429c      	cmp	r4, r3
 801564c:	dc0b      	bgt.n	8015666 <atanf+0x126>
 801564e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8015652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015656:	eea0 7a27 	vfma.f32	s14, s0, s15
 801565a:	2302      	movs	r3, #2
 801565c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015664:	e7af      	b.n	80155c6 <atanf+0x86>
 8015666:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801566a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801566e:	2303      	movs	r3, #3
 8015670:	e7a9      	b.n	80155c6 <atanf+0x86>
 8015672:	4a1b      	ldr	r2, [pc, #108]	; (80156e0 <atanf+0x1a0>)
 8015674:	491b      	ldr	r1, [pc, #108]	; (80156e4 <atanf+0x1a4>)
 8015676:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801567a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801567e:	edd3 6a00 	vldr	s13, [r3]
 8015682:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015686:	2d00      	cmp	r5, #0
 8015688:	ee37 7a67 	vsub.f32	s14, s14, s15
 801568c:	edd2 7a00 	vldr	s15, [r2]
 8015690:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015694:	bfb8      	it	lt
 8015696:	eef1 7a67 	vneglt.f32	s15, s15
 801569a:	e760      	b.n	801555e <atanf+0x1e>
 801569c:	3fc90fdb 	.word	0x3fc90fdb
 80156a0:	bfc90fdb 	.word	0xbfc90fdb
 80156a4:	3edfffff 	.word	0x3edfffff
 80156a8:	7149f2ca 	.word	0x7149f2ca
 80156ac:	3f97ffff 	.word	0x3f97ffff
 80156b0:	3c8569d7 	.word	0x3c8569d7
 80156b4:	3d4bda59 	.word	0x3d4bda59
 80156b8:	bd6ef16b 	.word	0xbd6ef16b
 80156bc:	3d886b35 	.word	0x3d886b35
 80156c0:	3dba2e6e 	.word	0x3dba2e6e
 80156c4:	3e124925 	.word	0x3e124925
 80156c8:	3eaaaaab 	.word	0x3eaaaaab
 80156cc:	bd15a221 	.word	0xbd15a221
 80156d0:	bd9d8795 	.word	0xbd9d8795
 80156d4:	bde38e38 	.word	0xbde38e38
 80156d8:	be4ccccd 	.word	0xbe4ccccd
 80156dc:	401bffff 	.word	0x401bffff
 80156e0:	080161a8 	.word	0x080161a8
 80156e4:	080161b8 	.word	0x080161b8

080156e8 <fabsf>:
 80156e8:	ee10 3a10 	vmov	r3, s0
 80156ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80156f0:	ee00 3a10 	vmov	s0, r3
 80156f4:	4770      	bx	lr
	...

080156f8 <scalbn>:
 80156f8:	b570      	push	{r4, r5, r6, lr}
 80156fa:	ec55 4b10 	vmov	r4, r5, d0
 80156fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015702:	4606      	mov	r6, r0
 8015704:	462b      	mov	r3, r5
 8015706:	b999      	cbnz	r1, 8015730 <scalbn+0x38>
 8015708:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801570c:	4323      	orrs	r3, r4
 801570e:	d03f      	beq.n	8015790 <scalbn+0x98>
 8015710:	4b35      	ldr	r3, [pc, #212]	; (80157e8 <scalbn+0xf0>)
 8015712:	4629      	mov	r1, r5
 8015714:	ee10 0a10 	vmov	r0, s0
 8015718:	2200      	movs	r2, #0
 801571a:	f7ea ff95 	bl	8000648 <__aeabi_dmul>
 801571e:	4b33      	ldr	r3, [pc, #204]	; (80157ec <scalbn+0xf4>)
 8015720:	429e      	cmp	r6, r3
 8015722:	4604      	mov	r4, r0
 8015724:	460d      	mov	r5, r1
 8015726:	da10      	bge.n	801574a <scalbn+0x52>
 8015728:	a327      	add	r3, pc, #156	; (adr r3, 80157c8 <scalbn+0xd0>)
 801572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572e:	e01f      	b.n	8015770 <scalbn+0x78>
 8015730:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8015734:	4291      	cmp	r1, r2
 8015736:	d10c      	bne.n	8015752 <scalbn+0x5a>
 8015738:	ee10 2a10 	vmov	r2, s0
 801573c:	4620      	mov	r0, r4
 801573e:	4629      	mov	r1, r5
 8015740:	f7ea fdcc 	bl	80002dc <__adddf3>
 8015744:	4604      	mov	r4, r0
 8015746:	460d      	mov	r5, r1
 8015748:	e022      	b.n	8015790 <scalbn+0x98>
 801574a:	460b      	mov	r3, r1
 801574c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015750:	3936      	subs	r1, #54	; 0x36
 8015752:	f24c 3250 	movw	r2, #50000	; 0xc350
 8015756:	4296      	cmp	r6, r2
 8015758:	dd0d      	ble.n	8015776 <scalbn+0x7e>
 801575a:	2d00      	cmp	r5, #0
 801575c:	a11c      	add	r1, pc, #112	; (adr r1, 80157d0 <scalbn+0xd8>)
 801575e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015762:	da02      	bge.n	801576a <scalbn+0x72>
 8015764:	a11c      	add	r1, pc, #112	; (adr r1, 80157d8 <scalbn+0xe0>)
 8015766:	e9d1 0100 	ldrd	r0, r1, [r1]
 801576a:	a319      	add	r3, pc, #100	; (adr r3, 80157d0 <scalbn+0xd8>)
 801576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015770:	f7ea ff6a 	bl	8000648 <__aeabi_dmul>
 8015774:	e7e6      	b.n	8015744 <scalbn+0x4c>
 8015776:	1872      	adds	r2, r6, r1
 8015778:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801577c:	428a      	cmp	r2, r1
 801577e:	dcec      	bgt.n	801575a <scalbn+0x62>
 8015780:	2a00      	cmp	r2, #0
 8015782:	dd08      	ble.n	8015796 <scalbn+0x9e>
 8015784:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015788:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801578c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015790:	ec45 4b10 	vmov	d0, r4, r5
 8015794:	bd70      	pop	{r4, r5, r6, pc}
 8015796:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801579a:	da08      	bge.n	80157ae <scalbn+0xb6>
 801579c:	2d00      	cmp	r5, #0
 801579e:	a10a      	add	r1, pc, #40	; (adr r1, 80157c8 <scalbn+0xd0>)
 80157a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157a4:	dac0      	bge.n	8015728 <scalbn+0x30>
 80157a6:	a10e      	add	r1, pc, #56	; (adr r1, 80157e0 <scalbn+0xe8>)
 80157a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157ac:	e7bc      	b.n	8015728 <scalbn+0x30>
 80157ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80157b2:	3236      	adds	r2, #54	; 0x36
 80157b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80157bc:	4620      	mov	r0, r4
 80157be:	4b0c      	ldr	r3, [pc, #48]	; (80157f0 <scalbn+0xf8>)
 80157c0:	2200      	movs	r2, #0
 80157c2:	e7d5      	b.n	8015770 <scalbn+0x78>
 80157c4:	f3af 8000 	nop.w
 80157c8:	c2f8f359 	.word	0xc2f8f359
 80157cc:	01a56e1f 	.word	0x01a56e1f
 80157d0:	8800759c 	.word	0x8800759c
 80157d4:	7e37e43c 	.word	0x7e37e43c
 80157d8:	8800759c 	.word	0x8800759c
 80157dc:	fe37e43c 	.word	0xfe37e43c
 80157e0:	c2f8f359 	.word	0xc2f8f359
 80157e4:	81a56e1f 	.word	0x81a56e1f
 80157e8:	43500000 	.word	0x43500000
 80157ec:	ffff3cb0 	.word	0xffff3cb0
 80157f0:	3c900000 	.word	0x3c900000

080157f4 <with_errno>:
 80157f4:	b570      	push	{r4, r5, r6, lr}
 80157f6:	4604      	mov	r4, r0
 80157f8:	460d      	mov	r5, r1
 80157fa:	4616      	mov	r6, r2
 80157fc:	f7fa ff6a 	bl	80106d4 <__errno>
 8015800:	4629      	mov	r1, r5
 8015802:	6006      	str	r6, [r0, #0]
 8015804:	4620      	mov	r0, r4
 8015806:	bd70      	pop	{r4, r5, r6, pc}

08015808 <xflow>:
 8015808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801580a:	4614      	mov	r4, r2
 801580c:	461d      	mov	r5, r3
 801580e:	b108      	cbz	r0, 8015814 <xflow+0xc>
 8015810:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015814:	e9cd 2300 	strd	r2, r3, [sp]
 8015818:	e9dd 2300 	ldrd	r2, r3, [sp]
 801581c:	4620      	mov	r0, r4
 801581e:	4629      	mov	r1, r5
 8015820:	f7ea ff12 	bl	8000648 <__aeabi_dmul>
 8015824:	2222      	movs	r2, #34	; 0x22
 8015826:	b003      	add	sp, #12
 8015828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801582c:	f7ff bfe2 	b.w	80157f4 <with_errno>

08015830 <__math_uflow>:
 8015830:	b508      	push	{r3, lr}
 8015832:	2200      	movs	r2, #0
 8015834:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015838:	f7ff ffe6 	bl	8015808 <xflow>
 801583c:	ec41 0b10 	vmov	d0, r0, r1
 8015840:	bd08      	pop	{r3, pc}

08015842 <__math_oflow>:
 8015842:	b508      	push	{r3, lr}
 8015844:	2200      	movs	r2, #0
 8015846:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801584a:	f7ff ffdd 	bl	8015808 <xflow>
 801584e:	ec41 0b10 	vmov	d0, r0, r1
 8015852:	bd08      	pop	{r3, pc}

08015854 <_init>:
 8015854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015856:	bf00      	nop
 8015858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801585a:	bc08      	pop	{r3}
 801585c:	469e      	mov	lr, r3
 801585e:	4770      	bx	lr

08015860 <_fini>:
 8015860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015862:	bf00      	nop
 8015864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015866:	bc08      	pop	{r3}
 8015868:	469e      	mov	lr, r3
 801586a:	4770      	bx	lr
