
DroneFW_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  08015288  08015288  00025288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015bc8  08015bc8  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015bc8  08015bc8  00025bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015bd0  08015bd0  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015bd0  08015bd0  00025bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015bd4  08015bd4  00025bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08015bd8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004878  200001f8  08015dd0  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a70  08015dd0  00034a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027a64  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055d2  00000000  00000000  00057ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c80  00000000  00000000  0005d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015f3  00000000  00000000  0005ef28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d93  00000000  00000000  0006051b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002881b  00000000  00000000  0008a2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed371  00000000  00000000  000b2ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008f50  00000000  00000000  0019fe3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001a8d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015270 	.word	0x08015270

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	08015270 	.word	0x08015270

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_ldivmod>:
 8000cd8:	b97b      	cbnz	r3, 8000cfa <__aeabi_ldivmod+0x22>
 8000cda:	b972      	cbnz	r2, 8000cfa <__aeabi_ldivmod+0x22>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bfbe      	ittt	lt
 8000ce0:	2000      	movlt	r0, #0
 8000ce2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ce6:	e006      	blt.n	8000cf6 <__aeabi_ldivmod+0x1e>
 8000ce8:	bf08      	it	eq
 8000cea:	2800      	cmpeq	r0, #0
 8000cec:	bf1c      	itt	ne
 8000cee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf6:	f000 b9f1 	b.w	80010dc <__aeabi_idiv0>
 8000cfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d02:	2900      	cmp	r1, #0
 8000d04:	db09      	blt.n	8000d1a <__aeabi_ldivmod+0x42>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db1a      	blt.n	8000d40 <__aeabi_ldivmod+0x68>
 8000d0a:	f000 f883 	bl	8000e14 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4770      	bx	lr
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db1b      	blt.n	8000d5c <__aeabi_ldivmod+0x84>
 8000d24:	f000 f876 	bl	8000e14 <__udivmoddi4>
 8000d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d30:	b004      	add	sp, #16
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	4252      	negs	r2, r2
 8000d3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f865 	bl	8000e14 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4240      	negs	r0, r0
 8000d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5a:	4770      	bx	lr
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d62:	f000 f857 	bl	8000e14 <__udivmoddi4>
 8000d66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6e:	b004      	add	sp, #16
 8000d70:	4252      	negs	r2, r2
 8000d72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9a6 	b.w	80010dc <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff febb 	bl	8000b2c <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc31 	bl	8000648 <__aeabi_dmul>
 8000de6:	f7ff ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fbb2 	bl	8000554 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc28 	bl	8000648 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff fa6a 	bl	80002d8 <__aeabi_dsub>
 8000e04:	f7ff fef8 	bl	8000bf8 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9e08      	ldr	r6, [sp, #32]
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460f      	mov	r7, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4694      	mov	ip, r2
 8000e28:	d965      	bls.n	8000ef6 <__udivmoddi4+0xe2>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b143      	cbz	r3, 8000e42 <__udivmoddi4+0x2e>
 8000e30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e34:	f1c3 0220 	rsb	r2, r3, #32
 8000e38:	409f      	lsls	r7, r3
 8000e3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	409c      	lsls	r4, r3
 8000e42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e46:	fa1f f58c 	uxth.w	r5, ip
 8000e4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e4e:	0c22      	lsrs	r2, r4, #16
 8000e50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e58:	fb01 f005 	mul.w	r0, r1, r5
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e60:	eb1c 0202 	adds.w	r2, ip, r2
 8000e64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e68:	f080 811c 	bcs.w	80010a4 <__udivmoddi4+0x290>
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	f240 8119 	bls.w	80010a4 <__udivmoddi4+0x290>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4462      	add	r2, ip
 8000e76:	1a12      	subs	r2, r2, r0
 8000e78:	b2a4      	uxth	r4, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e86:	fb00 f505 	mul.w	r5, r0, r5
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x90>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e96:	f080 8107 	bcs.w	80010a8 <__udivmoddi4+0x294>
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	f240 8104 	bls.w	80010a8 <__udivmoddi4+0x294>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11e      	cbz	r6, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40dc      	lsrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0xbc>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	f000 80ed 	beq.w	800109e <__udivmoddi4+0x28a>
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	fab3 f183 	clz	r1, r3
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d149      	bne.n	8000f6c <__udivmoddi4+0x158>
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	d302      	bcc.n	8000ee2 <__udivmoddi4+0xce>
 8000edc:	4282      	cmp	r2, r0
 8000ede:	f200 80f8 	bhi.w	80010d2 <__udivmoddi4+0x2be>
 8000ee2:	1a84      	subs	r4, r0, r2
 8000ee4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4617      	mov	r7, r2
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d0e2      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ef4:	e7df      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef6:	b902      	cbnz	r2, 8000efa <__udivmoddi4+0xe6>
 8000ef8:	deff      	udf	#255	; 0xff
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x210>
 8000f04:	1a8a      	subs	r2, r1, r2
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f14:	fb07 2015 	mls	r0, r7, r5, r2
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1e:	fb0e f005 	mul.w	r0, lr, r5
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x124>
 8000f26:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x122>
 8000f30:	4290      	cmp	r0, r2
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2b8>
 8000f36:	4645      	mov	r5, r8
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f40:	fb07 2210 	mls	r2, r7, r0, r2
 8000f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x14e>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x14c>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2c2>
 8000f60:	4610      	mov	r0, r2
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f6a:	e79f      	b.n	8000eac <__udivmoddi4+0x98>
 8000f6c:	f1c1 0720 	rsb	r7, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f82:	40fd      	lsrs	r5, r7
 8000f84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f88:	4323      	orrs	r3, r4
 8000f8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f8e:	fa1f fe8c 	uxth.w	lr, ip
 8000f92:	fb09 5518 	mls	r5, r9, r8, r5
 8000f96:	0c1c      	lsrs	r4, r3, #16
 8000f98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	fa00 f001 	lsl.w	r0, r0, r1
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b0>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2b4>
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2b4>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4464      	add	r4, ip
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	b29d      	uxth	r5, r3
 8000fc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fd8:	45a6      	cmp	lr, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1da>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2ac>
 8000fe6:	45a6      	cmp	lr, r4
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2ac>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ff2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ff6:	eba4 040e 	sub.w	r4, r4, lr
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46ae      	mov	lr, r5
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x29c>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x298>
 8001004:	b156      	cbz	r6, 800101c <__udivmoddi4+0x208>
 8001006:	ebb0 0208 	subs.w	r2, r0, r8
 800100a:	eb64 040e 	sbc.w	r4, r4, lr
 800100e:	fa04 f707 	lsl.w	r7, r4, r7
 8001012:	40ca      	lsrs	r2, r1
 8001014:	40cc      	lsrs	r4, r1
 8001016:	4317      	orrs	r7, r2
 8001018:	e9c6 7400 	strd	r7, r4, [r6]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001024:	f1c3 0120 	rsb	r1, r3, #32
 8001028:	fa02 fc03 	lsl.w	ip, r2, r3
 800102c:	fa20 f201 	lsr.w	r2, r0, r1
 8001030:	fa25 f101 	lsr.w	r1, r5, r1
 8001034:	409d      	lsls	r5, r3
 8001036:	432a      	orrs	r2, r5
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb1 f0f7 	udiv	r0, r1, r7
 8001044:	fb07 1510 	mls	r5, r7, r0, r1
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800104e:	fb00 f50e 	mul.w	r5, r0, lr
 8001052:	428d      	cmp	r5, r1
 8001054:	fa04 f403 	lsl.w	r4, r4, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x258>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001064:	428d      	cmp	r5, r1
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 8001068:	3802      	subs	r0, #2
 800106a:	4461      	add	r1, ip
 800106c:	1b49      	subs	r1, r1, r5
 800106e:	b292      	uxth	r2, r2
 8001070:	fbb1 f5f7 	udiv	r5, r1, r7
 8001074:	fb07 1115 	mls	r1, r7, r5, r1
 8001078:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800107c:	fb05 f10e 	mul.w	r1, r5, lr
 8001080:	4291      	cmp	r1, r2
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x282>
 8001084:	eb1c 0202 	adds.w	r2, ip, r2
 8001088:	f105 38ff 	add.w	r8, r5, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2a8>
 800108e:	4291      	cmp	r1, r2
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2a8>
 8001092:	3d02      	subs	r5, #2
 8001094:	4462      	add	r2, ip
 8001096:	1a52      	subs	r2, r2, r1
 8001098:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0xfc>
 800109e:	4631      	mov	r1, r6
 80010a0:	4630      	mov	r0, r6
 80010a2:	e708      	b.n	8000eb6 <__udivmoddi4+0xa2>
 80010a4:	4639      	mov	r1, r7
 80010a6:	e6e6      	b.n	8000e76 <__udivmoddi4+0x62>
 80010a8:	4610      	mov	r0, r2
 80010aa:	e6fb      	b.n	8000ea4 <__udivmoddi4+0x90>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f0>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010b8:	3b01      	subs	r3, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f0>
 80010bc:	4645      	mov	r5, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x282>
 80010c0:	462b      	mov	r3, r5
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1da>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x258>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b0>
 80010cc:	3d02      	subs	r5, #2
 80010ce:	4462      	add	r2, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x124>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e70a      	b.n	8000eec <__udivmoddi4+0xd8>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x14e>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <PIDController_Init>:
#include "Controller/PID.h"

void PIDController_Init(PIDController *pid)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Clear Anti-windup flag
	pid->antiWindup = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

	// Clear controller variables
	pid->prevError  = 0.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->integrator = 0.0f;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
	pid->differentiator  = 0.0f;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c

	// Clear output
	pid->out = 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	; 0x30

	// Calculate low-pass filter parameters
	pid->tau = 5 * pid->T;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edd3 7a03 	vldr	s15, [r3, #12]
 8001116:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->alpha = (pid->T) / (pid->T + pid->tau);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edd3 6a03 	vldr	s13, [r3, #12]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	edd3 7a04 	vldr	s15, [r3, #16]
 8001136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	ed87 0a02 	vstr	s0, [r7, #8]
 800115c:	edc7 0a01 	vstr	s1, [r7, #4]
	//Error signal based on Anti-windup
	float error;
	if (pid->antiWindup)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <PIDController_Update+0x22>
		error = 0;
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	e007      	b.n	8001182 <PIDController_Update+0x32>
	else
		error = setpoint - measurement;
 8001172:	ed97 7a02 	vldr	s14, [r7, #8]
 8001176:	edd7 7a01 	vldr	s15, [r7, #4]
 800117a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117e:	edc7 7a07 	vstr	s15, [r7, #28]

	// Proportional
    float proportional = pid->Kp * error;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ed97 7a07 	vldr	s14, [r7, #28]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	edc7 7a06 	vstr	s15, [r7, #24]

	// Integral
    pid->integrator = pid->integrator + pid->Ki * (pid->T / 2) * (error + pid->prevError);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	edd3 6a01 	vldr	s13, [r3, #4]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	ed93 6a03 	vldr	s12, [r3, #12]
 80011a6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80011aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80011ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 80011b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80011c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Derivative with low-pass filter
    pid->differentiator = (1 - pid->alpha) * pid->differentiator
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80011d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011e2:	ee27 7a27 	vmul.f32	s14, s14, s15
    		+ pid->alpha *  (pid->Kd * (error - pid->prevError) / pid->T);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edd3 6a05 	vldr	s13, [r3, #20]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	ed93 6a02 	vldr	s12, [r3, #8]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011f8:	edd7 5a07 	vldr	s11, [r7, #28]
 80011fc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001200:	ee66 5a27 	vmul.f32	s11, s12, s15
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	ed93 6a03 	vldr	s12, [r3, #12]
 800120a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800120e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = (1 - pid->alpha) * pid->differentiator
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// Compute output and apply limits
    pid->out = proportional + pid->integrator + pid->differentiator;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001222:	edd7 7a06 	vldr	s15, [r7, #24]
 8001226:	ee37 7a27 	vadd.f32	s14, s14, s15
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    float preSaturationOutput = pid->out;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	617b      	str	r3, [r7, #20]

    // Saturating (clamping) the output
    if (pid->out > pid->limMax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	edd3 7a07 	vldr	s15, [r3, #28]
 800124c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	dd04      	ble.n	8001260 <PIDController_Update+0x110>
        pid->out = pid->limMax;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	69da      	ldr	r2, [r3, #28]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
 800125e:	e00e      	b.n	800127e <PIDController_Update+0x12e>
    else if (pid->out < pid->limMin)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	edd3 7a06 	vldr	s15, [r3, #24]
 800126c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	d503      	bpl.n	800127e <PIDController_Update+0x12e>
        pid->out = pid->limMin;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	631a      	str	r2, [r3, #48]	; 0x30

    // Anti-wind-up algorithm
    // If clamping was necessary
    if (preSaturationOutput != pid->out)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001284:	ed97 7a05 	vldr	s14, [r7, #20]
 8001288:	eeb4 7a67 	vcmp.f32	s14, s15
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	d020      	beq.n	80012d4 <PIDController_Update+0x184>
    {
    	// And if the integrator is trying to make saturation worse
    	if ((preSaturationOutput > 0 && error > 0)
 8001292:	edd7 7a05 	vldr	s15, [r7, #20]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	dd06      	ble.n	80012ae <PIDController_Update+0x15e>
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	dc0d      	bgt.n	80012ca <PIDController_Update+0x17a>
    			|| (preSaturationOutput < 0 && error < 0))
 80012ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d50f      	bpl.n	80012dc <PIDController_Update+0x18c>
 80012bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80012c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d508      	bpl.n	80012dc <PIDController_Update+0x18c>
    		pid->antiWindup = true;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2020 	strb.w	r2, [r3, #32]
 80012d2:	e003      	b.n	80012dc <PIDController_Update+0x18c>
    }
    else
    	pid->antiWindup = false;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2020 	strb.w	r2, [r3, #32]

	/* Store error for later use */
    pid->prevError = error;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

	/* Return controller output */
    return pid->out;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	ee07 3a90 	vmov	s15, r3
}
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	3724      	adds	r7, #36	; 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <Log>:
#include "string.h"

extern UART_HandleTypeDef huart3;

void Log(const char* msg)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b09c      	sub	sp, #112	; 0x70
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if (DebugIsOn)
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <Log+0x44>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d014      	beq.n	8001332 <Log+0x3a>
	{
		char str[100];

		sprintf(str, "%s\r\n", msg);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	490c      	ldr	r1, [pc, #48]	; (8001340 <Log+0x48>)
 8001310:	4618      	mov	r0, r3
 8001312:	f00e fdcb 	bl	800feac <siprintf>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ffd0 	bl	80002c0 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 010c 	add.w	r1, r7, #12
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <Log+0x4c>)
 800132e:	f009 fd47 	bl	800adc0 <HAL_UART_Transmit>
	}
}
 8001332:	bf00      	nop
 8001334:	3770      	adds	r7, #112	; 0x70
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000
 8001340:	08015288 	.word	0x08015288
 8001344:	20000a60 	.word	0x20000a60

08001348 <TaskController>:
#include "Controller/PID.h"

extern osMutexId DistMutexHandle;

void TaskController(void const *argument)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0b6      	sub	sp, #216	; 0xd8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	// Inner loop controllers
	PIDController PID_Thrust;
	PID_Thrust.Kd = 1;
 8001350:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PID_Thrust.Ki = 1;
 8001358:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800135c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	PID_Thrust.Kd = 1;
 8001360:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	PID_Thrust.T = 0.01f;
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <TaskController+0x120>)
 800136a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	PID_Thrust.limMin = 0;
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	PID_Thrust.limMax = 30;
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <TaskController+0x124>)
 8001378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	PIDController_Init(&PID_Thrust);
 800137c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fead 	bl	80010e0 <PIDController_Init>

	PIDController PID_Yaw;
	PID_Yaw.Kd = 0;
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	67bb      	str	r3, [r7, #120]	; 0x78
	PID_Yaw.Ki = 0;
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	677b      	str	r3, [r7, #116]	; 0x74
	PID_Yaw.Kd = 0;
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	67bb      	str	r3, [r7, #120]	; 0x78
	PID_Yaw.T = 0;
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	67fb      	str	r3, [r7, #124]	; 0x7c
	PID_Yaw.limMin = 0;
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	PID_Yaw.limMax = 50;
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <TaskController+0x128>)
 80013a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	PIDController_Init(&PID_Yaw);
 80013ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe95 	bl	80010e0 <PIDController_Init>

	PIDController PID_Pitch;
	PID_Pitch.Kd = 0;
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
	PID_Pitch.Ki = 0;
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	643b      	str	r3, [r7, #64]	; 0x40
	PID_Pitch.Kd = 0;
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
	PID_Pitch.T = 0;
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	64bb      	str	r3, [r7, #72]	; 0x48
	PID_Pitch.limMin = 0;
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	657b      	str	r3, [r7, #84]	; 0x54
	PID_Pitch.limMax = 50;
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <TaskController+0x128>)
 80013d6:	65bb      	str	r3, [r7, #88]	; 0x58
	PIDController_Init(&PID_Pitch);
 80013d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fe7f 	bl	80010e0 <PIDController_Init>

	PIDController PID_Roll;
	PID_Roll.Kd = 0;
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
	PID_Roll.Ki = 0;
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
	PID_Roll.Kd = 0;
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
	PID_Roll.T = 0;
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
	PID_Roll.limMin = 0;
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
	PID_Roll.limMax = 50;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <TaskController+0x128>)
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
	PIDController_Init(&PID_Roll);
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fe69 	bl	80010e0 <PIDController_Init>

	// Infinite loop
	while (1)
	{

		if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <TaskController+0x12c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f04f 31ff 	mov.w	r1, #4294967295
 8001416:	4618      	mov	r0, r3
 8001418:	f00b fa06 	bl	800c828 <osMutexWait>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d118      	bne.n	8001454 <TaskController+0x10c>
		{
			PIDController_Update(&PID_Thrust, 0.2f, Distance/1000.0f);
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <TaskController+0x130>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eddf 6a14 	vldr	s13, [pc, #80]	; 800147c <TaskController+0x134>
 800142c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001430:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001434:	eef0 0a47 	vmov.f32	s1, s14
 8001438:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001480 <TaskController+0x138>
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe87 	bl	8001150 <PIDController_Update>
			Throttle_controlled = PID_Thrust.out;
 8001442:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144a:	ee17 3a90 	vmov	r3, s15
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <TaskController+0x13c>)
 8001452:	801a      	strh	r2, [r3, #0]
		}
		osMutexRelease(DistMutexHandle);
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <TaskController+0x12c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f00b fa33 	bl	800c8c4 <osMutexRelease>


		osDelay(10);
 800145e:	200a      	movs	r0, #10
 8001460:	f00b f9b5 	bl	800c7ce <osDelay>
		if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 8001464:	e7d3      	b.n	800140e <TaskController+0xc6>
 8001466:	bf00      	nop
 8001468:	3c23d70a 	.word	0x3c23d70a
 800146c:	41f00000 	.word	0x41f00000
 8001470:	42480000 	.word	0x42480000
 8001474:	20000b70 	.word	0x20000b70
 8001478:	20000360 	.word	0x20000360
 800147c:	447a0000 	.word	0x447a0000
 8001480:	3e4ccccd 	.word	0x3e4ccccd
 8001484:	20000222 	.word	0x20000222

08001488 <DisassembleFloatIntoUint8s>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void DisassembleFloatIntoUint8s(float* n, uint8_t* array, int position)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
	memcpy(array+position, n, sizeof(float));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <TaskDiagnostics>:

void TaskDiagnostics(void const *argument)
{
 80014ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b0:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 80014b4:	af10      	add	r7, sp, #64	; 0x40
 80014b6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014ba:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80014be:	6018      	str	r0, [r3, #0]
	char UARTstr[512];
	int8_t SpiIntData[64];
	uint8_t SpiFloatData1[64];
	uint8_t SpiFloatData2[64];

	SpiIntData[0] = (int8_t)('i');
 80014c0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014c4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80014c8:	2269      	movs	r2, #105	; 0x69
 80014ca:	701a      	strb	r2, [r3, #0]
	SpiFloatData1[0] = (uint8_t)('f');
 80014cc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014d0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80014d4:	2266      	movs	r2, #102	; 0x66
 80014d6:	701a      	strb	r2, [r3, #0]
	SpiFloatData2[0] = (uint8_t)('g');
 80014d8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80014dc:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80014e0:	2267      	movs	r2, #103	; 0x67
 80014e2:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	while (1)
	{
		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 80014e4:	4bba      	ldr	r3, [pc, #744]	; (80017d0 <TaskDiagnostics+0x324>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00b f99b 	bl	800c828 <osMutexWait>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f040 80ed 	bne.w	80016d4 <TaskDiagnostics+0x228>
		{
			sprintf(UARTstr, "Throttle: (%d) %d %d %d %d\r\n", Throttle_in, TIM3->CCR3-50, TIM3->CCR4-50, TIM3->CCR1-50, TIM3->CCR2-50);
 80014fa:	4bb6      	ldr	r3, [pc, #728]	; (80017d4 <TaskDiagnostics+0x328>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	461d      	mov	r5, r3
 8001500:	4bb5      	ldr	r3, [pc, #724]	; (80017d8 <TaskDiagnostics+0x32c>)
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	f1a3 0432 	sub.w	r4, r3, #50	; 0x32
 8001508:	4bb3      	ldr	r3, [pc, #716]	; (80017d8 <TaskDiagnostics+0x32c>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	3b32      	subs	r3, #50	; 0x32
 800150e:	4ab2      	ldr	r2, [pc, #712]	; (80017d8 <TaskDiagnostics+0x32c>)
 8001510:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001512:	3a32      	subs	r2, #50	; 0x32
 8001514:	49b0      	ldr	r1, [pc, #704]	; (80017d8 <TaskDiagnostics+0x32c>)
 8001516:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001518:	3932      	subs	r1, #50	; 0x32
 800151a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800151e:	9102      	str	r1, [sp, #8]
 8001520:	9201      	str	r2, [sp, #4]
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4623      	mov	r3, r4
 8001526:	462a      	mov	r2, r5
 8001528:	49ac      	ldr	r1, [pc, #688]	; (80017dc <TaskDiagnostics+0x330>)
 800152a:	f00e fcbf 	bl	800feac <siprintf>
			SpiIntData[1] = (int8_t)Throttle_controlled;
 800152e:	4bac      	ldr	r3, [pc, #688]	; (80017e0 <TaskDiagnostics+0x334>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b25a      	sxtb	r2, r3
 8001534:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001538:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800153c:	705a      	strb	r2, [r3, #1]
			SpiIntData[2] = (int8_t)TIM3->CCR3-50;
 800153e:	4ba6      	ldr	r3, [pc, #664]	; (80017d8 <TaskDiagnostics+0x32c>)
 8001540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001542:	b2db      	uxtb	r3, r3
 8001544:	3b32      	subs	r3, #50	; 0x32
 8001546:	b2db      	uxtb	r3, r3
 8001548:	b25a      	sxtb	r2, r3
 800154a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800154e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001552:	709a      	strb	r2, [r3, #2]
			SpiIntData[3] = (int8_t)TIM3->CCR4-50;
 8001554:	4ba0      	ldr	r3, [pc, #640]	; (80017d8 <TaskDiagnostics+0x32c>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	b2db      	uxtb	r3, r3
 800155a:	3b32      	subs	r3, #50	; 0x32
 800155c:	b2db      	uxtb	r3, r3
 800155e:	b25a      	sxtb	r2, r3
 8001560:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001564:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001568:	70da      	strb	r2, [r3, #3]
			SpiIntData[4] = (int8_t)TIM3->CCR1-50;
 800156a:	4b9b      	ldr	r3, [pc, #620]	; (80017d8 <TaskDiagnostics+0x32c>)
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3b32      	subs	r3, #50	; 0x32
 8001572:	b2db      	uxtb	r3, r3
 8001574:	b25a      	sxtb	r2, r3
 8001576:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800157a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800157e:	711a      	strb	r2, [r3, #4]
			SpiIntData[5] = (int8_t)TIM3->CCR2-50;
 8001580:	4b95      	ldr	r3, [pc, #596]	; (80017d8 <TaskDiagnostics+0x32c>)
 8001582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3b32      	subs	r3, #50	; 0x32
 8001588:	b2db      	uxtb	r3, r3
 800158a:	b25a      	sxtb	r2, r3
 800158c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001590:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001594:	715a      	strb	r2, [r3, #5]

			sprintf(UARTstr, "%sYaw: %d\r\n", UARTstr, Yaw_in);
 8001596:	4b93      	ldr	r3, [pc, #588]	; (80017e4 <TaskDiagnostics+0x338>)
 8001598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015a0:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015a4:	4990      	ldr	r1, [pc, #576]	; (80017e8 <TaskDiagnostics+0x33c>)
 80015a6:	f00e fc81 	bl	800feac <siprintf>
			SpiIntData[6] = (int8_t)Yaw_in;
 80015aa:	4b8e      	ldr	r3, [pc, #568]	; (80017e4 <TaskDiagnostics+0x338>)
 80015ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b0:	b25a      	sxtb	r2, r3
 80015b2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80015b6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015ba:	719a      	strb	r2, [r3, #6]

			sprintf(UARTstr, "%sPitch: %d\r\n", UARTstr, Pitch_in);
 80015bc:	4b8b      	ldr	r3, [pc, #556]	; (80017ec <TaskDiagnostics+0x340>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015c6:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015ca:	4989      	ldr	r1, [pc, #548]	; (80017f0 <TaskDiagnostics+0x344>)
 80015cc:	f00e fc6e 	bl	800feac <siprintf>
			SpiIntData[7] = (int8_t)Pitch_in;
 80015d0:	4b86      	ldr	r3, [pc, #536]	; (80017ec <TaskDiagnostics+0x340>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80015dc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015e0:	71da      	strb	r2, [r3, #7]

			sprintf(UARTstr, "%sRoll: %d\r\n", UARTstr, Roll_in);
 80015e2:	4b84      	ldr	r3, [pc, #528]	; (80017f4 <TaskDiagnostics+0x348>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015ec:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015f0:	4981      	ldr	r1, [pc, #516]	; (80017f8 <TaskDiagnostics+0x34c>)
 80015f2:	f00e fc5b 	bl	800feac <siprintf>
			SpiIntData[8] = (int8_t)Roll_in;
 80015f6:	4b7f      	ldr	r3, [pc, #508]	; (80017f4 <TaskDiagnostics+0x348>)
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001602:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001606:	721a      	strb	r2, [r3, #8]

			sprintf(UARTstr, "%sSWA: %d\r\n", UARTstr, SWA);
 8001608:	4b7c      	ldr	r3, [pc, #496]	; (80017fc <TaskDiagnostics+0x350>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001610:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001614:	497a      	ldr	r1, [pc, #488]	; (8001800 <TaskDiagnostics+0x354>)
 8001616:	f00e fc49 	bl	800feac <siprintf>
			SpiIntData[9] = (int8_t)SWA;
 800161a:	4b78      	ldr	r3, [pc, #480]	; (80017fc <TaskDiagnostics+0x350>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b25a      	sxtb	r2, r3
 8001620:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001624:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001628:	725a      	strb	r2, [r3, #9]

			sprintf(UARTstr, "%sSWB: %d\r\n", UARTstr, SWB);
 800162a:	4b76      	ldr	r3, [pc, #472]	; (8001804 <TaskDiagnostics+0x358>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001632:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001636:	4974      	ldr	r1, [pc, #464]	; (8001808 <TaskDiagnostics+0x35c>)
 8001638:	f00e fc38 	bl	800feac <siprintf>
			SpiIntData[10] = (int8_t)SWB;
 800163c:	4b71      	ldr	r3, [pc, #452]	; (8001804 <TaskDiagnostics+0x358>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b25a      	sxtb	r2, r3
 8001642:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001646:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800164a:	729a      	strb	r2, [r3, #10]

			sprintf(UARTstr, "%sSWC: %d\r\n", UARTstr, SWC);
 800164c:	4b6f      	ldr	r3, [pc, #444]	; (800180c <TaskDiagnostics+0x360>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001654:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001658:	496d      	ldr	r1, [pc, #436]	; (8001810 <TaskDiagnostics+0x364>)
 800165a:	f00e fc27 	bl	800feac <siprintf>
			SpiIntData[11] = (int8_t)SWC;
 800165e:	4b6b      	ldr	r3, [pc, #428]	; (800180c <TaskDiagnostics+0x360>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	b25a      	sxtb	r2, r3
 8001664:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001668:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800166c:	72da      	strb	r2, [r3, #11]

			sprintf(UARTstr, "%sSWD: %d\r\n", UARTstr, SWD);
 800166e:	4b69      	ldr	r3, [pc, #420]	; (8001814 <TaskDiagnostics+0x368>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001676:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800167a:	4967      	ldr	r1, [pc, #412]	; (8001818 <TaskDiagnostics+0x36c>)
 800167c:	f00e fc16 	bl	800feac <siprintf>
			SpiIntData[12] = (int8_t)SWD;
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <TaskDiagnostics+0x368>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b25a      	sxtb	r2, r3
 8001686:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800168a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800168e:	731a      	strb	r2, [r3, #12]

			sprintf(UARTstr, "%sVRA: %d\r\n", UARTstr, VRA);
 8001690:	4b62      	ldr	r3, [pc, #392]	; (800181c <TaskDiagnostics+0x370>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001698:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800169c:	4960      	ldr	r1, [pc, #384]	; (8001820 <TaskDiagnostics+0x374>)
 800169e:	f00e fc05 	bl	800feac <siprintf>
			SpiIntData[13] = (int8_t)VRA;
 80016a2:	4b5e      	ldr	r3, [pc, #376]	; (800181c <TaskDiagnostics+0x370>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80016ac:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80016b0:	735a      	strb	r2, [r3, #13]

			sprintf(UARTstr, "%sVRB: %d\r\n", UARTstr, VRB);
 80016b2:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <TaskDiagnostics+0x378>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80016ba:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80016be:	495a      	ldr	r1, [pc, #360]	; (8001828 <TaskDiagnostics+0x37c>)
 80016c0:	f00e fbf4 	bl	800feac <siprintf>
			SpiIntData[14] = (int8_t)VRB;
 80016c4:	4b57      	ldr	r3, [pc, #348]	; (8001824 <TaskDiagnostics+0x378>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80016ce:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80016d2:	739a      	strb	r2, [r3, #14]
		}
		osMutexRelease(RemoteDataMutexHandle);
 80016d4:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <TaskDiagnostics+0x324>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f00b f8f3 	bl	800c8c4 <osMutexRelease>

		if (IsImuAvailable)
 80016de:	4b53      	ldr	r3, [pc, #332]	; (800182c <TaskDiagnostics+0x380>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8106 	beq.w	80018f4 <TaskDiagnostics+0x448>
		{
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 80016e8:	4b51      	ldr	r3, [pc, #324]	; (8001830 <TaskDiagnostics+0x384>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00b f899 	bl	800c828 <osMutexWait>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 80f6 	bne.w	80018ea <TaskDiagnostics+0x43e>
			{
				sprintf(UARTstr,
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <TaskDiagnostics+0x388>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff48 	bl	8000598 <__aeabi_f2d>
 8001708:	4680      	mov	r8, r0
 800170a:	4689      	mov	r9, r1
						"%sTemp: %.4f\r\nAcc:  %1.4f ; %1.4f ; %1.4f\r\nGyro: %1.4f ; %1.4f ; %1.4f\r\n",
						UARTstr,
						TempData,
						AccData[0], AccData[1], AccData[2],
 800170c:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <TaskDiagnostics+0x38c>)
 800170e:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff41 	bl	8000598 <__aeabi_f2d>
 8001716:	4682      	mov	sl, r0
 8001718:	468b      	mov	fp, r1
						AccData[0], AccData[1], AccData[2],
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <TaskDiagnostics+0x38c>)
 800171c:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff3a 	bl	8000598 <__aeabi_f2d>
 8001724:	e9c7 0104 	strd	r0, r1, [r7, #16]
						AccData[0], AccData[1], AccData[2],
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <TaskDiagnostics+0x38c>)
 800172a:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff33 	bl	8000598 <__aeabi_f2d>
 8001732:	e9c7 0102 	strd	r0, r1, [r7, #8]
						GyroData[0], GyroData[1], GyroData[2]);
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <TaskDiagnostics+0x390>)
 8001738:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr,
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff2c 	bl	8000598 <__aeabi_f2d>
 8001740:	e9c7 0100 	strd	r0, r1, [r7]
						GyroData[0], GyroData[1], GyroData[2]);
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <TaskDiagnostics+0x390>)
 8001746:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr,
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ff25 	bl	8000598 <__aeabi_f2d>
 800174e:	4604      	mov	r4, r0
 8001750:	460d      	mov	r5, r1
						GyroData[0], GyroData[1], GyroData[2]);
 8001752:	4b3a      	ldr	r3, [pc, #232]	; (800183c <TaskDiagnostics+0x390>)
 8001754:	689b      	ldr	r3, [r3, #8]
				sprintf(UARTstr,
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe ff1e 	bl	8000598 <__aeabi_f2d>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001764:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001768:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800176c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001770:	ed97 7b00 	vldr	d7, [r7]
 8001774:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001778:	ed97 7b02 	vldr	d7, [r7, #8]
 800177c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001780:	ed97 7b04 	vldr	d7, [r7, #16]
 8001784:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001788:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800178c:	e9cd 8900 	strd	r8, r9, [sp]
 8001790:	460a      	mov	r2, r1
 8001792:	492b      	ldr	r1, [pc, #172]	; (8001840 <TaskDiagnostics+0x394>)
 8001794:	f00e fb8a 	bl	800feac <siprintf>
				DisassembleFloatIntoUint8s(&TempData, SpiFloatData1, 1);
 8001798:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800179c:	2201      	movs	r2, #1
 800179e:	4619      	mov	r1, r3
 80017a0:	4824      	ldr	r0, [pc, #144]	; (8001834 <TaskDiagnostics+0x388>)
 80017a2:	f7ff fe71 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData, SpiFloatData1, 5);
 80017a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017aa:	2205      	movs	r2, #5
 80017ac:	4619      	mov	r1, r3
 80017ae:	4822      	ldr	r0, [pc, #136]	; (8001838 <TaskDiagnostics+0x38c>)
 80017b0:	f7ff fe6a 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+1, SpiFloatData1, 9);
 80017b4:	4823      	ldr	r0, [pc, #140]	; (8001844 <TaskDiagnostics+0x398>)
 80017b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ba:	2209      	movs	r2, #9
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff fe63 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(AccData+2, SpiFloatData1, 13);
 80017c2:	4821      	ldr	r0, [pc, #132]	; (8001848 <TaskDiagnostics+0x39c>)
 80017c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017c8:	220d      	movs	r2, #13
 80017ca:	4619      	mov	r1, r3
 80017cc:	e03e      	b.n	800184c <TaskDiagnostics+0x3a0>
 80017ce:	bf00      	nop
 80017d0:	20000b64 	.word	0x20000b64
 80017d4:	20000220 	.word	0x20000220
 80017d8:	40000400 	.word	0x40000400
 80017dc:	08015290 	.word	0x08015290
 80017e0:	20000222 	.word	0x20000222
 80017e4:	20000224 	.word	0x20000224
 80017e8:	080152b0 	.word	0x080152b0
 80017ec:	20000226 	.word	0x20000226
 80017f0:	080152bc 	.word	0x080152bc
 80017f4:	20000228 	.word	0x20000228
 80017f8:	080152cc 	.word	0x080152cc
 80017fc:	2000022a 	.word	0x2000022a
 8001800:	080152dc 	.word	0x080152dc
 8001804:	2000022c 	.word	0x2000022c
 8001808:	080152e8 	.word	0x080152e8
 800180c:	2000022e 	.word	0x2000022e
 8001810:	080152f4 	.word	0x080152f4
 8001814:	20000230 	.word	0x20000230
 8001818:	08015300 	.word	0x08015300
 800181c:	20000232 	.word	0x20000232
 8001820:	0801530c 	.word	0x0801530c
 8001824:	20000234 	.word	0x20000234
 8001828:	08015318 	.word	0x08015318
 800182c:	2000021c 	.word	0x2000021c
 8001830:	20000b68 	.word	0x20000b68
 8001834:	200002b4 	.word	0x200002b4
 8001838:	200002a8 	.word	0x200002a8
 800183c:	200002b8 	.word	0x200002b8
 8001840:	08015324 	.word	0x08015324
 8001844:	200002ac 	.word	0x200002ac
 8001848:	200002b0 	.word	0x200002b0
 800184c:	f7ff fe1c 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData, SpiFloatData1, 17);
 8001850:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001854:	2211      	movs	r2, #17
 8001856:	4619      	mov	r1, r3
 8001858:	48b7      	ldr	r0, [pc, #732]	; (8001b38 <TaskDiagnostics+0x68c>)
 800185a:	f7ff fe15 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+1, SpiFloatData1, 21);
 800185e:	48b7      	ldr	r0, [pc, #732]	; (8001b3c <TaskDiagnostics+0x690>)
 8001860:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001864:	2215      	movs	r2, #21
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff fe0e 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(GyroData+2, SpiFloatData1, 25);
 800186c:	48b4      	ldr	r0, [pc, #720]	; (8001b40 <TaskDiagnostics+0x694>)
 800186e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001872:	2219      	movs	r2, #25
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff fe07 	bl	8001488 <DisassembleFloatIntoUint8s>

				sprintf(UARTstr,
 800187a:	4bb2      	ldr	r3, [pc, #712]	; (8001b44 <TaskDiagnostics+0x698>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe8a 	bl	8000598 <__aeabi_f2d>
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	4baf      	ldr	r3, [pc, #700]	; (8001b48 <TaskDiagnostics+0x69c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe83 	bl	8000598 <__aeabi_f2d>
 8001892:	4680      	mov	r8, r0
 8001894:	4689      	mov	r9, r1
 8001896:	4bad      	ldr	r3, [pc, #692]	; (8001b4c <TaskDiagnostics+0x6a0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe7c 	bl	8000598 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80018a8:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80018ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018b4:	e9cd 4500 	strd	r4, r5, [sp]
 80018b8:	460a      	mov	r2, r1
 80018ba:	49a5      	ldr	r1, [pc, #660]	; (8001b50 <TaskDiagnostics+0x6a4>)
 80018bc:	f00e faf6 	bl	800feac <siprintf>
						"%sBMP_Temp: %.4f\r\nBMP_Pres: %.4f\r\nBMP_Alt: %.4f\r\n",
						UARTstr,
						BMP_Temp, BMP_Pres, BMP_Alt);
				DisassembleFloatIntoUint8s(&BMP_Temp, SpiFloatData1, 29);
 80018c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018c4:	221d      	movs	r2, #29
 80018c6:	4619      	mov	r1, r3
 80018c8:	489e      	ldr	r0, [pc, #632]	; (8001b44 <TaskDiagnostics+0x698>)
 80018ca:	f7ff fddd 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Pres, SpiFloatData1, 33);
 80018ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018d2:	2221      	movs	r2, #33	; 0x21
 80018d4:	4619      	mov	r1, r3
 80018d6:	489c      	ldr	r0, [pc, #624]	; (8001b48 <TaskDiagnostics+0x69c>)
 80018d8:	f7ff fdd6 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&BMP_Alt, SpiFloatData1, 37);
 80018dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018e0:	2225      	movs	r2, #37	; 0x25
 80018e2:	4619      	mov	r1, r3
 80018e4:	4899      	ldr	r0, [pc, #612]	; (8001b4c <TaskDiagnostics+0x6a0>)
 80018e6:	f7ff fdcf 	bl	8001488 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(ImuMutexHandle);
 80018ea:	4b9a      	ldr	r3, [pc, #616]	; (8001b54 <TaskDiagnostics+0x6a8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00a ffe8 	bl	800c8c4 <osMutexRelease>
		}

		if (IsMagnAvailable)
 80018f4:	4b98      	ldr	r3, [pc, #608]	; (8001b58 <TaskDiagnostics+0x6ac>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d056      	beq.n	80019aa <TaskDiagnostics+0x4fe>
		{
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 80018fc:	4b97      	ldr	r3, [pc, #604]	; (8001b5c <TaskDiagnostics+0x6b0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	4618      	mov	r0, r3
 8001906:	f00a ff8f 	bl	800c828 <osMutexWait>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d147      	bne.n	80019a0 <TaskDiagnostics+0x4f4>
			{
				sprintf(UARTstr,
 8001910:	4b93      	ldr	r3, [pc, #588]	; (8001b60 <TaskDiagnostics+0x6b4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe3f 	bl	8000598 <__aeabi_f2d>
 800191a:	4604      	mov	r4, r0
 800191c:	460d      	mov	r5, r1
 800191e:	4b91      	ldr	r3, [pc, #580]	; (8001b64 <TaskDiagnostics+0x6b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe38 	bl	8000598 <__aeabi_f2d>
 8001928:	4680      	mov	r8, r0
 800192a:	4689      	mov	r9, r1
 800192c:	4b8e      	ldr	r3, [pc, #568]	; (8001b68 <TaskDiagnostics+0x6bc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe31 	bl	8000598 <__aeabi_f2d>
 8001936:	4682      	mov	sl, r0
 8001938:	468b      	mov	fp, r1
 800193a:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <TaskDiagnostics+0x6c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe2a 	bl	8000598 <__aeabi_f2d>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800194c:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8001950:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001954:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001958:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800195c:	e9cd 4500 	strd	r4, r5, [sp]
 8001960:	460a      	mov	r2, r1
 8001962:	4983      	ldr	r1, [pc, #524]	; (8001b70 <TaskDiagnostics+0x6c4>)
 8001964:	f00e faa2 	bl	800feac <siprintf>
						"%sMAG_X_RAW: %.4f\r\nMAG_Y_RAW: %.4f\r\nMAG_Z_RAW: %.4f\r\ndir: %.4f\r\n",
						UARTstr,
						MAG_X_RAW, MAG_Y_RAW, MAG_Z_RAW, MAG_dir);
				DisassembleFloatIntoUint8s(&MAG_X_RAW, SpiFloatData1, 41);
 8001968:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800196c:	2229      	movs	r2, #41	; 0x29
 800196e:	4619      	mov	r1, r3
 8001970:	487b      	ldr	r0, [pc, #492]	; (8001b60 <TaskDiagnostics+0x6b4>)
 8001972:	f7ff fd89 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_Y_RAW, SpiFloatData1, 45);
 8001976:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800197a:	222d      	movs	r2, #45	; 0x2d
 800197c:	4619      	mov	r1, r3
 800197e:	4879      	ldr	r0, [pc, #484]	; (8001b64 <TaskDiagnostics+0x6b8>)
 8001980:	f7ff fd82 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_Z_RAW, SpiFloatData1, 49);
 8001984:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001988:	2231      	movs	r2, #49	; 0x31
 800198a:	4619      	mov	r1, r3
 800198c:	4876      	ldr	r0, [pc, #472]	; (8001b68 <TaskDiagnostics+0x6bc>)
 800198e:	f7ff fd7b 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&MAG_dir, SpiFloatData1, 53);
 8001992:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001996:	2235      	movs	r2, #53	; 0x35
 8001998:	4619      	mov	r1, r3
 800199a:	4874      	ldr	r0, [pc, #464]	; (8001b6c <TaskDiagnostics+0x6c0>)
 800199c:	f7ff fd74 	bl	8001488 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(MagnMutexHandle);
 80019a0:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <TaskDiagnostics+0x6b0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00a ff8d 	bl	800c8c4 <osMutexRelease>
		}

		if (IsDistAvailable)
 80019aa:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <TaskDiagnostics+0x6c8>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d026      	beq.n	8001a00 <TaskDiagnostics+0x554>
		{
			if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80019b2:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <TaskDiagnostics+0x6cc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00a ff34 	bl	800c828 <osMutexWait>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d117      	bne.n	80019f6 <TaskDiagnostics+0x54a>
			{
				sprintf(UARTstr, "%sDistance: %.0f mm\r\n", UARTstr, Distance);
 80019c6:	4b6d      	ldr	r3, [pc, #436]	; (8001b7c <TaskDiagnostics+0x6d0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fde4 	bl	8000598 <__aeabi_f2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80019d8:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80019dc:	e9cd 2300 	strd	r2, r3, [sp]
 80019e0:	460a      	mov	r2, r1
 80019e2:	4967      	ldr	r1, [pc, #412]	; (8001b80 <TaskDiagnostics+0x6d4>)
 80019e4:	f00e fa62 	bl	800feac <siprintf>
				DisassembleFloatIntoUint8s(&Distance, SpiFloatData1, 57);
 80019e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019ec:	2239      	movs	r2, #57	; 0x39
 80019ee:	4619      	mov	r1, r3
 80019f0:	4862      	ldr	r0, [pc, #392]	; (8001b7c <TaskDiagnostics+0x6d0>)
 80019f2:	f7ff fd49 	bl	8001488 <DisassembleFloatIntoUint8s>
			}
			osMutexRelease(DistMutexHandle);
 80019f6:	4b60      	ldr	r3, [pc, #384]	; (8001b78 <TaskDiagnostics+0x6cc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00a ff62 	bl	800c8c4 <osMutexRelease>
		}

		if (IsGpsAvailable)
 8001a00:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <TaskDiagnostics+0x6d8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80cd 	beq.w	8001ba4 <TaskDiagnostics+0x6f8>
		{
			if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8001a0a:	4b5f      	ldr	r3, [pc, #380]	; (8001b88 <TaskDiagnostics+0x6dc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a12:	4618      	mov	r0, r3
 8001a14:	f00a ff08 	bl	800c828 <osMutexWait>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 8087 	bne.w	8001b2e <TaskDiagnostics+0x682>
			{
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
						UARTstr,
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a20:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a22:	685b      	ldr	r3, [r3, #4]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fdb7 	bl	8000598 <__aeabi_f2d>
 8001a2a:	e9c7 0104 	strd	r0, r1, [r7, #16]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a2e:	4b57      	ldr	r3, [pc, #348]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a30:	7d1b      	ldrb	r3, [r3, #20]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a32:	60bb      	str	r3, [r7, #8]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a34:	4b55      	ldr	r3, [pc, #340]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fdad 	bl	8000598 <__aeabi_f2d>
 8001a3e:	4680      	mov	r8, r0
 8001a40:	4689      	mov	r9, r1
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a42:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a44:	7f1b      	ldrb	r3, [r3, #28]
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a46:	461d      	mov	r5, r3
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a4a:	6a1e      	ldr	r6, [r3, #32]
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a50:	603a      	str	r2, [r7, #0]
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a52:	4b4e      	ldr	r3, [pc, #312]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd9e 	bl	8000598 <__aeabi_f2d>
 8001a5c:	4682      	mov	sl, r0
 8001a5e:	468b      	mov	fp, r1
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a60:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd97 	bl	8000598 <__aeabi_f2d>
						GPS.dec_latitude, GPS.ns, GPS.dec_longitude, GPS.ew, GPS.fix, GPS.num_of_satelites, GPS.horizontal_dilution_of_precision, GPS.mean_sea_level_altitude, GPS.altitude_unit);
 8001a6a:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
				sprintf(UARTstr, "%sGPS:\tLat -> %.4f %c\r\n\tLong -> %.4f %c\r\n\tFix -> %d\r\n\tNOS -> %d\r\n\tHDOP -> %.4f\r\n\tAlt -> %.4f %c\r\n",
 8001a70:	461c      	mov	r4, r3
 8001a72:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001a76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a7a:	940e      	str	r4, [sp, #56]	; 0x38
 8001a7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001a80:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001a84:	6839      	ldr	r1, [r7, #0]
 8001a86:	9108      	str	r1, [sp, #32]
 8001a88:	9607      	str	r6, [sp, #28]
 8001a8a:	9506      	str	r5, [sp, #24]
 8001a8c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	9102      	str	r1, [sp, #8]
 8001a94:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a98:	ed8d 7b00 	vstr	d7, [sp]
 8001a9c:	493c      	ldr	r1, [pc, #240]	; (8001b90 <TaskDiagnostics+0x6e4>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00e fa04 	bl	800feac <siprintf>
				DisassembleFloatIntoUint8s(&GPS.dec_latitude, SpiFloatData2, 1);
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4839      	ldr	r0, [pc, #228]	; (8001b94 <TaskDiagnostics+0x6e8>)
 8001aae:	f7ff fceb 	bl	8001488 <DisassembleFloatIntoUint8s>
				SpiIntData[15] = (int8_t)GPS.ns;
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001ab4:	7d1b      	ldrb	r3, [r3, #20]
 8001ab6:	b25a      	sxtb	r2, r3
 8001ab8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001abc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001ac0:	73da      	strb	r2, [r3, #15]
				DisassembleFloatIntoUint8s(&GPS.dec_longitude, SpiFloatData2, 5);
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	2205      	movs	r2, #5
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4830      	ldr	r0, [pc, #192]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001acc:	f7ff fcdc 	bl	8001488 <DisassembleFloatIntoUint8s>
				SpiIntData[16] = (int8_t)GPS.ew;
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001ad2:	7f1b      	ldrb	r3, [r3, #28]
 8001ad4:	b25a      	sxtb	r2, r3
 8001ad6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001ada:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001ade:	741a      	strb	r2, [r3, #16]
				SpiIntData[17] = (int8_t)(GPS.fix & 0x000000ff);
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001aea:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001aee:	745a      	strb	r2, [r3, #17]
				SpiIntData[18] = (int8_t)(GPS.num_of_satelites & 0x000000ff);
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	b25a      	sxtb	r2, r3
 8001af6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001afa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001afe:	749a      	strb	r2, [r3, #18]
				DisassembleFloatIntoUint8s(&GPS.horizontal_dilution_of_precision, SpiFloatData2, 9);
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	2209      	movs	r2, #9
 8001b06:	4619      	mov	r1, r3
 8001b08:	4823      	ldr	r0, [pc, #140]	; (8001b98 <TaskDiagnostics+0x6ec>)
 8001b0a:	f7ff fcbd 	bl	8001488 <DisassembleFloatIntoUint8s>
				DisassembleFloatIntoUint8s(&GPS.mean_sea_level_altitude, SpiFloatData2, 13);
 8001b0e:	f107 0320 	add.w	r3, r7, #32
 8001b12:	220d      	movs	r2, #13
 8001b14:	4619      	mov	r1, r3
 8001b16:	4821      	ldr	r0, [pc, #132]	; (8001b9c <TaskDiagnostics+0x6f0>)
 8001b18:	f7ff fcb6 	bl	8001488 <DisassembleFloatIntoUint8s>
				SpiIntData[19] = (int8_t)GPS.altitude_unit;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <TaskDiagnostics+0x6e0>)
 8001b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b22:	b25a      	sxtb	r2, r3
 8001b24:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001b28:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001b2c:	74da      	strb	r2, [r3, #19]
			}
			osMutexRelease(GpsDataMutexHandle);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <TaskDiagnostics+0x6dc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	e034      	b.n	8001ba0 <TaskDiagnostics+0x6f4>
 8001b36:	bf00      	nop
 8001b38:	200002b8 	.word	0x200002b8
 8001b3c:	200002bc 	.word	0x200002bc
 8001b40:	200002c0 	.word	0x200002c0
 8001b44:	200002f4 	.word	0x200002f4
 8001b48:	200002f8 	.word	0x200002f8
 8001b4c:	200002fc 	.word	0x200002fc
 8001b50:	08015370 	.word	0x08015370
 8001b54:	20000b68 	.word	0x20000b68
 8001b58:	2000021d 	.word	0x2000021d
 8001b5c:	20000b60 	.word	0x20000b60
 8001b60:	20000318 	.word	0x20000318
 8001b64:	2000031c 	.word	0x2000031c
 8001b68:	20000320 	.word	0x20000320
 8001b6c:	20000324 	.word	0x20000324
 8001b70:	080153a4 	.word	0x080153a4
 8001b74:	2000021e 	.word	0x2000021e
 8001b78:	20000b70 	.word	0x20000b70
 8001b7c:	20000360 	.word	0x20000360
 8001b80:	080153e8 	.word	0x080153e8
 8001b84:	2000021f 	.word	0x2000021f
 8001b88:	20000b6c 	.word	0x20000b6c
 8001b8c:	20000388 	.word	0x20000388
 8001b90:	08015400 	.word	0x08015400
 8001b94:	2000038c 	.word	0x2000038c
 8001b98:	200003b0 	.word	0x200003b0
 8001b9c:	200003b4 	.word	0x200003b4
 8001ba0:	f00a fe90 	bl	800c8c4 <osMutexRelease>
		}


		sprintf(UARTstr, "%s\r\n\r\n", UARTstr);
 8001ba4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001ba8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bac:	491b      	ldr	r1, [pc, #108]	; (8001c1c <TaskDiagnostics+0x770>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f00e f97c 	bl	800feac <siprintf>

		// Sending log info
		if (Diag)
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <TaskDiagnostics+0x774>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d02b      	beq.n	8001c14 <TaskDiagnostics+0x768>
		{
			HAL_UART_Transmit(&huart3, UARTstr, strlen(UARTstr), HAL_MAX_DELAY);
 8001bbc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fb7d 	bl	80002c0 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	4814      	ldr	r0, [pc, #80]	; (8001c24 <TaskDiagnostics+0x778>)
 8001bd4:	f009 f8f4 	bl	800adc0 <HAL_UART_Transmit>
			HAL_SPI_Transmit(&hspi1, SpiIntData, 64, HAL_MAX_DELAY);
 8001bd8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001be0:	2240      	movs	r2, #64	; 0x40
 8001be2:	4811      	ldr	r0, [pc, #68]	; (8001c28 <TaskDiagnostics+0x77c>)
 8001be4:	f006 fbfd 	bl	80083e2 <HAL_SPI_Transmit>
			osDelay(10);
 8001be8:	200a      	movs	r0, #10
 8001bea:	f00a fdf0 	bl	800c7ce <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData1, 64, HAL_MAX_DELAY);
 8001bee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <TaskDiagnostics+0x77c>)
 8001bfa:	f006 fbf2 	bl	80083e2 <HAL_SPI_Transmit>
			osDelay(10);
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f00a fde5 	bl	800c7ce <osDelay>
			HAL_SPI_Transmit(&hspi1, SpiFloatData2, 64, HAL_MAX_DELAY);
 8001c04:	f107 0120 	add.w	r1, r7, #32
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	2240      	movs	r2, #64	; 0x40
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <TaskDiagnostics+0x77c>)
 8001c10:	f006 fbe7 	bl	80083e2 <HAL_SPI_Transmit>
		}

		osDelay(250);
 8001c14:	20fa      	movs	r0, #250	; 0xfa
 8001c16:	f00a fdda 	bl	800c7ce <osDelay>
		if(osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001c1a:	e463      	b.n	80014e4 <TaskDiagnostics+0x38>
 8001c1c:	08015464 	.word	0x08015464
 8001c20:	20000214 	.word	0x20000214
 8001c24:	20000a60 	.word	0x20000a60
 8001c28:	200007f0 	.word	0x200007f0

08001c2c <TaskMotor>:

extern TIM_HandleTypeDef htim3;
extern osMutexId RemoteDataMutexHandle;

void TaskMotor(void const *argument)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c34:	2100      	movs	r1, #0
 8001c36:	485e      	ldr	r0, [pc, #376]	; (8001db0 <TaskMotor+0x184>)
 8001c38:	f007 fbba 	bl	80093b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	485c      	ldr	r0, [pc, #368]	; (8001db0 <TaskMotor+0x184>)
 8001c40:	f007 fbb6 	bl	80093b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c44:	2108      	movs	r1, #8
 8001c46:	485a      	ldr	r0, [pc, #360]	; (8001db0 <TaskMotor+0x184>)
 8001c48:	f007 fbb2 	bl	80093b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c4c:	210c      	movs	r1, #12
 8001c4e:	4858      	ldr	r0, [pc, #352]	; (8001db0 <TaskMotor+0x184>)
 8001c50:	f007 fbae 	bl	80093b0 <HAL_TIM_PWM_Start>
	uint8_t ESC1_start_signal;
	uint8_t ESC2_start_signal;
	uint8_t ESC3_start_signal;
	uint8_t ESC4_start_signal;

	TIM3->CCR3 = (uint32_t) (50);
 8001c54:	4b57      	ldr	r3, [pc, #348]	; (8001db4 <TaskMotor+0x188>)
 8001c56:	2232      	movs	r2, #50	; 0x32
 8001c58:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = (uint32_t) (50);
 8001c5a:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <TaskMotor+0x188>)
 8001c5c:	2232      	movs	r2, #50	; 0x32
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CCR1 = (uint32_t) (50);
 8001c60:	4b54      	ldr	r3, [pc, #336]	; (8001db4 <TaskMotor+0x188>)
 8001c62:	2232      	movs	r2, #50	; 0x32
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint32_t) (50);
 8001c66:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <TaskMotor+0x188>)
 8001c68:	2232      	movs	r2, #50	; 0x32
 8001c6a:	639a      	str	r2, [r3, #56]	; 0x38

	/* Infinite loop */
	while (1)
	{
		//Log("Mot - RDMutEnter");
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001c6c:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <TaskMotor+0x18c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00a fdd7 	bl	800c828 <osMutexWait>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 808e 	bne.w	8001d9e <TaskMotor+0x172>
		{
			if (SWA < 10)
 8001c82:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <TaskMotor+0x190>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	d806      	bhi.n	8001c98 <TaskMotor+0x6c>
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c90:	484b      	ldr	r0, [pc, #300]	; (8001dc0 <TaskMotor+0x194>)
 8001c92:	f004 fc9b 	bl	80065cc <HAL_GPIO_WritePin>
 8001c96:	e005      	b.n	8001ca4 <TaskMotor+0x78>

			else
				HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9e:	4848      	ldr	r0, [pc, #288]	; (8001dc0 <TaskMotor+0x194>)
 8001ca0:	f004 fc94 	bl	80065cc <HAL_GPIO_WritePin>

			if (SWB < 10)
 8001ca4:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <TaskMotor+0x198>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	2b09      	cmp	r3, #9
 8001caa:	d803      	bhi.n	8001cb4 <TaskMotor+0x88>
				Rotors = false;
 8001cac:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <TaskMotor+0x19c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e002      	b.n	8001cba <TaskMotor+0x8e>
			else
				Rotors = true;
 8001cb4:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <TaskMotor+0x19c>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]


			if (SWD < 10)
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <TaskMotor+0x1a0>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	d808      	bhi.n	8001cd4 <TaskMotor+0xa8>
			{
				ESC1_start_signal = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
				ESC2_start_signal = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73bb      	strb	r3, [r7, #14]
				ESC3_start_signal = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	737b      	strb	r3, [r7, #13]
				ESC4_start_signal = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	733b      	strb	r3, [r7, #12]
 8001cd2:	e007      	b.n	8001ce4 <TaskMotor+0xb8>
			}
			else
			{
				ESC1_start_signal = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
				ESC2_start_signal = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73bb      	strb	r3, [r7, #14]
				ESC3_start_signal = 2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	737b      	strb	r3, [r7, #13]
				ESC4_start_signal = 3;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	733b      	strb	r3, [r7, #12]
			}


			// Setting PWM speed
			if (Rotors)
 8001ce4:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <TaskMotor+0x19c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d04c      	beq.n	8001d86 <TaskMotor+0x15a>
			{
				TIM3->CCR3 = (uint32_t) ((Throttle_controlled * (50-(ESC1_start_signal-1)) / 50) + (50+ESC1_start_signal-1));
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <TaskMotor+0x1a4>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	4a35      	ldr	r2, [pc, #212]	; (8001dd4 <TaskMotor+0x1a8>)
 8001cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8001d02:	1112      	asrs	r2, r2, #4
 8001d04:	17db      	asrs	r3, r3, #31
 8001d06:	1ad2      	subs	r2, r2, r3
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3331      	adds	r3, #49	; 0x31
 8001d0c:	441a      	add	r2, r3
 8001d0e:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <TaskMotor+0x188>)
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM3->CCR4 = (uint32_t) ((Throttle_controlled * (50-(ESC2_start_signal-1)) / 50) + (50+ESC2_start_signal-1));
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <TaskMotor+0x1a4>)
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	7bbb      	ldrb	r3, [r7, #14]
 8001d1a:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <TaskMotor+0x1a8>)
 8001d24:	fb82 1203 	smull	r1, r2, r2, r3
 8001d28:	1112      	asrs	r2, r2, #4
 8001d2a:	17db      	asrs	r3, r3, #31
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	3331      	adds	r3, #49	; 0x31
 8001d32:	441a      	add	r2, r3
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <TaskMotor+0x188>)
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
				TIM3->CCR1 = (uint32_t) ((Throttle_controlled * (50-(ESC3_start_signal-1)) / 50) + (50+ESC3_start_signal-1));
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <TaskMotor+0x1a4>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <TaskMotor+0x1a8>)
 8001d4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d4e:	1112      	asrs	r2, r2, #4
 8001d50:	17db      	asrs	r3, r3, #31
 8001d52:	1ad2      	subs	r2, r2, r3
 8001d54:	7b7b      	ldrb	r3, [r7, #13]
 8001d56:	3331      	adds	r3, #49	; 0x31
 8001d58:	441a      	add	r2, r3
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <TaskMotor+0x188>)
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR2 = (uint32_t) ((Throttle_controlled * (50-(ESC4_start_signal-1)) / 50) + (50+ESC4_start_signal-1));
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <TaskMotor+0x1a4>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <TaskMotor+0x1a8>)
 8001d70:	fb82 1203 	smull	r1, r2, r2, r3
 8001d74:	1112      	asrs	r2, r2, #4
 8001d76:	17db      	asrs	r3, r3, #31
 8001d78:	1ad2      	subs	r2, r2, r3
 8001d7a:	7b3b      	ldrb	r3, [r7, #12]
 8001d7c:	3331      	adds	r3, #49	; 0x31
 8001d7e:	441a      	add	r2, r3
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <TaskMotor+0x188>)
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
 8001d84:	e00b      	b.n	8001d9e <TaskMotor+0x172>
			}
			else
			{
				TIM3->CCR3 = (uint32_t) (50);
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <TaskMotor+0x188>)
 8001d88:	2232      	movs	r2, #50	; 0x32
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM3->CCR4 = (uint32_t) (50);
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <TaskMotor+0x188>)
 8001d8e:	2232      	movs	r2, #50	; 0x32
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
				TIM3->CCR1 = (uint32_t) (50);
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <TaskMotor+0x188>)
 8001d94:	2232      	movs	r2, #50	; 0x32
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR2 = (uint32_t) (50);
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <TaskMotor+0x188>)
 8001d9a:	2232      	movs	r2, #50	; 0x32
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
		osMutexRelease(RemoteDataMutexHandle);
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <TaskMotor+0x18c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00a fd8e 	bl	800c8c4 <osMutexRelease>

		osDelay(100);
 8001da8:	2064      	movs	r0, #100	; 0x64
 8001daa:	f00a fd10 	bl	800c7ce <osDelay>
		if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001dae:	e75d      	b.n	8001c6c <TaskMotor+0x40>
 8001db0:	20000904 	.word	0x20000904
 8001db4:	40000400 	.word	0x40000400
 8001db8:	20000b64 	.word	0x20000b64
 8001dbc:	2000022a 	.word	0x2000022a
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	2000022c 	.word	0x2000022c
 8001dc8:	20000001 	.word	0x20000001
 8001dcc:	20000230 	.word	0x20000230
 8001dd0:	20000222 	.word	0x20000222
 8001dd4:	51eb851f 	.word	0x51eb851f

08001dd8 <TaskPower>:
void TaskPower(void const *argument)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f00a fcf4 	bl	800c7ce <osDelay>
	{
 8001de6:	e7fb      	b.n	8001de0 <TaskPower+0x8>

08001de8 <TaskRemote>:
// Task Remote
// - Starts Interrupt UART communication with the Receiver
// - If a complete package of data has arrived from the Remote Controller to the Buffer,
//   it processes that and saves it to the corresponding Global variables.
void TaskRemote(void const *argument)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	static uint16_t channelValues[IBUS_MAXCHANNELS];// Output values of the channels (1000 ... 2000)

	HAL_UART_Receive_DMA(&huart2, &Uart2Buffer, 1);
 8001df0:	2201      	movs	r2, #1
 8001df2:	4963      	ldr	r1, [pc, #396]	; (8001f80 <TaskRemote+0x198>)
 8001df4:	4863      	ldr	r0, [pc, #396]	; (8001f84 <TaskRemote+0x19c>)
 8001df6:	f009 f8aa 	bl	800af4e <HAL_UART_Receive_DMA>

	/* Infinite loop */
	while (1)
	{
		Log("R-RBFS-WS");
 8001dfa:	4863      	ldr	r0, [pc, #396]	; (8001f88 <TaskRemote+0x1a0>)
 8001dfc:	f7ff fa7c 	bl	80012f8 <Log>
		if (osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever) == osOK)
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <TaskRemote+0x1a4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00a fdc3 	bl	800c994 <osSemaphoreWait>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f040 80b1 	bne.w	8001f78 <TaskRemote+0x190>
		{
			Log("R-RBFS-WE");
 8001e16:	485e      	ldr	r0, [pc, #376]	; (8001f90 <TaskRemote+0x1a8>)
 8001e18:	f7ff fa6e 	bl	80012f8 <Log>
			// And cycle through the raw data and convert it to actual integer values
			// ibus pattern example:
			// i=0  1     2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25  26 27  28 28  30 31
			//   20 40    DB 5  DC 5  54 5  DC 5  E8 3  D0 7  D2 5  E8 3  DC 5  DC 5   DC 5   DC 5   DC 5   DC 5   DA F3
			// | Header | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 | CH10 | CH11 | CH12 | CH13 | CH14 | Checksum |
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e018      	b.n	8001e54 <TaskRemote+0x6c>
				channelValues[i] = (RemoteBuffer[3 + 2 * i] << 8) + RemoteBuffer[2 + 2 * i];
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	3303      	adds	r3, #3
 8001e28:	4a5a      	ldr	r2, [pc, #360]	; (8001f94 <TaskRemote+0x1ac>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4956      	ldr	r1, [pc, #344]	; (8001f94 <TaskRemote+0x1ac>)
 8001e3c:	5ccb      	ldrb	r3, [r1, r3]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	b299      	uxth	r1, r3
 8001e46:	4a54      	ldr	r2, [pc, #336]	; (8001f98 <TaskRemote+0x1b0>)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < IBUS_MAXCHANNELS; i++)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	dde3      	ble.n	8001e22 <TaskRemote+0x3a>

			// Setting the speed
			Log("R-RDM-WS");
 8001e5a:	4850      	ldr	r0, [pc, #320]	; (8001f9c <TaskRemote+0x1b4>)
 8001e5c:	f7ff fa4c 	bl	80012f8 <Log>
			if (osMutexWait(RemoteDataMutexHandle, osWaitForever) == osOK)
 8001e60:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <TaskRemote+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f00a fcdd 	bl	800c828 <osMutexWait>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d176      	bne.n	8001f62 <TaskRemote+0x17a>
			{
				Log("R-RDM-WE");
 8001e74:	484b      	ldr	r0, [pc, #300]	; (8001fa4 <TaskRemote+0x1bc>)
 8001e76:	f7ff fa3f 	bl	80012f8 <Log>
//						sprintf(str, "%d ", channelValues[i]);
//						HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
//					}
//					HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

				Throttle_in = (channelValues[THROTTLE_CHANNEL] / 20) - 50;
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <TaskRemote+0x1b0>)
 8001e7c:	889b      	ldrh	r3, [r3, #4]
 8001e7e:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <TaskRemote+0x1c0>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b32      	subs	r3, #50	; 0x32
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b47      	ldr	r3, [pc, #284]	; (8001fac <TaskRemote+0x1c4>)
 8001e8e:	801a      	strh	r2, [r3, #0]
				Pitch_in = (channelValues[PITCH_CHANNEL] / 20) - 75;
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <TaskRemote+0x1b0>)
 8001e92:	885b      	ldrh	r3, [r3, #2]
 8001e94:	4a44      	ldr	r2, [pc, #272]	; (8001fa8 <TaskRemote+0x1c0>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b4b      	subs	r3, #75	; 0x4b
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <TaskRemote+0x1c8>)
 8001ea6:	801a      	strh	r2, [r3, #0]
				Roll_in = (channelValues[ROLL_CHANNEL] / 20) - 75;
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <TaskRemote+0x1b0>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	4a3e      	ldr	r2, [pc, #248]	; (8001fa8 <TaskRemote+0x1c0>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b4b      	subs	r3, #75	; 0x4b
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b21a      	sxth	r2, r3
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <TaskRemote+0x1cc>)
 8001ebe:	801a      	strh	r2, [r3, #0]
				Yaw_in = (channelValues[YAW_CHANNEL] / 20) - 75;
 8001ec0:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <TaskRemote+0x1b0>)
 8001ec2:	88db      	ldrh	r3, [r3, #6]
 8001ec4:	4a38      	ldr	r2, [pc, #224]	; (8001fa8 <TaskRemote+0x1c0>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b4b      	subs	r3, #75	; 0x4b
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <TaskRemote+0x1d0>)
 8001ed6:	801a      	strh	r2, [r3, #0]
				SWA = (channelValues[SWA_CHANNEL] / 20) - 50;
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <TaskRemote+0x1b0>)
 8001eda:	891b      	ldrh	r3, [r3, #8]
 8001edc:	4a32      	ldr	r2, [pc, #200]	; (8001fa8 <TaskRemote+0x1c0>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b32      	subs	r3, #50	; 0x32
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <TaskRemote+0x1d4>)
 8001eec:	801a      	strh	r2, [r3, #0]
				SWB = (channelValues[SWB_CHANNEL] / 20) - 50;
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <TaskRemote+0x1b0>)
 8001ef0:	895b      	ldrh	r3, [r3, #10]
 8001ef2:	4a2d      	ldr	r2, [pc, #180]	; (8001fa8 <TaskRemote+0x1c0>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b32      	subs	r3, #50	; 0x32
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <TaskRemote+0x1d8>)
 8001f02:	801a      	strh	r2, [r3, #0]
				SWC = (channelValues[SWC_CHANNEL] / 20) - 50;
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <TaskRemote+0x1b0>)
 8001f06:	899b      	ldrh	r3, [r3, #12]
 8001f08:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <TaskRemote+0x1c0>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b32      	subs	r3, #50	; 0x32
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <TaskRemote+0x1dc>)
 8001f18:	801a      	strh	r2, [r3, #0]
				SWD = (channelValues[SWD_CHANNEL] / 20) - 50;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <TaskRemote+0x1b0>)
 8001f1c:	89db      	ldrh	r3, [r3, #14]
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <TaskRemote+0x1c0>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b32      	subs	r3, #50	; 0x32
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <TaskRemote+0x1e0>)
 8001f2e:	801a      	strh	r2, [r3, #0]
				VRA = (channelValues[VRA_CHANNEL] / 20) - 50;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <TaskRemote+0x1b0>)
 8001f32:	8a1b      	ldrh	r3, [r3, #16]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <TaskRemote+0x1c0>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b32      	subs	r3, #50	; 0x32
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <TaskRemote+0x1e4>)
 8001f44:	801a      	strh	r2, [r3, #0]
				VRB = (channelValues[VRB_CHANNEL] / 20) - 50;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <TaskRemote+0x1b0>)
 8001f48:	8a5b      	ldrh	r3, [r3, #18]
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <TaskRemote+0x1c0>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b32      	subs	r3, #50	; 0x32
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <TaskRemote+0x1e8>)
 8001f5a:	801a      	strh	r2, [r3, #0]

				//char str1[40];
				//sprintf(str1, "In: %d\r\n", channelValues[THROTTLE_CHANNEL]);
				//HAL_UART_Transmit(&huart3, str1, 11, HAL_MAX_DELAY);

				Log("R-RDM-RS");
 8001f5c:	481d      	ldr	r0, [pc, #116]	; (8001fd4 <TaskRemote+0x1ec>)
 8001f5e:	f7ff f9cb 	bl	80012f8 <Log>
			}
			osMutexRelease(RemoteDataMutexHandle);
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <TaskRemote+0x1b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f00a fcac 	bl	800c8c4 <osMutexRelease>
			Log("R-RDM-RE");
 8001f6c:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <TaskRemote+0x1f0>)
 8001f6e:	f7ff f9c3 	bl	80012f8 <Log>
			//sprintf(str2, "Out: %d\r\n\r\n", channelValues[2]);
			//HAL_UART_Transmit(&huart3, str2, 13, HAL_MAX_DELAY);


			// Signal to the UART2 Callback
			RemoteBufferInProgress = true;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <TaskRemote+0x1f4>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
		}

		osDelay(100);
 8001f78:	2064      	movs	r0, #100	; 0x64
 8001f7a:	f00a fc28 	bl	800c7ce <osDelay>
		Log("R-RBFS-WS");
 8001f7e:	e73c      	b.n	8001dfa <TaskRemote+0x12>
 8001f80:	20000364 	.word	0x20000364
 8001f84:	200009d8 	.word	0x200009d8
 8001f88:	0801546c 	.word	0x0801546c
 8001f8c:	20000b80 	.word	0x20000b80
 8001f90:	08015478 	.word	0x08015478
 8001f94:	20000368 	.word	0x20000368
 8001f98:	200004e8 	.word	0x200004e8
 8001f9c:	08015484 	.word	0x08015484
 8001fa0:	20000b64 	.word	0x20000b64
 8001fa4:	08015490 	.word	0x08015490
 8001fa8:	cccccccd 	.word	0xcccccccd
 8001fac:	20000220 	.word	0x20000220
 8001fb0:	20000226 	.word	0x20000226
 8001fb4:	20000228 	.word	0x20000228
 8001fb8:	20000224 	.word	0x20000224
 8001fbc:	2000022a 	.word	0x2000022a
 8001fc0:	2000022c 	.word	0x2000022c
 8001fc4:	2000022e 	.word	0x2000022e
 8001fc8:	20000230 	.word	0x20000230
 8001fcc:	20000232 	.word	0x20000232
 8001fd0:	20000234 	.word	0x20000234
 8001fd4:	0801549c 	.word	0x0801549c
 8001fd8:	080154a8 	.word	0x080154a8
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <TaskSensorData>:
extern osMutexId ImuMutexHandle;
extern osMutexId DistMutexHandle;
extern osMutexId GpsDataMutexHandle;

void TaskSensorData(void const *argument)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	while (1)
	{
		// IMU Data
		if (IsImuAvailable)
 8001fe8:	4ba5      	ldr	r3, [pc, #660]	; (8002280 <TaskSensorData+0x2a0>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d03d      	beq.n	800206c <TaskSensorData+0x8c>
		{
			//Log("SD-IA");
			//Log("SD-IMW-S");
			if (osMutexWait(ImuMutexHandle, osWaitForever) == osOK)
 8001ff0:	4ba4      	ldr	r3, [pc, #656]	; (8002284 <TaskSensorData+0x2a4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00a fc15 	bl	800c828 <osMutexWait>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d12e      	bne.n	8002062 <TaskSensorData+0x82>
			{
				//Log("SD-IMW-E");

				//MPU9250_GetData(AccData, &TempData, GyroData, MagData, false);
				//MPU_readRawData(&hspi2, &MPU9250);
				MPU_readProcessedData(&hspi2, &MPU9250);
 8002004:	49a0      	ldr	r1, [pc, #640]	; (8002288 <TaskSensorData+0x2a8>)
 8002006:	48a1      	ldr	r0, [pc, #644]	; (800228c <TaskSensorData+0x2ac>)
 8002008:	f003 f972 	bl	80052f0 <MPU_readProcessedData>

				AccData[0] = MPU9250.sensorData.ax;
 800200c:	4b9e      	ldr	r3, [pc, #632]	; (8002288 <TaskSensorData+0x2a8>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	4a9f      	ldr	r2, [pc, #636]	; (8002290 <TaskSensorData+0x2b0>)
 8002012:	6013      	str	r3, [r2, #0]
				AccData[1] = MPU9250.sensorData.ay;
 8002014:	4b9c      	ldr	r3, [pc, #624]	; (8002288 <TaskSensorData+0x2a8>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a9d      	ldr	r2, [pc, #628]	; (8002290 <TaskSensorData+0x2b0>)
 800201a:	6053      	str	r3, [r2, #4]
				AccData[2] = MPU9250.sensorData.az;
 800201c:	4b9a      	ldr	r3, [pc, #616]	; (8002288 <TaskSensorData+0x2a8>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	4a9b      	ldr	r2, [pc, #620]	; (8002290 <TaskSensorData+0x2b0>)
 8002022:	6093      	str	r3, [r2, #8]
				TempData = MPU9250.sensorData.temp;
 8002024:	4b98      	ldr	r3, [pc, #608]	; (8002288 <TaskSensorData+0x2a8>)
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	4a9a      	ldr	r2, [pc, #616]	; (8002294 <TaskSensorData+0x2b4>)
 800202a:	6013      	str	r3, [r2, #0]
				GyroData[0] = MPU9250.sensorData.gx;
 800202c:	4b96      	ldr	r3, [pc, #600]	; (8002288 <TaskSensorData+0x2a8>)
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	4a99      	ldr	r2, [pc, #612]	; (8002298 <TaskSensorData+0x2b8>)
 8002032:	6013      	str	r3, [r2, #0]
				GyroData[1] = MPU9250.sensorData.gy;
 8002034:	4b94      	ldr	r3, [pc, #592]	; (8002288 <TaskSensorData+0x2a8>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a97      	ldr	r2, [pc, #604]	; (8002298 <TaskSensorData+0x2b8>)
 800203a:	6053      	str	r3, [r2, #4]
				GyroData[2] = MPU9250.sensorData.gz;
 800203c:	4b92      	ldr	r3, [pc, #584]	; (8002288 <TaskSensorData+0x2a8>)
 800203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002040:	4a95      	ldr	r2, [pc, #596]	; (8002298 <TaskSensorData+0x2b8>)
 8002042:	6093      	str	r3, [r2, #8]

				BMP280_measure(&BMP280);
 8002044:	4895      	ldr	r0, [pc, #596]	; (800229c <TaskSensorData+0x2bc>)
 8002046:	f002 fa27 	bl	8004498 <BMP280_measure>

				BMP_Temp = BMP280.measurement.temperature;
 800204a:	4b94      	ldr	r3, [pc, #592]	; (800229c <TaskSensorData+0x2bc>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4a94      	ldr	r2, [pc, #592]	; (80022a0 <TaskSensorData+0x2c0>)
 8002050:	6013      	str	r3, [r2, #0]
				BMP_Pres = BMP280.measurement.pressure;
 8002052:	4b92      	ldr	r3, [pc, #584]	; (800229c <TaskSensorData+0x2bc>)
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	4a93      	ldr	r2, [pc, #588]	; (80022a4 <TaskSensorData+0x2c4>)
 8002058:	6013      	str	r3, [r2, #0]
				BMP_Alt = BMP280.measurement.altitude;
 800205a:	4b90      	ldr	r3, [pc, #576]	; (800229c <TaskSensorData+0x2bc>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4a92      	ldr	r2, [pc, #584]	; (80022a8 <TaskSensorData+0x2c8>)
 8002060:	6013      	str	r3, [r2, #0]

				//Log("SD-IMR-S");
			}
			osMutexRelease(ImuMutexHandle);
 8002062:	4b88      	ldr	r3, [pc, #544]	; (8002284 <TaskSensorData+0x2a4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f00a fc2c 	bl	800c8c4 <osMutexRelease>
			//Log("SD-IMR-E");
		}

		// Magnetometer Data
		if (IsMagnAvailable)
 800206c:	4b8f      	ldr	r3, [pc, #572]	; (80022ac <TaskSensorData+0x2cc>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80e8 	beq.w	8002246 <TaskSensorData+0x266>
		{
			//Log("SD-MA");
			//Log("SD-MMW-S");
			if (osMutexWait(MagnMutexHandle, osWaitForever) == osOK)
 8002076:	4b8e      	ldr	r3, [pc, #568]	; (80022b0 <TaskSensorData+0x2d0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f04f 31ff 	mov.w	r1, #4294967295
 800207e:	4618      	mov	r0, r3
 8002080:	f00a fbd2 	bl	800c828 <osMutexWait>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 80d8 	bne.w	800223c <TaskSensorData+0x25c>
			{
				//Log("SD-MMW-E");

				struct Vector res = HMC5883L_readRaw();
 800208c:	f001 fee8 	bl	8003e60 <HMC5883L_readRaw>
 8002090:	eef0 6a40 	vmov.f32	s13, s0
 8002094:	eeb0 7a60 	vmov.f32	s14, s1
 8002098:	eef0 7a41 	vmov.f32	s15, s2
 800209c:	edc7 6a03 	vstr	s13, [r7, #12]
 80020a0:	ed87 7a04 	vstr	s14, [r7, #16]
 80020a4:	edc7 7a05 	vstr	s15, [r7, #20]
				MAG_X_RAW = res.XAxis;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a82      	ldr	r2, [pc, #520]	; (80022b4 <TaskSensorData+0x2d4>)
 80020ac:	6013      	str	r3, [r2, #0]
				MAG_Y_RAW = res.YAxis;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4a81      	ldr	r2, [pc, #516]	; (80022b8 <TaskSensorData+0x2d8>)
 80020b2:	6013      	str	r3, [r2, #0]
				MAG_Z_RAW = res.ZAxis;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4a81      	ldr	r2, [pc, #516]	; (80022bc <TaskSensorData+0x2dc>)
 80020b8:	6013      	str	r3, [r2, #0]
				//MAG_Y_NORM = MAG_Y_RAW / magnitude;
				//MAG_Z_NORM = MAG_Z_RAW / magnitude;

				//MAG_dir = atan2f(MAG_X_NORM, MAG_Y_NORM)*180.0f/M_PI;

				if (MAG_Y_RAW != 0)
 80020ba:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <TaskSensorData+0x2d8>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	d067      	beq.n	800219a <TaskSensorData+0x1ba>
				{
					if (MAG_Y_RAW > 0)
 80020ca:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <TaskSensorData+0x2d8>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	dd2b      	ble.n	8002132 <TaskSensorData+0x152>
						MAG_dir = 90.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 80020da:	4b76      	ldr	r3, [pc, #472]	; (80022b4 <TaskSensorData+0x2d4>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	4b75      	ldr	r3, [pc, #468]	; (80022b8 <TaskSensorData+0x2d8>)
 80020e2:	ed93 7a00 	vldr	s14, [r3]
 80020e6:	eef0 0a47 	vmov.f32	s1, s14
 80020ea:	eeb0 0a67 	vmov.f32	s0, s15
 80020ee:	f012 f877 	bl	80141e0 <atan2f>
 80020f2:	eef0 7a40 	vmov.f32	s15, s0
 80020f6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80022c0 <TaskSensorData+0x2e0>
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	ee17 0a90 	vmov	r0, s15
 8002102:	f7fe fa49 	bl	8000598 <__aeabi_f2d>
 8002106:	a35a      	add	r3, pc, #360	; (adr r3, 8002270 <TaskSensorData+0x290>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe fbc6 	bl	800089c <__aeabi_ddiv>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	496a      	ldr	r1, [pc, #424]	; (80022c4 <TaskSensorData+0x2e4>)
 800211a:	f7fe f8dd 	bl	80002d8 <__aeabi_dsub>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f7fe fd87 	bl	8000c38 <__aeabi_d2f>
 800212a:	4603      	mov	r3, r0
 800212c:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <TaskSensorData+0x2e8>)
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e053      	b.n	80021da <TaskSensorData+0x1fa>
					else if (MAG_Y_RAW < 0)
 8002132:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <TaskSensorData+0x2d8>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	d54b      	bpl.n	80021da <TaskSensorData+0x1fa>
						MAG_dir = 270.0f - (atan2f(MAG_X_RAW, MAG_Y_RAW)*180.0f/M_PI);
 8002142:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <TaskSensorData+0x2d4>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <TaskSensorData+0x2d8>)
 800214a:	ed93 7a00 	vldr	s14, [r3]
 800214e:	eef0 0a47 	vmov.f32	s1, s14
 8002152:	eeb0 0a67 	vmov.f32	s0, s15
 8002156:	f012 f843 	bl	80141e0 <atan2f>
 800215a:	eef0 7a40 	vmov.f32	s15, s0
 800215e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80022c0 <TaskSensorData+0x2e0>
 8002162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002166:	ee17 0a90 	vmov	r0, s15
 800216a:	f7fe fa15 	bl	8000598 <__aeabi_f2d>
 800216e:	a340      	add	r3, pc, #256	; (adr r3, 8002270 <TaskSensorData+0x290>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe fb92 	bl	800089c <__aeabi_ddiv>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	a13e      	add	r1, pc, #248	; (adr r1, 8002278 <TaskSensorData+0x298>)
 800217e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002182:	f7fe f8a9 	bl	80002d8 <__aeabi_dsub>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fd53 	bl	8000c38 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <TaskSensorData+0x2e8>)
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	e01f      	b.n	80021da <TaskSensorData+0x1fa>
				}
				else if (MAG_Y_RAW == 0)
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <TaskSensorData+0x2d8>)
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	d117      	bne.n	80021da <TaskSensorData+0x1fa>
				{
					if (MAG_X_RAW > 0)
 80021aa:	4b42      	ldr	r3, [pc, #264]	; (80022b4 <TaskSensorData+0x2d4>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	dd04      	ble.n	80021c4 <TaskSensorData+0x1e4>
						MAG_dir = 0.0f;
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <TaskSensorData+0x2e8>)
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e00a      	b.n	80021da <TaskSensorData+0x1fa>
					else if (MAG_X_RAW < 0)
 80021c4:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <TaskSensorData+0x2d4>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	d502      	bpl.n	80021da <TaskSensorData+0x1fa>
						MAG_dir = 180.0f;
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <TaskSensorData+0x2e8>)
 80021d6:	4a3d      	ldr	r2, [pc, #244]	; (80022cc <TaskSensorData+0x2ec>)
 80021d8:	601a      	str	r2, [r3, #0]

				}

				MAG_dir += declination;
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <TaskSensorData+0x2e8>)
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <TaskSensorData+0x2f0>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <TaskSensorData+0x2e8>)
 80021ec:	edc3 7a00 	vstr	s15, [r3]

				if (MAG_dir < 0)
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <TaskSensorData+0x2e8>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	d509      	bpl.n	8002214 <TaskSensorData+0x234>
					MAG_dir += 360.0f;
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <TaskSensorData+0x2e8>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80022d4 <TaskSensorData+0x2f4>
 800220a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <TaskSensorData+0x2e8>)
 8002210:	edc3 7a00 	vstr	s15, [r3]
				if (MAG_dir > 360.0f)
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <TaskSensorData+0x2e8>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80022d4 <TaskSensorData+0x2f4>
 800221e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	dd09      	ble.n	800223c <TaskSensorData+0x25c>
					MAG_dir -= 360.0f;
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <TaskSensorData+0x2e8>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80022d4 <TaskSensorData+0x2f4>
 8002232:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <TaskSensorData+0x2e8>)
 8002238:	edc3 7a00 	vstr	s15, [r3]

				//Log("SD-MMR-S");
			}
			osMutexRelease(MagnMutexHandle);
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <TaskSensorData+0x2d0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f00a fb3f 	bl	800c8c4 <osMutexRelease>
			//Log("SD-MMR-E");
		}

		// Distance Data
		if (IsDistAvailable)
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <TaskSensorData+0x2f8>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d070      	beq.n	8002330 <TaskSensorData+0x350>
		{
			//Log("SD-DA");
			if (!HCSR04.Triggered)
 800224e:	4b23      	ldr	r3, [pc, #140]	; (80022dc <TaskSensorData+0x2fc>)
 8002250:	7d1b      	ldrb	r3, [r3, #20]
 8002252:	f083 0301 	eor.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d041      	beq.n	80022e0 <TaskSensorData+0x300>
			{
				HCSR04_Trigger(&HCSR04);
 800225c:	481f      	ldr	r0, [pc, #124]	; (80022dc <TaskSensorData+0x2fc>)
 800225e:	f003 fa89 	bl	8005774 <HCSR04_Trigger>
				HCSR04.Triggered = true;
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <TaskSensorData+0x2fc>)
 8002264:	2201      	movs	r2, #1
 8002266:	751a      	strb	r2, [r3, #20]
 8002268:	e062      	b.n	8002330 <TaskSensorData+0x350>
 800226a:	bf00      	nop
 800226c:	f3af 8000 	nop.w
 8002270:	54442d18 	.word	0x54442d18
 8002274:	400921fb 	.word	0x400921fb
 8002278:	00000000 	.word	0x00000000
 800227c:	4070e000 	.word	0x4070e000
 8002280:	2000021c 	.word	0x2000021c
 8002284:	20000b68 	.word	0x20000b68
 8002288:	20000238 	.word	0x20000238
 800228c:	20000854 	.word	0x20000854
 8002290:	200002a8 	.word	0x200002a8
 8002294:	200002b4 	.word	0x200002b4
 8002298:	200002b8 	.word	0x200002b8
 800229c:	200002c4 	.word	0x200002c4
 80022a0:	200002f4 	.word	0x200002f4
 80022a4:	200002f8 	.word	0x200002f8
 80022a8:	200002fc 	.word	0x200002fc
 80022ac:	2000021d 	.word	0x2000021d
 80022b0:	20000b60 	.word	0x20000b60
 80022b4:	20000318 	.word	0x20000318
 80022b8:	2000031c 	.word	0x2000031c
 80022bc:	20000320 	.word	0x20000320
 80022c0:	43340000 	.word	0x43340000
 80022c4:	40568000 	.word	0x40568000
 80022c8:	20000324 	.word	0x20000324
 80022cc:	43340000 	.word	0x43340000
 80022d0:	20000004 	.word	0x20000004
 80022d4:	43b40000 	.word	0x43b40000
 80022d8:	2000021e 	.word	0x2000021e
 80022dc:	20000328 	.word	0x20000328
			}
			else if (HCSR04.Triggered)
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <TaskSensorData+0x3c0>)
 80022e2:	7d1b      	ldrb	r3, [r3, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d023      	beq.n	8002330 <TaskSensorData+0x350>
			{
				//Log("SD-DSW-S");
				if (osSemaphoreWait(DistSemaphoreHandle, osWaitForever) == osOK)
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <TaskSensorData+0x3c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00a fb4f 	bl	800c994 <osSemaphoreWait>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d119      	bne.n	8002330 <TaskSensorData+0x350>
				{
					//Log("SD-DSW-E");
					//Log("SD-DMW-S");
					if (osMutexWait(DistMutexHandle, osWaitForever) == osOK)
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <TaskSensorData+0x3c8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	4618      	mov	r0, r3
 8002306:	f00a fa8f 	bl	800c828 <osMutexWait>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d107      	bne.n	8002320 <TaskSensorData+0x340>
					{
						//Log("SD-DMW-E");

						Distance = HCSR04_Read(&HCSR04);
 8002310:	4823      	ldr	r0, [pc, #140]	; (80023a0 <TaskSensorData+0x3c0>)
 8002312:	f003 fa4a 	bl	80057aa <HCSR04_Read>
 8002316:	eef0 7a40 	vmov.f32	s15, s0
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <TaskSensorData+0x3cc>)
 800231c:	edc3 7a00 	vstr	s15, [r3]

						//Log("SD-DMR-S");
					}
					osMutexRelease(DistMutexHandle);
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <TaskSensorData+0x3c8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f00a facd 	bl	800c8c4 <osMutexRelease>
					//Log("SD-DMR-E");

					HCSR04.Triggered = false;
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <TaskSensorData+0x3c0>)
 800232c:	2200      	movs	r2, #0
 800232e:	751a      	strb	r2, [r3, #20]
				}
			}
		}

		// GPS Data
		if (IsGpsAvailable)
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <TaskSensorData+0x3d0>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02e      	beq.n	8002396 <TaskSensorData+0x3b6>
		{
			//Log("SD-GA");
			if (osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever) == osOK)
 8002338:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <TaskSensorData+0x3d4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	4618      	mov	r0, r3
 8002342:	f00a fb27 	bl	800c994 <osSemaphoreWait>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d124      	bne.n	8002396 <TaskSensorData+0x3b6>
			{
				if (ProcessGPSPackageBuffer)
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <TaskSensorData+0x3d8>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01f      	beq.n	8002396 <TaskSensorData+0x3b6>
				{
					//HAL_UART_Transmit(&huart3, GPSPackageBuffer, GPS_BUFFSIZE, HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), HAL_MAX_DELAY);

					if (osMutexWait(GpsDataMutexHandle, osWaitForever) == osOK)
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <TaskSensorData+0x3dc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f04f 31ff 	mov.w	r1, #4294967295
 800235e:	4618      	mov	r0, r3
 8002360:	f00a fa62 	bl	800c828 <osMutexWait>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <TaskSensorData+0x3a6>
					{
						if (GPS_validate((char*) GPSPackageBuffer))
 800236a:	4815      	ldr	r0, [pc, #84]	; (80023c0 <TaskSensorData+0x3e0>)
 800236c:	f001 fba8 	bl	8003ac0 <GPS_validate>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <TaskSensorData+0x39c>
							GPS_parse((char*) GPSPackageBuffer);
 8002376:	4812      	ldr	r0, [pc, #72]	; (80023c0 <TaskSensorData+0x3e0>)
 8002378:	f001 fc04 	bl	8003b84 <GPS_parse>
						memset(GPSPackageBuffer, 0, sizeof(GPSPackageBuffer));
 800237c:	22ff      	movs	r2, #255	; 0xff
 800237e:	2100      	movs	r1, #0
 8002380:	480f      	ldr	r0, [pc, #60]	; (80023c0 <TaskSensorData+0x3e0>)
 8002382:	f00d fe24 	bl	800ffce <memset>
					}
					osMutexRelease(GpsDataMutexHandle);
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <TaskSensorData+0x3dc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f00a fa9a 	bl	800c8c4 <osMutexRelease>

					ProcessGPSPackageBuffer = false;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <TaskSensorData+0x3d8>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		osDelay(100);
 8002396:	2064      	movs	r0, #100	; 0x64
 8002398:	f00a fa19 	bl	800c7ce <osDelay>
		if (IsImuAvailable)
 800239c:	e624      	b.n	8001fe8 <TaskSensorData+0x8>
 800239e:	bf00      	nop
 80023a0:	20000328 	.word	0x20000328
 80023a4:	20000b78 	.word	0x20000b78
 80023a8:	20000b70 	.word	0x20000b70
 80023ac:	20000360 	.word	0x20000360
 80023b0:	2000021f 	.word	0x2000021f
 80023b4:	20000b7c 	.word	0x20000b7c
 80023b8:	200004e7 	.word	0x200004e7
 80023bc:	20000b6c 	.word	0x20000b6c
 80023c0:	200003e8 	.word	0x200003e8

080023c4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80023d4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <vApplicationGetIdleTaskMemory+0x30>)
 80023da:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	200004fc 	.word	0x200004fc
 80023f4:	2000059c 	.word	0x2000059c

080023f8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a5e      	ldr	r2, [pc, #376]	; (800257c <HAL_UART_RxCpltCallback+0x184>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d168      	bne.n	80024da <HAL_UART_RxCpltCallback+0xe2>
	{
		//Log("U2CB");
		if (RemoteBufferInProgress)
 8002408:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <HAL_UART_RxCpltCallback+0x188>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d05d      	beq.n	80024ce <HAL_UART_RxCpltCallback+0xd6>
		{
			Uart2CallbackCounter++;
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_UART_RxCpltCallback+0x18c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	4a5a      	ldr	r2, [pc, #360]	; (8002584 <HAL_UART_RxCpltCallback+0x18c>)
 800241a:	6013      	str	r3, [r2, #0]

			// If we are just getting the header bytes or the actual data
			if ((RemoteBufferIndex == 0 && Uart2Buffer == 0x20)
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <HAL_UART_RxCpltCallback+0x38>
 8002426:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_UART_RxCpltCallback+0x194>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b20      	cmp	r3, #32
 800242e:	d013      	beq.n	8002458 <HAL_UART_RxCpltCallback+0x60>
					|| (RemoteBufferIndex == 1 && Uart2Buffer == 0x40)
 8002430:	4b55      	ldr	r3, [pc, #340]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d104      	bne.n	8002444 <HAL_UART_RxCpltCallback+0x4c>
 800243a:	4b54      	ldr	r3, [pc, #336]	; (800258c <HAL_UART_RxCpltCallback+0x194>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d009      	beq.n	8002458 <HAL_UART_RxCpltCallback+0x60>
					|| (1 < RemoteBufferIndex && RemoteBufferIndex < IBUS_BUFFSIZE))
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d926      	bls.n	800249c <HAL_UART_RxCpltCallback+0xa4>
 800244e:	4b4e      	ldr	r3, [pc, #312]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b1f      	cmp	r3, #31
 8002456:	d821      	bhi.n	800249c <HAL_UART_RxCpltCallback+0xa4>
			{
				//Log("U2CB-F");
				RemoteBuffer[RemoteBufferIndex] = Uart2Buffer;
 8002458:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	4b4a      	ldr	r3, [pc, #296]	; (800258c <HAL_UART_RxCpltCallback+0x194>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b2d9      	uxtb	r1, r3
 8002466:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_UART_RxCpltCallback+0x198>)
 8002468:	5499      	strb	r1, [r3, r2]

				if (RemoteBufferIndex < IBUS_BUFFSIZE-1)
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b1e      	cmp	r3, #30
 8002472:	d807      	bhi.n	8002484 <HAL_UART_RxCpltCallback+0x8c>
					RemoteBufferIndex++;
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3301      	adds	r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b42      	ldr	r3, [pc, #264]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 8002480:	701a      	strb	r2, [r3, #0]
				if (RemoteBufferIndex < IBUS_BUFFSIZE-1)
 8002482:	e024      	b.n	80024ce <HAL_UART_RxCpltCallback+0xd6>
				else
				{
					RemoteBufferIndex = 0;
 8002484:	4b40      	ldr	r3, [pc, #256]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
					RemoteBufferInProgress = false;
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_UART_RxCpltCallback+0x188>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]

					//Log("U2CB-RBFS-RS");
					// Signal to TaskRemote with the binary semaphore
					osSemaphoreRelease(RemoteBufferFullSemaphoreHandle);
 8002490:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_UART_RxCpltCallback+0x19c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f00a facb 	bl	800ca30 <osSemaphoreRelease>
				if (RemoteBufferIndex < IBUS_BUFFSIZE-1)
 800249a:	e018      	b.n	80024ce <HAL_UART_RxCpltCallback+0xd6>
					//Log("U2CB-RBFS-RE");
				}
			}
			else
			{
				RemoteBufferIndex = 0;
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <HAL_UART_RxCpltCallback+0x190>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]

				char str[32];
				sprintf(str, "UART Receive Error: [%d]\r\n", Uart2CallbackCounter);
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_UART_RxCpltCallback+0x18c>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	493b      	ldr	r1, [pc, #236]	; (8002598 <HAL_UART_RxCpltCallback+0x1a0>)
 80024ac:	4618      	mov	r0, r3
 80024ae:	f00d fcfd 	bl	800feac <siprintf>
				HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fd ff02 	bl	80002c0 <strlen>
 80024bc:	4603      	mov	r3, r0
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f107 0108 	add.w	r1, r7, #8
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	4834      	ldr	r0, [pc, #208]	; (800259c <HAL_UART_RxCpltCallback+0x1a4>)
 80024ca:	f008 fc79 	bl	800adc0 <HAL_UART_Transmit>
			}
		}

		HAL_UART_Receive_IT(&huart2, &Uart2Buffer, 1);
 80024ce:	2201      	movs	r2, #1
 80024d0:	492e      	ldr	r1, [pc, #184]	; (800258c <HAL_UART_RxCpltCallback+0x194>)
 80024d2:	482a      	ldr	r0, [pc, #168]	; (800257c <HAL_UART_RxCpltCallback+0x184>)
 80024d4:	f008 fcf7 	bl	800aec6 <HAL_UART_Receive_IT>
			//HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}

		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
	}
}
 80024d8:	e04b      	b.n	8002572 <HAL_UART_RxCpltCallback+0x17a>
	else if (huart == &huart4)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a30      	ldr	r2, [pc, #192]	; (80025a0 <HAL_UART_RxCpltCallback+0x1a8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d147      	bne.n	8002572 <HAL_UART_RxCpltCallback+0x17a>
		if ((GPSPackageIndex == 0 && Uart4Buffer == '$')
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d104      	bne.n	80024f6 <HAL_UART_RxCpltCallback+0xfe>
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_UART_RxCpltCallback+0x1b0>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b24      	cmp	r3, #36	; 0x24
 80024f4:	d013      	beq.n	800251e <HAL_UART_RxCpltCallback+0x126>
				|| (GPSPackageIndex == 1 && Uart4Buffer == 'G')
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d104      	bne.n	800250a <HAL_UART_RxCpltCallback+0x112>
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_UART_RxCpltCallback+0x1b0>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b47      	cmp	r3, #71	; 0x47
 8002508:	d009      	beq.n	800251e <HAL_UART_RxCpltCallback+0x126>
				|| (1 < GPSPackageIndex && GPSPackageIndex < GPS_BUFFSIZE))
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d926      	bls.n	8002562 <HAL_UART_RxCpltCallback+0x16a>
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2bff      	cmp	r3, #255	; 0xff
 800251c:	d021      	beq.n	8002562 <HAL_UART_RxCpltCallback+0x16a>
			GPSPackageBuffer[GPSPackageIndex] = Uart4Buffer;
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_UART_RxCpltCallback+0x1b0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2d9      	uxtb	r1, r3
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_UART_RxCpltCallback+0x1b4>)
 800252e:	5499      	strb	r1, [r3, r2]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2bfd      	cmp	r3, #253	; 0xfd
 8002538:	d807      	bhi.n	800254a <HAL_UART_RxCpltCallback+0x152>
				GPSPackageIndex++;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002546:	701a      	strb	r2, [r3, #0]
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002548:	e00e      	b.n	8002568 <HAL_UART_RxCpltCallback+0x170>
				GPSPackageIndex = 0;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
				ProcessGPSPackageBuffer = true;
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_UART_RxCpltCallback+0x1b8>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GpsBufferSemaphoreHandle);
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_UART_RxCpltCallback+0x1bc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f00a fa68 	bl	800ca30 <osSemaphoreRelease>
			if (GPSPackageIndex < GPS_BUFFSIZE-1)
 8002560:	e002      	b.n	8002568 <HAL_UART_RxCpltCallback+0x170>
			GPSPackageIndex = 0;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, &Uart4Buffer, 1);
 8002568:	2201      	movs	r2, #1
 800256a:	490f      	ldr	r1, [pc, #60]	; (80025a8 <HAL_UART_RxCpltCallback+0x1b0>)
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <HAL_UART_RxCpltCallback+0x1a8>)
 800256e:	f008 fcee 	bl	800af4e <HAL_UART_Receive_DMA>
}
 8002572:	bf00      	nop
 8002574:	3728      	adds	r7, #40	; 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200009d8 	.word	0x200009d8
 8002580:	20000008 	.word	0x20000008
 8002584:	20000218 	.word	0x20000218
 8002588:	20000365 	.word	0x20000365
 800258c:	20000364 	.word	0x20000364
 8002590:	20000368 	.word	0x20000368
 8002594:	20000b80 	.word	0x20000b80
 8002598:	080154b4 	.word	0x080154b4
 800259c:	20000a60 	.word	0x20000a60
 80025a0:	20000950 	.word	0x20000950
 80025a4:	200003e5 	.word	0x200003e5
 80025a8:	200003e4 	.word	0x200003e4
 80025ac:	200003e8 	.word	0x200003e8
 80025b0:	200004e7 	.word	0x200004e7
 80025b4:	20000b7c 	.word	0x20000b7c

080025b8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a23      	ldr	r2, [pc, #140]	; (8002650 <HAL_UART_ErrorCallback+0x98>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d11c      	bne.n	8002602 <HAL_UART_ErrorCallback+0x4a>
	{
		if (huart->ErrorCode != 0)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03a      	beq.n	8002648 <HAL_UART_ErrorCallback+0x90>
		{
			//Diag = false;

			char str[32];
			sprintf(str, "UART2 Error Callback: %d\r\n", huart->ErrorCode);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	491d      	ldr	r1, [pc, #116]	; (8002654 <HAL_UART_ErrorCallback+0x9c>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f00d fc64 	bl	800feac <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd fe69 	bl	80002c0 <strlen>
 80025ee:	4603      	mov	r3, r0
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f107 0108 	add.w	r1, r7, #8
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	4817      	ldr	r0, [pc, #92]	; (8002658 <HAL_UART_ErrorCallback+0xa0>)
 80025fc:	f008 fbe0 	bl	800adc0 <HAL_UART_Transmit>
			char str[32];
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
		}
	}
}
 8002600:	e022      	b.n	8002648 <HAL_UART_ErrorCallback+0x90>
	else if (huart == &huart4)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <HAL_UART_ErrorCallback+0xa4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d11e      	bne.n	8002648 <HAL_UART_ErrorCallback+0x90>
		if (huart->ErrorCode != 0)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002610:	2b00      	cmp	r3, #0
 8002612:	d019      	beq.n	8002648 <HAL_UART_ErrorCallback+0x90>
			Diag = false;
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_UART_ErrorCallback+0xa8>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
			sprintf(str, "UART4 Error Callback: %lu\r\n", huart->ErrorCode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	490f      	ldr	r1, [pc, #60]	; (8002664 <HAL_UART_ErrorCallback+0xac>)
 8002626:	4618      	mov	r0, r3
 8002628:	f00d fc40 	bl	800feac <siprintf>
			HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd fe45 	bl	80002c0 <strlen>
 8002636:	4603      	mov	r3, r0
 8002638:	b29a      	uxth	r2, r3
 800263a:	f107 0108 	add.w	r1, r7, #8
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <HAL_UART_ErrorCallback+0xa0>)
 8002644:	f008 fbbc 	bl	800adc0 <HAL_UART_Transmit>
}
 8002648:	bf00      	nop
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200009d8 	.word	0x200009d8
 8002654:	080154d0 	.word	0x080154d0
 8002658:	20000a60 	.word	0x20000a60
 800265c:	20000950 	.word	0x20000950
 8002660:	20000214 	.word	0x20000214
 8002664:	080154ec 	.word	0x080154ec

08002668 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <HAL_TIM_IC_CaptureCallback+0x20>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d103      	bne.n	8002680 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_TMR_IC_ISR(&HCSR04, htim);
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4804      	ldr	r0, [pc, #16]	; (800268c <HAL_TIM_IC_CaptureCallback+0x24>)
 800267c:	f002 ff34 	bl	80054e8 <HCSR04_TMR_IC_ISR>
	}
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200008b8 	.word	0x200008b8
 800268c:	20000328 	.word	0x20000328

08002690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b0bc      	sub	sp, #240	; 0xf0
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002696:	f003 f8c0 	bl	800581a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800269a:	f000 f9b7 	bl	8002a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269e:	f000 fcd5 	bl	800304c <MX_GPIO_Init>
  MX_DMA_Init();
 80026a2:	f000 fcb5 	bl	8003010 <MX_DMA_Init>
  MX_SPI1_Init();
 80026a6:	f000 fa5f 	bl	8002b68 <MX_SPI1_Init>
  MX_SPI2_Init();
 80026aa:	f000 fa9b 	bl	8002be4 <MX_SPI2_Init>
  MX_TIM1_Init();
 80026ae:	f000 fad7 	bl	8002c60 <MX_TIM1_Init>
  MX_TIM3_Init();
 80026b2:	f000 fba7 	bl	8002e04 <MX_TIM3_Init>
  MX_UART4_Init();
 80026b6:	f000 fc17 	bl	8002ee8 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80026ba:	f000 fc45 	bl	8002f48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80026be:	f000 fa13 	bl	8002ae8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80026c2:	f000 fc75 	bl	8002fb0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init IMU
  	if(MPU_Init(&hspi2, &MPU9250) == 0 && BMP280_initialize(&hspi2, &BMP280) == 0)
 80026c6:	49b4      	ldr	r1, [pc, #720]	; (8002998 <main+0x308>)
 80026c8:	48b4      	ldr	r0, [pc, #720]	; (800299c <main+0x30c>)
 80026ca:	f002 fbbd 	bl	8004e48 <MPU_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <main+0x5a>
 80026d4:	49b2      	ldr	r1, [pc, #712]	; (80029a0 <main+0x310>)
 80026d6:	48b1      	ldr	r0, [pc, #708]	; (800299c <main+0x30c>)
 80026d8:	f001 fd2a 	bl	8004130 <BMP280_initialize>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d103      	bne.n	80026ea <main+0x5a>
  		IsImuAvailable = true;
 80026e2:	4bb0      	ldr	r3, [pc, #704]	; (80029a4 <main+0x314>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <main+0x60>
  	else
  		IsImuAvailable = false;
 80026ea:	4bae      	ldr	r3, [pc, #696]	; (80029a4 <main+0x314>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

  	// Init Magnetometer
  	if (HMC5883L_Init() == 0)
 80026f0:	f001 fba0 	bl	8003e34 <HMC5883L_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <main+0x72>
  		IsMagnAvailable = true;
 80026fa:	4bab      	ldr	r3, [pc, #684]	; (80029a8 <main+0x318>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e002      	b.n	8002708 <main+0x78>
  	else
  		IsMagnAvailable = false;
 8002702:	4ba9      	ldr	r3, [pc, #676]	; (80029a8 <main+0x318>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]

  	// Init Distance sensor
  	if (HCSR04_Init(&HCSR04, &htim3) == 0)
 8002708:	49a8      	ldr	r1, [pc, #672]	; (80029ac <main+0x31c>)
 800270a:	48a9      	ldr	r0, [pc, #676]	; (80029b0 <main+0x320>)
 800270c:	f002 fe9e 	bl	800544c <HCSR04_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <main+0x8e>
  		IsDistAvailable = false;
 8002716:	4ba7      	ldr	r3, [pc, #668]	; (80029b4 <main+0x324>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e002      	b.n	8002724 <main+0x94>
  	else
  		IsDistAvailable = false;
 800271e:	4ba5      	ldr	r3, [pc, #660]	; (80029b4 <main+0x324>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MagnMutex */
  osMutexDef(MagnMutex);
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MagnMutexHandle = osMutexCreate(osMutex(MagnMutex));
 8002730:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002734:	4618      	mov	r0, r3
 8002736:	f00a f85e 	bl	800c7f6 <osMutexCreate>
 800273a:	4603      	mov	r3, r0
 800273c:	4a9e      	ldr	r2, [pc, #632]	; (80029b8 <main+0x328>)
 800273e:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteDataMutex */
  osMutexDef(RemoteDataMutex);
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RemoteDataMutexHandle = osMutexCreate(osMutex(RemoteDataMutex));
 800274c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002750:	4618      	mov	r0, r3
 8002752:	f00a f850 	bl	800c7f6 <osMutexCreate>
 8002756:	4603      	mov	r3, r0
 8002758:	4a98      	ldr	r2, [pc, #608]	; (80029bc <main+0x32c>)
 800275a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuMutex */
  osMutexDef(ImuMutex);
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  ImuMutexHandle = osMutexCreate(osMutex(ImuMutex));
 8002768:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800276c:	4618      	mov	r0, r3
 800276e:	f00a f842 	bl	800c7f6 <osMutexCreate>
 8002772:	4603      	mov	r3, r0
 8002774:	4a92      	ldr	r2, [pc, #584]	; (80029c0 <main+0x330>)
 8002776:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsDataMutex */
  osMutexDef(GpsDataMutex);
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GpsDataMutexHandle = osMutexCreate(osMutex(GpsDataMutex));
 8002784:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002788:	4618      	mov	r0, r3
 800278a:	f00a f834 	bl	800c7f6 <osMutexCreate>
 800278e:	4603      	mov	r3, r0
 8002790:	4a8c      	ldr	r2, [pc, #560]	; (80029c4 <main+0x334>)
 8002792:	6013      	str	r3, [r2, #0]

  /* definition and creation of DistMutex */
  osMutexDef(DistMutex);
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  DistMutexHandle = osMutexCreate(osMutex(DistMutex));
 80027a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027a4:	4618      	mov	r0, r3
 80027a6:	f00a f826 	bl	800c7f6 <osMutexCreate>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4a86      	ldr	r2, [pc, #536]	; (80029c8 <main+0x338>)
 80027ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferMutex */
  osMutexDef(RemoteBufferMutex);
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RemoteBufferMutexHandle = osMutexCreate(osMutex(RemoteBufferMutex));
 80027bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00a f818 	bl	800c7f6 <osMutexCreate>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a80      	ldr	r2, [pc, #512]	; (80029cc <main+0x33c>)
 80027ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

	osMutexRelease(MagnMutexHandle);
 80027cc:	4b7a      	ldr	r3, [pc, #488]	; (80029b8 <main+0x328>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f00a f877 	bl	800c8c4 <osMutexRelease>
	osMutexRelease(RemoteDataMutexHandle);
 80027d6:	4b79      	ldr	r3, [pc, #484]	; (80029bc <main+0x32c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f00a f872 	bl	800c8c4 <osMutexRelease>
	osMutexRelease(ImuMutexHandle);
 80027e0:	4b77      	ldr	r3, [pc, #476]	; (80029c0 <main+0x330>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f00a f86d 	bl	800c8c4 <osMutexRelease>
	osMutexRelease(GpsDataMutexHandle);
 80027ea:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <main+0x334>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f00a f868 	bl	800c8c4 <osMutexRelease>
	osMutexRelease(RemoteBufferMutexHandle);
 80027f4:	4b75      	ldr	r3, [pc, #468]	; (80029cc <main+0x33c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00a f863 	bl	800c8c4 <osMutexRelease>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DistSemaphore */
  osSemaphoreDef(DistSemaphore);
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  DistSemaphoreHandle = osSemaphoreCreate(osSemaphore(DistSemaphore), 1);
 800280a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800280e:	2101      	movs	r1, #1
 8002810:	4618      	mov	r0, r3
 8002812:	f00a f88d 	bl	800c930 <osSemaphoreCreate>
 8002816:	4603      	mov	r3, r0
 8002818:	4a6d      	ldr	r2, [pc, #436]	; (80029d0 <main+0x340>)
 800281a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GpsBufferSemaphore */
  osSemaphoreDef(GpsBufferSemaphore);
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  GpsBufferSemaphoreHandle = osSemaphoreCreate(osSemaphore(GpsBufferSemaphore), 1);
 8002828:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800282c:	2101      	movs	r1, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f00a f87e 	bl	800c930 <osSemaphoreCreate>
 8002834:	4603      	mov	r3, r0
 8002836:	4a67      	ldr	r2, [pc, #412]	; (80029d4 <main+0x344>)
 8002838:	6013      	str	r3, [r2, #0]

  /* definition and creation of RemoteBufferFullSemaphore */
  osSemaphoreDef(RemoteBufferFullSemaphore);
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RemoteBufferFullSemaphoreHandle = osSemaphoreCreate(osSemaphore(RemoteBufferFullSemaphore), 1);
 8002846:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f00a f86f 	bl	800c930 <osSemaphoreCreate>
 8002852:	4603      	mov	r3, r0
 8002854:	4a60      	ldr	r2, [pc, #384]	; (80029d8 <main+0x348>)
 8002856:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (osSemaphoreGetCount(DistSemaphoreHandle) == 1)
 8002858:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <main+0x340>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f00a f91d 	bl	800ca9c <osSemaphoreGetCount>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <main+0x1e6>
  	  osSemaphoreWait(DistSemaphoreHandle, osWaitForever);
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <main+0x340>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	4618      	mov	r0, r3
 8002872:	f00a f88f 	bl	800c994 <osSemaphoreWait>
  if (osSemaphoreGetCount(GpsBufferSemaphoreHandle) == 1)
 8002876:	4b57      	ldr	r3, [pc, #348]	; (80029d4 <main+0x344>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f00a f90e 	bl	800ca9c <osSemaphoreGetCount>
 8002880:	4603      	mov	r3, r0
 8002882:	2b01      	cmp	r3, #1
 8002884:	d106      	bne.n	8002894 <main+0x204>
  	  osSemaphoreWait(GpsBufferSemaphoreHandle, osWaitForever);
 8002886:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <main+0x344>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 31ff 	mov.w	r1, #4294967295
 800288e:	4618      	mov	r0, r3
 8002890:	f00a f880 	bl	800c994 <osSemaphoreWait>

  if (osSemaphoreGetCount(RemoteBufferFullSemaphoreHandle) == 1)
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <main+0x348>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f00a f8ff 	bl	800ca9c <osSemaphoreGetCount>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <main+0x222>
  	  osSemaphoreWait(RemoteBufferFullSemaphoreHandle, osWaitForever);
 80028a4:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <main+0x348>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00a f871 	bl	800c994 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskSensorData */
  osThreadDef(TaskSensorData, RunTaskSensorData, osPriorityRealtime, 0, 512);
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <main+0x34c>)
 80028b4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80028b8:	461d      	mov	r5, r3
 80028ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSensorDataHandle = osThreadCreate(osThread(TaskSensorData), NULL);
 80028c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f009 ff32 	bl	800c736 <osThreadCreate>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4a42      	ldr	r2, [pc, #264]	; (80029e0 <main+0x350>)
 80028d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskController */
  osThreadDef(TaskController, RunTaskController, osPriorityAboveNormal, 0, 128);
 80028d8:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <main+0x354>)
 80028da:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80028de:	461d      	mov	r5, r3
 80028e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskControllerHandle = osThreadCreate(osThread(TaskController), NULL);
 80028ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f009 ff1f 	bl	800c736 <osThreadCreate>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <main+0x358>)
 80028fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskRemote */
  osThreadDef(TaskRemote, RunTaskRemote, osPriorityHigh, 0, 512);
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <main+0x35c>)
 8002900:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002904:	461d      	mov	r5, r3
 8002906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800290e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRemoteHandle = osThreadCreate(osThread(TaskRemote), NULL);
 8002912:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f009 ff0c 	bl	800c736 <osThreadCreate>
 800291e:	4603      	mov	r3, r0
 8002920:	4a33      	ldr	r2, [pc, #204]	; (80029f0 <main+0x360>)
 8002922:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskMotor */
  osThreadDef(TaskMotor, RunTaskMotor, osPriorityNormal, 0, 128);
 8002924:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <main+0x364>)
 8002926:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800292a:	461d      	mov	r5, r3
 800292c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskMotorHandle = osThreadCreate(osThread(TaskMotor), NULL);
 8002938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f009 fef9 	bl	800c736 <osThreadCreate>
 8002944:	4603      	mov	r3, r0
 8002946:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <main+0x368>)
 8002948:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPower */
  osThreadDef(TaskPower, RunTaskPower, osPriorityBelowNormal, 0, 128);
 800294a:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <main+0x36c>)
 800294c:	f107 041c 	add.w	r4, r7, #28
 8002950:	461d      	mov	r5, r3
 8002952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002956:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800295a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPowerHandle = osThreadCreate(osThread(TaskPower), NULL);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f009 fee6 	bl	800c736 <osThreadCreate>
 800296a:	4603      	mov	r3, r0
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <main+0x370>)
 800296e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDiagnostics */
  osThreadDef(TaskDiagnostics, RunTaskDiagnostics, osPriorityLow, 0, 512);
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <main+0x374>)
 8002972:	463c      	mov	r4, r7
 8002974:	461d      	mov	r5, r3
 8002976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800297a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800297e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDiagnosticsHandle = osThreadCreate(osThread(TaskDiagnostics), NULL);
 8002982:	463b      	mov	r3, r7
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f009 fed5 	bl	800c736 <osThreadCreate>
 800298c:	4603      	mov	r3, r0
 800298e:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <main+0x378>)
 8002990:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002992:	f009 fec9 	bl	800c728 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002996:	e7fe      	b.n	8002996 <main+0x306>
 8002998:	20000238 	.word	0x20000238
 800299c:	20000854 	.word	0x20000854
 80029a0:	200002c4 	.word	0x200002c4
 80029a4:	2000021c 	.word	0x2000021c
 80029a8:	2000021d 	.word	0x2000021d
 80029ac:	20000904 	.word	0x20000904
 80029b0:	20000328 	.word	0x20000328
 80029b4:	2000021e 	.word	0x2000021e
 80029b8:	20000b60 	.word	0x20000b60
 80029bc:	20000b64 	.word	0x20000b64
 80029c0:	20000b68 	.word	0x20000b68
 80029c4:	20000b6c 	.word	0x20000b6c
 80029c8:	20000b70 	.word	0x20000b70
 80029cc:	20000b74 	.word	0x20000b74
 80029d0:	20000b78 	.word	0x20000b78
 80029d4:	20000b7c 	.word	0x20000b7c
 80029d8:	20000b80 	.word	0x20000b80
 80029dc:	08015518 	.word	0x08015518
 80029e0:	20000b48 	.word	0x20000b48
 80029e4:	08015544 	.word	0x08015544
 80029e8:	20000b4c 	.word	0x20000b4c
 80029ec:	0801556c 	.word	0x0801556c
 80029f0:	20000b50 	.word	0x20000b50
 80029f4:	08015594 	.word	0x08015594
 80029f8:	20000b54 	.word	0x20000b54
 80029fc:	080155bc 	.word	0x080155bc
 8002a00:	20000b58 	.word	0x20000b58
 8002a04:	080155e8 	.word	0x080155e8
 8002a08:	20000b5c 	.word	0x20000b5c

08002a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b094      	sub	sp, #80	; 0x50
 8002a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a12:	f107 0320 	add.w	r3, r7, #32
 8002a16:	2230      	movs	r2, #48	; 0x30
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00d fad7 	bl	800ffce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <SystemClock_Config+0xd4>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <SystemClock_Config+0xd4>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <SystemClock_Config+0xd4>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a48:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <SystemClock_Config+0xd8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a50:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <SystemClock_Config+0xd8>)
 8002a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <SystemClock_Config+0xd8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a70:	2302      	movs	r3, #2
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a74:	2300      	movs	r3, #0
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a78:	2310      	movs	r3, #16
 8002a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002a7c:	23d8      	movs	r3, #216	; 0xd8
 8002a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a80:	2302      	movs	r3, #2
 8002a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a84:	2302      	movs	r3, #2
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a88:	f107 0320 	add.w	r3, r7, #32
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 fbf7 	bl	8007280 <HAL_RCC_OscConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a98:	f000 fbc1 	bl	800321e <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a9c:	f004 fba0 	bl	80071e0 <HAL_PWREx_EnableOverDrive>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002aa6:	f000 fbba 	bl	800321e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aaa:	230f      	movs	r3, #15
 8002aac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ac0:	f107 030c 	add.w	r3, r7, #12
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 fe7e 	bl	80077c8 <HAL_RCC_ClockConfig>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002ad2:	f000 fba4 	bl	800321e <Error_Handler>
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3750      	adds	r7, #80	; 0x50
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <MX_I2C1_Init+0x78>)
 8002af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20808DD4;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <MX_I2C1_Init+0x7c>)
 8002af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b22:	480e      	ldr	r0, [pc, #56]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b24:	f003 fd6c 	bl	8006600 <HAL_I2C_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b2e:	f000 fb76 	bl	800321e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b32:	2100      	movs	r1, #0
 8002b34:	4809      	ldr	r0, [pc, #36]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b36:	f004 fabb 	bl	80070b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b40:	f000 fb6d 	bl	800321e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b44:	2100      	movs	r1, #0
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <MX_I2C1_Init+0x74>)
 8002b48:	f004 fafd 	bl	8007146 <HAL_I2CEx_ConfigDigitalFilter>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b52:	f000 fb64 	bl	800321e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2000079c 	.word	0x2000079c
 8002b60:	40005400 	.word	0x40005400
 8002b64:	20808dd4 	.word	0x20808dd4

08002b68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <MX_SPI1_Init+0x78>)
 8002b70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002b82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002b96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002b9e:	2238      	movs	r2, #56	; 0x38
 8002ba0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002bb6:	2207      	movs	r2, #7
 8002bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <MX_SPI1_Init+0x74>)
 8002bc8:	f005 fb60 	bl	800828c <HAL_SPI_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bd2:	f000 fb24 	bl	800321e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200007f0 	.word	0x200007f0
 8002be0:	40013000 	.word	0x40013000

08002be4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002bea:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <MX_SPI2_Init+0x78>)
 8002bec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bf4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002bfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c06:	2202      	movs	r2, #2
 8002c08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c32:	2207      	movs	r2, #7
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_SPI2_Init+0x74>)
 8002c44:	f005 fb22 	bl	800828c <HAL_SPI_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c4e:	f000 fae6 	bl	800321e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000854 	.word	0x20000854
 8002c5c:	40003800 	.word	0x40003800

08002c60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b09a      	sub	sp, #104	; 0x68
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
 8002c90:	615a      	str	r2, [r3, #20]
 8002c92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	222c      	movs	r2, #44	; 0x2c
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f00d f997 	bl	800ffce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ca0:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002ca2:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <MX_TIM1_Init+0x1a0>)
 8002ca4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2160-1;
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002ca8:	f640 026f 	movw	r2, #2159	; 0x86f
 8002cac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cae:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002cb4:	4b51      	ldr	r3, [pc, #324]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbc:	4b4f      	ldr	r3, [pc, #316]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cc2:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cce:	484b      	ldr	r0, [pc, #300]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002cd0:	f006 fa3c 	bl	800914c <HAL_TIM_Base_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002cda:	f000 faa0 	bl	800321e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ce4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4844      	ldr	r0, [pc, #272]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002cec:	f007 f8dc 	bl	8009ea8 <HAL_TIM_ConfigClockSource>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002cf6:	f000 fa92 	bl	800321e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cfa:	4840      	ldr	r0, [pc, #256]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002cfc:	f006 faf6 	bl	80092ec <HAL_TIM_PWM_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002d06:	f000 fa8a 	bl	800321e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4837      	ldr	r0, [pc, #220]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002d1e:	f007 fed7 	bl	800aad0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002d28:	f000 fa79 	bl	800321e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d2c:	2360      	movs	r3, #96	; 0x60
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d34:	2300      	movs	r3, #0
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	482a      	ldr	r0, [pc, #168]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002d52:	f006 ff95 	bl	8009c80 <HAL_TIM_PWM_ConfigChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002d5c:	f000 fa5f 	bl	800321e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d64:	2204      	movs	r2, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4824      	ldr	r0, [pc, #144]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002d6a:	f006 ff89 	bl	8009c80 <HAL_TIM_PWM_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002d74:	f000 fa53 	bl	800321e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	4619      	mov	r1, r3
 8002d80:	481e      	ldr	r0, [pc, #120]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002d82:	f006 ff7d 	bl	8009c80 <HAL_TIM_PWM_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002d8c:	f000 fa47 	bl	800321e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d94:	220c      	movs	r2, #12
 8002d96:	4619      	mov	r1, r3
 8002d98:	4818      	ldr	r0, [pc, #96]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002d9a:	f006 ff71 	bl	8009c80 <HAL_TIM_PWM_ConfigChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002da4:	f000 fa3b 	bl	800321e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4807      	ldr	r0, [pc, #28]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002dde:	f007 ff05 	bl	800abec <HAL_TIMEx_ConfigBreakDeadTime>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8002de8:	f000 fa19 	bl	800321e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <MX_TIM1_Init+0x19c>)
 8002dee:	f000 fb71 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 8002df2:	bf00      	nop
 8002df4:	3768      	adds	r7, #104	; 0x68
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200008b8 	.word	0x200008b8
 8002e00:	40010000 	.word	0x40010000

08002e04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0a:	f107 0320 	add.w	r3, r7, #32
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e32:	4a2c      	ldr	r2, [pc, #176]	; (8002ee4 <MX_TIM3_Init+0xe0>)
 8002e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 8002e36:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e38:	226c      	movs	r2, #108	; 0x6c
 8002e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8002e42:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4a:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e50:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e56:	4822      	ldr	r0, [pc, #136]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e58:	f006 f978 	bl	800914c <HAL_TIM_Base_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002e62:	f000 f9dc 	bl	800321e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e6c:	f107 0320 	add.w	r3, r7, #32
 8002e70:	4619      	mov	r1, r3
 8002e72:	481b      	ldr	r0, [pc, #108]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e74:	f007 f818 	bl	8009ea8 <HAL_TIM_ConfigClockSource>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002e7e:	f000 f9ce 	bl	800321e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002e82:	4817      	ldr	r0, [pc, #92]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002e84:	f006 fb8e 	bl	80095a4 <HAL_TIM_IC_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002e8e:	f000 f9c6 	bl	800321e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480f      	ldr	r0, [pc, #60]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002ea2:	f007 fe15 	bl	800aad0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8002eac:	f000 f9b7 	bl	800321e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4806      	ldr	r0, [pc, #24]	; (8002ee0 <MX_TIM3_Init+0xdc>)
 8002ec8:	f006 fe3d 	bl	8009b46 <HAL_TIM_IC_ConfigChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002ed2:	f000 f9a4 	bl	800321e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	3730      	adds	r7, #48	; 0x30
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000904 	.word	0x20000904
 8002ee4:	40000400 	.word	0x40000400

08002ee8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <MX_UART4_Init+0x58>)
 8002eee:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <MX_UART4_Init+0x5c>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <MX_UART4_Init+0x58>)
 8002ef4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ef8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_UART4_Init+0x58>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_UART4_Init+0x58>)
 8002f2c:	f007 fefa 	bl	800ad24 <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002f36:	f000 f972 	bl	800321e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000950 	.word	0x20000950
 8002f44:	40004c00 	.word	0x40004c00

08002f48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <MX_USART2_UART_Init+0x64>)
 8002f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f6e:	2204      	movs	r2, #4
 8002f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f86:	2210      	movs	r2, #16
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <MX_USART2_UART_Init+0x60>)
 8002f94:	f007 fec6 	bl	800ad24 <HAL_UART_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002f9e:	f000 f93e 	bl	800321e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200009d8 	.word	0x200009d8
 8002fac:	40004400 	.word	0x40004400

08002fb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <MX_USART3_UART_Init+0x5c>)
 8002fb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ff2:	4805      	ldr	r0, [pc, #20]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002ff4:	f007 fe96 	bl	800ad24 <HAL_UART_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ffe:	f000 f90e 	bl	800321e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000a60 	.word	0x20000a60
 800300c:	40004800 	.word	0x40004800

08003010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <MX_DMA_Init+0x38>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <MX_DMA_Init+0x38>)
 800301c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <MX_DMA_Init+0x38>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2105      	movs	r1, #5
 8003032:	2010      	movs	r0, #16
 8003034:	f002 fcfa 	bl	8005a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003038:	2010      	movs	r0, #16
 800303a:	f002 fd13 	bl	8005a64 <HAL_NVIC_EnableIRQ>

}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <MX_GPIO_Init+0x11c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	4a40      	ldr	r2, [pc, #256]	; (8003168 <MX_GPIO_Init+0x11c>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6313      	str	r3, [r2, #48]	; 0x30
 800306e:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <MX_GPIO_Init+0x11c>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <MX_GPIO_Init+0x11c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <MX_GPIO_Init+0x11c>)
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <MX_GPIO_Init+0x11c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003092:	4b35      	ldr	r3, [pc, #212]	; (8003168 <MX_GPIO_Init+0x11c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a34      	ldr	r2, [pc, #208]	; (8003168 <MX_GPIO_Init+0x11c>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <MX_GPIO_Init+0x11c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <MX_GPIO_Init+0x11c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a2e      	ldr	r2, [pc, #184]	; (8003168 <MX_GPIO_Init+0x11c>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <MX_GPIO_Init+0x11c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c2:	4b29      	ldr	r3, [pc, #164]	; (8003168 <MX_GPIO_Init+0x11c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a28      	ldr	r2, [pc, #160]	; (8003168 <MX_GPIO_Init+0x11c>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <MX_GPIO_Init+0x11c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_DOWN_OUT_GPIO_Port, ESC_DOWN_OUT_Pin, GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030e0:	4822      	ldr	r0, [pc, #136]	; (800316c <MX_GPIO_Init+0x120>)
 80030e2:	f003 fa73 	bl	80065cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80030e6:	2200      	movs	r2, #0
 80030e8:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80030ec:	4820      	ldr	r0, [pc, #128]	; (8003170 <MX_GPIO_Init+0x124>)
 80030ee:	f003 fa6d 	bl	80065cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_IN_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_IN_Pin;
 80030f2:	2304      	movs	r3, #4
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_IN_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4619      	mov	r1, r3
 8003104:	481b      	ldr	r0, [pc, #108]	; (8003174 <MX_GPIO_Init+0x128>)
 8003106:	f003 f8c5 	bl	8006294 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_DOWN_OUT_Pin */
  GPIO_InitStruct.Pin = ESC_DOWN_OUT_Pin;
 800310a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	2301      	movs	r3, #1
 8003112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_DOWN_OUT_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	4812      	ldr	r0, [pc, #72]	; (800316c <MX_GPIO_Init+0x120>)
 8003124:	f003 f8b6 	bl	8006294 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_IMU_CSIMU_Pin SPI2_IMU_CSBM_Pin DIS_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SPI2_IMU_CSIMU_Pin|SPI2_IMU_CSBM_Pin|DIS_TRIG_OUT_Pin;
 8003128:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 800312c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800312e:	2301      	movs	r3, #1
 8003130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	4619      	mov	r1, r3
 8003140:	480b      	ldr	r0, [pc, #44]	; (8003170 <MX_GPIO_Init+0x124>)
 8003142:	f003 f8a7 	bl	8006294 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_RDY_IN_Pin */
  GPIO_InitStruct.Pin = MAG_RDY_IN_Pin;
 8003146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800314a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAG_RDY_IN_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4807      	ldr	r0, [pc, #28]	; (8003178 <MX_GPIO_Init+0x12c>)
 800315c:	f003 f89a 	bl	8006294 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003160:	bf00      	nop
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	40021000 	.word	0x40021000
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40020000 	.word	0x40020000
 8003178:	40020400 	.word	0x40020400

0800317c <RunTaskSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RunTaskSensorData */
void RunTaskSensorData(void const * argument)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TaskSensorData(argument);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fe ff2b 	bl	8001fe0 <TaskSensorData>
  /* USER CODE END 5 */
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <RunTaskController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskController */
void RunTaskController(void const * argument)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskController */
	TaskController(argument);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fe f8d4 	bl	8001348 <TaskController>
  /* USER CODE END RunTaskController */
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <RunTaskRemote>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskRemote */
void RunTaskRemote(void const * argument)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskRemote */
	TaskRemote(argument);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fe fe19 	bl	8001de8 <TaskRemote>
  /* USER CODE END RunTaskRemote */
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <RunTaskMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskMotor */
void RunTaskMotor(void const * argument)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskMotor */
	TaskMotor(argument);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe fd30 	bl	8001c2c <TaskMotor>
  /* USER CODE END RunTaskMotor */
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <RunTaskPower>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskPower */
void RunTaskPower(void const * argument)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskPower */
	TaskPower(argument);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fe fdfb 	bl	8001dd8 <TaskPower>
  /* USER CODE END RunTaskPower */
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <RunTaskDiagnostics>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskDiagnostics */
void RunTaskDiagnostics(void const * argument)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskDiagnostics */
	TaskDiagnostics(argument);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe f95a 	bl	80014ac <TaskDiagnostics>
  /* USER CODE END RunTaskDiagnostics */
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003212:	f002 fb0f 	bl	8005834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003222:	b672      	cpsid	i
}
 8003224:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003226:	e7fe      	b.n	8003226 <Error_Handler+0x8>

08003228 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_MspInit+0x4c>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_MspInit+0x4c>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_MspInit+0x4c>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_MspInit+0x4c>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <HAL_MspInit+0x4c>)
 800324c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_MspInit+0x4c>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	210f      	movs	r1, #15
 8003262:	f06f 0001 	mvn.w	r0, #1
 8003266:	f002 fbe1 	bl	8005a2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800

08003278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b0aa      	sub	sp, #168	; 0xa8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f00c fe98 	bl	800ffce <memset>
  if(hi2c->Instance==I2C1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a22      	ldr	r2, [pc, #136]	; (800332c <HAL_I2C_MspInit+0xb4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d13c      	bne.n	8003322 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80032ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032b2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 fc9d 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80032c4:	f7ff ffab 	bl	800321e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c8:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_I2C_MspInit+0xb8>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_I2C_MspInit+0xb8>)
 80032ce:	f043 0302 	orr.w	r3, r3, #2
 80032d2:	6313      	str	r3, [r2, #48]	; 0x30
 80032d4:	4b16      	ldr	r3, [pc, #88]	; (8003330 <HAL_I2C_MspInit+0xb8>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_MAG_SCL_Pin|I2C1_MAG_SDA_Pin;
 80032e0:	23c0      	movs	r3, #192	; 0xc0
 80032e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e6:	2312      	movs	r3, #18
 80032e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f2:	2303      	movs	r3, #3
 80032f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032f8:	2304      	movs	r3, #4
 80032fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003302:	4619      	mov	r1, r3
 8003304:	480b      	ldr	r0, [pc, #44]	; (8003334 <HAL_I2C_MspInit+0xbc>)
 8003306:	f002 ffc5 	bl	8006294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_I2C_MspInit+0xb8>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a08      	ldr	r2, [pc, #32]	; (8003330 <HAL_I2C_MspInit+0xb8>)
 8003310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_I2C_MspInit+0xb8>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003322:	bf00      	nop
 8003324:	37a8      	adds	r7, #168	; 0xa8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40005400 	.word	0x40005400
 8003330:	40023800 	.word	0x40023800
 8003334:	40020400 	.word	0x40020400

08003338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	; 0x30
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2e      	ldr	r2, [pc, #184]	; (8003410 <HAL_SPI_MspInit+0xd8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d128      	bne.n	80033ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800335a:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 8003360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003364:	6453      	str	r3, [r2, #68]	; 0x44
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a27      	ldr	r2, [pc, #156]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_ESP_NSS_Pin|SPI1_ESP_SCK_Pin|SPI1_ESP_MISO_Pin|SPI1_ESP_MOSI_Pin;
 800338a:	23f0      	movs	r3, #240	; 0xf0
 800338c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003396:	2303      	movs	r3, #3
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800339a:	2305      	movs	r3, #5
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	4619      	mov	r1, r3
 80033a4:	481c      	ldr	r0, [pc, #112]	; (8003418 <HAL_SPI_MspInit+0xe0>)
 80033a6:	f002 ff75 	bl	8006294 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033aa:	e02d      	b.n	8003408 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_SPI_MspInit+0xe4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d128      	bne.n	8003408 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033b6:	4b17      	ldr	r3, [pc, #92]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a16      	ldr	r2, [pc, #88]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 80033bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_SPI_MspInit+0xdc>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_IMU_SCK_Pin|SPI2_IMU_MISO_Pin|SPI2_IMU_MOSI_Pin;
 80033e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80033ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f4:	2303      	movs	r3, #3
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033f8:	2305      	movs	r3, #5
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	4619      	mov	r1, r3
 8003402:	4807      	ldr	r0, [pc, #28]	; (8003420 <HAL_SPI_MspInit+0xe8>)
 8003404:	f002 ff46 	bl	8006294 <HAL_GPIO_Init>
}
 8003408:	bf00      	nop
 800340a:	3730      	adds	r7, #48	; 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40013000 	.word	0x40013000
 8003414:	40023800 	.word	0x40023800
 8003418:	40020000 	.word	0x40020000
 800341c:	40003800 	.word	0x40003800
 8003420:	40020400 	.word	0x40020400

08003424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <HAL_TIM_Base_MspInit+0xa0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10c      	bne.n	8003460 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800345e:	e02c      	b.n	80034ba <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_TIM_Base_MspInit+0xa8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d127      	bne.n	80034ba <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800346a:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_TIM_Base_MspInit+0xa4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_DIS_ECHO_CH1_Pin;
 800349a:	2340      	movs	r3, #64	; 0x40
 800349c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349e:	2302      	movs	r3, #2
 80034a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	2300      	movs	r3, #0
 80034a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034aa:	2302      	movs	r3, #2
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_DIS_ECHO_CH1_GPIO_Port, &GPIO_InitStruct);
 80034ae:	f107 0314 	add.w	r3, r7, #20
 80034b2:	4619      	mov	r1, r3
 80034b4:	4806      	ldr	r0, [pc, #24]	; (80034d0 <HAL_TIM_Base_MspInit+0xac>)
 80034b6:	f002 feed 	bl	8006294 <HAL_GPIO_Init>
}
 80034ba:	bf00      	nop
 80034bc:	3728      	adds	r7, #40	; 0x28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40020800 	.word	0x40020800

080034d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a11      	ldr	r2, [pc, #68]	; (8003538 <HAL_TIM_MspPostInit+0x64>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d11c      	bne.n	8003530 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034f6:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_TIM_MspPostInit+0x68>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a10      	ldr	r2, [pc, #64]	; (800353c <HAL_TIM_MspPostInit+0x68>)
 80034fc:	f043 0310 	orr.w	r3, r3, #16
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_TIM_MspPostInit+0x68>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_ESC1_CH1_Pin|TIM1_ESC2_CH2_Pin|TIM1_ESC3_CH3_Pin|TIM1_ESC4_CH4_Pin;
 800350e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003520:	2301      	movs	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003524:	f107 030c 	add.w	r3, r7, #12
 8003528:	4619      	mov	r1, r3
 800352a:	4805      	ldr	r0, [pc, #20]	; (8003540 <HAL_TIM_MspPostInit+0x6c>)
 800352c:	f002 feb2 	bl	8006294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003530:	bf00      	nop
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40010000 	.word	0x40010000
 800353c:	40023800 	.word	0x40023800
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b0ae      	sub	sp, #184	; 0xb8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800355c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f00c fd32 	bl	800ffce <memset>
  if(huart->Instance==UART4)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a83      	ldr	r2, [pc, #524]	; (800377c <HAL_UART_MspInit+0x238>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d144      	bne.n	80035fe <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 800357a:	2340      	movs	r3, #64	; 0x40
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800357e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003582:	4618      	mov	r0, r3
 8003584:	f004 fb38 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800358e:	f7ff fe46 	bl	800321e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003592:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a7a      	ldr	r2, [pc, #488]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_UART_MspInit+0x23c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	4b75      	ldr	r3, [pc, #468]	; (8003780 <HAL_UART_MspInit+0x23c>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a74      	ldr	r2, [pc, #464]	; (8003780 <HAL_UART_MspInit+0x23c>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <HAL_UART_MspInit+0x23c>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_GPS_TX_Pin|UART4_GPS_RX_Pin;
 80035c2:	2303      	movs	r3, #3
 80035c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	2303      	movs	r3, #3
 80035d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035da:	2308      	movs	r3, #8
 80035dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4867      	ldr	r0, [pc, #412]	; (8003784 <HAL_UART_MspInit+0x240>)
 80035e8:	f002 fe54 	bl	8006294 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2106      	movs	r1, #6
 80035f0:	2034      	movs	r0, #52	; 0x34
 80035f2:	f002 fa1b 	bl	8005a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035f6:	2034      	movs	r0, #52	; 0x34
 80035f8:	f002 fa34 	bl	8005a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035fc:	e0b9      	b.n	8003772 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a61      	ldr	r2, [pc, #388]	; (8003788 <HAL_UART_MspInit+0x244>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d172      	bne.n	80036ee <HAL_UART_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800360c:	2304      	movs	r3, #4
 800360e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003614:	4618      	mov	r0, r3
 8003616:	f004 faef 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8003620:	f7ff fdfd 	bl	800321e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003624:	4b56      	ldr	r3, [pc, #344]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	4a55      	ldr	r2, [pc, #340]	; (8003780 <HAL_UART_MspInit+0x23c>)
 800362a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362e:	6413      	str	r3, [r2, #64]	; 0x40
 8003630:	4b53      	ldr	r3, [pc, #332]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800363c:	4b50      	ldr	r3, [pc, #320]	; (8003780 <HAL_UART_MspInit+0x23c>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4a4f      	ldr	r2, [pc, #316]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003642:	f043 0308 	orr.w	r3, r3, #8
 8003646:	6313      	str	r3, [r2, #48]	; 0x30
 8003648:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <HAL_UART_MspInit+0x23c>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_IBUS_TX_Pin|UART2_IBUS_RX_Pin;
 8003654:	2360      	movs	r3, #96	; 0x60
 8003656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003666:	2303      	movs	r3, #3
 8003668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800366c:	2307      	movs	r3, #7
 800366e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003672:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003676:	4619      	mov	r1, r3
 8003678:	4844      	ldr	r0, [pc, #272]	; (800378c <HAL_UART_MspInit+0x248>)
 800367a:	f002 fe0b 	bl	8006294 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800367e:	4b44      	ldr	r3, [pc, #272]	; (8003790 <HAL_UART_MspInit+0x24c>)
 8003680:	4a44      	ldr	r2, [pc, #272]	; (8003794 <HAL_UART_MspInit+0x250>)
 8003682:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <HAL_UART_MspInit+0x24c>)
 8003686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800368a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <HAL_UART_MspInit+0x24c>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003692:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <HAL_UART_MspInit+0x24c>)
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003698:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_UART_MspInit+0x24c>)
 800369a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800369e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036a0:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <HAL_UART_MspInit+0x24c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036a6:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_UART_MspInit+0x24c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80036ac:	4b38      	ldr	r3, [pc, #224]	; (8003790 <HAL_UART_MspInit+0x24c>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036b2:	4b37      	ldr	r3, [pc, #220]	; (8003790 <HAL_UART_MspInit+0x24c>)
 80036b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ba:	4b35      	ldr	r3, [pc, #212]	; (8003790 <HAL_UART_MspInit+0x24c>)
 80036bc:	2200      	movs	r2, #0
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036c0:	4833      	ldr	r0, [pc, #204]	; (8003790 <HAL_UART_MspInit+0x24c>)
 80036c2:	f002 f9dd 	bl	8005a80 <HAL_DMA_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80036cc:	f7ff fda7 	bl	800321e <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <HAL_UART_MspInit+0x24c>)
 80036d4:	675a      	str	r2, [r3, #116]	; 0x74
 80036d6:	4a2e      	ldr	r2, [pc, #184]	; (8003790 <HAL_UART_MspInit+0x24c>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80036dc:	2200      	movs	r2, #0
 80036de:	2106      	movs	r1, #6
 80036e0:	2026      	movs	r0, #38	; 0x26
 80036e2:	f002 f9a3 	bl	8005a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036e6:	2026      	movs	r0, #38	; 0x26
 80036e8:	f002 f9bc 	bl	8005a64 <HAL_NVIC_EnableIRQ>
}
 80036ec:	e041      	b.n	8003772 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a29      	ldr	r2, [pc, #164]	; (8003798 <HAL_UART_MspInit+0x254>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d13c      	bne.n	8003772 <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80036fe:	2310      	movs	r3, #16
 8003700:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003706:	4618      	mov	r0, r3
 8003708:	f004 fa76 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8003712:	f7ff fd84 	bl	800321e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a19      	ldr	r2, [pc, #100]	; (8003780 <HAL_UART_MspInit+0x23c>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a13      	ldr	r2, [pc, #76]	; (8003780 <HAL_UART_MspInit+0x23c>)
 8003734:	f043 0304 	orr.w	r3, r3, #4
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_UART_MspInit+0x23c>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_PC_TX_Pin|UART3_PC_RX_Pin;
 8003746:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800374a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375a:	2303      	movs	r3, #3
 800375c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003760:	2307      	movs	r3, #7
 8003762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003766:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800376a:	4619      	mov	r1, r3
 800376c:	480b      	ldr	r0, [pc, #44]	; (800379c <HAL_UART_MspInit+0x258>)
 800376e:	f002 fd91 	bl	8006294 <HAL_GPIO_Init>
}
 8003772:	bf00      	nop
 8003774:	37b8      	adds	r7, #184	; 0xb8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40004c00 	.word	0x40004c00
 8003780:	40023800 	.word	0x40023800
 8003784:	40020000 	.word	0x40020000
 8003788:	40004400 	.word	0x40004400
 800378c:	40020c00 	.word	0x40020c00
 8003790:	20000ae8 	.word	0x20000ae8
 8003794:	40026088 	.word	0x40026088
 8003798:	40004800 	.word	0x40004800
 800379c:	40020800 	.word	0x40020800

080037a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08e      	sub	sp, #56	; 0x38
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80037b0:	4b34      	ldr	r3, [pc, #208]	; (8003884 <HAL_InitTick+0xe4>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	4a33      	ldr	r2, [pc, #204]	; (8003884 <HAL_InitTick+0xe4>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6413      	str	r3, [r2, #64]	; 0x40
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_InitTick+0xe4>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037c8:	f107 0210 	add.w	r2, r7, #16
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f004 f9de 	bl	8007b94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037e2:	f004 f9af 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 80037e6:	6378      	str	r0, [r7, #52]	; 0x34
 80037e8:	e004      	b.n	80037f4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80037ea:	f004 f9ab 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 80037ee:	4603      	mov	r3, r0
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	4a24      	ldr	r2, [pc, #144]	; (8003888 <HAL_InitTick+0xe8>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	0c9b      	lsrs	r3, r3, #18
 80037fe:	3b01      	subs	r3, #1
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_InitTick+0xec>)
 8003804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003808:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_InitTick+0xec>)
 800380c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003810:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003812:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_InitTick+0xec>)
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_InitTick+0xec>)
 800381a:	2200      	movs	r2, #0
 800381c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_InitTick+0xec>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_InitTick+0xec>)
 8003826:	2200      	movs	r2, #0
 8003828:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800382a:	4818      	ldr	r0, [pc, #96]	; (800388c <HAL_InitTick+0xec>)
 800382c:	f005 fc8e 	bl	800914c <HAL_TIM_Base_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11b      	bne.n	8003876 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800383e:	4813      	ldr	r0, [pc, #76]	; (800388c <HAL_InitTick+0xec>)
 8003840:	f005 fcdc 	bl	80091fc <HAL_TIM_Base_Start_IT>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800384a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800384e:	2b00      	cmp	r3, #0
 8003850:	d111      	bne.n	8003876 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003852:	201c      	movs	r0, #28
 8003854:	f002 f906 	bl	8005a64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	d808      	bhi.n	8003870 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800385e:	2200      	movs	r2, #0
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	201c      	movs	r0, #28
 8003864:	f002 f8e2 	bl	8005a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003868:	4a09      	ldr	r2, [pc, #36]	; (8003890 <HAL_InitTick+0xf0>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e002      	b.n	8003876 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800387a:	4618      	mov	r0, r3
 800387c:	3738      	adds	r7, #56	; 0x38
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	431bde83 	.word	0x431bde83
 800388c:	20000b84 	.word	0x20000b84
 8003890:	20000010 	.word	0x20000010

08003894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003898:	e7fe      	b.n	8003898 <NMI_Handler+0x4>

0800389a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800389e:	e7fe      	b.n	800389e <HardFault_Handler+0x4>

080038a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038a4:	e7fe      	b.n	80038a4 <MemManage_Handler+0x4>

080038a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038aa:	e7fe      	b.n	80038aa <BusFault_Handler+0x4>

080038ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <UsageFault_Handler+0x4>

080038b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80038c4:	4802      	ldr	r0, [pc, #8]	; (80038d0 <DMA1_Stream5_IRQHandler+0x10>)
 80038c6:	f002 fa7b 	bl	8005dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000ae8 	.word	0x20000ae8

080038d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038d8:	4802      	ldr	r0, [pc, #8]	; (80038e4 <TIM2_IRQHandler+0x10>)
 80038da:	f006 f815 	bl	8009908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000b84 	.word	0x20000b84

080038e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <USART2_IRQHandler+0x10>)
 80038ee:	f007 fb73 	bl	800afd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200009d8 	.word	0x200009d8

080038fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <UART4_IRQHandler+0x10>)
 8003902:	f007 fb69 	bl	800afd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000950 	.word	0x20000950

08003910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return 1;
 8003914:	2301      	movs	r3, #1
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <_kill>:

int _kill(int pid, int sig)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800392a:	f00c fc0b 	bl	8010144 <__errno>
 800392e:	4603      	mov	r3, r0
 8003930:	2216      	movs	r2, #22
 8003932:	601a      	str	r2, [r3, #0]
  return -1;
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_exit>:

void _exit (int status)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003948:	f04f 31ff 	mov.w	r1, #4294967295
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ffe7 	bl	8003920 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003952:	e7fe      	b.n	8003952 <_exit+0x12>

08003954 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e00a      	b.n	800397c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003966:	f3af 8000 	nop.w
 800396a:	4601      	mov	r1, r0
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	60ba      	str	r2, [r7, #8]
 8003972:	b2ca      	uxtb	r2, r1
 8003974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3301      	adds	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	dbf0      	blt.n	8003966 <_read+0x12>
  }

  return len;
 8003984:	687b      	ldr	r3, [r7, #4]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e009      	b.n	80039b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	60ba      	str	r2, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3301      	adds	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	dbf1      	blt.n	80039a0 <_write+0x12>
  }
  return len;
 80039bc:	687b      	ldr	r3, [r7, #4]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_close>:

int _close(int file)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ee:	605a      	str	r2, [r3, #4]
  return 0;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_isatty>:

int _isatty(int file)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <_sbrk+0x5c>)
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <_sbrk+0x60>)
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <_sbrk+0x64>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <_sbrk+0x64>)
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <_sbrk+0x68>)
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <_sbrk+0x64>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d207      	bcs.n	8003a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a60:	f00c fb70 	bl	8010144 <__errno>
 8003a64:	4603      	mov	r3, r0
 8003a66:	220c      	movs	r2, #12
 8003a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	e009      	b.n	8003a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <_sbrk+0x64>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <_sbrk+0x64>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <_sbrk+0x64>)
 8003a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20040000 	.word	0x20040000
 8003a90:	00000400 	.word	0x00000400
 8003a94:	20000bd0 	.word	0x20000bd0
 8003a98:	20004a70 	.word	0x20004a70

08003a9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <SystemInit+0x20>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	4a05      	ldr	r2, [pc, #20]	; (8003abc <SystemInit+0x20>)
 8003aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <GPS_validate>:

	return 0;
}

int GPS_validate(char *nmeastr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b24      	cmp	r3, #36	; 0x24
 8003ada:	d103      	bne.n	8003ae4 <GPS_validate+0x24>
		i++;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003ae2:	e00c      	b.n	8003afe <GPS_validate+0x3e>
		return 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e047      	b.n	8003b78 <GPS_validate+0xb8>
	{
		calculated_check ^= nmeastr[i]; // calculate the checksum
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4053      	eors	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
		i++;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3301      	adds	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <GPS_validate+0x5c>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b2a      	cmp	r3, #42	; 0x2a
 8003b14:	d002      	beq.n	8003b1c <GPS_validate+0x5c>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b4a      	cmp	r3, #74	; 0x4a
 8003b1a:	dde5      	ble.n	8003ae8 <GPS_validate+0x28>
	}

	if (i >= 75)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b4a      	cmp	r3, #74	; 0x4a
 8003b20:	dd01      	ble.n	8003b26 <GPS_validate+0x66>
	{
		return 0; // the string was too long so return an error
 8003b22:	2300      	movs	r3, #0
 8003b24:	e028      	b.n	8003b78 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*')
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b30:	d119      	bne.n	8003b66 <GPS_validate+0xa6>
	{
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3302      	adds	r3, #2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	490a      	ldr	r1, [pc, #40]	; (8003b80 <GPS_validate+0xc0>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f00c f9a8 	bl	800feac <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003b5c:	7a3a      	ldrb	r2, [r7, #8]
 8003b5e:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d108      	bne.n	8003b76 <GPS_validate+0xb6>
 8003b64:	e001      	b.n	8003b6a <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 8003b66:	2300      	movs	r3, #0
 8003b68:	e006      	b.n	8003b78 <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 8003b6a:	7a7a      	ldrb	r2, [r7, #9]
 8003b6c:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d101      	bne.n	8003b76 <GPS_validate+0xb6>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <GPS_validate+0xb8>
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	08015604 	.word	0x08015604

08003b84 <GPS_parse>:

void GPS_parse(char *GPSstrParse)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af08      	add	r7, sp, #32
 8003b8a:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8003b8c:	2206      	movs	r2, #6
 8003b8e:	4964      	ldr	r1, [pc, #400]	; (8003d20 <GPS_parse+0x19c>)
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f00c fa24 	bl	800ffde <strncmp>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d138      	bne.n	8003c0e <GPS_parse+0x8a>
	{
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8003b9c:	4b61      	ldr	r3, [pc, #388]	; (8003d24 <GPS_parse+0x1a0>)
 8003b9e:	9307      	str	r3, [sp, #28]
 8003ba0:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <GPS_parse+0x1a4>)
 8003ba2:	9306      	str	r3, [sp, #24]
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <GPS_parse+0x1a8>)
 8003ba6:	9305      	str	r3, [sp, #20]
 8003ba8:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <GPS_parse+0x1ac>)
 8003baa:	9304      	str	r3, [sp, #16]
 8003bac:	4b61      	ldr	r3, [pc, #388]	; (8003d34 <GPS_parse+0x1b0>)
 8003bae:	9303      	str	r3, [sp, #12]
 8003bb0:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <GPS_parse+0x1b4>)
 8003bb2:	9302      	str	r3, [sp, #8]
 8003bb4:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <GPS_parse+0x1b8>)
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <GPS_parse+0x1bc>)
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <GPS_parse+0x1c0>)
 8003bbe:	4a62      	ldr	r2, [pc, #392]	; (8003d48 <GPS_parse+0x1c4>)
 8003bc0:	4962      	ldr	r1, [pc, #392]	; (8003d4c <GPS_parse+0x1c8>)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f00c f992 	bl	800feec <siscanf>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f340 80a4 	ble.w	8003d18 <GPS_parse+0x194>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.fix, &GPS.num_of_satelites, &GPS.horizontal_dilution_of_precision,
				&GPS.mean_sea_level_altitude, &GPS.altitude_unit) >= 1)
		{
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003bd0:	4b5f      	ldr	r3, [pc, #380]	; (8003d50 <GPS_parse+0x1cc>)
 8003bd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bd6:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <GPS_parse+0x1cc>)
 8003bd8:	7d1b      	ldrb	r3, [r3, #20]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8003be0:	f000 f8da 	bl	8003d98 <GPS_nmea_to_dec>
 8003be4:	eef0 7a40 	vmov.f32	s15, s0
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <GPS_parse+0x1cc>)
 8003bea:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003bee:	4b58      	ldr	r3, [pc, #352]	; (8003d50 <GPS_parse+0x1cc>)
 8003bf0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <GPS_parse+0x1cc>)
 8003bf6:	7f1b      	ldrb	r3, [r3, #28]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfe:	f000 f8cb 	bl	8003d98 <GPS_nmea_to_dec>
 8003c02:	eef0 7a40 	vmov.f32	s15, s0
 8003c06:	4b52      	ldr	r3, [pc, #328]	; (8003d50 <GPS_parse+0x1cc>)
 8003c08:	edc3 7a00 	vstr	s15, [r3]
			return;
 8003c0c:	e084      	b.n	8003d18 <GPS_parse+0x194>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8003c0e:	2206      	movs	r2, #6
 8003c10:	4950      	ldr	r1, [pc, #320]	; (8003d54 <GPS_parse+0x1d0>)
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f00c f9e3 	bl	800ffde <strncmp>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d123      	bne.n	8003c66 <GPS_parse+0xe2>
	{
		if (sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time,
 8003c1e:	4b4e      	ldr	r3, [pc, #312]	; (8003d58 <GPS_parse+0x1d4>)
 8003c20:	9305      	str	r3, [sp, #20]
 8003c22:	4b4e      	ldr	r3, [pc, #312]	; (8003d5c <GPS_parse+0x1d8>)
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <GPS_parse+0x1dc>)
 8003c28:	9303      	str	r3, [sp, #12]
 8003c2a:	4b43      	ldr	r3, [pc, #268]	; (8003d38 <GPS_parse+0x1b4>)
 8003c2c:	9302      	str	r3, [sp, #8]
 8003c2e:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <GPS_parse+0x1b8>)
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	4b43      	ldr	r3, [pc, #268]	; (8003d40 <GPS_parse+0x1bc>)
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <GPS_parse+0x1c0>)
 8003c38:	4a43      	ldr	r2, [pc, #268]	; (8003d48 <GPS_parse+0x1c4>)
 8003c3a:	494a      	ldr	r1, [pc, #296]	; (8003d64 <GPS_parse+0x1e0>)
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f00c f955 	bl	800feec <siscanf>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	dd67      	ble.n	8003d18 <GPS_parse+0x194>
				&GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew,
				&GPS.speed_over_ground, &GPS.course_over_ground, &GPS.utc_date) >= 1)
		{
			if (GPS.ns == '\0')
 8003c48:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <GPS_parse+0x1cc>)
 8003c4a:	7d1b      	ldrb	r3, [r3, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <GPS_parse+0xd2>
				GPS.ns = ' ';
 8003c50:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <GPS_parse+0x1cc>)
 8003c52:	2220      	movs	r2, #32
 8003c54:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003c56:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <GPS_parse+0x1cc>)
 8003c58:	7f1b      	ldrb	r3, [r3, #28]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d157      	bne.n	8003d0e <GPS_parse+0x18a>
				GPS.ew = ' ';
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <GPS_parse+0x1cc>)
 8003c60:	2220      	movs	r2, #32
 8003c62:	771a      	strb	r2, [r3, #28]
			return;
 8003c64:	e053      	b.n	8003d0e <GPS_parse+0x18a>
		}

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8003c66:	2206      	movs	r2, #6
 8003c68:	493f      	ldr	r1, [pc, #252]	; (8003d68 <GPS_parse+0x1e4>)
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f00c f9b7 	bl	800ffde <strncmp>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d11f      	bne.n	8003cb6 <GPS_parse+0x132>
	{
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8003c76:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <GPS_parse+0x1e8>)
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <GPS_parse+0x1c4>)
 8003c7c:	9302      	str	r3, [sp, #8]
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <GPS_parse+0x1b4>)
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <GPS_parse+0x1b8>)
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <GPS_parse+0x1bc>)
 8003c88:	4a2e      	ldr	r2, [pc, #184]	; (8003d44 <GPS_parse+0x1c0>)
 8003c8a:	4939      	ldr	r1, [pc, #228]	; (8003d70 <GPS_parse+0x1ec>)
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f00c f92d 	bl	800feec <siscanf>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	dd3f      	ble.n	8003d18 <GPS_parse+0x194>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1)
		{
			if (GPS.ns == '\0')
 8003c98:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <GPS_parse+0x1cc>)
 8003c9a:	7d1b      	ldrb	r3, [r3, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <GPS_parse+0x122>
				GPS.ns = '?';
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <GPS_parse+0x1cc>)
 8003ca2:	223f      	movs	r2, #63	; 0x3f
 8003ca4:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003ca6:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <GPS_parse+0x1cc>)
 8003ca8:	7f1b      	ldrb	r3, [r3, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d131      	bne.n	8003d12 <GPS_parse+0x18e>
				GPS.ew = '?';
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <GPS_parse+0x1cc>)
 8003cb0:	223f      	movs	r2, #63	; 0x3f
 8003cb2:	771a      	strb	r2, [r3, #28]
			return;
 8003cb4:	e02d      	b.n	8003d12 <GPS_parse+0x18e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6))
 8003cb6:	2206      	movs	r2, #6
 8003cb8:	492e      	ldr	r1, [pc, #184]	; (8003d74 <GPS_parse+0x1f0>)
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f00c f98f 	bl	800ffde <strncmp>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d128      	bne.n	8003d18 <GPS_parse+0x194>
	{
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 8003cc6:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <GPS_parse+0x1f4>)
 8003cc8:	9305      	str	r3, [sp, #20]
 8003cca:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <GPS_parse+0x1f8>)
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <GPS_parse+0x1fc>)
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <GPS_parse+0x1dc>)
 8003cd4:	9302      	str	r3, [sp, #8]
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <GPS_parse+0x200>)
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <GPS_parse+0x204>)
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <GPS_parse+0x208>)
 8003ce0:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <GPS_parse+0x20c>)
 8003ce2:	492c      	ldr	r1, [pc, #176]	; (8003d94 <GPS_parse+0x210>)
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f00c f901 	bl	800feec <siscanf>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	dd13      	ble.n	8003d18 <GPS_parse+0x194>
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_over_ground, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
		{
			if (GPS.ns == '\0')
 8003cf0:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <GPS_parse+0x1cc>)
 8003cf2:	7d1b      	ldrb	r3, [r3, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <GPS_parse+0x17a>
				GPS.ns = '?';
 8003cf8:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <GPS_parse+0x1cc>)
 8003cfa:	223f      	movs	r2, #63	; 0x3f
 8003cfc:	751a      	strb	r2, [r3, #20]
			if (GPS.ew == '\0')
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <GPS_parse+0x1cc>)
 8003d00:	7f1b      	ldrb	r3, [r3, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <GPS_parse+0x192>
				GPS.ew = '?';
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <GPS_parse+0x1cc>)
 8003d08:	223f      	movs	r2, #63	; 0x3f
 8003d0a:	771a      	strb	r2, [r3, #28]
			return;
 8003d0c:	e003      	b.n	8003d16 <GPS_parse+0x192>
			return;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <GPS_parse+0x194>
			return;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <GPS_parse+0x194>
			return;
 8003d16:	bf00      	nop
		}
	}
}
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	0801560c 	.word	0x0801560c
 8003d24:	200003b8 	.word	0x200003b8
 8003d28:	200003b4 	.word	0x200003b4
 8003d2c:	200003b0 	.word	0x200003b0
 8003d30:	200003ac 	.word	0x200003ac
 8003d34:	200003a8 	.word	0x200003a8
 8003d38:	200003a4 	.word	0x200003a4
 8003d3c:	200003a0 	.word	0x200003a0
 8003d40:	2000039c 	.word	0x2000039c
 8003d44:	20000398 	.word	0x20000398
 8003d48:	20000394 	.word	0x20000394
 8003d4c:	08015614 	.word	0x08015614
 8003d50:	20000388 	.word	0x20000388
 8003d54:	0801563c 	.word	0x0801563c
 8003d58:	200003c4 	.word	0x200003c4
 8003d5c:	200003c0 	.word	0x200003c0
 8003d60:	200003bc 	.word	0x200003bc
 8003d64:	08015644 	.word	0x08015644
 8003d68:	08015664 	.word	0x08015664
 8003d6c:	200003c8 	.word	0x200003c8
 8003d70:	0801566c 	.word	0x0801566c
 8003d74:	08015688 	.word	0x08015688
 8003d78:	200003e0 	.word	0x200003e0
 8003d7c:	200003dc 	.word	0x200003dc
 8003d80:	200003d9 	.word	0x200003d9
 8003d84:	200003d8 	.word	0x200003d8
 8003d88:	200003d4 	.word	0x200003d4
 8003d8c:	200003d0 	.word	0x200003d0
 8003d90:	200003cc 	.word	0x200003cc
 8003d94:	08015690 	.word	0x08015690

08003d98 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003da2:	4603      	mov	r3, r0
 8003da4:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8003da6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003daa:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003e2c <GPS_nmea_to_dec+0x94>
 8003dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003db6:	ee17 3a90 	vmov	r3, s15
 8003dba:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2264      	movs	r2, #100	; 0x64
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dd4:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8003dd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ddc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003e30 <GPS_nmea_to_dec+0x98>
 8003de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003de4:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003df2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W')
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	2b53      	cmp	r3, #83	; 0x53
 8003e02:	d002      	beq.n	8003e0a <GPS_nmea_to_dec+0x72>
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	2b57      	cmp	r3, #87	; 0x57
 8003e08:	d105      	bne.n	8003e16 <GPS_nmea_to_dec+0x7e>
	{ // return negative
		decimal *= -1;
 8003e0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e0e:	eef1 7a67 	vneg.f32	s15, s15
 8003e12:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	ee07 3a90 	vmov	s15, r3
}
 8003e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	42c80000 	.word	0x42c80000
 8003e30:	42700000 	.word	0x42700000

08003e34 <HMC5883L_Init>:
#include "GY-271/HMC5883L.h"
#include "Globals.h"


uint8_t HMC5883L_Init()
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	HMC5883L_setRange(HMC5883L_RANGE_8_1GA);
 8003e38:	2007      	movs	r0, #7
 8003e3a:	f000 f871 	bl	8003f20 <HMC5883L_setRange>
	HMC5883L_setMeasurementMode(HMC5883L_CONTINOUS);
 8003e3e:	2000      	movs	r0, #0
 8003e40:	f000 f8c8 	bl	8003fd4 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate(HMC5883L_DATARATE_30HZ);
 8003e44:	2005      	movs	r0, #5
 8003e46:	f000 f8e0 	bl	800400a <HMC5883L_setDataRate>
	HMC5883L_setSamples(HMC5883L_SAMPLES_4);
 8003e4a:	2002      	movs	r0, #2
 8003e4c:	f000 f8fc 	bl	8004048 <HMC5883L_setSamples>
	HMC5883L_setOffset(0, 0);
 8003e50:	2100      	movs	r1, #0
 8003e52:	2000      	movs	r0, #0
 8003e54:	f000 f84e 	bl	8003ef4 <HMC5883L_setOffset>

	return 0;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HMC5883L_readRaw>:

Vector HMC5883L_readRaw(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
    v.XAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset;
 8003e66:	2003      	movs	r0, #3
 8003e68:	f000 f946 	bl	80040f8 <HMC5883L_readRegister16>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <HMC5883L_readRaw+0x88>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HMC5883L_readRaw+0x8c>)
 8003e80:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset;
 8003e84:	2007      	movs	r0, #7
 8003e86:	f000 f937 	bl	80040f8 <HMC5883L_readRegister16>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <HMC5883L_readRaw+0x90>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HMC5883L_readRaw+0x8c>)
 8003e9e:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M);
 8003ea2:	2005      	movs	r0, #5
 8003ea4:	f000 f928 	bl	80040f8 <HMC5883L_readRegister16>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <HMC5883L_readRaw+0x8c>)
 8003eb4:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 8003eb8:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <HMC5883L_readRaw+0x8c>)
 8003eba:	f107 0314 	add.w	r3, r7, #20
 8003ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ec4:	6979      	ldr	r1, [r7, #20]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	ee06 1a90 	vmov	s13, r1
 8003ece:	ee07 2a10 	vmov	s14, r2
 8003ed2:	ee07 3a90 	vmov	s15, r3
}
 8003ed6:	eeb0 0a66 	vmov.f32	s0, s13
 8003eda:	eef0 0a47 	vmov.f32	s1, s14
 8003ede:	eeb0 1a67 	vmov.f32	s2, s15
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000310 	.word	0x20000310
 8003eec:	20000304 	.word	0x20000304
 8003ef0:	20000314 	.word	0x20000314

08003ef4 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8003efe:	4a06      	ldr	r2, [pc, #24]	; (8003f18 <HMC5883L_setOffset+0x24>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8003f04:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <HMC5883L_setOffset+0x28>)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6013      	str	r3, [r2, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000310 	.word	0x20000310
 8003f1c:	20000314 	.word	0x20000314

08003f20 <HMC5883L_setRange>:

void HMC5883L_setRange(uint8_t range)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	d833      	bhi.n	8003f98 <HMC5883L_setRange+0x78>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <HMC5883L_setRange+0x18>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f59 	.word	0x08003f59
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f69 	.word	0x08003f69
 8003f44:	08003f71 	.word	0x08003f71
 8003f48:	08003f79 	.word	0x08003f79
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08003f89 	.word	0x08003f89
 8003f54:	08003f91 	.word	0x08003f91
    {
	case HMC5883L_RANGE_0_88GA:
	    mG_per_LSB = 0.073f;
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HMC5883L_setRange+0x90>)
 8003f5a:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <HMC5883L_setRange+0x94>)
 8003f5c:	601a      	str	r2, [r3, #0]
	    break;
 8003f5e:	e01c      	b.n	8003f9a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mG_per_LSB = 0.92f;
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <HMC5883L_setRange+0x90>)
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <HMC5883L_setRange+0x98>)
 8003f64:	601a      	str	r2, [r3, #0]
	    break;
 8003f66:	e018      	b.n	8003f9a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mG_per_LSB = 1.22f;
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HMC5883L_setRange+0x90>)
 8003f6a:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <HMC5883L_setRange+0x9c>)
 8003f6c:	601a      	str	r2, [r3, #0]
	    break;
 8003f6e:	e014      	b.n	8003f9a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mG_per_LSB = 1.52f;
 8003f70:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <HMC5883L_setRange+0x90>)
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <HMC5883L_setRange+0xa0>)
 8003f74:	601a      	str	r2, [r3, #0]
	    break;
 8003f76:	e010      	b.n	8003f9a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mG_per_LSB = 2.27f;
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HMC5883L_setRange+0x90>)
 8003f7a:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <HMC5883L_setRange+0xa4>)
 8003f7c:	601a      	str	r2, [r3, #0]
	    break;
 8003f7e:	e00c      	b.n	8003f9a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mG_per_LSB = 2.56f;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HMC5883L_setRange+0x90>)
 8003f82:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <HMC5883L_setRange+0xa8>)
 8003f84:	601a      	str	r2, [r3, #0]
	    break;
 8003f86:	e008      	b.n	8003f9a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mG_per_LSB = 3.03f;
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HMC5883L_setRange+0x90>)
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HMC5883L_setRange+0xac>)
 8003f8c:	601a      	str	r2, [r3, #0]
	    break;
 8003f8e:	e004      	b.n	8003f9a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mG_per_LSB = 4.35f;
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <HMC5883L_setRange+0x90>)
 8003f92:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <HMC5883L_setRange+0xb0>)
 8003f94:	601a      	str	r2, [r3, #0]
	    break;
 8003f96:	e000      	b.n	8003f9a <HMC5883L_setRange+0x7a>

	default:
	    break;
 8003f98:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	015b      	lsls	r3, r3, #5
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f000 f870 	bl	8004088 <HMC5883L_writeRegister8>
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000300 	.word	0x20000300
 8003fb4:	3d958106 	.word	0x3d958106
 8003fb8:	3f6b851f 	.word	0x3f6b851f
 8003fbc:	3f9c28f6 	.word	0x3f9c28f6
 8003fc0:	3fc28f5c 	.word	0x3fc28f5c
 8003fc4:	401147ae 	.word	0x401147ae
 8003fc8:	4023d70a 	.word	0x4023d70a
 8003fcc:	4041eb85 	.word	0x4041eb85
 8003fd0:	408b3333 	.word	0x408b3333

08003fd4 <HMC5883L_setMeasurementMode>:
{
    return (uint8_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(uint8_t mode)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8003fde:	2002      	movs	r0, #2
 8003fe0:	f000 f86e 	bl	80040c0 <HMC5883L_readRegister8>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
    value &= 0b11111100;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	f000 f843 	bl	8004088 <HMC5883L_writeRegister8>
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HMC5883L_setDataRate>:

    return value;
}

void HMC5883L_setDataRate(uint8_t dataRate)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	4603      	mov	r3, r0
 8004012:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8004014:	2000      	movs	r0, #0
 8004016:	f000 f853 	bl	80040c0 <HMC5883L_readRegister8>
 800401a:	4603      	mov	r3, r0
 800401c:	73fb      	strb	r3, [r7, #15]
    value &= 0b11100011;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	f023 031c 	bic.w	r3, r3, #28
 8004024:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	b25a      	sxtb	r2, r3
 800402c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004030:	4313      	orrs	r3, r2
 8004032:	b25b      	sxtb	r3, r3
 8004034:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	4619      	mov	r1, r3
 800403a:	2000      	movs	r0, #0
 800403c:	f000 f824 	bl	8004088 <HMC5883L_writeRegister8>
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HMC5883L_setSamples>:

    return value;
}

void HMC5883L_setSamples(uint8_t samples)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8004052:	2000      	movs	r0, #0
 8004054:	f000 f834 	bl	80040c0 <HMC5883L_readRegister8>
 8004058:	4603      	mov	r3, r0
 800405a:	73fb      	strb	r3, [r7, #15]
    value &= 0b10011111;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004062:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	015b      	lsls	r3, r3, #5
 8004068:	b25a      	sxtb	r2, r3
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406e:	4313      	orrs	r3, r2
 8004070:	b25b      	sxtb	r3, r3
 8004072:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	4619      	mov	r1, r3
 8004078:	2000      	movs	r0, #0
 800407a:	f000 f805 	bl	8004088 <HMC5883L_writeRegister8>
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HMC5883L_writeRegister8>:
    return value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af04      	add	r7, sp, #16
 800408e:	4603      	mov	r3, r0
 8004090:	460a      	mov	r2, r1
 8004092:	71fb      	strb	r3, [r7, #7]
 8004094:	4613      	mov	r3, r2
 8004096:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value, 1, 500);
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	b29a      	uxth	r2, r3
 800409c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	2301      	movs	r3, #1
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	1dbb      	adds	r3, r7, #6
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2301      	movs	r3, #1
 80040ac:	213c      	movs	r1, #60	; 0x3c
 80040ae:	4803      	ldr	r0, [pc, #12]	; (80040bc <HMC5883L_writeRegister8+0x34>)
 80040b0:	f002 fb36 	bl	8006720 <HAL_I2C_Mem_Write>
}
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	2000079c 	.word	0x2000079c

080040c0 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af04      	add	r7, sp, #16
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 1, 500);
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040d2:	9302      	str	r3, [sp, #8]
 80040d4:	2301      	movs	r3, #1
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	f107 030f 	add.w	r3, r7, #15
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	2301      	movs	r3, #1
 80040e0:	213c      	movs	r1, #60	; 0x3c
 80040e2:	4804      	ldr	r0, [pc, #16]	; (80040f4 <HMC5883L_readRegister8+0x34>)
 80040e4:	f002 fc30 	bl	8006948 <HAL_I2C_Mem_Read>
    return value;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	2000079c 	.word	0x2000079c

080040f8 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af04      	add	r7, sp, #16
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]
    int16_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1, &value, 2, 500);
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	b29a      	uxth	r2, r3
 8004106:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	2302      	movs	r3, #2
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	f107 030e 	add.w	r3, r7, #14
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	2301      	movs	r3, #1
 8004118:	213c      	movs	r1, #60	; 0x3c
 800411a:	4804      	ldr	r0, [pc, #16]	; (800412c <HMC5883L_readRegister16+0x34>)
 800411c:	f002 fc14 	bl	8006948 <HAL_I2C_Mem_Read>
    return value;
 8004120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	2000079c 	.word	0x2000079c

08004130 <BMP280_initialize>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280_initialize(SPI_HandleTypeDef *SPIx, BMP280_t *bmp280)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	// Disable MPU9250
	HAL_GPIO_WritePin(SPI2_IMU_CSIMU_GPIO_Port, SPI2_IMU_CSIMU_Pin, GPIO_PIN_SET);
 800413a:	2201      	movs	r2, #1
 800413c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004140:	481a      	ldr	r0, [pc, #104]	; (80041ac <BMP280_initialize+0x7c>)
 8004142:	f002 fa43 	bl	80065cc <HAL_GPIO_WritePin>

	bmp280->spiHandle = SPIx;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	601a      	str	r2, [r3, #0]

    if (BMP280_getID(bmp280) != BMP280_CHIP_ID)
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f000 f83c 	bl	80041ca <BMP280_getID>
 8004152:	4603      	mov	r3, r0
 8004154:	2b58      	cmp	r3, #88	; 0x58
 8004156:	d001      	beq.n	800415c <BMP280_initialize+0x2c>
    {
        return 1;
 8004158:	2301      	movs	r3, #1
 800415a:	e023      	b.n	80041a4 <BMP280_initialize+0x74>
    }

    // Reset device and wait
    BMP280_reset(bmp280);
 800415c:	6838      	ldr	r0, [r7, #0]
 800415e:	f000 f827 	bl	80041b0 <BMP280_reset>
    HAL_Delay(500);
 8004162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004166:	f001 fb85 	bl	8005874 <HAL_Delay>

    // BEGIN OF CONFIGURATION ----------------------------------
    BMP280_setPressureOversampling(bmp280, oversampling_x16);
 800416a:	2105      	movs	r1, #5
 800416c:	6838      	ldr	r0, [r7, #0]
 800416e:	f000 f8ef 	bl	8004350 <BMP280_setPressureOversampling>
    BMP280_setTemperatureOversampling(bmp280, oversampling_x2);
 8004172:	2102      	movs	r1, #2
 8004174:	6838      	ldr	r0, [r7, #0]
 8004176:	f000 f90c 	bl	8004392 <BMP280_setTemperatureOversampling>

    BMP280_setPowerMode(bmp280, mode_normal);
 800417a:	2103      	movs	r1, #3
 800417c:	6838      	ldr	r0, [r7, #0]
 800417e:	f000 f929 	bl	80043d4 <BMP280_setPowerMode>
    BMP280_setFilterCoefficient(bmp280, filter_coeff_16);
 8004182:	2104      	movs	r1, #4
 8004184:	6838      	ldr	r0, [r7, #0]
 8004186:	f000 f966 	bl	8004456 <BMP280_setFilterCoefficient>
    BMP280_setStandbyTime(bmp280, standby_time_500us);
 800418a:	2100      	movs	r1, #0
 800418c:	6838      	ldr	r0, [r7, #0]
 800418e:	f000 f941 	bl	8004414 <BMP280_setStandbyTime>
    // END OF CONFIGURATION --------------------------

    BMP280_readCompensationParameters(bmp280);
 8004192:	6838      	ldr	r0, [r7, #0]
 8004194:	f000 f826 	bl	80041e4 <BMP280_readCompensationParameters>
    BMP280_setReferencePressure(bmp280, 100, 50);
 8004198:	2232      	movs	r2, #50	; 0x32
 800419a:	2164      	movs	r1, #100	; 0x64
 800419c:	6838      	ldr	r0, [r7, #0]
 800419e:	f000 f89e 	bl	80042de <BMP280_setReferencePressure>

    return 0;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40020c00 	.word	0x40020c00

080041b0 <BMP280_reset>:

/** Perform power-on reset procedure */
void BMP280_reset(BMP280_t *bmp280)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
    BMP280_writeRegister(bmp280, BMP280_REG_RESET, BMP280_RESET_VALUE);
 80041b8:	22b6      	movs	r2, #182	; 0xb6
 80041ba:	21e0      	movs	r1, #224	; 0xe0
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fa25 	bl	800460c <BMP280_writeRegister>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <BMP280_getID>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280_getID(BMP280_t *bmp280)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
    return BMP280_readRegister(bmp280, BMP280_REG_ID);
 80041d2:	21d0      	movs	r1, #208	; 0xd0
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f9fd 	bl	80045d4 <BMP280_readRegister>
 80041da:	4603      	mov	r3, r0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <BMP280_readCompensationParameters>:

void BMP280_readCompensationParameters(BMP280_t *bmp280)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
    uint8_t buf[24];
    BMP280_readMBRegister(bmp280, BMP280_REG_CALIB, buf, 24);
 80041ec:	f107 0208 	add.w	r2, r7, #8
 80041f0:	2318      	movs	r3, #24
 80041f2:	2188      	movs	r1, #136	; 0x88
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fa28 	bl	800464a <BMP280_readMBRegister>
    bmp280->compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 80041fa:	7a7b      	ldrb	r3, [r7, #9]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	b21a      	sxth	r2, r3
 8004200:	7a3b      	ldrb	r3, [r7, #8]
 8004202:	b21b      	sxth	r3, r3
 8004204:	4313      	orrs	r3, r2
 8004206:	b21b      	sxth	r3, r3
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	831a      	strh	r2, [r3, #24]
    bmp280->compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	b21a      	sxth	r2, r3
 8004214:	7abb      	ldrb	r3, [r7, #10]
 8004216:	b21b      	sxth	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	b21a      	sxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	835a      	strh	r2, [r3, #26]
    bmp280->compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 8004220:	7b7b      	ldrb	r3, [r7, #13]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	b21a      	sxth	r2, r3
 8004226:	7b3b      	ldrb	r3, [r7, #12]
 8004228:	b21b      	sxth	r3, r3
 800422a:	4313      	orrs	r3, r2
 800422c:	b21a      	sxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	839a      	strh	r2, [r3, #28]
    bmp280->compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	b21a      	sxth	r2, r3
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	b21b      	sxth	r3, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	b21b      	sxth	r3, r3
 8004240:	b29a      	uxth	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	83da      	strh	r2, [r3, #30]
    bmp280->compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 8004246:	7c7b      	ldrb	r3, [r7, #17]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	b21a      	sxth	r2, r3
 800424c:	7c3b      	ldrb	r3, [r7, #16]
 800424e:	b21b      	sxth	r3, r3
 8004250:	4313      	orrs	r3, r2
 8004252:	b21a      	sxth	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	841a      	strh	r2, [r3, #32]
    bmp280->compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	b21a      	sxth	r2, r3
 800425e:	7cbb      	ldrb	r3, [r7, #18]
 8004260:	b21b      	sxth	r3, r3
 8004262:	4313      	orrs	r3, r2
 8004264:	b21a      	sxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	845a      	strh	r2, [r3, #34]	; 0x22
    bmp280->compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 800426a:	7d7b      	ldrb	r3, [r7, #21]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	b21a      	sxth	r2, r3
 8004270:	7d3b      	ldrb	r3, [r7, #20]
 8004272:	b21b      	sxth	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b21a      	sxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280->compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	b21a      	sxth	r2, r3
 8004282:	7dbb      	ldrb	r3, [r7, #22]
 8004284:	b21b      	sxth	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b21a      	sxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	84da      	strh	r2, [r3, #38]	; 0x26
    bmp280->compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 800428e:	7e7b      	ldrb	r3, [r7, #25]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	b21a      	sxth	r2, r3
 8004294:	7e3b      	ldrb	r3, [r7, #24]
 8004296:	b21b      	sxth	r3, r3
 8004298:	4313      	orrs	r3, r2
 800429a:	b21a      	sxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28
    bmp280->compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 80042a0:	7efb      	ldrb	r3, [r7, #27]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	b21a      	sxth	r2, r3
 80042a6:	7ebb      	ldrb	r3, [r7, #26]
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	4313      	orrs	r3, r2
 80042ac:	b21a      	sxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    bmp280->compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 80042b2:	7f7b      	ldrb	r3, [r7, #29]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	b21a      	sxth	r2, r3
 80042b8:	7f3b      	ldrb	r3, [r7, #28]
 80042ba:	b21b      	sxth	r3, r3
 80042bc:	4313      	orrs	r3, r2
 80042be:	b21a      	sxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    bmp280->compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 80042c4:	7ffb      	ldrb	r3, [r7, #31]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	b21a      	sxth	r2, r3
 80042ca:	7fbb      	ldrb	r3, [r7, #30]
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	4313      	orrs	r3, r2
 80042d0:	b21a      	sxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 80042d6:	bf00      	nop
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <BMP280_setReferencePressure>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280_setReferencePressure(BMP280_t *bmp280, uint16_t samples, uint8_t delay)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	807b      	strh	r3, [r7, #2]
 80042ea:	4613      	mov	r3, r2
 80042ec:	707b      	strb	r3, [r7, #1]
    HAL_Delay(500);
 80042ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042f2:	f001 fabf 	bl	8005874 <HAL_Delay>
    float sum = 0;
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	e012      	b.n	8004328 <BMP280_setReferencePressure+0x4a>
    {
        BMP280_measure(bmp280);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8c8 	bl	8004498 <BMP280_measure>
        sum += bmp280->measurement.pressure;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	edd3 7a04 	vldr	s15, [r3, #16]
 800430e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004316:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(delay);
 800431a:	787b      	ldrb	r3, [r7, #1]
 800431c:	4618      	mov	r0, r3
 800431e:	f001 faa9 	bl	8005874 <HAL_Delay>
    for (int i = 0; i < samples; i++)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3301      	adds	r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	887b      	ldrh	r3, [r7, #2]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	dbe8      	blt.n	8004302 <BMP280_setReferencePressure+0x24>
    }
    bmp280->p_reference = sum / samples;
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800433a:	edd7 6a03 	vldr	s13, [r7, #12]
 800433e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <BMP280_setPressureOversampling>:

/** Configure pressure oversampling */
void BMP280_setPressureOversampling(BMP280_t *bmp280, uint8_t osrs_p)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 800435c:	21f4      	movs	r1, #244	; 0xf4
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f938 	bl	80045d4 <BMP280_readRegister>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
 8004368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436c:	f023 031c 	bic.w	r3, r3, #28
 8004370:	b25a      	sxtb	r2, r3
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	b25b      	sxtb	r3, r3
 8004378:	4313      	orrs	r3, r2
 800437a:	b25b      	sxtb	r3, r3
 800437c:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	461a      	mov	r2, r3
 8004382:	21f4      	movs	r1, #244	; 0xf4
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f941 	bl	800460c <BMP280_writeRegister>
}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <BMP280_setTemperatureOversampling>:

/** Configure temperature oversampling */
void BMP280_setTemperatureOversampling(BMP280_t *bmp280, uint8_t osrs_t)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 800439e:	21f4      	movs	r1, #244	; 0xf4
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f917 	bl	80045d4 <BMP280_readRegister>
 80043a6:	4603      	mov	r3, r0
 80043a8:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
 80043aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	b25a      	sxtb	r2, r3
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	015b      	lsls	r3, r3, #5
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	461a      	mov	r2, r3
 80043c4:	21f4      	movs	r1, #244	; 0xf4
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f920 	bl	800460c <BMP280_writeRegister>
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <BMP280_setPowerMode>:

/** Configure power mode */
void BMP280_setPowerMode(BMP280_t *bmp280, uint8_t mode)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
    uint8_t ctrl = BMP280_readRegister(bmp280, BMP280_REG_CTRL_MEAS);
 80043e0:	21f4      	movs	r1, #244	; 0xf4
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8f6 	bl	80045d4 <BMP280_readRegister>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
    ctrl = (ctrl & 0b11111100) | mode;
 80043ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f0:	f023 0303 	bic.w	r3, r3, #3
 80043f4:	b25a      	sxtb	r2, r3
 80043f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b25b      	sxtb	r3, r3
 80043fe:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CTRL, ctrl);
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	461a      	mov	r2, r3
 8004404:	21f4      	movs	r1, #244	; 0xf4
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f900 	bl	800460c <BMP280_writeRegister>
}
 800440c:	bf00      	nop
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <BMP280_setStandbyTime>:

/** Configure standby time */
void BMP280_setStandbyTime(BMP280_t *bmp280, uint8_t t_sb)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8004420:	21f5      	movs	r1, #245	; 0xf5
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f8d6 	bl	80045d4 <BMP280_readRegister>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b00011111) | (t_sb << 5);
 800442c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	b25a      	sxtb	r2, r3
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	015b      	lsls	r3, r3, #5
 800443a:	b25b      	sxtb	r3, r3
 800443c:	4313      	orrs	r3, r2
 800443e:	b25b      	sxtb	r3, r3
 8004440:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	461a      	mov	r2, r3
 8004446:	21f5      	movs	r1, #245	; 0xf5
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8df 	bl	800460c <BMP280_writeRegister>
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <BMP280_setFilterCoefficient>:

/** Configure IIR filter */
void BMP280_setFilterCoefficient(BMP280_t *bmp280, uint8_t filter)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
    uint8_t conf = BMP280_readRegister(bmp280, BMP280_REG_CONFIG);
 8004462:	21f5      	movs	r1, #245	; 0xf5
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8b5 	bl	80045d4 <BMP280_readRegister>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]
    conf = (conf & 0b11100011) | (filter << 2);
 800446e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004472:	f023 031c 	bic.w	r3, r3, #28
 8004476:	b25a      	sxtb	r2, r3
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	b25b      	sxtb	r3, r3
 800447e:	4313      	orrs	r3, r2
 8004480:	b25b      	sxtb	r3, r3
 8004482:	73fb      	strb	r3, [r7, #15]
    BMP280_writeRegister(bmp280, BMP280_REG_CONFIG, conf);
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	461a      	mov	r2, r3
 8004488:	21f5      	movs	r1, #245	; 0xf5
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8be 	bl	800460c <BMP280_writeRegister>
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <BMP280_measure>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280_measure(BMP280_t *bmp280)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    BMP280_readMBRegister(bmp280, BMP280_REG_DATA, data, 6);
 80044a0:	f107 0208 	add.w	r2, r7, #8
 80044a4:	2306      	movs	r3, #6
 80044a6:	21f7      	movs	r1, #247	; 0xf7
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f8ce 	bl	800464a <BMP280_readMBRegister>

    int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80044ae:	7a3b      	ldrb	r3, [r7, #8]
 80044b0:	031a      	lsls	r2, r3, #12
 80044b2:	7a7b      	ldrb	r3, [r7, #9]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	4313      	orrs	r3, r2
 80044b8:	7aba      	ldrb	r2, [r7, #10]
 80044ba:	0912      	lsrs	r2, r2, #4
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
    int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80044c2:	7afb      	ldrb	r3, [r7, #11]
 80044c4:	031a      	lsls	r2, r3, #12
 80044c6:	7b3b      	ldrb	r3, [r7, #12]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	4313      	orrs	r3, r2
 80044cc:	7b7a      	ldrb	r2, [r7, #13]
 80044ce:	0912      	lsrs	r2, r2, #4
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

    bmp280->measurement.temperature = (float)BMP280_compensate_temperature(bmp280, adc_T) / 100.0;
 80044d6:	6939      	ldr	r1, [r7, #16]
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f917 	bl	800470c <BMP280_compensate_temperature>
 80044de:	ee07 0a90 	vmov	s15, r0
 80044e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e6:	ee17 0a90 	vmov	r0, s15
 80044ea:	f7fc f855 	bl	8000598 <__aeabi_f2d>
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <BMP280_measure+0x130>)
 80044f4:	f7fc f9d2 	bl	800089c <__aeabi_ddiv>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	f7fc fb9a 	bl	8000c38 <__aeabi_d2f>
 8004504:	4602      	mov	r2, r0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60da      	str	r2, [r3, #12]
    bmp280->measurement.pressure = (float)BMP280_compensate_pressure(bmp280, adc_P) / 256.0;
 800450a:	6979      	ldr	r1, [r7, #20]
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f953 	bl	80047b8 <BMP280_compensate_pressure>
 8004512:	ee07 0a90 	vmov	s15, r0
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	ee17 0a90 	vmov	r0, s15
 800451e:	f7fc f83b 	bl	8000598 <__aeabi_f2d>
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	4b29      	ldr	r3, [pc, #164]	; (80045cc <BMP280_measure+0x134>)
 8004528:	f7fc f9b8 	bl	800089c <__aeabi_ddiv>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc fb80 	bl	8000c38 <__aeabi_d2f>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	611a      	str	r2, [r3, #16]

    if (bmp280->p_reference > 0)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	edd3 7a01 	vldr	s15, [r3, #4]
 8004544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	dc00      	bgt.n	8004550 <BMP280_measure+0xb8>
    {
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
    }
}
 800454e:	e02c      	b.n	80045aa <BMP280_measure+0x112>
        bmp280->measurement.altitude = (1.0 - pow(bmp280->measurement.pressure / bmp280->p_reference, 0.1903)) * 4433076.0;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	ed93 7a04 	vldr	s14, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	edd3 7a01 	vldr	s15, [r3, #4]
 800455c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004560:	ee16 0a90 	vmov	r0, s13
 8004564:	f7fc f818 	bl	8000598 <__aeabi_f2d>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80045b8 <BMP280_measure+0x120>
 8004570:	ec43 2b10 	vmov	d0, r2, r3
 8004574:	f00f fdc4 	bl	8014100 <pow>
 8004578:	ec53 2b10 	vmov	r2, r3, d0
 800457c:	f04f 0000 	mov.w	r0, #0
 8004580:	4913      	ldr	r1, [pc, #76]	; (80045d0 <BMP280_measure+0x138>)
 8004582:	f7fb fea9 	bl	80002d8 <__aeabi_dsub>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	a30c      	add	r3, pc, #48	; (adr r3, 80045c0 <BMP280_measure+0x128>)
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f7fc f858 	bl	8000648 <__aeabi_dmul>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	f7fc fb4a 	bl	8000c38 <__aeabi_d2f>
 80045a4:	4602      	mov	r2, r0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	615a      	str	r2, [r3, #20]
}
 80045aa:	bf00      	nop
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	f3af 8000 	nop.w
 80045b8:	1a36e2eb 	.word	0x1a36e2eb
 80045bc:	3fc85bc0 	.word	0x3fc85bc0
 80045c0:	00000000 	.word	0x00000000
 80045c4:	4150e92d 	.word	0x4150e92d
 80045c8:	40590000 	.word	0x40590000
 80045cc:	40700000 	.word	0x40700000
 80045d0:	3ff00000 	.word	0x3ff00000

080045d4 <BMP280_readRegister>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280_readRegister(BMP280_t *bmp280, uint8_t address)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
    BMP280_spiCSNlow(bmp280);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f883 	bl	80046ec <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f855 	bl	800469a <BMP280_spiReadWrite>
    uint8_t value = BMP280_spiReadWrite(bmp280, 0);
 80045f0:	2100      	movs	r1, #0
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f851 	bl	800469a <BMP280_spiReadWrite>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]
    BMP280_spiCSNhigh(bmp280);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f865 	bl	80046cc <BMP280_spiCSNhigh>
    return value;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <BMP280_writeRegister>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280_writeRegister(BMP280_t *bmp280, uint8_t address, uint8_t value)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	70fb      	strb	r3, [r7, #3]
 8004618:	4613      	mov	r3, r2
 800461a:	70bb      	strb	r3, [r7, #2]
    BMP280_spiCSNlow(bmp280);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f865 	bl	80046ec <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address & BMP280_SPI_MASK_WRITE);
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f834 	bl	800469a <BMP280_spiReadWrite>
    BMP280_spiReadWrite(bmp280, value);
 8004632:	78bb      	ldrb	r3, [r7, #2]
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f82f 	bl	800469a <BMP280_spiReadWrite>
    BMP280_spiCSNhigh(bmp280);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f845 	bl	80046cc <BMP280_spiCSNhigh>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <BMP280_readMBRegister>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280_readMBRegister(BMP280_t *bmp280, uint8_t address, uint8_t *values, uint8_t length)
{
 800464a:	b590      	push	{r4, r7, lr}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	461a      	mov	r2, r3
 8004656:	460b      	mov	r3, r1
 8004658:	72fb      	strb	r3, [r7, #11]
 800465a:	4613      	mov	r3, r2
 800465c:	72bb      	strb	r3, [r7, #10]
    BMP280_spiCSNlow(bmp280);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f844 	bl	80046ec <BMP280_spiCSNlow>
    BMP280_spiReadWrite(bmp280, address);
 8004664:	7afb      	ldrb	r3, [r7, #11]
 8004666:	4619      	mov	r1, r3
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f816 	bl	800469a <BMP280_spiReadWrite>
    while (length--)
 800466e:	e008      	b.n	8004682 <BMP280_readMBRegister+0x38>
    {
        *values++ = BMP280_spiReadWrite(bmp280, 0);
 8004670:	687c      	ldr	r4, [r7, #4]
 8004672:	1c63      	adds	r3, r4, #1
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	2100      	movs	r1, #0
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f80e 	bl	800469a <BMP280_spiReadWrite>
 800467e:	4603      	mov	r3, r0
 8004680:	7023      	strb	r3, [r4, #0]
    while (length--)
 8004682:	7abb      	ldrb	r3, [r7, #10]
 8004684:	1e5a      	subs	r2, r3, #1
 8004686:	72ba      	strb	r2, [r7, #10]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f1      	bne.n	8004670 <BMP280_readMBRegister+0x26>
    }
    BMP280_spiCSNhigh(bmp280);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f81d 	bl	80046cc <BMP280_spiCSNhigh>
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bd90      	pop	{r4, r7, pc}

0800469a <BMP280_spiReadWrite>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280_spiReadWrite(BMP280_t *bmp280, uint8_t tx_message)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af02      	add	r7, sp, #8
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_message = 255;
 80046a6:	23ff      	movs	r3, #255	; 0xff
 80046a8:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(bmp280->spiHandle, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f107 020f 	add.w	r2, r7, #15
 80046b2:	1cf9      	adds	r1, r7, #3
 80046b4:	f04f 33ff 	mov.w	r3, #4294967295
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2301      	movs	r3, #1
 80046bc:	f004 f92f 	bl	800891e <HAL_SPI_TransmitReceive>
    return rx_message;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <BMP280_spiCSNhigh>:

/** Pull chip select high (inactive) */
void BMP280_spiCSNhigh(BMP280_t *bmp280)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 80046d4:	2201      	movs	r2, #1
 80046d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046da:	4803      	ldr	r0, [pc, #12]	; (80046e8 <BMP280_spiCSNhigh+0x1c>)
 80046dc:	f001 ff76 	bl	80065cc <HAL_GPIO_WritePin>
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40020c00 	.word	0x40020c00

080046ec <BMP280_spiCSNlow>:

/** Pull chip select low (active) */
void BMP280_spiCSNlow(BMP280_t *bmp280)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_RESET);
 80046f4:	2200      	movs	r2, #0
 80046f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046fa:	4803      	ldr	r0, [pc, #12]	; (8004708 <BMP280_spiCSNlow+0x1c>)
 80046fc:	f001 ff66 	bl	80065cc <HAL_GPIO_WritePin>
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40020c00 	.word	0x40020c00

0800470c <BMP280_compensate_temperature>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280_compensate_temperature(BMP280_t *bmp280, int32_t uncomp_temp)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = ((((uncomp_temp / 8) - ((int32_t)bmp280->compensationParameters.dig_t1 << 1))) * ((int32_t)bmp280->compensationParameters.dig_t2)) / 2048;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	da00      	bge.n	800471e <BMP280_compensate_temperature+0x12>
 800471c:	3307      	adds	r3, #7
 800471e:	10db      	asrs	r3, r3, #3
 8004720:	461a      	mov	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8b1b      	ldrh	r3, [r3, #24]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	da01      	bge.n	800473c <BMP280_compensate_temperature+0x30>
 8004738:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800473c:	12db      	asrs	r3, r3, #11
 800473e:	60fb      	str	r3, [r7, #12]
    var2 = (((((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1)) * ((uncomp_temp / 16) - ((int32_t)bmp280->compensationParameters.dig_t1))) / 4096) * ((int32_t)bmp280->compensationParameters.dig_t3)) / 16384;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	da00      	bge.n	8004748 <BMP280_compensate_temperature+0x3c>
 8004746:	330f      	adds	r3, #15
 8004748:	111b      	asrs	r3, r3, #4
 800474a:	461a      	mov	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8b1b      	ldrh	r3, [r3, #24]
 8004750:	1ad2      	subs	r2, r2, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	da00      	bge.n	800475a <BMP280_compensate_temperature+0x4e>
 8004758:	330f      	adds	r3, #15
 800475a:	111b      	asrs	r3, r3, #4
 800475c:	4619      	mov	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8b1b      	ldrh	r3, [r3, #24]
 8004762:	1acb      	subs	r3, r1, r3
 8004764:	fb02 f303 	mul.w	r3, r2, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	da01      	bge.n	8004770 <BMP280_compensate_temperature+0x64>
 800476c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004770:	131b      	asrs	r3, r3, #12
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	da03      	bge.n	800478a <BMP280_compensate_temperature+0x7e>
 8004782:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004786:	441a      	add	r2, r3
 8004788:	4613      	mov	r3, r2
 800478a:	139b      	asrs	r3, r3, #14
 800478c:	60bb      	str	r3, [r7, #8]
    bmp280->t_fine = var1 + var2;
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	441a      	add	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	609a      	str	r2, [r3, #8]
    return (bmp280->t_fine * 5 + 128) / 256;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	3380      	adds	r3, #128	; 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da00      	bge.n	80047aa <BMP280_compensate_temperature+0x9e>
 80047a8:	33ff      	adds	r3, #255	; 0xff
 80047aa:	121b      	asrs	r3, r3, #8
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <BMP280_compensate_pressure>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280_compensate_pressure(BMP280_t *bmp280, int32_t uncomp_pres)
{
 80047b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047bc:	b0d6      	sub	sp, #344	; 0x158
 80047be:	af00      	add	r7, sp, #0
 80047c0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 80047c4:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
    int64_t var1, var2, p;
    var1 = ((int64_t)(bmp280->t_fine)) - 128000;
 80047c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	17da      	asrs	r2, r3, #31
 80047d0:	461c      	mov	r4, r3
 80047d2:	4615      	mov	r5, r2
 80047d4:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80047d8:	f145 3bff 	adc.w	fp, r5, #4294967295
 80047dc:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
    var2 = var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p6;
 80047e0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80047e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047e8:	fb03 f102 	mul.w	r1, r3, r2
 80047ec:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80047f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	18ca      	adds	r2, r1, r3
 80047fa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047fe:	fba3 8903 	umull	r8, r9, r3, r3
 8004802:	eb02 0309 	add.w	r3, r2, r9
 8004806:	4699      	mov	r9, r3
 8004808:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800480c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004810:	b21b      	sxth	r3, r3
 8004812:	17da      	asrs	r2, r3, #31
 8004814:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004818:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800481c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8004820:	4603      	mov	r3, r0
 8004822:	fb03 f209 	mul.w	r2, r3, r9
 8004826:	460b      	mov	r3, r1
 8004828:	fb08 f303 	mul.w	r3, r8, r3
 800482c:	4413      	add	r3, r2
 800482e:	4602      	mov	r2, r0
 8004830:	fba8 1202 	umull	r1, r2, r8, r2
 8004834:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004838:	460a      	mov	r2, r1
 800483a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800483e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004842:	4413      	add	r3, r2
 8004844:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004848:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800484c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8004850:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + ((var1 * (int64_t)bmp280->compensationParameters.dig_p5) * 131072);
 8004854:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004858:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800485c:	b21b      	sxth	r3, r3
 800485e:	17da      	asrs	r2, r3, #31
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004864:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004868:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800486c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004870:	462a      	mov	r2, r5
 8004872:	fb02 f203 	mul.w	r2, r2, r3
 8004876:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800487a:	4621      	mov	r1, r4
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	441a      	add	r2, r3
 8004882:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004886:	4621      	mov	r1, r4
 8004888:	fba3 1301 	umull	r1, r3, r3, r1
 800488c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004890:	460b      	mov	r3, r1
 8004892:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004896:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800489a:	18d3      	adds	r3, r2, r3
 800489c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80048a0:	f04f 0000 	mov.w	r0, #0
 80048a4:	f04f 0100 	mov.w	r1, #0
 80048a8:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80048ac:	462b      	mov	r3, r5
 80048ae:	0459      	lsls	r1, r3, #17
 80048b0:	4623      	mov	r3, r4
 80048b2:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80048b6:	4623      	mov	r3, r4
 80048b8:	0458      	lsls	r0, r3, #17
 80048ba:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80048be:	1814      	adds	r4, r2, r0
 80048c0:	67bc      	str	r4, [r7, #120]	; 0x78
 80048c2:	414b      	adcs	r3, r1
 80048c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048c6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80048ca:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var2 = var2 + (((int64_t)bmp280->compensationParameters.dig_p4) * 34359738368);
 80048ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80048d2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	17da      	asrs	r2, r3, #31
 80048da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f04f 0100 	mov.w	r1, #0
 80048ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ee:	00d9      	lsls	r1, r3, #3
 80048f0:	2000      	movs	r0, #0
 80048f2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80048f6:	1814      	adds	r4, r2, r0
 80048f8:	673c      	str	r4, [r7, #112]	; 0x70
 80048fa:	414b      	adcs	r3, r1
 80048fc:	677b      	str	r3, [r7, #116]	; 0x74
 80048fe:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8004902:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    var1 = ((var1 * var1 * (int64_t)bmp280->compensationParameters.dig_p3) / 256) + ((var1 * (int64_t)bmp280->compensationParameters.dig_p2) * 4096);
 8004906:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800490a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800490e:	fb03 f102 	mul.w	r1, r3, r2
 8004912:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004916:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	18ca      	adds	r2, r1, r3
 8004920:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004924:	fba3 1303 	umull	r1, r3, r3, r3
 8004928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800492c:	460b      	mov	r3, r1
 800492e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004936:	18d3      	adds	r3, r2, r3
 8004938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800493c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004940:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004944:	b21b      	sxth	r3, r3
 8004946:	17da      	asrs	r2, r3, #31
 8004948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800494c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004950:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8004954:	462b      	mov	r3, r5
 8004956:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800495a:	4642      	mov	r2, r8
 800495c:	fb02 f203 	mul.w	r2, r2, r3
 8004960:	464b      	mov	r3, r9
 8004962:	4621      	mov	r1, r4
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	4622      	mov	r2, r4
 800496c:	4641      	mov	r1, r8
 800496e:	fba2 1201 	umull	r1, r2, r2, r1
 8004972:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004976:	460a      	mov	r2, r1
 8004978:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800497c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004980:	4413      	add	r3, r2
 8004982:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004986:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800498a:	2b00      	cmp	r3, #0
 800498c:	da07      	bge.n	800499e <BMP280_compensate_pressure+0x1e6>
 800498e:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004992:	66b9      	str	r1, [r7, #104]	; 0x68
 8004994:	f143 0300 	adc.w	r3, r3, #0
 8004998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800499a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800499e:	f04f 0000 	mov.w	r0, #0
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	0a10      	lsrs	r0, r2, #8
 80049a8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80049ac:	1219      	asrs	r1, r3, #8
 80049ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049b2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80049b6:	b21b      	sxth	r3, r3
 80049b8:	17da      	asrs	r2, r3, #31
 80049ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049be:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80049c2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80049c6:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80049ca:	464a      	mov	r2, r9
 80049cc:	fb02 f203 	mul.w	r2, r2, r3
 80049d0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80049d4:	4644      	mov	r4, r8
 80049d6:	fb04 f303 	mul.w	r3, r4, r3
 80049da:	441a      	add	r2, r3
 80049dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80049e0:	4644      	mov	r4, r8
 80049e2:	fba3 4304 	umull	r4, r3, r3, r4
 80049e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049ea:	4623      	mov	r3, r4
 80049ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80049f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049f4:	18d3      	adds	r3, r2, r3
 80049f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004a06:	464c      	mov	r4, r9
 8004a08:	0323      	lsls	r3, r4, #12
 8004a0a:	4644      	mov	r4, r8
 8004a0c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8004a10:	4644      	mov	r4, r8
 8004a12:	0322      	lsls	r2, r4, #12
 8004a14:	1884      	adds	r4, r0, r2
 8004a16:	663c      	str	r4, [r7, #96]	; 0x60
 8004a18:	eb41 0303 	adc.w	r3, r1, r3
 8004a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a1e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004a22:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)bmp280->compensationParameters.dig_p1)) / 8589934592;
 8004a26:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004a2a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8004a2e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8004a32:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8004a36:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004a3a:	8bdb      	ldrh	r3, [r3, #30]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a48:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a52:	4642      	mov	r2, r8
 8004a54:	fb02 f203 	mul.w	r2, r2, r3
 8004a58:	464b      	mov	r3, r9
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	4622      	mov	r2, r4
 8004a64:	4641      	mov	r1, r8
 8004a66:	fba2 1201 	umull	r1, r2, r2, r1
 8004a6a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8004a6e:	460a      	mov	r2, r1
 8004a70:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004a74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a78:	4413      	add	r3, r2
 8004a7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a7e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da06      	bge.n	8004a94 <BMP280_compensate_pressure+0x2dc>
 8004a86:	1e51      	subs	r1, r2, #1
 8004a88:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a8a:	f143 0301 	adc.w	r3, r3, #1
 8004a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a94:	f04f 0000 	mov.w	r0, #0
 8004a98:	f04f 0100 	mov.w	r1, #0
 8004a9c:	1058      	asrs	r0, r3, #1
 8004a9e:	17d9      	asrs	r1, r3, #31
 8004aa0:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    if (var1 == 0)
 8004aa4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <BMP280_compensate_pressure+0x2f8>
    {
        return 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e182      	b.n	8004db6 <BMP280_compensate_pressure+0x5fe>
    }
    p = 1048576 - uncomp_pres;
 8004ab0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ab4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004ab8:	17da      	asrs	r2, r3, #31
 8004aba:	653b      	str	r3, [r7, #80]	; 0x50
 8004abc:	657a      	str	r2, [r7, #84]	; 0x54
 8004abe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004ac2:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8004ac6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	07d9      	lsls	r1, r3, #31
 8004ad4:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8004ad8:	07d0      	lsls	r0, r2, #31
 8004ada:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004ade:	1a84      	subs	r4, r0, r2
 8004ae0:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004ae4:	eb61 0303 	sbc.w	r3, r1, r3
 8004ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aec:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8004af0:	4622      	mov	r2, r4
 8004af2:	462b      	mov	r3, r5
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004af8:	415b      	adcs	r3, r3
 8004afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b00:	4621      	mov	r1, r4
 8004b02:	1851      	adds	r1, r2, r1
 8004b04:	6439      	str	r1, [r7, #64]	; 0x40
 8004b06:	4629      	mov	r1, r5
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004b18:	4649      	mov	r1, r9
 8004b1a:	018b      	lsls	r3, r1, #6
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b22:	4641      	mov	r1, r8
 8004b24:	018a      	lsls	r2, r1, #6
 8004b26:	4641      	mov	r1, r8
 8004b28:	1889      	adds	r1, r1, r2
 8004b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	eb43 0101 	adc.w	r1, r3, r1
 8004b32:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004b40:	4649      	mov	r1, r9
 8004b42:	008b      	lsls	r3, r1, #2
 8004b44:	4641      	mov	r1, r8
 8004b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	008a      	lsls	r2, r1, #2
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	4622      	mov	r2, r4
 8004b56:	189b      	adds	r3, r3, r2
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	eb42 0303 	adc.w	r3, r2, r3
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8004b70:	4649      	mov	r1, r9
 8004b72:	008b      	lsls	r3, r1, #2
 8004b74:	4641      	mov	r1, r8
 8004b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	008a      	lsls	r2, r1, #2
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	4622      	mov	r2, r4
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	460a      	mov	r2, r1
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b98:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004b9c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004ba0:	f7fc f89a 	bl	8000cd8 <__aeabi_ldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    var1 = (((int64_t)bmp280->compensationParameters.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8004bac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004bb0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004bb4:	b21b      	sxth	r3, r3
 8004bb6:	17da      	asrs	r2, r3, #31
 8004bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bbc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bc0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	da08      	bge.n	8004bda <BMP280_compensate_pressure+0x422>
 8004bc8:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004bcc:	1851      	adds	r1, r2, r1
 8004bce:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bd0:	f143 0300 	adc.w	r3, r3, #0
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bda:	f04f 0000 	mov.w	r0, #0
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	0b50      	lsrs	r0, r2, #13
 8004be4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004be8:	1359      	asrs	r1, r3, #13
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	fb02 f001 	mul.w	r0, r2, r1
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	fb01 f103 	mul.w	r1, r1, r3
 8004bfe:	4401      	add	r1, r0
 8004c00:	4620      	mov	r0, r4
 8004c02:	fba0 2302 	umull	r2, r3, r0, r2
 8004c06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c14:	18cb      	adds	r3, r1, r3
 8004c16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c1a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	da08      	bge.n	8004c34 <BMP280_compensate_pressure+0x47c>
 8004c22:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8004c26:	1851      	adds	r1, r2, r1
 8004c28:	6239      	str	r1, [r7, #32]
 8004c2a:	f143 0300 	adc.w	r3, r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	0b50      	lsrs	r0, r2, #13
 8004c3e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004c42:	1359      	asrs	r1, r3, #13
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	fb02 f001 	mul.w	r0, r2, r1
 8004c52:	4621      	mov	r1, r4
 8004c54:	fb01 f103 	mul.w	r1, r1, r3
 8004c58:	4401      	add	r1, r0
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	fba0 2302 	umull	r2, r3, r0, r2
 8004c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c64:	4613      	mov	r3, r2
 8004c66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c6e:	18cb      	adds	r3, r1, r3
 8004c70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c74:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da08      	bge.n	8004c8e <BMP280_compensate_pressure+0x4d6>
 8004c7c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8004c80:	1851      	adds	r1, r2, r1
 8004c82:	61b9      	str	r1, [r7, #24]
 8004c84:	f143 0300 	adc.w	r3, r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c8e:	f04f 0000 	mov.w	r0, #0
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	0e50      	lsrs	r0, r2, #25
 8004c98:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8004c9c:	1659      	asrs	r1, r3, #25
 8004c9e:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    var2 = (((int64_t)bmp280->compensationParameters.dig_p8) * p) / 524288;
 8004ca2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004ca6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004caa:	b21b      	sxth	r3, r3
 8004cac:	17da      	asrs	r2, r3, #31
 8004cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cb2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004cb6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004cba:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004cbe:	462a      	mov	r2, r5
 8004cc0:	fb02 f203 	mul.w	r2, r2, r3
 8004cc4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004cc8:	4621      	mov	r1, r4
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	441a      	add	r2, r3
 8004cd0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	fba3 1301 	umull	r1, r3, r3, r1
 8004cda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cde:	460b      	mov	r3, r1
 8004ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce8:	18d3      	adds	r3, r2, r3
 8004cea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cee:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	da07      	bge.n	8004d06 <BMP280_compensate_pressure+0x54e>
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <BMP280_compensate_pressure+0x60c>)
 8004cf8:	18c3      	adds	r3, r0, r3
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	f141 0300 	adc.w	r3, r1, #0
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	0cc2      	lsrs	r2, r0, #19
 8004d10:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004d14:	14cb      	asrs	r3, r1, #19
 8004d16:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    p = ((p + var1 + var2) / 256) + (((int64_t)bmp280->compensationParameters.dig_p7) * 16);
 8004d1a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004d1e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8004d22:	1884      	adds	r4, r0, r2
 8004d24:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004d28:	eb41 0303 	adc.w	r3, r1, r3
 8004d2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d30:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8004d34:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d38:	4621      	mov	r1, r4
 8004d3a:	1889      	adds	r1, r1, r2
 8004d3c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004d40:	4629      	mov	r1, r5
 8004d42:	eb43 0101 	adc.w	r1, r3, r1
 8004d46:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8004d4a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da07      	bge.n	8004d62 <BMP280_compensate_pressure+0x5aa>
 8004d52:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	f143 0300 	adc.w	r3, r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	0a10      	lsrs	r0, r2, #8
 8004d6c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004d70:	1219      	asrs	r1, r3, #8
 8004d72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004d76:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	17da      	asrs	r2, r3, #31
 8004d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d82:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004d92:	464c      	mov	r4, r9
 8004d94:	0123      	lsls	r3, r4, #4
 8004d96:	4644      	mov	r4, r8
 8004d98:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004d9c:	4644      	mov	r4, r8
 8004d9e:	0122      	lsls	r2, r4, #4
 8004da0:	1884      	adds	r4, r0, r2
 8004da2:	603c      	str	r4, [r7, #0]
 8004da4:	eb41 0303 	adc.w	r3, r1, r3
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004dae:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    return (uint32_t)p;
 8004db2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0007ffff 	.word	0x0007ffff

08004dc8 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8004dd2:	f107 030f 	add.w	r3, r7, #15
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	9200      	str	r2, [sp, #0]
 8004dda:	2275      	movs	r2, #117	; 0x75
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8bd 	bl	8004f5e <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b70      	cmp	r3, #112	; 0x70
 8004de8:	d129      	bne.n	8004e3e <MPU_begin+0x76>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8004dea:	236b      	movs	r3, #107	; 0x6b
 8004dec:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8004dee:	2300      	movs	r3, #0
 8004df0:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004df2:	f107 030d 	add.w	r3, r7, #13
 8004df6:	f107 020e 	add.w	r2, r7, #14
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f88d 	bl	8004f1c <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8004e02:	236a      	movs	r3, #106	; 0x6a
 8004e04:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8004e06:	2310      	movs	r3, #16
 8004e08:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8004e0a:	f107 030d 	add.w	r3, r7, #13
 8004e0e:	f107 020e 	add.w	r2, r7, #14
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f881 	bl	8004f1c <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004e20:	461a      	mov	r2, r3
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f8d5 	bl	8004fd4 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8004e30:	461a      	mov	r2, r3
 8004e32:	6839      	ldr	r1, [r7, #0]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f935 	bl	80050a4 <MPU_writeGyroFullScaleRange>
        return 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <MPU_begin+0x78>
    }
    else
    {
        return 0;
 8004e3e:	2300      	movs	r3, #0
    }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <MPU_Init>:

/// @brief Do the whole initialization of the IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_Init(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	b09c      	sub	sp, #112	; 0x70
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
	// Disable BMP280
	HAL_GPIO_WritePin(SPI2_IMU_CSBM_GPIO_Port, SPI2_IMU_CSBM_Pin, GPIO_PIN_SET);
 8004e52:	2201      	movs	r2, #1
 8004e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e58:	482a      	ldr	r0, [pc, #168]	; (8004f04 <MPU_Init+0xbc>)
 8004e5a:	f001 fbb7 	bl	80065cc <HAL_GPIO_WritePin>

	// Set the config parameters
	pMPU9250->settings.gFullScaleRange = GFSR_250DPS;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	pMPU9250->settings.aFullScaleRange = AFSR_2G;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	pMPU9250->settings.CS_PIN = SPI2_IMU_CSIMU_Pin;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e74:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	pMPU9250->settings.CS_PORT = SPI2_IMU_CSIMU_GPIO_Port;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <MPU_Init+0xbc>)
 8004e7c:	669a      	str	r2, [r3, #104]	; 0x68
	pMPU9250->attitude.tau = 0.98;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <MPU_Init+0xc0>)
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
	pMPU9250->attitude.dt = 0.004;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <MPU_Init+0xc4>)
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54

	// Check if IMU configured properly and block if it didn't
	if (MPU_begin(SPIx, pMPU9250) != true)
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff9b 	bl	8004dc8 <MPU_begin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d023      	beq.n	8004ee0 <MPU_Init+0x98>
	{
		char str[100] = "ERROR: MPU9250 ID is wrong.";
 8004e98:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <MPU_Init+0xc8>)
 8004e9a:	f107 040c 	add.w	r4, r7, #12
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	6828      	ldr	r0, [r5, #0]
 8004ea2:	6869      	ldr	r1, [r5, #4]
 8004ea4:	68aa      	ldr	r2, [r5, #8]
 8004ea6:	68eb      	ldr	r3, [r5, #12]
 8004ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eaa:	6928      	ldr	r0, [r5, #16]
 8004eac:	6969      	ldr	r1, [r5, #20]
 8004eae:	69aa      	ldr	r2, [r5, #24]
 8004eb0:	c407      	stmia	r4!, {r0, r1, r2}
 8004eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eb6:	2248      	movs	r2, #72	; 0x48
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f00b f887 	bl	800ffce <memset>
		HAL_UART_Transmit(&huart3, str, strlen(str), HAL_MAX_DELAY);
 8004ec0:	f107 030c 	add.w	r3, r7, #12
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb f9fb 	bl	80002c0 <strlen>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	f107 010c 	add.w	r1, r7, #12
 8004ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed6:	480f      	ldr	r0, [pc, #60]	; (8004f14 <MPU_Init+0xcc>)
 8004ed8:	f005 ff72 	bl	800adc0 <HAL_UART_Transmit>
		return 1;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e00c      	b.n	8004efa <MPU_Init+0xb2>
	}

	// Calibrate the IMU
	HAL_UART_Transmit(&huart3, "CALIBRATING...\r\n", strlen("CALIBRATING...\r\n"), HAL_MAX_DELAY);
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	490c      	ldr	r1, [pc, #48]	; (8004f18 <MPU_Init+0xd0>)
 8004ee8:	480a      	ldr	r0, [pc, #40]	; (8004f14 <MPU_Init+0xcc>)
 8004eea:	f005 ff69 	bl	800adc0 <HAL_UART_Transmit>
	MPU_calibrateGyro(SPIx, pMPU9250, 10);
 8004eee:	220a      	movs	r2, #10
 8004ef0:	6839      	ldr	r1, [r7, #0]
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f991 	bl	800521a <MPU_calibrateGyro>

	return 0;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3770      	adds	r7, #112	; 0x70
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bdb0      	pop	{r4, r5, r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40020c00 	.word	0x40020c00
 8004f08:	3f7ae148 	.word	0x3f7ae148
 8004f0c:	3b83126f 	.word	0x3b83126f
 8004f10:	080156c4 	.word	0x080156c4
 8004f14:	20000a60 	.word	0x20000a60
 8004f18:	080156b0 	.word	0x080156b0

08004f1c <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	68b8      	ldr	r0, [r7, #8]
 8004f2e:	f000 f83e 	bl	8004fae <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8004f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f36:	2201      	movs	r2, #1
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f003 fa51 	bl	80083e2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8004f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f44:	2201      	movs	r2, #1
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f003 fa4a 	bl	80083e2 <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8004f4e:	2101      	movs	r1, #1
 8004f50:	68b8      	ldr	r0, [r7, #8]
 8004f52:	f000 f82c 	bl	8004fae <MPU_CS>
}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8004f6e:	2100      	movs	r1, #0
 8004f70:	68b8      	ldr	r0, [r7, #8]
 8004f72:	f000 f81c 	bl	8004fae <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8004f80:	f107 0117 	add.w	r1, r7, #23
 8004f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f88:	2201      	movs	r2, #1
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f003 fa29 	bl	80083e2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8004f90:	8c3a      	ldrh	r2, [r7, #32]
 8004f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f003 fb90 	bl	80086be <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	68b8      	ldr	r0, [r7, #8]
 8004fa2:	f000 f804 	bl	8004fae <MPU_CS>
}
 8004fa6:	bf00      	nop
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f001 fb00 	bl	80065cc <HAL_GPIO_WritePin>
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 8004fe2:	231c      	movs	r3, #28
 8004fe4:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d847      	bhi.n	800507c <MPU_writeAccFullScaleRange+0xa8>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <MPU_writeAccFullScaleRange+0x20>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	08005023 	.word	0x08005023
 8004ffc:	08005041 	.word	0x08005041
 8005000:	0800505f 	.word	0x0800505f
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800500a:	615a      	str	r2, [r3, #20]
        val = 0x00;
 800500c:	2300      	movs	r3, #0
 800500e:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005010:	f107 0316 	add.w	r3, r7, #22
 8005014:	f107 0217 	add.w	r2, r7, #23
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff ff7e 	bl	8004f1c <MPU_REG_WRITE>
        break;
 8005020:	e03b      	b.n	800509a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005028:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800502a:	2308      	movs	r3, #8
 800502c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800502e:	f107 0316 	add.w	r3, r7, #22
 8005032:	f107 0217 	add.w	r2, r7, #23
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff ff6f 	bl	8004f1c <MPU_REG_WRITE>
        break;
 800503e:	e02c      	b.n	800509a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005046:	615a      	str	r2, [r3, #20]
        val = 0x10;
 8005048:	2310      	movs	r3, #16
 800504a:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800504c:	f107 0316 	add.w	r3, r7, #22
 8005050:	f107 0217 	add.w	r2, r7, #23
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff ff60 	bl	8004f1c <MPU_REG_WRITE>
        break;
 800505c:	e01d      	b.n	800509a <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8005064:	615a      	str	r2, [r3, #20]
        val = 0x18;
 8005066:	2318      	movs	r3, #24
 8005068:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800506a:	f107 0316 	add.w	r3, r7, #22
 800506e:	f107 0217 	add.w	r2, r7, #23
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ff51 	bl	8004f1c <MPU_REG_WRITE>
        break;
 800507a:	e00e      	b.n	800509a <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005082:	615a      	str	r2, [r3, #20]
        val = 0x08;
 8005084:	2308      	movs	r3, #8
 8005086:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005088:	f107 0316 	add.w	r3, r7, #22
 800508c:	f107 0217 	add.w	r2, r7, #23
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff ff42 	bl	8004f1c <MPU_REG_WRITE>
        break;
 8005098:	bf00      	nop
    }
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop

080050a4 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 80050b2:	231b      	movs	r3, #27
 80050b4:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d843      	bhi.n	8005144 <MPU_writeGyroFullScaleRange+0xa0>
 80050bc:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <MPU_writeGyroFullScaleRange+0x20>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	080050d5 	.word	0x080050d5
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	08005129 	.word	0x08005129
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a24      	ldr	r2, [pc, #144]	; (8005168 <MPU_writeGyroFullScaleRange+0xc4>)
 80050d8:	619a      	str	r2, [r3, #24]
        val = 0x00;
 80050da:	2300      	movs	r3, #0
 80050dc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050de:	f107 0316 	add.w	r3, r7, #22
 80050e2:	f107 0217 	add.w	r2, r7, #23
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff17 	bl	8004f1c <MPU_REG_WRITE>
        break;
 80050ee:	e037      	b.n	8005160 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4a1e      	ldr	r2, [pc, #120]	; (800516c <MPU_writeGyroFullScaleRange+0xc8>)
 80050f4:	619a      	str	r2, [r3, #24]
        val = 0x08;
 80050f6:	2308      	movs	r3, #8
 80050f8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80050fa:	f107 0316 	add.w	r3, r7, #22
 80050fe:	f107 0217 	add.w	r2, r7, #23
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff09 	bl	8004f1c <MPU_REG_WRITE>
        break;
 800510a:	e029      	b.n	8005160 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a18      	ldr	r2, [pc, #96]	; (8005170 <MPU_writeGyroFullScaleRange+0xcc>)
 8005110:	619a      	str	r2, [r3, #24]
        val = 0x10;
 8005112:	2310      	movs	r3, #16
 8005114:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005116:	f107 0316 	add.w	r3, r7, #22
 800511a:	f107 0217 	add.w	r2, r7, #23
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff fefb 	bl	8004f1c <MPU_REG_WRITE>
        break;
 8005126:	e01b      	b.n	8005160 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <MPU_writeGyroFullScaleRange+0xd0>)
 800512c:	619a      	str	r2, [r3, #24]
        val = 0x18;
 800512e:	2318      	movs	r3, #24
 8005130:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8005132:	f107 0316 	add.w	r3, r7, #22
 8005136:	f107 0217 	add.w	r2, r7, #23
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff feed 	bl	8004f1c <MPU_REG_WRITE>
        break;
 8005142:	e00d      	b.n	8005160 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4a09      	ldr	r2, [pc, #36]	; (800516c <MPU_writeGyroFullScaleRange+0xc8>)
 8005148:	619a      	str	r2, [r3, #24]
        val = 0x08;
 800514a:	2308      	movs	r3, #8
 800514c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800514e:	f107 0316 	add.w	r3, r7, #22
 8005152:	f107 0217 	add.w	r2, r7, #23
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff fedf 	bl	8004f1c <MPU_REG_WRITE>
        break;
 800515e:	bf00      	nop
    }
}
 8005160:	bf00      	nop
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	43030000 	.word	0x43030000
 800516c:	42830000 	.word	0x42830000
 8005170:	42033333 	.word	0x42033333
 8005174:	41833333 	.word	0x41833333

08005178 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	; 0x38
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[6+2+6+24];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, buf, 6+2+6+24);
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	2226      	movs	r2, #38	; 0x26
 8005188:	9200      	str	r2, [sp, #0]
 800518a:	223b      	movs	r2, #59	; 0x3b
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff fee5 	bl	8004f5e <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->rawData.ax = buf[0] << 8 | buf[1];
 8005194:	7a3b      	ldrb	r3, [r7, #8]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	b21a      	sxth	r2, r3
 800519a:	7a7b      	ldrb	r3, [r7, #9]
 800519c:	b21b      	sxth	r3, r3
 800519e:	4313      	orrs	r3, r2
 80051a0:	b21a      	sxth	r2, r3
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.ay = buf[2] << 8 | buf[3];
 80051a6:	7abb      	ldrb	r3, [r7, #10]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	b21a      	sxth	r2, r3
 80051ac:	7afb      	ldrb	r3, [r7, #11]
 80051ae:	b21b      	sxth	r3, r3
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b21a      	sxth	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.az = buf[4] << 8 | buf[5];
 80051b8:	7b3b      	ldrb	r3, [r7, #12]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	b21a      	sxth	r2, r3
 80051be:	7b7b      	ldrb	r3, [r7, #13]
 80051c0:	b21b      	sxth	r3, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b21a      	sxth	r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	809a      	strh	r2, [r3, #4]

    pMPU9250->rawData.temp = buf[6] << 8 | buf[7];
 80051ca:	7bbb      	ldrb	r3, [r7, #14]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	b21a      	sxth	r2, r3
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	b21b      	sxth	r3, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b21a      	sxth	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	80da      	strh	r2, [r3, #6]

    pMPU9250->rawData.gx = buf[8] << 8 | buf[9];
 80051dc:	7c3b      	ldrb	r3, [r7, #16]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	b21a      	sxth	r2, r3
 80051e2:	7c7b      	ldrb	r3, [r7, #17]
 80051e4:	b21b      	sxth	r3, r3
 80051e6:	4313      	orrs	r3, r2
 80051e8:	b21a      	sxth	r2, r3
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gy = buf[10] << 8 | buf[11];
 80051ee:	7cbb      	ldrb	r3, [r7, #18]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	b21a      	sxth	r2, r3
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	b21b      	sxth	r3, r3
 80051f8:	4313      	orrs	r3, r2
 80051fa:	b21a      	sxth	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	815a      	strh	r2, [r3, #10]
    pMPU9250->rawData.gz = buf[12] << 8 | buf[13];
 8005200:	7d3b      	ldrb	r3, [r7, #20]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	b21a      	sxth	r2, r3
 8005206:	7d7b      	ldrb	r3, [r7, #21]
 8005208:	b21b      	sxth	r3, r3
 800520a:	4313      	orrs	r3, r2
 800520c:	b21a      	sxth	r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	819a      	strh	r2, [r3, #12]

    //pMPU9250->rawData.mx = buf[14+MAGN_X_OFFS_H] << 8 | buf[14+MAGN_X_OFFS_L];
	//pMPU9250->rawData.my = buf[14+MAGN_Y_OFFS_H] << 8 | buf[14+MAGN_Y_OFFS_L];
	//pMPU9250->rawData.mz = buf[14+MAGN_Z_OFFS_H] << 8 | buf[14+MAGN_Z_OFFS_L];
}
 8005212:	bf00      	nop
 8005214:	3730      	adds	r7, #48	; 0x30
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b088      	sub	sp, #32
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 800523a:	2301      	movs	r3, #1
 800523c:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800523e:	2300      	movs	r3, #0
 8005240:	827b      	strh	r3, [r7, #18]
 8005242:	e01e      	b.n	8005282 <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff ff96 	bl	8005178 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005252:	461a      	mov	r2, r3
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005260:	461a      	mov	r2, r3
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	4413      	add	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800526e:	461a      	mov	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8005276:	2003      	movs	r0, #3
 8005278:	f000 fafc 	bl	8005874 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	3301      	adds	r3, #1
 8005280:	827b      	strh	r3, [r7, #18]
 8005282:	8a7a      	ldrh	r2, [r7, #18]
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	429a      	cmp	r2, r3
 8005288:	d3dc      	bcc.n	8005244 <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800529e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 80052e4:	bf00      	nop
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	0000      	movs	r0, r0
	...

080052f0 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff3b 	bl	8005178 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005308:	ee07 3a90 	vmov	s15, r3
 800530c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	ed93 7a05 	vldr	s14, [r3, #20]
 8005316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	ed93 7a05 	vldr	s14, [r3, #20]
 8005334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005344:	ee07 3a90 	vmov	s15, r3
 8005348:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Convert raw temperature data to Celsius
    pMPU9250->sensorData.temp = pMPU9250->rawData.temp / TEMP_SENS + 21;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb f906 	bl	8000574 <__aeabi_i2d>
 8005368:	a336      	add	r3, pc, #216	; (adr r3, 8005444 <MPU_readProcessedData+0x154>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fb fa95 	bl	800089c <__aeabi_ddiv>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <MPU_readProcessedData+0x150>)
 8005380:	f7fa ffac 	bl	80002dc <__adddf3>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	f7fb fc54 	bl	8000c38 <__aeabi_d2f>
 8005390:	4602      	mov	r2, r0
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	629a      	str	r2, [r3, #40]	; 0x28

    // Compensate for gyro offset
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroCal.x;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80053aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroCal.y;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80053c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroCal.z;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80053d8:	ee07 3a90 	vmov	s15, r3
 80053dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80053e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80053fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	ed93 7a06 	vldr	s14, [r3, #24]
 8005412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	ed93 7a06 	vldr	s14, [r3, #24]
 8005428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	f3af 8000 	nop.w
 8005440:	40350000 	.word	0x40350000
 8005444:	851eb852 	.word	0x851eb852
 8005448:	4074ddeb 	.word	0x4074ddeb

0800544c <HCSR04_Init>:
#include "HCSR04/HCSR04.h"

extern osSemaphoreId DistSemaphoreHandle;

uint8_t HCSR04_Init(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
	pHCSR04->TRIG_GPIO = DIS_TRIG_OUT_GPIO_Port;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <HCSR04_Init+0x94>)
 800545a:	601a      	str	r2, [r3, #0]
	pHCSR04->TRIG_PIN = DIS_TRIG_OUT_Pin;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005462:	809a      	strh	r2, [r3, #4]
	pHCSR04->TIM_Instance = TIM1;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a1f      	ldr	r2, [pc, #124]	; (80054e4 <HCSR04_Init+0x98>)
 8005468:	609a      	str	r2, [r3, #8]
	pHCSR04->IC_TIM_CH = TIM_CHANNEL_3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2208      	movs	r2, #8
 800546e:	60da      	str	r2, [r3, #12]
	pHCSR04->TIM_CLK_MHz = 16;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2210      	movs	r2, #16
 8005474:	611a      	str	r2, [r3, #16]
	pHCSR04->Triggered = false;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	751a      	strb	r2, [r3, #20]

	if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <HCSR04_Init+0x42>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800548c:	e019      	b.n	80054c2 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_2)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	2b04      	cmp	r3, #4
 8005494:	d104      	bne.n	80054a0 <HCSR04_Init+0x54>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800549e:	e010      	b.n	80054c2 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_3)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d104      	bne.n	80054b2 <HCSR04_Init+0x66>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2204      	movs	r2, #4
 80054ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80054b0:	e007      	b.n	80054c2 <HCSR04_Init+0x76>
	}
	else if(pHCSR04->IC_TIM_CH == TIM_CHANNEL_4)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d103      	bne.n	80054c2 <HCSR04_Init+0x76>
	{
		pHCSR04->ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2208      	movs	r2, #8
 80054be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(htim);
 80054c2:	6838      	ldr	r0, [r7, #0]
 80054c4:	f003 fe9a 	bl	80091fc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(htim, pHCSR04->IC_TIM_CH);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6838      	ldr	r0, [r7, #0]
 80054d0:	f004 f8ca 	bl	8009668 <HAL_TIM_IC_Start_IT>

	return 0;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40020c00 	.word	0x40020c00
 80054e4:	40010000 	.word	0x40010000

080054e8 <HCSR04_TMR_IC_ISR>:
	}
}


void HCSR04_TMR_IC_ISR(HCSR04_t* pHCSR04, TIM_HandleTypeDef* htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
	uint32_t PS = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]

	if((htim->Instance == pHCSR04->TIM_Instance) && (htim->Channel == pHCSR04->ACTIV_CH))
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	f040 812e 	bne.w	8005760 <HCSR04_TMR_IC_ISR+0x278>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	7f1a      	ldrb	r2, [r3, #28]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800550e:	429a      	cmp	r2, r3
 8005510:	f040 8126 	bne.w	8005760 <HCSR04_TMR_IC_ISR+0x278>
	{
		if (pHCSR04->EDGE_STATE == 0)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	7d5b      	ldrb	r3, [r3, #21]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d16d      	bne.n	80055f8 <HCSR04_TMR_IC_ISR+0x110>
		{
			// Capture T1 & Reverse The ICU Edge Polarity
			pHCSR04->T1 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4619      	mov	r1, r3
 8005522:	6838      	ldr	r0, [r7, #0]
 8005524:	f004 fd8a 	bl	800a03c <HAL_TIM_ReadCapturedValue>
 8005528:	4602      	mov	r2, r0
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]
			pHCSR04->EDGE_STATE = 1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d108      	bne.n	800554e <HCSR04_TMR_IC_ISR+0x66>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 020a 	bic.w	r2, r2, #10
 800554a:	621a      	str	r2, [r3, #32]
 800554c:	e021      	b.n	8005592 <HCSR04_TMR_IC_ISR+0xaa>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b04      	cmp	r3, #4
 8005554:	d108      	bne.n	8005568 <HCSR04_TMR_IC_ISR+0x80>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005564:	6213      	str	r3, [r2, #32]
 8005566:	e014      	b.n	8005592 <HCSR04_TMR_IC_ISR+0xaa>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d108      	bne.n	8005582 <HCSR04_TMR_IC_ISR+0x9a>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800557e:	6213      	str	r3, [r2, #32]
 8005580:	e007      	b.n	8005592 <HCSR04_TMR_IC_ISR+0xaa>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005590:	6213      	str	r3, [r2, #32]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d108      	bne.n	80055ac <HCSR04_TMR_IC_ISR+0xc4>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0202 	orr.w	r2, r2, #2
 80055a8:	621a      	str	r2, [r3, #32]
 80055aa:	e021      	b.n	80055f0 <HCSR04_TMR_IC_ISR+0x108>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d108      	bne.n	80055c6 <HCSR04_TMR_IC_ISR+0xde>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	f043 0320 	orr.w	r3, r3, #32
 80055c2:	6213      	str	r3, [r2, #32]
 80055c4:	e014      	b.n	80055f0 <HCSR04_TMR_IC_ISR+0x108>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d108      	bne.n	80055e0 <HCSR04_TMR_IC_ISR+0xf8>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	6812      	ldr	r2, [r2, #0]
 80055d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055dc:	6213      	str	r3, [r2, #32]
 80055de:	e007      	b.n	80055f0 <HCSR04_TMR_IC_ISR+0x108>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ee:	6213      	str	r3, [r2, #32]
			pHCSR04->TMR_OVC = 0;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	82da      	strh	r2, [r3, #22]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);

			osSemaphoreRelease(DistSemaphoreHandle);
		}
	}
}
 80055f6:	e0b3      	b.n	8005760 <HCSR04_TMR_IC_ISR+0x278>
		else if (pHCSR04->EDGE_STATE == 1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	7d5b      	ldrb	r3, [r3, #21]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	f040 80af 	bne.w	8005760 <HCSR04_TMR_IC_ISR+0x278>
			PS = pHCSR04->TIM_Instance->PSC;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	60fb      	str	r3, [r7, #12]
			pHCSR04->TMR_ARR = pHCSR04->TIM_Instance->ARR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	61da      	str	r2, [r3, #28]
			pHCSR04->T2 = HAL_TIM_ReadCapturedValue(htim, pHCSR04->IC_TIM_CH);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4619      	mov	r1, r3
 800561a:	6838      	ldr	r0, [r7, #0]
 800561c:	f004 fd0e 	bl	800a03c <HAL_TIM_ReadCapturedValue>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24
			if (pHCSR04->T1 < pHCSR04->T2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1a      	ldr	r2, [r3, #32]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	429a      	cmp	r2, r3
 8005630:	d207      	bcs.n	8005642 <HCSR04_TMR_IC_ISR+0x15a>
				pHCSR04->DIFF = pHCSR04->T2 - pHCSR04->T1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	1ad2      	subs	r2, r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	629a      	str	r2, [r3, #40]	; 0x28
 8005640:	e00f      	b.n	8005662 <HCSR04_TMR_IC_ISR+0x17a>
			else if (pHCSR04->T2 < pHCSR04->T1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	429a      	cmp	r2, r3
 800564c:	d209      	bcs.n	8005662 <HCSR04_TMR_IC_ISR+0x17a>
				pHCSR04->DIFF = (pHCSR04->T2 + 65535) - pHCSR04->T1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800565c:	4413      	add	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6293      	str	r3, [r2, #40]	; 0x28
			pHCSR04->DISTANCE = ((pHCSR04->DIFF / 1000.0f) * 340.0f / 2.0f) / (pHCSR04->TIM_CLK_MHz/(PS+1));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800566e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005768 <HCSR04_TMR_IC_ISR+0x280>
 8005672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005676:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800576c <HCSR04_TMR_IC_ISR+0x284>
 800567a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800567e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800569a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			pHCSR04->EDGE_STATE = 0;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, pHCSR04->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d108      	bne.n	80056c4 <HCSR04_TMR_IC_ISR+0x1dc>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 020a 	bic.w	r2, r2, #10
 80056c0:	621a      	str	r2, [r3, #32]
 80056c2:	e021      	b.n	8005708 <HCSR04_TMR_IC_ISR+0x220>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d108      	bne.n	80056de <HCSR04_TMR_IC_ISR+0x1f6>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056da:	6213      	str	r3, [r2, #32]
 80056dc:	e014      	b.n	8005708 <HCSR04_TMR_IC_ISR+0x220>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d108      	bne.n	80056f8 <HCSR04_TMR_IC_ISR+0x210>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80056f4:	6213      	str	r3, [r2, #32]
 80056f6:	e007      	b.n	8005708 <HCSR04_TMR_IC_ISR+0x220>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005706:	6213      	str	r3, [r2, #32]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <HCSR04_TMR_IC_ISR+0x236>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a12      	ldr	r2, [r2, #32]
 800571a:	621a      	str	r2, [r3, #32]
 800571c:	e01b      	b.n	8005756 <HCSR04_TMR_IC_ISR+0x26e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b04      	cmp	r3, #4
 8005724:	d106      	bne.n	8005734 <HCSR04_TMR_IC_ISR+0x24c>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	6213      	str	r3, [r2, #32]
 8005732:	e010      	b.n	8005756 <HCSR04_TMR_IC_ISR+0x26e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d106      	bne.n	800574a <HCSR04_TMR_IC_ISR+0x262>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	6213      	str	r3, [r2, #32]
 8005748:	e005      	b.n	8005756 <HCSR04_TMR_IC_ISR+0x26e>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	6213      	str	r3, [r2, #32]
			osSemaphoreRelease(DistSemaphoreHandle);
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HCSR04_TMR_IC_ISR+0x288>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f007 f968 	bl	800ca30 <osSemaphoreRelease>
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	447a0000 	.word	0x447a0000
 800576c:	43aa0000 	.word	0x43aa0000
 8005770:	20000b78 	.word	0x20000b78

08005774 <HCSR04_Trigger>:

void HCSR04_Trigger(HCSR04_t* pHCSR04)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_SET);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	889b      	ldrh	r3, [r3, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	4619      	mov	r1, r3
 8005788:	f000 ff20 	bl	80065cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800578c:	2001      	movs	r0, #1
 800578e:	f000 f871 	bl	8005874 <HAL_Delay>
	HAL_GPIO_WritePin(pHCSR04->TRIG_GPIO, pHCSR04->TRIG_PIN, GPIO_PIN_RESET);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	889b      	ldrh	r3, [r3, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	4619      	mov	r1, r3
 800579e:	f000 ff15 	bl	80065cc <HAL_GPIO_WritePin>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HCSR04_Read>:

float HCSR04_Read(HCSR04_t* pHCSR04)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
	return pHCSR04->DISTANCE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	ee07 3a90 	vmov	s15, r3
}
 80057ba:	eeb0 0a67 	vmov.f32	s0, s15
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80057c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005800 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057cc:	480d      	ldr	r0, [pc, #52]	; (8005804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80057ce:	490e      	ldr	r1, [pc, #56]	; (8005808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80057d0:	4a0e      	ldr	r2, [pc, #56]	; (800580c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057d4:	e002      	b.n	80057dc <LoopCopyDataInit>

080057d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057da:	3304      	adds	r3, #4

080057dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057e0:	d3f9      	bcc.n	80057d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057e2:	4a0b      	ldr	r2, [pc, #44]	; (8005810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80057e4:	4c0b      	ldr	r4, [pc, #44]	; (8005814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80057e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057e8:	e001      	b.n	80057ee <LoopFillZerobss>

080057ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057ec:	3204      	adds	r2, #4

080057ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057f0:	d3fb      	bcc.n	80057ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057f2:	f7fe f953 	bl	8003a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057f6:	f00a fcab 	bl	8010150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057fa:	f7fc ff49 	bl	8002690 <main>
  bx  lr    
 80057fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005800:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8005804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005808:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800580c:	08015bd8 	.word	0x08015bd8
  ldr r2, =_sbss
 8005810:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8005814:	20004a70 	.word	0x20004a70

08005818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005818:	e7fe      	b.n	8005818 <ADC_IRQHandler>

0800581a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800581e:	2003      	movs	r0, #3
 8005820:	f000 f8f9 	bl	8005a16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005824:	200f      	movs	r0, #15
 8005826:	f7fd ffbb 	bl	80037a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800582a:	f7fd fcfd 	bl	8003228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_IncTick+0x20>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <HAL_IncTick+0x24>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4413      	add	r3, r2
 8005844:	4a04      	ldr	r2, [pc, #16]	; (8005858 <HAL_IncTick+0x24>)
 8005846:	6013      	str	r3, [r2, #0]
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000014 	.word	0x20000014
 8005858:	20000bd4 	.word	0x20000bd4

0800585c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return uwTick;
 8005860:	4b03      	ldr	r3, [pc, #12]	; (8005870 <HAL_GetTick+0x14>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	4618      	mov	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20000bd4 	.word	0x20000bd4

08005874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800587c:	f7ff ffee 	bl	800585c <HAL_GetTick>
 8005880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d005      	beq.n	800589a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <HAL_Delay+0x44>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800589a:	bf00      	nop
 800589c:	f7ff ffde 	bl	800585c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d8f7      	bhi.n	800589c <HAL_Delay+0x28>
  {
  }
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000014 	.word	0x20000014

080058bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <__NVIC_SetPriorityGrouping+0x40>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058d8:	4013      	ands	r3, r2
 80058da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <__NVIC_SetPriorityGrouping+0x44>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058ea:	4a04      	ldr	r2, [pc, #16]	; (80058fc <__NVIC_SetPriorityGrouping+0x40>)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	60d3      	str	r3, [r2, #12]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	e000ed00 	.word	0xe000ed00
 8005900:	05fa0000 	.word	0x05fa0000

08005904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <__NVIC_GetPriorityGrouping+0x18>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	f003 0307 	and.w	r3, r3, #7
}
 8005912:	4618      	mov	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	e000ed00 	.word	0xe000ed00

08005920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800592a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592e:	2b00      	cmp	r3, #0
 8005930:	db0b      	blt.n	800594a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	f003 021f 	and.w	r2, r3, #31
 8005938:	4907      	ldr	r1, [pc, #28]	; (8005958 <__NVIC_EnableIRQ+0x38>)
 800593a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	2001      	movs	r0, #1
 8005942:	fa00 f202 	lsl.w	r2, r0, r2
 8005946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	e000e100 	.word	0xe000e100

0800595c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596c:	2b00      	cmp	r3, #0
 800596e:	db0a      	blt.n	8005986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	490c      	ldr	r1, [pc, #48]	; (80059a8 <__NVIC_SetPriority+0x4c>)
 8005976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800597a:	0112      	lsls	r2, r2, #4
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	440b      	add	r3, r1
 8005980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005984:	e00a      	b.n	800599c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	4908      	ldr	r1, [pc, #32]	; (80059ac <__NVIC_SetPriority+0x50>)
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	3b04      	subs	r3, #4
 8005994:	0112      	lsls	r2, r2, #4
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	440b      	add	r3, r1
 800599a:	761a      	strb	r2, [r3, #24]
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	e000e100 	.word	0xe000e100
 80059ac:	e000ed00 	.word	0xe000ed00

080059b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b089      	sub	sp, #36	; 0x24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f1c3 0307 	rsb	r3, r3, #7
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	bf28      	it	cs
 80059ce:	2304      	movcs	r3, #4
 80059d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3304      	adds	r3, #4
 80059d6:	2b06      	cmp	r3, #6
 80059d8:	d902      	bls.n	80059e0 <NVIC_EncodePriority+0x30>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3b03      	subs	r3, #3
 80059de:	e000      	b.n	80059e2 <NVIC_EncodePriority+0x32>
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43da      	mvns	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	401a      	ands	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059f8:	f04f 31ff 	mov.w	r1, #4294967295
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	43d9      	mvns	r1, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a08:	4313      	orrs	r3, r2
         );
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3724      	adds	r7, #36	; 0x24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff ff4c 	bl	80058bc <__NVIC_SetPriorityGrouping>
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a3e:	f7ff ff61 	bl	8005904 <__NVIC_GetPriorityGrouping>
 8005a42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	6978      	ldr	r0, [r7, #20]
 8005a4a:	f7ff ffb1 	bl	80059b0 <NVIC_EncodePriority>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a54:	4611      	mov	r1, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff ff80 	bl	800595c <__NVIC_SetPriority>
}
 8005a5c:	bf00      	nop
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff ff54 	bl	8005920 <__NVIC_EnableIRQ>
}
 8005a78:	bf00      	nop
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a8c:	f7ff fee6 	bl	800585c <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e099      	b.n	8005bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005abc:	e00f      	b.n	8005ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005abe:	f7ff fecd 	bl	800585c <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	d908      	bls.n	8005ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e078      	b.n	8005bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e8      	bne.n	8005abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <HAL_DMA_Init+0x158>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d107      	bne.n	8005b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	4313      	orrs	r3, r2
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0307 	bic.w	r3, r3, #7
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d117      	bne.n	8005ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00e      	beq.n	8005ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb09 	bl	800619c <DMA_CheckFifoParam>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2240      	movs	r2, #64	; 0x40
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e016      	b.n	8005bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fac0 	bl	8006130 <DMA_CalcBaseAndBitshift>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb8:	223f      	movs	r2, #63	; 0x3f
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e010803f 	.word	0xe010803f

08005bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_DMA_Start_IT+0x26>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e048      	b.n	8005c94 <HAL_DMA_Start_IT+0xb8>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d137      	bne.n	8005c86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fa52 	bl	80060d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	223f      	movs	r2, #63	; 0x3f
 8005c36:	409a      	lsls	r2, r3
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0216 	orr.w	r2, r2, #22
 8005c4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e005      	b.n	8005c92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005caa:	f7ff fdd7 	bl	800585c <HAL_GetTick>
 8005cae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d008      	beq.n	8005cce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2280      	movs	r2, #128	; 0x80
 8005cc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e052      	b.n	8005d74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0216 	bic.w	r2, r2, #22
 8005cdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <HAL_DMA_Abort+0x62>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0208 	bic.w	r2, r2, #8
 8005d0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d1e:	e013      	b.n	8005d48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d20:	f7ff fd9c 	bl	800585c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d90c      	bls.n	8005d48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2203      	movs	r2, #3
 8005d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e015      	b.n	8005d74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e4      	bne.n	8005d20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5a:	223f      	movs	r2, #63	; 0x3f
 8005d5c:	409a      	lsls	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d004      	beq.n	8005d9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e00c      	b.n	8005db4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2205      	movs	r2, #5
 8005d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005dcc:	4b8e      	ldr	r3, [pc, #568]	; (8006008 <HAL_DMA_IRQHandler+0x248>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a8e      	ldr	r2, [pc, #568]	; (800600c <HAL_DMA_IRQHandler+0x24c>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	0a9b      	lsrs	r3, r3, #10
 8005dd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dea:	2208      	movs	r2, #8
 8005dec:	409a      	lsls	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01a      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d013      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0204 	bic.w	r2, r2, #4
 8005e12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e18:	2208      	movs	r2, #8
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	f043 0201 	orr.w	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	2201      	movs	r2, #1
 8005e32:	409a      	lsls	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d012      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4e:	2201      	movs	r2, #1
 8005e50:	409a      	lsls	r2, r3
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f043 0202 	orr.w	r2, r3, #2
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e66:	2204      	movs	r2, #4
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d012      	beq.n	8005e98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e84:	2204      	movs	r2, #4
 8005e86:	409a      	lsls	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	f043 0204 	orr.w	r2, r3, #4
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d043      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d03c      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eba:	2210      	movs	r2, #16
 8005ebc:	409a      	lsls	r2, r3
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d018      	beq.n	8005f02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d108      	bne.n	8005ef0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d024      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
 8005eee:	e01f      	b.n	8005f30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01b      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	4798      	blx	r3
 8005f00:	e016      	b.n	8005f30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d107      	bne.n	8005f20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0208 	bic.w	r2, r2, #8
 8005f1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	2220      	movs	r2, #32
 8005f36:	409a      	lsls	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 808f 	beq.w	8006060 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8087 	beq.w	8006060 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f56:	2220      	movs	r2, #32
 8005f58:	409a      	lsls	r2, r3
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d136      	bne.n	8005fd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0216 	bic.w	r2, r2, #22
 8005f78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <HAL_DMA_IRQHandler+0x1da>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0208 	bic.w	r2, r2, #8
 8005fa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fae:	223f      	movs	r2, #63	; 0x3f
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d07e      	beq.n	80060cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
        }
        return;
 8005fd6:	e079      	b.n	80060cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01d      	beq.n	8006022 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10d      	bne.n	8006010 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d031      	beq.n	8006060 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
 8006004:	e02c      	b.n	8006060 <HAL_DMA_IRQHandler+0x2a0>
 8006006:	bf00      	nop
 8006008:	2000000c 	.word	0x2000000c
 800600c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d023      	beq.n	8006060 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
 8006020:	e01e      	b.n	8006060 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10f      	bne.n	8006050 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0210 	bic.w	r2, r2, #16
 800603e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	2b00      	cmp	r3, #0
 8006066:	d032      	beq.n	80060ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d022      	beq.n	80060ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2205      	movs	r2, #5
 8006078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	3301      	adds	r3, #1
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	429a      	cmp	r2, r3
 8006096:	d307      	bcc.n	80060a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f2      	bne.n	800608c <HAL_DMA_IRQHandler+0x2cc>
 80060a6:	e000      	b.n	80060aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80060a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
 80060ca:	e000      	b.n	80060ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80060cc:	bf00      	nop
    }
  }
}
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d108      	bne.n	8006114 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006112:	e007      	b.n	8006124 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	3b10      	subs	r3, #16
 8006140:	4a13      	ldr	r2, [pc, #76]	; (8006190 <DMA_CalcBaseAndBitshift+0x60>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800614a:	4a12      	ldr	r2, [pc, #72]	; (8006194 <DMA_CalcBaseAndBitshift+0x64>)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b03      	cmp	r3, #3
 800615c:	d908      	bls.n	8006170 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <DMA_CalcBaseAndBitshift+0x68>)
 8006166:	4013      	ands	r3, r2
 8006168:	1d1a      	adds	r2, r3, #4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	659a      	str	r2, [r3, #88]	; 0x58
 800616e:	e006      	b.n	800617e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	4b08      	ldr	r3, [pc, #32]	; (8006198 <DMA_CalcBaseAndBitshift+0x68>)
 8006178:	4013      	ands	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	aaaaaaab 	.word	0xaaaaaaab
 8006194:	0801570c 	.word	0x0801570c
 8006198:	fffffc00 	.word	0xfffffc00

0800619c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d11f      	bne.n	80061f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d856      	bhi.n	800626a <DMA_CheckFifoParam+0xce>
 80061bc:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <DMA_CheckFifoParam+0x28>)
 80061be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c2:	bf00      	nop
 80061c4:	080061d5 	.word	0x080061d5
 80061c8:	080061e7 	.word	0x080061e7
 80061cc:	080061d5 	.word	0x080061d5
 80061d0:	0800626b 	.word	0x0800626b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d046      	beq.n	800626e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061e4:	e043      	b.n	800626e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061ee:	d140      	bne.n	8006272 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061f4:	e03d      	b.n	8006272 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061fe:	d121      	bne.n	8006244 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d837      	bhi.n	8006276 <DMA_CheckFifoParam+0xda>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <DMA_CheckFifoParam+0x70>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	0800621d 	.word	0x0800621d
 8006210:	08006223 	.word	0x08006223
 8006214:	0800621d 	.word	0x0800621d
 8006218:	08006235 	.word	0x08006235
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e030      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d025      	beq.n	800627a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006232:	e022      	b.n	800627a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800623c:	d11f      	bne.n	800627e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006242:	e01c      	b.n	800627e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d903      	bls.n	8006252 <DMA_CheckFifoParam+0xb6>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b03      	cmp	r3, #3
 800624e:	d003      	beq.n	8006258 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006250:	e018      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
      break;
 8006256:	e015      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00e      	beq.n	8006282 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
      break;
 8006268:	e00b      	b.n	8006282 <DMA_CheckFifoParam+0xe6>
      break;
 800626a:	bf00      	nop
 800626c:	e00a      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
      break;
 800626e:	bf00      	nop
 8006270:	e008      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
      break;
 8006272:	bf00      	nop
 8006274:	e006      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
      break;
 8006276:	bf00      	nop
 8006278:	e004      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
      break;
 800627a:	bf00      	nop
 800627c:	e002      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
      break;   
 800627e:	bf00      	nop
 8006280:	e000      	b.n	8006284 <DMA_CheckFifoParam+0xe8>
      break;
 8006282:	bf00      	nop
    }
  } 
  
  return status; 
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop

08006294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006294:	b480      	push	{r7}
 8006296:	b089      	sub	sp, #36	; 0x24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	e169      	b.n	8006588 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80062b4:	2201      	movs	r2, #1
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4013      	ands	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	f040 8158 	bne.w	8006582 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d005      	beq.n	80062ea <HAL_GPIO_Init+0x56>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d130      	bne.n	800634c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	2203      	movs	r2, #3
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43db      	mvns	r3, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4013      	ands	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4313      	orrs	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006320:	2201      	movs	r2, #1
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	f003 0201 	and.w	r2, r3, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4313      	orrs	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b03      	cmp	r3, #3
 8006356:	d017      	beq.n	8006388 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	2203      	movs	r2, #3
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4013      	ands	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4313      	orrs	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d123      	bne.n	80063dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	08da      	lsrs	r2, r3, #3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3208      	adds	r2, #8
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	220f      	movs	r2, #15
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	08da      	lsrs	r2, r3, #3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3208      	adds	r2, #8
 80063d6:	69b9      	ldr	r1, [r7, #24]
 80063d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2203      	movs	r2, #3
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f003 0203 	and.w	r2, r3, #3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4313      	orrs	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80b2 	beq.w	8006582 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800641e:	4b60      	ldr	r3, [pc, #384]	; (80065a0 <HAL_GPIO_Init+0x30c>)
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	4a5f      	ldr	r2, [pc, #380]	; (80065a0 <HAL_GPIO_Init+0x30c>)
 8006424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006428:	6453      	str	r3, [r2, #68]	; 0x44
 800642a:	4b5d      	ldr	r3, [pc, #372]	; (80065a0 <HAL_GPIO_Init+0x30c>)
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006436:	4a5b      	ldr	r2, [pc, #364]	; (80065a4 <HAL_GPIO_Init+0x310>)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	089b      	lsrs	r3, r3, #2
 800643c:	3302      	adds	r3, #2
 800643e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006442:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	220f      	movs	r2, #15
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	43db      	mvns	r3, r3
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	4013      	ands	r3, r2
 8006458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a52      	ldr	r2, [pc, #328]	; (80065a8 <HAL_GPIO_Init+0x314>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d02b      	beq.n	80064ba <HAL_GPIO_Init+0x226>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a51      	ldr	r2, [pc, #324]	; (80065ac <HAL_GPIO_Init+0x318>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d025      	beq.n	80064b6 <HAL_GPIO_Init+0x222>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a50      	ldr	r2, [pc, #320]	; (80065b0 <HAL_GPIO_Init+0x31c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01f      	beq.n	80064b2 <HAL_GPIO_Init+0x21e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a4f      	ldr	r2, [pc, #316]	; (80065b4 <HAL_GPIO_Init+0x320>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d019      	beq.n	80064ae <HAL_GPIO_Init+0x21a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a4e      	ldr	r2, [pc, #312]	; (80065b8 <HAL_GPIO_Init+0x324>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_GPIO_Init+0x216>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a4d      	ldr	r2, [pc, #308]	; (80065bc <HAL_GPIO_Init+0x328>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00d      	beq.n	80064a6 <HAL_GPIO_Init+0x212>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a4c      	ldr	r2, [pc, #304]	; (80065c0 <HAL_GPIO_Init+0x32c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d007      	beq.n	80064a2 <HAL_GPIO_Init+0x20e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a4b      	ldr	r2, [pc, #300]	; (80065c4 <HAL_GPIO_Init+0x330>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d101      	bne.n	800649e <HAL_GPIO_Init+0x20a>
 800649a:	2307      	movs	r3, #7
 800649c:	e00e      	b.n	80064bc <HAL_GPIO_Init+0x228>
 800649e:	2308      	movs	r3, #8
 80064a0:	e00c      	b.n	80064bc <HAL_GPIO_Init+0x228>
 80064a2:	2306      	movs	r3, #6
 80064a4:	e00a      	b.n	80064bc <HAL_GPIO_Init+0x228>
 80064a6:	2305      	movs	r3, #5
 80064a8:	e008      	b.n	80064bc <HAL_GPIO_Init+0x228>
 80064aa:	2304      	movs	r3, #4
 80064ac:	e006      	b.n	80064bc <HAL_GPIO_Init+0x228>
 80064ae:	2303      	movs	r3, #3
 80064b0:	e004      	b.n	80064bc <HAL_GPIO_Init+0x228>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e002      	b.n	80064bc <HAL_GPIO_Init+0x228>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <HAL_GPIO_Init+0x228>
 80064ba:	2300      	movs	r3, #0
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	f002 0203 	and.w	r2, r2, #3
 80064c2:	0092      	lsls	r2, r2, #2
 80064c4:	4093      	lsls	r3, r2
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80064cc:	4935      	ldr	r1, [pc, #212]	; (80065a4 <HAL_GPIO_Init+0x310>)
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	089b      	lsrs	r3, r3, #2
 80064d2:	3302      	adds	r3, #2
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064da:	4b3b      	ldr	r3, [pc, #236]	; (80065c8 <HAL_GPIO_Init+0x334>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	43db      	mvns	r3, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4013      	ands	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064fe:	4a32      	ldr	r2, [pc, #200]	; (80065c8 <HAL_GPIO_Init+0x334>)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006504:	4b30      	ldr	r3, [pc, #192]	; (80065c8 <HAL_GPIO_Init+0x334>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	43db      	mvns	r3, r3
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4013      	ands	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006528:	4a27      	ldr	r2, [pc, #156]	; (80065c8 <HAL_GPIO_Init+0x334>)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800652e:	4b26      	ldr	r3, [pc, #152]	; (80065c8 <HAL_GPIO_Init+0x334>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	43db      	mvns	r3, r3
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4013      	ands	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006552:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <HAL_GPIO_Init+0x334>)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006558:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <HAL_GPIO_Init+0x334>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	43db      	mvns	r3, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4013      	ands	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800657c:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <HAL_GPIO_Init+0x334>)
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	3301      	adds	r3, #1
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b0f      	cmp	r3, #15
 800658c:	f67f ae92 	bls.w	80062b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	3724      	adds	r7, #36	; 0x24
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40023800 	.word	0x40023800
 80065a4:	40013800 	.word	0x40013800
 80065a8:	40020000 	.word	0x40020000
 80065ac:	40020400 	.word	0x40020400
 80065b0:	40020800 	.word	0x40020800
 80065b4:	40020c00 	.word	0x40020c00
 80065b8:	40021000 	.word	0x40021000
 80065bc:	40021400 	.word	0x40021400
 80065c0:	40021800 	.word	0x40021800
 80065c4:	40021c00 	.word	0x40021c00
 80065c8:	40013c00 	.word	0x40013c00

080065cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	807b      	strh	r3, [r7, #2]
 80065d8:	4613      	mov	r3, r2
 80065da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065dc:	787b      	ldrb	r3, [r7, #1]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065e2:	887a      	ldrh	r2, [r7, #2]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80065e8:	e003      	b.n	80065f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80065ea:	887b      	ldrh	r3, [r7, #2]
 80065ec:	041a      	lsls	r2, r3, #16
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	619a      	str	r2, [r3, #24]
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e07f      	b.n	8006712 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fc fe26 	bl	8003278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2224      	movs	r2, #36	; 0x24
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006650:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006660:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d107      	bne.n	800667a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	e006      	b.n	8006688 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006686:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d104      	bne.n	800669a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006698:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6859      	ldr	r1, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	4b1d      	ldr	r3, [pc, #116]	; (800671c <HAL_I2C_Init+0x11c>)
 80066a6:	430b      	orrs	r3, r1
 80066a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69d9      	ldr	r1, [r3, #28]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1a      	ldr	r2, [r3, #32]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	02008000 	.word	0x02008000

08006720 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	4608      	mov	r0, r1
 800672a:	4611      	mov	r1, r2
 800672c:	461a      	mov	r2, r3
 800672e:	4603      	mov	r3, r0
 8006730:	817b      	strh	r3, [r7, #10]
 8006732:	460b      	mov	r3, r1
 8006734:	813b      	strh	r3, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b20      	cmp	r3, #32
 8006744:	f040 80f9 	bne.w	800693a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_I2C_Mem_Write+0x34>
 800674e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0ed      	b.n	800693c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_I2C_Mem_Write+0x4e>
 800676a:	2302      	movs	r3, #2
 800676c:	e0e6      	b.n	800693c <HAL_I2C_Mem_Write+0x21c>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006776:	f7ff f871 	bl	800585c <HAL_GetTick>
 800677a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2319      	movs	r3, #25
 8006782:	2201      	movs	r2, #1
 8006784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fac3 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0d1      	b.n	800693c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2221      	movs	r2, #33	; 0x21
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2240      	movs	r2, #64	; 0x40
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067c0:	88f8      	ldrh	r0, [r7, #6]
 80067c2:	893a      	ldrh	r2, [r7, #8]
 80067c4:	8979      	ldrh	r1, [r7, #10]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	4603      	mov	r3, r0
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f9d3 	bl	8006b7c <I2C_RequestMemoryWrite>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0a9      	b.n	800693c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2bff      	cmp	r3, #255	; 0xff
 80067f0:	d90e      	bls.n	8006810 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	22ff      	movs	r2, #255	; 0xff
 80067f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	8979      	ldrh	r1, [r7, #10]
 8006800:	2300      	movs	r3, #0
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 fc1f 	bl	800704c <I2C_TransferConfig>
 800680e:	e00f      	b.n	8006830 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	b2da      	uxtb	r2, r3
 8006820:	8979      	ldrh	r1, [r7, #10]
 8006822:	2300      	movs	r3, #0
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fc0e 	bl	800704c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 faad 	bl	8006d94 <I2C_WaitOnTXISFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e07b      	b.n	800693c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d034      	beq.n	80068e8 <HAL_I2C_Mem_Write+0x1c8>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006882:	2b00      	cmp	r3, #0
 8006884:	d130      	bne.n	80068e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	2200      	movs	r2, #0
 800688e:	2180      	movs	r1, #128	; 0x80
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fa3f 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e04d      	b.n	800693c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2bff      	cmp	r3, #255	; 0xff
 80068a8:	d90e      	bls.n	80068c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	22ff      	movs	r2, #255	; 0xff
 80068ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	8979      	ldrh	r1, [r7, #10]
 80068b8:	2300      	movs	r3, #0
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fbc3 	bl	800704c <I2C_TransferConfig>
 80068c6:	e00f      	b.n	80068e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	8979      	ldrh	r1, [r7, #10]
 80068da:	2300      	movs	r3, #0
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fbb2 	bl	800704c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d19e      	bne.n	8006830 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fa8c 	bl	8006e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e01a      	b.n	800693c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2220      	movs	r2, #32
 800690c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <HAL_I2C_Mem_Write+0x224>)
 800691a:	400b      	ands	r3, r1
 800691c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e000      	b.n	800693c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800693a:	2302      	movs	r3, #2
  }
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	fe00e800 	.word	0xfe00e800

08006948 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	461a      	mov	r2, r3
 8006956:	4603      	mov	r3, r0
 8006958:	817b      	strh	r3, [r7, #10]
 800695a:	460b      	mov	r3, r1
 800695c:	813b      	strh	r3, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b20      	cmp	r3, #32
 800696c:	f040 80fd 	bne.w	8006b6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_I2C_Mem_Read+0x34>
 8006976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e0f1      	b.n	8006b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_I2C_Mem_Read+0x4e>
 8006992:	2302      	movs	r3, #2
 8006994:	e0ea      	b.n	8006b6c <HAL_I2C_Mem_Read+0x224>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800699e:	f7fe ff5d 	bl	800585c <HAL_GetTick>
 80069a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2319      	movs	r3, #25
 80069aa:	2201      	movs	r2, #1
 80069ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f9af 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e0d5      	b.n	8006b6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2222      	movs	r2, #34	; 0x22
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2240      	movs	r2, #64	; 0x40
 80069cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069e8:	88f8      	ldrh	r0, [r7, #6]
 80069ea:	893a      	ldrh	r2, [r7, #8]
 80069ec:	8979      	ldrh	r1, [r7, #10]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	4603      	mov	r3, r0
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f913 	bl	8006c24 <I2C_RequestMemoryRead>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0ad      	b.n	8006b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2bff      	cmp	r3, #255	; 0xff
 8006a18:	d90e      	bls.n	8006a38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	22ff      	movs	r2, #255	; 0xff
 8006a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	8979      	ldrh	r1, [r7, #10]
 8006a28:	4b52      	ldr	r3, [pc, #328]	; (8006b74 <HAL_I2C_Mem_Read+0x22c>)
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fb0b 	bl	800704c <I2C_TransferConfig>
 8006a36:	e00f      	b.n	8006a58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	8979      	ldrh	r1, [r7, #10]
 8006a4a:	4b4a      	ldr	r3, [pc, #296]	; (8006b74 <HAL_I2C_Mem_Read+0x22c>)
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fafa 	bl	800704c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2104      	movs	r1, #4
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f956 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e07c      	b.n	8006b6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d034      	beq.n	8006b18 <HAL_I2C_Mem_Read+0x1d0>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d130      	bne.n	8006b18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	2200      	movs	r2, #0
 8006abe:	2180      	movs	r1, #128	; 0x80
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f927 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e04d      	b.n	8006b6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2bff      	cmp	r3, #255	; 0xff
 8006ad8:	d90e      	bls.n	8006af8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	22ff      	movs	r2, #255	; 0xff
 8006ade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	8979      	ldrh	r1, [r7, #10]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 faab 	bl	800704c <I2C_TransferConfig>
 8006af6:	e00f      	b.n	8006b18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	8979      	ldrh	r1, [r7, #10]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fa9a 	bl	800704c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d19a      	bne.n	8006a58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f974 	bl	8006e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e01a      	b.n	8006b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6859      	ldr	r1, [r3, #4]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <HAL_I2C_Mem_Read+0x230>)
 8006b4a:	400b      	ands	r3, r1
 8006b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	80002400 	.word	0x80002400
 8006b78:	fe00e800 	.word	0xfe00e800

08006b7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	4608      	mov	r0, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	817b      	strh	r3, [r7, #10]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	813b      	strh	r3, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b96:	88fb      	ldrh	r3, [r7, #6]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	8979      	ldrh	r1, [r7, #10]
 8006b9c:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <I2C_RequestMemoryWrite+0xa4>)
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 fa51 	bl	800704c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	69b9      	ldr	r1, [r7, #24]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f8f0 	bl	8006d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e02c      	b.n	8006c18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d105      	bne.n	8006bd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bc4:	893b      	ldrh	r3, [r7, #8]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	629a      	str	r2, [r3, #40]	; 0x28
 8006bce:	e015      	b.n	8006bfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bd0:	893b      	ldrh	r3, [r7, #8]
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	69b9      	ldr	r1, [r7, #24]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f8d6 	bl	8006d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e012      	b.n	8006c18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bf2:	893b      	ldrh	r3, [r7, #8]
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2200      	movs	r2, #0
 8006c04:	2180      	movs	r1, #128	; 0x80
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f884 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	80002000 	.word	0x80002000

08006c24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	461a      	mov	r2, r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	817b      	strh	r3, [r7, #10]
 8006c36:	460b      	mov	r3, r1
 8006c38:	813b      	strh	r3, [r7, #8]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	8979      	ldrh	r1, [r7, #10]
 8006c44:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <I2C_RequestMemoryRead+0xa4>)
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f9fe 	bl	800704c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	69b9      	ldr	r1, [r7, #24]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f89d 	bl	8006d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e02c      	b.n	8006cbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d105      	bne.n	8006c76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c6a:	893b      	ldrh	r3, [r7, #8]
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
 8006c74:	e015      	b.n	8006ca2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c76:	893b      	ldrh	r3, [r7, #8]
 8006c78:	0a1b      	lsrs	r3, r3, #8
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	69b9      	ldr	r1, [r7, #24]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f883 	bl	8006d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e012      	b.n	8006cbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c98:	893b      	ldrh	r3, [r7, #8]
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2140      	movs	r1, #64	; 0x40
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f831 	bl	8006d14 <I2C_WaitOnFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	80002000 	.word	0x80002000

08006ccc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d103      	bne.n	8006cea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d007      	beq.n	8006d08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	619a      	str	r2, [r3, #24]
  }
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d24:	e022      	b.n	8006d6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d01e      	beq.n	8006d6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2e:	f7fe fd95 	bl	800585c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d113      	bne.n	8006d6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d48:	f043 0220 	orr.w	r2, r3, #32
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e00f      	b.n	8006d8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	4013      	ands	r3, r2
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	bf0c      	ite	eq
 8006d7c:	2301      	moveq	r3, #1
 8006d7e:	2300      	movne	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d0cd      	beq.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006da0:	e02c      	b.n	8006dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f870 	bl	8006e8c <I2C_IsErrorOccurred>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e02a      	b.n	8006e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbc:	d01e      	beq.n	8006dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dbe:	f7fe fd4d 	bl	800585c <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d302      	bcc.n	8006dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d113      	bne.n	8006dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e007      	b.n	8006e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d1cb      	bne.n	8006da2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e20:	e028      	b.n	8006e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 f830 	bl	8006e8c <I2C_IsErrorOccurred>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e026      	b.n	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e36:	f7fe fd11 	bl	800585c <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d113      	bne.n	8006e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e50:	f043 0220 	orr.w	r2, r3, #32
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e007      	b.n	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d1cf      	bne.n	8006e22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	; 0x28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d068      	beq.n	8006f8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2210      	movs	r2, #16
 8006ebe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ec0:	e049      	b.n	8006f56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d045      	beq.n	8006f56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006eca:	f7fe fcc7 	bl	800585c <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d302      	bcc.n	8006ee0 <I2C_IsErrorOccurred+0x54>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d13a      	bne.n	8006f56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ef2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f02:	d121      	bne.n	8006f48 <I2C_IsErrorOccurred+0xbc>
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f0a:	d01d      	beq.n	8006f48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f0c:	7cfb      	ldrb	r3, [r7, #19]
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d01a      	beq.n	8006f48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f22:	f7fe fc9b 	bl	800585c <HAL_GetTick>
 8006f26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f28:	e00e      	b.n	8006f48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f2a:	f7fe fc97 	bl	800585c <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b19      	cmp	r3, #25
 8006f36:	d907      	bls.n	8006f48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	f043 0320 	orr.w	r3, r3, #32
 8006f3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f46:	e006      	b.n	8006f56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d1e9      	bne.n	8006f2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	d003      	beq.n	8006f6c <I2C_IsErrorOccurred+0xe0>
 8006f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0aa      	beq.n	8006ec2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d103      	bne.n	8006f7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	f043 0304 	orr.w	r3, r3, #4
 8006f82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00b      	beq.n	8006fb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	f043 0308 	orr.w	r3, r3, #8
 8006fc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	f043 0302 	orr.w	r3, r3, #2
 8006fe6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01c      	beq.n	800703a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7ff fe63 	bl	8006ccc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6859      	ldr	r1, [r3, #4]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <I2C_IsErrorOccurred+0x1bc>)
 8007012:	400b      	ands	r3, r1
 8007014:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800703a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800703e:	4618      	mov	r0, r3
 8007040:	3728      	adds	r7, #40	; 0x28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	fe00e800 	.word	0xfe00e800

0800704c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	607b      	str	r3, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	817b      	strh	r3, [r7, #10]
 800705a:	4613      	mov	r3, r2
 800705c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800705e:	897b      	ldrh	r3, [r7, #10]
 8007060:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007064:	7a7b      	ldrb	r3, [r7, #9]
 8007066:	041b      	lsls	r3, r3, #16
 8007068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800706c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	4313      	orrs	r3, r2
 8007076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800707a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	0d5b      	lsrs	r3, r3, #21
 8007086:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <I2C_TransferConfig+0x60>)
 800708c:	430b      	orrs	r3, r1
 800708e:	43db      	mvns	r3, r3
 8007090:	ea02 0103 	and.w	r1, r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	03ff63ff 	.word	0x03ff63ff

080070b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	d138      	bne.n	8007138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e032      	b.n	800713a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2224      	movs	r2, #36	; 0x24
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0201 	bic.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6819      	ldr	r1, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e000      	b.n	800713a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
  }
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b20      	cmp	r3, #32
 800715a:	d139      	bne.n	80071d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007166:	2302      	movs	r3, #2
 8007168:	e033      	b.n	80071d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2224      	movs	r2, #36	; 0x24
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0201 	bic.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007198:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e000      	b.n	80071d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80071ea:	4b23      	ldr	r3, [pc, #140]	; (8007278 <HAL_PWREx_EnableOverDrive+0x98>)
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	4a22      	ldr	r2, [pc, #136]	; (8007278 <HAL_PWREx_EnableOverDrive+0x98>)
 80071f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f4:	6413      	str	r3, [r2, #64]	; 0x40
 80071f6:	4b20      	ldr	r3, [pc, #128]	; (8007278 <HAL_PWREx_EnableOverDrive+0x98>)
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007202:	4b1e      	ldr	r3, [pc, #120]	; (800727c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1d      	ldr	r2, [pc, #116]	; (800727c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800720c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800720e:	f7fe fb25 	bl	800585c <HAL_GetTick>
 8007212:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007214:	e009      	b.n	800722a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007216:	f7fe fb21 	bl	800585c <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007224:	d901      	bls.n	800722a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e022      	b.n	8007270 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800722a:	4b14      	ldr	r3, [pc, #80]	; (800727c <HAL_PWREx_EnableOverDrive+0x9c>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007236:	d1ee      	bne.n	8007216 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007238:	4b10      	ldr	r3, [pc, #64]	; (800727c <HAL_PWREx_EnableOverDrive+0x9c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a0f      	ldr	r2, [pc, #60]	; (800727c <HAL_PWREx_EnableOverDrive+0x9c>)
 800723e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007244:	f7fe fb0a 	bl	800585c <HAL_GetTick>
 8007248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800724a:	e009      	b.n	8007260 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800724c:	f7fe fb06 	bl	800585c <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800725a:	d901      	bls.n	8007260 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e007      	b.n	8007270 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007260:	4b06      	ldr	r3, [pc, #24]	; (800727c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800726c:	d1ee      	bne.n	800724c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40023800 	.word	0x40023800
 800727c:	40007000 	.word	0x40007000

08007280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e291      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 8087 	beq.w	80073b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072a4:	4b96      	ldr	r3, [pc, #600]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 030c 	and.w	r3, r3, #12
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d00c      	beq.n	80072ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072b0:	4b93      	ldr	r3, [pc, #588]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 030c 	and.w	r3, r3, #12
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d112      	bne.n	80072e2 <HAL_RCC_OscConfig+0x62>
 80072bc:	4b90      	ldr	r3, [pc, #576]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c8:	d10b      	bne.n	80072e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ca:	4b8d      	ldr	r3, [pc, #564]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d06c      	beq.n	80073b0 <HAL_RCC_OscConfig+0x130>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d168      	bne.n	80073b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e26b      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ea:	d106      	bne.n	80072fa <HAL_RCC_OscConfig+0x7a>
 80072ec:	4b84      	ldr	r3, [pc, #528]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a83      	ldr	r2, [pc, #524]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80072f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	e02e      	b.n	8007358 <HAL_RCC_OscConfig+0xd8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0x9c>
 8007302:	4b7f      	ldr	r3, [pc, #508]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a7e      	ldr	r2, [pc, #504]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	4b7c      	ldr	r3, [pc, #496]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a7b      	ldr	r2, [pc, #492]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e01d      	b.n	8007358 <HAL_RCC_OscConfig+0xd8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007324:	d10c      	bne.n	8007340 <HAL_RCC_OscConfig+0xc0>
 8007326:	4b76      	ldr	r3, [pc, #472]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a75      	ldr	r2, [pc, #468]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800732c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	4b73      	ldr	r3, [pc, #460]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a72      	ldr	r2, [pc, #456]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e00b      	b.n	8007358 <HAL_RCC_OscConfig+0xd8>
 8007340:	4b6f      	ldr	r3, [pc, #444]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a6e      	ldr	r2, [pc, #440]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	4b6c      	ldr	r3, [pc, #432]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a6b      	ldr	r2, [pc, #428]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d013      	beq.n	8007388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fe fa7c 	bl	800585c <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007368:	f7fe fa78 	bl	800585c <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b64      	cmp	r3, #100	; 0x64
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e21f      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737a:	4b61      	ldr	r3, [pc, #388]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0xe8>
 8007386:	e014      	b.n	80073b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fe fa68 	bl	800585c <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007390:	f7fe fa64 	bl	800585c <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b64      	cmp	r3, #100	; 0x64
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e20b      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a2:	4b57      	ldr	r3, [pc, #348]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f0      	bne.n	8007390 <HAL_RCC_OscConfig+0x110>
 80073ae:	e000      	b.n	80073b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d069      	beq.n	8007492 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073be:	4b50      	ldr	r3, [pc, #320]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00b      	beq.n	80073e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ca:	4b4d      	ldr	r3, [pc, #308]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 030c 	and.w	r3, r3, #12
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d11c      	bne.n	8007410 <HAL_RCC_OscConfig+0x190>
 80073d6:	4b4a      	ldr	r3, [pc, #296]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d116      	bne.n	8007410 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073e2:	4b47      	ldr	r3, [pc, #284]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_RCC_OscConfig+0x17a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d001      	beq.n	80073fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e1df      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073fa:	4b41      	ldr	r3, [pc, #260]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	493d      	ldr	r1, [pc, #244]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800740a:	4313      	orrs	r3, r2
 800740c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800740e:	e040      	b.n	8007492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d023      	beq.n	8007460 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007418:	4b39      	ldr	r3, [pc, #228]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a38      	ldr	r2, [pc, #224]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007424:	f7fe fa1a 	bl	800585c <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800742c:	f7fe fa16 	bl	800585c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e1bd      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800743e:	4b30      	ldr	r3, [pc, #192]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f0      	beq.n	800742c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800744a:	4b2d      	ldr	r3, [pc, #180]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4929      	ldr	r1, [pc, #164]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 800745a:	4313      	orrs	r3, r2
 800745c:	600b      	str	r3, [r1, #0]
 800745e:	e018      	b.n	8007492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007460:	4b27      	ldr	r3, [pc, #156]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a26      	ldr	r2, [pc, #152]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746c:	f7fe f9f6 	bl	800585c <HAL_GetTick>
 8007470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007474:	f7fe f9f2 	bl	800585c <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e199      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007486:	4b1e      	ldr	r3, [pc, #120]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d038      	beq.n	8007510 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d019      	beq.n	80074da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074a6:	4b16      	ldr	r3, [pc, #88]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074aa:	4a15      	ldr	r2, [pc, #84]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074ac:	f043 0301 	orr.w	r3, r3, #1
 80074b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b2:	f7fe f9d3 	bl	800585c <HAL_GetTick>
 80074b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b8:	e008      	b.n	80074cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ba:	f7fe f9cf 	bl	800585c <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d901      	bls.n	80074cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e176      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0f0      	beq.n	80074ba <HAL_RCC_OscConfig+0x23a>
 80074d8:	e01a      	b.n	8007510 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074de:	4a08      	ldr	r2, [pc, #32]	; (8007500 <HAL_RCC_OscConfig+0x280>)
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e6:	f7fe f9b9 	bl	800585c <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ec:	e00a      	b.n	8007504 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ee:	f7fe f9b5 	bl	800585c <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d903      	bls.n	8007504 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e15c      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
 8007500:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007504:	4b91      	ldr	r3, [pc, #580]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1ee      	bne.n	80074ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80a4 	beq.w	8007666 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800751e:	4b8b      	ldr	r3, [pc, #556]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10d      	bne.n	8007546 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800752a:	4b88      	ldr	r3, [pc, #544]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	4a87      	ldr	r2, [pc, #540]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007534:	6413      	str	r3, [r2, #64]	; 0x40
 8007536:	4b85      	ldr	r3, [pc, #532]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753e:	60bb      	str	r3, [r7, #8]
 8007540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007546:	4b82      	ldr	r3, [pc, #520]	; (8007750 <HAL_RCC_OscConfig+0x4d0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	2b00      	cmp	r3, #0
 8007550:	d118      	bne.n	8007584 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007552:	4b7f      	ldr	r3, [pc, #508]	; (8007750 <HAL_RCC_OscConfig+0x4d0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a7e      	ldr	r2, [pc, #504]	; (8007750 <HAL_RCC_OscConfig+0x4d0>)
 8007558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800755e:	f7fe f97d 	bl	800585c <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007566:	f7fe f979 	bl	800585c <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b64      	cmp	r3, #100	; 0x64
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e120      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007578:	4b75      	ldr	r3, [pc, #468]	; (8007750 <HAL_RCC_OscConfig+0x4d0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0f0      	beq.n	8007566 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d106      	bne.n	800759a <HAL_RCC_OscConfig+0x31a>
 800758c:	4b6f      	ldr	r3, [pc, #444]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800758e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007590:	4a6e      	ldr	r2, [pc, #440]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	6713      	str	r3, [r2, #112]	; 0x70
 8007598:	e02d      	b.n	80075f6 <HAL_RCC_OscConfig+0x376>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10c      	bne.n	80075bc <HAL_RCC_OscConfig+0x33c>
 80075a2:	4b6a      	ldr	r3, [pc, #424]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	4a69      	ldr	r2, [pc, #420]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075a8:	f023 0301 	bic.w	r3, r3, #1
 80075ac:	6713      	str	r3, [r2, #112]	; 0x70
 80075ae:	4b67      	ldr	r3, [pc, #412]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	4a66      	ldr	r2, [pc, #408]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075b4:	f023 0304 	bic.w	r3, r3, #4
 80075b8:	6713      	str	r3, [r2, #112]	; 0x70
 80075ba:	e01c      	b.n	80075f6 <HAL_RCC_OscConfig+0x376>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b05      	cmp	r3, #5
 80075c2:	d10c      	bne.n	80075de <HAL_RCC_OscConfig+0x35e>
 80075c4:	4b61      	ldr	r3, [pc, #388]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	4a60      	ldr	r2, [pc, #384]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075ca:	f043 0304 	orr.w	r3, r3, #4
 80075ce:	6713      	str	r3, [r2, #112]	; 0x70
 80075d0:	4b5e      	ldr	r3, [pc, #376]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d4:	4a5d      	ldr	r2, [pc, #372]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	6713      	str	r3, [r2, #112]	; 0x70
 80075dc:	e00b      	b.n	80075f6 <HAL_RCC_OscConfig+0x376>
 80075de:	4b5b      	ldr	r3, [pc, #364]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	4a5a      	ldr	r2, [pc, #360]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	6713      	str	r3, [r2, #112]	; 0x70
 80075ea:	4b58      	ldr	r3, [pc, #352]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	4a57      	ldr	r2, [pc, #348]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80075f0:	f023 0304 	bic.w	r3, r3, #4
 80075f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d015      	beq.n	800762a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fe:	f7fe f92d 	bl	800585c <HAL_GetTick>
 8007602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007604:	e00a      	b.n	800761c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007606:	f7fe f929 	bl	800585c <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	f241 3288 	movw	r2, #5000	; 0x1388
 8007614:	4293      	cmp	r3, r2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e0ce      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761c:	4b4b      	ldr	r3, [pc, #300]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800761e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0ee      	beq.n	8007606 <HAL_RCC_OscConfig+0x386>
 8007628:	e014      	b.n	8007654 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800762a:	f7fe f917 	bl	800585c <HAL_GetTick>
 800762e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007630:	e00a      	b.n	8007648 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007632:	f7fe f913 	bl	800585c <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007640:	4293      	cmp	r3, r2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e0b8      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007648:	4b40      	ldr	r3, [pc, #256]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800764a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1ee      	bne.n	8007632 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007654:	7dfb      	ldrb	r3, [r7, #23]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d105      	bne.n	8007666 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800765a:	4b3c      	ldr	r3, [pc, #240]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	4a3b      	ldr	r2, [pc, #236]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80a4 	beq.w	80077b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007670:	4b36      	ldr	r3, [pc, #216]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 030c 	and.w	r3, r3, #12
 8007678:	2b08      	cmp	r3, #8
 800767a:	d06b      	beq.n	8007754 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d149      	bne.n	8007718 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007684:	4b31      	ldr	r3, [pc, #196]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a30      	ldr	r2, [pc, #192]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800768a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800768e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fe f8e4 	bl	800585c <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007698:	f7fe f8e0 	bl	800585c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e087      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076aa:	4b28      	ldr	r3, [pc, #160]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1f0      	bne.n	8007698 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69da      	ldr	r2, [r3, #28]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	019b      	lsls	r3, r3, #6
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	3b01      	subs	r3, #1
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	061b      	lsls	r3, r3, #24
 80076da:	4313      	orrs	r3, r2
 80076dc:	4a1b      	ldr	r2, [pc, #108]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a18      	ldr	r2, [pc, #96]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 80076ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f0:	f7fe f8b4 	bl	800585c <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f8:	f7fe f8b0 	bl	800585c <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e057      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800770a:	4b10      	ldr	r3, [pc, #64]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f0      	beq.n	80076f8 <HAL_RCC_OscConfig+0x478>
 8007716:	e04f      	b.n	80077b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007718:	4b0c      	ldr	r3, [pc, #48]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a0b      	ldr	r2, [pc, #44]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 800771e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007724:	f7fe f89a 	bl	800585c <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800772c:	f7fe f896 	bl	800585c <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e03d      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800773e:	4b03      	ldr	r3, [pc, #12]	; (800774c <HAL_RCC_OscConfig+0x4cc>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f0      	bne.n	800772c <HAL_RCC_OscConfig+0x4ac>
 800774a:	e035      	b.n	80077b8 <HAL_RCC_OscConfig+0x538>
 800774c:	40023800 	.word	0x40023800
 8007750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007754:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <HAL_RCC_OscConfig+0x544>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d028      	beq.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800776c:	429a      	cmp	r2, r3
 800776e:	d121      	bne.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777a:	429a      	cmp	r2, r3
 800777c:	d11a      	bne.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007784:	4013      	ands	r3, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800778a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800778c:	4293      	cmp	r3, r2
 800778e:	d111      	bne.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	3b01      	subs	r3, #1
 800779e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d107      	bne.n	80077b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d001      	beq.n	80077b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40023800 	.word	0x40023800

080077c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0d0      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077e0:	4b6a      	ldr	r3, [pc, #424]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 030f 	and.w	r3, r3, #15
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d910      	bls.n	8007810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ee:	4b67      	ldr	r3, [pc, #412]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f023 020f 	bic.w	r2, r3, #15
 80077f6:	4965      	ldr	r1, [pc, #404]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fe:	4b63      	ldr	r3, [pc, #396]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d001      	beq.n	8007810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e0b8      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d020      	beq.n	800785e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007828:	4b59      	ldr	r3, [pc, #356]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	4a58      	ldr	r2, [pc, #352]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800782e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007840:	4b53      	ldr	r3, [pc, #332]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	4a52      	ldr	r2, [pc, #328]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800784a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800784c:	4b50      	ldr	r3, [pc, #320]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	494d      	ldr	r1, [pc, #308]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800785a:	4313      	orrs	r3, r2
 800785c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d040      	beq.n	80078ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d107      	bne.n	8007882 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007872:	4b47      	ldr	r3, [pc, #284]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d115      	bne.n	80078aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e07f      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d107      	bne.n	800789a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800788a:	4b41      	ldr	r3, [pc, #260]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e073      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800789a:	4b3d      	ldr	r3, [pc, #244]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e06b      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078aa:	4b39      	ldr	r3, [pc, #228]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f023 0203 	bic.w	r2, r3, #3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	4936      	ldr	r1, [pc, #216]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078bc:	f7fd ffce 	bl	800585c <HAL_GetTick>
 80078c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c2:	e00a      	b.n	80078da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c4:	f7fd ffca 	bl	800585c <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e053      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078da:	4b2d      	ldr	r3, [pc, #180]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 020c 	and.w	r2, r3, #12
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d1eb      	bne.n	80078c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078ec:	4b27      	ldr	r3, [pc, #156]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d210      	bcs.n	800791c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fa:	4b24      	ldr	r3, [pc, #144]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f023 020f 	bic.w	r2, r3, #15
 8007902:	4922      	ldr	r1, [pc, #136]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	4313      	orrs	r3, r2
 8007908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d001      	beq.n	800791c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e032      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007928:	4b19      	ldr	r3, [pc, #100]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	4916      	ldr	r1, [pc, #88]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007936:	4313      	orrs	r3, r2
 8007938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	490e      	ldr	r1, [pc, #56]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007956:	4313      	orrs	r3, r2
 8007958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800795a:	f000 f821 	bl	80079a0 <HAL_RCC_GetSysClockFreq>
 800795e:	4602      	mov	r2, r0
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	490a      	ldr	r1, [pc, #40]	; (8007994 <HAL_RCC_ClockConfig+0x1cc>)
 800796c:	5ccb      	ldrb	r3, [r1, r3]
 800796e:	fa22 f303 	lsr.w	r3, r2, r3
 8007972:	4a09      	ldr	r2, [pc, #36]	; (8007998 <HAL_RCC_ClockConfig+0x1d0>)
 8007974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_RCC_ClockConfig+0x1d4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f7fb ff10 	bl	80037a0 <HAL_InitTick>

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40023c00 	.word	0x40023c00
 8007990:	40023800 	.word	0x40023800
 8007994:	080156f4 	.word	0x080156f4
 8007998:	2000000c 	.word	0x2000000c
 800799c:	20000010 	.word	0x20000010

080079a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a4:	b090      	sub	sp, #64	; 0x40
 80079a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	637b      	str	r3, [r7, #52]	; 0x34
 80079ac:	2300      	movs	r3, #0
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b0:	2300      	movs	r3, #0
 80079b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b8:	4b59      	ldr	r3, [pc, #356]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 030c 	and.w	r3, r3, #12
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d00d      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x40>
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	f200 80a1 	bhi.w	8007b0c <HAL_RCC_GetSysClockFreq+0x16c>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_RCC_GetSysClockFreq+0x34>
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d003      	beq.n	80079da <HAL_RCC_GetSysClockFreq+0x3a>
 80079d2:	e09b      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079d4:	4b53      	ldr	r3, [pc, #332]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x184>)
 80079d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079d8:	e09b      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079da:	4b53      	ldr	r3, [pc, #332]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x188>)
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079de:	e098      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079e0:	4b4f      	ldr	r3, [pc, #316]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079ea:	4b4d      	ldr	r3, [pc, #308]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d028      	beq.n	8007a48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079f6:	4b4a      	ldr	r3, [pc, #296]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	099b      	lsrs	r3, r3, #6
 80079fc:	2200      	movs	r2, #0
 80079fe:	623b      	str	r3, [r7, #32]
 8007a00:	627a      	str	r2, [r7, #36]	; 0x24
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4b47      	ldr	r3, [pc, #284]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a0c:	fb03 f201 	mul.w	r2, r3, r1
 8007a10:	2300      	movs	r3, #0
 8007a12:	fb00 f303 	mul.w	r3, r0, r3
 8007a16:	4413      	add	r3, r2
 8007a18:	4a43      	ldr	r2, [pc, #268]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a1a:	fba0 1202 	umull	r1, r2, r0, r2
 8007a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a20:	460a      	mov	r2, r1
 8007a22:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a26:	4413      	add	r3, r2
 8007a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	61fa      	str	r2, [r7, #28]
 8007a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a3a:	f7f9 f99d 	bl	8000d78 <__aeabi_uldivmod>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4613      	mov	r3, r2
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a46:	e053      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a48:	4b35      	ldr	r3, [pc, #212]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	099b      	lsrs	r3, r3, #6
 8007a4e:	2200      	movs	r2, #0
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	617a      	str	r2, [r7, #20]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a5a:	f04f 0b00 	mov.w	fp, #0
 8007a5e:	4652      	mov	r2, sl
 8007a60:	465b      	mov	r3, fp
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f04f 0100 	mov.w	r1, #0
 8007a6a:	0159      	lsls	r1, r3, #5
 8007a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a70:	0150      	lsls	r0, r2, #5
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	ebb2 080a 	subs.w	r8, r2, sl
 8007a7a:	eb63 090b 	sbc.w	r9, r3, fp
 8007a7e:	f04f 0200 	mov.w	r2, #0
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a92:	ebb2 0408 	subs.w	r4, r2, r8
 8007a96:	eb63 0509 	sbc.w	r5, r3, r9
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	00eb      	lsls	r3, r5, #3
 8007aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aa8:	00e2      	lsls	r2, r4, #3
 8007aaa:	4614      	mov	r4, r2
 8007aac:	461d      	mov	r5, r3
 8007aae:	eb14 030a 	adds.w	r3, r4, sl
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	eb45 030b 	adc.w	r3, r5, fp
 8007ab8:	607b      	str	r3, [r7, #4]
 8007aba:	f04f 0200 	mov.w	r2, #0
 8007abe:	f04f 0300 	mov.w	r3, #0
 8007ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	028b      	lsls	r3, r1, #10
 8007aca:	4621      	mov	r1, r4
 8007acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	028a      	lsls	r2, r1, #10
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ada:	2200      	movs	r2, #0
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	60fa      	str	r2, [r7, #12]
 8007ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ae4:	f7f9 f948 	bl	8000d78 <__aeabi_uldivmod>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4613      	mov	r3, r2
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	0c1b      	lsrs	r3, r3, #16
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	3301      	adds	r3, #1
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b0a:	e002      	b.n	8007b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3740      	adds	r7, #64	; 0x40
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b1e:	bf00      	nop
 8007b20:	40023800 	.word	0x40023800
 8007b24:	00f42400 	.word	0x00f42400
 8007b28:	017d7840 	.word	0x017d7840

08007b2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b32:	681b      	ldr	r3, [r3, #0]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	2000000c 	.word	0x2000000c

08007b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b48:	f7ff fff0 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	0a9b      	lsrs	r3, r3, #10
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	4903      	ldr	r1, [pc, #12]	; (8007b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b5a:	5ccb      	ldrb	r3, [r1, r3]
 8007b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	40023800 	.word	0x40023800
 8007b68:	08015704 	.word	0x08015704

08007b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b70:	f7ff ffdc 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 8007b74:	4602      	mov	r2, r0
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	0b5b      	lsrs	r3, r3, #13
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	4903      	ldr	r1, [pc, #12]	; (8007b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b82:	5ccb      	ldrb	r3, [r1, r3]
 8007b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	08015704 	.word	0x08015704

08007b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	220f      	movs	r2, #15
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ba4:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0203 	and.w	r2, r3, #3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007bc8:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	08db      	lsrs	r3, r3, #3
 8007bce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <HAL_RCC_GetClockConfig+0x60>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 020f 	and.w	r2, r3, #15
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	601a      	str	r2, [r3, #0]
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	40023c00 	.word	0x40023c00

08007bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c1c:	4b65      	ldr	r3, [pc, #404]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	4a64      	ldr	r2, [pc, #400]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c26:	6093      	str	r3, [r2, #8]
 8007c28:	4b62      	ldr	r3, [pc, #392]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	4960      	ldr	r1, [pc, #384]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d017      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c4e:	4b59      	ldr	r3, [pc, #356]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5c:	4955      	ldr	r1, [pc, #340]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6c:	d101      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d017      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c8a:	4b4a      	ldr	r3, [pc, #296]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	4946      	ldr	r1, [pc, #280]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ca8:	d101      	bne.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007caa:	2301      	movs	r3, #1
 8007cac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 808b 	beq.w	8007dde <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cc8:	4b3a      	ldr	r3, [pc, #232]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ccc:	4a39      	ldr	r2, [pc, #228]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8007cd4:	4b37      	ldr	r3, [pc, #220]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ce0:	4b35      	ldr	r3, [pc, #212]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a34      	ldr	r2, [pc, #208]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cec:	f7fd fdb6 	bl	800585c <HAL_GetTick>
 8007cf0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cf4:	f7fd fdb2 	bl	800585c <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b64      	cmp	r3, #100	; 0x64
 8007d00:	d901      	bls.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e2bc      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d06:	4b2c      	ldr	r3, [pc, #176]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0f0      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d12:	4b28      	ldr	r3, [pc, #160]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d035      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d02e      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d30:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d3a:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d46:	4b1b      	ldr	r3, [pc, #108]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d52:	4a18      	ldr	r2, [pc, #96]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d58:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d114      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d64:	f7fd fd7a 	bl	800585c <HAL_GetTick>
 8007d68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d6a:	e00a      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d6c:	f7fd fd76 	bl	800585c <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e27e      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0ee      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d9a:	d111      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007daa:	400b      	ands	r3, r1
 8007dac:	4901      	ldr	r1, [pc, #4]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	608b      	str	r3, [r1, #8]
 8007db2:	e00b      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007db4:	40023800 	.word	0x40023800
 8007db8:	40007000 	.word	0x40007000
 8007dbc:	0ffffcff 	.word	0x0ffffcff
 8007dc0:	4ba4      	ldr	r3, [pc, #656]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	4aa3      	ldr	r2, [pc, #652]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007dca:	6093      	str	r3, [r2, #8]
 8007dcc:	4ba1      	ldr	r3, [pc, #644]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dd8:	499e      	ldr	r1, [pc, #632]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d010      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007dea:	4b9a      	ldr	r3, [pc, #616]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007df0:	4a98      	ldr	r2, [pc, #608]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007df6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007dfa:	4b96      	ldr	r3, [pc, #600]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	4993      	ldr	r1, [pc, #588]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e18:	4b8e      	ldr	r3, [pc, #568]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e26:	498b      	ldr	r1, [pc, #556]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e3a:	4b86      	ldr	r3, [pc, #536]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e48:	4982      	ldr	r1, [pc, #520]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e5c:	4b7d      	ldr	r3, [pc, #500]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e6a:	497a      	ldr	r1, [pc, #488]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e7e:	4b75      	ldr	r3, [pc, #468]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e84:	f023 0203 	bic.w	r2, r3, #3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8c:	4971      	ldr	r1, [pc, #452]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ea0:	4b6c      	ldr	r3, [pc, #432]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea6:	f023 020c 	bic.w	r2, r3, #12
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	4969      	ldr	r1, [pc, #420]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ec2:	4b64      	ldr	r3, [pc, #400]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed0:	4960      	ldr	r1, [pc, #384]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ee4:	4b5b      	ldr	r3, [pc, #364]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef2:	4958      	ldr	r1, [pc, #352]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f06:	4b53      	ldr	r3, [pc, #332]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f14:	494f      	ldr	r1, [pc, #316]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00a      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f28:	4b4a      	ldr	r3, [pc, #296]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f36:	4947      	ldr	r1, [pc, #284]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f4a:	4b42      	ldr	r3, [pc, #264]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f58:	493e      	ldr	r1, [pc, #248]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007f6c:	4b39      	ldr	r3, [pc, #228]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7a:	4936      	ldr	r1, [pc, #216]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d011      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f8e:	4b31      	ldr	r3, [pc, #196]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9c:	492d      	ldr	r1, [pc, #180]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fac:	d101      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fbe:	4b25      	ldr	r3, [pc, #148]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fcc:	4921      	ldr	r1, [pc, #132]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007fe0:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fee:	4919      	ldr	r1, [pc, #100]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008002:	4b14      	ldr	r3, [pc, #80]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008008:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008010:	4910      	ldr	r1, [pc, #64]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d006      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 809d 	beq.w	8008166 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a08      	ldr	r2, [pc, #32]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008032:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008038:	f7fd fc10 	bl	800585c <HAL_GetTick>
 800803c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800803e:	e00b      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008040:	f7fd fc0c 	bl	800585c <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	2b64      	cmp	r3, #100	; 0x64
 800804c:	d904      	bls.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e116      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008052:	bf00      	nop
 8008054:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008058:	4b8b      	ldr	r3, [pc, #556]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1ed      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d017      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d113      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008078:	4b83      	ldr	r3, [pc, #524]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800807a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800807e:	0e1b      	lsrs	r3, r3, #24
 8008080:	f003 030f 	and.w	r3, r3, #15
 8008084:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	019a      	lsls	r2, r3, #6
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	061b      	lsls	r3, r3, #24
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	071b      	lsls	r3, r3, #28
 8008098:	497b      	ldr	r1, [pc, #492]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b4:	d00a      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d024      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ca:	d11f      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080cc:	4b6e      	ldr	r3, [pc, #440]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d2:	0f1b      	lsrs	r3, r3, #28
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	019a      	lsls	r2, r3, #6
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	061b      	lsls	r3, r3, #24
 80080e6:	431a      	orrs	r2, r3
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	071b      	lsls	r3, r3, #28
 80080ec:	4966      	ldr	r1, [pc, #408]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80080f4:	4b64      	ldr	r3, [pc, #400]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080fa:	f023 021f 	bic.w	r2, r3, #31
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	3b01      	subs	r3, #1
 8008104:	4960      	ldr	r1, [pc, #384]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	019a      	lsls	r2, r3, #6
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	061b      	lsls	r3, r3, #24
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	071b      	lsls	r3, r3, #28
 800812c:	4956      	ldr	r1, [pc, #344]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800812e:	4313      	orrs	r3, r2
 8008130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008134:	4b54      	ldr	r3, [pc, #336]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a53      	ldr	r2, [pc, #332]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800813a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800813e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008140:	f7fd fb8c 	bl	800585c <HAL_GetTick>
 8008144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008146:	e008      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008148:	f7fd fb88 	bl	800585c <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b64      	cmp	r3, #100	; 0x64
 8008154:	d901      	bls.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e092      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800815a:	4b4b      	ldr	r3, [pc, #300]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0f0      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b01      	cmp	r3, #1
 800816a:	f040 8088 	bne.w	800827e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800816e:	4b46      	ldr	r3, [pc, #280]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a45      	ldr	r2, [pc, #276]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800817a:	f7fd fb6f 	bl	800585c <HAL_GetTick>
 800817e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008180:	e008      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008182:	f7fd fb6b 	bl	800585c <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b64      	cmp	r3, #100	; 0x64
 800818e:	d901      	bls.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e075      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008194:	4b3c      	ldr	r3, [pc, #240]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800819c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a0:	d0ef      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d024      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d120      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081ca:	4b2f      	ldr	r3, [pc, #188]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	0c1b      	lsrs	r3, r3, #16
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	019a      	lsls	r2, r3, #6
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	061b      	lsls	r3, r3, #24
 80081ea:	4927      	ldr	r1, [pc, #156]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80081f2:	4b25      	ldr	r3, [pc, #148]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80081f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	3b01      	subs	r3, #1
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	4920      	ldr	r1, [pc, #128]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d018      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800821c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008220:	d113      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008222:	4b19      	ldr	r3, [pc, #100]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008228:	0e1b      	lsrs	r3, r3, #24
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	019a      	lsls	r2, r3, #6
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	041b      	lsls	r3, r3, #16
 800823c:	431a      	orrs	r2, r3
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	061b      	lsls	r3, r3, #24
 8008242:	4911      	ldr	r1, [pc, #68]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008244:	4313      	orrs	r3, r2
 8008246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800824a:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a0e      	ldr	r2, [pc, #56]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008256:	f7fd fb01 	bl	800585c <HAL_GetTick>
 800825a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800825c:	e008      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800825e:	f7fd fafd 	bl	800585c <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b64      	cmp	r3, #100	; 0x64
 800826a:	d901      	bls.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e007      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800827c:	d1ef      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3720      	adds	r7, #32
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40023800 	.word	0x40023800

0800828c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e09d      	b.n	80083da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d108      	bne.n	80082b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ae:	d009      	beq.n	80082c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	61da      	str	r2, [r3, #28]
 80082b6:	e005      	b.n	80082c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fb f82a 	bl	8003338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008304:	d902      	bls.n	800830c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	e002      	b.n	8008312 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800830c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008310:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800831a:	d007      	beq.n	800832c <HAL_SPI_Init+0xa0>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008324:	d002      	beq.n	800832c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	431a      	orrs	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836e:	ea42 0103 	orr.w	r1, r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008376:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	0c1b      	lsrs	r3, r3, #16
 8008388:	f003 0204 	and.w	r2, r3, #4
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083a8:	ea42 0103 	orr.w	r1, r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b088      	sub	sp, #32
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_SPI_Transmit+0x22>
 8008400:	2302      	movs	r3, #2
 8008402:	e158      	b.n	80086b6 <HAL_SPI_Transmit+0x2d4>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800840c:	f7fd fa26 	bl	800585c <HAL_GetTick>
 8008410:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b01      	cmp	r3, #1
 8008420:	d002      	beq.n	8008428 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008422:	2302      	movs	r3, #2
 8008424:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008426:	e13d      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <HAL_SPI_Transmit+0x52>
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008438:	e134      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2203      	movs	r2, #3
 800843e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	88fa      	ldrh	r2, [r7, #6]
 8008452:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	88fa      	ldrh	r2, [r7, #6]
 8008458:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008484:	d10f      	bne.n	80084a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d007      	beq.n	80084c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084cc:	d94b      	bls.n	8008566 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_SPI_Transmit+0xfa>
 80084d6:	8afb      	ldrh	r3, [r7, #22]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d13e      	bne.n	800855a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008500:	e02b      	b.n	800855a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b02      	cmp	r3, #2
 800850e:	d112      	bne.n	8008536 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	881a      	ldrh	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	1c9a      	adds	r2, r3, #2
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008534:	e011      	b.n	800855a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008536:	f7fd f991 	bl	800585c <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d803      	bhi.n	800854e <HAL_SPI_Transmit+0x16c>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d102      	bne.n	8008554 <HAL_SPI_Transmit+0x172>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008558:	e0a4      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1ce      	bne.n	8008502 <HAL_SPI_Transmit+0x120>
 8008564:	e07c      	b.n	8008660 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <HAL_SPI_Transmit+0x192>
 800856e:	8afb      	ldrh	r3, [r7, #22]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d170      	bne.n	8008656 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b01      	cmp	r3, #1
 800857c:	d912      	bls.n	80085a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	881a      	ldrh	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	1c9a      	adds	r2, r3, #2
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b02      	subs	r3, #2
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085a2:	e058      	b.n	8008656 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80085ca:	e044      	b.n	8008656 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d12b      	bne.n	8008632 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085de:	b29b      	uxth	r3, r3
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d912      	bls.n	800860a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	881a      	ldrh	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	1c9a      	adds	r2, r3, #2
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b02      	subs	r3, #2
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008608:	e025      	b.n	8008656 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	330c      	adds	r3, #12
 8008614:	7812      	ldrb	r2, [r2, #0]
 8008616:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008626:	b29b      	uxth	r3, r3
 8008628:	3b01      	subs	r3, #1
 800862a:	b29a      	uxth	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008630:	e011      	b.n	8008656 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008632:	f7fd f913 	bl	800585c <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d803      	bhi.n	800864a <HAL_SPI_Transmit+0x268>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d102      	bne.n	8008650 <HAL_SPI_Transmit+0x26e>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d102      	bne.n	8008656 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008654:	e026      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1b5      	bne.n	80085cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fd07 	bl	8009078 <SPI_EndRxTxTransaction>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2220      	movs	r2, #32
 8008674:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800867e:	2300      	movs	r3, #0
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	77fb      	strb	r3, [r7, #31]
 80086a0:	e000      	b.n	80086a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80086a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80086b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b088      	sub	sp, #32
 80086c2:	af02      	add	r7, sp, #8
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	603b      	str	r3, [r7, #0]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086da:	d112      	bne.n	8008702 <HAL_SPI_Receive+0x44>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10e      	bne.n	8008702 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2204      	movs	r2, #4
 80086e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4613      	mov	r3, r2
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f910 	bl	800891e <HAL_SPI_TransmitReceive>
 80086fe:	4603      	mov	r3, r0
 8008700:	e109      	b.n	8008916 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008708:	2b01      	cmp	r3, #1
 800870a:	d101      	bne.n	8008710 <HAL_SPI_Receive+0x52>
 800870c:	2302      	movs	r3, #2
 800870e:	e102      	b.n	8008916 <HAL_SPI_Receive+0x258>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008718:	f7fd f8a0 	bl	800585c <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b01      	cmp	r3, #1
 8008728:	d002      	beq.n	8008730 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800872a:	2302      	movs	r3, #2
 800872c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800872e:	e0e9      	b.n	8008904 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d002      	beq.n	800873c <HAL_SPI_Receive+0x7e>
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008740:	e0e0      	b.n	8008904 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2204      	movs	r2, #4
 8008746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	88fa      	ldrh	r2, [r7, #6]
 800875a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	88fa      	ldrh	r2, [r7, #6]
 8008762:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800878c:	d908      	bls.n	80087a0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	e007      	b.n	80087b0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b8:	d10f      	bne.n	80087da <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e4:	2b40      	cmp	r3, #64	; 0x40
 80087e6:	d007      	beq.n	80087f8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008800:	d867      	bhi.n	80088d2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008802:	e030      	b.n	8008866 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b01      	cmp	r3, #1
 8008810:	d117      	bne.n	8008842 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f103 020c 	add.w	r2, r3, #12
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	b2d2      	uxtb	r2, r2
 8008822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008834:	b29b      	uxth	r3, r3
 8008836:	3b01      	subs	r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008840:	e011      	b.n	8008866 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008842:	f7fd f80b 	bl	800585c <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d803      	bhi.n	800885a <HAL_SPI_Receive+0x19c>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d102      	bne.n	8008860 <HAL_SPI_Receive+0x1a2>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008864:	e04e      	b.n	8008904 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1c8      	bne.n	8008804 <HAL_SPI_Receive+0x146>
 8008872:	e034      	b.n	80088de <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b01      	cmp	r3, #1
 8008880:	d115      	bne.n	80088ae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	b292      	uxth	r2, r2
 800888e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	1c9a      	adds	r2, r3, #2
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80088ac:	e011      	b.n	80088d2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ae:	f7fc ffd5 	bl	800585c <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d803      	bhi.n	80088c6 <HAL_SPI_Receive+0x208>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d102      	bne.n	80088cc <HAL_SPI_Receive+0x20e>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088d0:	e018      	b.n	8008904 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ca      	bne.n	8008874 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fb4c 	bl	8008f80 <SPI_EndRxTransaction>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]
 8008900:	e000      	b.n	8008904 <HAL_SPI_Receive+0x246>
  }

error :
 8008902:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b08a      	sub	sp, #40	; 0x28
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
 800892a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800892c:	2301      	movs	r3, #1
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_SPI_TransmitReceive+0x26>
 8008940:	2302      	movs	r3, #2
 8008942:	e1fb      	b.n	8008d3c <HAL_SPI_TransmitReceive+0x41e>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800894c:	f7fc ff86 	bl	800585c <HAL_GetTick>
 8008950:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008958:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008960:	887b      	ldrh	r3, [r7, #2]
 8008962:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008964:	887b      	ldrh	r3, [r7, #2]
 8008966:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008968:	7efb      	ldrb	r3, [r7, #27]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d00e      	beq.n	800898c <HAL_SPI_TransmitReceive+0x6e>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008974:	d106      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x66>
 800897e:	7efb      	ldrb	r3, [r7, #27]
 8008980:	2b04      	cmp	r3, #4
 8008982:	d003      	beq.n	800898c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008984:	2302      	movs	r3, #2
 8008986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800898a:	e1cd      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <HAL_SPI_TransmitReceive+0x80>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_SPI_TransmitReceive+0x80>
 8008998:	887b      	ldrh	r3, [r7, #2]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80089a4:	e1c0      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d003      	beq.n	80089ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2205      	movs	r2, #5
 80089b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	887a      	ldrh	r2, [r7, #2]
 80089ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	887a      	ldrh	r2, [r7, #2]
 80089d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	887a      	ldrh	r2, [r7, #2]
 80089e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	887a      	ldrh	r2, [r7, #2]
 80089e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089fc:	d802      	bhi.n	8008a04 <HAL_SPI_TransmitReceive+0xe6>
 80089fe:	8a3b      	ldrh	r3, [r7, #16]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d908      	bls.n	8008a16 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a12:	605a      	str	r2, [r3, #4]
 8008a14:	e007      	b.n	8008a26 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b40      	cmp	r3, #64	; 0x40
 8008a32:	d007      	beq.n	8008a44 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a4c:	d97c      	bls.n	8008b48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <HAL_SPI_TransmitReceive+0x13e>
 8008a56:	8a7b      	ldrh	r3, [r7, #18]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d169      	bne.n	8008b30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	881a      	ldrh	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	1c9a      	adds	r2, r3, #2
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a80:	e056      	b.n	8008b30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d11b      	bne.n	8008ac8 <HAL_SPI_TransmitReceive+0x1aa>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d016      	beq.n	8008ac8 <HAL_SPI_TransmitReceive+0x1aa>
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d113      	bne.n	8008ac8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	881a      	ldrh	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	1c9a      	adds	r2, r3, #2
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d11c      	bne.n	8008b10 <HAL_SPI_TransmitReceive+0x1f2>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	b292      	uxth	r2, r2
 8008aee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	1c9a      	adds	r2, r3, #2
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	3b01      	subs	r3, #1
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b10:	f7fc fea4 	bl	800585c <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d807      	bhi.n	8008b30 <HAL_SPI_TransmitReceive+0x212>
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d003      	beq.n	8008b30 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008b2e:	e0fb      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1a3      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x164>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d19d      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x164>
 8008b46:	e0df      	b.n	8008d08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_SPI_TransmitReceive+0x23a>
 8008b50:	8a7b      	ldrh	r3, [r7, #18]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	f040 80cb 	bne.w	8008cee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d912      	bls.n	8008b88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	881a      	ldrh	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	1c9a      	adds	r2, r3, #2
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	3b02      	subs	r3, #2
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b86:	e0b2      	b.n	8008cee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	330c      	adds	r3, #12
 8008b92:	7812      	ldrb	r2, [r2, #0]
 8008b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bae:	e09e      	b.n	8008cee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d134      	bne.n	8008c28 <HAL_SPI_TransmitReceive+0x30a>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d02f      	beq.n	8008c28 <HAL_SPI_TransmitReceive+0x30a>
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d12c      	bne.n	8008c28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d912      	bls.n	8008bfe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	881a      	ldrh	r2, [r3, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	1c9a      	adds	r2, r3, #2
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	3b02      	subs	r3, #2
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bfc:	e012      	b.n	8008c24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	330c      	adds	r3, #12
 8008c08:	7812      	ldrb	r2, [r2, #0]
 8008c0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d148      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x3aa>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d042      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d923      	bls.n	8008c96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	b292      	uxth	r2, r2
 8008c5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	1c9a      	adds	r2, r3, #2
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b02      	subs	r3, #2
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d81f      	bhi.n	8008cc4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c92:	605a      	str	r2, [r3, #4]
 8008c94:	e016      	b.n	8008cc4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f103 020c 	add.w	r2, r3, #12
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	7812      	ldrb	r2, [r2, #0]
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008cc8:	f7fc fdc8 	bl	800585c <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d803      	bhi.n	8008ce0 <HAL_SPI_TransmitReceive+0x3c2>
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d102      	bne.n	8008ce6 <HAL_SPI_TransmitReceive+0x3c8>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008cec:	e01c      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f47f af5b 	bne.w	8008bb0 <HAL_SPI_TransmitReceive+0x292>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f47f af54 	bne.w	8008bb0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f9b3 	bl	8009078 <SPI_EndRxTxTransaction>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d006      	beq.n	8008d26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2220      	movs	r2, #32
 8008d22:	661a      	str	r2, [r3, #96]	; 0x60
 8008d24:	e000      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3728      	adds	r7, #40	; 0x28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	4613      	mov	r3, r2
 8008d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d54:	f7fc fd82 	bl	800585c <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	4413      	add	r3, r2
 8008d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d64:	f7fc fd7a 	bl	800585c <HAL_GetTick>
 8008d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d6a:	4b39      	ldr	r3, [pc, #228]	; (8008e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	015b      	lsls	r3, r3, #5
 8008d70:	0d1b      	lsrs	r3, r3, #20
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
 8008d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d7a:	e054      	b.n	8008e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d050      	beq.n	8008e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d84:	f7fc fd6a 	bl	800585c <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d902      	bls.n	8008d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d13d      	bne.n	8008e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008db2:	d111      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dbc:	d004      	beq.n	8008dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc6:	d107      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de0:	d10f      	bne.n	8008e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e017      	b.n	8008e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	bf0c      	ite	eq
 8008e36:	2301      	moveq	r3, #1
 8008e38:	2300      	movne	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d19b      	bne.n	8008d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3720      	adds	r7, #32
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	2000000c 	.word	0x2000000c

08008e54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e66:	f7fc fcf9 	bl	800585c <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	4413      	add	r3, r2
 8008e74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008e76:	f7fc fcf1 	bl	800585c <HAL_GetTick>
 8008e7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	330c      	adds	r3, #12
 8008e82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e84:	4b3d      	ldr	r3, [pc, #244]	; (8008f7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	00da      	lsls	r2, r3, #3
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	0d1b      	lsrs	r3, r3, #20
 8008e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e96:	fb02 f303 	mul.w	r3, r2, r3
 8008e9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e9c:	e060      	b.n	8008f60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008ea4:	d107      	bne.n	8008eb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d050      	beq.n	8008f60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ebe:	f7fc fccd 	bl	800585c <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d902      	bls.n	8008ed4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d13d      	bne.n	8008f50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ee2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eec:	d111      	bne.n	8008f12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef6:	d004      	beq.n	8008f02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f00:	d107      	bne.n	8008f12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f1a:	d10f      	bne.n	8008f3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e010      	b.n	8008f72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d196      	bne.n	8008e9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3728      	adds	r7, #40	; 0x28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	2000000c 	.word	0x2000000c

08008f80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f94:	d111      	bne.n	8008fba <SPI_EndRxTransaction+0x3a>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f9e:	d004      	beq.n	8008faa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa8:	d107      	bne.n	8008fba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fc2:	d112      	bne.n	8008fea <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2180      	movs	r1, #128	; 0x80
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7ff feb8 	bl	8008d44 <SPI_WaitFlagStateUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d021      	beq.n	800901e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fde:	f043 0220 	orr.w	r2, r3, #32
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e03d      	b.n	8009066 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fea:	4b21      	ldr	r3, [pc, #132]	; (8009070 <SPI_EndRxTransaction+0xf0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a21      	ldr	r2, [pc, #132]	; (8009074 <SPI_EndRxTransaction+0xf4>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	0d5b      	lsrs	r3, r3, #21
 8008ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ffa:	fb02 f303 	mul.w	r3, r2, r3
 8008ffe:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	3b01      	subs	r3, #1
 800900a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009016:	2b80      	cmp	r3, #128	; 0x80
 8009018:	d0f2      	beq.n	8009000 <SPI_EndRxTransaction+0x80>
 800901a:	e000      	b.n	800901e <SPI_EndRxTransaction+0x9e>
        break;
 800901c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009026:	d11d      	bne.n	8009064 <SPI_EndRxTransaction+0xe4>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009030:	d004      	beq.n	800903c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800903a:	d113      	bne.n	8009064 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2200      	movs	r2, #0
 8009044:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7ff ff03 	bl	8008e54 <SPI_WaitFifoStateUntilTimeout>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d007      	beq.n	8009064 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009058:	f043 0220 	orr.w	r2, r3, #32
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e000      	b.n	8009066 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	2000000c 	.word	0x2000000c
 8009074:	165e9f81 	.word	0x165e9f81

08009078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af02      	add	r7, sp, #8
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2200      	movs	r2, #0
 800908c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff fedf 	bl	8008e54 <SPI_WaitFifoStateUntilTimeout>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d007      	beq.n	80090ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a0:	f043 0220 	orr.w	r2, r3, #32
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e046      	b.n	800913a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090ac:	4b25      	ldr	r3, [pc, #148]	; (8009144 <SPI_EndRxTxTransaction+0xcc>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a25      	ldr	r2, [pc, #148]	; (8009148 <SPI_EndRxTxTransaction+0xd0>)
 80090b2:	fba2 2303 	umull	r2, r3, r2, r3
 80090b6:	0d5b      	lsrs	r3, r3, #21
 80090b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090bc:	fb02 f303 	mul.w	r3, r2, r3
 80090c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090ca:	d112      	bne.n	80090f2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2200      	movs	r2, #0
 80090d4:	2180      	movs	r1, #128	; 0x80
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7ff fe34 	bl	8008d44 <SPI_WaitFlagStateUntilTimeout>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090e6:	f043 0220 	orr.w	r2, r3, #32
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e023      	b.n	800913a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00a      	beq.n	800910e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009108:	2b80      	cmp	r3, #128	; 0x80
 800910a:	d0f2      	beq.n	80090f2 <SPI_EndRxTxTransaction+0x7a>
 800910c:	e000      	b.n	8009110 <SPI_EndRxTxTransaction+0x98>
        break;
 800910e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2200      	movs	r2, #0
 8009118:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fe99 	bl	8008e54 <SPI_WaitFifoStateUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d007      	beq.n	8009138 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800912c:	f043 0220 	orr.w	r2, r3, #32
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e000      	b.n	800913a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	2000000c 	.word	0x2000000c
 8009148:	165e9f81 	.word	0x165e9f81

0800914c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e049      	b.n	80091f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d106      	bne.n	8009178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7fa f956 	bl	8003424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f000 ffb8 	bl	800a100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b01      	cmp	r3, #1
 800920e:	d001      	beq.n	8009214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e054      	b.n	80092be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a26      	ldr	r2, [pc, #152]	; (80092cc <HAL_TIM_Base_Start_IT+0xd0>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d022      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x80>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923e:	d01d      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x80>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a22      	ldr	r2, [pc, #136]	; (80092d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d018      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x80>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a21      	ldr	r2, [pc, #132]	; (80092d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d013      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x80>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a1f      	ldr	r2, [pc, #124]	; (80092d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d00e      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x80>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a1e      	ldr	r2, [pc, #120]	; (80092dc <HAL_TIM_Base_Start_IT+0xe0>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d009      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x80>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a1c      	ldr	r2, [pc, #112]	; (80092e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d004      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x80>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a1b      	ldr	r2, [pc, #108]	; (80092e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d115      	bne.n	80092a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	4b19      	ldr	r3, [pc, #100]	; (80092e8 <HAL_TIM_Base_Start_IT+0xec>)
 8009284:	4013      	ands	r3, r2
 8009286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b06      	cmp	r3, #6
 800928c:	d015      	beq.n	80092ba <HAL_TIM_Base_Start_IT+0xbe>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009294:	d011      	beq.n	80092ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f042 0201 	orr.w	r2, r2, #1
 80092a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092a6:	e008      	b.n	80092ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0201 	orr.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	e000      	b.n	80092bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40010000 	.word	0x40010000
 80092d0:	40000400 	.word	0x40000400
 80092d4:	40000800 	.word	0x40000800
 80092d8:	40000c00 	.word	0x40000c00
 80092dc:	40010400 	.word	0x40010400
 80092e0:	40014000 	.word	0x40014000
 80092e4:	40001800 	.word	0x40001800
 80092e8:	00010007 	.word	0x00010007

080092ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e049      	b.n	8009392 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f841 	bl	800939a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3304      	adds	r3, #4
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f000 fee8 	bl	800a100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
	...

080093b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d109      	bne.n	80093d4 <HAL_TIM_PWM_Start+0x24>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	bf14      	ite	ne
 80093cc:	2301      	movne	r3, #1
 80093ce:	2300      	moveq	r3, #0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	e03c      	b.n	800944e <HAL_TIM_PWM_Start+0x9e>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d109      	bne.n	80093ee <HAL_TIM_PWM_Start+0x3e>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	bf14      	ite	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	2300      	moveq	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	e02f      	b.n	800944e <HAL_TIM_PWM_Start+0x9e>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d109      	bne.n	8009408 <HAL_TIM_PWM_Start+0x58>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	bf14      	ite	ne
 8009400:	2301      	movne	r3, #1
 8009402:	2300      	moveq	r3, #0
 8009404:	b2db      	uxtb	r3, r3
 8009406:	e022      	b.n	800944e <HAL_TIM_PWM_Start+0x9e>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b0c      	cmp	r3, #12
 800940c:	d109      	bne.n	8009422 <HAL_TIM_PWM_Start+0x72>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b01      	cmp	r3, #1
 8009418:	bf14      	ite	ne
 800941a:	2301      	movne	r3, #1
 800941c:	2300      	moveq	r3, #0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	e015      	b.n	800944e <HAL_TIM_PWM_Start+0x9e>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b10      	cmp	r3, #16
 8009426:	d109      	bne.n	800943c <HAL_TIM_PWM_Start+0x8c>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b01      	cmp	r3, #1
 8009432:	bf14      	ite	ne
 8009434:	2301      	movne	r3, #1
 8009436:	2300      	moveq	r3, #0
 8009438:	b2db      	uxtb	r3, r3
 800943a:	e008      	b.n	800944e <HAL_TIM_PWM_Start+0x9e>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b01      	cmp	r3, #1
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e092      	b.n	800957c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d104      	bne.n	8009466 <HAL_TIM_PWM_Start+0xb6>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009464:	e023      	b.n	80094ae <HAL_TIM_PWM_Start+0xfe>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b04      	cmp	r3, #4
 800946a:	d104      	bne.n	8009476 <HAL_TIM_PWM_Start+0xc6>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009474:	e01b      	b.n	80094ae <HAL_TIM_PWM_Start+0xfe>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b08      	cmp	r3, #8
 800947a:	d104      	bne.n	8009486 <HAL_TIM_PWM_Start+0xd6>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009484:	e013      	b.n	80094ae <HAL_TIM_PWM_Start+0xfe>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b0c      	cmp	r3, #12
 800948a:	d104      	bne.n	8009496 <HAL_TIM_PWM_Start+0xe6>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009494:	e00b      	b.n	80094ae <HAL_TIM_PWM_Start+0xfe>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b10      	cmp	r3, #16
 800949a:	d104      	bne.n	80094a6 <HAL_TIM_PWM_Start+0xf6>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094a4:	e003      	b.n	80094ae <HAL_TIM_PWM_Start+0xfe>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2202      	movs	r2, #2
 80094aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2201      	movs	r2, #1
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 fae4 	bl	800aa84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a30      	ldr	r2, [pc, #192]	; (8009584 <HAL_TIM_PWM_Start+0x1d4>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d004      	beq.n	80094d0 <HAL_TIM_PWM_Start+0x120>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a2f      	ldr	r2, [pc, #188]	; (8009588 <HAL_TIM_PWM_Start+0x1d8>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d101      	bne.n	80094d4 <HAL_TIM_PWM_Start+0x124>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <HAL_TIM_PWM_Start+0x126>
 80094d4:	2300      	movs	r3, #0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a25      	ldr	r2, [pc, #148]	; (8009584 <HAL_TIM_PWM_Start+0x1d4>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d022      	beq.n	800953a <HAL_TIM_PWM_Start+0x18a>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094fc:	d01d      	beq.n	800953a <HAL_TIM_PWM_Start+0x18a>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a22      	ldr	r2, [pc, #136]	; (800958c <HAL_TIM_PWM_Start+0x1dc>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d018      	beq.n	800953a <HAL_TIM_PWM_Start+0x18a>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a20      	ldr	r2, [pc, #128]	; (8009590 <HAL_TIM_PWM_Start+0x1e0>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d013      	beq.n	800953a <HAL_TIM_PWM_Start+0x18a>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1f      	ldr	r2, [pc, #124]	; (8009594 <HAL_TIM_PWM_Start+0x1e4>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00e      	beq.n	800953a <HAL_TIM_PWM_Start+0x18a>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a19      	ldr	r2, [pc, #100]	; (8009588 <HAL_TIM_PWM_Start+0x1d8>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d009      	beq.n	800953a <HAL_TIM_PWM_Start+0x18a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1b      	ldr	r2, [pc, #108]	; (8009598 <HAL_TIM_PWM_Start+0x1e8>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d004      	beq.n	800953a <HAL_TIM_PWM_Start+0x18a>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a19      	ldr	r2, [pc, #100]	; (800959c <HAL_TIM_PWM_Start+0x1ec>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d115      	bne.n	8009566 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	4b17      	ldr	r3, [pc, #92]	; (80095a0 <HAL_TIM_PWM_Start+0x1f0>)
 8009542:	4013      	ands	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b06      	cmp	r3, #6
 800954a:	d015      	beq.n	8009578 <HAL_TIM_PWM_Start+0x1c8>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009552:	d011      	beq.n	8009578 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009564:	e008      	b.n	8009578 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0201 	orr.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	e000      	b.n	800957a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	40010000 	.word	0x40010000
 8009588:	40010400 	.word	0x40010400
 800958c:	40000400 	.word	0x40000400
 8009590:	40000800 	.word	0x40000800
 8009594:	40000c00 	.word	0x40000c00
 8009598:	40014000 	.word	0x40014000
 800959c:	40001800 	.word	0x40001800
 80095a0:	00010007 	.word	0x00010007

080095a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e049      	b.n	800964a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d106      	bne.n	80095d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f841 	bl	8009652 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2202      	movs	r2, #2
 80095d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3304      	adds	r3, #4
 80095e0:	4619      	mov	r1, r3
 80095e2:	4610      	mov	r0, r2
 80095e4:	f000 fd8c 	bl	800a100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
	...

08009668 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <HAL_TIM_IC_Start_IT+0x1e>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009682:	b2db      	uxtb	r3, r3
 8009684:	e023      	b.n	80096ce <HAL_TIM_IC_Start_IT+0x66>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b04      	cmp	r3, #4
 800968a:	d104      	bne.n	8009696 <HAL_TIM_IC_Start_IT+0x2e>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009692:	b2db      	uxtb	r3, r3
 8009694:	e01b      	b.n	80096ce <HAL_TIM_IC_Start_IT+0x66>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b08      	cmp	r3, #8
 800969a:	d104      	bne.n	80096a6 <HAL_TIM_IC_Start_IT+0x3e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	e013      	b.n	80096ce <HAL_TIM_IC_Start_IT+0x66>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b0c      	cmp	r3, #12
 80096aa:	d104      	bne.n	80096b6 <HAL_TIM_IC_Start_IT+0x4e>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	e00b      	b.n	80096ce <HAL_TIM_IC_Start_IT+0x66>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b10      	cmp	r3, #16
 80096ba:	d104      	bne.n	80096c6 <HAL_TIM_IC_Start_IT+0x5e>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	e003      	b.n	80096ce <HAL_TIM_IC_Start_IT+0x66>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d104      	bne.n	80096e0 <HAL_TIM_IC_Start_IT+0x78>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	e013      	b.n	8009708 <HAL_TIM_IC_Start_IT+0xa0>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d104      	bne.n	80096f0 <HAL_TIM_IC_Start_IT+0x88>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	e00b      	b.n	8009708 <HAL_TIM_IC_Start_IT+0xa0>
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d104      	bne.n	8009700 <HAL_TIM_IC_Start_IT+0x98>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	e003      	b.n	8009708 <HAL_TIM_IC_Start_IT+0xa0>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009706:	b2db      	uxtb	r3, r3
 8009708:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d102      	bne.n	8009716 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009710:	7b7b      	ldrb	r3, [r7, #13]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d001      	beq.n	800971a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e0e2      	b.n	80098e0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d104      	bne.n	800972a <HAL_TIM_IC_Start_IT+0xc2>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009728:	e023      	b.n	8009772 <HAL_TIM_IC_Start_IT+0x10a>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b04      	cmp	r3, #4
 800972e:	d104      	bne.n	800973a <HAL_TIM_IC_Start_IT+0xd2>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009738:	e01b      	b.n	8009772 <HAL_TIM_IC_Start_IT+0x10a>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b08      	cmp	r3, #8
 800973e:	d104      	bne.n	800974a <HAL_TIM_IC_Start_IT+0xe2>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009748:	e013      	b.n	8009772 <HAL_TIM_IC_Start_IT+0x10a>
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b0c      	cmp	r3, #12
 800974e:	d104      	bne.n	800975a <HAL_TIM_IC_Start_IT+0xf2>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009758:	e00b      	b.n	8009772 <HAL_TIM_IC_Start_IT+0x10a>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b10      	cmp	r3, #16
 800975e:	d104      	bne.n	800976a <HAL_TIM_IC_Start_IT+0x102>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009768:	e003      	b.n	8009772 <HAL_TIM_IC_Start_IT+0x10a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2202      	movs	r2, #2
 800976e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <HAL_TIM_IC_Start_IT+0x11a>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009780:	e013      	b.n	80097aa <HAL_TIM_IC_Start_IT+0x142>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b04      	cmp	r3, #4
 8009786:	d104      	bne.n	8009792 <HAL_TIM_IC_Start_IT+0x12a>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009790:	e00b      	b.n	80097aa <HAL_TIM_IC_Start_IT+0x142>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b08      	cmp	r3, #8
 8009796:	d104      	bne.n	80097a2 <HAL_TIM_IC_Start_IT+0x13a>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097a0:	e003      	b.n	80097aa <HAL_TIM_IC_Start_IT+0x142>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2202      	movs	r2, #2
 80097a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b0c      	cmp	r3, #12
 80097ae:	d841      	bhi.n	8009834 <HAL_TIM_IC_Start_IT+0x1cc>
 80097b0:	a201      	add	r2, pc, #4	; (adr r2, 80097b8 <HAL_TIM_IC_Start_IT+0x150>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097ed 	.word	0x080097ed
 80097bc:	08009835 	.word	0x08009835
 80097c0:	08009835 	.word	0x08009835
 80097c4:	08009835 	.word	0x08009835
 80097c8:	080097ff 	.word	0x080097ff
 80097cc:	08009835 	.word	0x08009835
 80097d0:	08009835 	.word	0x08009835
 80097d4:	08009835 	.word	0x08009835
 80097d8:	08009811 	.word	0x08009811
 80097dc:	08009835 	.word	0x08009835
 80097e0:	08009835 	.word	0x08009835
 80097e4:	08009835 	.word	0x08009835
 80097e8:	08009823 	.word	0x08009823
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0202 	orr.w	r2, r2, #2
 80097fa:	60da      	str	r2, [r3, #12]
      break;
 80097fc:	e01d      	b.n	800983a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68da      	ldr	r2, [r3, #12]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0204 	orr.w	r2, r2, #4
 800980c:	60da      	str	r2, [r3, #12]
      break;
 800980e:	e014      	b.n	800983a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f042 0208 	orr.w	r2, r2, #8
 800981e:	60da      	str	r2, [r3, #12]
      break;
 8009820:	e00b      	b.n	800983a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68da      	ldr	r2, [r3, #12]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0210 	orr.w	r2, r2, #16
 8009830:	60da      	str	r2, [r3, #12]
      break;
 8009832:	e002      	b.n	800983a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
      break;
 8009838:	bf00      	nop
  }

  if (status == HAL_OK)
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d14e      	bne.n	80098de <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2201      	movs	r2, #1
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	4618      	mov	r0, r3
 800984a:	f001 f91b 	bl	800aa84 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a25      	ldr	r2, [pc, #148]	; (80098e8 <HAL_TIM_IC_Start_IT+0x280>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d022      	beq.n	800989e <HAL_TIM_IC_Start_IT+0x236>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009860:	d01d      	beq.n	800989e <HAL_TIM_IC_Start_IT+0x236>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a21      	ldr	r2, [pc, #132]	; (80098ec <HAL_TIM_IC_Start_IT+0x284>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d018      	beq.n	800989e <HAL_TIM_IC_Start_IT+0x236>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a1f      	ldr	r2, [pc, #124]	; (80098f0 <HAL_TIM_IC_Start_IT+0x288>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d013      	beq.n	800989e <HAL_TIM_IC_Start_IT+0x236>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <HAL_TIM_IC_Start_IT+0x28c>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00e      	beq.n	800989e <HAL_TIM_IC_Start_IT+0x236>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a1c      	ldr	r2, [pc, #112]	; (80098f8 <HAL_TIM_IC_Start_IT+0x290>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d009      	beq.n	800989e <HAL_TIM_IC_Start_IT+0x236>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a1b      	ldr	r2, [pc, #108]	; (80098fc <HAL_TIM_IC_Start_IT+0x294>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d004      	beq.n	800989e <HAL_TIM_IC_Start_IT+0x236>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a19      	ldr	r2, [pc, #100]	; (8009900 <HAL_TIM_IC_Start_IT+0x298>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d115      	bne.n	80098ca <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689a      	ldr	r2, [r3, #8]
 80098a4:	4b17      	ldr	r3, [pc, #92]	; (8009904 <HAL_TIM_IC_Start_IT+0x29c>)
 80098a6:	4013      	ands	r3, r2
 80098a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2b06      	cmp	r3, #6
 80098ae:	d015      	beq.n	80098dc <HAL_TIM_IC_Start_IT+0x274>
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098b6:	d011      	beq.n	80098dc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f042 0201 	orr.w	r2, r2, #1
 80098c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098c8:	e008      	b.n	80098dc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f042 0201 	orr.w	r2, r2, #1
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	e000      	b.n	80098de <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098dc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	40010000 	.word	0x40010000
 80098ec:	40000400 	.word	0x40000400
 80098f0:	40000800 	.word	0x40000800
 80098f4:	40000c00 	.word	0x40000c00
 80098f8:	40010400 	.word	0x40010400
 80098fc:	40014000 	.word	0x40014000
 8009900:	40001800 	.word	0x40001800
 8009904:	00010007 	.word	0x00010007

08009908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b02      	cmp	r3, #2
 800991c:	d122      	bne.n	8009964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b02      	cmp	r3, #2
 800992a:	d11b      	bne.n	8009964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f06f 0202 	mvn.w	r2, #2
 8009934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	f003 0303 	and.w	r3, r3, #3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7f8 fe8c 	bl	8002668 <HAL_TIM_IC_CaptureCallback>
 8009950:	e005      	b.n	800995e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fbb6 	bl	800a0c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fbbd 	bl	800a0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	f003 0304 	and.w	r3, r3, #4
 800996e:	2b04      	cmp	r3, #4
 8009970:	d122      	bne.n	80099b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b04      	cmp	r3, #4
 800997e:	d11b      	bne.n	80099b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f06f 0204 	mvn.w	r2, #4
 8009988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2202      	movs	r2, #2
 800998e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7f8 fe62 	bl	8002668 <HAL_TIM_IC_CaptureCallback>
 80099a4:	e005      	b.n	80099b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fb8c 	bl	800a0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fb93 	bl	800a0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0308 	and.w	r3, r3, #8
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d122      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0308 	and.w	r3, r3, #8
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d11b      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0208 	mvn.w	r2, #8
 80099dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2204      	movs	r2, #4
 80099e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7f8 fe38 	bl	8002668 <HAL_TIM_IC_CaptureCallback>
 80099f8:	e005      	b.n	8009a06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fb62 	bl	800a0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fb69 	bl	800a0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	d122      	bne.n	8009a60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0310 	and.w	r3, r3, #16
 8009a24:	2b10      	cmp	r3, #16
 8009a26:	d11b      	bne.n	8009a60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0210 	mvn.w	r2, #16
 8009a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2208      	movs	r2, #8
 8009a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7f8 fe0e 	bl	8002668 <HAL_TIM_IC_CaptureCallback>
 8009a4c:	e005      	b.n	8009a5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fb38 	bl	800a0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb3f 	bl	800a0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d10e      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d107      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f06f 0201 	mvn.w	r2, #1
 8009a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7f9 fbba 	bl	8003200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a96:	2b80      	cmp	r3, #128	; 0x80
 8009a98:	d10e      	bne.n	8009ab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa4:	2b80      	cmp	r3, #128	; 0x80
 8009aa6:	d107      	bne.n	8009ab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 f922 	bl	800acfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac6:	d10e      	bne.n	8009ae6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad2:	2b80      	cmp	r3, #128	; 0x80
 8009ad4:	d107      	bne.n	8009ae6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 f915 	bl	800ad10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af0:	2b40      	cmp	r3, #64	; 0x40
 8009af2:	d10e      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afe:	2b40      	cmp	r3, #64	; 0x40
 8009b00:	d107      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 faed 	bl	800a0ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0320 	and.w	r3, r3, #32
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d10e      	bne.n	8009b3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f003 0320 	and.w	r3, r3, #32
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d107      	bne.n	8009b3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f06f 0220 	mvn.w	r2, #32
 8009b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f001 f8d5 	bl	800ace8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b086      	sub	sp, #24
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d101      	bne.n	8009b64 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e088      	b.n	8009c76 <HAL_TIM_IC_ConfigChannel+0x130>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d11b      	bne.n	8009baa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009b82:	f000 fdbb 	bl	800a6fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699a      	ldr	r2, [r3, #24]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f022 020c 	bic.w	r2, r2, #12
 8009b94:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6999      	ldr	r1, [r3, #24]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	619a      	str	r2, [r3, #24]
 8009ba8:	e060      	b.n	8009c6c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	d11c      	bne.n	8009bea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009bc0:	f000 fe3f 	bl	800a842 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009bd2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6999      	ldr	r1, [r3, #24]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	021a      	lsls	r2, r3, #8
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	619a      	str	r2, [r3, #24]
 8009be8:	e040      	b.n	8009c6c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d11b      	bne.n	8009c28 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009c00:	f000 fe8c 	bl	800a91c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	69da      	ldr	r2, [r3, #28]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 020c 	bic.w	r2, r2, #12
 8009c12:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	69d9      	ldr	r1, [r3, #28]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	61da      	str	r2, [r3, #28]
 8009c26:	e021      	b.n	8009c6c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b0c      	cmp	r3, #12
 8009c2c:	d11c      	bne.n	8009c68 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009c3e:	f000 fea9 	bl	800a994 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	69da      	ldr	r2, [r3, #28]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c50:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69d9      	ldr	r1, [r3, #28]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	021a      	lsls	r2, r3, #8
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	61da      	str	r2, [r3, #28]
 8009c66:	e001      	b.n	8009c6c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d101      	bne.n	8009c9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	e0ff      	b.n	8009e9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b14      	cmp	r3, #20
 8009caa:	f200 80f0 	bhi.w	8009e8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009cae:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009d09 	.word	0x08009d09
 8009cb8:	08009e8f 	.word	0x08009e8f
 8009cbc:	08009e8f 	.word	0x08009e8f
 8009cc0:	08009e8f 	.word	0x08009e8f
 8009cc4:	08009d49 	.word	0x08009d49
 8009cc8:	08009e8f 	.word	0x08009e8f
 8009ccc:	08009e8f 	.word	0x08009e8f
 8009cd0:	08009e8f 	.word	0x08009e8f
 8009cd4:	08009d8b 	.word	0x08009d8b
 8009cd8:	08009e8f 	.word	0x08009e8f
 8009cdc:	08009e8f 	.word	0x08009e8f
 8009ce0:	08009e8f 	.word	0x08009e8f
 8009ce4:	08009dcb 	.word	0x08009dcb
 8009ce8:	08009e8f 	.word	0x08009e8f
 8009cec:	08009e8f 	.word	0x08009e8f
 8009cf0:	08009e8f 	.word	0x08009e8f
 8009cf4:	08009e0d 	.word	0x08009e0d
 8009cf8:	08009e8f 	.word	0x08009e8f
 8009cfc:	08009e8f 	.word	0x08009e8f
 8009d00:	08009e8f 	.word	0x08009e8f
 8009d04:	08009e4d 	.word	0x08009e4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fa96 	bl	800a240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	699a      	ldr	r2, [r3, #24]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f042 0208 	orr.w	r2, r2, #8
 8009d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f022 0204 	bic.w	r2, r2, #4
 8009d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6999      	ldr	r1, [r3, #24]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	691a      	ldr	r2, [r3, #16]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	619a      	str	r2, [r3, #24]
      break;
 8009d46:	e0a5      	b.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 fae8 	bl	800a324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	699a      	ldr	r2, [r3, #24]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6999      	ldr	r1, [r3, #24]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	021a      	lsls	r2, r3, #8
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	619a      	str	r2, [r3, #24]
      break;
 8009d88:	e084      	b.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68b9      	ldr	r1, [r7, #8]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 fb3f 	bl	800a414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	69da      	ldr	r2, [r3, #28]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0208 	orr.w	r2, r2, #8
 8009da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69da      	ldr	r2, [r3, #28]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 0204 	bic.w	r2, r2, #4
 8009db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69d9      	ldr	r1, [r3, #28]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	691a      	ldr	r2, [r3, #16]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	61da      	str	r2, [r3, #28]
      break;
 8009dc8:	e064      	b.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68b9      	ldr	r1, [r7, #8]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fb95 	bl	800a500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69da      	ldr	r2, [r3, #28]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69da      	ldr	r2, [r3, #28]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69d9      	ldr	r1, [r3, #28]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	021a      	lsls	r2, r3, #8
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	61da      	str	r2, [r3, #28]
      break;
 8009e0a:	e043      	b.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fbcc 	bl	800a5b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0208 	orr.w	r2, r2, #8
 8009e26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f022 0204 	bic.w	r2, r2, #4
 8009e36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	691a      	ldr	r2, [r3, #16]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e4a:	e023      	b.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68b9      	ldr	r1, [r7, #8]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fbfe 	bl	800a654 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	021a      	lsls	r2, r3, #8
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e8c:	e002      	b.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	75fb      	strb	r3, [r7, #23]
      break;
 8009e92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop

08009ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d101      	bne.n	8009ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e0b4      	b.n	800a02e <HAL_TIM_ConfigClockSource+0x186>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	4b56      	ldr	r3, [pc, #344]	; (800a038 <HAL_TIM_ConfigClockSource+0x190>)
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009efc:	d03e      	beq.n	8009f7c <HAL_TIM_ConfigClockSource+0xd4>
 8009efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f02:	f200 8087 	bhi.w	800a014 <HAL_TIM_ConfigClockSource+0x16c>
 8009f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0a:	f000 8086 	beq.w	800a01a <HAL_TIM_ConfigClockSource+0x172>
 8009f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f12:	d87f      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x16c>
 8009f14:	2b70      	cmp	r3, #112	; 0x70
 8009f16:	d01a      	beq.n	8009f4e <HAL_TIM_ConfigClockSource+0xa6>
 8009f18:	2b70      	cmp	r3, #112	; 0x70
 8009f1a:	d87b      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x16c>
 8009f1c:	2b60      	cmp	r3, #96	; 0x60
 8009f1e:	d050      	beq.n	8009fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8009f20:	2b60      	cmp	r3, #96	; 0x60
 8009f22:	d877      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x16c>
 8009f24:	2b50      	cmp	r3, #80	; 0x50
 8009f26:	d03c      	beq.n	8009fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8009f28:	2b50      	cmp	r3, #80	; 0x50
 8009f2a:	d873      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x16c>
 8009f2c:	2b40      	cmp	r3, #64	; 0x40
 8009f2e:	d058      	beq.n	8009fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8009f30:	2b40      	cmp	r3, #64	; 0x40
 8009f32:	d86f      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x16c>
 8009f34:	2b30      	cmp	r3, #48	; 0x30
 8009f36:	d064      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x15a>
 8009f38:	2b30      	cmp	r3, #48	; 0x30
 8009f3a:	d86b      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x16c>
 8009f3c:	2b20      	cmp	r3, #32
 8009f3e:	d060      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x15a>
 8009f40:	2b20      	cmp	r3, #32
 8009f42:	d867      	bhi.n	800a014 <HAL_TIM_ConfigClockSource+0x16c>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d05c      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x15a>
 8009f48:	2b10      	cmp	r3, #16
 8009f4a:	d05a      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x15a>
 8009f4c:	e062      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f5e:	f000 fd71 	bl	800aa44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	609a      	str	r2, [r3, #8]
      break;
 8009f7a:	e04f      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f8c:	f000 fd5a 	bl	800aa44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	689a      	ldr	r2, [r3, #8]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f9e:	609a      	str	r2, [r3, #8]
      break;
 8009fa0:	e03c      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f000 fc18 	bl	800a7e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2150      	movs	r1, #80	; 0x50
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fd27 	bl	800aa0e <TIM_ITRx_SetConfig>
      break;
 8009fc0:	e02c      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f000 fc74 	bl	800a8bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2160      	movs	r1, #96	; 0x60
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fd17 	bl	800aa0e <TIM_ITRx_SetConfig>
      break;
 8009fe0:	e01c      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f000 fbf8 	bl	800a7e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2140      	movs	r1, #64	; 0x40
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 fd07 	bl	800aa0e <TIM_ITRx_SetConfig>
      break;
 800a000:	e00c      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4619      	mov	r1, r3
 800a00c:	4610      	mov	r0, r2
 800a00e:	f000 fcfe 	bl	800aa0e <TIM_ITRx_SetConfig>
      break;
 800a012:	e003      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	73fb      	strb	r3, [r7, #15]
      break;
 800a018:	e000      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a01a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	fffeff88 	.word	0xfffeff88

0800a03c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b0c      	cmp	r3, #12
 800a04e:	d831      	bhi.n	800a0b4 <HAL_TIM_ReadCapturedValue+0x78>
 800a050:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a08d 	.word	0x0800a08d
 800a05c:	0800a0b5 	.word	0x0800a0b5
 800a060:	0800a0b5 	.word	0x0800a0b5
 800a064:	0800a0b5 	.word	0x0800a0b5
 800a068:	0800a097 	.word	0x0800a097
 800a06c:	0800a0b5 	.word	0x0800a0b5
 800a070:	0800a0b5 	.word	0x0800a0b5
 800a074:	0800a0b5 	.word	0x0800a0b5
 800a078:	0800a0a1 	.word	0x0800a0a1
 800a07c:	0800a0b5 	.word	0x0800a0b5
 800a080:	0800a0b5 	.word	0x0800a0b5
 800a084:	0800a0b5 	.word	0x0800a0b5
 800a088:	0800a0ab 	.word	0x0800a0ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a092:	60fb      	str	r3, [r7, #12]

      break;
 800a094:	e00f      	b.n	800a0b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09c:	60fb      	str	r3, [r7, #12]

      break;
 800a09e:	e00a      	b.n	800a0b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	60fb      	str	r3, [r7, #12]

      break;
 800a0a8:	e005      	b.n	800a0b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	60fb      	str	r3, [r7, #12]

      break;
 800a0b2:	e000      	b.n	800a0b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a0b4:	bf00      	nop
  }

  return tmpreg;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a40      	ldr	r2, [pc, #256]	; (800a214 <TIM_Base_SetConfig+0x114>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d013      	beq.n	800a140 <TIM_Base_SetConfig+0x40>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11e:	d00f      	beq.n	800a140 <TIM_Base_SetConfig+0x40>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a3d      	ldr	r2, [pc, #244]	; (800a218 <TIM_Base_SetConfig+0x118>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d00b      	beq.n	800a140 <TIM_Base_SetConfig+0x40>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a3c      	ldr	r2, [pc, #240]	; (800a21c <TIM_Base_SetConfig+0x11c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d007      	beq.n	800a140 <TIM_Base_SetConfig+0x40>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a3b      	ldr	r2, [pc, #236]	; (800a220 <TIM_Base_SetConfig+0x120>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d003      	beq.n	800a140 <TIM_Base_SetConfig+0x40>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a3a      	ldr	r2, [pc, #232]	; (800a224 <TIM_Base_SetConfig+0x124>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d108      	bne.n	800a152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a2f      	ldr	r2, [pc, #188]	; (800a214 <TIM_Base_SetConfig+0x114>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d02b      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a160:	d027      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a2c      	ldr	r2, [pc, #176]	; (800a218 <TIM_Base_SetConfig+0x118>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d023      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a2b      	ldr	r2, [pc, #172]	; (800a21c <TIM_Base_SetConfig+0x11c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d01f      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a2a      	ldr	r2, [pc, #168]	; (800a220 <TIM_Base_SetConfig+0x120>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d01b      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a29      	ldr	r2, [pc, #164]	; (800a224 <TIM_Base_SetConfig+0x124>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d017      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a28      	ldr	r2, [pc, #160]	; (800a228 <TIM_Base_SetConfig+0x128>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d013      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a27      	ldr	r2, [pc, #156]	; (800a22c <TIM_Base_SetConfig+0x12c>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00f      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a26      	ldr	r2, [pc, #152]	; (800a230 <TIM_Base_SetConfig+0x130>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00b      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a25      	ldr	r2, [pc, #148]	; (800a234 <TIM_Base_SetConfig+0x134>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d007      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a24      	ldr	r2, [pc, #144]	; (800a238 <TIM_Base_SetConfig+0x138>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d003      	beq.n	800a1b2 <TIM_Base_SetConfig+0xb2>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a23      	ldr	r2, [pc, #140]	; (800a23c <TIM_Base_SetConfig+0x13c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d108      	bne.n	800a1c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a0a      	ldr	r2, [pc, #40]	; (800a214 <TIM_Base_SetConfig+0x114>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d003      	beq.n	800a1f8 <TIM_Base_SetConfig+0xf8>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a0c      	ldr	r2, [pc, #48]	; (800a224 <TIM_Base_SetConfig+0x124>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d103      	bne.n	800a200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	691a      	ldr	r2, [r3, #16]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	615a      	str	r2, [r3, #20]
}
 800a206:	bf00      	nop
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	40010000 	.word	0x40010000
 800a218:	40000400 	.word	0x40000400
 800a21c:	40000800 	.word	0x40000800
 800a220:	40000c00 	.word	0x40000c00
 800a224:	40010400 	.word	0x40010400
 800a228:	40014000 	.word	0x40014000
 800a22c:	40014400 	.word	0x40014400
 800a230:	40014800 	.word	0x40014800
 800a234:	40001800 	.word	0x40001800
 800a238:	40001c00 	.word	0x40001c00
 800a23c:	40002000 	.word	0x40002000

0800a240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a240:	b480      	push	{r7}
 800a242:	b087      	sub	sp, #28
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	f023 0201 	bic.w	r2, r3, #1
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4b2b      	ldr	r3, [pc, #172]	; (800a318 <TIM_OC1_SetConfig+0xd8>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f023 0303 	bic.w	r3, r3, #3
 800a276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f023 0302 	bic.w	r3, r3, #2
 800a288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	4313      	orrs	r3, r2
 800a292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a21      	ldr	r2, [pc, #132]	; (800a31c <TIM_OC1_SetConfig+0xdc>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d003      	beq.n	800a2a4 <TIM_OC1_SetConfig+0x64>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a20      	ldr	r2, [pc, #128]	; (800a320 <TIM_OC1_SetConfig+0xe0>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d10c      	bne.n	800a2be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f023 0308 	bic.w	r3, r3, #8
 800a2aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f023 0304 	bic.w	r3, r3, #4
 800a2bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a16      	ldr	r2, [pc, #88]	; (800a31c <TIM_OC1_SetConfig+0xdc>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d003      	beq.n	800a2ce <TIM_OC1_SetConfig+0x8e>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a15      	ldr	r2, [pc, #84]	; (800a320 <TIM_OC1_SetConfig+0xe0>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d111      	bne.n	800a2f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	621a      	str	r2, [r3, #32]
}
 800a30c:	bf00      	nop
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	fffeff8f 	.word	0xfffeff8f
 800a31c:	40010000 	.word	0x40010000
 800a320:	40010400 	.word	0x40010400

0800a324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	f023 0210 	bic.w	r2, r3, #16
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4b2e      	ldr	r3, [pc, #184]	; (800a408 <TIM_OC2_SetConfig+0xe4>)
 800a350:	4013      	ands	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4313      	orrs	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f023 0320 	bic.w	r3, r3, #32
 800a36e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	4313      	orrs	r3, r2
 800a37a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a23      	ldr	r2, [pc, #140]	; (800a40c <TIM_OC2_SetConfig+0xe8>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d003      	beq.n	800a38c <TIM_OC2_SetConfig+0x68>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a22      	ldr	r2, [pc, #136]	; (800a410 <TIM_OC2_SetConfig+0xec>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d10d      	bne.n	800a3a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a18      	ldr	r2, [pc, #96]	; (800a40c <TIM_OC2_SetConfig+0xe8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d003      	beq.n	800a3b8 <TIM_OC2_SetConfig+0x94>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a17      	ldr	r2, [pc, #92]	; (800a410 <TIM_OC2_SetConfig+0xec>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d113      	bne.n	800a3e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	621a      	str	r2, [r3, #32]
}
 800a3fa:	bf00      	nop
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	feff8fff 	.word	0xfeff8fff
 800a40c:	40010000 	.word	0x40010000
 800a410:	40010400 	.word	0x40010400

0800a414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4b2d      	ldr	r3, [pc, #180]	; (800a4f4 <TIM_OC3_SetConfig+0xe0>)
 800a440:	4013      	ands	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 0303 	bic.w	r3, r3, #3
 800a44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a45c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	021b      	lsls	r3, r3, #8
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a22      	ldr	r2, [pc, #136]	; (800a4f8 <TIM_OC3_SetConfig+0xe4>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d003      	beq.n	800a47a <TIM_OC3_SetConfig+0x66>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a21      	ldr	r2, [pc, #132]	; (800a4fc <TIM_OC3_SetConfig+0xe8>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d10d      	bne.n	800a496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	021b      	lsls	r3, r3, #8
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a17      	ldr	r2, [pc, #92]	; (800a4f8 <TIM_OC3_SetConfig+0xe4>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d003      	beq.n	800a4a6 <TIM_OC3_SetConfig+0x92>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a16      	ldr	r2, [pc, #88]	; (800a4fc <TIM_OC3_SetConfig+0xe8>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d113      	bne.n	800a4ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	011b      	lsls	r3, r3, #4
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	621a      	str	r2, [r3, #32]
}
 800a4e8:	bf00      	nop
 800a4ea:	371c      	adds	r7, #28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	fffeff8f 	.word	0xfffeff8f
 800a4f8:	40010000 	.word	0x40010000
 800a4fc:	40010400 	.word	0x40010400

0800a500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a500:	b480      	push	{r7}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4b1e      	ldr	r3, [pc, #120]	; (800a5a4 <TIM_OC4_SetConfig+0xa4>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a54a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	031b      	lsls	r3, r3, #12
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	4313      	orrs	r3, r2
 800a556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a13      	ldr	r2, [pc, #76]	; (800a5a8 <TIM_OC4_SetConfig+0xa8>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d003      	beq.n	800a568 <TIM_OC4_SetConfig+0x68>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a12      	ldr	r2, [pc, #72]	; (800a5ac <TIM_OC4_SetConfig+0xac>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d109      	bne.n	800a57c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a56e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	019b      	lsls	r3, r3, #6
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	621a      	str	r2, [r3, #32]
}
 800a596:	bf00      	nop
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	feff8fff 	.word	0xfeff8fff
 800a5a8:	40010000 	.word	0x40010000
 800a5ac:	40010400 	.word	0x40010400

0800a5b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	4b1b      	ldr	r3, [pc, #108]	; (800a648 <TIM_OC5_SetConfig+0x98>)
 800a5dc:	4013      	ands	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a5f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	041b      	lsls	r3, r3, #16
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a12      	ldr	r2, [pc, #72]	; (800a64c <TIM_OC5_SetConfig+0x9c>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d003      	beq.n	800a60e <TIM_OC5_SetConfig+0x5e>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a11      	ldr	r2, [pc, #68]	; (800a650 <TIM_OC5_SetConfig+0xa0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d109      	bne.n	800a622 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a614:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	621a      	str	r2, [r3, #32]
}
 800a63c:	bf00      	nop
 800a63e:	371c      	adds	r7, #28
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	fffeff8f 	.word	0xfffeff8f
 800a64c:	40010000 	.word	0x40010000
 800a650:	40010400 	.word	0x40010400

0800a654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	4b1c      	ldr	r3, [pc, #112]	; (800a6f0 <TIM_OC6_SetConfig+0x9c>)
 800a680:	4013      	ands	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	051b      	lsls	r3, r3, #20
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a13      	ldr	r2, [pc, #76]	; (800a6f4 <TIM_OC6_SetConfig+0xa0>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d003      	beq.n	800a6b4 <TIM_OC6_SetConfig+0x60>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a12      	ldr	r2, [pc, #72]	; (800a6f8 <TIM_OC6_SetConfig+0xa4>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d109      	bne.n	800a6c8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	029b      	lsls	r3, r3, #10
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	621a      	str	r2, [r3, #32]
}
 800a6e2:	bf00      	nop
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	feff8fff 	.word	0xfeff8fff
 800a6f4:	40010000 	.word	0x40010000
 800a6f8:	40010400 	.word	0x40010400

0800a6fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	f023 0201 	bic.w	r2, r3, #1
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4a28      	ldr	r2, [pc, #160]	; (800a7c8 <TIM_TI1_SetConfig+0xcc>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d01b      	beq.n	800a762 <TIM_TI1_SetConfig+0x66>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a730:	d017      	beq.n	800a762 <TIM_TI1_SetConfig+0x66>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	4a25      	ldr	r2, [pc, #148]	; (800a7cc <TIM_TI1_SetConfig+0xd0>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d013      	beq.n	800a762 <TIM_TI1_SetConfig+0x66>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4a24      	ldr	r2, [pc, #144]	; (800a7d0 <TIM_TI1_SetConfig+0xd4>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d00f      	beq.n	800a762 <TIM_TI1_SetConfig+0x66>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4a23      	ldr	r2, [pc, #140]	; (800a7d4 <TIM_TI1_SetConfig+0xd8>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d00b      	beq.n	800a762 <TIM_TI1_SetConfig+0x66>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	4a22      	ldr	r2, [pc, #136]	; (800a7d8 <TIM_TI1_SetConfig+0xdc>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d007      	beq.n	800a762 <TIM_TI1_SetConfig+0x66>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	4a21      	ldr	r2, [pc, #132]	; (800a7dc <TIM_TI1_SetConfig+0xe0>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d003      	beq.n	800a762 <TIM_TI1_SetConfig+0x66>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4a20      	ldr	r2, [pc, #128]	; (800a7e0 <TIM_TI1_SetConfig+0xe4>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d101      	bne.n	800a766 <TIM_TI1_SetConfig+0x6a>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <TIM_TI1_SetConfig+0x6c>
 800a766:	2300      	movs	r3, #0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d008      	beq.n	800a77e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f023 0303 	bic.w	r3, r3, #3
 800a772:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4313      	orrs	r3, r2
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	e003      	b.n	800a786 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f043 0301 	orr.w	r3, r3, #1
 800a784:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a78c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	b2db      	uxtb	r3, r3
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	4313      	orrs	r3, r2
 800a798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f023 030a 	bic.w	r3, r3, #10
 800a7a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	f003 030a 	and.w	r3, r3, #10
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	621a      	str	r2, [r3, #32]
}
 800a7ba:	bf00      	nop
 800a7bc:	371c      	adds	r7, #28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	40010000 	.word	0x40010000
 800a7cc:	40000400 	.word	0x40000400
 800a7d0:	40000800 	.word	0x40000800
 800a7d4:	40000c00 	.word	0x40000c00
 800a7d8:	40010400 	.word	0x40010400
 800a7dc:	40014000 	.word	0x40014000
 800a7e0:	40001800 	.word	0x40001800

0800a7e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	f023 0201 	bic.w	r2, r3, #1
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a80e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	4313      	orrs	r3, r2
 800a818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f023 030a 	bic.w	r3, r3, #10
 800a820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4313      	orrs	r3, r2
 800a828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	621a      	str	r2, [r3, #32]
}
 800a836:	bf00      	nop
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a842:	b480      	push	{r7}
 800a844:	b087      	sub	sp, #28
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	607a      	str	r2, [r7, #4]
 800a84e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	f023 0210 	bic.w	r2, r3, #16
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a86e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	021b      	lsls	r3, r3, #8
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	4313      	orrs	r3, r2
 800a878:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	031b      	lsls	r3, r3, #12
 800a886:	b29b      	uxth	r3, r3
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a894:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	011b      	lsls	r3, r3, #4
 800a89a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	621a      	str	r2, [r3, #32]
}
 800a8b0:	bf00      	nop
 800a8b2:	371c      	adds	r7, #28
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	f023 0210 	bic.w	r2, r3, #16
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	031b      	lsls	r3, r3, #12
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	011b      	lsls	r3, r3, #4
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	4313      	orrs	r3, r2
 800a902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	621a      	str	r2, [r3, #32]
}
 800a910:	bf00      	nop
 800a912:	371c      	adds	r7, #28
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6a1b      	ldr	r3, [r3, #32]
 800a940:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f023 0303 	bic.w	r3, r3, #3
 800a948:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4313      	orrs	r3, r2
 800a950:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a958:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	011b      	lsls	r3, r3, #4
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	4313      	orrs	r3, r2
 800a964:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a96c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	4313      	orrs	r3, r2
 800a97a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	621a      	str	r2, [r3, #32]
}
 800a988:	bf00      	nop
 800a98a:	371c      	adds	r7, #28
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
 800a9a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	021b      	lsls	r3, r3, #8
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	031b      	lsls	r3, r3, #12
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a9e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	031b      	lsls	r3, r3, #12
 800a9ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	621a      	str	r2, [r3, #32]
}
 800aa02:	bf00      	nop
 800aa04:	371c      	adds	r7, #28
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b085      	sub	sp, #20
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	f043 0307 	orr.w	r3, r3, #7
 800aa30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	609a      	str	r2, [r3, #8]
}
 800aa38:	bf00      	nop
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	021a      	lsls	r2, r3, #8
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	431a      	orrs	r2, r3
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	609a      	str	r2, [r3, #8]
}
 800aa78:	bf00      	nop
 800aa7a:	371c      	adds	r7, #28
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	f003 031f 	and.w	r3, r3, #31
 800aa96:	2201      	movs	r2, #1
 800aa98:	fa02 f303 	lsl.w	r3, r2, r3
 800aa9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a1a      	ldr	r2, [r3, #32]
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	43db      	mvns	r3, r3
 800aaa6:	401a      	ands	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6a1a      	ldr	r2, [r3, #32]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f003 031f 	and.w	r3, r3, #31
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	fa01 f303 	lsl.w	r3, r1, r3
 800aabc:	431a      	orrs	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	621a      	str	r2, [r3, #32]
}
 800aac2:	bf00      	nop
 800aac4:	371c      	adds	r7, #28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
	...

0800aad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d101      	bne.n	800aae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aae4:	2302      	movs	r3, #2
 800aae6:	e06d      	b.n	800abc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a30      	ldr	r2, [pc, #192]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d004      	beq.n	800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a2f      	ldr	r2, [pc, #188]	; (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d108      	bne.n	800ab2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a20      	ldr	r2, [pc, #128]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d022      	beq.n	800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab5a:	d01d      	beq.n	800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a1d      	ldr	r2, [pc, #116]	; (800abd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d018      	beq.n	800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a1c      	ldr	r2, [pc, #112]	; (800abdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d013      	beq.n	800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a1a      	ldr	r2, [pc, #104]	; (800abe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d00e      	beq.n	800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a15      	ldr	r2, [pc, #84]	; (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d009      	beq.n	800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a16      	ldr	r2, [pc, #88]	; (800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d004      	beq.n	800ab98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a15      	ldr	r2, [pc, #84]	; (800abe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d10c      	bne.n	800abb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	40010000 	.word	0x40010000
 800abd4:	40010400 	.word	0x40010400
 800abd8:	40000400 	.word	0x40000400
 800abdc:	40000800 	.word	0x40000800
 800abe0:	40000c00 	.word	0x40000c00
 800abe4:	40014000 	.word	0x40014000
 800abe8:	40001800 	.word	0x40001800

0800abec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d101      	bne.n	800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac04:	2302      	movs	r3, #2
 800ac06:	e065      	b.n	800acd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	041b      	lsls	r3, r3, #16
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a16      	ldr	r2, [pc, #88]	; (800ace0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d004      	beq.n	800ac96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a14      	ldr	r2, [pc, #80]	; (800ace4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d115      	bne.n	800acc2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	051b      	lsls	r3, r3, #20
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	6a1b      	ldr	r3, [r3, #32]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	40010000 	.word	0x40010000
 800ace4:	40010400 	.word	0x40010400

0800ace8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e040      	b.n	800adb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d106      	bne.n	800ad4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7f8 fbfc 	bl	8003544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2224      	movs	r2, #36	; 0x24
 800ad50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f022 0201 	bic.w	r2, r2, #1
 800ad60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fc2a 	bl	800b5bc <UART_SetConfig>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d101      	bne.n	800ad72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e022      	b.n	800adb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d002      	beq.n	800ad80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fe82 	bl	800ba84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	689a      	ldr	r2, [r3, #8]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f042 0201 	orr.w	r2, r2, #1
 800adae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 ff09 	bl	800bbc8 <UART_CheckIdleState>
 800adb6:	4603      	mov	r3, r0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b08a      	sub	sp, #40	; 0x28
 800adc4:	af02      	add	r7, sp, #8
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	603b      	str	r3, [r7, #0]
 800adcc:	4613      	mov	r3, r2
 800adce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800add4:	2b20      	cmp	r3, #32
 800add6:	d171      	bne.n	800aebc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <HAL_UART_Transmit+0x24>
 800adde:	88fb      	ldrh	r3, [r7, #6]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e06a      	b.n	800aebe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2221      	movs	r2, #33	; 0x21
 800adf4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adf6:	f7fa fd31 	bl	800585c <HAL_GetTick>
 800adfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	88fa      	ldrh	r2, [r7, #6]
 800ae00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	88fa      	ldrh	r2, [r7, #6]
 800ae08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae14:	d108      	bne.n	800ae28 <HAL_UART_Transmit+0x68>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d104      	bne.n	800ae28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	61bb      	str	r3, [r7, #24]
 800ae26:	e003      	b.n	800ae30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae30:	e02c      	b.n	800ae8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2180      	movs	r1, #128	; 0x80
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 fefa 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e038      	b.n	800aebe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10b      	bne.n	800ae6a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	3302      	adds	r3, #2
 800ae66:	61bb      	str	r3, [r7, #24]
 800ae68:	e007      	b.n	800ae7a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	781a      	ldrb	r2, [r3, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	3301      	adds	r3, #1
 800ae78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	3b01      	subs	r3, #1
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1cc      	bne.n	800ae32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2140      	movs	r1, #64	; 0x40
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 fec7 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e005      	b.n	800aebe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	e000      	b.n	800aebe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800aebc:	2302      	movs	r3, #2
  }
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3720      	adds	r7, #32
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b08a      	sub	sp, #40	; 0x28
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	4613      	mov	r3, r2
 800aed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeda:	2b20      	cmp	r3, #32
 800aedc:	d132      	bne.n	800af44 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <HAL_UART_Receive_IT+0x24>
 800aee4:	88fb      	ldrh	r3, [r7, #6]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e02b      	b.n	800af46 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d018      	beq.n	800af34 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	e853 3f00 	ldrex	r3, [r3]
 800af0e:	613b      	str	r3, [r7, #16]
   return(result);
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af16:	627b      	str	r3, [r7, #36]	; 0x24
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	623b      	str	r3, [r7, #32]
 800af22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af24:	69f9      	ldr	r1, [r7, #28]
 800af26:	6a3a      	ldr	r2, [r7, #32]
 800af28:	e841 2300 	strex	r3, r2, [r1]
 800af2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1e6      	bne.n	800af02 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	461a      	mov	r2, r3
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 ff42 	bl	800bdc4 <UART_Start_Receive_IT>
 800af40:	4603      	mov	r3, r0
 800af42:	e000      	b.n	800af46 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800af44:	2302      	movs	r3, #2
  }
}
 800af46:	4618      	mov	r0, r3
 800af48:	3728      	adds	r7, #40	; 0x28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b08a      	sub	sp, #40	; 0x28
 800af52:	af00      	add	r7, sp, #0
 800af54:	60f8      	str	r0, [r7, #12]
 800af56:	60b9      	str	r1, [r7, #8]
 800af58:	4613      	mov	r3, r2
 800af5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af62:	2b20      	cmp	r3, #32
 800af64:	d132      	bne.n	800afcc <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <HAL_UART_Receive_DMA+0x24>
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e02b      	b.n	800afce <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d018      	beq.n	800afbc <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	e853 3f00 	ldrex	r3, [r3]
 800af96:	613b      	str	r3, [r7, #16]
   return(result);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	461a      	mov	r2, r3
 800afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa8:	623b      	str	r3, [r7, #32]
 800afaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	69f9      	ldr	r1, [r7, #28]
 800afae:	6a3a      	ldr	r2, [r7, #32]
 800afb0:	e841 2300 	strex	r3, r2, [r1]
 800afb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e6      	bne.n	800af8a <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800afbc:	88fb      	ldrh	r3, [r7, #6]
 800afbe:	461a      	mov	r2, r3
 800afc0:	68b9      	ldr	r1, [r7, #8]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 ffc4 	bl	800bf50 <UART_Start_Receive_DMA>
 800afc8:	4603      	mov	r3, r0
 800afca:	e000      	b.n	800afce <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800afcc:	2302      	movs	r3, #2
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3728      	adds	r7, #40	; 0x28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b0ba      	sub	sp, #232	; 0xe8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800affe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b002:	f640 030f 	movw	r3, #2063	; 0x80f
 800b006:	4013      	ands	r3, r2
 800b008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b00c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b010:	2b00      	cmp	r3, #0
 800b012:	d115      	bne.n	800b040 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b018:	f003 0320 	and.w	r3, r3, #32
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00f      	beq.n	800b040 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b024:	f003 0320 	and.w	r3, r3, #32
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d009      	beq.n	800b040 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b030:	2b00      	cmp	r3, #0
 800b032:	f000 8297 	beq.w	800b564 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	4798      	blx	r3
      }
      return;
 800b03e:	e291      	b.n	800b564 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 8117 	beq.w	800b278 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b04a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	2b00      	cmp	r3, #0
 800b054:	d106      	bne.n	800b064 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b056:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b05a:	4b85      	ldr	r3, [pc, #532]	; (800b270 <HAL_UART_IRQHandler+0x298>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f000 810a 	beq.w	800b278 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d011      	beq.n	800b094 <HAL_UART_IRQHandler+0xbc>
 800b070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00b      	beq.n	800b094 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2201      	movs	r2, #1
 800b082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b08a:	f043 0201 	orr.w	r2, r3, #1
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d011      	beq.n	800b0c4 <HAL_UART_IRQHandler+0xec>
 800b0a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ba:	f043 0204 	orr.w	r2, r3, #4
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d011      	beq.n	800b0f4 <HAL_UART_IRQHandler+0x11c>
 800b0d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2204      	movs	r2, #4
 800b0e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ea:	f043 0202 	orr.w	r2, r3, #2
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f8:	f003 0308 	and.w	r3, r3, #8
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d017      	beq.n	800b130 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b104:	f003 0320 	and.w	r3, r3, #32
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d105      	bne.n	800b118 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b10c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b110:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2208      	movs	r2, #8
 800b11e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b126:	f043 0208 	orr.w	r2, r3, #8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d012      	beq.n	800b162 <HAL_UART_IRQHandler+0x18a>
 800b13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00c      	beq.n	800b162 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b158:	f043 0220 	orr.w	r2, r3, #32
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 81fd 	beq.w	800b568 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b16e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00d      	beq.n	800b196 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b17a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b17e:	f003 0320 	and.w	r3, r3, #32
 800b182:	2b00      	cmp	r3, #0
 800b184:	d007      	beq.n	800b196 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b19c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1aa:	2b40      	cmp	r3, #64	; 0x40
 800b1ac:	d005      	beq.n	800b1ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d04f      	beq.n	800b25a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 ff8e 	bl	800c0dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ca:	2b40      	cmp	r3, #64	; 0x40
 800b1cc:	d141      	bne.n	800b252 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1d9      	bne.n	800b1ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d013      	beq.n	800b24a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b226:	4a13      	ldr	r2, [pc, #76]	; (800b274 <HAL_UART_IRQHandler+0x29c>)
 800b228:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fa fda4 	bl	8005d7c <HAL_DMA_Abort_IT>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d017      	beq.n	800b26a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b244:	4610      	mov	r0, r2
 800b246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b248:	e00f      	b.n	800b26a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7f7 f9b4 	bl	80025b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b250:	e00b      	b.n	800b26a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7f7 f9b0 	bl	80025b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b258:	e007      	b.n	800b26a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7f7 f9ac 	bl	80025b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b268:	e17e      	b.n	800b568 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b26a:	bf00      	nop
    return;
 800b26c:	e17c      	b.n	800b568 <HAL_UART_IRQHandler+0x590>
 800b26e:	bf00      	nop
 800b270:	04000120 	.word	0x04000120
 800b274:	0800c389 	.word	0x0800c389

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	f040 814c 	bne.w	800b51a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b286:	f003 0310 	and.w	r3, r3, #16
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 8145 	beq.w	800b51a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b294:	f003 0310 	and.w	r3, r3, #16
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 813e 	beq.w	800b51a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2210      	movs	r2, #16
 800b2a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b0:	2b40      	cmp	r3, #64	; 0x40
 800b2b2:	f040 80b6 	bne.w	800b422 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 8150 	beq.w	800b56c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	f080 8148 	bcs.w	800b56c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f0:	f000 8086 	beq.w	800b400 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b300:	e853 3f00 	ldrex	r3, [r3]
 800b304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b30c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	461a      	mov	r2, r3
 800b31a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b31e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b322:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b32a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1da      	bne.n	800b2f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b348:	e853 3f00 	ldrex	r3, [r3]
 800b34c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b34e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b350:	f023 0301 	bic.w	r3, r3, #1
 800b354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3308      	adds	r3, #8
 800b35e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b362:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b366:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b368:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b36a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b36e:	e841 2300 	strex	r3, r2, [r1]
 800b372:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1e1      	bne.n	800b33e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	3308      	adds	r3, #8
 800b380:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b384:	e853 3f00 	ldrex	r3, [r3]
 800b388:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b38a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b38c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3308      	adds	r3, #8
 800b39a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b39e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e3      	bne.n	800b37a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3d0:	f023 0310 	bic.w	r3, r3, #16
 800b3d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	461a      	mov	r2, r3
 800b3de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3ea:	e841 2300 	strex	r3, r2, [r1]
 800b3ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1e4      	bne.n	800b3c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fa fc4e 	bl	8005c9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b412:	b29b      	uxth	r3, r3
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	b29b      	uxth	r3, r3
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f8c2 	bl	800b5a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b420:	e0a4      	b.n	800b56c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b42e:	b29b      	uxth	r3, r3
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 8096 	beq.w	800b570 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 8091 	beq.w	800b570 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b456:	e853 3f00 	ldrex	r3, [r3]
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b470:	647b      	str	r3, [r7, #68]	; 0x44
 800b472:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b474:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b478:	e841 2300 	strex	r3, r2, [r1]
 800b47c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1e4      	bne.n	800b44e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3308      	adds	r3, #8
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	e853 3f00 	ldrex	r3, [r3]
 800b492:	623b      	str	r3, [r7, #32]
   return(result);
 800b494:	6a3b      	ldr	r3, [r7, #32]
 800b496:	f023 0301 	bic.w	r3, r3, #1
 800b49a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4a8:	633a      	str	r2, [r7, #48]	; 0x30
 800b4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b0:	e841 2300 	strex	r3, r2, [r1]
 800b4b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e3      	bne.n	800b484 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2220      	movs	r2, #32
 800b4c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	e853 3f00 	ldrex	r3, [r3]
 800b4dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f023 0310 	bic.w	r3, r3, #16
 800b4e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b4f2:	61fb      	str	r3, [r7, #28]
 800b4f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f6:	69b9      	ldr	r1, [r7, #24]
 800b4f8:	69fa      	ldr	r2, [r7, #28]
 800b4fa:	e841 2300 	strex	r3, r2, [r1]
 800b4fe:	617b      	str	r3, [r7, #20]
   return(result);
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1e4      	bne.n	800b4d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2202      	movs	r2, #2
 800b50a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b50c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f846 	bl	800b5a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b518:	e02a      	b.n	800b570 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00e      	beq.n	800b544 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d008      	beq.n	800b544 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d01c      	beq.n	800b574 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	4798      	blx	r3
    }
    return;
 800b542:	e017      	b.n	800b574 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d012      	beq.n	800b576 <HAL_UART_IRQHandler+0x59e>
 800b550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00c      	beq.n	800b576 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 ff29 	bl	800c3b4 <UART_EndTransmit_IT>
    return;
 800b562:	e008      	b.n	800b576 <HAL_UART_IRQHandler+0x59e>
      return;
 800b564:	bf00      	nop
 800b566:	e006      	b.n	800b576 <HAL_UART_IRQHandler+0x59e>
    return;
 800b568:	bf00      	nop
 800b56a:	e004      	b.n	800b576 <HAL_UART_IRQHandler+0x59e>
      return;
 800b56c:	bf00      	nop
 800b56e:	e002      	b.n	800b576 <HAL_UART_IRQHandler+0x59e>
      return;
 800b570:	bf00      	nop
 800b572:	e000      	b.n	800b576 <HAL_UART_IRQHandler+0x59e>
    return;
 800b574:	bf00      	nop
  }

}
 800b576:	37e8      	adds	r7, #232	; 0xe8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	69db      	ldr	r3, [r3, #28]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	4ba6      	ldr	r3, [pc, #664]	; (800b880 <UART_SetConfig+0x2c4>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6812      	ldr	r2, [r2, #0]
 800b5ee:	6979      	ldr	r1, [r7, #20]
 800b5f0:	430b      	orrs	r3, r1
 800b5f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	430a      	orrs	r2, r1
 800b608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a1b      	ldr	r3, [r3, #32]
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a94      	ldr	r2, [pc, #592]	; (800b884 <UART_SetConfig+0x2c8>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d120      	bne.n	800b67a <UART_SetConfig+0xbe>
 800b638:	4b93      	ldr	r3, [pc, #588]	; (800b888 <UART_SetConfig+0x2cc>)
 800b63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b63e:	f003 0303 	and.w	r3, r3, #3
 800b642:	2b03      	cmp	r3, #3
 800b644:	d816      	bhi.n	800b674 <UART_SetConfig+0xb8>
 800b646:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <UART_SetConfig+0x90>)
 800b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64c:	0800b65d 	.word	0x0800b65d
 800b650:	0800b669 	.word	0x0800b669
 800b654:	0800b663 	.word	0x0800b663
 800b658:	0800b66f 	.word	0x0800b66f
 800b65c:	2301      	movs	r3, #1
 800b65e:	77fb      	strb	r3, [r7, #31]
 800b660:	e150      	b.n	800b904 <UART_SetConfig+0x348>
 800b662:	2302      	movs	r3, #2
 800b664:	77fb      	strb	r3, [r7, #31]
 800b666:	e14d      	b.n	800b904 <UART_SetConfig+0x348>
 800b668:	2304      	movs	r3, #4
 800b66a:	77fb      	strb	r3, [r7, #31]
 800b66c:	e14a      	b.n	800b904 <UART_SetConfig+0x348>
 800b66e:	2308      	movs	r3, #8
 800b670:	77fb      	strb	r3, [r7, #31]
 800b672:	e147      	b.n	800b904 <UART_SetConfig+0x348>
 800b674:	2310      	movs	r3, #16
 800b676:	77fb      	strb	r3, [r7, #31]
 800b678:	e144      	b.n	800b904 <UART_SetConfig+0x348>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a83      	ldr	r2, [pc, #524]	; (800b88c <UART_SetConfig+0x2d0>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d132      	bne.n	800b6ea <UART_SetConfig+0x12e>
 800b684:	4b80      	ldr	r3, [pc, #512]	; (800b888 <UART_SetConfig+0x2cc>)
 800b686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b68a:	f003 030c 	and.w	r3, r3, #12
 800b68e:	2b0c      	cmp	r3, #12
 800b690:	d828      	bhi.n	800b6e4 <UART_SetConfig+0x128>
 800b692:	a201      	add	r2, pc, #4	; (adr r2, 800b698 <UART_SetConfig+0xdc>)
 800b694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b698:	0800b6cd 	.word	0x0800b6cd
 800b69c:	0800b6e5 	.word	0x0800b6e5
 800b6a0:	0800b6e5 	.word	0x0800b6e5
 800b6a4:	0800b6e5 	.word	0x0800b6e5
 800b6a8:	0800b6d9 	.word	0x0800b6d9
 800b6ac:	0800b6e5 	.word	0x0800b6e5
 800b6b0:	0800b6e5 	.word	0x0800b6e5
 800b6b4:	0800b6e5 	.word	0x0800b6e5
 800b6b8:	0800b6d3 	.word	0x0800b6d3
 800b6bc:	0800b6e5 	.word	0x0800b6e5
 800b6c0:	0800b6e5 	.word	0x0800b6e5
 800b6c4:	0800b6e5 	.word	0x0800b6e5
 800b6c8:	0800b6df 	.word	0x0800b6df
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	77fb      	strb	r3, [r7, #31]
 800b6d0:	e118      	b.n	800b904 <UART_SetConfig+0x348>
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	77fb      	strb	r3, [r7, #31]
 800b6d6:	e115      	b.n	800b904 <UART_SetConfig+0x348>
 800b6d8:	2304      	movs	r3, #4
 800b6da:	77fb      	strb	r3, [r7, #31]
 800b6dc:	e112      	b.n	800b904 <UART_SetConfig+0x348>
 800b6de:	2308      	movs	r3, #8
 800b6e0:	77fb      	strb	r3, [r7, #31]
 800b6e2:	e10f      	b.n	800b904 <UART_SetConfig+0x348>
 800b6e4:	2310      	movs	r3, #16
 800b6e6:	77fb      	strb	r3, [r7, #31]
 800b6e8:	e10c      	b.n	800b904 <UART_SetConfig+0x348>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a68      	ldr	r2, [pc, #416]	; (800b890 <UART_SetConfig+0x2d4>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d120      	bne.n	800b736 <UART_SetConfig+0x17a>
 800b6f4:	4b64      	ldr	r3, [pc, #400]	; (800b888 <UART_SetConfig+0x2cc>)
 800b6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b6fe:	2b30      	cmp	r3, #48	; 0x30
 800b700:	d013      	beq.n	800b72a <UART_SetConfig+0x16e>
 800b702:	2b30      	cmp	r3, #48	; 0x30
 800b704:	d814      	bhi.n	800b730 <UART_SetConfig+0x174>
 800b706:	2b20      	cmp	r3, #32
 800b708:	d009      	beq.n	800b71e <UART_SetConfig+0x162>
 800b70a:	2b20      	cmp	r3, #32
 800b70c:	d810      	bhi.n	800b730 <UART_SetConfig+0x174>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d002      	beq.n	800b718 <UART_SetConfig+0x15c>
 800b712:	2b10      	cmp	r3, #16
 800b714:	d006      	beq.n	800b724 <UART_SetConfig+0x168>
 800b716:	e00b      	b.n	800b730 <UART_SetConfig+0x174>
 800b718:	2300      	movs	r3, #0
 800b71a:	77fb      	strb	r3, [r7, #31]
 800b71c:	e0f2      	b.n	800b904 <UART_SetConfig+0x348>
 800b71e:	2302      	movs	r3, #2
 800b720:	77fb      	strb	r3, [r7, #31]
 800b722:	e0ef      	b.n	800b904 <UART_SetConfig+0x348>
 800b724:	2304      	movs	r3, #4
 800b726:	77fb      	strb	r3, [r7, #31]
 800b728:	e0ec      	b.n	800b904 <UART_SetConfig+0x348>
 800b72a:	2308      	movs	r3, #8
 800b72c:	77fb      	strb	r3, [r7, #31]
 800b72e:	e0e9      	b.n	800b904 <UART_SetConfig+0x348>
 800b730:	2310      	movs	r3, #16
 800b732:	77fb      	strb	r3, [r7, #31]
 800b734:	e0e6      	b.n	800b904 <UART_SetConfig+0x348>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a56      	ldr	r2, [pc, #344]	; (800b894 <UART_SetConfig+0x2d8>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d120      	bne.n	800b782 <UART_SetConfig+0x1c6>
 800b740:	4b51      	ldr	r3, [pc, #324]	; (800b888 <UART_SetConfig+0x2cc>)
 800b742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b746:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b74a:	2bc0      	cmp	r3, #192	; 0xc0
 800b74c:	d013      	beq.n	800b776 <UART_SetConfig+0x1ba>
 800b74e:	2bc0      	cmp	r3, #192	; 0xc0
 800b750:	d814      	bhi.n	800b77c <UART_SetConfig+0x1c0>
 800b752:	2b80      	cmp	r3, #128	; 0x80
 800b754:	d009      	beq.n	800b76a <UART_SetConfig+0x1ae>
 800b756:	2b80      	cmp	r3, #128	; 0x80
 800b758:	d810      	bhi.n	800b77c <UART_SetConfig+0x1c0>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d002      	beq.n	800b764 <UART_SetConfig+0x1a8>
 800b75e:	2b40      	cmp	r3, #64	; 0x40
 800b760:	d006      	beq.n	800b770 <UART_SetConfig+0x1b4>
 800b762:	e00b      	b.n	800b77c <UART_SetConfig+0x1c0>
 800b764:	2300      	movs	r3, #0
 800b766:	77fb      	strb	r3, [r7, #31]
 800b768:	e0cc      	b.n	800b904 <UART_SetConfig+0x348>
 800b76a:	2302      	movs	r3, #2
 800b76c:	77fb      	strb	r3, [r7, #31]
 800b76e:	e0c9      	b.n	800b904 <UART_SetConfig+0x348>
 800b770:	2304      	movs	r3, #4
 800b772:	77fb      	strb	r3, [r7, #31]
 800b774:	e0c6      	b.n	800b904 <UART_SetConfig+0x348>
 800b776:	2308      	movs	r3, #8
 800b778:	77fb      	strb	r3, [r7, #31]
 800b77a:	e0c3      	b.n	800b904 <UART_SetConfig+0x348>
 800b77c:	2310      	movs	r3, #16
 800b77e:	77fb      	strb	r3, [r7, #31]
 800b780:	e0c0      	b.n	800b904 <UART_SetConfig+0x348>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a44      	ldr	r2, [pc, #272]	; (800b898 <UART_SetConfig+0x2dc>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d125      	bne.n	800b7d8 <UART_SetConfig+0x21c>
 800b78c:	4b3e      	ldr	r3, [pc, #248]	; (800b888 <UART_SetConfig+0x2cc>)
 800b78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b79a:	d017      	beq.n	800b7cc <UART_SetConfig+0x210>
 800b79c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7a0:	d817      	bhi.n	800b7d2 <UART_SetConfig+0x216>
 800b7a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7a6:	d00b      	beq.n	800b7c0 <UART_SetConfig+0x204>
 800b7a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ac:	d811      	bhi.n	800b7d2 <UART_SetConfig+0x216>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <UART_SetConfig+0x1fe>
 800b7b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7b6:	d006      	beq.n	800b7c6 <UART_SetConfig+0x20a>
 800b7b8:	e00b      	b.n	800b7d2 <UART_SetConfig+0x216>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	77fb      	strb	r3, [r7, #31]
 800b7be:	e0a1      	b.n	800b904 <UART_SetConfig+0x348>
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	77fb      	strb	r3, [r7, #31]
 800b7c4:	e09e      	b.n	800b904 <UART_SetConfig+0x348>
 800b7c6:	2304      	movs	r3, #4
 800b7c8:	77fb      	strb	r3, [r7, #31]
 800b7ca:	e09b      	b.n	800b904 <UART_SetConfig+0x348>
 800b7cc:	2308      	movs	r3, #8
 800b7ce:	77fb      	strb	r3, [r7, #31]
 800b7d0:	e098      	b.n	800b904 <UART_SetConfig+0x348>
 800b7d2:	2310      	movs	r3, #16
 800b7d4:	77fb      	strb	r3, [r7, #31]
 800b7d6:	e095      	b.n	800b904 <UART_SetConfig+0x348>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a2f      	ldr	r2, [pc, #188]	; (800b89c <UART_SetConfig+0x2e0>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d125      	bne.n	800b82e <UART_SetConfig+0x272>
 800b7e2:	4b29      	ldr	r3, [pc, #164]	; (800b888 <UART_SetConfig+0x2cc>)
 800b7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b7ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7f0:	d017      	beq.n	800b822 <UART_SetConfig+0x266>
 800b7f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7f6:	d817      	bhi.n	800b828 <UART_SetConfig+0x26c>
 800b7f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7fc:	d00b      	beq.n	800b816 <UART_SetConfig+0x25a>
 800b7fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b802:	d811      	bhi.n	800b828 <UART_SetConfig+0x26c>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d003      	beq.n	800b810 <UART_SetConfig+0x254>
 800b808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b80c:	d006      	beq.n	800b81c <UART_SetConfig+0x260>
 800b80e:	e00b      	b.n	800b828 <UART_SetConfig+0x26c>
 800b810:	2301      	movs	r3, #1
 800b812:	77fb      	strb	r3, [r7, #31]
 800b814:	e076      	b.n	800b904 <UART_SetConfig+0x348>
 800b816:	2302      	movs	r3, #2
 800b818:	77fb      	strb	r3, [r7, #31]
 800b81a:	e073      	b.n	800b904 <UART_SetConfig+0x348>
 800b81c:	2304      	movs	r3, #4
 800b81e:	77fb      	strb	r3, [r7, #31]
 800b820:	e070      	b.n	800b904 <UART_SetConfig+0x348>
 800b822:	2308      	movs	r3, #8
 800b824:	77fb      	strb	r3, [r7, #31]
 800b826:	e06d      	b.n	800b904 <UART_SetConfig+0x348>
 800b828:	2310      	movs	r3, #16
 800b82a:	77fb      	strb	r3, [r7, #31]
 800b82c:	e06a      	b.n	800b904 <UART_SetConfig+0x348>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a1b      	ldr	r2, [pc, #108]	; (800b8a0 <UART_SetConfig+0x2e4>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d138      	bne.n	800b8aa <UART_SetConfig+0x2ee>
 800b838:	4b13      	ldr	r3, [pc, #76]	; (800b888 <UART_SetConfig+0x2cc>)
 800b83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b83e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b846:	d017      	beq.n	800b878 <UART_SetConfig+0x2bc>
 800b848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b84c:	d82a      	bhi.n	800b8a4 <UART_SetConfig+0x2e8>
 800b84e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b852:	d00b      	beq.n	800b86c <UART_SetConfig+0x2b0>
 800b854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b858:	d824      	bhi.n	800b8a4 <UART_SetConfig+0x2e8>
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <UART_SetConfig+0x2aa>
 800b85e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b862:	d006      	beq.n	800b872 <UART_SetConfig+0x2b6>
 800b864:	e01e      	b.n	800b8a4 <UART_SetConfig+0x2e8>
 800b866:	2300      	movs	r3, #0
 800b868:	77fb      	strb	r3, [r7, #31]
 800b86a:	e04b      	b.n	800b904 <UART_SetConfig+0x348>
 800b86c:	2302      	movs	r3, #2
 800b86e:	77fb      	strb	r3, [r7, #31]
 800b870:	e048      	b.n	800b904 <UART_SetConfig+0x348>
 800b872:	2304      	movs	r3, #4
 800b874:	77fb      	strb	r3, [r7, #31]
 800b876:	e045      	b.n	800b904 <UART_SetConfig+0x348>
 800b878:	2308      	movs	r3, #8
 800b87a:	77fb      	strb	r3, [r7, #31]
 800b87c:	e042      	b.n	800b904 <UART_SetConfig+0x348>
 800b87e:	bf00      	nop
 800b880:	efff69f3 	.word	0xefff69f3
 800b884:	40011000 	.word	0x40011000
 800b888:	40023800 	.word	0x40023800
 800b88c:	40004400 	.word	0x40004400
 800b890:	40004800 	.word	0x40004800
 800b894:	40004c00 	.word	0x40004c00
 800b898:	40005000 	.word	0x40005000
 800b89c:	40011400 	.word	0x40011400
 800b8a0:	40007800 	.word	0x40007800
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	77fb      	strb	r3, [r7, #31]
 800b8a8:	e02c      	b.n	800b904 <UART_SetConfig+0x348>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a72      	ldr	r2, [pc, #456]	; (800ba78 <UART_SetConfig+0x4bc>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d125      	bne.n	800b900 <UART_SetConfig+0x344>
 800b8b4:	4b71      	ldr	r3, [pc, #452]	; (800ba7c <UART_SetConfig+0x4c0>)
 800b8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b8be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b8c2:	d017      	beq.n	800b8f4 <UART_SetConfig+0x338>
 800b8c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b8c8:	d817      	bhi.n	800b8fa <UART_SetConfig+0x33e>
 800b8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ce:	d00b      	beq.n	800b8e8 <UART_SetConfig+0x32c>
 800b8d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8d4:	d811      	bhi.n	800b8fa <UART_SetConfig+0x33e>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d003      	beq.n	800b8e2 <UART_SetConfig+0x326>
 800b8da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8de:	d006      	beq.n	800b8ee <UART_SetConfig+0x332>
 800b8e0:	e00b      	b.n	800b8fa <UART_SetConfig+0x33e>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	77fb      	strb	r3, [r7, #31]
 800b8e6:	e00d      	b.n	800b904 <UART_SetConfig+0x348>
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	77fb      	strb	r3, [r7, #31]
 800b8ec:	e00a      	b.n	800b904 <UART_SetConfig+0x348>
 800b8ee:	2304      	movs	r3, #4
 800b8f0:	77fb      	strb	r3, [r7, #31]
 800b8f2:	e007      	b.n	800b904 <UART_SetConfig+0x348>
 800b8f4:	2308      	movs	r3, #8
 800b8f6:	77fb      	strb	r3, [r7, #31]
 800b8f8:	e004      	b.n	800b904 <UART_SetConfig+0x348>
 800b8fa:	2310      	movs	r3, #16
 800b8fc:	77fb      	strb	r3, [r7, #31]
 800b8fe:	e001      	b.n	800b904 <UART_SetConfig+0x348>
 800b900:	2310      	movs	r3, #16
 800b902:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b90c:	d15b      	bne.n	800b9c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b90e:	7ffb      	ldrb	r3, [r7, #31]
 800b910:	2b08      	cmp	r3, #8
 800b912:	d828      	bhi.n	800b966 <UART_SetConfig+0x3aa>
 800b914:	a201      	add	r2, pc, #4	; (adr r2, 800b91c <UART_SetConfig+0x360>)
 800b916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91a:	bf00      	nop
 800b91c:	0800b941 	.word	0x0800b941
 800b920:	0800b949 	.word	0x0800b949
 800b924:	0800b951 	.word	0x0800b951
 800b928:	0800b967 	.word	0x0800b967
 800b92c:	0800b957 	.word	0x0800b957
 800b930:	0800b967 	.word	0x0800b967
 800b934:	0800b967 	.word	0x0800b967
 800b938:	0800b967 	.word	0x0800b967
 800b93c:	0800b95f 	.word	0x0800b95f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b940:	f7fc f900 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800b944:	61b8      	str	r0, [r7, #24]
        break;
 800b946:	e013      	b.n	800b970 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b948:	f7fc f910 	bl	8007b6c <HAL_RCC_GetPCLK2Freq>
 800b94c:	61b8      	str	r0, [r7, #24]
        break;
 800b94e:	e00f      	b.n	800b970 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b950:	4b4b      	ldr	r3, [pc, #300]	; (800ba80 <UART_SetConfig+0x4c4>)
 800b952:	61bb      	str	r3, [r7, #24]
        break;
 800b954:	e00c      	b.n	800b970 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b956:	f7fc f823 	bl	80079a0 <HAL_RCC_GetSysClockFreq>
 800b95a:	61b8      	str	r0, [r7, #24]
        break;
 800b95c:	e008      	b.n	800b970 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b95e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b962:	61bb      	str	r3, [r7, #24]
        break;
 800b964:	e004      	b.n	800b970 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b966:	2300      	movs	r3, #0
 800b968:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	77bb      	strb	r3, [r7, #30]
        break;
 800b96e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d074      	beq.n	800ba60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	005a      	lsls	r2, r3, #1
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	085b      	lsrs	r3, r3, #1
 800b980:	441a      	add	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	fbb2 f3f3 	udiv	r3, r2, r3
 800b98a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2b0f      	cmp	r3, #15
 800b990:	d916      	bls.n	800b9c0 <UART_SetConfig+0x404>
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b998:	d212      	bcs.n	800b9c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	f023 030f 	bic.w	r3, r3, #15
 800b9a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	085b      	lsrs	r3, r3, #1
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	f003 0307 	and.w	r3, r3, #7
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	89fb      	ldrh	r3, [r7, #14]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	89fa      	ldrh	r2, [r7, #14]
 800b9bc:	60da      	str	r2, [r3, #12]
 800b9be:	e04f      	b.n	800ba60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	77bb      	strb	r3, [r7, #30]
 800b9c4:	e04c      	b.n	800ba60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9c6:	7ffb      	ldrb	r3, [r7, #31]
 800b9c8:	2b08      	cmp	r3, #8
 800b9ca:	d828      	bhi.n	800ba1e <UART_SetConfig+0x462>
 800b9cc:	a201      	add	r2, pc, #4	; (adr r2, 800b9d4 <UART_SetConfig+0x418>)
 800b9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d2:	bf00      	nop
 800b9d4:	0800b9f9 	.word	0x0800b9f9
 800b9d8:	0800ba01 	.word	0x0800ba01
 800b9dc:	0800ba09 	.word	0x0800ba09
 800b9e0:	0800ba1f 	.word	0x0800ba1f
 800b9e4:	0800ba0f 	.word	0x0800ba0f
 800b9e8:	0800ba1f 	.word	0x0800ba1f
 800b9ec:	0800ba1f 	.word	0x0800ba1f
 800b9f0:	0800ba1f 	.word	0x0800ba1f
 800b9f4:	0800ba17 	.word	0x0800ba17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9f8:	f7fc f8a4 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800b9fc:	61b8      	str	r0, [r7, #24]
        break;
 800b9fe:	e013      	b.n	800ba28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba00:	f7fc f8b4 	bl	8007b6c <HAL_RCC_GetPCLK2Freq>
 800ba04:	61b8      	str	r0, [r7, #24]
        break;
 800ba06:	e00f      	b.n	800ba28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba08:	4b1d      	ldr	r3, [pc, #116]	; (800ba80 <UART_SetConfig+0x4c4>)
 800ba0a:	61bb      	str	r3, [r7, #24]
        break;
 800ba0c:	e00c      	b.n	800ba28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba0e:	f7fb ffc7 	bl	80079a0 <HAL_RCC_GetSysClockFreq>
 800ba12:	61b8      	str	r0, [r7, #24]
        break;
 800ba14:	e008      	b.n	800ba28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba1a:	61bb      	str	r3, [r7, #24]
        break;
 800ba1c:	e004      	b.n	800ba28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	77bb      	strb	r3, [r7, #30]
        break;
 800ba26:	bf00      	nop
    }

    if (pclk != 0U)
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d018      	beq.n	800ba60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	085a      	lsrs	r2, r3, #1
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	441a      	add	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	2b0f      	cmp	r3, #15
 800ba46:	d909      	bls.n	800ba5c <UART_SetConfig+0x4a0>
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba4e:	d205      	bcs.n	800ba5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	60da      	str	r2, [r3, #12]
 800ba5a:	e001      	b.n	800ba60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ba6c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3720      	adds	r7, #32
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	40007c00 	.word	0x40007c00
 800ba7c:	40023800 	.word	0x40023800
 800ba80:	00f42400 	.word	0x00f42400

0800ba84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	f003 0301 	and.w	r3, r3, #1
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00a      	beq.n	800baae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00a      	beq.n	800bad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	430a      	orrs	r2, r1
 800bace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00a      	beq.n	800baf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	f003 0308 	and.w	r3, r3, #8
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	f003 0310 	and.w	r3, r3, #16
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00a      	beq.n	800bb36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	f003 0320 	and.w	r3, r3, #32
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	430a      	orrs	r2, r1
 800bb56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d01a      	beq.n	800bb9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb82:	d10a      	bne.n	800bb9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	430a      	orrs	r2, r1
 800bb98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00a      	beq.n	800bbbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	605a      	str	r2, [r3, #4]
  }
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbd8:	f7f9 fe40 	bl	800585c <HAL_GetTick>
 800bbdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0308 	and.w	r3, r3, #8
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d10e      	bne.n	800bc0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f81b 	bl	800bc36 <UART_WaitOnFlagUntilTimeout>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc06:	2303      	movs	r3, #3
 800bc08:	e011      	b.n	800bc2e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2220      	movs	r2, #32
 800bc0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b09c      	sub	sp, #112	; 0x70
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	603b      	str	r3, [r7, #0]
 800bc42:	4613      	mov	r3, r2
 800bc44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc46:	e0a7      	b.n	800bd98 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4e:	f000 80a3 	beq.w	800bd98 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc52:	f7f9 fe03 	bl	800585c <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d302      	bcc.n	800bc68 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d13f      	bne.n	800bce8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc7c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc8e:	e841 2300 	strex	r3, r2, [r1]
 800bc92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1e6      	bne.n	800bc68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3308      	adds	r3, #8
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca4:	e853 3f00 	ldrex	r3, [r3]
 800bca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcac:	f023 0301 	bic.w	r3, r3, #1
 800bcb0:	663b      	str	r3, [r7, #96]	; 0x60
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcba:	64ba      	str	r2, [r7, #72]	; 0x48
 800bcbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcc2:	e841 2300 	strex	r3, r2, [r1]
 800bcc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e5      	bne.n	800bc9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2220      	movs	r2, #32
 800bcd2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e068      	b.n	800bdba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0304 	and.w	r3, r3, #4
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d050      	beq.n	800bd98 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd04:	d148      	bne.n	800bd98 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	e853 3f00 	ldrex	r3, [r3]
 800bd1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd2e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd36:	e841 2300 	strex	r3, r2, [r1]
 800bd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1e6      	bne.n	800bd10 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3308      	adds	r3, #8
 800bd48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	e853 3f00 	ldrex	r3, [r3]
 800bd50:	613b      	str	r3, [r7, #16]
   return(result);
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	f023 0301 	bic.w	r3, r3, #1
 800bd58:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	3308      	adds	r3, #8
 800bd60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd62:	623a      	str	r2, [r7, #32]
 800bd64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd66:	69f9      	ldr	r1, [r7, #28]
 800bd68:	6a3a      	ldr	r2, [r7, #32]
 800bd6a:	e841 2300 	strex	r3, r2, [r1]
 800bd6e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1e5      	bne.n	800bd42 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2220      	movs	r2, #32
 800bd7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2220      	movs	r2, #32
 800bd80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2220      	movs	r2, #32
 800bd88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bd94:	2303      	movs	r3, #3
 800bd96:	e010      	b.n	800bdba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	69da      	ldr	r2, [r3, #28]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	4013      	ands	r3, r2
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	bf0c      	ite	eq
 800bda8:	2301      	moveq	r3, #1
 800bdaa:	2300      	movne	r3, #0
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	461a      	mov	r2, r3
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	f43f af48 	beq.w	800bc48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3770      	adds	r7, #112	; 0x70
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
	...

0800bdc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b097      	sub	sp, #92	; 0x5c
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	88fa      	ldrh	r2, [r7, #6]
 800bddc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	88fa      	ldrh	r2, [r7, #6]
 800bde4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf6:	d10e      	bne.n	800be16 <UART_Start_Receive_IT+0x52>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d105      	bne.n	800be0c <UART_Start_Receive_IT+0x48>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f240 12ff 	movw	r2, #511	; 0x1ff
 800be06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be0a:	e02d      	b.n	800be68 <UART_Start_Receive_IT+0xa4>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	22ff      	movs	r2, #255	; 0xff
 800be10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be14:	e028      	b.n	800be68 <UART_Start_Receive_IT+0xa4>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10d      	bne.n	800be3a <UART_Start_Receive_IT+0x76>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d104      	bne.n	800be30 <UART_Start_Receive_IT+0x6c>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	22ff      	movs	r2, #255	; 0xff
 800be2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be2e:	e01b      	b.n	800be68 <UART_Start_Receive_IT+0xa4>
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	227f      	movs	r2, #127	; 0x7f
 800be34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be38:	e016      	b.n	800be68 <UART_Start_Receive_IT+0xa4>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be42:	d10d      	bne.n	800be60 <UART_Start_Receive_IT+0x9c>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d104      	bne.n	800be56 <UART_Start_Receive_IT+0x92>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	227f      	movs	r2, #127	; 0x7f
 800be50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be54:	e008      	b.n	800be68 <UART_Start_Receive_IT+0xa4>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	223f      	movs	r2, #63	; 0x3f
 800be5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be5e:	e003      	b.n	800be68 <UART_Start_Receive_IT+0xa4>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2222      	movs	r2, #34	; 0x22
 800be74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	3308      	adds	r3, #8
 800be7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be82:	e853 3f00 	ldrex	r3, [r3]
 800be86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8a:	f043 0301 	orr.w	r3, r3, #1
 800be8e:	657b      	str	r3, [r7, #84]	; 0x54
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3308      	adds	r3, #8
 800be96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be98:	64ba      	str	r2, [r7, #72]	; 0x48
 800be9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bea0:	e841 2300 	strex	r3, r2, [r1]
 800bea4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1e5      	bne.n	800be78 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beb4:	d107      	bne.n	800bec6 <UART_Start_Receive_IT+0x102>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d103      	bne.n	800bec6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	4a21      	ldr	r2, [pc, #132]	; (800bf48 <UART_Start_Receive_IT+0x184>)
 800bec2:	669a      	str	r2, [r3, #104]	; 0x68
 800bec4:	e002      	b.n	800becc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	4a20      	ldr	r2, [pc, #128]	; (800bf4c <UART_Start_Receive_IT+0x188>)
 800beca:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d019      	beq.n	800bf08 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef2:	637b      	str	r3, [r7, #52]	; 0x34
 800bef4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e6      	bne.n	800bed4 <UART_Start_Receive_IT+0x110>
 800bf06:	e018      	b.n	800bf3a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	613b      	str	r3, [r7, #16]
   return(result);
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f043 0320 	orr.w	r3, r3, #32
 800bf1c:	653b      	str	r3, [r7, #80]	; 0x50
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf26:	623b      	str	r3, [r7, #32]
 800bf28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	69f9      	ldr	r1, [r7, #28]
 800bf2c:	6a3a      	ldr	r2, [r7, #32]
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e6      	bne.n	800bf08 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	375c      	adds	r7, #92	; 0x5c
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	0800c56f 	.word	0x0800c56f
 800bf4c:	0800c409 	.word	0x0800c409

0800bf50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b096      	sub	sp, #88	; 0x58
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	88fa      	ldrh	r2, [r7, #6]
 800bf68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2222      	movs	r2, #34	; 0x22
 800bf78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d028      	beq.n	800bfd6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf88:	4a3e      	ldr	r2, [pc, #248]	; (800c084 <UART_Start_Receive_DMA+0x134>)
 800bf8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf90:	4a3d      	ldr	r2, [pc, #244]	; (800c088 <UART_Start_Receive_DMA+0x138>)
 800bf92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf98:	4a3c      	ldr	r2, [pc, #240]	; (800c08c <UART_Start_Receive_DMA+0x13c>)
 800bf9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3324      	adds	r3, #36	; 0x24
 800bfae:	4619      	mov	r1, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	88fb      	ldrh	r3, [r7, #6]
 800bfb8:	f7f9 fe10 	bl	8005bdc <HAL_DMA_Start_IT>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d009      	beq.n	800bfd6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2210      	movs	r2, #16
 800bfc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2220      	movs	r2, #32
 800bfce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e051      	b.n	800c07a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d018      	beq.n	800c010 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe6:	e853 3f00 	ldrex	r3, [r3]
 800bfea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bff2:	657b      	str	r3, [r7, #84]	; 0x54
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	461a      	mov	r2, r3
 800bffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bffc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bffe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c000:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c004:	e841 2300 	strex	r3, r2, [r1]
 800c008:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1e6      	bne.n	800bfde <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3308      	adds	r3, #8
 800c016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01a:	e853 3f00 	ldrex	r3, [r3]
 800c01e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	f043 0301 	orr.w	r3, r3, #1
 800c026:	653b      	str	r3, [r7, #80]	; 0x50
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3308      	adds	r3, #8
 800c02e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c030:	637a      	str	r2, [r7, #52]	; 0x34
 800c032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c034:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c038:	e841 2300 	strex	r3, r2, [r1]
 800c03c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1e5      	bne.n	800c010 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3308      	adds	r3, #8
 800c04a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	e853 3f00 	ldrex	r3, [r3]
 800c052:	613b      	str	r3, [r7, #16]
   return(result);
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c05a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	3308      	adds	r3, #8
 800c062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c064:	623a      	str	r2, [r7, #32]
 800c066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c068:	69f9      	ldr	r1, [r7, #28]
 800c06a:	6a3a      	ldr	r2, [r7, #32]
 800c06c:	e841 2300 	strex	r3, r2, [r1]
 800c070:	61bb      	str	r3, [r7, #24]
   return(result);
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e5      	bne.n	800c044 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3758      	adds	r7, #88	; 0x58
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	0800c1a5 	.word	0x0800c1a5
 800c088:	0800c2cd 	.word	0x0800c2cd
 800c08c:	0800c30b 	.word	0x0800c30b

0800c090 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c090:	b480      	push	{r7}
 800c092:	b089      	sub	sp, #36	; 0x24
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c0ac:	61fb      	str	r3, [r7, #28]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	61bb      	str	r3, [r7, #24]
 800c0b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	6979      	ldr	r1, [r7, #20]
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	e841 2300 	strex	r3, r2, [r1]
 800c0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e6      	bne.n	800c098 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2220      	movs	r2, #32
 800c0ce:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c0d0:	bf00      	nop
 800c0d2:	3724      	adds	r7, #36	; 0x24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b095      	sub	sp, #84	; 0x54
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c102:	643b      	str	r3, [r7, #64]	; 0x40
 800c104:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c106:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1e6      	bne.n	800c0e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3308      	adds	r3, #8
 800c11c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	6a3b      	ldr	r3, [r7, #32]
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	61fb      	str	r3, [r7, #28]
   return(result);
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	f023 0301 	bic.w	r3, r3, #1
 800c12c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3308      	adds	r3, #8
 800c134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c136:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c138:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c13c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e5      	bne.n	800c116 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d118      	bne.n	800c184 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f023 0310 	bic.w	r3, r3, #16
 800c166:	647b      	str	r3, [r7, #68]	; 0x44
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	461a      	mov	r2, r3
 800c16e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c170:	61bb      	str	r3, [r7, #24]
 800c172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	6979      	ldr	r1, [r7, #20]
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	613b      	str	r3, [r7, #16]
   return(result);
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e6      	bne.n	800c152 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2220      	movs	r2, #32
 800c188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c198:	bf00      	nop
 800c19a:	3754      	adds	r7, #84	; 0x54
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b09c      	sub	sp, #112	; 0x70
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ba:	d071      	beq.n	800c2a0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c1bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1cc:	e853 3f00 	ldrex	r3, [r3]
 800c1d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1ea:	e841 2300 	strex	r3, r2, [r1]
 800c1ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1e6      	bne.n	800c1c4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	e853 3f00 	ldrex	r3, [r3]
 800c204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c208:	f023 0301 	bic.w	r3, r3, #1
 800c20c:	667b      	str	r3, [r7, #100]	; 0x64
 800c20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3308      	adds	r3, #8
 800c214:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c216:	647a      	str	r2, [r7, #68]	; 0x44
 800c218:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c21c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c21e:	e841 2300 	strex	r3, r2, [r1]
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1e5      	bne.n	800c1f6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3308      	adds	r3, #8
 800c230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	e853 3f00 	ldrex	r3, [r3]
 800c238:	623b      	str	r3, [r7, #32]
   return(result);
 800c23a:	6a3b      	ldr	r3, [r7, #32]
 800c23c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c240:	663b      	str	r3, [r7, #96]	; 0x60
 800c242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	3308      	adds	r3, #8
 800c248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c24a:	633a      	str	r2, [r7, #48]	; 0x30
 800c24c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c252:	e841 2300 	strex	r3, r2, [r1]
 800c256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1e5      	bne.n	800c22a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c260:	2220      	movs	r2, #32
 800c262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d118      	bne.n	800c2a0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c26e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f023 0310 	bic.w	r3, r3, #16
 800c282:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	461a      	mov	r2, r3
 800c28a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	69b9      	ldr	r1, [r7, #24]
 800c292:	69fa      	ldr	r2, [r7, #28]
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	617b      	str	r3, [r7, #20]
   return(result);
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e6      	bne.n	800c26e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d107      	bne.n	800c2be <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c2b8:	f7ff f974 	bl	800b5a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2bc:	e002      	b.n	800c2c4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c2be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c2c0:	f7f6 f89a 	bl	80023f8 <HAL_UART_RxCpltCallback>
}
 800c2c4:	bf00      	nop
 800c2c6:	3770      	adds	r7, #112	; 0x70
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d109      	bne.n	800c2fc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c2ee:	085b      	lsrs	r3, r3, #1
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff f955 	bl	800b5a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2fa:	e002      	b.n	800c302 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f7ff f947 	bl	800b590 <HAL_UART_RxHalfCpltCallback>
}
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b086      	sub	sp, #24
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c316:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c31c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c324:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c330:	2b80      	cmp	r3, #128	; 0x80
 800c332:	d109      	bne.n	800c348 <UART_DMAError+0x3e>
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	2b21      	cmp	r3, #33	; 0x21
 800c338:	d106      	bne.n	800c348 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2200      	movs	r2, #0
 800c33e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c342:	6978      	ldr	r0, [r7, #20]
 800c344:	f7ff fea4 	bl	800c090 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c352:	2b40      	cmp	r3, #64	; 0x40
 800c354:	d109      	bne.n	800c36a <UART_DMAError+0x60>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b22      	cmp	r3, #34	; 0x22
 800c35a:	d106      	bne.n	800c36a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2200      	movs	r2, #0
 800c360:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c364:	6978      	ldr	r0, [r7, #20]
 800c366:	f7ff feb9 	bl	800c0dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c370:	f043 0210 	orr.w	r2, r3, #16
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c37a:	6978      	ldr	r0, [r7, #20]
 800c37c:	f7f6 f91c 	bl	80025b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c380:	bf00      	nop
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f7f6 f906 	bl	80025b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3ac:	bf00      	nop
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	e853 3f00 	ldrex	r3, [r3]
 800c3c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3d0:	61fb      	str	r3, [r7, #28]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	61bb      	str	r3, [r7, #24]
 800c3dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3de:	6979      	ldr	r1, [r7, #20]
 800c3e0:	69ba      	ldr	r2, [r7, #24]
 800c3e2:	e841 2300 	strex	r3, r2, [r1]
 800c3e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1e6      	bne.n	800c3bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2220      	movs	r2, #32
 800c3f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff f8be 	bl	800b57c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c400:	bf00      	nop
 800c402:	3720      	adds	r7, #32
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b096      	sub	sp, #88	; 0x58
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c416:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c420:	2b22      	cmp	r3, #34	; 0x22
 800c422:	f040 8098 	bne.w	800c556 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c430:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c434:	b2d9      	uxtb	r1, r3
 800c436:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c440:	400a      	ands	r2, r1
 800c442:	b2d2      	uxtb	r2, r2
 800c444:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c456:	b29b      	uxth	r3, r3
 800c458:	3b01      	subs	r3, #1
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c468:	b29b      	uxth	r3, r3
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d17b      	bne.n	800c566 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	e853 3f00 	ldrex	r3, [r3]
 800c47a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c482:	653b      	str	r3, [r7, #80]	; 0x50
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c48c:	647b      	str	r3, [r7, #68]	; 0x44
 800c48e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c494:	e841 2300 	strex	r3, r2, [r1]
 800c498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e6      	bne.n	800c46e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3308      	adds	r3, #8
 800c4a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	e853 3f00 	ldrex	r3, [r3]
 800c4ae:	623b      	str	r3, [r7, #32]
   return(result);
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	f023 0301 	bic.w	r3, r3, #1
 800c4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3308      	adds	r3, #8
 800c4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4c0:	633a      	str	r2, [r7, #48]	; 0x30
 800c4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c8:	e841 2300 	strex	r3, r2, [r1]
 800c4cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1e5      	bne.n	800c4a0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2220      	movs	r2, #32
 800c4d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d12e      	bne.n	800c54e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	e853 3f00 	ldrex	r3, [r3]
 800c502:	60fb      	str	r3, [r7, #12]
   return(result);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f023 0310 	bic.w	r3, r3, #16
 800c50a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	461a      	mov	r2, r3
 800c512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c514:	61fb      	str	r3, [r7, #28]
 800c516:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	69b9      	ldr	r1, [r7, #24]
 800c51a:	69fa      	ldr	r2, [r7, #28]
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	617b      	str	r3, [r7, #20]
   return(result);
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e6      	bne.n	800c4f6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	69db      	ldr	r3, [r3, #28]
 800c52e:	f003 0310 	and.w	r3, r3, #16
 800c532:	2b10      	cmp	r3, #16
 800c534:	d103      	bne.n	800c53e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2210      	movs	r2, #16
 800c53c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff f82c 	bl	800b5a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c54c:	e00b      	b.n	800c566 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7f5 ff52 	bl	80023f8 <HAL_UART_RxCpltCallback>
}
 800c554:	e007      	b.n	800c566 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	699a      	ldr	r2, [r3, #24]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f042 0208 	orr.w	r2, r2, #8
 800c564:	619a      	str	r2, [r3, #24]
}
 800c566:	bf00      	nop
 800c568:	3758      	adds	r7, #88	; 0x58
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b096      	sub	sp, #88	; 0x58
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c57c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c586:	2b22      	cmp	r3, #34	; 0x22
 800c588:	f040 8098 	bne.w	800c6bc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c592:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c59a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c59c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c5a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5aa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b0:	1c9a      	adds	r2, r3, #2
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d17b      	bne.n	800c6cc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5dc:	e853 3f00 	ldrex	r3, [r3]
 800c5e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f2:	643b      	str	r3, [r7, #64]	; 0x40
 800c5f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5fa:	e841 2300 	strex	r3, r2, [r1]
 800c5fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1e6      	bne.n	800c5d4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3308      	adds	r3, #8
 800c60c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	e853 3f00 	ldrex	r3, [r3]
 800c614:	61fb      	str	r3, [r7, #28]
   return(result);
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	f023 0301 	bic.w	r3, r3, #1
 800c61c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3308      	adds	r3, #8
 800c624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c626:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c62c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62e:	e841 2300 	strex	r3, r2, [r1]
 800c632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1e5      	bne.n	800c606 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2220      	movs	r2, #32
 800c63e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c652:	2b01      	cmp	r3, #1
 800c654:	d12e      	bne.n	800c6b4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	e853 3f00 	ldrex	r3, [r3]
 800c668:	60bb      	str	r3, [r7, #8]
   return(result);
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	f023 0310 	bic.w	r3, r3, #16
 800c670:	647b      	str	r3, [r7, #68]	; 0x44
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	461a      	mov	r2, r3
 800c678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c67a:	61bb      	str	r3, [r7, #24]
 800c67c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67e:	6979      	ldr	r1, [r7, #20]
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	e841 2300 	strex	r3, r2, [r1]
 800c686:	613b      	str	r3, [r7, #16]
   return(result);
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1e6      	bne.n	800c65c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	69db      	ldr	r3, [r3, #28]
 800c694:	f003 0310 	and.w	r3, r3, #16
 800c698:	2b10      	cmp	r3, #16
 800c69a:	d103      	bne.n	800c6a4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2210      	movs	r2, #16
 800c6a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7fe ff79 	bl	800b5a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6b2:	e00b      	b.n	800c6cc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f7f5 fe9f 	bl	80023f8 <HAL_UART_RxCpltCallback>
}
 800c6ba:	e007      	b.n	800c6cc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	699a      	ldr	r2, [r3, #24]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f042 0208 	orr.w	r2, r2, #8
 800c6ca:	619a      	str	r2, [r3, #24]
}
 800c6cc:	bf00      	nop
 800c6ce:	3758      	adds	r7, #88	; 0x58
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c6e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6e6:	2b84      	cmp	r3, #132	; 0x84
 800c6e8:	d005      	beq.n	800c6f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c6ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	3303      	adds	r3, #3
 800c6f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c70a:	f3ef 8305 	mrs	r3, IPSR
 800c70e:	607b      	str	r3, [r7, #4]
  return(result);
 800c710:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c712:	2b00      	cmp	r3, #0
 800c714:	bf14      	ite	ne
 800c716:	2301      	movne	r3, #1
 800c718:	2300      	moveq	r3, #0
 800c71a:	b2db      	uxtb	r3, r3
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c72c:	f001 fa38 	bl	800dba0 <vTaskStartScheduler>
  
  return osOK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	bd80      	pop	{r7, pc}

0800c736 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c736:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c738:	b089      	sub	sp, #36	; 0x24
 800c73a:	af04      	add	r7, sp, #16
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	695b      	ldr	r3, [r3, #20]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d020      	beq.n	800c78a <osThreadCreate+0x54>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d01c      	beq.n	800c78a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685c      	ldr	r4, [r3, #4]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	691e      	ldr	r6, [r3, #16]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff ffb6 	bl	800c6d4 <makeFreeRtosPriority>
 800c768:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c772:	9202      	str	r2, [sp, #8]
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	9100      	str	r1, [sp, #0]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	4632      	mov	r2, r6
 800c77c:	4629      	mov	r1, r5
 800c77e:	4620      	mov	r0, r4
 800c780:	f001 f834 	bl	800d7ec <xTaskCreateStatic>
 800c784:	4603      	mov	r3, r0
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	e01c      	b.n	800c7c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685c      	ldr	r4, [r3, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c796:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff ff98 	bl	800c6d4 <makeFreeRtosPriority>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	f107 030c 	add.w	r3, r7, #12
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	9200      	str	r2, [sp, #0]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	4632      	mov	r2, r6
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f001 f87c 	bl	800d8b2 <xTaskCreate>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d001      	beq.n	800c7c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	e000      	b.n	800c7c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b084      	sub	sp, #16
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <osDelay+0x16>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	e000      	b.n	800c7e6 <osDelay+0x18>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f001 f9a4 	bl	800db34 <vTaskDelay>
  
  return osOK;
 800c7ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b082      	sub	sp, #8
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d007      	beq.n	800c816 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	4619      	mov	r1, r3
 800c80c:	2001      	movs	r0, #1
 800c80e:	f000 fb77 	bl	800cf00 <xQueueCreateMutexStatic>
 800c812:	4603      	mov	r3, r0
 800c814:	e003      	b.n	800c81e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c816:	2001      	movs	r0, #1
 800c818:	f000 fb5a 	bl	800ced0 <xQueueCreateMutex>
 800c81c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c832:	2300      	movs	r3, #0
 800c834:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d101      	bne.n	800c840 <osMutexWait+0x18>
    return osErrorParameter;
 800c83c:	2380      	movs	r3, #128	; 0x80
 800c83e:	e03a      	b.n	800c8b6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84a:	d103      	bne.n	800c854 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c84c:	f04f 33ff 	mov.w	r3, #4294967295
 800c850:	60fb      	str	r3, [r7, #12]
 800c852:	e009      	b.n	800c868 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d006      	beq.n	800c868 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <osMutexWait+0x40>
      ticks = 1;
 800c864:	2301      	movs	r3, #1
 800c866:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c868:	f7ff ff4c 	bl	800c704 <inHandlerMode>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d017      	beq.n	800c8a2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c872:	f107 0308 	add.w	r3, r7, #8
 800c876:	461a      	mov	r2, r3
 800c878:	2100      	movs	r1, #0
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fde8 	bl	800d450 <xQueueReceiveFromISR>
 800c880:	4603      	mov	r3, r0
 800c882:	2b01      	cmp	r3, #1
 800c884:	d001      	beq.n	800c88a <osMutexWait+0x62>
      return osErrorOS;
 800c886:	23ff      	movs	r3, #255	; 0xff
 800c888:	e015      	b.n	800c8b6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d011      	beq.n	800c8b4 <osMutexWait+0x8c>
 800c890:	4b0b      	ldr	r3, [pc, #44]	; (800c8c0 <osMutexWait+0x98>)
 800c892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c896:	601a      	str	r2, [r3, #0]
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	e008      	b.n	800c8b4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c8a2:	68f9      	ldr	r1, [r7, #12]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fccb 	bl	800d240 <xQueueSemaphoreTake>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d001      	beq.n	800c8b4 <osMutexWait+0x8c>
    return osErrorOS;
 800c8b0:	23ff      	movs	r3, #255	; 0xff
 800c8b2:	e000      	b.n	800c8b6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	e000ed04 	.word	0xe000ed04

0800c8c4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c8d4:	f7ff ff16 	bl	800c704 <inHandlerMode>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d016      	beq.n	800c90c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c8de:	f107 0308 	add.w	r3, r7, #8
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fc15 	bl	800d114 <xQueueGiveFromISR>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d001      	beq.n	800c8f4 <osMutexRelease+0x30>
      return osErrorOS;
 800c8f0:	23ff      	movs	r3, #255	; 0xff
 800c8f2:	e017      	b.n	800c924 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d013      	beq.n	800c922 <osMutexRelease+0x5e>
 800c8fa:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <osMutexRelease+0x68>)
 800c8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c900:	601a      	str	r2, [r3, #0]
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	e00a      	b.n	800c922 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c90c:	2300      	movs	r3, #0
 800c90e:	2200      	movs	r2, #0
 800c910:	2100      	movs	r1, #0
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fb10 	bl	800cf38 <xQueueGenericSend>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d001      	beq.n	800c922 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c91e:	23ff      	movs	r3, #255	; 0xff
 800c920:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c922:	68fb      	ldr	r3, [r7, #12]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af02      	add	r7, sp, #8
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00f      	beq.n	800c962 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b01      	cmp	r3, #1
 800c946:	d10a      	bne.n	800c95e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	2203      	movs	r2, #3
 800c94e:	9200      	str	r2, [sp, #0]
 800c950:	2200      	movs	r2, #0
 800c952:	2100      	movs	r1, #0
 800c954:	2001      	movs	r0, #1
 800c956:	f000 f9be 	bl	800ccd6 <xQueueGenericCreateStatic>
 800c95a:	4603      	mov	r3, r0
 800c95c:	e016      	b.n	800c98c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	e014      	b.n	800c98c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d110      	bne.n	800c98a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c968:	2203      	movs	r2, #3
 800c96a:	2100      	movs	r1, #0
 800c96c:	2001      	movs	r0, #1
 800c96e:	f000 fa34 	bl	800cdda <xQueueGenericCreate>
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d005      	beq.n	800c986 <osSemaphoreCreate+0x56>
 800c97a:	2300      	movs	r3, #0
 800c97c:	2200      	movs	r2, #0
 800c97e:	2100      	movs	r1, #0
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f000 fad9 	bl	800cf38 <xQueueGenericSend>
      return sema;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	e000      	b.n	800c98c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c98a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c9a8:	2380      	movs	r3, #128	; 0x80
 800c9aa:	e03a      	b.n	800ca22 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b6:	d103      	bne.n	800c9c0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9bc:	60fb      	str	r3, [r7, #12]
 800c9be:	e009      	b.n	800c9d4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d006      	beq.n	800c9d4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d101      	bne.n	800c9d4 <osSemaphoreWait+0x40>
      ticks = 1;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c9d4:	f7ff fe96 	bl	800c704 <inHandlerMode>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d017      	beq.n	800ca0e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c9de:	f107 0308 	add.w	r3, r7, #8
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 fd32 	bl	800d450 <xQueueReceiveFromISR>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d001      	beq.n	800c9f6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c9f2:	23ff      	movs	r3, #255	; 0xff
 800c9f4:	e015      	b.n	800ca22 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d011      	beq.n	800ca20 <osSemaphoreWait+0x8c>
 800c9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ca2c <osSemaphoreWait+0x98>)
 800c9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	e008      	b.n	800ca20 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fc15 	bl	800d240 <xQueueSemaphoreTake>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d001      	beq.n	800ca20 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ca1c:	23ff      	movs	r3, #255	; 0xff
 800ca1e:	e000      	b.n	800ca22 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	e000ed04 	.word	0xe000ed04

0800ca30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ca40:	f7ff fe60 	bl	800c704 <inHandlerMode>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d016      	beq.n	800ca78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ca4a:	f107 0308 	add.w	r3, r7, #8
 800ca4e:	4619      	mov	r1, r3
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fb5f 	bl	800d114 <xQueueGiveFromISR>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d001      	beq.n	800ca60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ca5c:	23ff      	movs	r3, #255	; 0xff
 800ca5e:	e017      	b.n	800ca90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d013      	beq.n	800ca8e <osSemaphoreRelease+0x5e>
 800ca66:	4b0c      	ldr	r3, [pc, #48]	; (800ca98 <osSemaphoreRelease+0x68>)
 800ca68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	e00a      	b.n	800ca8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ca78:	2300      	movs	r3, #0
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fa5a 	bl	800cf38 <xQueueGenericSend>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d001      	beq.n	800ca8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ca8a:	23ff      	movs	r3, #255	; 0xff
 800ca8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3710      	adds	r7, #16
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fd59 	bl	800d55c <uxQueueMessagesWaiting>
 800caaa:	4603      	mov	r3, r0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f103 0208 	add.w	r2, r3, #8
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f04f 32ff 	mov.w	r2, #4294967295
 800cacc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f103 0208 	add.w	r2, r3, #8
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f103 0208 	add.w	r2, r3, #8
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb02:	bf00      	nop
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b085      	sub	sp, #20
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	683a      	ldr	r2, [r7, #0]
 800cb38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	1c5a      	adds	r2, r3, #1
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	601a      	str	r2, [r3, #0]
}
 800cb4a:	bf00      	nop
 800cb4c:	3714      	adds	r7, #20
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb56:	b480      	push	{r7}
 800cb58:	b085      	sub	sp, #20
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6c:	d103      	bne.n	800cb76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	691b      	ldr	r3, [r3, #16]
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	e00c      	b.n	800cb90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	3308      	adds	r3, #8
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e002      	b.n	800cb84 <vListInsert+0x2e>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d2f6      	bcs.n	800cb7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	601a      	str	r2, [r3, #0]
}
 800cbbc:	bf00      	nop
 800cbbe:	3714      	adds	r7, #20
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	6892      	ldr	r2, [r2, #8]
 800cbde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	6852      	ldr	r2, [r2, #4]
 800cbe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d103      	bne.n	800cbfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	689a      	ldr	r2, [r3, #8]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	1e5a      	subs	r2, r3, #1
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10c      	bne.n	800cc4a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	b672      	cpsid	i
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	b662      	cpsie	i
 800cc44:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cc4a:	f001 fee7 	bl	800ea1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc56:	68f9      	ldr	r1, [r7, #12]
 800cc58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc5a:	fb01 f303 	mul.w	r3, r1, r3
 800cc5e:	441a      	add	r2, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	68f9      	ldr	r1, [r7, #12]
 800cc7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc80:	fb01 f303 	mul.w	r3, r1, r3
 800cc84:	441a      	add	r2, r3
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	22ff      	movs	r2, #255	; 0xff
 800cc8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	22ff      	movs	r2, #255	; 0xff
 800cc96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d109      	bne.n	800ccb4 <xQueueGenericReset+0x98>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00f      	beq.n	800ccc8 <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3310      	adds	r3, #16
 800ccac:	4618      	mov	r0, r3
 800ccae:	f001 f9a5 	bl	800dffc <xTaskRemoveFromEventList>
 800ccb2:	e009      	b.n	800ccc8 <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	3310      	adds	r3, #16
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7ff fefb 	bl	800cab4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3324      	adds	r3, #36	; 0x24
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7ff fef6 	bl	800cab4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ccc8:	f001 fedc 	bl	800ea84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cccc:	2301      	movs	r3, #1
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b08e      	sub	sp, #56	; 0x38
 800ccda:	af02      	add	r7, sp, #8
 800ccdc:	60f8      	str	r0, [r7, #12]
 800ccde:	60b9      	str	r1, [r7, #8]
 800cce0:	607a      	str	r2, [r7, #4]
 800cce2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10c      	bne.n	800cd04 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	b672      	cpsid	i
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	b662      	cpsie	i
 800ccfe:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd00:	bf00      	nop
 800cd02:	e7fe      	b.n	800cd02 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10c      	bne.n	800cd24 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0e:	b672      	cpsid	i
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	b662      	cpsie	i
 800cd1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <xQueueGenericCreateStatic+0x5a>
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d001      	beq.n	800cd34 <xQueueGenericCreateStatic+0x5e>
 800cd30:	2301      	movs	r3, #1
 800cd32:	e000      	b.n	800cd36 <xQueueGenericCreateStatic+0x60>
 800cd34:	2300      	movs	r3, #0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10c      	bne.n	800cd54 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	b672      	cpsid	i
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	b662      	cpsie	i
 800cd4e:	623b      	str	r3, [r7, #32]
}
 800cd50:	bf00      	nop
 800cd52:	e7fe      	b.n	800cd52 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d102      	bne.n	800cd60 <xQueueGenericCreateStatic+0x8a>
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d101      	bne.n	800cd64 <xQueueGenericCreateStatic+0x8e>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e000      	b.n	800cd66 <xQueueGenericCreateStatic+0x90>
 800cd64:	2300      	movs	r3, #0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10c      	bne.n	800cd84 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	b672      	cpsid	i
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	b662      	cpsie	i
 800cd7e:	61fb      	str	r3, [r7, #28]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd84:	2348      	movs	r3, #72	; 0x48
 800cd86:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2b48      	cmp	r3, #72	; 0x48
 800cd8c:	d00c      	beq.n	800cda8 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	b672      	cpsid	i
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	b662      	cpsie	i
 800cda2:	61bb      	str	r3, [r7, #24]
}
 800cda4:	bf00      	nop
 800cda6:	e7fe      	b.n	800cda6 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cda8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00d      	beq.n	800cdd0 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdbc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	68b9      	ldr	r1, [r7, #8]
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f000 f847 	bl	800ce5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3730      	adds	r7, #48	; 0x30
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b08a      	sub	sp, #40	; 0x28
 800cdde:	af02      	add	r7, sp, #8
 800cde0:	60f8      	str	r0, [r7, #12]
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	4613      	mov	r3, r2
 800cde6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10c      	bne.n	800ce08 <xQueueGenericCreate+0x2e>
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf2:	b672      	cpsid	i
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	b662      	cpsie	i
 800ce02:	613b      	str	r3, [r7, #16]
}
 800ce04:	bf00      	nop
 800ce06:	e7fe      	b.n	800ce06 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d102      	bne.n	800ce14 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61fb      	str	r3, [r7, #28]
 800ce12:	e004      	b.n	800ce1e <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	fb02 f303 	mul.w	r3, r2, r3
 800ce1c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	3348      	adds	r3, #72	; 0x48
 800ce22:	4618      	mov	r0, r3
 800ce24:	f001 ff26 	bl	800ec74 <pvPortMalloc>
 800ce28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d011      	beq.n	800ce54 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	3348      	adds	r3, #72	; 0x48
 800ce38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce42:	79fa      	ldrb	r2, [r7, #7]
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	68b9      	ldr	r1, [r7, #8]
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f000 f805 	bl	800ce5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce54:	69bb      	ldr	r3, [r7, #24]
	}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3720      	adds	r7, #32
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b084      	sub	sp, #16
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	60b9      	str	r1, [r7, #8]
 800ce68:	607a      	str	r2, [r7, #4]
 800ce6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d103      	bne.n	800ce7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	601a      	str	r2, [r3, #0]
 800ce78:	e002      	b.n	800ce80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce8c:	2101      	movs	r1, #1
 800ce8e:	69b8      	ldr	r0, [r7, #24]
 800ce90:	f7ff fec4 	bl	800cc1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce94:	bf00      	nop
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00e      	beq.n	800cec8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cebc:	2300      	movs	r3, #0
 800cebe:	2200      	movs	r2, #0
 800cec0:	2100      	movs	r1, #0
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f838 	bl	800cf38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cec8:	bf00      	nop
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ceda:	2301      	movs	r3, #1
 800cedc:	617b      	str	r3, [r7, #20]
 800cede:	2300      	movs	r3, #0
 800cee0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	461a      	mov	r2, r3
 800cee6:	6939      	ldr	r1, [r7, #16]
 800cee8:	6978      	ldr	r0, [r7, #20]
 800ceea:	f7ff ff76 	bl	800cdda <xQueueGenericCreate>
 800ceee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f7ff ffd3 	bl	800ce9c <prvInitialiseMutex>

		return xNewQueue;
 800cef6:	68fb      	ldr	r3, [r7, #12]
	}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af02      	add	r7, sp, #8
 800cf06:	4603      	mov	r3, r0
 800cf08:	6039      	str	r1, [r7, #0]
 800cf0a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	2300      	movs	r3, #0
 800cf12:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cf14:	79fb      	ldrb	r3, [r7, #7]
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	6939      	ldr	r1, [r7, #16]
 800cf1e:	6978      	ldr	r0, [r7, #20]
 800cf20:	f7ff fed9 	bl	800ccd6 <xQueueGenericCreateStatic>
 800cf24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7ff ffb8 	bl	800ce9c <prvInitialiseMutex>

		return xNewQueue;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
	}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3718      	adds	r7, #24
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
	...

0800cf38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08e      	sub	sp, #56	; 0x38
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf46:	2300      	movs	r3, #0
 800cf48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10c      	bne.n	800cf6e <xQueueGenericSend+0x36>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	b672      	cpsid	i
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	b662      	cpsie	i
 800cf68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf6a:	bf00      	nop
 800cf6c:	e7fe      	b.n	800cf6c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d103      	bne.n	800cf7c <xQueueGenericSend+0x44>
 800cf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <xQueueGenericSend+0x48>
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e000      	b.n	800cf82 <xQueueGenericSend+0x4a>
 800cf80:	2300      	movs	r3, #0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10c      	bne.n	800cfa0 <xQueueGenericSend+0x68>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	b672      	cpsid	i
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	b662      	cpsie	i
 800cf9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf9c:	bf00      	nop
 800cf9e:	e7fe      	b.n	800cf9e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d103      	bne.n	800cfae <xQueueGenericSend+0x76>
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d101      	bne.n	800cfb2 <xQueueGenericSend+0x7a>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e000      	b.n	800cfb4 <xQueueGenericSend+0x7c>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d10c      	bne.n	800cfd2 <xQueueGenericSend+0x9a>
	__asm volatile
 800cfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbc:	b672      	cpsid	i
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	b662      	cpsie	i
 800cfcc:	623b      	str	r3, [r7, #32]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfd2:	f001 f9d5 	bl	800e380 <xTaskGetSchedulerState>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d102      	bne.n	800cfe2 <xQueueGenericSend+0xaa>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <xQueueGenericSend+0xae>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e000      	b.n	800cfe8 <xQueueGenericSend+0xb0>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10c      	bne.n	800d006 <xQueueGenericSend+0xce>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff0:	b672      	cpsid	i
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	b662      	cpsie	i
 800d000:	61fb      	str	r3, [r7, #28]
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d006:	f001 fd09 	bl	800ea1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d012:	429a      	cmp	r2, r3
 800d014:	d302      	bcc.n	800d01c <xQueueGenericSend+0xe4>
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d112      	bne.n	800d042 <xQueueGenericSend+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d01c:	683a      	ldr	r2, [r7, #0]
 800d01e:	68b9      	ldr	r1, [r7, #8]
 800d020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d022:	f000 fad3 	bl	800d5cc <prvCopyDataToQueue>
 800d026:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d004      	beq.n	800d03a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d032:	3324      	adds	r3, #36	; 0x24
 800d034:	4618      	mov	r0, r3
 800d036:	f000 ffe1 	bl	800dffc <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d03a:	f001 fd23 	bl	800ea84 <vPortExitCritical>
				return pdPASS;
 800d03e:	2301      	movs	r3, #1
 800d040:	e062      	b.n	800d108 <xQueueGenericSend+0x1d0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d103      	bne.n	800d050 <xQueueGenericSend+0x118>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d048:	f001 fd1c 	bl	800ea84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d04c:	2300      	movs	r3, #0
 800d04e:	e05b      	b.n	800d108 <xQueueGenericSend+0x1d0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <xQueueGenericSend+0x12c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d056:	f107 0314 	add.w	r3, r7, #20
 800d05a:	4618      	mov	r0, r3
 800d05c:	f001 f832 	bl	800e0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d060:	2301      	movs	r3, #1
 800d062:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d064:	f001 fd0e 	bl	800ea84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d068:	f000 fe08 	bl	800dc7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d06c:	f001 fcd6 	bl	800ea1c <vPortEnterCritical>
 800d070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d076:	b25b      	sxtb	r3, r3
 800d078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07c:	d103      	bne.n	800d086 <xQueueGenericSend+0x14e>
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	2200      	movs	r2, #0
 800d082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d08c:	b25b      	sxtb	r3, r3
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d103      	bne.n	800d09c <xQueueGenericSend+0x164>
 800d094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d09c:	f001 fcf2 	bl	800ea84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0a0:	1d3a      	adds	r2, r7, #4
 800d0a2:	f107 0314 	add.w	r3, r7, #20
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f001 f821 	bl	800e0f0 <xTaskCheckForTimeOut>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d123      	bne.n	800d0fc <xQueueGenericSend+0x1c4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0b6:	f000 fb81 	bl	800d7bc <prvIsQueueFull>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d017      	beq.n	800d0f0 <xQueueGenericSend+0x1b8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	3310      	adds	r3, #16
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	4611      	mov	r1, r2
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f000 ff71 	bl	800dfb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0d0:	f000 fb0c 	bl	800d6ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0d4:	f000 fde0 	bl	800dc98 <xTaskResumeAll>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d193      	bne.n	800d006 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d0de:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <xQueueGenericSend+0x1d8>)
 800d0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	e78a      	b.n	800d006 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0f2:	f000 fafb 	bl	800d6ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0f6:	f000 fdcf 	bl	800dc98 <xTaskResumeAll>
 800d0fa:	e784      	b.n	800d006 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0fe:	f000 faf5 	bl	800d6ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d102:	f000 fdc9 	bl	800dc98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3738      	adds	r7, #56	; 0x38
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	e000ed04 	.word	0xe000ed04

0800d114 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b08e      	sub	sp, #56	; 0x38
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10c      	bne.n	800d142 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12c:	b672      	cpsid	i
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	b662      	cpsie	i
 800d13c:	623b      	str	r3, [r7, #32]
}
 800d13e:	bf00      	nop
 800d140:	e7fe      	b.n	800d140 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00c      	beq.n	800d164 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14e:	b672      	cpsid	i
 800d150:	f383 8811 	msr	BASEPRI, r3
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	b662      	cpsie	i
 800d15e:	61fb      	str	r3, [r7, #28]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d103      	bne.n	800d174 <xQueueGiveFromISR+0x60>
 800d16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <xQueueGiveFromISR+0x64>
 800d174:	2301      	movs	r3, #1
 800d176:	e000      	b.n	800d17a <xQueueGiveFromISR+0x66>
 800d178:	2300      	movs	r3, #0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d10c      	bne.n	800d198 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	b672      	cpsid	i
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	b662      	cpsie	i
 800d192:	61bb      	str	r3, [r7, #24]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d198:	f001 fd28 	bl	800ebec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d19c:	f3ef 8211 	mrs	r2, BASEPRI
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	b672      	cpsid	i
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	b662      	cpsie	i
 800d1b4:	617a      	str	r2, [r7, #20]
 800d1b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d22b      	bcs.n	800d224 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	1c5a      	adds	r2, r3, #1
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e6:	d112      	bne.n	800d20e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d016      	beq.n	800d21e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	3324      	adds	r3, #36	; 0x24
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 ff01 	bl	800dffc <xTaskRemoveFromEventList>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00e      	beq.n	800d21e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00b      	beq.n	800d21e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	2201      	movs	r2, #1
 800d20a:	601a      	str	r2, [r3, #0]
 800d20c:	e007      	b.n	800d21e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d20e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d212:	3301      	adds	r3, #1
 800d214:	b2db      	uxtb	r3, r3
 800d216:	b25a      	sxtb	r2, r3
 800d218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d21e:	2301      	movs	r3, #1
 800d220:	637b      	str	r3, [r7, #52]	; 0x34
 800d222:	e001      	b.n	800d228 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d224:	2300      	movs	r3, #0
 800d226:	637b      	str	r3, [r7, #52]	; 0x34
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d232:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d236:	4618      	mov	r0, r3
 800d238:	3738      	adds	r7, #56	; 0x38
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
	...

0800d240 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08e      	sub	sp, #56	; 0x38
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d24a:	2300      	movs	r3, #0
 800d24c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d252:	2300      	movs	r3, #0
 800d254:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10c      	bne.n	800d276 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	b672      	cpsid	i
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	b662      	cpsie	i
 800d270:	623b      	str	r3, [r7, #32]
}
 800d272:	bf00      	nop
 800d274:	e7fe      	b.n	800d274 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00c      	beq.n	800d298 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	b672      	cpsid	i
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	b662      	cpsie	i
 800d292:	61fb      	str	r3, [r7, #28]
}
 800d294:	bf00      	nop
 800d296:	e7fe      	b.n	800d296 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d298:	f001 f872 	bl	800e380 <xTaskGetSchedulerState>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d102      	bne.n	800d2a8 <xQueueSemaphoreTake+0x68>
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <xQueueSemaphoreTake+0x6c>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e000      	b.n	800d2ae <xQueueSemaphoreTake+0x6e>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10c      	bne.n	800d2cc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	b672      	cpsid	i
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	b662      	cpsie	i
 800d2c6:	61bb      	str	r3, [r7, #24]
}
 800d2c8:	bf00      	nop
 800d2ca:	e7fe      	b.n	800d2ca <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2cc:	f001 fba6 	bl	800ea1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d019      	beq.n	800d310 <xQueueSemaphoreTake+0xd0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	1e5a      	subs	r2, r3, #1
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d104      	bne.n	800d2f6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2ec:	f001 fa0e 	bl	800e70c <pvTaskIncrementMutexHeldCount>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d004      	beq.n	800d308 <xQueueSemaphoreTake+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d300:	3310      	adds	r3, #16
 800d302:	4618      	mov	r0, r3
 800d304:	f000 fe7a 	bl	800dffc <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d308:	f001 fbbc 	bl	800ea84 <vPortExitCritical>
				return pdPASS;
 800d30c:	2301      	movs	r3, #1
 800d30e:	e099      	b.n	800d444 <xQueueSemaphoreTake+0x204>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d113      	bne.n	800d33e <xQueueSemaphoreTake+0xfe>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00c      	beq.n	800d336 <xQueueSemaphoreTake+0xf6>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	b672      	cpsid	i
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	b662      	cpsie	i
 800d330:	617b      	str	r3, [r7, #20]
}
 800d332:	bf00      	nop
 800d334:	e7fe      	b.n	800d334 <xQueueSemaphoreTake+0xf4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d336:	f001 fba5 	bl	800ea84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d33a:	2300      	movs	r3, #0
 800d33c:	e082      	b.n	800d444 <xQueueSemaphoreTake+0x204>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d340:	2b00      	cmp	r3, #0
 800d342:	d106      	bne.n	800d352 <xQueueSemaphoreTake+0x112>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d344:	f107 030c 	add.w	r3, r7, #12
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 febb 	bl	800e0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d34e:	2301      	movs	r3, #1
 800d350:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d352:	f001 fb97 	bl	800ea84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d356:	f000 fc91 	bl	800dc7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d35a:	f001 fb5f 	bl	800ea1c <vPortEnterCritical>
 800d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d364:	b25b      	sxtb	r3, r3
 800d366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36a:	d103      	bne.n	800d374 <xQueueSemaphoreTake+0x134>
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d37a:	b25b      	sxtb	r3, r3
 800d37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d380:	d103      	bne.n	800d38a <xQueueSemaphoreTake+0x14a>
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d384:	2200      	movs	r2, #0
 800d386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d38a:	f001 fb7b 	bl	800ea84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d38e:	463a      	mov	r2, r7
 800d390:	f107 030c 	add.w	r3, r7, #12
 800d394:	4611      	mov	r1, r2
 800d396:	4618      	mov	r0, r3
 800d398:	f000 feaa 	bl	800e0f0 <xTaskCheckForTimeOut>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d132      	bne.n	800d408 <xQueueSemaphoreTake+0x1c8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3a4:	f000 f9f4 	bl	800d790 <prvIsQueueEmpty>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d026      	beq.n	800d3fc <xQueueSemaphoreTake+0x1bc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d109      	bne.n	800d3ca <xQueueSemaphoreTake+0x18a>
					{
						taskENTER_CRITICAL();
 800d3b6:	f001 fb31 	bl	800ea1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 fffc 	bl	800e3bc <xTaskPriorityInherit>
 800d3c4:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d3c6:	f001 fb5d 	bl	800ea84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	3324      	adds	r3, #36	; 0x24
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 fdec 	bl	800dfb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3da:	f000 f987 	bl	800d6ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3de:	f000 fc5b 	bl	800dc98 <xTaskResumeAll>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f47f af71 	bne.w	800d2cc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d3ea:	4b18      	ldr	r3, [pc, #96]	; (800d44c <xQueueSemaphoreTake+0x20c>)
 800d3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f0:	601a      	str	r2, [r3, #0]
 800d3f2:	f3bf 8f4f 	dsb	sy
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	e767      	b.n	800d2cc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3fe:	f000 f975 	bl	800d6ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d402:	f000 fc49 	bl	800dc98 <xTaskResumeAll>
 800d406:	e761      	b.n	800d2cc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d40a:	f000 f96f 	bl	800d6ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d40e:	f000 fc43 	bl	800dc98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d414:	f000 f9bc 	bl	800d790 <prvIsQueueEmpty>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f43f af56 	beq.w	800d2cc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00d      	beq.n	800d442 <xQueueSemaphoreTake+0x202>
					{
						taskENTER_CRITICAL();
 800d426:	f001 faf9 	bl	800ea1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d42a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d42c:	f000 f8b6 	bl	800d59c <prvGetDisinheritPriorityAfterTimeout>
 800d430:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d438:	4618      	mov	r0, r3
 800d43a:	f001 f8c9 	bl	800e5d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d43e:	f001 fb21 	bl	800ea84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d442:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d444:	4618      	mov	r0, r3
 800d446:	3738      	adds	r7, #56	; 0x38
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	e000ed04 	.word	0xe000ed04

0800d450 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b08e      	sub	sp, #56	; 0x38
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10c      	bne.n	800d480 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46a:	b672      	cpsid	i
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	b662      	cpsie	i
 800d47a:	623b      	str	r3, [r7, #32]
}
 800d47c:	bf00      	nop
 800d47e:	e7fe      	b.n	800d47e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d103      	bne.n	800d48e <xQueueReceiveFromISR+0x3e>
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <xQueueReceiveFromISR+0x42>
 800d48e:	2301      	movs	r3, #1
 800d490:	e000      	b.n	800d494 <xQueueReceiveFromISR+0x44>
 800d492:	2300      	movs	r3, #0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10c      	bne.n	800d4b2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49c:	b672      	cpsid	i
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	b662      	cpsie	i
 800d4ac:	61fb      	str	r3, [r7, #28]
}
 800d4ae:	bf00      	nop
 800d4b0:	e7fe      	b.n	800d4b0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4b2:	f001 fb9b 	bl	800ebec <vPortValidateInterruptPriority>
	__asm volatile
 800d4b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	b672      	cpsid	i
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	b662      	cpsie	i
 800d4ce:	61ba      	str	r2, [r7, #24]
 800d4d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d02f      	beq.n	800d542 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4ec:	68b9      	ldr	r1, [r7, #8]
 800d4ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4f0:	f000 f8d6 	bl	800d6a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f6:	1e5a      	subs	r2, r3, #1
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d504:	d112      	bne.n	800d52c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d016      	beq.n	800d53c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	3310      	adds	r3, #16
 800d512:	4618      	mov	r0, r3
 800d514:	f000 fd72 	bl	800dffc <xTaskRemoveFromEventList>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00e      	beq.n	800d53c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00b      	beq.n	800d53c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	e007      	b.n	800d53c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d52c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d530:	3301      	adds	r3, #1
 800d532:	b2db      	uxtb	r3, r3
 800d534:	b25a      	sxtb	r2, r3
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d53c:	2301      	movs	r3, #1
 800d53e:	637b      	str	r3, [r7, #52]	; 0x34
 800d540:	e001      	b.n	800d546 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d542:	2300      	movs	r3, #0
 800d544:	637b      	str	r3, [r7, #52]	; 0x34
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	f383 8811 	msr	BASEPRI, r3
}
 800d550:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d554:	4618      	mov	r0, r3
 800d556:	3738      	adds	r7, #56	; 0x38
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10c      	bne.n	800d584 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	b672      	cpsid	i
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	b662      	cpsie	i
 800d57e:	60bb      	str	r3, [r7, #8]
}
 800d580:	bf00      	nop
 800d582:	e7fe      	b.n	800d582 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800d584:	f001 fa4a 	bl	800ea1c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d58e:	f001 fa79 	bl	800ea84 <vPortExitCritical>

	return uxReturn;
 800d592:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d006      	beq.n	800d5ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f1c3 0307 	rsb	r3, r3, #7
 800d5b6:	60fb      	str	r3, [r7, #12]
 800d5b8:	e001      	b.n	800d5be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d5be:	68fb      	ldr	r3, [r7, #12]
	}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10d      	bne.n	800d606 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d14d      	bne.n	800d68e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 ff60 	bl	800e4bc <xTaskPriorityDisinherit>
 800d5fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	609a      	str	r2, [r3, #8]
 800d604:	e043      	b.n	800d68e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d119      	bne.n	800d640 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6858      	ldr	r0, [r3, #4]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d614:	461a      	mov	r2, r3
 800d616:	68b9      	ldr	r1, [r7, #8]
 800d618:	f002 fdc1 	bl	801019e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	685a      	ldr	r2, [r3, #4]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d624:	441a      	add	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	429a      	cmp	r2, r3
 800d634:	d32b      	bcc.n	800d68e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	605a      	str	r2, [r3, #4]
 800d63e:	e026      	b.n	800d68e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	68d8      	ldr	r0, [r3, #12]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d648:	461a      	mov	r2, r3
 800d64a:	68b9      	ldr	r1, [r7, #8]
 800d64c:	f002 fda7 	bl	801019e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	68da      	ldr	r2, [r3, #12]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d658:	425b      	negs	r3, r3
 800d65a:	441a      	add	r2, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	68da      	ldr	r2, [r3, #12]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d207      	bcs.n	800d67c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	689a      	ldr	r2, [r3, #8]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d674:	425b      	negs	r3, r3
 800d676:	441a      	add	r2, r3
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b02      	cmp	r3, #2
 800d680:	d105      	bne.n	800d68e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	3b01      	subs	r3, #1
 800d68c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	1c5a      	adds	r2, r3, #1
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d696:	697b      	ldr	r3, [r7, #20]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3718      	adds	r7, #24
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d018      	beq.n	800d6e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68da      	ldr	r2, [r3, #12]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ba:	441a      	add	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	68da      	ldr	r2, [r3, #12]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d303      	bcc.n	800d6d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	68d9      	ldr	r1, [r3, #12]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6dc:	461a      	mov	r2, r3
 800d6de:	6838      	ldr	r0, [r7, #0]
 800d6e0:	f002 fd5d 	bl	801019e <memcpy>
	}
}
 800d6e4:	bf00      	nop
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6f4:	f001 f992 	bl	800ea1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d700:	e011      	b.n	800d726 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d706:	2b00      	cmp	r3, #0
 800d708:	d012      	beq.n	800d730 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3324      	adds	r3, #36	; 0x24
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 fc74 	bl	800dffc <xTaskRemoveFromEventList>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d71a:	f000 fd4f 	bl	800e1bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
 800d720:	3b01      	subs	r3, #1
 800d722:	b2db      	uxtb	r3, r3
 800d724:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	dce9      	bgt.n	800d702 <prvUnlockQueue+0x16>
 800d72e:	e000      	b.n	800d732 <prvUnlockQueue+0x46>
					break;
 800d730:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	22ff      	movs	r2, #255	; 0xff
 800d736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d73a:	f001 f9a3 	bl	800ea84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d73e:	f001 f96d 	bl	800ea1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d748:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d74a:	e011      	b.n	800d770 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d012      	beq.n	800d77a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3310      	adds	r3, #16
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fc4f 	bl	800dffc <xTaskRemoveFromEventList>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d764:	f000 fd2a 	bl	800e1bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d768:	7bbb      	ldrb	r3, [r7, #14]
 800d76a:	3b01      	subs	r3, #1
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d774:	2b00      	cmp	r3, #0
 800d776:	dce9      	bgt.n	800d74c <prvUnlockQueue+0x60>
 800d778:	e000      	b.n	800d77c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d77a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	22ff      	movs	r2, #255	; 0xff
 800d780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d784:	f001 f97e 	bl	800ea84 <vPortExitCritical>
}
 800d788:	bf00      	nop
 800d78a:	3710      	adds	r7, #16
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d798:	f001 f940 	bl	800ea1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d102      	bne.n	800d7aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	60fb      	str	r3, [r7, #12]
 800d7a8:	e001      	b.n	800d7ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7ae:	f001 f969 	bl	800ea84 <vPortExitCritical>

	return xReturn;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7c4:	f001 f92a 	bl	800ea1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d102      	bne.n	800d7da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	60fb      	str	r3, [r7, #12]
 800d7d8:	e001      	b.n	800d7de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7de:	f001 f951 	bl	800ea84 <vPortExitCritical>

	return xReturn;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08e      	sub	sp, #56	; 0x38
 800d7f0:	af04      	add	r7, sp, #16
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10c      	bne.n	800d81a <xTaskCreateStatic+0x2e>
	__asm volatile
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	b672      	cpsid	i
 800d806:	f383 8811 	msr	BASEPRI, r3
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	b662      	cpsie	i
 800d814:	623b      	str	r3, [r7, #32]
}
 800d816:	bf00      	nop
 800d818:	e7fe      	b.n	800d818 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10c      	bne.n	800d83a <xTaskCreateStatic+0x4e>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	b672      	cpsid	i
 800d826:	f383 8811 	msr	BASEPRI, r3
 800d82a:	f3bf 8f6f 	isb	sy
 800d82e:	f3bf 8f4f 	dsb	sy
 800d832:	b662      	cpsie	i
 800d834:	61fb      	str	r3, [r7, #28]
}
 800d836:	bf00      	nop
 800d838:	e7fe      	b.n	800d838 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d83a:	23a0      	movs	r3, #160	; 0xa0
 800d83c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	2ba0      	cmp	r3, #160	; 0xa0
 800d842:	d00c      	beq.n	800d85e <xTaskCreateStatic+0x72>
	__asm volatile
 800d844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d848:	b672      	cpsid	i
 800d84a:	f383 8811 	msr	BASEPRI, r3
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	b662      	cpsie	i
 800d858:	61bb      	str	r3, [r7, #24]
}
 800d85a:	bf00      	nop
 800d85c:	e7fe      	b.n	800d85c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d85e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d862:	2b00      	cmp	r3, #0
 800d864:	d01e      	beq.n	800d8a4 <xTaskCreateStatic+0xb8>
 800d866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d01b      	beq.n	800d8a4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d874:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	2202      	movs	r2, #2
 800d87a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d87e:	2300      	movs	r3, #0
 800d880:	9303      	str	r3, [sp, #12]
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	9302      	str	r3, [sp, #8]
 800d886:	f107 0314 	add.w	r3, r7, #20
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	68b9      	ldr	r1, [r7, #8]
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 f850 	bl	800d93c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d89c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d89e:	f000 f8ed 	bl	800da7c <prvAddNewTaskToReadyList>
 800d8a2:	e001      	b.n	800d8a8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8a8:	697b      	ldr	r3, [r7, #20]
	}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3728      	adds	r7, #40	; 0x28
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b08c      	sub	sp, #48	; 0x30
 800d8b6:	af04      	add	r7, sp, #16
 800d8b8:	60f8      	str	r0, [r7, #12]
 800d8ba:	60b9      	str	r1, [r7, #8]
 800d8bc:	603b      	str	r3, [r7, #0]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8c2:	88fb      	ldrh	r3, [r7, #6]
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f001 f9d4 	bl	800ec74 <pvPortMalloc>
 800d8cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00e      	beq.n	800d8f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8d4:	20a0      	movs	r0, #160	; 0xa0
 800d8d6:	f001 f9cd 	bl	800ec74 <pvPortMalloc>
 800d8da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d003      	beq.n	800d8ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	631a      	str	r2, [r3, #48]	; 0x30
 800d8e8:	e005      	b.n	800d8f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8ea:	6978      	ldr	r0, [r7, #20]
 800d8ec:	f001 fa8c 	bl	800ee08 <vPortFree>
 800d8f0:	e001      	b.n	800d8f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d017      	beq.n	800d92c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d904:	88fa      	ldrh	r2, [r7, #6]
 800d906:	2300      	movs	r3, #0
 800d908:	9303      	str	r3, [sp, #12]
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	9302      	str	r3, [sp, #8]
 800d90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d910:	9301      	str	r3, [sp, #4]
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	68b9      	ldr	r1, [r7, #8]
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 f80e 	bl	800d93c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d920:	69f8      	ldr	r0, [r7, #28]
 800d922:	f000 f8ab 	bl	800da7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d926:	2301      	movs	r3, #1
 800d928:	61bb      	str	r3, [r7, #24]
 800d92a:	e002      	b.n	800d932 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d92c:	f04f 33ff 	mov.w	r3, #4294967295
 800d930:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d932:	69bb      	ldr	r3, [r7, #24]
	}
 800d934:	4618      	mov	r0, r3
 800d936:	3720      	adds	r7, #32
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d94e:	6879      	ldr	r1, [r7, #4]
 800d950:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d954:	440b      	add	r3, r1
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4413      	add	r3, r2
 800d95a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	f023 0307 	bic.w	r3, r3, #7
 800d962:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	f003 0307 	and.w	r3, r3, #7
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00c      	beq.n	800d988 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800d96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d972:	b672      	cpsid	i
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	b662      	cpsie	i
 800d982:	617b      	str	r3, [r7, #20]
}
 800d984:	bf00      	nop
 800d986:	e7fe      	b.n	800d986 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d01f      	beq.n	800d9ce <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d98e:	2300      	movs	r3, #0
 800d990:	61fb      	str	r3, [r7, #28]
 800d992:	e012      	b.n	800d9ba <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	4413      	add	r3, r2
 800d99a:	7819      	ldrb	r1, [r3, #0]
 800d99c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	3334      	adds	r3, #52	; 0x34
 800d9a4:	460a      	mov	r2, r1
 800d9a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d006      	beq.n	800d9c2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	61fb      	str	r3, [r7, #28]
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	2b0f      	cmp	r3, #15
 800d9be:	d9e9      	bls.n	800d994 <prvInitialiseNewTask+0x58>
 800d9c0:	e000      	b.n	800d9c4 <prvInitialiseNewTask+0x88>
			{
				break;
 800d9c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9cc:	e003      	b.n	800d9d6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d8:	2b06      	cmp	r3, #6
 800d9da:	d901      	bls.n	800d9e0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9dc:	2306      	movs	r3, #6
 800d9de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff f87c 	bl	800caf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	3318      	adds	r3, #24
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff f877 	bl	800caf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0e:	f1c3 0207 	rsb	r2, r3, #7
 800da12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1e:	2200      	movs	r2, #0
 800da20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da26:	2200      	movs	r2, #0
 800da28:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	334c      	adds	r3, #76	; 0x4c
 800da30:	224c      	movs	r2, #76	; 0x4c
 800da32:	2100      	movs	r1, #0
 800da34:	4618      	mov	r0, r3
 800da36:	f002 faca 	bl	800ffce <memset>
 800da3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3c:	4a0c      	ldr	r2, [pc, #48]	; (800da70 <prvInitialiseNewTask+0x134>)
 800da3e:	651a      	str	r2, [r3, #80]	; 0x50
 800da40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da42:	4a0c      	ldr	r2, [pc, #48]	; (800da74 <prvInitialiseNewTask+0x138>)
 800da44:	655a      	str	r2, [r3, #84]	; 0x54
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	4a0b      	ldr	r2, [pc, #44]	; (800da78 <prvInitialiseNewTask+0x13c>)
 800da4a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	68f9      	ldr	r1, [r7, #12]
 800da50:	69b8      	ldr	r0, [r7, #24]
 800da52:	f000 fed5 	bl	800e800 <pxPortInitialiseStack>
 800da56:	4602      	mov	r2, r0
 800da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d002      	beq.n	800da68 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da68:	bf00      	nop
 800da6a:	3720      	adds	r7, #32
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	20004924 	.word	0x20004924
 800da74:	2000498c 	.word	0x2000498c
 800da78:	200049f4 	.word	0x200049f4

0800da7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da84:	f000 ffca 	bl	800ea1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da88:	4b24      	ldr	r3, [pc, #144]	; (800db1c <prvAddNewTaskToReadyList+0xa0>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	3301      	adds	r3, #1
 800da8e:	4a23      	ldr	r2, [pc, #140]	; (800db1c <prvAddNewTaskToReadyList+0xa0>)
 800da90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da92:	4b23      	ldr	r3, [pc, #140]	; (800db20 <prvAddNewTaskToReadyList+0xa4>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d109      	bne.n	800daae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da9a:	4a21      	ldr	r2, [pc, #132]	; (800db20 <prvAddNewTaskToReadyList+0xa4>)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800daa0:	4b1e      	ldr	r3, [pc, #120]	; (800db1c <prvAddNewTaskToReadyList+0xa0>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d110      	bne.n	800daca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800daa8:	f000 fba6 	bl	800e1f8 <prvInitialiseTaskLists>
 800daac:	e00d      	b.n	800daca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800daae:	4b1d      	ldr	r3, [pc, #116]	; (800db24 <prvAddNewTaskToReadyList+0xa8>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d109      	bne.n	800daca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dab6:	4b1a      	ldr	r3, [pc, #104]	; (800db20 <prvAddNewTaskToReadyList+0xa4>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d802      	bhi.n	800daca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dac4:	4a16      	ldr	r2, [pc, #88]	; (800db20 <prvAddNewTaskToReadyList+0xa4>)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800daca:	4b17      	ldr	r3, [pc, #92]	; (800db28 <prvAddNewTaskToReadyList+0xac>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3301      	adds	r3, #1
 800dad0:	4a15      	ldr	r2, [pc, #84]	; (800db28 <prvAddNewTaskToReadyList+0xac>)
 800dad2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad8:	2201      	movs	r2, #1
 800dada:	409a      	lsls	r2, r3
 800dadc:	4b13      	ldr	r3, [pc, #76]	; (800db2c <prvAddNewTaskToReadyList+0xb0>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4313      	orrs	r3, r2
 800dae2:	4a12      	ldr	r2, [pc, #72]	; (800db2c <prvAddNewTaskToReadyList+0xb0>)
 800dae4:	6013      	str	r3, [r2, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daea:	4613      	mov	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	4413      	add	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	4a0f      	ldr	r2, [pc, #60]	; (800db30 <prvAddNewTaskToReadyList+0xb4>)
 800daf4:	441a      	add	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	3304      	adds	r3, #4
 800dafa:	4619      	mov	r1, r3
 800dafc:	4610      	mov	r0, r2
 800dafe:	f7ff f806 	bl	800cb0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db02:	f000 ffbf 	bl	800ea84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db06:	4b07      	ldr	r3, [pc, #28]	; (800db24 <prvAddNewTaskToReadyList+0xa8>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d001      	beq.n	800db12 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db0e:	4b04      	ldr	r3, [pc, #16]	; (800db20 <prvAddNewTaskToReadyList+0xa4>)
 800db10:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db12:	bf00      	nop
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	20000cd8 	.word	0x20000cd8
 800db20:	20000bd8 	.word	0x20000bd8
 800db24:	20000ce4 	.word	0x20000ce4
 800db28:	20000cf4 	.word	0x20000cf4
 800db2c:	20000ce0 	.word	0x20000ce0
 800db30:	20000bdc 	.word	0x20000bdc

0800db34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db3c:	2300      	movs	r3, #0
 800db3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d019      	beq.n	800db7a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db46:	4b14      	ldr	r3, [pc, #80]	; (800db98 <vTaskDelay+0x64>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00c      	beq.n	800db68 <vTaskDelay+0x34>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	b672      	cpsid	i
 800db54:	f383 8811 	msr	BASEPRI, r3
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	b662      	cpsie	i
 800db62:	60bb      	str	r3, [r7, #8]
}
 800db64:	bf00      	nop
 800db66:	e7fe      	b.n	800db66 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800db68:	f000 f888 	bl	800dc7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db6c:	2100      	movs	r1, #0
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fde0 	bl	800e734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db74:	f000 f890 	bl	800dc98 <xTaskResumeAll>
 800db78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d107      	bne.n	800db90 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800db80:	4b06      	ldr	r3, [pc, #24]	; (800db9c <vTaskDelay+0x68>)
 800db82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db86:	601a      	str	r2, [r3, #0]
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db90:	bf00      	nop
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	20000d00 	.word	0x20000d00
 800db9c:	e000ed04 	.word	0xe000ed04

0800dba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b08a      	sub	sp, #40	; 0x28
 800dba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dba6:	2300      	movs	r3, #0
 800dba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dbae:	463a      	mov	r2, r7
 800dbb0:	1d39      	adds	r1, r7, #4
 800dbb2:	f107 0308 	add.w	r3, r7, #8
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7f4 fc04 	bl	80023c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	9202      	str	r2, [sp, #8]
 800dbc4:	9301      	str	r3, [sp, #4]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	9300      	str	r3, [sp, #0]
 800dbca:	2300      	movs	r3, #0
 800dbcc:	460a      	mov	r2, r1
 800dbce:	4923      	ldr	r1, [pc, #140]	; (800dc5c <vTaskStartScheduler+0xbc>)
 800dbd0:	4823      	ldr	r0, [pc, #140]	; (800dc60 <vTaskStartScheduler+0xc0>)
 800dbd2:	f7ff fe0b 	bl	800d7ec <xTaskCreateStatic>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	4a22      	ldr	r2, [pc, #136]	; (800dc64 <vTaskStartScheduler+0xc4>)
 800dbda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dbdc:	4b21      	ldr	r3, [pc, #132]	; (800dc64 <vTaskStartScheduler+0xc4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	e001      	b.n	800dbee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dbea:	2300      	movs	r3, #0
 800dbec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d11d      	bne.n	800dc30 <vTaskStartScheduler+0x90>
	__asm volatile
 800dbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf8:	b672      	cpsid	i
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	b662      	cpsie	i
 800dc08:	613b      	str	r3, [r7, #16]
}
 800dc0a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc0c:	4b16      	ldr	r3, [pc, #88]	; (800dc68 <vTaskStartScheduler+0xc8>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	334c      	adds	r3, #76	; 0x4c
 800dc12:	4a16      	ldr	r2, [pc, #88]	; (800dc6c <vTaskStartScheduler+0xcc>)
 800dc14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc16:	4b16      	ldr	r3, [pc, #88]	; (800dc70 <vTaskStartScheduler+0xd0>)
 800dc18:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc1e:	4b15      	ldr	r3, [pc, #84]	; (800dc74 <vTaskStartScheduler+0xd4>)
 800dc20:	2201      	movs	r2, #1
 800dc22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc24:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <vTaskStartScheduler+0xd8>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc2a:	f000 fe79 	bl	800e920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc2e:	e010      	b.n	800dc52 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc36:	d10c      	bne.n	800dc52 <vTaskStartScheduler+0xb2>
	__asm volatile
 800dc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3c:	b672      	cpsid	i
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	b662      	cpsie	i
 800dc4c:	60fb      	str	r3, [r7, #12]
}
 800dc4e:	bf00      	nop
 800dc50:	e7fe      	b.n	800dc50 <vTaskStartScheduler+0xb0>
}
 800dc52:	bf00      	nop
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	080156e0 	.word	0x080156e0
 800dc60:	0800e1d5 	.word	0x0800e1d5
 800dc64:	20000cfc 	.word	0x20000cfc
 800dc68:	20000bd8 	.word	0x20000bd8
 800dc6c:	20000074 	.word	0x20000074
 800dc70:	20000cf8 	.word	0x20000cf8
 800dc74:	20000ce4 	.word	0x20000ce4
 800dc78:	20000cdc 	.word	0x20000cdc

0800dc7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dc80:	4b04      	ldr	r3, [pc, #16]	; (800dc94 <vTaskSuspendAll+0x18>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	3301      	adds	r3, #1
 800dc86:	4a03      	ldr	r2, [pc, #12]	; (800dc94 <vTaskSuspendAll+0x18>)
 800dc88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dc8a:	bf00      	nop
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	20000d00 	.word	0x20000d00

0800dc98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dca2:	2300      	movs	r3, #0
 800dca4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dca6:	4b3c      	ldr	r3, [pc, #240]	; (800dd98 <xTaskResumeAll+0x100>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10c      	bne.n	800dcc8 <xTaskResumeAll+0x30>
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb2:	b672      	cpsid	i
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	b662      	cpsie	i
 800dcc2:	603b      	str	r3, [r7, #0]
}
 800dcc4:	bf00      	nop
 800dcc6:	e7fe      	b.n	800dcc6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dcc8:	f000 fea8 	bl	800ea1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dccc:	4b32      	ldr	r3, [pc, #200]	; (800dd98 <xTaskResumeAll+0x100>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	4a31      	ldr	r2, [pc, #196]	; (800dd98 <xTaskResumeAll+0x100>)
 800dcd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcd6:	4b30      	ldr	r3, [pc, #192]	; (800dd98 <xTaskResumeAll+0x100>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d155      	bne.n	800dd8a <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dcde:	4b2f      	ldr	r3, [pc, #188]	; (800dd9c <xTaskResumeAll+0x104>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d051      	beq.n	800dd8a <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dce6:	e02e      	b.n	800dd46 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dce8:	4b2d      	ldr	r3, [pc, #180]	; (800dda0 <xTaskResumeAll+0x108>)
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	3318      	adds	r3, #24
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fe ff67 	bl	800cbc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe ff62 	bl	800cbc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd08:	2201      	movs	r2, #1
 800dd0a:	409a      	lsls	r2, r3
 800dd0c:	4b25      	ldr	r3, [pc, #148]	; (800dda4 <xTaskResumeAll+0x10c>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	4a24      	ldr	r2, [pc, #144]	; (800dda4 <xTaskResumeAll+0x10c>)
 800dd14:	6013      	str	r3, [r2, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	4413      	add	r3, r2
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4a21      	ldr	r2, [pc, #132]	; (800dda8 <xTaskResumeAll+0x110>)
 800dd24:	441a      	add	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3304      	adds	r3, #4
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	4610      	mov	r0, r2
 800dd2e:	f7fe feee 	bl	800cb0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd36:	4b1d      	ldr	r3, [pc, #116]	; (800ddac <xTaskResumeAll+0x114>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d302      	bcc.n	800dd46 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dd40:	4b1b      	ldr	r3, [pc, #108]	; (800ddb0 <xTaskResumeAll+0x118>)
 800dd42:	2201      	movs	r2, #1
 800dd44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd46:	4b16      	ldr	r3, [pc, #88]	; (800dda0 <xTaskResumeAll+0x108>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1cc      	bne.n	800dce8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd54:	f000 faf4 	bl	800e340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dd58:	4b16      	ldr	r3, [pc, #88]	; (800ddb4 <xTaskResumeAll+0x11c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d010      	beq.n	800dd86 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd64:	f000 f828 	bl	800ddb8 <xTaskIncrementTick>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dd6e:	4b10      	ldr	r3, [pc, #64]	; (800ddb0 <xTaskResumeAll+0x118>)
 800dd70:	2201      	movs	r2, #1
 800dd72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1f1      	bne.n	800dd64 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800dd80:	4b0c      	ldr	r3, [pc, #48]	; (800ddb4 <xTaskResumeAll+0x11c>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd86:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <xTaskResumeAll+0x118>)
 800dd88:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd8a:	f000 fe7b 	bl	800ea84 <vPortExitCritical>

	return xAlreadyYielded;
 800dd8e:	687b      	ldr	r3, [r7, #4]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	20000d00 	.word	0x20000d00
 800dd9c:	20000cd8 	.word	0x20000cd8
 800dda0:	20000c98 	.word	0x20000c98
 800dda4:	20000ce0 	.word	0x20000ce0
 800dda8:	20000bdc 	.word	0x20000bdc
 800ddac:	20000bd8 	.word	0x20000bd8
 800ddb0:	20000cec 	.word	0x20000cec
 800ddb4:	20000ce8 	.word	0x20000ce8

0800ddb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddc2:	4b40      	ldr	r3, [pc, #256]	; (800dec4 <xTaskIncrementTick+0x10c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d171      	bne.n	800deae <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ddca:	4b3f      	ldr	r3, [pc, #252]	; (800dec8 <xTaskIncrementTick+0x110>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ddd2:	4a3d      	ldr	r2, [pc, #244]	; (800dec8 <xTaskIncrementTick+0x110>)
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d122      	bne.n	800de24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ddde:	4b3b      	ldr	r3, [pc, #236]	; (800decc <xTaskIncrementTick+0x114>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00c      	beq.n	800de02 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddec:	b672      	cpsid	i
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	b662      	cpsie	i
 800ddfc:	603b      	str	r3, [r7, #0]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <xTaskIncrementTick+0x48>
 800de02:	4b32      	ldr	r3, [pc, #200]	; (800decc <xTaskIncrementTick+0x114>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	60fb      	str	r3, [r7, #12]
 800de08:	4b31      	ldr	r3, [pc, #196]	; (800ded0 <xTaskIncrementTick+0x118>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4a2f      	ldr	r2, [pc, #188]	; (800decc <xTaskIncrementTick+0x114>)
 800de0e:	6013      	str	r3, [r2, #0]
 800de10:	4a2f      	ldr	r2, [pc, #188]	; (800ded0 <xTaskIncrementTick+0x118>)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6013      	str	r3, [r2, #0]
 800de16:	4b2f      	ldr	r3, [pc, #188]	; (800ded4 <xTaskIncrementTick+0x11c>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3301      	adds	r3, #1
 800de1c:	4a2d      	ldr	r2, [pc, #180]	; (800ded4 <xTaskIncrementTick+0x11c>)
 800de1e:	6013      	str	r3, [r2, #0]
 800de20:	f000 fa8e 	bl	800e340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de24:	4b2c      	ldr	r3, [pc, #176]	; (800ded8 <xTaskIncrementTick+0x120>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	693a      	ldr	r2, [r7, #16]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d344      	bcc.n	800deb8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de2e:	4b27      	ldr	r3, [pc, #156]	; (800decc <xTaskIncrementTick+0x114>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d104      	bne.n	800de42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de38:	4b27      	ldr	r3, [pc, #156]	; (800ded8 <xTaskIncrementTick+0x120>)
 800de3a:	f04f 32ff 	mov.w	r2, #4294967295
 800de3e:	601a      	str	r2, [r3, #0]
					break;
 800de40:	e03a      	b.n	800deb8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de42:	4b22      	ldr	r3, [pc, #136]	; (800decc <xTaskIncrementTick+0x114>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de52:	693a      	ldr	r2, [r7, #16]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	429a      	cmp	r2, r3
 800de58:	d203      	bcs.n	800de62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de5a:	4a1f      	ldr	r2, [pc, #124]	; (800ded8 <xTaskIncrementTick+0x120>)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de60:	e02a      	b.n	800deb8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	3304      	adds	r3, #4
 800de66:	4618      	mov	r0, r3
 800de68:	f7fe feae 	bl	800cbc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de70:	2b00      	cmp	r3, #0
 800de72:	d004      	beq.n	800de7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	3318      	adds	r3, #24
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fe fea5 	bl	800cbc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de82:	2201      	movs	r2, #1
 800de84:	409a      	lsls	r2, r3
 800de86:	4b15      	ldr	r3, [pc, #84]	; (800dedc <xTaskIncrementTick+0x124>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	4a13      	ldr	r2, [pc, #76]	; (800dedc <xTaskIncrementTick+0x124>)
 800de8e:	6013      	str	r3, [r2, #0]
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de94:	4613      	mov	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4a10      	ldr	r2, [pc, #64]	; (800dee0 <xTaskIncrementTick+0x128>)
 800de9e:	441a      	add	r2, r3
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	3304      	adds	r3, #4
 800dea4:	4619      	mov	r1, r3
 800dea6:	4610      	mov	r0, r2
 800dea8:	f7fe fe31 	bl	800cb0e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800deac:	e7bf      	b.n	800de2e <xTaskIncrementTick+0x76>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800deae:	4b0d      	ldr	r3, [pc, #52]	; (800dee4 <xTaskIncrementTick+0x12c>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	3301      	adds	r3, #1
 800deb4:	4a0b      	ldr	r2, [pc, #44]	; (800dee4 <xTaskIncrementTick+0x12c>)
 800deb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800deb8:	697b      	ldr	r3, [r7, #20]
}
 800deba:	4618      	mov	r0, r3
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	20000d00 	.word	0x20000d00
 800dec8:	20000cdc 	.word	0x20000cdc
 800decc:	20000c90 	.word	0x20000c90
 800ded0:	20000c94 	.word	0x20000c94
 800ded4:	20000cf0 	.word	0x20000cf0
 800ded8:	20000cf8 	.word	0x20000cf8
 800dedc:	20000ce0 	.word	0x20000ce0
 800dee0:	20000bdc 	.word	0x20000bdc
 800dee4:	20000ce8 	.word	0x20000ce8

0800dee8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dee8:	b480      	push	{r7}
 800deea:	b087      	sub	sp, #28
 800deec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800deee:	4b2a      	ldr	r3, [pc, #168]	; (800df98 <vTaskSwitchContext+0xb0>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d003      	beq.n	800defe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800def6:	4b29      	ldr	r3, [pc, #164]	; (800df9c <vTaskSwitchContext+0xb4>)
 800def8:	2201      	movs	r2, #1
 800defa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800defc:	e046      	b.n	800df8c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800defe:	4b27      	ldr	r3, [pc, #156]	; (800df9c <vTaskSwitchContext+0xb4>)
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df04:	4b26      	ldr	r3, [pc, #152]	; (800dfa0 <vTaskSwitchContext+0xb8>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	fab3 f383 	clz	r3, r3
 800df10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800df12:	7afb      	ldrb	r3, [r7, #11]
 800df14:	f1c3 031f 	rsb	r3, r3, #31
 800df18:	617b      	str	r3, [r7, #20]
 800df1a:	4922      	ldr	r1, [pc, #136]	; (800dfa4 <vTaskSwitchContext+0xbc>)
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	4613      	mov	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	440b      	add	r3, r1
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10c      	bne.n	800df48 <vTaskSwitchContext+0x60>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	b672      	cpsid	i
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	b662      	cpsie	i
 800df42:	607b      	str	r3, [r7, #4]
}
 800df44:	bf00      	nop
 800df46:	e7fe      	b.n	800df46 <vTaskSwitchContext+0x5e>
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	4613      	mov	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	4413      	add	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	4a14      	ldr	r2, [pc, #80]	; (800dfa4 <vTaskSwitchContext+0xbc>)
 800df54:	4413      	add	r3, r2
 800df56:	613b      	str	r3, [r7, #16]
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	605a      	str	r2, [r3, #4]
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	685a      	ldr	r2, [r3, #4]
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	3308      	adds	r3, #8
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d104      	bne.n	800df78 <vTaskSwitchContext+0x90>
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	685a      	ldr	r2, [r3, #4]
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	605a      	str	r2, [r3, #4]
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	4a0a      	ldr	r2, [pc, #40]	; (800dfa8 <vTaskSwitchContext+0xc0>)
 800df80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df82:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <vTaskSwitchContext+0xc0>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	334c      	adds	r3, #76	; 0x4c
 800df88:	4a08      	ldr	r2, [pc, #32]	; (800dfac <vTaskSwitchContext+0xc4>)
 800df8a:	6013      	str	r3, [r2, #0]
}
 800df8c:	bf00      	nop
 800df8e:	371c      	adds	r7, #28
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr
 800df98:	20000d00 	.word	0x20000d00
 800df9c:	20000cec 	.word	0x20000cec
 800dfa0:	20000ce0 	.word	0x20000ce0
 800dfa4:	20000bdc 	.word	0x20000bdc
 800dfa8:	20000bd8 	.word	0x20000bd8
 800dfac:	20000074 	.word	0x20000074

0800dfb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10c      	bne.n	800dfda <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc4:	b672      	cpsid	i
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	b662      	cpsie	i
 800dfd4:	60fb      	str	r3, [r7, #12]
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfda:	4b07      	ldr	r3, [pc, #28]	; (800dff8 <vTaskPlaceOnEventList+0x48>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3318      	adds	r3, #24
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7fe fdb7 	bl	800cb56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfe8:	2101      	movs	r1, #1
 800dfea:	6838      	ldr	r0, [r7, #0]
 800dfec:	f000 fba2 	bl	800e734 <prvAddCurrentTaskToDelayedList>
}
 800dff0:	bf00      	nop
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20000bd8 	.word	0x20000bd8

0800dffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10c      	bne.n	800e02c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	b672      	cpsid	i
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	b662      	cpsie	i
 800e026:	60fb      	str	r3, [r7, #12]
}
 800e028:	bf00      	nop
 800e02a:	e7fe      	b.n	800e02a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	3318      	adds	r3, #24
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe fdc9 	bl	800cbc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e036:	4b1d      	ldr	r3, [pc, #116]	; (800e0ac <xTaskRemoveFromEventList+0xb0>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d11c      	bne.n	800e078 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	3304      	adds	r3, #4
 800e042:	4618      	mov	r0, r3
 800e044:	f7fe fdc0 	bl	800cbc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04c:	2201      	movs	r2, #1
 800e04e:	409a      	lsls	r2, r3
 800e050:	4b17      	ldr	r3, [pc, #92]	; (800e0b0 <xTaskRemoveFromEventList+0xb4>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4313      	orrs	r3, r2
 800e056:	4a16      	ldr	r2, [pc, #88]	; (800e0b0 <xTaskRemoveFromEventList+0xb4>)
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05e:	4613      	mov	r3, r2
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4413      	add	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4a13      	ldr	r2, [pc, #76]	; (800e0b4 <xTaskRemoveFromEventList+0xb8>)
 800e068:	441a      	add	r2, r3
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	3304      	adds	r3, #4
 800e06e:	4619      	mov	r1, r3
 800e070:	4610      	mov	r0, r2
 800e072:	f7fe fd4c 	bl	800cb0e <vListInsertEnd>
 800e076:	e005      	b.n	800e084 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	3318      	adds	r3, #24
 800e07c:	4619      	mov	r1, r3
 800e07e:	480e      	ldr	r0, [pc, #56]	; (800e0b8 <xTaskRemoveFromEventList+0xbc>)
 800e080:	f7fe fd45 	bl	800cb0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e088:	4b0c      	ldr	r3, [pc, #48]	; (800e0bc <xTaskRemoveFromEventList+0xc0>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08e:	429a      	cmp	r2, r3
 800e090:	d905      	bls.n	800e09e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e092:	2301      	movs	r3, #1
 800e094:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e096:	4b0a      	ldr	r3, [pc, #40]	; (800e0c0 <xTaskRemoveFromEventList+0xc4>)
 800e098:	2201      	movs	r2, #1
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	e001      	b.n	800e0a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0a2:	697b      	ldr	r3, [r7, #20]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	20000d00 	.word	0x20000d00
 800e0b0:	20000ce0 	.word	0x20000ce0
 800e0b4:	20000bdc 	.word	0x20000bdc
 800e0b8:	20000c98 	.word	0x20000c98
 800e0bc:	20000bd8 	.word	0x20000bd8
 800e0c0:	20000cec 	.word	0x20000cec

0800e0c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0cc:	4b06      	ldr	r3, [pc, #24]	; (800e0e8 <vTaskInternalSetTimeOutState+0x24>)
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0d4:	4b05      	ldr	r3, [pc, #20]	; (800e0ec <vTaskInternalSetTimeOutState+0x28>)
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	605a      	str	r2, [r3, #4]
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	20000cf0 	.word	0x20000cf0
 800e0ec:	20000cdc 	.word	0x20000cdc

0800e0f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10c      	bne.n	800e11a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	b672      	cpsid	i
 800e106:	f383 8811 	msr	BASEPRI, r3
 800e10a:	f3bf 8f6f 	isb	sy
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	b662      	cpsie	i
 800e114:	613b      	str	r3, [r7, #16]
}
 800e116:	bf00      	nop
 800e118:	e7fe      	b.n	800e118 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10c      	bne.n	800e13a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	b672      	cpsid	i
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	b662      	cpsie	i
 800e134:	60fb      	str	r3, [r7, #12]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e13a:	f000 fc6f 	bl	800ea1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e13e:	4b1d      	ldr	r3, [pc, #116]	; (800e1b4 <xTaskCheckForTimeOut+0xc4>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	69ba      	ldr	r2, [r7, #24]
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e156:	d102      	bne.n	800e15e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e158:	2300      	movs	r3, #0
 800e15a:	61fb      	str	r3, [r7, #28]
 800e15c:	e023      	b.n	800e1a6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	4b15      	ldr	r3, [pc, #84]	; (800e1b8 <xTaskCheckForTimeOut+0xc8>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	429a      	cmp	r2, r3
 800e168:	d007      	beq.n	800e17a <xTaskCheckForTimeOut+0x8a>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	69ba      	ldr	r2, [r7, #24]
 800e170:	429a      	cmp	r2, r3
 800e172:	d302      	bcc.n	800e17a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e174:	2301      	movs	r3, #1
 800e176:	61fb      	str	r3, [r7, #28]
 800e178:	e015      	b.n	800e1a6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	429a      	cmp	r2, r3
 800e182:	d20b      	bcs.n	800e19c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	1ad2      	subs	r2, r2, r3
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff ff97 	bl	800e0c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e196:	2300      	movs	r3, #0
 800e198:	61fb      	str	r3, [r7, #28]
 800e19a:	e004      	b.n	800e1a6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1a6:	f000 fc6d 	bl	800ea84 <vPortExitCritical>

	return xReturn;
 800e1aa:	69fb      	ldr	r3, [r7, #28]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3720      	adds	r7, #32
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20000cdc 	.word	0x20000cdc
 800e1b8:	20000cf0 	.word	0x20000cf0

0800e1bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1bc:	b480      	push	{r7}
 800e1be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1c0:	4b03      	ldr	r3, [pc, #12]	; (800e1d0 <vTaskMissedYield+0x14>)
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	601a      	str	r2, [r3, #0]
}
 800e1c6:	bf00      	nop
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	20000cec 	.word	0x20000cec

0800e1d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1dc:	f000 f84c 	bl	800e278 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800e1e0:	4b04      	ldr	r3, [pc, #16]	; (800e1f4 <prvIdleTask+0x20>)
 800e1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1e6:	601a      	str	r2, [r3, #0]
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e1f0:	e7f4      	b.n	800e1dc <prvIdleTask+0x8>
 800e1f2:	bf00      	nop
 800e1f4:	e000ed04 	.word	0xe000ed04

0800e1f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1fe:	2300      	movs	r3, #0
 800e200:	607b      	str	r3, [r7, #4]
 800e202:	e00c      	b.n	800e21e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	4613      	mov	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4a12      	ldr	r2, [pc, #72]	; (800e258 <prvInitialiseTaskLists+0x60>)
 800e210:	4413      	add	r3, r2
 800e212:	4618      	mov	r0, r3
 800e214:	f7fe fc4e 	bl	800cab4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	3301      	adds	r3, #1
 800e21c:	607b      	str	r3, [r7, #4]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2b06      	cmp	r3, #6
 800e222:	d9ef      	bls.n	800e204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e224:	480d      	ldr	r0, [pc, #52]	; (800e25c <prvInitialiseTaskLists+0x64>)
 800e226:	f7fe fc45 	bl	800cab4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e22a:	480d      	ldr	r0, [pc, #52]	; (800e260 <prvInitialiseTaskLists+0x68>)
 800e22c:	f7fe fc42 	bl	800cab4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e230:	480c      	ldr	r0, [pc, #48]	; (800e264 <prvInitialiseTaskLists+0x6c>)
 800e232:	f7fe fc3f 	bl	800cab4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e236:	480c      	ldr	r0, [pc, #48]	; (800e268 <prvInitialiseTaskLists+0x70>)
 800e238:	f7fe fc3c 	bl	800cab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e23c:	480b      	ldr	r0, [pc, #44]	; (800e26c <prvInitialiseTaskLists+0x74>)
 800e23e:	f7fe fc39 	bl	800cab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e242:	4b0b      	ldr	r3, [pc, #44]	; (800e270 <prvInitialiseTaskLists+0x78>)
 800e244:	4a05      	ldr	r2, [pc, #20]	; (800e25c <prvInitialiseTaskLists+0x64>)
 800e246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e248:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <prvInitialiseTaskLists+0x7c>)
 800e24a:	4a05      	ldr	r2, [pc, #20]	; (800e260 <prvInitialiseTaskLists+0x68>)
 800e24c:	601a      	str	r2, [r3, #0]
}
 800e24e:	bf00      	nop
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	20000bdc 	.word	0x20000bdc
 800e25c:	20000c68 	.word	0x20000c68
 800e260:	20000c7c 	.word	0x20000c7c
 800e264:	20000c98 	.word	0x20000c98
 800e268:	20000cac 	.word	0x20000cac
 800e26c:	20000cc4 	.word	0x20000cc4
 800e270:	20000c90 	.word	0x20000c90
 800e274:	20000c94 	.word	0x20000c94

0800e278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e27e:	e019      	b.n	800e2b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e280:	f000 fbcc 	bl	800ea1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e284:	4b10      	ldr	r3, [pc, #64]	; (800e2c8 <prvCheckTasksWaitingTermination+0x50>)
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	3304      	adds	r3, #4
 800e290:	4618      	mov	r0, r3
 800e292:	f7fe fc99 	bl	800cbc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e296:	4b0d      	ldr	r3, [pc, #52]	; (800e2cc <prvCheckTasksWaitingTermination+0x54>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3b01      	subs	r3, #1
 800e29c:	4a0b      	ldr	r2, [pc, #44]	; (800e2cc <prvCheckTasksWaitingTermination+0x54>)
 800e29e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2a0:	4b0b      	ldr	r3, [pc, #44]	; (800e2d0 <prvCheckTasksWaitingTermination+0x58>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3b01      	subs	r3, #1
 800e2a6:	4a0a      	ldr	r2, [pc, #40]	; (800e2d0 <prvCheckTasksWaitingTermination+0x58>)
 800e2a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2aa:	f000 fbeb 	bl	800ea84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 f810 	bl	800e2d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2b4:	4b06      	ldr	r3, [pc, #24]	; (800e2d0 <prvCheckTasksWaitingTermination+0x58>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1e1      	bne.n	800e280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2bc:	bf00      	nop
 800e2be:	bf00      	nop
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	20000cac 	.word	0x20000cac
 800e2cc:	20000cd8 	.word	0x20000cd8
 800e2d0:	20000cc0 	.word	0x20000cc0

0800e2d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	334c      	adds	r3, #76	; 0x4c
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f001 fea3 	bl	801002c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d108      	bne.n	800e302 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 fd87 	bl	800ee08 <vPortFree>
				vPortFree( pxTCB );
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 fd84 	bl	800ee08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e300:	e01a      	b.n	800e338 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d103      	bne.n	800e314 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 fd7b 	bl	800ee08 <vPortFree>
	}
 800e312:	e011      	b.n	800e338 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d00c      	beq.n	800e338 <prvDeleteTCB+0x64>
	__asm volatile
 800e31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e322:	b672      	cpsid	i
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	b662      	cpsie	i
 800e332:	60fb      	str	r3, [r7, #12]
}
 800e334:	bf00      	nop
 800e336:	e7fe      	b.n	800e336 <prvDeleteTCB+0x62>
	}
 800e338:	bf00      	nop
 800e33a:	3710      	adds	r7, #16
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e346:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <prvResetNextTaskUnblockTime+0x38>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d104      	bne.n	800e35a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e350:	4b0a      	ldr	r3, [pc, #40]	; (800e37c <prvResetNextTaskUnblockTime+0x3c>)
 800e352:	f04f 32ff 	mov.w	r2, #4294967295
 800e356:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e358:	e008      	b.n	800e36c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e35a:	4b07      	ldr	r3, [pc, #28]	; (800e378 <prvResetNextTaskUnblockTime+0x38>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	4a04      	ldr	r2, [pc, #16]	; (800e37c <prvResetNextTaskUnblockTime+0x3c>)
 800e36a:	6013      	str	r3, [r2, #0]
}
 800e36c:	bf00      	nop
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	20000c90 	.word	0x20000c90
 800e37c:	20000cf8 	.word	0x20000cf8

0800e380 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e386:	4b0b      	ldr	r3, [pc, #44]	; (800e3b4 <xTaskGetSchedulerState+0x34>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d102      	bne.n	800e394 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e38e:	2301      	movs	r3, #1
 800e390:	607b      	str	r3, [r7, #4]
 800e392:	e008      	b.n	800e3a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e394:	4b08      	ldr	r3, [pc, #32]	; (800e3b8 <xTaskGetSchedulerState+0x38>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d102      	bne.n	800e3a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e39c:	2302      	movs	r3, #2
 800e39e:	607b      	str	r3, [r7, #4]
 800e3a0:	e001      	b.n	800e3a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3a6:	687b      	ldr	r3, [r7, #4]
	}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	370c      	adds	r7, #12
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b2:	4770      	bx	lr
 800e3b4:	20000ce4 	.word	0x20000ce4
 800e3b8:	20000d00 	.word	0x20000d00

0800e3bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d069      	beq.n	800e4a6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d6:	4b36      	ldr	r3, [pc, #216]	; (800e4b0 <xTaskPriorityInherit+0xf4>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d259      	bcs.n	800e494 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	db06      	blt.n	800e3f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3e8:	4b31      	ldr	r3, [pc, #196]	; (800e4b0 <xTaskPriorityInherit+0xf4>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ee:	f1c3 0207 	rsb	r2, r3, #7
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	6959      	ldr	r1, [r3, #20]
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fe:	4613      	mov	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4413      	add	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4a2b      	ldr	r2, [pc, #172]	; (800e4b4 <xTaskPriorityInherit+0xf8>)
 800e408:	4413      	add	r3, r2
 800e40a:	4299      	cmp	r1, r3
 800e40c:	d13a      	bne.n	800e484 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	3304      	adds	r3, #4
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe fbd8 	bl	800cbc8 <uxListRemove>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d115      	bne.n	800e44a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e422:	4924      	ldr	r1, [pc, #144]	; (800e4b4 <xTaskPriorityInherit+0xf8>)
 800e424:	4613      	mov	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4413      	add	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	440b      	add	r3, r1
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10a      	bne.n	800e44a <xTaskPriorityInherit+0x8e>
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e438:	2201      	movs	r2, #1
 800e43a:	fa02 f303 	lsl.w	r3, r2, r3
 800e43e:	43da      	mvns	r2, r3
 800e440:	4b1d      	ldr	r3, [pc, #116]	; (800e4b8 <xTaskPriorityInherit+0xfc>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4013      	ands	r3, r2
 800e446:	4a1c      	ldr	r2, [pc, #112]	; (800e4b8 <xTaskPriorityInherit+0xfc>)
 800e448:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e44a:	4b19      	ldr	r3, [pc, #100]	; (800e4b0 <xTaskPriorityInherit+0xf4>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e458:	2201      	movs	r2, #1
 800e45a:	409a      	lsls	r2, r3
 800e45c:	4b16      	ldr	r3, [pc, #88]	; (800e4b8 <xTaskPriorityInherit+0xfc>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4313      	orrs	r3, r2
 800e462:	4a15      	ldr	r2, [pc, #84]	; (800e4b8 <xTaskPriorityInherit+0xfc>)
 800e464:	6013      	str	r3, [r2, #0]
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46a:	4613      	mov	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	4a10      	ldr	r2, [pc, #64]	; (800e4b4 <xTaskPriorityInherit+0xf8>)
 800e474:	441a      	add	r2, r3
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	3304      	adds	r3, #4
 800e47a:	4619      	mov	r1, r3
 800e47c:	4610      	mov	r0, r2
 800e47e:	f7fe fb46 	bl	800cb0e <vListInsertEnd>
 800e482:	e004      	b.n	800e48e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e484:	4b0a      	ldr	r3, [pc, #40]	; (800e4b0 <xTaskPriorityInherit+0xf4>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e48e:	2301      	movs	r3, #1
 800e490:	60fb      	str	r3, [r7, #12]
 800e492:	e008      	b.n	800e4a6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e498:	4b05      	ldr	r3, [pc, #20]	; (800e4b0 <xTaskPriorityInherit+0xf4>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d201      	bcs.n	800e4a6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
	}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	20000bd8 	.word	0x20000bd8
 800e4b4:	20000bdc 	.word	0x20000bdc
 800e4b8:	20000ce0 	.word	0x20000ce0

0800e4bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b086      	sub	sp, #24
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d072      	beq.n	800e5b8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4d2:	4b3c      	ldr	r3, [pc, #240]	; (800e5c4 <xTaskPriorityDisinherit+0x108>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	693a      	ldr	r2, [r7, #16]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d00c      	beq.n	800e4f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e0:	b672      	cpsid	i
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	b662      	cpsie	i
 800e4f0:	60fb      	str	r3, [r7, #12]
}
 800e4f2:	bf00      	nop
 800e4f4:	e7fe      	b.n	800e4f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d10c      	bne.n	800e518 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e502:	b672      	cpsid	i
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	b662      	cpsie	i
 800e512:	60bb      	str	r3, [r7, #8]
}
 800e514:	bf00      	nop
 800e516:	e7fe      	b.n	800e516 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e51c:	1e5a      	subs	r2, r3, #1
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d044      	beq.n	800e5b8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e532:	2b00      	cmp	r3, #0
 800e534:	d140      	bne.n	800e5b8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	3304      	adds	r3, #4
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fe fb44 	bl	800cbc8 <uxListRemove>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d115      	bne.n	800e572 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e54a:	491f      	ldr	r1, [pc, #124]	; (800e5c8 <xTaskPriorityDisinherit+0x10c>)
 800e54c:	4613      	mov	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4413      	add	r3, r2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	440b      	add	r3, r1
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10a      	bne.n	800e572 <xTaskPriorityDisinherit+0xb6>
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e560:	2201      	movs	r2, #1
 800e562:	fa02 f303 	lsl.w	r3, r2, r3
 800e566:	43da      	mvns	r2, r3
 800e568:	4b18      	ldr	r3, [pc, #96]	; (800e5cc <xTaskPriorityDisinherit+0x110>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4013      	ands	r3, r2
 800e56e:	4a17      	ldr	r2, [pc, #92]	; (800e5cc <xTaskPriorityDisinherit+0x110>)
 800e570:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57e:	f1c3 0207 	rsb	r2, r3, #7
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e58a:	2201      	movs	r2, #1
 800e58c:	409a      	lsls	r2, r3
 800e58e:	4b0f      	ldr	r3, [pc, #60]	; (800e5cc <xTaskPriorityDisinherit+0x110>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4313      	orrs	r3, r2
 800e594:	4a0d      	ldr	r2, [pc, #52]	; (800e5cc <xTaskPriorityDisinherit+0x110>)
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59c:	4613      	mov	r3, r2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	4413      	add	r3, r2
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	4a08      	ldr	r2, [pc, #32]	; (800e5c8 <xTaskPriorityDisinherit+0x10c>)
 800e5a6:	441a      	add	r2, r3
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	3304      	adds	r3, #4
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	f7fe faad 	bl	800cb0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5b8:	697b      	ldr	r3, [r7, #20]
	}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3718      	adds	r7, #24
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000bd8 	.word	0x20000bd8
 800e5c8:	20000bdc 	.word	0x20000bdc
 800e5cc:	20000ce0 	.word	0x20000ce0

0800e5d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b088      	sub	sp, #32
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f000 8087 	beq.w	800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10c      	bne.n	800e60c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f6:	b672      	cpsid	i
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	b662      	cpsie	i
 800e606:	60fb      	str	r3, [r7, #12]
}
 800e608:	bf00      	nop
 800e60a:	e7fe      	b.n	800e60a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	d902      	bls.n	800e61c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	61fb      	str	r3, [r7, #28]
 800e61a:	e002      	b.n	800e622 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e620:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e626:	69fa      	ldr	r2, [r7, #28]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d065      	beq.n	800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e630:	697a      	ldr	r2, [r7, #20]
 800e632:	429a      	cmp	r2, r3
 800e634:	d160      	bne.n	800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e636:	4b32      	ldr	r3, [pc, #200]	; (800e700 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d10c      	bne.n	800e65a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e644:	b672      	cpsid	i
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	b662      	cpsie	i
 800e654:	60bb      	str	r3, [r7, #8]
}
 800e656:	bf00      	nop
 800e658:	e7fe      	b.n	800e658 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	69fa      	ldr	r2, [r7, #28]
 800e664:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	db04      	blt.n	800e678 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	f1c3 0207 	rsb	r2, r3, #7
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	6959      	ldr	r1, [r3, #20]
 800e67c:	693a      	ldr	r2, [r7, #16]
 800e67e:	4613      	mov	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4413      	add	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4a1f      	ldr	r2, [pc, #124]	; (800e704 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e688:	4413      	add	r3, r2
 800e68a:	4299      	cmp	r1, r3
 800e68c:	d134      	bne.n	800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	3304      	adds	r3, #4
 800e692:	4618      	mov	r0, r3
 800e694:	f7fe fa98 	bl	800cbc8 <uxListRemove>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d115      	bne.n	800e6ca <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a2:	4918      	ldr	r1, [pc, #96]	; (800e704 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4413      	add	r3, r2
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	440b      	add	r3, r1
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10a      	bne.n	800e6ca <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e6be:	43da      	mvns	r2, r3
 800e6c0:	4b11      	ldr	r3, [pc, #68]	; (800e708 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	4a10      	ldr	r2, [pc, #64]	; (800e708 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e6c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	409a      	lsls	r2, r3
 800e6d2:	4b0d      	ldr	r3, [pc, #52]	; (800e708 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	4a0b      	ldr	r2, [pc, #44]	; (800e708 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e6da:	6013      	str	r3, [r2, #0]
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	4a06      	ldr	r2, [pc, #24]	; (800e704 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e6ea:	441a      	add	r2, r3
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	f7fe fa0b 	bl	800cb0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6f8:	bf00      	nop
 800e6fa:	3720      	adds	r7, #32
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	20000bd8 	.word	0x20000bd8
 800e704:	20000bdc 	.word	0x20000bdc
 800e708:	20000ce0 	.word	0x20000ce0

0800e70c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e710:	4b07      	ldr	r3, [pc, #28]	; (800e730 <pvTaskIncrementMutexHeldCount+0x24>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d004      	beq.n	800e722 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e718:	4b05      	ldr	r3, [pc, #20]	; (800e730 <pvTaskIncrementMutexHeldCount+0x24>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e71e:	3201      	adds	r2, #1
 800e720:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e722:	4b03      	ldr	r3, [pc, #12]	; (800e730 <pvTaskIncrementMutexHeldCount+0x24>)
 800e724:	681b      	ldr	r3, [r3, #0]
	}
 800e726:	4618      	mov	r0, r3
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr
 800e730:	20000bd8 	.word	0x20000bd8

0800e734 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e73e:	4b29      	ldr	r3, [pc, #164]	; (800e7e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e744:	4b28      	ldr	r3, [pc, #160]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3304      	adds	r3, #4
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fe fa3c 	bl	800cbc8 <uxListRemove>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10b      	bne.n	800e76e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e756:	4b24      	ldr	r3, [pc, #144]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e75c:	2201      	movs	r2, #1
 800e75e:	fa02 f303 	lsl.w	r3, r2, r3
 800e762:	43da      	mvns	r2, r3
 800e764:	4b21      	ldr	r3, [pc, #132]	; (800e7ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4013      	ands	r3, r2
 800e76a:	4a20      	ldr	r2, [pc, #128]	; (800e7ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800e76c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e774:	d10a      	bne.n	800e78c <prvAddCurrentTaskToDelayedList+0x58>
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d007      	beq.n	800e78c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e77c:	4b1a      	ldr	r3, [pc, #104]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3304      	adds	r3, #4
 800e782:	4619      	mov	r1, r3
 800e784:	481a      	ldr	r0, [pc, #104]	; (800e7f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e786:	f7fe f9c2 	bl	800cb0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e78a:	e026      	b.n	800e7da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4413      	add	r3, r2
 800e792:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e794:	4b14      	ldr	r3, [pc, #80]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d209      	bcs.n	800e7b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7a4:	4b13      	ldr	r3, [pc, #76]	; (800e7f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	4b0f      	ldr	r3, [pc, #60]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	f7fe f9d0 	bl	800cb56 <vListInsert>
}
 800e7b6:	e010      	b.n	800e7da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7b8:	4b0f      	ldr	r3, [pc, #60]	; (800e7f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	4b0a      	ldr	r3, [pc, #40]	; (800e7e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	f7fe f9c6 	bl	800cb56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e7ca:	4b0c      	ldr	r3, [pc, #48]	; (800e7fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d202      	bcs.n	800e7da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e7d4:	4a09      	ldr	r2, [pc, #36]	; (800e7fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	6013      	str	r3, [r2, #0]
}
 800e7da:	bf00      	nop
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	20000cdc 	.word	0x20000cdc
 800e7e8:	20000bd8 	.word	0x20000bd8
 800e7ec:	20000ce0 	.word	0x20000ce0
 800e7f0:	20000cc4 	.word	0x20000cc4
 800e7f4:	20000c94 	.word	0x20000c94
 800e7f8:	20000c90 	.word	0x20000c90
 800e7fc:	20000cf8 	.word	0x20000cf8

0800e800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	3b04      	subs	r3, #4
 800e810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3b04      	subs	r3, #4
 800e81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	f023 0201 	bic.w	r2, r3, #1
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	3b04      	subs	r3, #4
 800e82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e830:	4a0c      	ldr	r2, [pc, #48]	; (800e864 <pxPortInitialiseStack+0x64>)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3b14      	subs	r3, #20
 800e83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	3b04      	subs	r3, #4
 800e846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f06f 0202 	mvn.w	r2, #2
 800e84e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	3b20      	subs	r3, #32
 800e854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e856:	68fb      	ldr	r3, [r7, #12]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	0800e869 	.word	0x0800e869

0800e868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e868:	b480      	push	{r7}
 800e86a:	b085      	sub	sp, #20
 800e86c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e872:	4b14      	ldr	r3, [pc, #80]	; (800e8c4 <prvTaskExitError+0x5c>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e87a:	d00c      	beq.n	800e896 <prvTaskExitError+0x2e>
	__asm volatile
 800e87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e880:	b672      	cpsid	i
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	b662      	cpsie	i
 800e890:	60fb      	str	r3, [r7, #12]
}
 800e892:	bf00      	nop
 800e894:	e7fe      	b.n	800e894 <prvTaskExitError+0x2c>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89a:	b672      	cpsid	i
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	b662      	cpsie	i
 800e8aa:	60bb      	str	r3, [r7, #8]
}
 800e8ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e8ae:	bf00      	nop
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d0fc      	beq.n	800e8b0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e8b6:	bf00      	nop
 800e8b8:	bf00      	nop
 800e8ba:	3714      	adds	r7, #20
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr
 800e8c4:	20000018 	.word	0x20000018
	...

0800e8d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e8d0:	4b07      	ldr	r3, [pc, #28]	; (800e8f0 <pxCurrentTCBConst2>)
 800e8d2:	6819      	ldr	r1, [r3, #0]
 800e8d4:	6808      	ldr	r0, [r1, #0]
 800e8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8da:	f380 8809 	msr	PSP, r0
 800e8de:	f3bf 8f6f 	isb	sy
 800e8e2:	f04f 0000 	mov.w	r0, #0
 800e8e6:	f380 8811 	msr	BASEPRI, r0
 800e8ea:	4770      	bx	lr
 800e8ec:	f3af 8000 	nop.w

0800e8f0 <pxCurrentTCBConst2>:
 800e8f0:	20000bd8 	.word	0x20000bd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8f4:	bf00      	nop
 800e8f6:	bf00      	nop

0800e8f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8f8:	4808      	ldr	r0, [pc, #32]	; (800e91c <prvPortStartFirstTask+0x24>)
 800e8fa:	6800      	ldr	r0, [r0, #0]
 800e8fc:	6800      	ldr	r0, [r0, #0]
 800e8fe:	f380 8808 	msr	MSP, r0
 800e902:	f04f 0000 	mov.w	r0, #0
 800e906:	f380 8814 	msr	CONTROL, r0
 800e90a:	b662      	cpsie	i
 800e90c:	b661      	cpsie	f
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	f3bf 8f6f 	isb	sy
 800e916:	df00      	svc	0
 800e918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e91a:	bf00      	nop
 800e91c:	e000ed08 	.word	0xe000ed08

0800e920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e926:	4b37      	ldr	r3, [pc, #220]	; (800ea04 <xPortStartScheduler+0xe4>)
 800e928:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	22ff      	movs	r2, #255	; 0xff
 800e936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e940:	78fb      	ldrb	r3, [r7, #3]
 800e942:	b2db      	uxtb	r3, r3
 800e944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	4b2f      	ldr	r3, [pc, #188]	; (800ea08 <xPortStartScheduler+0xe8>)
 800e94c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e94e:	4b2f      	ldr	r3, [pc, #188]	; (800ea0c <xPortStartScheduler+0xec>)
 800e950:	2207      	movs	r2, #7
 800e952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e954:	e009      	b.n	800e96a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e956:	4b2d      	ldr	r3, [pc, #180]	; (800ea0c <xPortStartScheduler+0xec>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	4a2b      	ldr	r2, [pc, #172]	; (800ea0c <xPortStartScheduler+0xec>)
 800e95e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e960:	78fb      	ldrb	r3, [r7, #3]
 800e962:	b2db      	uxtb	r3, r3
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	b2db      	uxtb	r3, r3
 800e968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e96a:	78fb      	ldrb	r3, [r7, #3]
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e972:	2b80      	cmp	r3, #128	; 0x80
 800e974:	d0ef      	beq.n	800e956 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e976:	4b25      	ldr	r3, [pc, #148]	; (800ea0c <xPortStartScheduler+0xec>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f1c3 0307 	rsb	r3, r3, #7
 800e97e:	2b04      	cmp	r3, #4
 800e980:	d00c      	beq.n	800e99c <xPortStartScheduler+0x7c>
	__asm volatile
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	b672      	cpsid	i
 800e988:	f383 8811 	msr	BASEPRI, r3
 800e98c:	f3bf 8f6f 	isb	sy
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	b662      	cpsie	i
 800e996:	60bb      	str	r3, [r7, #8]
}
 800e998:	bf00      	nop
 800e99a:	e7fe      	b.n	800e99a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e99c:	4b1b      	ldr	r3, [pc, #108]	; (800ea0c <xPortStartScheduler+0xec>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	021b      	lsls	r3, r3, #8
 800e9a2:	4a1a      	ldr	r2, [pc, #104]	; (800ea0c <xPortStartScheduler+0xec>)
 800e9a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e9a6:	4b19      	ldr	r3, [pc, #100]	; (800ea0c <xPortStartScheduler+0xec>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9ae:	4a17      	ldr	r2, [pc, #92]	; (800ea0c <xPortStartScheduler+0xec>)
 800e9b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e9ba:	4b15      	ldr	r3, [pc, #84]	; (800ea10 <xPortStartScheduler+0xf0>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a14      	ldr	r2, [pc, #80]	; (800ea10 <xPortStartScheduler+0xf0>)
 800e9c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e9c6:	4b12      	ldr	r3, [pc, #72]	; (800ea10 <xPortStartScheduler+0xf0>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a11      	ldr	r2, [pc, #68]	; (800ea10 <xPortStartScheduler+0xf0>)
 800e9cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e9d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e9d2:	f000 f8dd 	bl	800eb90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ea14 <xPortStartScheduler+0xf4>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e9dc:	f000 f8fc 	bl	800ebd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ea18 <xPortStartScheduler+0xf8>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a0c      	ldr	r2, [pc, #48]	; (800ea18 <xPortStartScheduler+0xf8>)
 800e9e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e9ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e9ec:	f7ff ff84 	bl	800e8f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e9f0:	f7ff fa7a 	bl	800dee8 <vTaskSwitchContext>
	prvTaskExitError();
 800e9f4:	f7ff ff38 	bl	800e868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e9f8:	2300      	movs	r3, #0
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	e000e400 	.word	0xe000e400
 800ea08:	20000d04 	.word	0x20000d04
 800ea0c:	20000d08 	.word	0x20000d08
 800ea10:	e000ed20 	.word	0xe000ed20
 800ea14:	20000018 	.word	0x20000018
 800ea18:	e000ef34 	.word	0xe000ef34

0800ea1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
	__asm volatile
 800ea22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea26:	b672      	cpsid	i
 800ea28:	f383 8811 	msr	BASEPRI, r3
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	f3bf 8f4f 	dsb	sy
 800ea34:	b662      	cpsie	i
 800ea36:	607b      	str	r3, [r7, #4]
}
 800ea38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea3a:	4b10      	ldr	r3, [pc, #64]	; (800ea7c <vPortEnterCritical+0x60>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	4a0e      	ldr	r2, [pc, #56]	; (800ea7c <vPortEnterCritical+0x60>)
 800ea42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea44:	4b0d      	ldr	r3, [pc, #52]	; (800ea7c <vPortEnterCritical+0x60>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d111      	bne.n	800ea70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea4c:	4b0c      	ldr	r3, [pc, #48]	; (800ea80 <vPortEnterCritical+0x64>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00c      	beq.n	800ea70 <vPortEnterCritical+0x54>
	__asm volatile
 800ea56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5a:	b672      	cpsid	i
 800ea5c:	f383 8811 	msr	BASEPRI, r3
 800ea60:	f3bf 8f6f 	isb	sy
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	b662      	cpsie	i
 800ea6a:	603b      	str	r3, [r7, #0]
}
 800ea6c:	bf00      	nop
 800ea6e:	e7fe      	b.n	800ea6e <vPortEnterCritical+0x52>
	}
}
 800ea70:	bf00      	nop
 800ea72:	370c      	adds	r7, #12
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr
 800ea7c:	20000018 	.word	0x20000018
 800ea80:	e000ed04 	.word	0xe000ed04

0800ea84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea8a:	4b13      	ldr	r3, [pc, #76]	; (800ead8 <vPortExitCritical+0x54>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10c      	bne.n	800eaac <vPortExitCritical+0x28>
	__asm volatile
 800ea92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea96:	b672      	cpsid	i
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	b662      	cpsie	i
 800eaa6:	607b      	str	r3, [r7, #4]
}
 800eaa8:	bf00      	nop
 800eaaa:	e7fe      	b.n	800eaaa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800eaac:	4b0a      	ldr	r3, [pc, #40]	; (800ead8 <vPortExitCritical+0x54>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	4a09      	ldr	r2, [pc, #36]	; (800ead8 <vPortExitCritical+0x54>)
 800eab4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eab6:	4b08      	ldr	r3, [pc, #32]	; (800ead8 <vPortExitCritical+0x54>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d105      	bne.n	800eaca <vPortExitCritical+0x46>
 800eabe:	2300      	movs	r3, #0
 800eac0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	f383 8811 	msr	BASEPRI, r3
}
 800eac8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eaca:	bf00      	nop
 800eacc:	370c      	adds	r7, #12
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	20000018 	.word	0x20000018
 800eadc:	00000000 	.word	0x00000000

0800eae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eae0:	f3ef 8009 	mrs	r0, PSP
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	4b15      	ldr	r3, [pc, #84]	; (800eb40 <pxCurrentTCBConst>)
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	f01e 0f10 	tst.w	lr, #16
 800eaf0:	bf08      	it	eq
 800eaf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eaf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eafa:	6010      	str	r0, [r2, #0]
 800eafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb04:	b672      	cpsid	i
 800eb06:	f380 8811 	msr	BASEPRI, r0
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	b662      	cpsie	i
 800eb14:	f7ff f9e8 	bl	800dee8 <vTaskSwitchContext>
 800eb18:	f04f 0000 	mov.w	r0, #0
 800eb1c:	f380 8811 	msr	BASEPRI, r0
 800eb20:	bc09      	pop	{r0, r3}
 800eb22:	6819      	ldr	r1, [r3, #0]
 800eb24:	6808      	ldr	r0, [r1, #0]
 800eb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2a:	f01e 0f10 	tst.w	lr, #16
 800eb2e:	bf08      	it	eq
 800eb30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb34:	f380 8809 	msr	PSP, r0
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop

0800eb40 <pxCurrentTCBConst>:
 800eb40:	20000bd8 	.word	0x20000bd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb44:	bf00      	nop
 800eb46:	bf00      	nop

0800eb48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb52:	b672      	cpsid	i
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	b662      	cpsie	i
 800eb62:	607b      	str	r3, [r7, #4]
}
 800eb64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb66:	f7ff f927 	bl	800ddb8 <xTaskIncrementTick>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d003      	beq.n	800eb78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb70:	4b06      	ldr	r3, [pc, #24]	; (800eb8c <SysTick_Handler+0x44>)
 800eb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb76:	601a      	str	r2, [r3, #0]
 800eb78:	2300      	movs	r3, #0
 800eb7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	f383 8811 	msr	BASEPRI, r3
}
 800eb82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	e000ed04 	.word	0xe000ed04

0800eb90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb90:	b480      	push	{r7}
 800eb92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb94:	4b0b      	ldr	r3, [pc, #44]	; (800ebc4 <vPortSetupTimerInterrupt+0x34>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb9a:	4b0b      	ldr	r3, [pc, #44]	; (800ebc8 <vPortSetupTimerInterrupt+0x38>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eba0:	4b0a      	ldr	r3, [pc, #40]	; (800ebcc <vPortSetupTimerInterrupt+0x3c>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a0a      	ldr	r2, [pc, #40]	; (800ebd0 <vPortSetupTimerInterrupt+0x40>)
 800eba6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebaa:	099b      	lsrs	r3, r3, #6
 800ebac:	4a09      	ldr	r2, [pc, #36]	; (800ebd4 <vPortSetupTimerInterrupt+0x44>)
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ebb2:	4b04      	ldr	r3, [pc, #16]	; (800ebc4 <vPortSetupTimerInterrupt+0x34>)
 800ebb4:	2207      	movs	r2, #7
 800ebb6:	601a      	str	r2, [r3, #0]
}
 800ebb8:	bf00      	nop
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	e000e010 	.word	0xe000e010
 800ebc8:	e000e018 	.word	0xe000e018
 800ebcc:	2000000c 	.word	0x2000000c
 800ebd0:	10624dd3 	.word	0x10624dd3
 800ebd4:	e000e014 	.word	0xe000e014

0800ebd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ebd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ebe8 <vPortEnableVFP+0x10>
 800ebdc:	6801      	ldr	r1, [r0, #0]
 800ebde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ebe2:	6001      	str	r1, [r0, #0]
 800ebe4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ebe6:	bf00      	nop
 800ebe8:	e000ed88 	.word	0xe000ed88

0800ebec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ebf2:	f3ef 8305 	mrs	r3, IPSR
 800ebf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2b0f      	cmp	r3, #15
 800ebfc:	d916      	bls.n	800ec2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ebfe:	4a19      	ldr	r2, [pc, #100]	; (800ec64 <vPortValidateInterruptPriority+0x78>)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	4413      	add	r3, r2
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec08:	4b17      	ldr	r3, [pc, #92]	; (800ec68 <vPortValidateInterruptPriority+0x7c>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	7afa      	ldrb	r2, [r7, #11]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d20c      	bcs.n	800ec2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec16:	b672      	cpsid	i
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	b662      	cpsie	i
 800ec26:	607b      	str	r3, [r7, #4]
}
 800ec28:	bf00      	nop
 800ec2a:	e7fe      	b.n	800ec2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec2c:	4b0f      	ldr	r3, [pc, #60]	; (800ec6c <vPortValidateInterruptPriority+0x80>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec34:	4b0e      	ldr	r3, [pc, #56]	; (800ec70 <vPortValidateInterruptPriority+0x84>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d90c      	bls.n	800ec56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ec3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec40:	b672      	cpsid	i
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	b662      	cpsie	i
 800ec50:	603b      	str	r3, [r7, #0]
}
 800ec52:	bf00      	nop
 800ec54:	e7fe      	b.n	800ec54 <vPortValidateInterruptPriority+0x68>
	}
 800ec56:	bf00      	nop
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	e000e3f0 	.word	0xe000e3f0
 800ec68:	20000d04 	.word	0x20000d04
 800ec6c:	e000ed0c 	.word	0xe000ed0c
 800ec70:	20000d08 	.word	0x20000d08

0800ec74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08a      	sub	sp, #40	; 0x28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec80:	f7fe fffc 	bl	800dc7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ec84:	4b5b      	ldr	r3, [pc, #364]	; (800edf4 <pvPortMalloc+0x180>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ec8c:	f000 f91a 	bl	800eec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec90:	4b59      	ldr	r3, [pc, #356]	; (800edf8 <pvPortMalloc+0x184>)
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	4013      	ands	r3, r2
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f040 8092 	bne.w	800edc2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d01f      	beq.n	800ece4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800eca4:	2208      	movs	r2, #8
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4413      	add	r3, r2
 800ecaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f003 0307 	and.w	r3, r3, #7
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d016      	beq.n	800ece4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f023 0307 	bic.w	r3, r3, #7
 800ecbc:	3308      	adds	r3, #8
 800ecbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f003 0307 	and.w	r3, r3, #7
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00c      	beq.n	800ece4 <pvPortMalloc+0x70>
	__asm volatile
 800ecca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecce:	b672      	cpsid	i
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	b662      	cpsie	i
 800ecde:	617b      	str	r3, [r7, #20]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d06b      	beq.n	800edc2 <pvPortMalloc+0x14e>
 800ecea:	4b44      	ldr	r3, [pc, #272]	; (800edfc <pvPortMalloc+0x188>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d866      	bhi.n	800edc2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ecf4:	4b42      	ldr	r3, [pc, #264]	; (800ee00 <pvPortMalloc+0x18c>)
 800ecf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ecf8:	4b41      	ldr	r3, [pc, #260]	; (800ee00 <pvPortMalloc+0x18c>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ecfe:	e004      	b.n	800ed0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ed00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d903      	bls.n	800ed1c <pvPortMalloc+0xa8>
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1f1      	bne.n	800ed00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed1c:	4b35      	ldr	r3, [pc, #212]	; (800edf4 <pvPortMalloc+0x180>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d04d      	beq.n	800edc2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2208      	movs	r2, #8
 800ed2c:	4413      	add	r3, r2
 800ed2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3a:	685a      	ldr	r2, [r3, #4]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	1ad2      	subs	r2, r2, r3
 800ed40:	2308      	movs	r3, #8
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d921      	bls.n	800ed8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	f003 0307 	and.w	r3, r3, #7
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00c      	beq.n	800ed74 <pvPortMalloc+0x100>
	__asm volatile
 800ed5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5e:	b672      	cpsid	i
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	b662      	cpsie	i
 800ed6e:	613b      	str	r3, [r7, #16]
}
 800ed70:	bf00      	nop
 800ed72:	e7fe      	b.n	800ed72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed76:	685a      	ldr	r2, [r3, #4]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	1ad2      	subs	r2, r2, r3
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed86:	69b8      	ldr	r0, [r7, #24]
 800ed88:	f000 f8fe 	bl	800ef88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed8c:	4b1b      	ldr	r3, [pc, #108]	; (800edfc <pvPortMalloc+0x188>)
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	4a19      	ldr	r2, [pc, #100]	; (800edfc <pvPortMalloc+0x188>)
 800ed98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed9a:	4b18      	ldr	r3, [pc, #96]	; (800edfc <pvPortMalloc+0x188>)
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	4b19      	ldr	r3, [pc, #100]	; (800ee04 <pvPortMalloc+0x190>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d203      	bcs.n	800edae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eda6:	4b15      	ldr	r3, [pc, #84]	; (800edfc <pvPortMalloc+0x188>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4a16      	ldr	r2, [pc, #88]	; (800ee04 <pvPortMalloc+0x190>)
 800edac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800edae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb0:	685a      	ldr	r2, [r3, #4]
 800edb2:	4b11      	ldr	r3, [pc, #68]	; (800edf8 <pvPortMalloc+0x184>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	431a      	orrs	r2, r3
 800edb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	2200      	movs	r2, #0
 800edc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800edc2:	f7fe ff69 	bl	800dc98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	f003 0307 	and.w	r3, r3, #7
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00c      	beq.n	800edea <pvPortMalloc+0x176>
	__asm volatile
 800edd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd4:	b672      	cpsid	i
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	b662      	cpsie	i
 800ede4:	60fb      	str	r3, [r7, #12]
}
 800ede6:	bf00      	nop
 800ede8:	e7fe      	b.n	800ede8 <pvPortMalloc+0x174>
	return pvReturn;
 800edea:	69fb      	ldr	r3, [r7, #28]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3728      	adds	r7, #40	; 0x28
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	20004914 	.word	0x20004914
 800edf8:	20004920 	.word	0x20004920
 800edfc:	20004918 	.word	0x20004918
 800ee00:	2000490c 	.word	0x2000490c
 800ee04:	2000491c 	.word	0x2000491c

0800ee08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d04c      	beq.n	800eeb4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee1a:	2308      	movs	r3, #8
 800ee1c:	425b      	negs	r3, r3
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	4413      	add	r3, r2
 800ee22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	4b23      	ldr	r3, [pc, #140]	; (800eebc <vPortFree+0xb4>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4013      	ands	r3, r2
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d10c      	bne.n	800ee50 <vPortFree+0x48>
	__asm volatile
 800ee36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3a:	b672      	cpsid	i
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	b662      	cpsie	i
 800ee4a:	60fb      	str	r3, [r7, #12]
}
 800ee4c:	bf00      	nop
 800ee4e:	e7fe      	b.n	800ee4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00c      	beq.n	800ee72 <vPortFree+0x6a>
	__asm volatile
 800ee58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5c:	b672      	cpsid	i
 800ee5e:	f383 8811 	msr	BASEPRI, r3
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	b662      	cpsie	i
 800ee6c:	60bb      	str	r3, [r7, #8]
}
 800ee6e:	bf00      	nop
 800ee70:	e7fe      	b.n	800ee70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	685a      	ldr	r2, [r3, #4]
 800ee76:	4b11      	ldr	r3, [pc, #68]	; (800eebc <vPortFree+0xb4>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d019      	beq.n	800eeb4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d115      	bne.n	800eeb4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	4b0b      	ldr	r3, [pc, #44]	; (800eebc <vPortFree+0xb4>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	43db      	mvns	r3, r3
 800ee92:	401a      	ands	r2, r3
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee98:	f7fe fef0 	bl	800dc7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	4b07      	ldr	r3, [pc, #28]	; (800eec0 <vPortFree+0xb8>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4413      	add	r3, r2
 800eea6:	4a06      	ldr	r2, [pc, #24]	; (800eec0 <vPortFree+0xb8>)
 800eea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eeaa:	6938      	ldr	r0, [r7, #16]
 800eeac:	f000 f86c 	bl	800ef88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eeb0:	f7fe fef2 	bl	800dc98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eeb4:	bf00      	nop
 800eeb6:	3718      	adds	r7, #24
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	20004920 	.word	0x20004920
 800eec0:	20004918 	.word	0x20004918

0800eec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eeca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eed0:	4b27      	ldr	r3, [pc, #156]	; (800ef70 <prvHeapInit+0xac>)
 800eed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f003 0307 	and.w	r3, r3, #7
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00c      	beq.n	800eef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	3307      	adds	r3, #7
 800eee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f023 0307 	bic.w	r3, r3, #7
 800eeea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	4a1f      	ldr	r2, [pc, #124]	; (800ef70 <prvHeapInit+0xac>)
 800eef4:	4413      	add	r3, r2
 800eef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eefc:	4a1d      	ldr	r2, [pc, #116]	; (800ef74 <prvHeapInit+0xb0>)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef02:	4b1c      	ldr	r3, [pc, #112]	; (800ef74 <prvHeapInit+0xb0>)
 800ef04:	2200      	movs	r2, #0
 800ef06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef10:	2208      	movs	r2, #8
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	1a9b      	subs	r3, r3, r2
 800ef16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f023 0307 	bic.w	r3, r3, #7
 800ef1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	4a15      	ldr	r2, [pc, #84]	; (800ef78 <prvHeapInit+0xb4>)
 800ef24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef26:	4b14      	ldr	r3, [pc, #80]	; (800ef78 <prvHeapInit+0xb4>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef2e:	4b12      	ldr	r3, [pc, #72]	; (800ef78 <prvHeapInit+0xb4>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2200      	movs	r2, #0
 800ef34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	1ad2      	subs	r2, r2, r3
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef44:	4b0c      	ldr	r3, [pc, #48]	; (800ef78 <prvHeapInit+0xb4>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	4a0a      	ldr	r2, [pc, #40]	; (800ef7c <prvHeapInit+0xb8>)
 800ef52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	4a09      	ldr	r2, [pc, #36]	; (800ef80 <prvHeapInit+0xbc>)
 800ef5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef5c:	4b09      	ldr	r3, [pc, #36]	; (800ef84 <prvHeapInit+0xc0>)
 800ef5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef62:	601a      	str	r2, [r3, #0]
}
 800ef64:	bf00      	nop
 800ef66:	3714      	adds	r7, #20
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr
 800ef70:	20000d0c 	.word	0x20000d0c
 800ef74:	2000490c 	.word	0x2000490c
 800ef78:	20004914 	.word	0x20004914
 800ef7c:	2000491c 	.word	0x2000491c
 800ef80:	20004918 	.word	0x20004918
 800ef84:	20004920 	.word	0x20004920

0800ef88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef90:	4b28      	ldr	r3, [pc, #160]	; (800f034 <prvInsertBlockIntoFreeList+0xac>)
 800ef92:	60fb      	str	r3, [r7, #12]
 800ef94:	e002      	b.n	800ef9c <prvInsertBlockIntoFreeList+0x14>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	60fb      	str	r3, [r7, #12]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d8f7      	bhi.n	800ef96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	4413      	add	r3, r2
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d108      	bne.n	800efca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	685a      	ldr	r2, [r3, #4]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	441a      	add	r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	441a      	add	r2, r3
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d118      	bne.n	800f010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	4b15      	ldr	r3, [pc, #84]	; (800f038 <prvInsertBlockIntoFreeList+0xb0>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d00d      	beq.n	800f006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685a      	ldr	r2, [r3, #4]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	441a      	add	r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	e008      	b.n	800f018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f006:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <prvInsertBlockIntoFreeList+0xb0>)
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	601a      	str	r2, [r3, #0]
 800f00e:	e003      	b.n	800f018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d002      	beq.n	800f026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f026:	bf00      	nop
 800f028:	3714      	adds	r7, #20
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	2000490c 	.word	0x2000490c
 800f038:	20004914 	.word	0x20004914

0800f03c <__cvt>:
 800f03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f040:	ec55 4b10 	vmov	r4, r5, d0
 800f044:	2d00      	cmp	r5, #0
 800f046:	460e      	mov	r6, r1
 800f048:	4619      	mov	r1, r3
 800f04a:	462b      	mov	r3, r5
 800f04c:	bfbb      	ittet	lt
 800f04e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f052:	461d      	movlt	r5, r3
 800f054:	2300      	movge	r3, #0
 800f056:	232d      	movlt	r3, #45	; 0x2d
 800f058:	700b      	strb	r3, [r1, #0]
 800f05a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f05c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f060:	4691      	mov	r9, r2
 800f062:	f023 0820 	bic.w	r8, r3, #32
 800f066:	bfbc      	itt	lt
 800f068:	4622      	movlt	r2, r4
 800f06a:	4614      	movlt	r4, r2
 800f06c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f070:	d005      	beq.n	800f07e <__cvt+0x42>
 800f072:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f076:	d100      	bne.n	800f07a <__cvt+0x3e>
 800f078:	3601      	adds	r6, #1
 800f07a:	2102      	movs	r1, #2
 800f07c:	e000      	b.n	800f080 <__cvt+0x44>
 800f07e:	2103      	movs	r1, #3
 800f080:	ab03      	add	r3, sp, #12
 800f082:	9301      	str	r3, [sp, #4]
 800f084:	ab02      	add	r3, sp, #8
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	ec45 4b10 	vmov	d0, r4, r5
 800f08c:	4653      	mov	r3, sl
 800f08e:	4632      	mov	r2, r6
 800f090:	f001 f922 	bl	80102d8 <_dtoa_r>
 800f094:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f098:	4607      	mov	r7, r0
 800f09a:	d102      	bne.n	800f0a2 <__cvt+0x66>
 800f09c:	f019 0f01 	tst.w	r9, #1
 800f0a0:	d022      	beq.n	800f0e8 <__cvt+0xac>
 800f0a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f0a6:	eb07 0906 	add.w	r9, r7, r6
 800f0aa:	d110      	bne.n	800f0ce <__cvt+0x92>
 800f0ac:	783b      	ldrb	r3, [r7, #0]
 800f0ae:	2b30      	cmp	r3, #48	; 0x30
 800f0b0:	d10a      	bne.n	800f0c8 <__cvt+0x8c>
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	f7f1 fd2d 	bl	8000b18 <__aeabi_dcmpeq>
 800f0be:	b918      	cbnz	r0, 800f0c8 <__cvt+0x8c>
 800f0c0:	f1c6 0601 	rsb	r6, r6, #1
 800f0c4:	f8ca 6000 	str.w	r6, [sl]
 800f0c8:	f8da 3000 	ldr.w	r3, [sl]
 800f0cc:	4499      	add	r9, r3
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	f7f1 fd1f 	bl	8000b18 <__aeabi_dcmpeq>
 800f0da:	b108      	cbz	r0, 800f0e0 <__cvt+0xa4>
 800f0dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0e0:	2230      	movs	r2, #48	; 0x30
 800f0e2:	9b03      	ldr	r3, [sp, #12]
 800f0e4:	454b      	cmp	r3, r9
 800f0e6:	d307      	bcc.n	800f0f8 <__cvt+0xbc>
 800f0e8:	9b03      	ldr	r3, [sp, #12]
 800f0ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0ec:	1bdb      	subs	r3, r3, r7
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	6013      	str	r3, [r2, #0]
 800f0f2:	b004      	add	sp, #16
 800f0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0f8:	1c59      	adds	r1, r3, #1
 800f0fa:	9103      	str	r1, [sp, #12]
 800f0fc:	701a      	strb	r2, [r3, #0]
 800f0fe:	e7f0      	b.n	800f0e2 <__cvt+0xa6>

0800f100 <__exponent>:
 800f100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f102:	4603      	mov	r3, r0
 800f104:	2900      	cmp	r1, #0
 800f106:	bfb8      	it	lt
 800f108:	4249      	neglt	r1, r1
 800f10a:	f803 2b02 	strb.w	r2, [r3], #2
 800f10e:	bfb4      	ite	lt
 800f110:	222d      	movlt	r2, #45	; 0x2d
 800f112:	222b      	movge	r2, #43	; 0x2b
 800f114:	2909      	cmp	r1, #9
 800f116:	7042      	strb	r2, [r0, #1]
 800f118:	dd2a      	ble.n	800f170 <__exponent+0x70>
 800f11a:	f10d 0207 	add.w	r2, sp, #7
 800f11e:	4617      	mov	r7, r2
 800f120:	260a      	movs	r6, #10
 800f122:	4694      	mov	ip, r2
 800f124:	fb91 f5f6 	sdiv	r5, r1, r6
 800f128:	fb06 1415 	mls	r4, r6, r5, r1
 800f12c:	3430      	adds	r4, #48	; 0x30
 800f12e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f132:	460c      	mov	r4, r1
 800f134:	2c63      	cmp	r4, #99	; 0x63
 800f136:	f102 32ff 	add.w	r2, r2, #4294967295
 800f13a:	4629      	mov	r1, r5
 800f13c:	dcf1      	bgt.n	800f122 <__exponent+0x22>
 800f13e:	3130      	adds	r1, #48	; 0x30
 800f140:	f1ac 0402 	sub.w	r4, ip, #2
 800f144:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f148:	1c41      	adds	r1, r0, #1
 800f14a:	4622      	mov	r2, r4
 800f14c:	42ba      	cmp	r2, r7
 800f14e:	d30a      	bcc.n	800f166 <__exponent+0x66>
 800f150:	f10d 0209 	add.w	r2, sp, #9
 800f154:	eba2 020c 	sub.w	r2, r2, ip
 800f158:	42bc      	cmp	r4, r7
 800f15a:	bf88      	it	hi
 800f15c:	2200      	movhi	r2, #0
 800f15e:	4413      	add	r3, r2
 800f160:	1a18      	subs	r0, r3, r0
 800f162:	b003      	add	sp, #12
 800f164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f166:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f16a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f16e:	e7ed      	b.n	800f14c <__exponent+0x4c>
 800f170:	2330      	movs	r3, #48	; 0x30
 800f172:	3130      	adds	r1, #48	; 0x30
 800f174:	7083      	strb	r3, [r0, #2]
 800f176:	70c1      	strb	r1, [r0, #3]
 800f178:	1d03      	adds	r3, r0, #4
 800f17a:	e7f1      	b.n	800f160 <__exponent+0x60>

0800f17c <_printf_float>:
 800f17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f180:	ed2d 8b02 	vpush	{d8}
 800f184:	b08d      	sub	sp, #52	; 0x34
 800f186:	460c      	mov	r4, r1
 800f188:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f18c:	4616      	mov	r6, r2
 800f18e:	461f      	mov	r7, r3
 800f190:	4605      	mov	r5, r0
 800f192:	f000 ff37 	bl	8010004 <_localeconv_r>
 800f196:	f8d0 a000 	ldr.w	sl, [r0]
 800f19a:	4650      	mov	r0, sl
 800f19c:	f7f1 f890 	bl	80002c0 <strlen>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a4:	6823      	ldr	r3, [r4, #0]
 800f1a6:	9305      	str	r3, [sp, #20]
 800f1a8:	f8d8 3000 	ldr.w	r3, [r8]
 800f1ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f1b0:	3307      	adds	r3, #7
 800f1b2:	f023 0307 	bic.w	r3, r3, #7
 800f1b6:	f103 0208 	add.w	r2, r3, #8
 800f1ba:	f8c8 2000 	str.w	r2, [r8]
 800f1be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f1c6:	9307      	str	r3, [sp, #28]
 800f1c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1cc:	ee08 0a10 	vmov	s16, r0
 800f1d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f1d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1d8:	4b9e      	ldr	r3, [pc, #632]	; (800f454 <_printf_float+0x2d8>)
 800f1da:	f04f 32ff 	mov.w	r2, #4294967295
 800f1de:	f7f1 fccd 	bl	8000b7c <__aeabi_dcmpun>
 800f1e2:	bb88      	cbnz	r0, 800f248 <_printf_float+0xcc>
 800f1e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1e8:	4b9a      	ldr	r3, [pc, #616]	; (800f454 <_printf_float+0x2d8>)
 800f1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ee:	f7f1 fca7 	bl	8000b40 <__aeabi_dcmple>
 800f1f2:	bb48      	cbnz	r0, 800f248 <_printf_float+0xcc>
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	4640      	mov	r0, r8
 800f1fa:	4649      	mov	r1, r9
 800f1fc:	f7f1 fc96 	bl	8000b2c <__aeabi_dcmplt>
 800f200:	b110      	cbz	r0, 800f208 <_printf_float+0x8c>
 800f202:	232d      	movs	r3, #45	; 0x2d
 800f204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f208:	4a93      	ldr	r2, [pc, #588]	; (800f458 <_printf_float+0x2dc>)
 800f20a:	4b94      	ldr	r3, [pc, #592]	; (800f45c <_printf_float+0x2e0>)
 800f20c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f210:	bf94      	ite	ls
 800f212:	4690      	movls	r8, r2
 800f214:	4698      	movhi	r8, r3
 800f216:	2303      	movs	r3, #3
 800f218:	6123      	str	r3, [r4, #16]
 800f21a:	9b05      	ldr	r3, [sp, #20]
 800f21c:	f023 0304 	bic.w	r3, r3, #4
 800f220:	6023      	str	r3, [r4, #0]
 800f222:	f04f 0900 	mov.w	r9, #0
 800f226:	9700      	str	r7, [sp, #0]
 800f228:	4633      	mov	r3, r6
 800f22a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f22c:	4621      	mov	r1, r4
 800f22e:	4628      	mov	r0, r5
 800f230:	f000 f9da 	bl	800f5e8 <_printf_common>
 800f234:	3001      	adds	r0, #1
 800f236:	f040 8090 	bne.w	800f35a <_printf_float+0x1de>
 800f23a:	f04f 30ff 	mov.w	r0, #4294967295
 800f23e:	b00d      	add	sp, #52	; 0x34
 800f240:	ecbd 8b02 	vpop	{d8}
 800f244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f248:	4642      	mov	r2, r8
 800f24a:	464b      	mov	r3, r9
 800f24c:	4640      	mov	r0, r8
 800f24e:	4649      	mov	r1, r9
 800f250:	f7f1 fc94 	bl	8000b7c <__aeabi_dcmpun>
 800f254:	b140      	cbz	r0, 800f268 <_printf_float+0xec>
 800f256:	464b      	mov	r3, r9
 800f258:	2b00      	cmp	r3, #0
 800f25a:	bfbc      	itt	lt
 800f25c:	232d      	movlt	r3, #45	; 0x2d
 800f25e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f262:	4a7f      	ldr	r2, [pc, #508]	; (800f460 <_printf_float+0x2e4>)
 800f264:	4b7f      	ldr	r3, [pc, #508]	; (800f464 <_printf_float+0x2e8>)
 800f266:	e7d1      	b.n	800f20c <_printf_float+0x90>
 800f268:	6863      	ldr	r3, [r4, #4]
 800f26a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f26e:	9206      	str	r2, [sp, #24]
 800f270:	1c5a      	adds	r2, r3, #1
 800f272:	d13f      	bne.n	800f2f4 <_printf_float+0x178>
 800f274:	2306      	movs	r3, #6
 800f276:	6063      	str	r3, [r4, #4]
 800f278:	9b05      	ldr	r3, [sp, #20]
 800f27a:	6861      	ldr	r1, [r4, #4]
 800f27c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f280:	2300      	movs	r3, #0
 800f282:	9303      	str	r3, [sp, #12]
 800f284:	ab0a      	add	r3, sp, #40	; 0x28
 800f286:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f28a:	ab09      	add	r3, sp, #36	; 0x24
 800f28c:	ec49 8b10 	vmov	d0, r8, r9
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	6022      	str	r2, [r4, #0]
 800f294:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f298:	4628      	mov	r0, r5
 800f29a:	f7ff fecf 	bl	800f03c <__cvt>
 800f29e:	9b06      	ldr	r3, [sp, #24]
 800f2a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2a2:	2b47      	cmp	r3, #71	; 0x47
 800f2a4:	4680      	mov	r8, r0
 800f2a6:	d108      	bne.n	800f2ba <_printf_float+0x13e>
 800f2a8:	1cc8      	adds	r0, r1, #3
 800f2aa:	db02      	blt.n	800f2b2 <_printf_float+0x136>
 800f2ac:	6863      	ldr	r3, [r4, #4]
 800f2ae:	4299      	cmp	r1, r3
 800f2b0:	dd41      	ble.n	800f336 <_printf_float+0x1ba>
 800f2b2:	f1ab 0302 	sub.w	r3, fp, #2
 800f2b6:	fa5f fb83 	uxtb.w	fp, r3
 800f2ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2be:	d820      	bhi.n	800f302 <_printf_float+0x186>
 800f2c0:	3901      	subs	r1, #1
 800f2c2:	465a      	mov	r2, fp
 800f2c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f2c8:	9109      	str	r1, [sp, #36]	; 0x24
 800f2ca:	f7ff ff19 	bl	800f100 <__exponent>
 800f2ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2d0:	1813      	adds	r3, r2, r0
 800f2d2:	2a01      	cmp	r2, #1
 800f2d4:	4681      	mov	r9, r0
 800f2d6:	6123      	str	r3, [r4, #16]
 800f2d8:	dc02      	bgt.n	800f2e0 <_printf_float+0x164>
 800f2da:	6822      	ldr	r2, [r4, #0]
 800f2dc:	07d2      	lsls	r2, r2, #31
 800f2de:	d501      	bpl.n	800f2e4 <_printf_float+0x168>
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	6123      	str	r3, [r4, #16]
 800f2e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d09c      	beq.n	800f226 <_printf_float+0xaa>
 800f2ec:	232d      	movs	r3, #45	; 0x2d
 800f2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2f2:	e798      	b.n	800f226 <_printf_float+0xaa>
 800f2f4:	9a06      	ldr	r2, [sp, #24]
 800f2f6:	2a47      	cmp	r2, #71	; 0x47
 800f2f8:	d1be      	bne.n	800f278 <_printf_float+0xfc>
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1bc      	bne.n	800f278 <_printf_float+0xfc>
 800f2fe:	2301      	movs	r3, #1
 800f300:	e7b9      	b.n	800f276 <_printf_float+0xfa>
 800f302:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f306:	d118      	bne.n	800f33a <_printf_float+0x1be>
 800f308:	2900      	cmp	r1, #0
 800f30a:	6863      	ldr	r3, [r4, #4]
 800f30c:	dd0b      	ble.n	800f326 <_printf_float+0x1aa>
 800f30e:	6121      	str	r1, [r4, #16]
 800f310:	b913      	cbnz	r3, 800f318 <_printf_float+0x19c>
 800f312:	6822      	ldr	r2, [r4, #0]
 800f314:	07d0      	lsls	r0, r2, #31
 800f316:	d502      	bpl.n	800f31e <_printf_float+0x1a2>
 800f318:	3301      	adds	r3, #1
 800f31a:	440b      	add	r3, r1
 800f31c:	6123      	str	r3, [r4, #16]
 800f31e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f320:	f04f 0900 	mov.w	r9, #0
 800f324:	e7de      	b.n	800f2e4 <_printf_float+0x168>
 800f326:	b913      	cbnz	r3, 800f32e <_printf_float+0x1b2>
 800f328:	6822      	ldr	r2, [r4, #0]
 800f32a:	07d2      	lsls	r2, r2, #31
 800f32c:	d501      	bpl.n	800f332 <_printf_float+0x1b6>
 800f32e:	3302      	adds	r3, #2
 800f330:	e7f4      	b.n	800f31c <_printf_float+0x1a0>
 800f332:	2301      	movs	r3, #1
 800f334:	e7f2      	b.n	800f31c <_printf_float+0x1a0>
 800f336:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f33c:	4299      	cmp	r1, r3
 800f33e:	db05      	blt.n	800f34c <_printf_float+0x1d0>
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	6121      	str	r1, [r4, #16]
 800f344:	07d8      	lsls	r0, r3, #31
 800f346:	d5ea      	bpl.n	800f31e <_printf_float+0x1a2>
 800f348:	1c4b      	adds	r3, r1, #1
 800f34a:	e7e7      	b.n	800f31c <_printf_float+0x1a0>
 800f34c:	2900      	cmp	r1, #0
 800f34e:	bfd4      	ite	le
 800f350:	f1c1 0202 	rsble	r2, r1, #2
 800f354:	2201      	movgt	r2, #1
 800f356:	4413      	add	r3, r2
 800f358:	e7e0      	b.n	800f31c <_printf_float+0x1a0>
 800f35a:	6823      	ldr	r3, [r4, #0]
 800f35c:	055a      	lsls	r2, r3, #21
 800f35e:	d407      	bmi.n	800f370 <_printf_float+0x1f4>
 800f360:	6923      	ldr	r3, [r4, #16]
 800f362:	4642      	mov	r2, r8
 800f364:	4631      	mov	r1, r6
 800f366:	4628      	mov	r0, r5
 800f368:	47b8      	blx	r7
 800f36a:	3001      	adds	r0, #1
 800f36c:	d12c      	bne.n	800f3c8 <_printf_float+0x24c>
 800f36e:	e764      	b.n	800f23a <_printf_float+0xbe>
 800f370:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f374:	f240 80e0 	bls.w	800f538 <_printf_float+0x3bc>
 800f378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f37c:	2200      	movs	r2, #0
 800f37e:	2300      	movs	r3, #0
 800f380:	f7f1 fbca 	bl	8000b18 <__aeabi_dcmpeq>
 800f384:	2800      	cmp	r0, #0
 800f386:	d034      	beq.n	800f3f2 <_printf_float+0x276>
 800f388:	4a37      	ldr	r2, [pc, #220]	; (800f468 <_printf_float+0x2ec>)
 800f38a:	2301      	movs	r3, #1
 800f38c:	4631      	mov	r1, r6
 800f38e:	4628      	mov	r0, r5
 800f390:	47b8      	blx	r7
 800f392:	3001      	adds	r0, #1
 800f394:	f43f af51 	beq.w	800f23a <_printf_float+0xbe>
 800f398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f39c:	429a      	cmp	r2, r3
 800f39e:	db02      	blt.n	800f3a6 <_printf_float+0x22a>
 800f3a0:	6823      	ldr	r3, [r4, #0]
 800f3a2:	07d8      	lsls	r0, r3, #31
 800f3a4:	d510      	bpl.n	800f3c8 <_printf_float+0x24c>
 800f3a6:	ee18 3a10 	vmov	r3, s16
 800f3aa:	4652      	mov	r2, sl
 800f3ac:	4631      	mov	r1, r6
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	47b8      	blx	r7
 800f3b2:	3001      	adds	r0, #1
 800f3b4:	f43f af41 	beq.w	800f23a <_printf_float+0xbe>
 800f3b8:	f04f 0800 	mov.w	r8, #0
 800f3bc:	f104 091a 	add.w	r9, r4, #26
 800f3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	4543      	cmp	r3, r8
 800f3c6:	dc09      	bgt.n	800f3dc <_printf_float+0x260>
 800f3c8:	6823      	ldr	r3, [r4, #0]
 800f3ca:	079b      	lsls	r3, r3, #30
 800f3cc:	f100 8107 	bmi.w	800f5de <_printf_float+0x462>
 800f3d0:	68e0      	ldr	r0, [r4, #12]
 800f3d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3d4:	4298      	cmp	r0, r3
 800f3d6:	bfb8      	it	lt
 800f3d8:	4618      	movlt	r0, r3
 800f3da:	e730      	b.n	800f23e <_printf_float+0xc2>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	464a      	mov	r2, r9
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	47b8      	blx	r7
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	f43f af27 	beq.w	800f23a <_printf_float+0xbe>
 800f3ec:	f108 0801 	add.w	r8, r8, #1
 800f3f0:	e7e6      	b.n	800f3c0 <_printf_float+0x244>
 800f3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	dc39      	bgt.n	800f46c <_printf_float+0x2f0>
 800f3f8:	4a1b      	ldr	r2, [pc, #108]	; (800f468 <_printf_float+0x2ec>)
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	4631      	mov	r1, r6
 800f3fe:	4628      	mov	r0, r5
 800f400:	47b8      	blx	r7
 800f402:	3001      	adds	r0, #1
 800f404:	f43f af19 	beq.w	800f23a <_printf_float+0xbe>
 800f408:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f40c:	4313      	orrs	r3, r2
 800f40e:	d102      	bne.n	800f416 <_printf_float+0x29a>
 800f410:	6823      	ldr	r3, [r4, #0]
 800f412:	07d9      	lsls	r1, r3, #31
 800f414:	d5d8      	bpl.n	800f3c8 <_printf_float+0x24c>
 800f416:	ee18 3a10 	vmov	r3, s16
 800f41a:	4652      	mov	r2, sl
 800f41c:	4631      	mov	r1, r6
 800f41e:	4628      	mov	r0, r5
 800f420:	47b8      	blx	r7
 800f422:	3001      	adds	r0, #1
 800f424:	f43f af09 	beq.w	800f23a <_printf_float+0xbe>
 800f428:	f04f 0900 	mov.w	r9, #0
 800f42c:	f104 0a1a 	add.w	sl, r4, #26
 800f430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f432:	425b      	negs	r3, r3
 800f434:	454b      	cmp	r3, r9
 800f436:	dc01      	bgt.n	800f43c <_printf_float+0x2c0>
 800f438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f43a:	e792      	b.n	800f362 <_printf_float+0x1e6>
 800f43c:	2301      	movs	r3, #1
 800f43e:	4652      	mov	r2, sl
 800f440:	4631      	mov	r1, r6
 800f442:	4628      	mov	r0, r5
 800f444:	47b8      	blx	r7
 800f446:	3001      	adds	r0, #1
 800f448:	f43f aef7 	beq.w	800f23a <_printf_float+0xbe>
 800f44c:	f109 0901 	add.w	r9, r9, #1
 800f450:	e7ee      	b.n	800f430 <_printf_float+0x2b4>
 800f452:	bf00      	nop
 800f454:	7fefffff 	.word	0x7fefffff
 800f458:	08015714 	.word	0x08015714
 800f45c:	08015718 	.word	0x08015718
 800f460:	0801571c 	.word	0x0801571c
 800f464:	08015720 	.word	0x08015720
 800f468:	08015ab0 	.word	0x08015ab0
 800f46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f46e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f470:	429a      	cmp	r2, r3
 800f472:	bfa8      	it	ge
 800f474:	461a      	movge	r2, r3
 800f476:	2a00      	cmp	r2, #0
 800f478:	4691      	mov	r9, r2
 800f47a:	dc37      	bgt.n	800f4ec <_printf_float+0x370>
 800f47c:	f04f 0b00 	mov.w	fp, #0
 800f480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f484:	f104 021a 	add.w	r2, r4, #26
 800f488:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f48a:	9305      	str	r3, [sp, #20]
 800f48c:	eba3 0309 	sub.w	r3, r3, r9
 800f490:	455b      	cmp	r3, fp
 800f492:	dc33      	bgt.n	800f4fc <_printf_float+0x380>
 800f494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f498:	429a      	cmp	r2, r3
 800f49a:	db3b      	blt.n	800f514 <_printf_float+0x398>
 800f49c:	6823      	ldr	r3, [r4, #0]
 800f49e:	07da      	lsls	r2, r3, #31
 800f4a0:	d438      	bmi.n	800f514 <_printf_float+0x398>
 800f4a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f4a6:	eba2 0903 	sub.w	r9, r2, r3
 800f4aa:	9b05      	ldr	r3, [sp, #20]
 800f4ac:	1ad2      	subs	r2, r2, r3
 800f4ae:	4591      	cmp	r9, r2
 800f4b0:	bfa8      	it	ge
 800f4b2:	4691      	movge	r9, r2
 800f4b4:	f1b9 0f00 	cmp.w	r9, #0
 800f4b8:	dc35      	bgt.n	800f526 <_printf_float+0x3aa>
 800f4ba:	f04f 0800 	mov.w	r8, #0
 800f4be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4c2:	f104 0a1a 	add.w	sl, r4, #26
 800f4c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4ca:	1a9b      	subs	r3, r3, r2
 800f4cc:	eba3 0309 	sub.w	r3, r3, r9
 800f4d0:	4543      	cmp	r3, r8
 800f4d2:	f77f af79 	ble.w	800f3c8 <_printf_float+0x24c>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	4652      	mov	r2, sl
 800f4da:	4631      	mov	r1, r6
 800f4dc:	4628      	mov	r0, r5
 800f4de:	47b8      	blx	r7
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	f43f aeaa 	beq.w	800f23a <_printf_float+0xbe>
 800f4e6:	f108 0801 	add.w	r8, r8, #1
 800f4ea:	e7ec      	b.n	800f4c6 <_printf_float+0x34a>
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	4631      	mov	r1, r6
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	47b8      	blx	r7
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d1c0      	bne.n	800f47c <_printf_float+0x300>
 800f4fa:	e69e      	b.n	800f23a <_printf_float+0xbe>
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	4631      	mov	r1, r6
 800f500:	4628      	mov	r0, r5
 800f502:	9205      	str	r2, [sp, #20]
 800f504:	47b8      	blx	r7
 800f506:	3001      	adds	r0, #1
 800f508:	f43f ae97 	beq.w	800f23a <_printf_float+0xbe>
 800f50c:	9a05      	ldr	r2, [sp, #20]
 800f50e:	f10b 0b01 	add.w	fp, fp, #1
 800f512:	e7b9      	b.n	800f488 <_printf_float+0x30c>
 800f514:	ee18 3a10 	vmov	r3, s16
 800f518:	4652      	mov	r2, sl
 800f51a:	4631      	mov	r1, r6
 800f51c:	4628      	mov	r0, r5
 800f51e:	47b8      	blx	r7
 800f520:	3001      	adds	r0, #1
 800f522:	d1be      	bne.n	800f4a2 <_printf_float+0x326>
 800f524:	e689      	b.n	800f23a <_printf_float+0xbe>
 800f526:	9a05      	ldr	r2, [sp, #20]
 800f528:	464b      	mov	r3, r9
 800f52a:	4442      	add	r2, r8
 800f52c:	4631      	mov	r1, r6
 800f52e:	4628      	mov	r0, r5
 800f530:	47b8      	blx	r7
 800f532:	3001      	adds	r0, #1
 800f534:	d1c1      	bne.n	800f4ba <_printf_float+0x33e>
 800f536:	e680      	b.n	800f23a <_printf_float+0xbe>
 800f538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f53a:	2a01      	cmp	r2, #1
 800f53c:	dc01      	bgt.n	800f542 <_printf_float+0x3c6>
 800f53e:	07db      	lsls	r3, r3, #31
 800f540:	d53a      	bpl.n	800f5b8 <_printf_float+0x43c>
 800f542:	2301      	movs	r3, #1
 800f544:	4642      	mov	r2, r8
 800f546:	4631      	mov	r1, r6
 800f548:	4628      	mov	r0, r5
 800f54a:	47b8      	blx	r7
 800f54c:	3001      	adds	r0, #1
 800f54e:	f43f ae74 	beq.w	800f23a <_printf_float+0xbe>
 800f552:	ee18 3a10 	vmov	r3, s16
 800f556:	4652      	mov	r2, sl
 800f558:	4631      	mov	r1, r6
 800f55a:	4628      	mov	r0, r5
 800f55c:	47b8      	blx	r7
 800f55e:	3001      	adds	r0, #1
 800f560:	f43f ae6b 	beq.w	800f23a <_printf_float+0xbe>
 800f564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f568:	2200      	movs	r2, #0
 800f56a:	2300      	movs	r3, #0
 800f56c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f570:	f7f1 fad2 	bl	8000b18 <__aeabi_dcmpeq>
 800f574:	b9d8      	cbnz	r0, 800f5ae <_printf_float+0x432>
 800f576:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f57a:	f108 0201 	add.w	r2, r8, #1
 800f57e:	4631      	mov	r1, r6
 800f580:	4628      	mov	r0, r5
 800f582:	47b8      	blx	r7
 800f584:	3001      	adds	r0, #1
 800f586:	d10e      	bne.n	800f5a6 <_printf_float+0x42a>
 800f588:	e657      	b.n	800f23a <_printf_float+0xbe>
 800f58a:	2301      	movs	r3, #1
 800f58c:	4652      	mov	r2, sl
 800f58e:	4631      	mov	r1, r6
 800f590:	4628      	mov	r0, r5
 800f592:	47b8      	blx	r7
 800f594:	3001      	adds	r0, #1
 800f596:	f43f ae50 	beq.w	800f23a <_printf_float+0xbe>
 800f59a:	f108 0801 	add.w	r8, r8, #1
 800f59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	4543      	cmp	r3, r8
 800f5a4:	dcf1      	bgt.n	800f58a <_printf_float+0x40e>
 800f5a6:	464b      	mov	r3, r9
 800f5a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f5ac:	e6da      	b.n	800f364 <_printf_float+0x1e8>
 800f5ae:	f04f 0800 	mov.w	r8, #0
 800f5b2:	f104 0a1a 	add.w	sl, r4, #26
 800f5b6:	e7f2      	b.n	800f59e <_printf_float+0x422>
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	4642      	mov	r2, r8
 800f5bc:	e7df      	b.n	800f57e <_printf_float+0x402>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	464a      	mov	r2, r9
 800f5c2:	4631      	mov	r1, r6
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	47b8      	blx	r7
 800f5c8:	3001      	adds	r0, #1
 800f5ca:	f43f ae36 	beq.w	800f23a <_printf_float+0xbe>
 800f5ce:	f108 0801 	add.w	r8, r8, #1
 800f5d2:	68e3      	ldr	r3, [r4, #12]
 800f5d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5d6:	1a5b      	subs	r3, r3, r1
 800f5d8:	4543      	cmp	r3, r8
 800f5da:	dcf0      	bgt.n	800f5be <_printf_float+0x442>
 800f5dc:	e6f8      	b.n	800f3d0 <_printf_float+0x254>
 800f5de:	f04f 0800 	mov.w	r8, #0
 800f5e2:	f104 0919 	add.w	r9, r4, #25
 800f5e6:	e7f4      	b.n	800f5d2 <_printf_float+0x456>

0800f5e8 <_printf_common>:
 800f5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ec:	4616      	mov	r6, r2
 800f5ee:	4699      	mov	r9, r3
 800f5f0:	688a      	ldr	r2, [r1, #8]
 800f5f2:	690b      	ldr	r3, [r1, #16]
 800f5f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	bfb8      	it	lt
 800f5fc:	4613      	movlt	r3, r2
 800f5fe:	6033      	str	r3, [r6, #0]
 800f600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f604:	4607      	mov	r7, r0
 800f606:	460c      	mov	r4, r1
 800f608:	b10a      	cbz	r2, 800f60e <_printf_common+0x26>
 800f60a:	3301      	adds	r3, #1
 800f60c:	6033      	str	r3, [r6, #0]
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	0699      	lsls	r1, r3, #26
 800f612:	bf42      	ittt	mi
 800f614:	6833      	ldrmi	r3, [r6, #0]
 800f616:	3302      	addmi	r3, #2
 800f618:	6033      	strmi	r3, [r6, #0]
 800f61a:	6825      	ldr	r5, [r4, #0]
 800f61c:	f015 0506 	ands.w	r5, r5, #6
 800f620:	d106      	bne.n	800f630 <_printf_common+0x48>
 800f622:	f104 0a19 	add.w	sl, r4, #25
 800f626:	68e3      	ldr	r3, [r4, #12]
 800f628:	6832      	ldr	r2, [r6, #0]
 800f62a:	1a9b      	subs	r3, r3, r2
 800f62c:	42ab      	cmp	r3, r5
 800f62e:	dc26      	bgt.n	800f67e <_printf_common+0x96>
 800f630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f634:	1e13      	subs	r3, r2, #0
 800f636:	6822      	ldr	r2, [r4, #0]
 800f638:	bf18      	it	ne
 800f63a:	2301      	movne	r3, #1
 800f63c:	0692      	lsls	r2, r2, #26
 800f63e:	d42b      	bmi.n	800f698 <_printf_common+0xb0>
 800f640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f644:	4649      	mov	r1, r9
 800f646:	4638      	mov	r0, r7
 800f648:	47c0      	blx	r8
 800f64a:	3001      	adds	r0, #1
 800f64c:	d01e      	beq.n	800f68c <_printf_common+0xa4>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	6922      	ldr	r2, [r4, #16]
 800f652:	f003 0306 	and.w	r3, r3, #6
 800f656:	2b04      	cmp	r3, #4
 800f658:	bf02      	ittt	eq
 800f65a:	68e5      	ldreq	r5, [r4, #12]
 800f65c:	6833      	ldreq	r3, [r6, #0]
 800f65e:	1aed      	subeq	r5, r5, r3
 800f660:	68a3      	ldr	r3, [r4, #8]
 800f662:	bf0c      	ite	eq
 800f664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f668:	2500      	movne	r5, #0
 800f66a:	4293      	cmp	r3, r2
 800f66c:	bfc4      	itt	gt
 800f66e:	1a9b      	subgt	r3, r3, r2
 800f670:	18ed      	addgt	r5, r5, r3
 800f672:	2600      	movs	r6, #0
 800f674:	341a      	adds	r4, #26
 800f676:	42b5      	cmp	r5, r6
 800f678:	d11a      	bne.n	800f6b0 <_printf_common+0xc8>
 800f67a:	2000      	movs	r0, #0
 800f67c:	e008      	b.n	800f690 <_printf_common+0xa8>
 800f67e:	2301      	movs	r3, #1
 800f680:	4652      	mov	r2, sl
 800f682:	4649      	mov	r1, r9
 800f684:	4638      	mov	r0, r7
 800f686:	47c0      	blx	r8
 800f688:	3001      	adds	r0, #1
 800f68a:	d103      	bne.n	800f694 <_printf_common+0xac>
 800f68c:	f04f 30ff 	mov.w	r0, #4294967295
 800f690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f694:	3501      	adds	r5, #1
 800f696:	e7c6      	b.n	800f626 <_printf_common+0x3e>
 800f698:	18e1      	adds	r1, r4, r3
 800f69a:	1c5a      	adds	r2, r3, #1
 800f69c:	2030      	movs	r0, #48	; 0x30
 800f69e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6a2:	4422      	add	r2, r4
 800f6a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6ac:	3302      	adds	r3, #2
 800f6ae:	e7c7      	b.n	800f640 <_printf_common+0x58>
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	4649      	mov	r1, r9
 800f6b6:	4638      	mov	r0, r7
 800f6b8:	47c0      	blx	r8
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	d0e6      	beq.n	800f68c <_printf_common+0xa4>
 800f6be:	3601      	adds	r6, #1
 800f6c0:	e7d9      	b.n	800f676 <_printf_common+0x8e>
	...

0800f6c4 <_printf_i>:
 800f6c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c8:	7e0f      	ldrb	r7, [r1, #24]
 800f6ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6cc:	2f78      	cmp	r7, #120	; 0x78
 800f6ce:	4691      	mov	r9, r2
 800f6d0:	4680      	mov	r8, r0
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	469a      	mov	sl, r3
 800f6d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6da:	d807      	bhi.n	800f6ec <_printf_i+0x28>
 800f6dc:	2f62      	cmp	r7, #98	; 0x62
 800f6de:	d80a      	bhi.n	800f6f6 <_printf_i+0x32>
 800f6e0:	2f00      	cmp	r7, #0
 800f6e2:	f000 80d4 	beq.w	800f88e <_printf_i+0x1ca>
 800f6e6:	2f58      	cmp	r7, #88	; 0x58
 800f6e8:	f000 80c0 	beq.w	800f86c <_printf_i+0x1a8>
 800f6ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6f4:	e03a      	b.n	800f76c <_printf_i+0xa8>
 800f6f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6fa:	2b15      	cmp	r3, #21
 800f6fc:	d8f6      	bhi.n	800f6ec <_printf_i+0x28>
 800f6fe:	a101      	add	r1, pc, #4	; (adr r1, 800f704 <_printf_i+0x40>)
 800f700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f704:	0800f75d 	.word	0x0800f75d
 800f708:	0800f771 	.word	0x0800f771
 800f70c:	0800f6ed 	.word	0x0800f6ed
 800f710:	0800f6ed 	.word	0x0800f6ed
 800f714:	0800f6ed 	.word	0x0800f6ed
 800f718:	0800f6ed 	.word	0x0800f6ed
 800f71c:	0800f771 	.word	0x0800f771
 800f720:	0800f6ed 	.word	0x0800f6ed
 800f724:	0800f6ed 	.word	0x0800f6ed
 800f728:	0800f6ed 	.word	0x0800f6ed
 800f72c:	0800f6ed 	.word	0x0800f6ed
 800f730:	0800f875 	.word	0x0800f875
 800f734:	0800f79d 	.word	0x0800f79d
 800f738:	0800f82f 	.word	0x0800f82f
 800f73c:	0800f6ed 	.word	0x0800f6ed
 800f740:	0800f6ed 	.word	0x0800f6ed
 800f744:	0800f897 	.word	0x0800f897
 800f748:	0800f6ed 	.word	0x0800f6ed
 800f74c:	0800f79d 	.word	0x0800f79d
 800f750:	0800f6ed 	.word	0x0800f6ed
 800f754:	0800f6ed 	.word	0x0800f6ed
 800f758:	0800f837 	.word	0x0800f837
 800f75c:	682b      	ldr	r3, [r5, #0]
 800f75e:	1d1a      	adds	r2, r3, #4
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	602a      	str	r2, [r5, #0]
 800f764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f76c:	2301      	movs	r3, #1
 800f76e:	e09f      	b.n	800f8b0 <_printf_i+0x1ec>
 800f770:	6820      	ldr	r0, [r4, #0]
 800f772:	682b      	ldr	r3, [r5, #0]
 800f774:	0607      	lsls	r7, r0, #24
 800f776:	f103 0104 	add.w	r1, r3, #4
 800f77a:	6029      	str	r1, [r5, #0]
 800f77c:	d501      	bpl.n	800f782 <_printf_i+0xbe>
 800f77e:	681e      	ldr	r6, [r3, #0]
 800f780:	e003      	b.n	800f78a <_printf_i+0xc6>
 800f782:	0646      	lsls	r6, r0, #25
 800f784:	d5fb      	bpl.n	800f77e <_printf_i+0xba>
 800f786:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f78a:	2e00      	cmp	r6, #0
 800f78c:	da03      	bge.n	800f796 <_printf_i+0xd2>
 800f78e:	232d      	movs	r3, #45	; 0x2d
 800f790:	4276      	negs	r6, r6
 800f792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f796:	485a      	ldr	r0, [pc, #360]	; (800f900 <_printf_i+0x23c>)
 800f798:	230a      	movs	r3, #10
 800f79a:	e012      	b.n	800f7c2 <_printf_i+0xfe>
 800f79c:	682b      	ldr	r3, [r5, #0]
 800f79e:	6820      	ldr	r0, [r4, #0]
 800f7a0:	1d19      	adds	r1, r3, #4
 800f7a2:	6029      	str	r1, [r5, #0]
 800f7a4:	0605      	lsls	r5, r0, #24
 800f7a6:	d501      	bpl.n	800f7ac <_printf_i+0xe8>
 800f7a8:	681e      	ldr	r6, [r3, #0]
 800f7aa:	e002      	b.n	800f7b2 <_printf_i+0xee>
 800f7ac:	0641      	lsls	r1, r0, #25
 800f7ae:	d5fb      	bpl.n	800f7a8 <_printf_i+0xe4>
 800f7b0:	881e      	ldrh	r6, [r3, #0]
 800f7b2:	4853      	ldr	r0, [pc, #332]	; (800f900 <_printf_i+0x23c>)
 800f7b4:	2f6f      	cmp	r7, #111	; 0x6f
 800f7b6:	bf0c      	ite	eq
 800f7b8:	2308      	moveq	r3, #8
 800f7ba:	230a      	movne	r3, #10
 800f7bc:	2100      	movs	r1, #0
 800f7be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7c2:	6865      	ldr	r5, [r4, #4]
 800f7c4:	60a5      	str	r5, [r4, #8]
 800f7c6:	2d00      	cmp	r5, #0
 800f7c8:	bfa2      	ittt	ge
 800f7ca:	6821      	ldrge	r1, [r4, #0]
 800f7cc:	f021 0104 	bicge.w	r1, r1, #4
 800f7d0:	6021      	strge	r1, [r4, #0]
 800f7d2:	b90e      	cbnz	r6, 800f7d8 <_printf_i+0x114>
 800f7d4:	2d00      	cmp	r5, #0
 800f7d6:	d04b      	beq.n	800f870 <_printf_i+0x1ac>
 800f7d8:	4615      	mov	r5, r2
 800f7da:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7de:	fb03 6711 	mls	r7, r3, r1, r6
 800f7e2:	5dc7      	ldrb	r7, [r0, r7]
 800f7e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7e8:	4637      	mov	r7, r6
 800f7ea:	42bb      	cmp	r3, r7
 800f7ec:	460e      	mov	r6, r1
 800f7ee:	d9f4      	bls.n	800f7da <_printf_i+0x116>
 800f7f0:	2b08      	cmp	r3, #8
 800f7f2:	d10b      	bne.n	800f80c <_printf_i+0x148>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	07de      	lsls	r6, r3, #31
 800f7f8:	d508      	bpl.n	800f80c <_printf_i+0x148>
 800f7fa:	6923      	ldr	r3, [r4, #16]
 800f7fc:	6861      	ldr	r1, [r4, #4]
 800f7fe:	4299      	cmp	r1, r3
 800f800:	bfde      	ittt	le
 800f802:	2330      	movle	r3, #48	; 0x30
 800f804:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f80c:	1b52      	subs	r2, r2, r5
 800f80e:	6122      	str	r2, [r4, #16]
 800f810:	f8cd a000 	str.w	sl, [sp]
 800f814:	464b      	mov	r3, r9
 800f816:	aa03      	add	r2, sp, #12
 800f818:	4621      	mov	r1, r4
 800f81a:	4640      	mov	r0, r8
 800f81c:	f7ff fee4 	bl	800f5e8 <_printf_common>
 800f820:	3001      	adds	r0, #1
 800f822:	d14a      	bne.n	800f8ba <_printf_i+0x1f6>
 800f824:	f04f 30ff 	mov.w	r0, #4294967295
 800f828:	b004      	add	sp, #16
 800f82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f82e:	6823      	ldr	r3, [r4, #0]
 800f830:	f043 0320 	orr.w	r3, r3, #32
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	4833      	ldr	r0, [pc, #204]	; (800f904 <_printf_i+0x240>)
 800f838:	2778      	movs	r7, #120	; 0x78
 800f83a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	6829      	ldr	r1, [r5, #0]
 800f842:	061f      	lsls	r7, r3, #24
 800f844:	f851 6b04 	ldr.w	r6, [r1], #4
 800f848:	d402      	bmi.n	800f850 <_printf_i+0x18c>
 800f84a:	065f      	lsls	r7, r3, #25
 800f84c:	bf48      	it	mi
 800f84e:	b2b6      	uxthmi	r6, r6
 800f850:	07df      	lsls	r7, r3, #31
 800f852:	bf48      	it	mi
 800f854:	f043 0320 	orrmi.w	r3, r3, #32
 800f858:	6029      	str	r1, [r5, #0]
 800f85a:	bf48      	it	mi
 800f85c:	6023      	strmi	r3, [r4, #0]
 800f85e:	b91e      	cbnz	r6, 800f868 <_printf_i+0x1a4>
 800f860:	6823      	ldr	r3, [r4, #0]
 800f862:	f023 0320 	bic.w	r3, r3, #32
 800f866:	6023      	str	r3, [r4, #0]
 800f868:	2310      	movs	r3, #16
 800f86a:	e7a7      	b.n	800f7bc <_printf_i+0xf8>
 800f86c:	4824      	ldr	r0, [pc, #144]	; (800f900 <_printf_i+0x23c>)
 800f86e:	e7e4      	b.n	800f83a <_printf_i+0x176>
 800f870:	4615      	mov	r5, r2
 800f872:	e7bd      	b.n	800f7f0 <_printf_i+0x12c>
 800f874:	682b      	ldr	r3, [r5, #0]
 800f876:	6826      	ldr	r6, [r4, #0]
 800f878:	6961      	ldr	r1, [r4, #20]
 800f87a:	1d18      	adds	r0, r3, #4
 800f87c:	6028      	str	r0, [r5, #0]
 800f87e:	0635      	lsls	r5, r6, #24
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	d501      	bpl.n	800f888 <_printf_i+0x1c4>
 800f884:	6019      	str	r1, [r3, #0]
 800f886:	e002      	b.n	800f88e <_printf_i+0x1ca>
 800f888:	0670      	lsls	r0, r6, #25
 800f88a:	d5fb      	bpl.n	800f884 <_printf_i+0x1c0>
 800f88c:	8019      	strh	r1, [r3, #0]
 800f88e:	2300      	movs	r3, #0
 800f890:	6123      	str	r3, [r4, #16]
 800f892:	4615      	mov	r5, r2
 800f894:	e7bc      	b.n	800f810 <_printf_i+0x14c>
 800f896:	682b      	ldr	r3, [r5, #0]
 800f898:	1d1a      	adds	r2, r3, #4
 800f89a:	602a      	str	r2, [r5, #0]
 800f89c:	681d      	ldr	r5, [r3, #0]
 800f89e:	6862      	ldr	r2, [r4, #4]
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	f7f0 fcbc 	bl	8000220 <memchr>
 800f8a8:	b108      	cbz	r0, 800f8ae <_printf_i+0x1ea>
 800f8aa:	1b40      	subs	r0, r0, r5
 800f8ac:	6060      	str	r0, [r4, #4]
 800f8ae:	6863      	ldr	r3, [r4, #4]
 800f8b0:	6123      	str	r3, [r4, #16]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8b8:	e7aa      	b.n	800f810 <_printf_i+0x14c>
 800f8ba:	6923      	ldr	r3, [r4, #16]
 800f8bc:	462a      	mov	r2, r5
 800f8be:	4649      	mov	r1, r9
 800f8c0:	4640      	mov	r0, r8
 800f8c2:	47d0      	blx	sl
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	d0ad      	beq.n	800f824 <_printf_i+0x160>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	079b      	lsls	r3, r3, #30
 800f8cc:	d413      	bmi.n	800f8f6 <_printf_i+0x232>
 800f8ce:	68e0      	ldr	r0, [r4, #12]
 800f8d0:	9b03      	ldr	r3, [sp, #12]
 800f8d2:	4298      	cmp	r0, r3
 800f8d4:	bfb8      	it	lt
 800f8d6:	4618      	movlt	r0, r3
 800f8d8:	e7a6      	b.n	800f828 <_printf_i+0x164>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	4632      	mov	r2, r6
 800f8de:	4649      	mov	r1, r9
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	47d0      	blx	sl
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	d09d      	beq.n	800f824 <_printf_i+0x160>
 800f8e8:	3501      	adds	r5, #1
 800f8ea:	68e3      	ldr	r3, [r4, #12]
 800f8ec:	9903      	ldr	r1, [sp, #12]
 800f8ee:	1a5b      	subs	r3, r3, r1
 800f8f0:	42ab      	cmp	r3, r5
 800f8f2:	dcf2      	bgt.n	800f8da <_printf_i+0x216>
 800f8f4:	e7eb      	b.n	800f8ce <_printf_i+0x20a>
 800f8f6:	2500      	movs	r5, #0
 800f8f8:	f104 0619 	add.w	r6, r4, #25
 800f8fc:	e7f5      	b.n	800f8ea <_printf_i+0x226>
 800f8fe:	bf00      	nop
 800f900:	08015724 	.word	0x08015724
 800f904:	08015735 	.word	0x08015735

0800f908 <_scanf_float>:
 800f908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90c:	b087      	sub	sp, #28
 800f90e:	4617      	mov	r7, r2
 800f910:	9303      	str	r3, [sp, #12]
 800f912:	688b      	ldr	r3, [r1, #8]
 800f914:	1e5a      	subs	r2, r3, #1
 800f916:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f91a:	bf83      	ittte	hi
 800f91c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f920:	195b      	addhi	r3, r3, r5
 800f922:	9302      	strhi	r3, [sp, #8]
 800f924:	2300      	movls	r3, #0
 800f926:	bf86      	itte	hi
 800f928:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f92c:	608b      	strhi	r3, [r1, #8]
 800f92e:	9302      	strls	r3, [sp, #8]
 800f930:	680b      	ldr	r3, [r1, #0]
 800f932:	468b      	mov	fp, r1
 800f934:	2500      	movs	r5, #0
 800f936:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f93a:	f84b 3b1c 	str.w	r3, [fp], #28
 800f93e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f942:	4680      	mov	r8, r0
 800f944:	460c      	mov	r4, r1
 800f946:	465e      	mov	r6, fp
 800f948:	46aa      	mov	sl, r5
 800f94a:	46a9      	mov	r9, r5
 800f94c:	9501      	str	r5, [sp, #4]
 800f94e:	68a2      	ldr	r2, [r4, #8]
 800f950:	b152      	cbz	r2, 800f968 <_scanf_float+0x60>
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	2b4e      	cmp	r3, #78	; 0x4e
 800f958:	d864      	bhi.n	800fa24 <_scanf_float+0x11c>
 800f95a:	2b40      	cmp	r3, #64	; 0x40
 800f95c:	d83c      	bhi.n	800f9d8 <_scanf_float+0xd0>
 800f95e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f962:	b2c8      	uxtb	r0, r1
 800f964:	280e      	cmp	r0, #14
 800f966:	d93a      	bls.n	800f9de <_scanf_float+0xd6>
 800f968:	f1b9 0f00 	cmp.w	r9, #0
 800f96c:	d003      	beq.n	800f976 <_scanf_float+0x6e>
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f97a:	f1ba 0f01 	cmp.w	sl, #1
 800f97e:	f200 8113 	bhi.w	800fba8 <_scanf_float+0x2a0>
 800f982:	455e      	cmp	r6, fp
 800f984:	f200 8105 	bhi.w	800fb92 <_scanf_float+0x28a>
 800f988:	2501      	movs	r5, #1
 800f98a:	4628      	mov	r0, r5
 800f98c:	b007      	add	sp, #28
 800f98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f992:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f996:	2a0d      	cmp	r2, #13
 800f998:	d8e6      	bhi.n	800f968 <_scanf_float+0x60>
 800f99a:	a101      	add	r1, pc, #4	; (adr r1, 800f9a0 <_scanf_float+0x98>)
 800f99c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f9a0:	0800fadf 	.word	0x0800fadf
 800f9a4:	0800f969 	.word	0x0800f969
 800f9a8:	0800f969 	.word	0x0800f969
 800f9ac:	0800f969 	.word	0x0800f969
 800f9b0:	0800fb3f 	.word	0x0800fb3f
 800f9b4:	0800fb17 	.word	0x0800fb17
 800f9b8:	0800f969 	.word	0x0800f969
 800f9bc:	0800f969 	.word	0x0800f969
 800f9c0:	0800faed 	.word	0x0800faed
 800f9c4:	0800f969 	.word	0x0800f969
 800f9c8:	0800f969 	.word	0x0800f969
 800f9cc:	0800f969 	.word	0x0800f969
 800f9d0:	0800f969 	.word	0x0800f969
 800f9d4:	0800faa5 	.word	0x0800faa5
 800f9d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f9dc:	e7db      	b.n	800f996 <_scanf_float+0x8e>
 800f9de:	290e      	cmp	r1, #14
 800f9e0:	d8c2      	bhi.n	800f968 <_scanf_float+0x60>
 800f9e2:	a001      	add	r0, pc, #4	; (adr r0, 800f9e8 <_scanf_float+0xe0>)
 800f9e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9e8:	0800fa97 	.word	0x0800fa97
 800f9ec:	0800f969 	.word	0x0800f969
 800f9f0:	0800fa97 	.word	0x0800fa97
 800f9f4:	0800fb2b 	.word	0x0800fb2b
 800f9f8:	0800f969 	.word	0x0800f969
 800f9fc:	0800fa45 	.word	0x0800fa45
 800fa00:	0800fa81 	.word	0x0800fa81
 800fa04:	0800fa81 	.word	0x0800fa81
 800fa08:	0800fa81 	.word	0x0800fa81
 800fa0c:	0800fa81 	.word	0x0800fa81
 800fa10:	0800fa81 	.word	0x0800fa81
 800fa14:	0800fa81 	.word	0x0800fa81
 800fa18:	0800fa81 	.word	0x0800fa81
 800fa1c:	0800fa81 	.word	0x0800fa81
 800fa20:	0800fa81 	.word	0x0800fa81
 800fa24:	2b6e      	cmp	r3, #110	; 0x6e
 800fa26:	d809      	bhi.n	800fa3c <_scanf_float+0x134>
 800fa28:	2b60      	cmp	r3, #96	; 0x60
 800fa2a:	d8b2      	bhi.n	800f992 <_scanf_float+0x8a>
 800fa2c:	2b54      	cmp	r3, #84	; 0x54
 800fa2e:	d077      	beq.n	800fb20 <_scanf_float+0x218>
 800fa30:	2b59      	cmp	r3, #89	; 0x59
 800fa32:	d199      	bne.n	800f968 <_scanf_float+0x60>
 800fa34:	2d07      	cmp	r5, #7
 800fa36:	d197      	bne.n	800f968 <_scanf_float+0x60>
 800fa38:	2508      	movs	r5, #8
 800fa3a:	e029      	b.n	800fa90 <_scanf_float+0x188>
 800fa3c:	2b74      	cmp	r3, #116	; 0x74
 800fa3e:	d06f      	beq.n	800fb20 <_scanf_float+0x218>
 800fa40:	2b79      	cmp	r3, #121	; 0x79
 800fa42:	e7f6      	b.n	800fa32 <_scanf_float+0x12a>
 800fa44:	6821      	ldr	r1, [r4, #0]
 800fa46:	05c8      	lsls	r0, r1, #23
 800fa48:	d51a      	bpl.n	800fa80 <_scanf_float+0x178>
 800fa4a:	9b02      	ldr	r3, [sp, #8]
 800fa4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fa50:	6021      	str	r1, [r4, #0]
 800fa52:	f109 0901 	add.w	r9, r9, #1
 800fa56:	b11b      	cbz	r3, 800fa60 <_scanf_float+0x158>
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	3201      	adds	r2, #1
 800fa5c:	9302      	str	r3, [sp, #8]
 800fa5e:	60a2      	str	r2, [r4, #8]
 800fa60:	68a3      	ldr	r3, [r4, #8]
 800fa62:	3b01      	subs	r3, #1
 800fa64:	60a3      	str	r3, [r4, #8]
 800fa66:	6923      	ldr	r3, [r4, #16]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	6123      	str	r3, [r4, #16]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	3b01      	subs	r3, #1
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	607b      	str	r3, [r7, #4]
 800fa74:	f340 8084 	ble.w	800fb80 <_scanf_float+0x278>
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	603b      	str	r3, [r7, #0]
 800fa7e:	e766      	b.n	800f94e <_scanf_float+0x46>
 800fa80:	eb1a 0f05 	cmn.w	sl, r5
 800fa84:	f47f af70 	bne.w	800f968 <_scanf_float+0x60>
 800fa88:	6822      	ldr	r2, [r4, #0]
 800fa8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fa8e:	6022      	str	r2, [r4, #0]
 800fa90:	f806 3b01 	strb.w	r3, [r6], #1
 800fa94:	e7e4      	b.n	800fa60 <_scanf_float+0x158>
 800fa96:	6822      	ldr	r2, [r4, #0]
 800fa98:	0610      	lsls	r0, r2, #24
 800fa9a:	f57f af65 	bpl.w	800f968 <_scanf_float+0x60>
 800fa9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800faa2:	e7f4      	b.n	800fa8e <_scanf_float+0x186>
 800faa4:	f1ba 0f00 	cmp.w	sl, #0
 800faa8:	d10e      	bne.n	800fac8 <_scanf_float+0x1c0>
 800faaa:	f1b9 0f00 	cmp.w	r9, #0
 800faae:	d10e      	bne.n	800face <_scanf_float+0x1c6>
 800fab0:	6822      	ldr	r2, [r4, #0]
 800fab2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fab6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800faba:	d108      	bne.n	800face <_scanf_float+0x1c6>
 800fabc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fac0:	6022      	str	r2, [r4, #0]
 800fac2:	f04f 0a01 	mov.w	sl, #1
 800fac6:	e7e3      	b.n	800fa90 <_scanf_float+0x188>
 800fac8:	f1ba 0f02 	cmp.w	sl, #2
 800facc:	d055      	beq.n	800fb7a <_scanf_float+0x272>
 800face:	2d01      	cmp	r5, #1
 800fad0:	d002      	beq.n	800fad8 <_scanf_float+0x1d0>
 800fad2:	2d04      	cmp	r5, #4
 800fad4:	f47f af48 	bne.w	800f968 <_scanf_float+0x60>
 800fad8:	3501      	adds	r5, #1
 800fada:	b2ed      	uxtb	r5, r5
 800fadc:	e7d8      	b.n	800fa90 <_scanf_float+0x188>
 800fade:	f1ba 0f01 	cmp.w	sl, #1
 800fae2:	f47f af41 	bne.w	800f968 <_scanf_float+0x60>
 800fae6:	f04f 0a02 	mov.w	sl, #2
 800faea:	e7d1      	b.n	800fa90 <_scanf_float+0x188>
 800faec:	b97d      	cbnz	r5, 800fb0e <_scanf_float+0x206>
 800faee:	f1b9 0f00 	cmp.w	r9, #0
 800faf2:	f47f af3c 	bne.w	800f96e <_scanf_float+0x66>
 800faf6:	6822      	ldr	r2, [r4, #0]
 800faf8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fafc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fb00:	f47f af39 	bne.w	800f976 <_scanf_float+0x6e>
 800fb04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb08:	6022      	str	r2, [r4, #0]
 800fb0a:	2501      	movs	r5, #1
 800fb0c:	e7c0      	b.n	800fa90 <_scanf_float+0x188>
 800fb0e:	2d03      	cmp	r5, #3
 800fb10:	d0e2      	beq.n	800fad8 <_scanf_float+0x1d0>
 800fb12:	2d05      	cmp	r5, #5
 800fb14:	e7de      	b.n	800fad4 <_scanf_float+0x1cc>
 800fb16:	2d02      	cmp	r5, #2
 800fb18:	f47f af26 	bne.w	800f968 <_scanf_float+0x60>
 800fb1c:	2503      	movs	r5, #3
 800fb1e:	e7b7      	b.n	800fa90 <_scanf_float+0x188>
 800fb20:	2d06      	cmp	r5, #6
 800fb22:	f47f af21 	bne.w	800f968 <_scanf_float+0x60>
 800fb26:	2507      	movs	r5, #7
 800fb28:	e7b2      	b.n	800fa90 <_scanf_float+0x188>
 800fb2a:	6822      	ldr	r2, [r4, #0]
 800fb2c:	0591      	lsls	r1, r2, #22
 800fb2e:	f57f af1b 	bpl.w	800f968 <_scanf_float+0x60>
 800fb32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fb36:	6022      	str	r2, [r4, #0]
 800fb38:	f8cd 9004 	str.w	r9, [sp, #4]
 800fb3c:	e7a8      	b.n	800fa90 <_scanf_float+0x188>
 800fb3e:	6822      	ldr	r2, [r4, #0]
 800fb40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fb44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fb48:	d006      	beq.n	800fb58 <_scanf_float+0x250>
 800fb4a:	0550      	lsls	r0, r2, #21
 800fb4c:	f57f af0c 	bpl.w	800f968 <_scanf_float+0x60>
 800fb50:	f1b9 0f00 	cmp.w	r9, #0
 800fb54:	f43f af0f 	beq.w	800f976 <_scanf_float+0x6e>
 800fb58:	0591      	lsls	r1, r2, #22
 800fb5a:	bf58      	it	pl
 800fb5c:	9901      	ldrpl	r1, [sp, #4]
 800fb5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb62:	bf58      	it	pl
 800fb64:	eba9 0101 	subpl.w	r1, r9, r1
 800fb68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fb6c:	bf58      	it	pl
 800fb6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb72:	6022      	str	r2, [r4, #0]
 800fb74:	f04f 0900 	mov.w	r9, #0
 800fb78:	e78a      	b.n	800fa90 <_scanf_float+0x188>
 800fb7a:	f04f 0a03 	mov.w	sl, #3
 800fb7e:	e787      	b.n	800fa90 <_scanf_float+0x188>
 800fb80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb84:	4639      	mov	r1, r7
 800fb86:	4640      	mov	r0, r8
 800fb88:	4798      	blx	r3
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	f43f aedf 	beq.w	800f94e <_scanf_float+0x46>
 800fb90:	e6ea      	b.n	800f968 <_scanf_float+0x60>
 800fb92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb9a:	463a      	mov	r2, r7
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	4798      	blx	r3
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	3b01      	subs	r3, #1
 800fba4:	6123      	str	r3, [r4, #16]
 800fba6:	e6ec      	b.n	800f982 <_scanf_float+0x7a>
 800fba8:	1e6b      	subs	r3, r5, #1
 800fbaa:	2b06      	cmp	r3, #6
 800fbac:	d825      	bhi.n	800fbfa <_scanf_float+0x2f2>
 800fbae:	2d02      	cmp	r5, #2
 800fbb0:	d836      	bhi.n	800fc20 <_scanf_float+0x318>
 800fbb2:	455e      	cmp	r6, fp
 800fbb4:	f67f aee8 	bls.w	800f988 <_scanf_float+0x80>
 800fbb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbc0:	463a      	mov	r2, r7
 800fbc2:	4640      	mov	r0, r8
 800fbc4:	4798      	blx	r3
 800fbc6:	6923      	ldr	r3, [r4, #16]
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	6123      	str	r3, [r4, #16]
 800fbcc:	e7f1      	b.n	800fbb2 <_scanf_float+0x2aa>
 800fbce:	9802      	ldr	r0, [sp, #8]
 800fbd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbd4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fbd8:	9002      	str	r0, [sp, #8]
 800fbda:	463a      	mov	r2, r7
 800fbdc:	4640      	mov	r0, r8
 800fbde:	4798      	blx	r3
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	3b01      	subs	r3, #1
 800fbe4:	6123      	str	r3, [r4, #16]
 800fbe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbea:	fa5f fa8a 	uxtb.w	sl, sl
 800fbee:	f1ba 0f02 	cmp.w	sl, #2
 800fbf2:	d1ec      	bne.n	800fbce <_scanf_float+0x2c6>
 800fbf4:	3d03      	subs	r5, #3
 800fbf6:	b2ed      	uxtb	r5, r5
 800fbf8:	1b76      	subs	r6, r6, r5
 800fbfa:	6823      	ldr	r3, [r4, #0]
 800fbfc:	05da      	lsls	r2, r3, #23
 800fbfe:	d52f      	bpl.n	800fc60 <_scanf_float+0x358>
 800fc00:	055b      	lsls	r3, r3, #21
 800fc02:	d510      	bpl.n	800fc26 <_scanf_float+0x31e>
 800fc04:	455e      	cmp	r6, fp
 800fc06:	f67f aebf 	bls.w	800f988 <_scanf_float+0x80>
 800fc0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc12:	463a      	mov	r2, r7
 800fc14:	4640      	mov	r0, r8
 800fc16:	4798      	blx	r3
 800fc18:	6923      	ldr	r3, [r4, #16]
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	6123      	str	r3, [r4, #16]
 800fc1e:	e7f1      	b.n	800fc04 <_scanf_float+0x2fc>
 800fc20:	46aa      	mov	sl, r5
 800fc22:	9602      	str	r6, [sp, #8]
 800fc24:	e7df      	b.n	800fbe6 <_scanf_float+0x2de>
 800fc26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc2a:	6923      	ldr	r3, [r4, #16]
 800fc2c:	2965      	cmp	r1, #101	; 0x65
 800fc2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc32:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc36:	6123      	str	r3, [r4, #16]
 800fc38:	d00c      	beq.n	800fc54 <_scanf_float+0x34c>
 800fc3a:	2945      	cmp	r1, #69	; 0x45
 800fc3c:	d00a      	beq.n	800fc54 <_scanf_float+0x34c>
 800fc3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc42:	463a      	mov	r2, r7
 800fc44:	4640      	mov	r0, r8
 800fc46:	4798      	blx	r3
 800fc48:	6923      	ldr	r3, [r4, #16]
 800fc4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	1eb5      	subs	r5, r6, #2
 800fc52:	6123      	str	r3, [r4, #16]
 800fc54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc58:	463a      	mov	r2, r7
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	4798      	blx	r3
 800fc5e:	462e      	mov	r6, r5
 800fc60:	6825      	ldr	r5, [r4, #0]
 800fc62:	f015 0510 	ands.w	r5, r5, #16
 800fc66:	d158      	bne.n	800fd1a <_scanf_float+0x412>
 800fc68:	7035      	strb	r5, [r6, #0]
 800fc6a:	6823      	ldr	r3, [r4, #0]
 800fc6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fc70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc74:	d11c      	bne.n	800fcb0 <_scanf_float+0x3a8>
 800fc76:	9b01      	ldr	r3, [sp, #4]
 800fc78:	454b      	cmp	r3, r9
 800fc7a:	eba3 0209 	sub.w	r2, r3, r9
 800fc7e:	d124      	bne.n	800fcca <_scanf_float+0x3c2>
 800fc80:	2200      	movs	r2, #0
 800fc82:	4659      	mov	r1, fp
 800fc84:	4640      	mov	r0, r8
 800fc86:	f002 fcd3 	bl	8012630 <_strtod_r>
 800fc8a:	9b03      	ldr	r3, [sp, #12]
 800fc8c:	6821      	ldr	r1, [r4, #0]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f011 0f02 	tst.w	r1, #2
 800fc94:	ec57 6b10 	vmov	r6, r7, d0
 800fc98:	f103 0204 	add.w	r2, r3, #4
 800fc9c:	d020      	beq.n	800fce0 <_scanf_float+0x3d8>
 800fc9e:	9903      	ldr	r1, [sp, #12]
 800fca0:	600a      	str	r2, [r1, #0]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	e9c3 6700 	strd	r6, r7, [r3]
 800fca8:	68e3      	ldr	r3, [r4, #12]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	60e3      	str	r3, [r4, #12]
 800fcae:	e66c      	b.n	800f98a <_scanf_float+0x82>
 800fcb0:	9b04      	ldr	r3, [sp, #16]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d0e4      	beq.n	800fc80 <_scanf_float+0x378>
 800fcb6:	9905      	ldr	r1, [sp, #20]
 800fcb8:	230a      	movs	r3, #10
 800fcba:	462a      	mov	r2, r5
 800fcbc:	3101      	adds	r1, #1
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	f002 fd3e 	bl	8012740 <_strtol_r>
 800fcc4:	9b04      	ldr	r3, [sp, #16]
 800fcc6:	9e05      	ldr	r6, [sp, #20]
 800fcc8:	1ac2      	subs	r2, r0, r3
 800fcca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fcce:	429e      	cmp	r6, r3
 800fcd0:	bf28      	it	cs
 800fcd2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fcd6:	4912      	ldr	r1, [pc, #72]	; (800fd20 <_scanf_float+0x418>)
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f000 f8e7 	bl	800feac <siprintf>
 800fcde:	e7cf      	b.n	800fc80 <_scanf_float+0x378>
 800fce0:	f011 0f04 	tst.w	r1, #4
 800fce4:	9903      	ldr	r1, [sp, #12]
 800fce6:	600a      	str	r2, [r1, #0]
 800fce8:	d1db      	bne.n	800fca2 <_scanf_float+0x39a>
 800fcea:	f8d3 8000 	ldr.w	r8, [r3]
 800fcee:	ee10 2a10 	vmov	r2, s0
 800fcf2:	ee10 0a10 	vmov	r0, s0
 800fcf6:	463b      	mov	r3, r7
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 ff3f 	bl	8000b7c <__aeabi_dcmpun>
 800fcfe:	b128      	cbz	r0, 800fd0c <_scanf_float+0x404>
 800fd00:	4808      	ldr	r0, [pc, #32]	; (800fd24 <_scanf_float+0x41c>)
 800fd02:	f000 fa5b 	bl	80101bc <nanf>
 800fd06:	ed88 0a00 	vstr	s0, [r8]
 800fd0a:	e7cd      	b.n	800fca8 <_scanf_float+0x3a0>
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	4639      	mov	r1, r7
 800fd10:	f7f0 ff92 	bl	8000c38 <__aeabi_d2f>
 800fd14:	f8c8 0000 	str.w	r0, [r8]
 800fd18:	e7c6      	b.n	800fca8 <_scanf_float+0x3a0>
 800fd1a:	2500      	movs	r5, #0
 800fd1c:	e635      	b.n	800f98a <_scanf_float+0x82>
 800fd1e:	bf00      	nop
 800fd20:	08015746 	.word	0x08015746
 800fd24:	08015af8 	.word	0x08015af8

0800fd28 <std>:
 800fd28:	2300      	movs	r3, #0
 800fd2a:	b510      	push	{r4, lr}
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	e9c0 3300 	strd	r3, r3, [r0]
 800fd32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd36:	6083      	str	r3, [r0, #8]
 800fd38:	8181      	strh	r1, [r0, #12]
 800fd3a:	6643      	str	r3, [r0, #100]	; 0x64
 800fd3c:	81c2      	strh	r2, [r0, #14]
 800fd3e:	6183      	str	r3, [r0, #24]
 800fd40:	4619      	mov	r1, r3
 800fd42:	2208      	movs	r2, #8
 800fd44:	305c      	adds	r0, #92	; 0x5c
 800fd46:	f000 f942 	bl	800ffce <memset>
 800fd4a:	4b0d      	ldr	r3, [pc, #52]	; (800fd80 <std+0x58>)
 800fd4c:	6263      	str	r3, [r4, #36]	; 0x24
 800fd4e:	4b0d      	ldr	r3, [pc, #52]	; (800fd84 <std+0x5c>)
 800fd50:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd52:	4b0d      	ldr	r3, [pc, #52]	; (800fd88 <std+0x60>)
 800fd54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd56:	4b0d      	ldr	r3, [pc, #52]	; (800fd8c <std+0x64>)
 800fd58:	6323      	str	r3, [r4, #48]	; 0x30
 800fd5a:	4b0d      	ldr	r3, [pc, #52]	; (800fd90 <std+0x68>)
 800fd5c:	6224      	str	r4, [r4, #32]
 800fd5e:	429c      	cmp	r4, r3
 800fd60:	d006      	beq.n	800fd70 <std+0x48>
 800fd62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fd66:	4294      	cmp	r4, r2
 800fd68:	d002      	beq.n	800fd70 <std+0x48>
 800fd6a:	33d0      	adds	r3, #208	; 0xd0
 800fd6c:	429c      	cmp	r4, r3
 800fd6e:	d105      	bne.n	800fd7c <std+0x54>
 800fd70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd78:	f000 ba0e 	b.w	8010198 <__retarget_lock_init_recursive>
 800fd7c:	bd10      	pop	{r4, pc}
 800fd7e:	bf00      	nop
 800fd80:	0800ff45 	.word	0x0800ff45
 800fd84:	0800ff6b 	.word	0x0800ff6b
 800fd88:	0800ffa3 	.word	0x0800ffa3
 800fd8c:	0800ffc7 	.word	0x0800ffc7
 800fd90:	20004924 	.word	0x20004924

0800fd94 <stdio_exit_handler>:
 800fd94:	4a02      	ldr	r2, [pc, #8]	; (800fda0 <stdio_exit_handler+0xc>)
 800fd96:	4903      	ldr	r1, [pc, #12]	; (800fda4 <stdio_exit_handler+0x10>)
 800fd98:	4803      	ldr	r0, [pc, #12]	; (800fda8 <stdio_exit_handler+0x14>)
 800fd9a:	f000 b869 	b.w	800fe70 <_fwalk_sglue>
 800fd9e:	bf00      	nop
 800fda0:	2000001c 	.word	0x2000001c
 800fda4:	08013141 	.word	0x08013141
 800fda8:	20000028 	.word	0x20000028

0800fdac <cleanup_stdio>:
 800fdac:	6841      	ldr	r1, [r0, #4]
 800fdae:	4b0c      	ldr	r3, [pc, #48]	; (800fde0 <cleanup_stdio+0x34>)
 800fdb0:	4299      	cmp	r1, r3
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	d001      	beq.n	800fdbc <cleanup_stdio+0x10>
 800fdb8:	f003 f9c2 	bl	8013140 <_fflush_r>
 800fdbc:	68a1      	ldr	r1, [r4, #8]
 800fdbe:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <cleanup_stdio+0x38>)
 800fdc0:	4299      	cmp	r1, r3
 800fdc2:	d002      	beq.n	800fdca <cleanup_stdio+0x1e>
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f003 f9bb 	bl	8013140 <_fflush_r>
 800fdca:	68e1      	ldr	r1, [r4, #12]
 800fdcc:	4b06      	ldr	r3, [pc, #24]	; (800fde8 <cleanup_stdio+0x3c>)
 800fdce:	4299      	cmp	r1, r3
 800fdd0:	d004      	beq.n	800fddc <cleanup_stdio+0x30>
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdd8:	f003 b9b2 	b.w	8013140 <_fflush_r>
 800fddc:	bd10      	pop	{r4, pc}
 800fdde:	bf00      	nop
 800fde0:	20004924 	.word	0x20004924
 800fde4:	2000498c 	.word	0x2000498c
 800fde8:	200049f4 	.word	0x200049f4

0800fdec <global_stdio_init.part.0>:
 800fdec:	b510      	push	{r4, lr}
 800fdee:	4b0b      	ldr	r3, [pc, #44]	; (800fe1c <global_stdio_init.part.0+0x30>)
 800fdf0:	4c0b      	ldr	r4, [pc, #44]	; (800fe20 <global_stdio_init.part.0+0x34>)
 800fdf2:	4a0c      	ldr	r2, [pc, #48]	; (800fe24 <global_stdio_init.part.0+0x38>)
 800fdf4:	601a      	str	r2, [r3, #0]
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	2104      	movs	r1, #4
 800fdfc:	f7ff ff94 	bl	800fd28 <std>
 800fe00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fe04:	2201      	movs	r2, #1
 800fe06:	2109      	movs	r1, #9
 800fe08:	f7ff ff8e 	bl	800fd28 <std>
 800fe0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fe10:	2202      	movs	r2, #2
 800fe12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe16:	2112      	movs	r1, #18
 800fe18:	f7ff bf86 	b.w	800fd28 <std>
 800fe1c:	20004a5c 	.word	0x20004a5c
 800fe20:	20004924 	.word	0x20004924
 800fe24:	0800fd95 	.word	0x0800fd95

0800fe28 <__sfp_lock_acquire>:
 800fe28:	4801      	ldr	r0, [pc, #4]	; (800fe30 <__sfp_lock_acquire+0x8>)
 800fe2a:	f000 b9b6 	b.w	801019a <__retarget_lock_acquire_recursive>
 800fe2e:	bf00      	nop
 800fe30:	20004a65 	.word	0x20004a65

0800fe34 <__sfp_lock_release>:
 800fe34:	4801      	ldr	r0, [pc, #4]	; (800fe3c <__sfp_lock_release+0x8>)
 800fe36:	f000 b9b1 	b.w	801019c <__retarget_lock_release_recursive>
 800fe3a:	bf00      	nop
 800fe3c:	20004a65 	.word	0x20004a65

0800fe40 <__sinit>:
 800fe40:	b510      	push	{r4, lr}
 800fe42:	4604      	mov	r4, r0
 800fe44:	f7ff fff0 	bl	800fe28 <__sfp_lock_acquire>
 800fe48:	6a23      	ldr	r3, [r4, #32]
 800fe4a:	b11b      	cbz	r3, 800fe54 <__sinit+0x14>
 800fe4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe50:	f7ff bff0 	b.w	800fe34 <__sfp_lock_release>
 800fe54:	4b04      	ldr	r3, [pc, #16]	; (800fe68 <__sinit+0x28>)
 800fe56:	6223      	str	r3, [r4, #32]
 800fe58:	4b04      	ldr	r3, [pc, #16]	; (800fe6c <__sinit+0x2c>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1f5      	bne.n	800fe4c <__sinit+0xc>
 800fe60:	f7ff ffc4 	bl	800fdec <global_stdio_init.part.0>
 800fe64:	e7f2      	b.n	800fe4c <__sinit+0xc>
 800fe66:	bf00      	nop
 800fe68:	0800fdad 	.word	0x0800fdad
 800fe6c:	20004a5c 	.word	0x20004a5c

0800fe70 <_fwalk_sglue>:
 800fe70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe74:	4607      	mov	r7, r0
 800fe76:	4688      	mov	r8, r1
 800fe78:	4614      	mov	r4, r2
 800fe7a:	2600      	movs	r6, #0
 800fe7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe80:	f1b9 0901 	subs.w	r9, r9, #1
 800fe84:	d505      	bpl.n	800fe92 <_fwalk_sglue+0x22>
 800fe86:	6824      	ldr	r4, [r4, #0]
 800fe88:	2c00      	cmp	r4, #0
 800fe8a:	d1f7      	bne.n	800fe7c <_fwalk_sglue+0xc>
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe92:	89ab      	ldrh	r3, [r5, #12]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d907      	bls.n	800fea8 <_fwalk_sglue+0x38>
 800fe98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	d003      	beq.n	800fea8 <_fwalk_sglue+0x38>
 800fea0:	4629      	mov	r1, r5
 800fea2:	4638      	mov	r0, r7
 800fea4:	47c0      	blx	r8
 800fea6:	4306      	orrs	r6, r0
 800fea8:	3568      	adds	r5, #104	; 0x68
 800feaa:	e7e9      	b.n	800fe80 <_fwalk_sglue+0x10>

0800feac <siprintf>:
 800feac:	b40e      	push	{r1, r2, r3}
 800feae:	b500      	push	{lr}
 800feb0:	b09c      	sub	sp, #112	; 0x70
 800feb2:	ab1d      	add	r3, sp, #116	; 0x74
 800feb4:	9002      	str	r0, [sp, #8]
 800feb6:	9006      	str	r0, [sp, #24]
 800feb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800febc:	4809      	ldr	r0, [pc, #36]	; (800fee4 <siprintf+0x38>)
 800febe:	9107      	str	r1, [sp, #28]
 800fec0:	9104      	str	r1, [sp, #16]
 800fec2:	4909      	ldr	r1, [pc, #36]	; (800fee8 <siprintf+0x3c>)
 800fec4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fec8:	9105      	str	r1, [sp, #20]
 800feca:	6800      	ldr	r0, [r0, #0]
 800fecc:	9301      	str	r3, [sp, #4]
 800fece:	a902      	add	r1, sp, #8
 800fed0:	f002 fc92 	bl	80127f8 <_svfiprintf_r>
 800fed4:	9b02      	ldr	r3, [sp, #8]
 800fed6:	2200      	movs	r2, #0
 800fed8:	701a      	strb	r2, [r3, #0]
 800feda:	b01c      	add	sp, #112	; 0x70
 800fedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fee0:	b003      	add	sp, #12
 800fee2:	4770      	bx	lr
 800fee4:	20000074 	.word	0x20000074
 800fee8:	ffff0208 	.word	0xffff0208

0800feec <siscanf>:
 800feec:	b40e      	push	{r1, r2, r3}
 800feee:	b510      	push	{r4, lr}
 800fef0:	b09f      	sub	sp, #124	; 0x7c
 800fef2:	ac21      	add	r4, sp, #132	; 0x84
 800fef4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fef8:	f854 2b04 	ldr.w	r2, [r4], #4
 800fefc:	9201      	str	r2, [sp, #4]
 800fefe:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ff02:	9004      	str	r0, [sp, #16]
 800ff04:	9008      	str	r0, [sp, #32]
 800ff06:	f7f0 f9db 	bl	80002c0 <strlen>
 800ff0a:	4b0c      	ldr	r3, [pc, #48]	; (800ff3c <siscanf+0x50>)
 800ff0c:	9005      	str	r0, [sp, #20]
 800ff0e:	9009      	str	r0, [sp, #36]	; 0x24
 800ff10:	930d      	str	r3, [sp, #52]	; 0x34
 800ff12:	480b      	ldr	r0, [pc, #44]	; (800ff40 <siscanf+0x54>)
 800ff14:	9a01      	ldr	r2, [sp, #4]
 800ff16:	6800      	ldr	r0, [r0, #0]
 800ff18:	9403      	str	r4, [sp, #12]
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	9311      	str	r3, [sp, #68]	; 0x44
 800ff1e:	9316      	str	r3, [sp, #88]	; 0x58
 800ff20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff24:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ff28:	a904      	add	r1, sp, #16
 800ff2a:	4623      	mov	r3, r4
 800ff2c:	f002 fdbc 	bl	8012aa8 <__ssvfiscanf_r>
 800ff30:	b01f      	add	sp, #124	; 0x7c
 800ff32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff36:	b003      	add	sp, #12
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	0800ff67 	.word	0x0800ff67
 800ff40:	20000074 	.word	0x20000074

0800ff44 <__sread>:
 800ff44:	b510      	push	{r4, lr}
 800ff46:	460c      	mov	r4, r1
 800ff48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff4c:	f000 f8d6 	bl	80100fc <_read_r>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	bfab      	itete	ge
 800ff54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff56:	89a3      	ldrhlt	r3, [r4, #12]
 800ff58:	181b      	addge	r3, r3, r0
 800ff5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff5e:	bfac      	ite	ge
 800ff60:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff62:	81a3      	strhlt	r3, [r4, #12]
 800ff64:	bd10      	pop	{r4, pc}

0800ff66 <__seofread>:
 800ff66:	2000      	movs	r0, #0
 800ff68:	4770      	bx	lr

0800ff6a <__swrite>:
 800ff6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff6e:	461f      	mov	r7, r3
 800ff70:	898b      	ldrh	r3, [r1, #12]
 800ff72:	05db      	lsls	r3, r3, #23
 800ff74:	4605      	mov	r5, r0
 800ff76:	460c      	mov	r4, r1
 800ff78:	4616      	mov	r6, r2
 800ff7a:	d505      	bpl.n	800ff88 <__swrite+0x1e>
 800ff7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff80:	2302      	movs	r3, #2
 800ff82:	2200      	movs	r2, #0
 800ff84:	f000 f8a8 	bl	80100d8 <_lseek_r>
 800ff88:	89a3      	ldrh	r3, [r4, #12]
 800ff8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff92:	81a3      	strh	r3, [r4, #12]
 800ff94:	4632      	mov	r2, r6
 800ff96:	463b      	mov	r3, r7
 800ff98:	4628      	mov	r0, r5
 800ff9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff9e:	f000 b8bf 	b.w	8010120 <_write_r>

0800ffa2 <__sseek>:
 800ffa2:	b510      	push	{r4, lr}
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffaa:	f000 f895 	bl	80100d8 <_lseek_r>
 800ffae:	1c43      	adds	r3, r0, #1
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	bf15      	itete	ne
 800ffb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffbe:	81a3      	strheq	r3, [r4, #12]
 800ffc0:	bf18      	it	ne
 800ffc2:	81a3      	strhne	r3, [r4, #12]
 800ffc4:	bd10      	pop	{r4, pc}

0800ffc6 <__sclose>:
 800ffc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffca:	f000 b81f 	b.w	801000c <_close_r>

0800ffce <memset>:
 800ffce:	4402      	add	r2, r0
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d100      	bne.n	800ffd8 <memset+0xa>
 800ffd6:	4770      	bx	lr
 800ffd8:	f803 1b01 	strb.w	r1, [r3], #1
 800ffdc:	e7f9      	b.n	800ffd2 <memset+0x4>

0800ffde <strncmp>:
 800ffde:	b510      	push	{r4, lr}
 800ffe0:	b16a      	cbz	r2, 800fffe <strncmp+0x20>
 800ffe2:	3901      	subs	r1, #1
 800ffe4:	1884      	adds	r4, r0, r2
 800ffe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d103      	bne.n	800fffa <strncmp+0x1c>
 800fff2:	42a0      	cmp	r0, r4
 800fff4:	d001      	beq.n	800fffa <strncmp+0x1c>
 800fff6:	2a00      	cmp	r2, #0
 800fff8:	d1f5      	bne.n	800ffe6 <strncmp+0x8>
 800fffa:	1ad0      	subs	r0, r2, r3
 800fffc:	bd10      	pop	{r4, pc}
 800fffe:	4610      	mov	r0, r2
 8010000:	e7fc      	b.n	800fffc <strncmp+0x1e>
	...

08010004 <_localeconv_r>:
 8010004:	4800      	ldr	r0, [pc, #0]	; (8010008 <_localeconv_r+0x4>)
 8010006:	4770      	bx	lr
 8010008:	20000168 	.word	0x20000168

0801000c <_close_r>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	4d06      	ldr	r5, [pc, #24]	; (8010028 <_close_r+0x1c>)
 8010010:	2300      	movs	r3, #0
 8010012:	4604      	mov	r4, r0
 8010014:	4608      	mov	r0, r1
 8010016:	602b      	str	r3, [r5, #0]
 8010018:	f7f3 fcd5 	bl	80039c6 <_close>
 801001c:	1c43      	adds	r3, r0, #1
 801001e:	d102      	bne.n	8010026 <_close_r+0x1a>
 8010020:	682b      	ldr	r3, [r5, #0]
 8010022:	b103      	cbz	r3, 8010026 <_close_r+0x1a>
 8010024:	6023      	str	r3, [r4, #0]
 8010026:	bd38      	pop	{r3, r4, r5, pc}
 8010028:	20004a60 	.word	0x20004a60

0801002c <_reclaim_reent>:
 801002c:	4b29      	ldr	r3, [pc, #164]	; (80100d4 <_reclaim_reent+0xa8>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4283      	cmp	r3, r0
 8010032:	b570      	push	{r4, r5, r6, lr}
 8010034:	4604      	mov	r4, r0
 8010036:	d04b      	beq.n	80100d0 <_reclaim_reent+0xa4>
 8010038:	69c3      	ldr	r3, [r0, #28]
 801003a:	b143      	cbz	r3, 801004e <_reclaim_reent+0x22>
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d144      	bne.n	80100cc <_reclaim_reent+0xa0>
 8010042:	69e3      	ldr	r3, [r4, #28]
 8010044:	6819      	ldr	r1, [r3, #0]
 8010046:	b111      	cbz	r1, 801004e <_reclaim_reent+0x22>
 8010048:	4620      	mov	r0, r4
 801004a:	f000 ff37 	bl	8010ebc <_free_r>
 801004e:	6961      	ldr	r1, [r4, #20]
 8010050:	b111      	cbz	r1, 8010058 <_reclaim_reent+0x2c>
 8010052:	4620      	mov	r0, r4
 8010054:	f000 ff32 	bl	8010ebc <_free_r>
 8010058:	69e1      	ldr	r1, [r4, #28]
 801005a:	b111      	cbz	r1, 8010062 <_reclaim_reent+0x36>
 801005c:	4620      	mov	r0, r4
 801005e:	f000 ff2d 	bl	8010ebc <_free_r>
 8010062:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010064:	b111      	cbz	r1, 801006c <_reclaim_reent+0x40>
 8010066:	4620      	mov	r0, r4
 8010068:	f000 ff28 	bl	8010ebc <_free_r>
 801006c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801006e:	b111      	cbz	r1, 8010076 <_reclaim_reent+0x4a>
 8010070:	4620      	mov	r0, r4
 8010072:	f000 ff23 	bl	8010ebc <_free_r>
 8010076:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010078:	b111      	cbz	r1, 8010080 <_reclaim_reent+0x54>
 801007a:	4620      	mov	r0, r4
 801007c:	f000 ff1e 	bl	8010ebc <_free_r>
 8010080:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010082:	b111      	cbz	r1, 801008a <_reclaim_reent+0x5e>
 8010084:	4620      	mov	r0, r4
 8010086:	f000 ff19 	bl	8010ebc <_free_r>
 801008a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801008c:	b111      	cbz	r1, 8010094 <_reclaim_reent+0x68>
 801008e:	4620      	mov	r0, r4
 8010090:	f000 ff14 	bl	8010ebc <_free_r>
 8010094:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010096:	b111      	cbz	r1, 801009e <_reclaim_reent+0x72>
 8010098:	4620      	mov	r0, r4
 801009a:	f000 ff0f 	bl	8010ebc <_free_r>
 801009e:	6a23      	ldr	r3, [r4, #32]
 80100a0:	b1b3      	cbz	r3, 80100d0 <_reclaim_reent+0xa4>
 80100a2:	4620      	mov	r0, r4
 80100a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80100a8:	4718      	bx	r3
 80100aa:	5949      	ldr	r1, [r1, r5]
 80100ac:	b941      	cbnz	r1, 80100c0 <_reclaim_reent+0x94>
 80100ae:	3504      	adds	r5, #4
 80100b0:	69e3      	ldr	r3, [r4, #28]
 80100b2:	2d80      	cmp	r5, #128	; 0x80
 80100b4:	68d9      	ldr	r1, [r3, #12]
 80100b6:	d1f8      	bne.n	80100aa <_reclaim_reent+0x7e>
 80100b8:	4620      	mov	r0, r4
 80100ba:	f000 feff 	bl	8010ebc <_free_r>
 80100be:	e7c0      	b.n	8010042 <_reclaim_reent+0x16>
 80100c0:	680e      	ldr	r6, [r1, #0]
 80100c2:	4620      	mov	r0, r4
 80100c4:	f000 fefa 	bl	8010ebc <_free_r>
 80100c8:	4631      	mov	r1, r6
 80100ca:	e7ef      	b.n	80100ac <_reclaim_reent+0x80>
 80100cc:	2500      	movs	r5, #0
 80100ce:	e7ef      	b.n	80100b0 <_reclaim_reent+0x84>
 80100d0:	bd70      	pop	{r4, r5, r6, pc}
 80100d2:	bf00      	nop
 80100d4:	20000074 	.word	0x20000074

080100d8 <_lseek_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4d07      	ldr	r5, [pc, #28]	; (80100f8 <_lseek_r+0x20>)
 80100dc:	4604      	mov	r4, r0
 80100de:	4608      	mov	r0, r1
 80100e0:	4611      	mov	r1, r2
 80100e2:	2200      	movs	r2, #0
 80100e4:	602a      	str	r2, [r5, #0]
 80100e6:	461a      	mov	r2, r3
 80100e8:	f7f3 fc94 	bl	8003a14 <_lseek>
 80100ec:	1c43      	adds	r3, r0, #1
 80100ee:	d102      	bne.n	80100f6 <_lseek_r+0x1e>
 80100f0:	682b      	ldr	r3, [r5, #0]
 80100f2:	b103      	cbz	r3, 80100f6 <_lseek_r+0x1e>
 80100f4:	6023      	str	r3, [r4, #0]
 80100f6:	bd38      	pop	{r3, r4, r5, pc}
 80100f8:	20004a60 	.word	0x20004a60

080100fc <_read_r>:
 80100fc:	b538      	push	{r3, r4, r5, lr}
 80100fe:	4d07      	ldr	r5, [pc, #28]	; (801011c <_read_r+0x20>)
 8010100:	4604      	mov	r4, r0
 8010102:	4608      	mov	r0, r1
 8010104:	4611      	mov	r1, r2
 8010106:	2200      	movs	r2, #0
 8010108:	602a      	str	r2, [r5, #0]
 801010a:	461a      	mov	r2, r3
 801010c:	f7f3 fc22 	bl	8003954 <_read>
 8010110:	1c43      	adds	r3, r0, #1
 8010112:	d102      	bne.n	801011a <_read_r+0x1e>
 8010114:	682b      	ldr	r3, [r5, #0]
 8010116:	b103      	cbz	r3, 801011a <_read_r+0x1e>
 8010118:	6023      	str	r3, [r4, #0]
 801011a:	bd38      	pop	{r3, r4, r5, pc}
 801011c:	20004a60 	.word	0x20004a60

08010120 <_write_r>:
 8010120:	b538      	push	{r3, r4, r5, lr}
 8010122:	4d07      	ldr	r5, [pc, #28]	; (8010140 <_write_r+0x20>)
 8010124:	4604      	mov	r4, r0
 8010126:	4608      	mov	r0, r1
 8010128:	4611      	mov	r1, r2
 801012a:	2200      	movs	r2, #0
 801012c:	602a      	str	r2, [r5, #0]
 801012e:	461a      	mov	r2, r3
 8010130:	f7f3 fc2d 	bl	800398e <_write>
 8010134:	1c43      	adds	r3, r0, #1
 8010136:	d102      	bne.n	801013e <_write_r+0x1e>
 8010138:	682b      	ldr	r3, [r5, #0]
 801013a:	b103      	cbz	r3, 801013e <_write_r+0x1e>
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	bd38      	pop	{r3, r4, r5, pc}
 8010140:	20004a60 	.word	0x20004a60

08010144 <__errno>:
 8010144:	4b01      	ldr	r3, [pc, #4]	; (801014c <__errno+0x8>)
 8010146:	6818      	ldr	r0, [r3, #0]
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop
 801014c:	20000074 	.word	0x20000074

08010150 <__libc_init_array>:
 8010150:	b570      	push	{r4, r5, r6, lr}
 8010152:	4d0d      	ldr	r5, [pc, #52]	; (8010188 <__libc_init_array+0x38>)
 8010154:	4c0d      	ldr	r4, [pc, #52]	; (801018c <__libc_init_array+0x3c>)
 8010156:	1b64      	subs	r4, r4, r5
 8010158:	10a4      	asrs	r4, r4, #2
 801015a:	2600      	movs	r6, #0
 801015c:	42a6      	cmp	r6, r4
 801015e:	d109      	bne.n	8010174 <__libc_init_array+0x24>
 8010160:	4d0b      	ldr	r5, [pc, #44]	; (8010190 <__libc_init_array+0x40>)
 8010162:	4c0c      	ldr	r4, [pc, #48]	; (8010194 <__libc_init_array+0x44>)
 8010164:	f005 f884 	bl	8015270 <_init>
 8010168:	1b64      	subs	r4, r4, r5
 801016a:	10a4      	asrs	r4, r4, #2
 801016c:	2600      	movs	r6, #0
 801016e:	42a6      	cmp	r6, r4
 8010170:	d105      	bne.n	801017e <__libc_init_array+0x2e>
 8010172:	bd70      	pop	{r4, r5, r6, pc}
 8010174:	f855 3b04 	ldr.w	r3, [r5], #4
 8010178:	4798      	blx	r3
 801017a:	3601      	adds	r6, #1
 801017c:	e7ee      	b.n	801015c <__libc_init_array+0xc>
 801017e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010182:	4798      	blx	r3
 8010184:	3601      	adds	r6, #1
 8010186:	e7f2      	b.n	801016e <__libc_init_array+0x1e>
 8010188:	08015bd0 	.word	0x08015bd0
 801018c:	08015bd0 	.word	0x08015bd0
 8010190:	08015bd0 	.word	0x08015bd0
 8010194:	08015bd4 	.word	0x08015bd4

08010198 <__retarget_lock_init_recursive>:
 8010198:	4770      	bx	lr

0801019a <__retarget_lock_acquire_recursive>:
 801019a:	4770      	bx	lr

0801019c <__retarget_lock_release_recursive>:
 801019c:	4770      	bx	lr

0801019e <memcpy>:
 801019e:	440a      	add	r2, r1
 80101a0:	4291      	cmp	r1, r2
 80101a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101a6:	d100      	bne.n	80101aa <memcpy+0xc>
 80101a8:	4770      	bx	lr
 80101aa:	b510      	push	{r4, lr}
 80101ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101b4:	4291      	cmp	r1, r2
 80101b6:	d1f9      	bne.n	80101ac <memcpy+0xe>
 80101b8:	bd10      	pop	{r4, pc}
	...

080101bc <nanf>:
 80101bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80101c4 <nanf+0x8>
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	7fc00000 	.word	0x7fc00000

080101c8 <quorem>:
 80101c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	6903      	ldr	r3, [r0, #16]
 80101ce:	690c      	ldr	r4, [r1, #16]
 80101d0:	42a3      	cmp	r3, r4
 80101d2:	4607      	mov	r7, r0
 80101d4:	db7e      	blt.n	80102d4 <quorem+0x10c>
 80101d6:	3c01      	subs	r4, #1
 80101d8:	f101 0814 	add.w	r8, r1, #20
 80101dc:	f100 0514 	add.w	r5, r0, #20
 80101e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80101ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101ee:	3301      	adds	r3, #1
 80101f0:	429a      	cmp	r2, r3
 80101f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80101f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80101fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80101fe:	d331      	bcc.n	8010264 <quorem+0x9c>
 8010200:	f04f 0e00 	mov.w	lr, #0
 8010204:	4640      	mov	r0, r8
 8010206:	46ac      	mov	ip, r5
 8010208:	46f2      	mov	sl, lr
 801020a:	f850 2b04 	ldr.w	r2, [r0], #4
 801020e:	b293      	uxth	r3, r2
 8010210:	fb06 e303 	mla	r3, r6, r3, lr
 8010214:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010218:	0c1a      	lsrs	r2, r3, #16
 801021a:	b29b      	uxth	r3, r3
 801021c:	ebaa 0303 	sub.w	r3, sl, r3
 8010220:	f8dc a000 	ldr.w	sl, [ip]
 8010224:	fa13 f38a 	uxtah	r3, r3, sl
 8010228:	fb06 220e 	mla	r2, r6, lr, r2
 801022c:	9300      	str	r3, [sp, #0]
 801022e:	9b00      	ldr	r3, [sp, #0]
 8010230:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010234:	b292      	uxth	r2, r2
 8010236:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801023a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801023e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010242:	4581      	cmp	r9, r0
 8010244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010248:	f84c 3b04 	str.w	r3, [ip], #4
 801024c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010250:	d2db      	bcs.n	801020a <quorem+0x42>
 8010252:	f855 300b 	ldr.w	r3, [r5, fp]
 8010256:	b92b      	cbnz	r3, 8010264 <quorem+0x9c>
 8010258:	9b01      	ldr	r3, [sp, #4]
 801025a:	3b04      	subs	r3, #4
 801025c:	429d      	cmp	r5, r3
 801025e:	461a      	mov	r2, r3
 8010260:	d32c      	bcc.n	80102bc <quorem+0xf4>
 8010262:	613c      	str	r4, [r7, #16]
 8010264:	4638      	mov	r0, r7
 8010266:	f001 f9ef 	bl	8011648 <__mcmp>
 801026a:	2800      	cmp	r0, #0
 801026c:	db22      	blt.n	80102b4 <quorem+0xec>
 801026e:	3601      	adds	r6, #1
 8010270:	4629      	mov	r1, r5
 8010272:	2000      	movs	r0, #0
 8010274:	f858 2b04 	ldr.w	r2, [r8], #4
 8010278:	f8d1 c000 	ldr.w	ip, [r1]
 801027c:	b293      	uxth	r3, r2
 801027e:	1ac3      	subs	r3, r0, r3
 8010280:	0c12      	lsrs	r2, r2, #16
 8010282:	fa13 f38c 	uxtah	r3, r3, ip
 8010286:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801028a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801028e:	b29b      	uxth	r3, r3
 8010290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010294:	45c1      	cmp	r9, r8
 8010296:	f841 3b04 	str.w	r3, [r1], #4
 801029a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801029e:	d2e9      	bcs.n	8010274 <quorem+0xac>
 80102a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102a8:	b922      	cbnz	r2, 80102b4 <quorem+0xec>
 80102aa:	3b04      	subs	r3, #4
 80102ac:	429d      	cmp	r5, r3
 80102ae:	461a      	mov	r2, r3
 80102b0:	d30a      	bcc.n	80102c8 <quorem+0x100>
 80102b2:	613c      	str	r4, [r7, #16]
 80102b4:	4630      	mov	r0, r6
 80102b6:	b003      	add	sp, #12
 80102b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102bc:	6812      	ldr	r2, [r2, #0]
 80102be:	3b04      	subs	r3, #4
 80102c0:	2a00      	cmp	r2, #0
 80102c2:	d1ce      	bne.n	8010262 <quorem+0x9a>
 80102c4:	3c01      	subs	r4, #1
 80102c6:	e7c9      	b.n	801025c <quorem+0x94>
 80102c8:	6812      	ldr	r2, [r2, #0]
 80102ca:	3b04      	subs	r3, #4
 80102cc:	2a00      	cmp	r2, #0
 80102ce:	d1f0      	bne.n	80102b2 <quorem+0xea>
 80102d0:	3c01      	subs	r4, #1
 80102d2:	e7eb      	b.n	80102ac <quorem+0xe4>
 80102d4:	2000      	movs	r0, #0
 80102d6:	e7ee      	b.n	80102b6 <quorem+0xee>

080102d8 <_dtoa_r>:
 80102d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102dc:	ed2d 8b04 	vpush	{d8-d9}
 80102e0:	69c5      	ldr	r5, [r0, #28]
 80102e2:	b093      	sub	sp, #76	; 0x4c
 80102e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80102e8:	ec57 6b10 	vmov	r6, r7, d0
 80102ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80102f0:	9107      	str	r1, [sp, #28]
 80102f2:	4604      	mov	r4, r0
 80102f4:	920a      	str	r2, [sp, #40]	; 0x28
 80102f6:	930d      	str	r3, [sp, #52]	; 0x34
 80102f8:	b975      	cbnz	r5, 8010318 <_dtoa_r+0x40>
 80102fa:	2010      	movs	r0, #16
 80102fc:	f000 fe2a 	bl	8010f54 <malloc>
 8010300:	4602      	mov	r2, r0
 8010302:	61e0      	str	r0, [r4, #28]
 8010304:	b920      	cbnz	r0, 8010310 <_dtoa_r+0x38>
 8010306:	4bae      	ldr	r3, [pc, #696]	; (80105c0 <_dtoa_r+0x2e8>)
 8010308:	21ef      	movs	r1, #239	; 0xef
 801030a:	48ae      	ldr	r0, [pc, #696]	; (80105c4 <_dtoa_r+0x2ec>)
 801030c:	f002 ffe8 	bl	80132e0 <__assert_func>
 8010310:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010314:	6005      	str	r5, [r0, #0]
 8010316:	60c5      	str	r5, [r0, #12]
 8010318:	69e3      	ldr	r3, [r4, #28]
 801031a:	6819      	ldr	r1, [r3, #0]
 801031c:	b151      	cbz	r1, 8010334 <_dtoa_r+0x5c>
 801031e:	685a      	ldr	r2, [r3, #4]
 8010320:	604a      	str	r2, [r1, #4]
 8010322:	2301      	movs	r3, #1
 8010324:	4093      	lsls	r3, r2
 8010326:	608b      	str	r3, [r1, #8]
 8010328:	4620      	mov	r0, r4
 801032a:	f000 ff07 	bl	801113c <_Bfree>
 801032e:	69e3      	ldr	r3, [r4, #28]
 8010330:	2200      	movs	r2, #0
 8010332:	601a      	str	r2, [r3, #0]
 8010334:	1e3b      	subs	r3, r7, #0
 8010336:	bfbb      	ittet	lt
 8010338:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801033c:	9303      	strlt	r3, [sp, #12]
 801033e:	2300      	movge	r3, #0
 8010340:	2201      	movlt	r2, #1
 8010342:	bfac      	ite	ge
 8010344:	f8c8 3000 	strge.w	r3, [r8]
 8010348:	f8c8 2000 	strlt.w	r2, [r8]
 801034c:	4b9e      	ldr	r3, [pc, #632]	; (80105c8 <_dtoa_r+0x2f0>)
 801034e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010352:	ea33 0308 	bics.w	r3, r3, r8
 8010356:	d11b      	bne.n	8010390 <_dtoa_r+0xb8>
 8010358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801035a:	f242 730f 	movw	r3, #9999	; 0x270f
 801035e:	6013      	str	r3, [r2, #0]
 8010360:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010364:	4333      	orrs	r3, r6
 8010366:	f000 8593 	beq.w	8010e90 <_dtoa_r+0xbb8>
 801036a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801036c:	b963      	cbnz	r3, 8010388 <_dtoa_r+0xb0>
 801036e:	4b97      	ldr	r3, [pc, #604]	; (80105cc <_dtoa_r+0x2f4>)
 8010370:	e027      	b.n	80103c2 <_dtoa_r+0xea>
 8010372:	4b97      	ldr	r3, [pc, #604]	; (80105d0 <_dtoa_r+0x2f8>)
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	3308      	adds	r3, #8
 8010378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801037a:	6013      	str	r3, [r2, #0]
 801037c:	9800      	ldr	r0, [sp, #0]
 801037e:	b013      	add	sp, #76	; 0x4c
 8010380:	ecbd 8b04 	vpop	{d8-d9}
 8010384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010388:	4b90      	ldr	r3, [pc, #576]	; (80105cc <_dtoa_r+0x2f4>)
 801038a:	9300      	str	r3, [sp, #0]
 801038c:	3303      	adds	r3, #3
 801038e:	e7f3      	b.n	8010378 <_dtoa_r+0xa0>
 8010390:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010394:	2200      	movs	r2, #0
 8010396:	ec51 0b17 	vmov	r0, r1, d7
 801039a:	eeb0 8a47 	vmov.f32	s16, s14
 801039e:	eef0 8a67 	vmov.f32	s17, s15
 80103a2:	2300      	movs	r3, #0
 80103a4:	f7f0 fbb8 	bl	8000b18 <__aeabi_dcmpeq>
 80103a8:	4681      	mov	r9, r0
 80103aa:	b160      	cbz	r0, 80103c6 <_dtoa_r+0xee>
 80103ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103ae:	2301      	movs	r3, #1
 80103b0:	6013      	str	r3, [r2, #0]
 80103b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f000 8568 	beq.w	8010e8a <_dtoa_r+0xbb2>
 80103ba:	4b86      	ldr	r3, [pc, #536]	; (80105d4 <_dtoa_r+0x2fc>)
 80103bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103be:	6013      	str	r3, [r2, #0]
 80103c0:	3b01      	subs	r3, #1
 80103c2:	9300      	str	r3, [sp, #0]
 80103c4:	e7da      	b.n	801037c <_dtoa_r+0xa4>
 80103c6:	aa10      	add	r2, sp, #64	; 0x40
 80103c8:	a911      	add	r1, sp, #68	; 0x44
 80103ca:	4620      	mov	r0, r4
 80103cc:	eeb0 0a48 	vmov.f32	s0, s16
 80103d0:	eef0 0a68 	vmov.f32	s1, s17
 80103d4:	f001 fa4e 	bl	8011874 <__d2b>
 80103d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80103dc:	4682      	mov	sl, r0
 80103de:	2d00      	cmp	r5, #0
 80103e0:	d07f      	beq.n	80104e2 <_dtoa_r+0x20a>
 80103e2:	ee18 3a90 	vmov	r3, s17
 80103e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80103ee:	ec51 0b18 	vmov	r0, r1, d8
 80103f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80103f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80103fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80103fe:	4619      	mov	r1, r3
 8010400:	2200      	movs	r2, #0
 8010402:	4b75      	ldr	r3, [pc, #468]	; (80105d8 <_dtoa_r+0x300>)
 8010404:	f7ef ff68 	bl	80002d8 <__aeabi_dsub>
 8010408:	a367      	add	r3, pc, #412	; (adr r3, 80105a8 <_dtoa_r+0x2d0>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f7f0 f91b 	bl	8000648 <__aeabi_dmul>
 8010412:	a367      	add	r3, pc, #412	; (adr r3, 80105b0 <_dtoa_r+0x2d8>)
 8010414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010418:	f7ef ff60 	bl	80002dc <__adddf3>
 801041c:	4606      	mov	r6, r0
 801041e:	4628      	mov	r0, r5
 8010420:	460f      	mov	r7, r1
 8010422:	f7f0 f8a7 	bl	8000574 <__aeabi_i2d>
 8010426:	a364      	add	r3, pc, #400	; (adr r3, 80105b8 <_dtoa_r+0x2e0>)
 8010428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042c:	f7f0 f90c 	bl	8000648 <__aeabi_dmul>
 8010430:	4602      	mov	r2, r0
 8010432:	460b      	mov	r3, r1
 8010434:	4630      	mov	r0, r6
 8010436:	4639      	mov	r1, r7
 8010438:	f7ef ff50 	bl	80002dc <__adddf3>
 801043c:	4606      	mov	r6, r0
 801043e:	460f      	mov	r7, r1
 8010440:	f7f0 fbb2 	bl	8000ba8 <__aeabi_d2iz>
 8010444:	2200      	movs	r2, #0
 8010446:	4683      	mov	fp, r0
 8010448:	2300      	movs	r3, #0
 801044a:	4630      	mov	r0, r6
 801044c:	4639      	mov	r1, r7
 801044e:	f7f0 fb6d 	bl	8000b2c <__aeabi_dcmplt>
 8010452:	b148      	cbz	r0, 8010468 <_dtoa_r+0x190>
 8010454:	4658      	mov	r0, fp
 8010456:	f7f0 f88d 	bl	8000574 <__aeabi_i2d>
 801045a:	4632      	mov	r2, r6
 801045c:	463b      	mov	r3, r7
 801045e:	f7f0 fb5b 	bl	8000b18 <__aeabi_dcmpeq>
 8010462:	b908      	cbnz	r0, 8010468 <_dtoa_r+0x190>
 8010464:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010468:	f1bb 0f16 	cmp.w	fp, #22
 801046c:	d857      	bhi.n	801051e <_dtoa_r+0x246>
 801046e:	4b5b      	ldr	r3, [pc, #364]	; (80105dc <_dtoa_r+0x304>)
 8010470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010478:	ec51 0b18 	vmov	r0, r1, d8
 801047c:	f7f0 fb56 	bl	8000b2c <__aeabi_dcmplt>
 8010480:	2800      	cmp	r0, #0
 8010482:	d04e      	beq.n	8010522 <_dtoa_r+0x24a>
 8010484:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010488:	2300      	movs	r3, #0
 801048a:	930c      	str	r3, [sp, #48]	; 0x30
 801048c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801048e:	1b5b      	subs	r3, r3, r5
 8010490:	1e5a      	subs	r2, r3, #1
 8010492:	bf45      	ittet	mi
 8010494:	f1c3 0301 	rsbmi	r3, r3, #1
 8010498:	9305      	strmi	r3, [sp, #20]
 801049a:	2300      	movpl	r3, #0
 801049c:	2300      	movmi	r3, #0
 801049e:	9206      	str	r2, [sp, #24]
 80104a0:	bf54      	ite	pl
 80104a2:	9305      	strpl	r3, [sp, #20]
 80104a4:	9306      	strmi	r3, [sp, #24]
 80104a6:	f1bb 0f00 	cmp.w	fp, #0
 80104aa:	db3c      	blt.n	8010526 <_dtoa_r+0x24e>
 80104ac:	9b06      	ldr	r3, [sp, #24]
 80104ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80104b2:	445b      	add	r3, fp
 80104b4:	9306      	str	r3, [sp, #24]
 80104b6:	2300      	movs	r3, #0
 80104b8:	9308      	str	r3, [sp, #32]
 80104ba:	9b07      	ldr	r3, [sp, #28]
 80104bc:	2b09      	cmp	r3, #9
 80104be:	d868      	bhi.n	8010592 <_dtoa_r+0x2ba>
 80104c0:	2b05      	cmp	r3, #5
 80104c2:	bfc4      	itt	gt
 80104c4:	3b04      	subgt	r3, #4
 80104c6:	9307      	strgt	r3, [sp, #28]
 80104c8:	9b07      	ldr	r3, [sp, #28]
 80104ca:	f1a3 0302 	sub.w	r3, r3, #2
 80104ce:	bfcc      	ite	gt
 80104d0:	2500      	movgt	r5, #0
 80104d2:	2501      	movle	r5, #1
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	f200 8085 	bhi.w	80105e4 <_dtoa_r+0x30c>
 80104da:	e8df f003 	tbb	[pc, r3]
 80104de:	3b2e      	.short	0x3b2e
 80104e0:	5839      	.short	0x5839
 80104e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80104e6:	441d      	add	r5, r3
 80104e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80104ec:	2b20      	cmp	r3, #32
 80104ee:	bfc1      	itttt	gt
 80104f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80104f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80104f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80104fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010500:	bfd6      	itet	le
 8010502:	f1c3 0320 	rsble	r3, r3, #32
 8010506:	ea48 0003 	orrgt.w	r0, r8, r3
 801050a:	fa06 f003 	lslle.w	r0, r6, r3
 801050e:	f7f0 f821 	bl	8000554 <__aeabi_ui2d>
 8010512:	2201      	movs	r2, #1
 8010514:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010518:	3d01      	subs	r5, #1
 801051a:	920e      	str	r2, [sp, #56]	; 0x38
 801051c:	e76f      	b.n	80103fe <_dtoa_r+0x126>
 801051e:	2301      	movs	r3, #1
 8010520:	e7b3      	b.n	801048a <_dtoa_r+0x1b2>
 8010522:	900c      	str	r0, [sp, #48]	; 0x30
 8010524:	e7b2      	b.n	801048c <_dtoa_r+0x1b4>
 8010526:	9b05      	ldr	r3, [sp, #20]
 8010528:	eba3 030b 	sub.w	r3, r3, fp
 801052c:	9305      	str	r3, [sp, #20]
 801052e:	f1cb 0300 	rsb	r3, fp, #0
 8010532:	9308      	str	r3, [sp, #32]
 8010534:	2300      	movs	r3, #0
 8010536:	930b      	str	r3, [sp, #44]	; 0x2c
 8010538:	e7bf      	b.n	80104ba <_dtoa_r+0x1e2>
 801053a:	2300      	movs	r3, #0
 801053c:	9309      	str	r3, [sp, #36]	; 0x24
 801053e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010540:	2b00      	cmp	r3, #0
 8010542:	dc52      	bgt.n	80105ea <_dtoa_r+0x312>
 8010544:	2301      	movs	r3, #1
 8010546:	9301      	str	r3, [sp, #4]
 8010548:	9304      	str	r3, [sp, #16]
 801054a:	461a      	mov	r2, r3
 801054c:	920a      	str	r2, [sp, #40]	; 0x28
 801054e:	e00b      	b.n	8010568 <_dtoa_r+0x290>
 8010550:	2301      	movs	r3, #1
 8010552:	e7f3      	b.n	801053c <_dtoa_r+0x264>
 8010554:	2300      	movs	r3, #0
 8010556:	9309      	str	r3, [sp, #36]	; 0x24
 8010558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801055a:	445b      	add	r3, fp
 801055c:	9301      	str	r3, [sp, #4]
 801055e:	3301      	adds	r3, #1
 8010560:	2b01      	cmp	r3, #1
 8010562:	9304      	str	r3, [sp, #16]
 8010564:	bfb8      	it	lt
 8010566:	2301      	movlt	r3, #1
 8010568:	69e0      	ldr	r0, [r4, #28]
 801056a:	2100      	movs	r1, #0
 801056c:	2204      	movs	r2, #4
 801056e:	f102 0614 	add.w	r6, r2, #20
 8010572:	429e      	cmp	r6, r3
 8010574:	d93d      	bls.n	80105f2 <_dtoa_r+0x31a>
 8010576:	6041      	str	r1, [r0, #4]
 8010578:	4620      	mov	r0, r4
 801057a:	f000 fd9f 	bl	80110bc <_Balloc>
 801057e:	9000      	str	r0, [sp, #0]
 8010580:	2800      	cmp	r0, #0
 8010582:	d139      	bne.n	80105f8 <_dtoa_r+0x320>
 8010584:	4b16      	ldr	r3, [pc, #88]	; (80105e0 <_dtoa_r+0x308>)
 8010586:	4602      	mov	r2, r0
 8010588:	f240 11af 	movw	r1, #431	; 0x1af
 801058c:	e6bd      	b.n	801030a <_dtoa_r+0x32>
 801058e:	2301      	movs	r3, #1
 8010590:	e7e1      	b.n	8010556 <_dtoa_r+0x27e>
 8010592:	2501      	movs	r5, #1
 8010594:	2300      	movs	r3, #0
 8010596:	9307      	str	r3, [sp, #28]
 8010598:	9509      	str	r5, [sp, #36]	; 0x24
 801059a:	f04f 33ff 	mov.w	r3, #4294967295
 801059e:	9301      	str	r3, [sp, #4]
 80105a0:	9304      	str	r3, [sp, #16]
 80105a2:	2200      	movs	r2, #0
 80105a4:	2312      	movs	r3, #18
 80105a6:	e7d1      	b.n	801054c <_dtoa_r+0x274>
 80105a8:	636f4361 	.word	0x636f4361
 80105ac:	3fd287a7 	.word	0x3fd287a7
 80105b0:	8b60c8b3 	.word	0x8b60c8b3
 80105b4:	3fc68a28 	.word	0x3fc68a28
 80105b8:	509f79fb 	.word	0x509f79fb
 80105bc:	3fd34413 	.word	0x3fd34413
 80105c0:	08015758 	.word	0x08015758
 80105c4:	0801576f 	.word	0x0801576f
 80105c8:	7ff00000 	.word	0x7ff00000
 80105cc:	08015754 	.word	0x08015754
 80105d0:	0801574b 	.word	0x0801574b
 80105d4:	08015ab1 	.word	0x08015ab1
 80105d8:	3ff80000 	.word	0x3ff80000
 80105dc:	08015860 	.word	0x08015860
 80105e0:	080157c7 	.word	0x080157c7
 80105e4:	2301      	movs	r3, #1
 80105e6:	9309      	str	r3, [sp, #36]	; 0x24
 80105e8:	e7d7      	b.n	801059a <_dtoa_r+0x2c2>
 80105ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ec:	9301      	str	r3, [sp, #4]
 80105ee:	9304      	str	r3, [sp, #16]
 80105f0:	e7ba      	b.n	8010568 <_dtoa_r+0x290>
 80105f2:	3101      	adds	r1, #1
 80105f4:	0052      	lsls	r2, r2, #1
 80105f6:	e7ba      	b.n	801056e <_dtoa_r+0x296>
 80105f8:	69e3      	ldr	r3, [r4, #28]
 80105fa:	9a00      	ldr	r2, [sp, #0]
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	9b04      	ldr	r3, [sp, #16]
 8010600:	2b0e      	cmp	r3, #14
 8010602:	f200 80a8 	bhi.w	8010756 <_dtoa_r+0x47e>
 8010606:	2d00      	cmp	r5, #0
 8010608:	f000 80a5 	beq.w	8010756 <_dtoa_r+0x47e>
 801060c:	f1bb 0f00 	cmp.w	fp, #0
 8010610:	dd38      	ble.n	8010684 <_dtoa_r+0x3ac>
 8010612:	4bc0      	ldr	r3, [pc, #768]	; (8010914 <_dtoa_r+0x63c>)
 8010614:	f00b 020f 	and.w	r2, fp, #15
 8010618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801061c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010620:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010624:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010628:	d019      	beq.n	801065e <_dtoa_r+0x386>
 801062a:	4bbb      	ldr	r3, [pc, #748]	; (8010918 <_dtoa_r+0x640>)
 801062c:	ec51 0b18 	vmov	r0, r1, d8
 8010630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010634:	f7f0 f932 	bl	800089c <__aeabi_ddiv>
 8010638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801063c:	f008 080f 	and.w	r8, r8, #15
 8010640:	2503      	movs	r5, #3
 8010642:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010918 <_dtoa_r+0x640>
 8010646:	f1b8 0f00 	cmp.w	r8, #0
 801064a:	d10a      	bne.n	8010662 <_dtoa_r+0x38a>
 801064c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010650:	4632      	mov	r2, r6
 8010652:	463b      	mov	r3, r7
 8010654:	f7f0 f922 	bl	800089c <__aeabi_ddiv>
 8010658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801065c:	e02b      	b.n	80106b6 <_dtoa_r+0x3de>
 801065e:	2502      	movs	r5, #2
 8010660:	e7ef      	b.n	8010642 <_dtoa_r+0x36a>
 8010662:	f018 0f01 	tst.w	r8, #1
 8010666:	d008      	beq.n	801067a <_dtoa_r+0x3a2>
 8010668:	4630      	mov	r0, r6
 801066a:	4639      	mov	r1, r7
 801066c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010670:	f7ef ffea 	bl	8000648 <__aeabi_dmul>
 8010674:	3501      	adds	r5, #1
 8010676:	4606      	mov	r6, r0
 8010678:	460f      	mov	r7, r1
 801067a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801067e:	f109 0908 	add.w	r9, r9, #8
 8010682:	e7e0      	b.n	8010646 <_dtoa_r+0x36e>
 8010684:	f000 809f 	beq.w	80107c6 <_dtoa_r+0x4ee>
 8010688:	f1cb 0600 	rsb	r6, fp, #0
 801068c:	4ba1      	ldr	r3, [pc, #644]	; (8010914 <_dtoa_r+0x63c>)
 801068e:	4fa2      	ldr	r7, [pc, #648]	; (8010918 <_dtoa_r+0x640>)
 8010690:	f006 020f 	and.w	r2, r6, #15
 8010694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069c:	ec51 0b18 	vmov	r0, r1, d8
 80106a0:	f7ef ffd2 	bl	8000648 <__aeabi_dmul>
 80106a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a8:	1136      	asrs	r6, r6, #4
 80106aa:	2300      	movs	r3, #0
 80106ac:	2502      	movs	r5, #2
 80106ae:	2e00      	cmp	r6, #0
 80106b0:	d17e      	bne.n	80107b0 <_dtoa_r+0x4d8>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1d0      	bne.n	8010658 <_dtoa_r+0x380>
 80106b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 8084 	beq.w	80107ca <_dtoa_r+0x4f2>
 80106c2:	4b96      	ldr	r3, [pc, #600]	; (801091c <_dtoa_r+0x644>)
 80106c4:	2200      	movs	r2, #0
 80106c6:	4640      	mov	r0, r8
 80106c8:	4649      	mov	r1, r9
 80106ca:	f7f0 fa2f 	bl	8000b2c <__aeabi_dcmplt>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d07b      	beq.n	80107ca <_dtoa_r+0x4f2>
 80106d2:	9b04      	ldr	r3, [sp, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d078      	beq.n	80107ca <_dtoa_r+0x4f2>
 80106d8:	9b01      	ldr	r3, [sp, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	dd39      	ble.n	8010752 <_dtoa_r+0x47a>
 80106de:	4b90      	ldr	r3, [pc, #576]	; (8010920 <_dtoa_r+0x648>)
 80106e0:	2200      	movs	r2, #0
 80106e2:	4640      	mov	r0, r8
 80106e4:	4649      	mov	r1, r9
 80106e6:	f7ef ffaf 	bl	8000648 <__aeabi_dmul>
 80106ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106ee:	9e01      	ldr	r6, [sp, #4]
 80106f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80106f4:	3501      	adds	r5, #1
 80106f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80106fa:	4628      	mov	r0, r5
 80106fc:	f7ef ff3a 	bl	8000574 <__aeabi_i2d>
 8010700:	4642      	mov	r2, r8
 8010702:	464b      	mov	r3, r9
 8010704:	f7ef ffa0 	bl	8000648 <__aeabi_dmul>
 8010708:	4b86      	ldr	r3, [pc, #536]	; (8010924 <_dtoa_r+0x64c>)
 801070a:	2200      	movs	r2, #0
 801070c:	f7ef fde6 	bl	80002dc <__adddf3>
 8010710:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010718:	9303      	str	r3, [sp, #12]
 801071a:	2e00      	cmp	r6, #0
 801071c:	d158      	bne.n	80107d0 <_dtoa_r+0x4f8>
 801071e:	4b82      	ldr	r3, [pc, #520]	; (8010928 <_dtoa_r+0x650>)
 8010720:	2200      	movs	r2, #0
 8010722:	4640      	mov	r0, r8
 8010724:	4649      	mov	r1, r9
 8010726:	f7ef fdd7 	bl	80002d8 <__aeabi_dsub>
 801072a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801072e:	4680      	mov	r8, r0
 8010730:	4689      	mov	r9, r1
 8010732:	f7f0 fa19 	bl	8000b68 <__aeabi_dcmpgt>
 8010736:	2800      	cmp	r0, #0
 8010738:	f040 8296 	bne.w	8010c68 <_dtoa_r+0x990>
 801073c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010740:	4640      	mov	r0, r8
 8010742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010746:	4649      	mov	r1, r9
 8010748:	f7f0 f9f0 	bl	8000b2c <__aeabi_dcmplt>
 801074c:	2800      	cmp	r0, #0
 801074e:	f040 8289 	bne.w	8010c64 <_dtoa_r+0x98c>
 8010752:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010758:	2b00      	cmp	r3, #0
 801075a:	f2c0 814e 	blt.w	80109fa <_dtoa_r+0x722>
 801075e:	f1bb 0f0e 	cmp.w	fp, #14
 8010762:	f300 814a 	bgt.w	80109fa <_dtoa_r+0x722>
 8010766:	4b6b      	ldr	r3, [pc, #428]	; (8010914 <_dtoa_r+0x63c>)
 8010768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801076c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010772:	2b00      	cmp	r3, #0
 8010774:	f280 80dc 	bge.w	8010930 <_dtoa_r+0x658>
 8010778:	9b04      	ldr	r3, [sp, #16]
 801077a:	2b00      	cmp	r3, #0
 801077c:	f300 80d8 	bgt.w	8010930 <_dtoa_r+0x658>
 8010780:	f040 826f 	bne.w	8010c62 <_dtoa_r+0x98a>
 8010784:	4b68      	ldr	r3, [pc, #416]	; (8010928 <_dtoa_r+0x650>)
 8010786:	2200      	movs	r2, #0
 8010788:	4640      	mov	r0, r8
 801078a:	4649      	mov	r1, r9
 801078c:	f7ef ff5c 	bl	8000648 <__aeabi_dmul>
 8010790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010794:	f7f0 f9de 	bl	8000b54 <__aeabi_dcmpge>
 8010798:	9e04      	ldr	r6, [sp, #16]
 801079a:	4637      	mov	r7, r6
 801079c:	2800      	cmp	r0, #0
 801079e:	f040 8245 	bne.w	8010c2c <_dtoa_r+0x954>
 80107a2:	9d00      	ldr	r5, [sp, #0]
 80107a4:	2331      	movs	r3, #49	; 0x31
 80107a6:	f805 3b01 	strb.w	r3, [r5], #1
 80107aa:	f10b 0b01 	add.w	fp, fp, #1
 80107ae:	e241      	b.n	8010c34 <_dtoa_r+0x95c>
 80107b0:	07f2      	lsls	r2, r6, #31
 80107b2:	d505      	bpl.n	80107c0 <_dtoa_r+0x4e8>
 80107b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107b8:	f7ef ff46 	bl	8000648 <__aeabi_dmul>
 80107bc:	3501      	adds	r5, #1
 80107be:	2301      	movs	r3, #1
 80107c0:	1076      	asrs	r6, r6, #1
 80107c2:	3708      	adds	r7, #8
 80107c4:	e773      	b.n	80106ae <_dtoa_r+0x3d6>
 80107c6:	2502      	movs	r5, #2
 80107c8:	e775      	b.n	80106b6 <_dtoa_r+0x3de>
 80107ca:	9e04      	ldr	r6, [sp, #16]
 80107cc:	465f      	mov	r7, fp
 80107ce:	e792      	b.n	80106f6 <_dtoa_r+0x41e>
 80107d0:	9900      	ldr	r1, [sp, #0]
 80107d2:	4b50      	ldr	r3, [pc, #320]	; (8010914 <_dtoa_r+0x63c>)
 80107d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107d8:	4431      	add	r1, r6
 80107da:	9102      	str	r1, [sp, #8]
 80107dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107de:	eeb0 9a47 	vmov.f32	s18, s14
 80107e2:	eef0 9a67 	vmov.f32	s19, s15
 80107e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80107ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80107ee:	2900      	cmp	r1, #0
 80107f0:	d044      	beq.n	801087c <_dtoa_r+0x5a4>
 80107f2:	494e      	ldr	r1, [pc, #312]	; (801092c <_dtoa_r+0x654>)
 80107f4:	2000      	movs	r0, #0
 80107f6:	f7f0 f851 	bl	800089c <__aeabi_ddiv>
 80107fa:	ec53 2b19 	vmov	r2, r3, d9
 80107fe:	f7ef fd6b 	bl	80002d8 <__aeabi_dsub>
 8010802:	9d00      	ldr	r5, [sp, #0]
 8010804:	ec41 0b19 	vmov	d9, r0, r1
 8010808:	4649      	mov	r1, r9
 801080a:	4640      	mov	r0, r8
 801080c:	f7f0 f9cc 	bl	8000ba8 <__aeabi_d2iz>
 8010810:	4606      	mov	r6, r0
 8010812:	f7ef feaf 	bl	8000574 <__aeabi_i2d>
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	4640      	mov	r0, r8
 801081c:	4649      	mov	r1, r9
 801081e:	f7ef fd5b 	bl	80002d8 <__aeabi_dsub>
 8010822:	3630      	adds	r6, #48	; 0x30
 8010824:	f805 6b01 	strb.w	r6, [r5], #1
 8010828:	ec53 2b19 	vmov	r2, r3, d9
 801082c:	4680      	mov	r8, r0
 801082e:	4689      	mov	r9, r1
 8010830:	f7f0 f97c 	bl	8000b2c <__aeabi_dcmplt>
 8010834:	2800      	cmp	r0, #0
 8010836:	d164      	bne.n	8010902 <_dtoa_r+0x62a>
 8010838:	4642      	mov	r2, r8
 801083a:	464b      	mov	r3, r9
 801083c:	4937      	ldr	r1, [pc, #220]	; (801091c <_dtoa_r+0x644>)
 801083e:	2000      	movs	r0, #0
 8010840:	f7ef fd4a 	bl	80002d8 <__aeabi_dsub>
 8010844:	ec53 2b19 	vmov	r2, r3, d9
 8010848:	f7f0 f970 	bl	8000b2c <__aeabi_dcmplt>
 801084c:	2800      	cmp	r0, #0
 801084e:	f040 80b6 	bne.w	80109be <_dtoa_r+0x6e6>
 8010852:	9b02      	ldr	r3, [sp, #8]
 8010854:	429d      	cmp	r5, r3
 8010856:	f43f af7c 	beq.w	8010752 <_dtoa_r+0x47a>
 801085a:	4b31      	ldr	r3, [pc, #196]	; (8010920 <_dtoa_r+0x648>)
 801085c:	ec51 0b19 	vmov	r0, r1, d9
 8010860:	2200      	movs	r2, #0
 8010862:	f7ef fef1 	bl	8000648 <__aeabi_dmul>
 8010866:	4b2e      	ldr	r3, [pc, #184]	; (8010920 <_dtoa_r+0x648>)
 8010868:	ec41 0b19 	vmov	d9, r0, r1
 801086c:	2200      	movs	r2, #0
 801086e:	4640      	mov	r0, r8
 8010870:	4649      	mov	r1, r9
 8010872:	f7ef fee9 	bl	8000648 <__aeabi_dmul>
 8010876:	4680      	mov	r8, r0
 8010878:	4689      	mov	r9, r1
 801087a:	e7c5      	b.n	8010808 <_dtoa_r+0x530>
 801087c:	ec51 0b17 	vmov	r0, r1, d7
 8010880:	f7ef fee2 	bl	8000648 <__aeabi_dmul>
 8010884:	9b02      	ldr	r3, [sp, #8]
 8010886:	9d00      	ldr	r5, [sp, #0]
 8010888:	930f      	str	r3, [sp, #60]	; 0x3c
 801088a:	ec41 0b19 	vmov	d9, r0, r1
 801088e:	4649      	mov	r1, r9
 8010890:	4640      	mov	r0, r8
 8010892:	f7f0 f989 	bl	8000ba8 <__aeabi_d2iz>
 8010896:	4606      	mov	r6, r0
 8010898:	f7ef fe6c 	bl	8000574 <__aeabi_i2d>
 801089c:	3630      	adds	r6, #48	; 0x30
 801089e:	4602      	mov	r2, r0
 80108a0:	460b      	mov	r3, r1
 80108a2:	4640      	mov	r0, r8
 80108a4:	4649      	mov	r1, r9
 80108a6:	f7ef fd17 	bl	80002d8 <__aeabi_dsub>
 80108aa:	f805 6b01 	strb.w	r6, [r5], #1
 80108ae:	9b02      	ldr	r3, [sp, #8]
 80108b0:	429d      	cmp	r5, r3
 80108b2:	4680      	mov	r8, r0
 80108b4:	4689      	mov	r9, r1
 80108b6:	f04f 0200 	mov.w	r2, #0
 80108ba:	d124      	bne.n	8010906 <_dtoa_r+0x62e>
 80108bc:	4b1b      	ldr	r3, [pc, #108]	; (801092c <_dtoa_r+0x654>)
 80108be:	ec51 0b19 	vmov	r0, r1, d9
 80108c2:	f7ef fd0b 	bl	80002dc <__adddf3>
 80108c6:	4602      	mov	r2, r0
 80108c8:	460b      	mov	r3, r1
 80108ca:	4640      	mov	r0, r8
 80108cc:	4649      	mov	r1, r9
 80108ce:	f7f0 f94b 	bl	8000b68 <__aeabi_dcmpgt>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d173      	bne.n	80109be <_dtoa_r+0x6e6>
 80108d6:	ec53 2b19 	vmov	r2, r3, d9
 80108da:	4914      	ldr	r1, [pc, #80]	; (801092c <_dtoa_r+0x654>)
 80108dc:	2000      	movs	r0, #0
 80108de:	f7ef fcfb 	bl	80002d8 <__aeabi_dsub>
 80108e2:	4602      	mov	r2, r0
 80108e4:	460b      	mov	r3, r1
 80108e6:	4640      	mov	r0, r8
 80108e8:	4649      	mov	r1, r9
 80108ea:	f7f0 f91f 	bl	8000b2c <__aeabi_dcmplt>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	f43f af2f 	beq.w	8010752 <_dtoa_r+0x47a>
 80108f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80108f6:	1e6b      	subs	r3, r5, #1
 80108f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80108fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80108fe:	2b30      	cmp	r3, #48	; 0x30
 8010900:	d0f8      	beq.n	80108f4 <_dtoa_r+0x61c>
 8010902:	46bb      	mov	fp, r7
 8010904:	e04a      	b.n	801099c <_dtoa_r+0x6c4>
 8010906:	4b06      	ldr	r3, [pc, #24]	; (8010920 <_dtoa_r+0x648>)
 8010908:	f7ef fe9e 	bl	8000648 <__aeabi_dmul>
 801090c:	4680      	mov	r8, r0
 801090e:	4689      	mov	r9, r1
 8010910:	e7bd      	b.n	801088e <_dtoa_r+0x5b6>
 8010912:	bf00      	nop
 8010914:	08015860 	.word	0x08015860
 8010918:	08015838 	.word	0x08015838
 801091c:	3ff00000 	.word	0x3ff00000
 8010920:	40240000 	.word	0x40240000
 8010924:	401c0000 	.word	0x401c0000
 8010928:	40140000 	.word	0x40140000
 801092c:	3fe00000 	.word	0x3fe00000
 8010930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010934:	9d00      	ldr	r5, [sp, #0]
 8010936:	4642      	mov	r2, r8
 8010938:	464b      	mov	r3, r9
 801093a:	4630      	mov	r0, r6
 801093c:	4639      	mov	r1, r7
 801093e:	f7ef ffad 	bl	800089c <__aeabi_ddiv>
 8010942:	f7f0 f931 	bl	8000ba8 <__aeabi_d2iz>
 8010946:	9001      	str	r0, [sp, #4]
 8010948:	f7ef fe14 	bl	8000574 <__aeabi_i2d>
 801094c:	4642      	mov	r2, r8
 801094e:	464b      	mov	r3, r9
 8010950:	f7ef fe7a 	bl	8000648 <__aeabi_dmul>
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	4630      	mov	r0, r6
 801095a:	4639      	mov	r1, r7
 801095c:	f7ef fcbc 	bl	80002d8 <__aeabi_dsub>
 8010960:	9e01      	ldr	r6, [sp, #4]
 8010962:	9f04      	ldr	r7, [sp, #16]
 8010964:	3630      	adds	r6, #48	; 0x30
 8010966:	f805 6b01 	strb.w	r6, [r5], #1
 801096a:	9e00      	ldr	r6, [sp, #0]
 801096c:	1bae      	subs	r6, r5, r6
 801096e:	42b7      	cmp	r7, r6
 8010970:	4602      	mov	r2, r0
 8010972:	460b      	mov	r3, r1
 8010974:	d134      	bne.n	80109e0 <_dtoa_r+0x708>
 8010976:	f7ef fcb1 	bl	80002dc <__adddf3>
 801097a:	4642      	mov	r2, r8
 801097c:	464b      	mov	r3, r9
 801097e:	4606      	mov	r6, r0
 8010980:	460f      	mov	r7, r1
 8010982:	f7f0 f8f1 	bl	8000b68 <__aeabi_dcmpgt>
 8010986:	b9c8      	cbnz	r0, 80109bc <_dtoa_r+0x6e4>
 8010988:	4642      	mov	r2, r8
 801098a:	464b      	mov	r3, r9
 801098c:	4630      	mov	r0, r6
 801098e:	4639      	mov	r1, r7
 8010990:	f7f0 f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 8010994:	b110      	cbz	r0, 801099c <_dtoa_r+0x6c4>
 8010996:	9b01      	ldr	r3, [sp, #4]
 8010998:	07db      	lsls	r3, r3, #31
 801099a:	d40f      	bmi.n	80109bc <_dtoa_r+0x6e4>
 801099c:	4651      	mov	r1, sl
 801099e:	4620      	mov	r0, r4
 80109a0:	f000 fbcc 	bl	801113c <_Bfree>
 80109a4:	2300      	movs	r3, #0
 80109a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109a8:	702b      	strb	r3, [r5, #0]
 80109aa:	f10b 0301 	add.w	r3, fp, #1
 80109ae:	6013      	str	r3, [r2, #0]
 80109b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f43f ace2 	beq.w	801037c <_dtoa_r+0xa4>
 80109b8:	601d      	str	r5, [r3, #0]
 80109ba:	e4df      	b.n	801037c <_dtoa_r+0xa4>
 80109bc:	465f      	mov	r7, fp
 80109be:	462b      	mov	r3, r5
 80109c0:	461d      	mov	r5, r3
 80109c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109c6:	2a39      	cmp	r2, #57	; 0x39
 80109c8:	d106      	bne.n	80109d8 <_dtoa_r+0x700>
 80109ca:	9a00      	ldr	r2, [sp, #0]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d1f7      	bne.n	80109c0 <_dtoa_r+0x6e8>
 80109d0:	9900      	ldr	r1, [sp, #0]
 80109d2:	2230      	movs	r2, #48	; 0x30
 80109d4:	3701      	adds	r7, #1
 80109d6:	700a      	strb	r2, [r1, #0]
 80109d8:	781a      	ldrb	r2, [r3, #0]
 80109da:	3201      	adds	r2, #1
 80109dc:	701a      	strb	r2, [r3, #0]
 80109de:	e790      	b.n	8010902 <_dtoa_r+0x62a>
 80109e0:	4ba3      	ldr	r3, [pc, #652]	; (8010c70 <_dtoa_r+0x998>)
 80109e2:	2200      	movs	r2, #0
 80109e4:	f7ef fe30 	bl	8000648 <__aeabi_dmul>
 80109e8:	2200      	movs	r2, #0
 80109ea:	2300      	movs	r3, #0
 80109ec:	4606      	mov	r6, r0
 80109ee:	460f      	mov	r7, r1
 80109f0:	f7f0 f892 	bl	8000b18 <__aeabi_dcmpeq>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	d09e      	beq.n	8010936 <_dtoa_r+0x65e>
 80109f8:	e7d0      	b.n	801099c <_dtoa_r+0x6c4>
 80109fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109fc:	2a00      	cmp	r2, #0
 80109fe:	f000 80ca 	beq.w	8010b96 <_dtoa_r+0x8be>
 8010a02:	9a07      	ldr	r2, [sp, #28]
 8010a04:	2a01      	cmp	r2, #1
 8010a06:	f300 80ad 	bgt.w	8010b64 <_dtoa_r+0x88c>
 8010a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a0c:	2a00      	cmp	r2, #0
 8010a0e:	f000 80a5 	beq.w	8010b5c <_dtoa_r+0x884>
 8010a12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a16:	9e08      	ldr	r6, [sp, #32]
 8010a18:	9d05      	ldr	r5, [sp, #20]
 8010a1a:	9a05      	ldr	r2, [sp, #20]
 8010a1c:	441a      	add	r2, r3
 8010a1e:	9205      	str	r2, [sp, #20]
 8010a20:	9a06      	ldr	r2, [sp, #24]
 8010a22:	2101      	movs	r1, #1
 8010a24:	441a      	add	r2, r3
 8010a26:	4620      	mov	r0, r4
 8010a28:	9206      	str	r2, [sp, #24]
 8010a2a:	f000 fc87 	bl	801133c <__i2b>
 8010a2e:	4607      	mov	r7, r0
 8010a30:	b165      	cbz	r5, 8010a4c <_dtoa_r+0x774>
 8010a32:	9b06      	ldr	r3, [sp, #24]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	dd09      	ble.n	8010a4c <_dtoa_r+0x774>
 8010a38:	42ab      	cmp	r3, r5
 8010a3a:	9a05      	ldr	r2, [sp, #20]
 8010a3c:	bfa8      	it	ge
 8010a3e:	462b      	movge	r3, r5
 8010a40:	1ad2      	subs	r2, r2, r3
 8010a42:	9205      	str	r2, [sp, #20]
 8010a44:	9a06      	ldr	r2, [sp, #24]
 8010a46:	1aed      	subs	r5, r5, r3
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	9306      	str	r3, [sp, #24]
 8010a4c:	9b08      	ldr	r3, [sp, #32]
 8010a4e:	b1f3      	cbz	r3, 8010a8e <_dtoa_r+0x7b6>
 8010a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	f000 80a3 	beq.w	8010b9e <_dtoa_r+0x8c6>
 8010a58:	2e00      	cmp	r6, #0
 8010a5a:	dd10      	ble.n	8010a7e <_dtoa_r+0x7a6>
 8010a5c:	4639      	mov	r1, r7
 8010a5e:	4632      	mov	r2, r6
 8010a60:	4620      	mov	r0, r4
 8010a62:	f000 fd2b 	bl	80114bc <__pow5mult>
 8010a66:	4652      	mov	r2, sl
 8010a68:	4601      	mov	r1, r0
 8010a6a:	4607      	mov	r7, r0
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f000 fc7b 	bl	8011368 <__multiply>
 8010a72:	4651      	mov	r1, sl
 8010a74:	4680      	mov	r8, r0
 8010a76:	4620      	mov	r0, r4
 8010a78:	f000 fb60 	bl	801113c <_Bfree>
 8010a7c:	46c2      	mov	sl, r8
 8010a7e:	9b08      	ldr	r3, [sp, #32]
 8010a80:	1b9a      	subs	r2, r3, r6
 8010a82:	d004      	beq.n	8010a8e <_dtoa_r+0x7b6>
 8010a84:	4651      	mov	r1, sl
 8010a86:	4620      	mov	r0, r4
 8010a88:	f000 fd18 	bl	80114bc <__pow5mult>
 8010a8c:	4682      	mov	sl, r0
 8010a8e:	2101      	movs	r1, #1
 8010a90:	4620      	mov	r0, r4
 8010a92:	f000 fc53 	bl	801133c <__i2b>
 8010a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	4606      	mov	r6, r0
 8010a9c:	f340 8081 	ble.w	8010ba2 <_dtoa_r+0x8ca>
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	4601      	mov	r1, r0
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	f000 fd09 	bl	80114bc <__pow5mult>
 8010aaa:	9b07      	ldr	r3, [sp, #28]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	4606      	mov	r6, r0
 8010ab0:	dd7a      	ble.n	8010ba8 <_dtoa_r+0x8d0>
 8010ab2:	f04f 0800 	mov.w	r8, #0
 8010ab6:	6933      	ldr	r3, [r6, #16]
 8010ab8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010abc:	6918      	ldr	r0, [r3, #16]
 8010abe:	f000 fbef 	bl	80112a0 <__hi0bits>
 8010ac2:	f1c0 0020 	rsb	r0, r0, #32
 8010ac6:	9b06      	ldr	r3, [sp, #24]
 8010ac8:	4418      	add	r0, r3
 8010aca:	f010 001f 	ands.w	r0, r0, #31
 8010ace:	f000 8094 	beq.w	8010bfa <_dtoa_r+0x922>
 8010ad2:	f1c0 0320 	rsb	r3, r0, #32
 8010ad6:	2b04      	cmp	r3, #4
 8010ad8:	f340 8085 	ble.w	8010be6 <_dtoa_r+0x90e>
 8010adc:	9b05      	ldr	r3, [sp, #20]
 8010ade:	f1c0 001c 	rsb	r0, r0, #28
 8010ae2:	4403      	add	r3, r0
 8010ae4:	9305      	str	r3, [sp, #20]
 8010ae6:	9b06      	ldr	r3, [sp, #24]
 8010ae8:	4403      	add	r3, r0
 8010aea:	4405      	add	r5, r0
 8010aec:	9306      	str	r3, [sp, #24]
 8010aee:	9b05      	ldr	r3, [sp, #20]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	dd05      	ble.n	8010b00 <_dtoa_r+0x828>
 8010af4:	4651      	mov	r1, sl
 8010af6:	461a      	mov	r2, r3
 8010af8:	4620      	mov	r0, r4
 8010afa:	f000 fd39 	bl	8011570 <__lshift>
 8010afe:	4682      	mov	sl, r0
 8010b00:	9b06      	ldr	r3, [sp, #24]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	dd05      	ble.n	8010b12 <_dtoa_r+0x83a>
 8010b06:	4631      	mov	r1, r6
 8010b08:	461a      	mov	r2, r3
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	f000 fd30 	bl	8011570 <__lshift>
 8010b10:	4606      	mov	r6, r0
 8010b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d072      	beq.n	8010bfe <_dtoa_r+0x926>
 8010b18:	4631      	mov	r1, r6
 8010b1a:	4650      	mov	r0, sl
 8010b1c:	f000 fd94 	bl	8011648 <__mcmp>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	da6c      	bge.n	8010bfe <_dtoa_r+0x926>
 8010b24:	2300      	movs	r3, #0
 8010b26:	4651      	mov	r1, sl
 8010b28:	220a      	movs	r2, #10
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	f000 fb28 	bl	8011180 <__multadd>
 8010b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b36:	4682      	mov	sl, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f000 81b0 	beq.w	8010e9e <_dtoa_r+0xbc6>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	4639      	mov	r1, r7
 8010b42:	220a      	movs	r2, #10
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 fb1b 	bl	8011180 <__multadd>
 8010b4a:	9b01      	ldr	r3, [sp, #4]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	4607      	mov	r7, r0
 8010b50:	f300 8096 	bgt.w	8010c80 <_dtoa_r+0x9a8>
 8010b54:	9b07      	ldr	r3, [sp, #28]
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	dc59      	bgt.n	8010c0e <_dtoa_r+0x936>
 8010b5a:	e091      	b.n	8010c80 <_dtoa_r+0x9a8>
 8010b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010b62:	e758      	b.n	8010a16 <_dtoa_r+0x73e>
 8010b64:	9b04      	ldr	r3, [sp, #16]
 8010b66:	1e5e      	subs	r6, r3, #1
 8010b68:	9b08      	ldr	r3, [sp, #32]
 8010b6a:	42b3      	cmp	r3, r6
 8010b6c:	bfbf      	itttt	lt
 8010b6e:	9b08      	ldrlt	r3, [sp, #32]
 8010b70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010b72:	9608      	strlt	r6, [sp, #32]
 8010b74:	1af3      	sublt	r3, r6, r3
 8010b76:	bfb4      	ite	lt
 8010b78:	18d2      	addlt	r2, r2, r3
 8010b7a:	1b9e      	subge	r6, r3, r6
 8010b7c:	9b04      	ldr	r3, [sp, #16]
 8010b7e:	bfbc      	itt	lt
 8010b80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010b82:	2600      	movlt	r6, #0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	bfb7      	itett	lt
 8010b88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010b8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010b90:	1a9d      	sublt	r5, r3, r2
 8010b92:	2300      	movlt	r3, #0
 8010b94:	e741      	b.n	8010a1a <_dtoa_r+0x742>
 8010b96:	9e08      	ldr	r6, [sp, #32]
 8010b98:	9d05      	ldr	r5, [sp, #20]
 8010b9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010b9c:	e748      	b.n	8010a30 <_dtoa_r+0x758>
 8010b9e:	9a08      	ldr	r2, [sp, #32]
 8010ba0:	e770      	b.n	8010a84 <_dtoa_r+0x7ac>
 8010ba2:	9b07      	ldr	r3, [sp, #28]
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	dc19      	bgt.n	8010bdc <_dtoa_r+0x904>
 8010ba8:	9b02      	ldr	r3, [sp, #8]
 8010baa:	b9bb      	cbnz	r3, 8010bdc <_dtoa_r+0x904>
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bb2:	b99b      	cbnz	r3, 8010bdc <_dtoa_r+0x904>
 8010bb4:	9b03      	ldr	r3, [sp, #12]
 8010bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010bba:	0d1b      	lsrs	r3, r3, #20
 8010bbc:	051b      	lsls	r3, r3, #20
 8010bbe:	b183      	cbz	r3, 8010be2 <_dtoa_r+0x90a>
 8010bc0:	9b05      	ldr	r3, [sp, #20]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	9305      	str	r3, [sp, #20]
 8010bc6:	9b06      	ldr	r3, [sp, #24]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	9306      	str	r3, [sp, #24]
 8010bcc:	f04f 0801 	mov.w	r8, #1
 8010bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f47f af6f 	bne.w	8010ab6 <_dtoa_r+0x7de>
 8010bd8:	2001      	movs	r0, #1
 8010bda:	e774      	b.n	8010ac6 <_dtoa_r+0x7ee>
 8010bdc:	f04f 0800 	mov.w	r8, #0
 8010be0:	e7f6      	b.n	8010bd0 <_dtoa_r+0x8f8>
 8010be2:	4698      	mov	r8, r3
 8010be4:	e7f4      	b.n	8010bd0 <_dtoa_r+0x8f8>
 8010be6:	d082      	beq.n	8010aee <_dtoa_r+0x816>
 8010be8:	9a05      	ldr	r2, [sp, #20]
 8010bea:	331c      	adds	r3, #28
 8010bec:	441a      	add	r2, r3
 8010bee:	9205      	str	r2, [sp, #20]
 8010bf0:	9a06      	ldr	r2, [sp, #24]
 8010bf2:	441a      	add	r2, r3
 8010bf4:	441d      	add	r5, r3
 8010bf6:	9206      	str	r2, [sp, #24]
 8010bf8:	e779      	b.n	8010aee <_dtoa_r+0x816>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	e7f4      	b.n	8010be8 <_dtoa_r+0x910>
 8010bfe:	9b04      	ldr	r3, [sp, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	dc37      	bgt.n	8010c74 <_dtoa_r+0x99c>
 8010c04:	9b07      	ldr	r3, [sp, #28]
 8010c06:	2b02      	cmp	r3, #2
 8010c08:	dd34      	ble.n	8010c74 <_dtoa_r+0x99c>
 8010c0a:	9b04      	ldr	r3, [sp, #16]
 8010c0c:	9301      	str	r3, [sp, #4]
 8010c0e:	9b01      	ldr	r3, [sp, #4]
 8010c10:	b963      	cbnz	r3, 8010c2c <_dtoa_r+0x954>
 8010c12:	4631      	mov	r1, r6
 8010c14:	2205      	movs	r2, #5
 8010c16:	4620      	mov	r0, r4
 8010c18:	f000 fab2 	bl	8011180 <__multadd>
 8010c1c:	4601      	mov	r1, r0
 8010c1e:	4606      	mov	r6, r0
 8010c20:	4650      	mov	r0, sl
 8010c22:	f000 fd11 	bl	8011648 <__mcmp>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	f73f adbb 	bgt.w	80107a2 <_dtoa_r+0x4ca>
 8010c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c2e:	9d00      	ldr	r5, [sp, #0]
 8010c30:	ea6f 0b03 	mvn.w	fp, r3
 8010c34:	f04f 0800 	mov.w	r8, #0
 8010c38:	4631      	mov	r1, r6
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 fa7e 	bl	801113c <_Bfree>
 8010c40:	2f00      	cmp	r7, #0
 8010c42:	f43f aeab 	beq.w	801099c <_dtoa_r+0x6c4>
 8010c46:	f1b8 0f00 	cmp.w	r8, #0
 8010c4a:	d005      	beq.n	8010c58 <_dtoa_r+0x980>
 8010c4c:	45b8      	cmp	r8, r7
 8010c4e:	d003      	beq.n	8010c58 <_dtoa_r+0x980>
 8010c50:	4641      	mov	r1, r8
 8010c52:	4620      	mov	r0, r4
 8010c54:	f000 fa72 	bl	801113c <_Bfree>
 8010c58:	4639      	mov	r1, r7
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	f000 fa6e 	bl	801113c <_Bfree>
 8010c60:	e69c      	b.n	801099c <_dtoa_r+0x6c4>
 8010c62:	2600      	movs	r6, #0
 8010c64:	4637      	mov	r7, r6
 8010c66:	e7e1      	b.n	8010c2c <_dtoa_r+0x954>
 8010c68:	46bb      	mov	fp, r7
 8010c6a:	4637      	mov	r7, r6
 8010c6c:	e599      	b.n	80107a2 <_dtoa_r+0x4ca>
 8010c6e:	bf00      	nop
 8010c70:	40240000 	.word	0x40240000
 8010c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f000 80c8 	beq.w	8010e0c <_dtoa_r+0xb34>
 8010c7c:	9b04      	ldr	r3, [sp, #16]
 8010c7e:	9301      	str	r3, [sp, #4]
 8010c80:	2d00      	cmp	r5, #0
 8010c82:	dd05      	ble.n	8010c90 <_dtoa_r+0x9b8>
 8010c84:	4639      	mov	r1, r7
 8010c86:	462a      	mov	r2, r5
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f000 fc71 	bl	8011570 <__lshift>
 8010c8e:	4607      	mov	r7, r0
 8010c90:	f1b8 0f00 	cmp.w	r8, #0
 8010c94:	d05b      	beq.n	8010d4e <_dtoa_r+0xa76>
 8010c96:	6879      	ldr	r1, [r7, #4]
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f000 fa0f 	bl	80110bc <_Balloc>
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	b928      	cbnz	r0, 8010cae <_dtoa_r+0x9d6>
 8010ca2:	4b83      	ldr	r3, [pc, #524]	; (8010eb0 <_dtoa_r+0xbd8>)
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010caa:	f7ff bb2e 	b.w	801030a <_dtoa_r+0x32>
 8010cae:	693a      	ldr	r2, [r7, #16]
 8010cb0:	3202      	adds	r2, #2
 8010cb2:	0092      	lsls	r2, r2, #2
 8010cb4:	f107 010c 	add.w	r1, r7, #12
 8010cb8:	300c      	adds	r0, #12
 8010cba:	f7ff fa70 	bl	801019e <memcpy>
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f000 fc54 	bl	8011570 <__lshift>
 8010cc8:	9b00      	ldr	r3, [sp, #0]
 8010cca:	3301      	adds	r3, #1
 8010ccc:	9304      	str	r3, [sp, #16]
 8010cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	9308      	str	r3, [sp, #32]
 8010cd6:	9b02      	ldr	r3, [sp, #8]
 8010cd8:	f003 0301 	and.w	r3, r3, #1
 8010cdc:	46b8      	mov	r8, r7
 8010cde:	9306      	str	r3, [sp, #24]
 8010ce0:	4607      	mov	r7, r0
 8010ce2:	9b04      	ldr	r3, [sp, #16]
 8010ce4:	4631      	mov	r1, r6
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	4650      	mov	r0, sl
 8010cea:	9301      	str	r3, [sp, #4]
 8010cec:	f7ff fa6c 	bl	80101c8 <quorem>
 8010cf0:	4641      	mov	r1, r8
 8010cf2:	9002      	str	r0, [sp, #8]
 8010cf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010cf8:	4650      	mov	r0, sl
 8010cfa:	f000 fca5 	bl	8011648 <__mcmp>
 8010cfe:	463a      	mov	r2, r7
 8010d00:	9005      	str	r0, [sp, #20]
 8010d02:	4631      	mov	r1, r6
 8010d04:	4620      	mov	r0, r4
 8010d06:	f000 fcbb 	bl	8011680 <__mdiff>
 8010d0a:	68c2      	ldr	r2, [r0, #12]
 8010d0c:	4605      	mov	r5, r0
 8010d0e:	bb02      	cbnz	r2, 8010d52 <_dtoa_r+0xa7a>
 8010d10:	4601      	mov	r1, r0
 8010d12:	4650      	mov	r0, sl
 8010d14:	f000 fc98 	bl	8011648 <__mcmp>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d20:	f000 fa0c 	bl	801113c <_Bfree>
 8010d24:	9b07      	ldr	r3, [sp, #28]
 8010d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d28:	9d04      	ldr	r5, [sp, #16]
 8010d2a:	ea43 0102 	orr.w	r1, r3, r2
 8010d2e:	9b06      	ldr	r3, [sp, #24]
 8010d30:	4319      	orrs	r1, r3
 8010d32:	d110      	bne.n	8010d56 <_dtoa_r+0xa7e>
 8010d34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010d38:	d029      	beq.n	8010d8e <_dtoa_r+0xab6>
 8010d3a:	9b05      	ldr	r3, [sp, #20]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	dd02      	ble.n	8010d46 <_dtoa_r+0xa6e>
 8010d40:	9b02      	ldr	r3, [sp, #8]
 8010d42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010d46:	9b01      	ldr	r3, [sp, #4]
 8010d48:	f883 9000 	strb.w	r9, [r3]
 8010d4c:	e774      	b.n	8010c38 <_dtoa_r+0x960>
 8010d4e:	4638      	mov	r0, r7
 8010d50:	e7ba      	b.n	8010cc8 <_dtoa_r+0x9f0>
 8010d52:	2201      	movs	r2, #1
 8010d54:	e7e1      	b.n	8010d1a <_dtoa_r+0xa42>
 8010d56:	9b05      	ldr	r3, [sp, #20]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	db04      	blt.n	8010d66 <_dtoa_r+0xa8e>
 8010d5c:	9907      	ldr	r1, [sp, #28]
 8010d5e:	430b      	orrs	r3, r1
 8010d60:	9906      	ldr	r1, [sp, #24]
 8010d62:	430b      	orrs	r3, r1
 8010d64:	d120      	bne.n	8010da8 <_dtoa_r+0xad0>
 8010d66:	2a00      	cmp	r2, #0
 8010d68:	dded      	ble.n	8010d46 <_dtoa_r+0xa6e>
 8010d6a:	4651      	mov	r1, sl
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f000 fbfe 	bl	8011570 <__lshift>
 8010d74:	4631      	mov	r1, r6
 8010d76:	4682      	mov	sl, r0
 8010d78:	f000 fc66 	bl	8011648 <__mcmp>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	dc03      	bgt.n	8010d88 <_dtoa_r+0xab0>
 8010d80:	d1e1      	bne.n	8010d46 <_dtoa_r+0xa6e>
 8010d82:	f019 0f01 	tst.w	r9, #1
 8010d86:	d0de      	beq.n	8010d46 <_dtoa_r+0xa6e>
 8010d88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010d8c:	d1d8      	bne.n	8010d40 <_dtoa_r+0xa68>
 8010d8e:	9a01      	ldr	r2, [sp, #4]
 8010d90:	2339      	movs	r3, #57	; 0x39
 8010d92:	7013      	strb	r3, [r2, #0]
 8010d94:	462b      	mov	r3, r5
 8010d96:	461d      	mov	r5, r3
 8010d98:	3b01      	subs	r3, #1
 8010d9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010d9e:	2a39      	cmp	r2, #57	; 0x39
 8010da0:	d06c      	beq.n	8010e7c <_dtoa_r+0xba4>
 8010da2:	3201      	adds	r2, #1
 8010da4:	701a      	strb	r2, [r3, #0]
 8010da6:	e747      	b.n	8010c38 <_dtoa_r+0x960>
 8010da8:	2a00      	cmp	r2, #0
 8010daa:	dd07      	ble.n	8010dbc <_dtoa_r+0xae4>
 8010dac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010db0:	d0ed      	beq.n	8010d8e <_dtoa_r+0xab6>
 8010db2:	9a01      	ldr	r2, [sp, #4]
 8010db4:	f109 0301 	add.w	r3, r9, #1
 8010db8:	7013      	strb	r3, [r2, #0]
 8010dba:	e73d      	b.n	8010c38 <_dtoa_r+0x960>
 8010dbc:	9b04      	ldr	r3, [sp, #16]
 8010dbe:	9a08      	ldr	r2, [sp, #32]
 8010dc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d043      	beq.n	8010e50 <_dtoa_r+0xb78>
 8010dc8:	4651      	mov	r1, sl
 8010dca:	2300      	movs	r3, #0
 8010dcc:	220a      	movs	r2, #10
 8010dce:	4620      	mov	r0, r4
 8010dd0:	f000 f9d6 	bl	8011180 <__multadd>
 8010dd4:	45b8      	cmp	r8, r7
 8010dd6:	4682      	mov	sl, r0
 8010dd8:	f04f 0300 	mov.w	r3, #0
 8010ddc:	f04f 020a 	mov.w	r2, #10
 8010de0:	4641      	mov	r1, r8
 8010de2:	4620      	mov	r0, r4
 8010de4:	d107      	bne.n	8010df6 <_dtoa_r+0xb1e>
 8010de6:	f000 f9cb 	bl	8011180 <__multadd>
 8010dea:	4680      	mov	r8, r0
 8010dec:	4607      	mov	r7, r0
 8010dee:	9b04      	ldr	r3, [sp, #16]
 8010df0:	3301      	adds	r3, #1
 8010df2:	9304      	str	r3, [sp, #16]
 8010df4:	e775      	b.n	8010ce2 <_dtoa_r+0xa0a>
 8010df6:	f000 f9c3 	bl	8011180 <__multadd>
 8010dfa:	4639      	mov	r1, r7
 8010dfc:	4680      	mov	r8, r0
 8010dfe:	2300      	movs	r3, #0
 8010e00:	220a      	movs	r2, #10
 8010e02:	4620      	mov	r0, r4
 8010e04:	f000 f9bc 	bl	8011180 <__multadd>
 8010e08:	4607      	mov	r7, r0
 8010e0a:	e7f0      	b.n	8010dee <_dtoa_r+0xb16>
 8010e0c:	9b04      	ldr	r3, [sp, #16]
 8010e0e:	9301      	str	r3, [sp, #4]
 8010e10:	9d00      	ldr	r5, [sp, #0]
 8010e12:	4631      	mov	r1, r6
 8010e14:	4650      	mov	r0, sl
 8010e16:	f7ff f9d7 	bl	80101c8 <quorem>
 8010e1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010e1e:	9b00      	ldr	r3, [sp, #0]
 8010e20:	f805 9b01 	strb.w	r9, [r5], #1
 8010e24:	1aea      	subs	r2, r5, r3
 8010e26:	9b01      	ldr	r3, [sp, #4]
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	dd07      	ble.n	8010e3c <_dtoa_r+0xb64>
 8010e2c:	4651      	mov	r1, sl
 8010e2e:	2300      	movs	r3, #0
 8010e30:	220a      	movs	r2, #10
 8010e32:	4620      	mov	r0, r4
 8010e34:	f000 f9a4 	bl	8011180 <__multadd>
 8010e38:	4682      	mov	sl, r0
 8010e3a:	e7ea      	b.n	8010e12 <_dtoa_r+0xb3a>
 8010e3c:	9b01      	ldr	r3, [sp, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	bfc8      	it	gt
 8010e42:	461d      	movgt	r5, r3
 8010e44:	9b00      	ldr	r3, [sp, #0]
 8010e46:	bfd8      	it	le
 8010e48:	2501      	movle	r5, #1
 8010e4a:	441d      	add	r5, r3
 8010e4c:	f04f 0800 	mov.w	r8, #0
 8010e50:	4651      	mov	r1, sl
 8010e52:	2201      	movs	r2, #1
 8010e54:	4620      	mov	r0, r4
 8010e56:	f000 fb8b 	bl	8011570 <__lshift>
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	4682      	mov	sl, r0
 8010e5e:	f000 fbf3 	bl	8011648 <__mcmp>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	dc96      	bgt.n	8010d94 <_dtoa_r+0xabc>
 8010e66:	d102      	bne.n	8010e6e <_dtoa_r+0xb96>
 8010e68:	f019 0f01 	tst.w	r9, #1
 8010e6c:	d192      	bne.n	8010d94 <_dtoa_r+0xabc>
 8010e6e:	462b      	mov	r3, r5
 8010e70:	461d      	mov	r5, r3
 8010e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e76:	2a30      	cmp	r2, #48	; 0x30
 8010e78:	d0fa      	beq.n	8010e70 <_dtoa_r+0xb98>
 8010e7a:	e6dd      	b.n	8010c38 <_dtoa_r+0x960>
 8010e7c:	9a00      	ldr	r2, [sp, #0]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d189      	bne.n	8010d96 <_dtoa_r+0xabe>
 8010e82:	f10b 0b01 	add.w	fp, fp, #1
 8010e86:	2331      	movs	r3, #49	; 0x31
 8010e88:	e796      	b.n	8010db8 <_dtoa_r+0xae0>
 8010e8a:	4b0a      	ldr	r3, [pc, #40]	; (8010eb4 <_dtoa_r+0xbdc>)
 8010e8c:	f7ff ba99 	b.w	80103c2 <_dtoa_r+0xea>
 8010e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f47f aa6d 	bne.w	8010372 <_dtoa_r+0x9a>
 8010e98:	4b07      	ldr	r3, [pc, #28]	; (8010eb8 <_dtoa_r+0xbe0>)
 8010e9a:	f7ff ba92 	b.w	80103c2 <_dtoa_r+0xea>
 8010e9e:	9b01      	ldr	r3, [sp, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	dcb5      	bgt.n	8010e10 <_dtoa_r+0xb38>
 8010ea4:	9b07      	ldr	r3, [sp, #28]
 8010ea6:	2b02      	cmp	r3, #2
 8010ea8:	f73f aeb1 	bgt.w	8010c0e <_dtoa_r+0x936>
 8010eac:	e7b0      	b.n	8010e10 <_dtoa_r+0xb38>
 8010eae:	bf00      	nop
 8010eb0:	080157c7 	.word	0x080157c7
 8010eb4:	08015ab0 	.word	0x08015ab0
 8010eb8:	0801574b 	.word	0x0801574b

08010ebc <_free_r>:
 8010ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ebe:	2900      	cmp	r1, #0
 8010ec0:	d044      	beq.n	8010f4c <_free_r+0x90>
 8010ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ec6:	9001      	str	r0, [sp, #4]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f1a1 0404 	sub.w	r4, r1, #4
 8010ece:	bfb8      	it	lt
 8010ed0:	18e4      	addlt	r4, r4, r3
 8010ed2:	f000 f8e7 	bl	80110a4 <__malloc_lock>
 8010ed6:	4a1e      	ldr	r2, [pc, #120]	; (8010f50 <_free_r+0x94>)
 8010ed8:	9801      	ldr	r0, [sp, #4]
 8010eda:	6813      	ldr	r3, [r2, #0]
 8010edc:	b933      	cbnz	r3, 8010eec <_free_r+0x30>
 8010ede:	6063      	str	r3, [r4, #4]
 8010ee0:	6014      	str	r4, [r2, #0]
 8010ee2:	b003      	add	sp, #12
 8010ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ee8:	f000 b8e2 	b.w	80110b0 <__malloc_unlock>
 8010eec:	42a3      	cmp	r3, r4
 8010eee:	d908      	bls.n	8010f02 <_free_r+0x46>
 8010ef0:	6825      	ldr	r5, [r4, #0]
 8010ef2:	1961      	adds	r1, r4, r5
 8010ef4:	428b      	cmp	r3, r1
 8010ef6:	bf01      	itttt	eq
 8010ef8:	6819      	ldreq	r1, [r3, #0]
 8010efa:	685b      	ldreq	r3, [r3, #4]
 8010efc:	1949      	addeq	r1, r1, r5
 8010efe:	6021      	streq	r1, [r4, #0]
 8010f00:	e7ed      	b.n	8010ede <_free_r+0x22>
 8010f02:	461a      	mov	r2, r3
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	b10b      	cbz	r3, 8010f0c <_free_r+0x50>
 8010f08:	42a3      	cmp	r3, r4
 8010f0a:	d9fa      	bls.n	8010f02 <_free_r+0x46>
 8010f0c:	6811      	ldr	r1, [r2, #0]
 8010f0e:	1855      	adds	r5, r2, r1
 8010f10:	42a5      	cmp	r5, r4
 8010f12:	d10b      	bne.n	8010f2c <_free_r+0x70>
 8010f14:	6824      	ldr	r4, [r4, #0]
 8010f16:	4421      	add	r1, r4
 8010f18:	1854      	adds	r4, r2, r1
 8010f1a:	42a3      	cmp	r3, r4
 8010f1c:	6011      	str	r1, [r2, #0]
 8010f1e:	d1e0      	bne.n	8010ee2 <_free_r+0x26>
 8010f20:	681c      	ldr	r4, [r3, #0]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	6053      	str	r3, [r2, #4]
 8010f26:	440c      	add	r4, r1
 8010f28:	6014      	str	r4, [r2, #0]
 8010f2a:	e7da      	b.n	8010ee2 <_free_r+0x26>
 8010f2c:	d902      	bls.n	8010f34 <_free_r+0x78>
 8010f2e:	230c      	movs	r3, #12
 8010f30:	6003      	str	r3, [r0, #0]
 8010f32:	e7d6      	b.n	8010ee2 <_free_r+0x26>
 8010f34:	6825      	ldr	r5, [r4, #0]
 8010f36:	1961      	adds	r1, r4, r5
 8010f38:	428b      	cmp	r3, r1
 8010f3a:	bf04      	itt	eq
 8010f3c:	6819      	ldreq	r1, [r3, #0]
 8010f3e:	685b      	ldreq	r3, [r3, #4]
 8010f40:	6063      	str	r3, [r4, #4]
 8010f42:	bf04      	itt	eq
 8010f44:	1949      	addeq	r1, r1, r5
 8010f46:	6021      	streq	r1, [r4, #0]
 8010f48:	6054      	str	r4, [r2, #4]
 8010f4a:	e7ca      	b.n	8010ee2 <_free_r+0x26>
 8010f4c:	b003      	add	sp, #12
 8010f4e:	bd30      	pop	{r4, r5, pc}
 8010f50:	20004a68 	.word	0x20004a68

08010f54 <malloc>:
 8010f54:	4b02      	ldr	r3, [pc, #8]	; (8010f60 <malloc+0xc>)
 8010f56:	4601      	mov	r1, r0
 8010f58:	6818      	ldr	r0, [r3, #0]
 8010f5a:	f000 b823 	b.w	8010fa4 <_malloc_r>
 8010f5e:	bf00      	nop
 8010f60:	20000074 	.word	0x20000074

08010f64 <sbrk_aligned>:
 8010f64:	b570      	push	{r4, r5, r6, lr}
 8010f66:	4e0e      	ldr	r6, [pc, #56]	; (8010fa0 <sbrk_aligned+0x3c>)
 8010f68:	460c      	mov	r4, r1
 8010f6a:	6831      	ldr	r1, [r6, #0]
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	b911      	cbnz	r1, 8010f76 <sbrk_aligned+0x12>
 8010f70:	f002 f99c 	bl	80132ac <_sbrk_r>
 8010f74:	6030      	str	r0, [r6, #0]
 8010f76:	4621      	mov	r1, r4
 8010f78:	4628      	mov	r0, r5
 8010f7a:	f002 f997 	bl	80132ac <_sbrk_r>
 8010f7e:	1c43      	adds	r3, r0, #1
 8010f80:	d00a      	beq.n	8010f98 <sbrk_aligned+0x34>
 8010f82:	1cc4      	adds	r4, r0, #3
 8010f84:	f024 0403 	bic.w	r4, r4, #3
 8010f88:	42a0      	cmp	r0, r4
 8010f8a:	d007      	beq.n	8010f9c <sbrk_aligned+0x38>
 8010f8c:	1a21      	subs	r1, r4, r0
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f002 f98c 	bl	80132ac <_sbrk_r>
 8010f94:	3001      	adds	r0, #1
 8010f96:	d101      	bne.n	8010f9c <sbrk_aligned+0x38>
 8010f98:	f04f 34ff 	mov.w	r4, #4294967295
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	bd70      	pop	{r4, r5, r6, pc}
 8010fa0:	20004a6c 	.word	0x20004a6c

08010fa4 <_malloc_r>:
 8010fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa8:	1ccd      	adds	r5, r1, #3
 8010faa:	f025 0503 	bic.w	r5, r5, #3
 8010fae:	3508      	adds	r5, #8
 8010fb0:	2d0c      	cmp	r5, #12
 8010fb2:	bf38      	it	cc
 8010fb4:	250c      	movcc	r5, #12
 8010fb6:	2d00      	cmp	r5, #0
 8010fb8:	4607      	mov	r7, r0
 8010fba:	db01      	blt.n	8010fc0 <_malloc_r+0x1c>
 8010fbc:	42a9      	cmp	r1, r5
 8010fbe:	d905      	bls.n	8010fcc <_malloc_r+0x28>
 8010fc0:	230c      	movs	r3, #12
 8010fc2:	603b      	str	r3, [r7, #0]
 8010fc4:	2600      	movs	r6, #0
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80110a0 <_malloc_r+0xfc>
 8010fd0:	f000 f868 	bl	80110a4 <__malloc_lock>
 8010fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8010fd8:	461c      	mov	r4, r3
 8010fda:	bb5c      	cbnz	r4, 8011034 <_malloc_r+0x90>
 8010fdc:	4629      	mov	r1, r5
 8010fde:	4638      	mov	r0, r7
 8010fe0:	f7ff ffc0 	bl	8010f64 <sbrk_aligned>
 8010fe4:	1c43      	adds	r3, r0, #1
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	d155      	bne.n	8011096 <_malloc_r+0xf2>
 8010fea:	f8d8 4000 	ldr.w	r4, [r8]
 8010fee:	4626      	mov	r6, r4
 8010ff0:	2e00      	cmp	r6, #0
 8010ff2:	d145      	bne.n	8011080 <_malloc_r+0xdc>
 8010ff4:	2c00      	cmp	r4, #0
 8010ff6:	d048      	beq.n	801108a <_malloc_r+0xe6>
 8010ff8:	6823      	ldr	r3, [r4, #0]
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	4638      	mov	r0, r7
 8010ffe:	eb04 0903 	add.w	r9, r4, r3
 8011002:	f002 f953 	bl	80132ac <_sbrk_r>
 8011006:	4581      	cmp	r9, r0
 8011008:	d13f      	bne.n	801108a <_malloc_r+0xe6>
 801100a:	6821      	ldr	r1, [r4, #0]
 801100c:	1a6d      	subs	r5, r5, r1
 801100e:	4629      	mov	r1, r5
 8011010:	4638      	mov	r0, r7
 8011012:	f7ff ffa7 	bl	8010f64 <sbrk_aligned>
 8011016:	3001      	adds	r0, #1
 8011018:	d037      	beq.n	801108a <_malloc_r+0xe6>
 801101a:	6823      	ldr	r3, [r4, #0]
 801101c:	442b      	add	r3, r5
 801101e:	6023      	str	r3, [r4, #0]
 8011020:	f8d8 3000 	ldr.w	r3, [r8]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d038      	beq.n	801109a <_malloc_r+0xf6>
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	42a2      	cmp	r2, r4
 801102c:	d12b      	bne.n	8011086 <_malloc_r+0xe2>
 801102e:	2200      	movs	r2, #0
 8011030:	605a      	str	r2, [r3, #4]
 8011032:	e00f      	b.n	8011054 <_malloc_r+0xb0>
 8011034:	6822      	ldr	r2, [r4, #0]
 8011036:	1b52      	subs	r2, r2, r5
 8011038:	d41f      	bmi.n	801107a <_malloc_r+0xd6>
 801103a:	2a0b      	cmp	r2, #11
 801103c:	d917      	bls.n	801106e <_malloc_r+0xca>
 801103e:	1961      	adds	r1, r4, r5
 8011040:	42a3      	cmp	r3, r4
 8011042:	6025      	str	r5, [r4, #0]
 8011044:	bf18      	it	ne
 8011046:	6059      	strne	r1, [r3, #4]
 8011048:	6863      	ldr	r3, [r4, #4]
 801104a:	bf08      	it	eq
 801104c:	f8c8 1000 	streq.w	r1, [r8]
 8011050:	5162      	str	r2, [r4, r5]
 8011052:	604b      	str	r3, [r1, #4]
 8011054:	4638      	mov	r0, r7
 8011056:	f104 060b 	add.w	r6, r4, #11
 801105a:	f000 f829 	bl	80110b0 <__malloc_unlock>
 801105e:	f026 0607 	bic.w	r6, r6, #7
 8011062:	1d23      	adds	r3, r4, #4
 8011064:	1af2      	subs	r2, r6, r3
 8011066:	d0ae      	beq.n	8010fc6 <_malloc_r+0x22>
 8011068:	1b9b      	subs	r3, r3, r6
 801106a:	50a3      	str	r3, [r4, r2]
 801106c:	e7ab      	b.n	8010fc6 <_malloc_r+0x22>
 801106e:	42a3      	cmp	r3, r4
 8011070:	6862      	ldr	r2, [r4, #4]
 8011072:	d1dd      	bne.n	8011030 <_malloc_r+0x8c>
 8011074:	f8c8 2000 	str.w	r2, [r8]
 8011078:	e7ec      	b.n	8011054 <_malloc_r+0xb0>
 801107a:	4623      	mov	r3, r4
 801107c:	6864      	ldr	r4, [r4, #4]
 801107e:	e7ac      	b.n	8010fda <_malloc_r+0x36>
 8011080:	4634      	mov	r4, r6
 8011082:	6876      	ldr	r6, [r6, #4]
 8011084:	e7b4      	b.n	8010ff0 <_malloc_r+0x4c>
 8011086:	4613      	mov	r3, r2
 8011088:	e7cc      	b.n	8011024 <_malloc_r+0x80>
 801108a:	230c      	movs	r3, #12
 801108c:	603b      	str	r3, [r7, #0]
 801108e:	4638      	mov	r0, r7
 8011090:	f000 f80e 	bl	80110b0 <__malloc_unlock>
 8011094:	e797      	b.n	8010fc6 <_malloc_r+0x22>
 8011096:	6025      	str	r5, [r4, #0]
 8011098:	e7dc      	b.n	8011054 <_malloc_r+0xb0>
 801109a:	605b      	str	r3, [r3, #4]
 801109c:	deff      	udf	#255	; 0xff
 801109e:	bf00      	nop
 80110a0:	20004a68 	.word	0x20004a68

080110a4 <__malloc_lock>:
 80110a4:	4801      	ldr	r0, [pc, #4]	; (80110ac <__malloc_lock+0x8>)
 80110a6:	f7ff b878 	b.w	801019a <__retarget_lock_acquire_recursive>
 80110aa:	bf00      	nop
 80110ac:	20004a64 	.word	0x20004a64

080110b0 <__malloc_unlock>:
 80110b0:	4801      	ldr	r0, [pc, #4]	; (80110b8 <__malloc_unlock+0x8>)
 80110b2:	f7ff b873 	b.w	801019c <__retarget_lock_release_recursive>
 80110b6:	bf00      	nop
 80110b8:	20004a64 	.word	0x20004a64

080110bc <_Balloc>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	69c6      	ldr	r6, [r0, #28]
 80110c0:	4604      	mov	r4, r0
 80110c2:	460d      	mov	r5, r1
 80110c4:	b976      	cbnz	r6, 80110e4 <_Balloc+0x28>
 80110c6:	2010      	movs	r0, #16
 80110c8:	f7ff ff44 	bl	8010f54 <malloc>
 80110cc:	4602      	mov	r2, r0
 80110ce:	61e0      	str	r0, [r4, #28]
 80110d0:	b920      	cbnz	r0, 80110dc <_Balloc+0x20>
 80110d2:	4b18      	ldr	r3, [pc, #96]	; (8011134 <_Balloc+0x78>)
 80110d4:	4818      	ldr	r0, [pc, #96]	; (8011138 <_Balloc+0x7c>)
 80110d6:	216b      	movs	r1, #107	; 0x6b
 80110d8:	f002 f902 	bl	80132e0 <__assert_func>
 80110dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110e0:	6006      	str	r6, [r0, #0]
 80110e2:	60c6      	str	r6, [r0, #12]
 80110e4:	69e6      	ldr	r6, [r4, #28]
 80110e6:	68f3      	ldr	r3, [r6, #12]
 80110e8:	b183      	cbz	r3, 801110c <_Balloc+0x50>
 80110ea:	69e3      	ldr	r3, [r4, #28]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110f2:	b9b8      	cbnz	r0, 8011124 <_Balloc+0x68>
 80110f4:	2101      	movs	r1, #1
 80110f6:	fa01 f605 	lsl.w	r6, r1, r5
 80110fa:	1d72      	adds	r2, r6, #5
 80110fc:	0092      	lsls	r2, r2, #2
 80110fe:	4620      	mov	r0, r4
 8011100:	f002 f90c 	bl	801331c <_calloc_r>
 8011104:	b160      	cbz	r0, 8011120 <_Balloc+0x64>
 8011106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801110a:	e00e      	b.n	801112a <_Balloc+0x6e>
 801110c:	2221      	movs	r2, #33	; 0x21
 801110e:	2104      	movs	r1, #4
 8011110:	4620      	mov	r0, r4
 8011112:	f002 f903 	bl	801331c <_calloc_r>
 8011116:	69e3      	ldr	r3, [r4, #28]
 8011118:	60f0      	str	r0, [r6, #12]
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1e4      	bne.n	80110ea <_Balloc+0x2e>
 8011120:	2000      	movs	r0, #0
 8011122:	bd70      	pop	{r4, r5, r6, pc}
 8011124:	6802      	ldr	r2, [r0, #0]
 8011126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801112a:	2300      	movs	r3, #0
 801112c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011130:	e7f7      	b.n	8011122 <_Balloc+0x66>
 8011132:	bf00      	nop
 8011134:	08015758 	.word	0x08015758
 8011138:	080157d8 	.word	0x080157d8

0801113c <_Bfree>:
 801113c:	b570      	push	{r4, r5, r6, lr}
 801113e:	69c6      	ldr	r6, [r0, #28]
 8011140:	4605      	mov	r5, r0
 8011142:	460c      	mov	r4, r1
 8011144:	b976      	cbnz	r6, 8011164 <_Bfree+0x28>
 8011146:	2010      	movs	r0, #16
 8011148:	f7ff ff04 	bl	8010f54 <malloc>
 801114c:	4602      	mov	r2, r0
 801114e:	61e8      	str	r0, [r5, #28]
 8011150:	b920      	cbnz	r0, 801115c <_Bfree+0x20>
 8011152:	4b09      	ldr	r3, [pc, #36]	; (8011178 <_Bfree+0x3c>)
 8011154:	4809      	ldr	r0, [pc, #36]	; (801117c <_Bfree+0x40>)
 8011156:	218f      	movs	r1, #143	; 0x8f
 8011158:	f002 f8c2 	bl	80132e0 <__assert_func>
 801115c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011160:	6006      	str	r6, [r0, #0]
 8011162:	60c6      	str	r6, [r0, #12]
 8011164:	b13c      	cbz	r4, 8011176 <_Bfree+0x3a>
 8011166:	69eb      	ldr	r3, [r5, #28]
 8011168:	6862      	ldr	r2, [r4, #4]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011170:	6021      	str	r1, [r4, #0]
 8011172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011176:	bd70      	pop	{r4, r5, r6, pc}
 8011178:	08015758 	.word	0x08015758
 801117c:	080157d8 	.word	0x080157d8

08011180 <__multadd>:
 8011180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011184:	690d      	ldr	r5, [r1, #16]
 8011186:	4607      	mov	r7, r0
 8011188:	460c      	mov	r4, r1
 801118a:	461e      	mov	r6, r3
 801118c:	f101 0c14 	add.w	ip, r1, #20
 8011190:	2000      	movs	r0, #0
 8011192:	f8dc 3000 	ldr.w	r3, [ip]
 8011196:	b299      	uxth	r1, r3
 8011198:	fb02 6101 	mla	r1, r2, r1, r6
 801119c:	0c1e      	lsrs	r6, r3, #16
 801119e:	0c0b      	lsrs	r3, r1, #16
 80111a0:	fb02 3306 	mla	r3, r2, r6, r3
 80111a4:	b289      	uxth	r1, r1
 80111a6:	3001      	adds	r0, #1
 80111a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80111ac:	4285      	cmp	r5, r0
 80111ae:	f84c 1b04 	str.w	r1, [ip], #4
 80111b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80111b6:	dcec      	bgt.n	8011192 <__multadd+0x12>
 80111b8:	b30e      	cbz	r6, 80111fe <__multadd+0x7e>
 80111ba:	68a3      	ldr	r3, [r4, #8]
 80111bc:	42ab      	cmp	r3, r5
 80111be:	dc19      	bgt.n	80111f4 <__multadd+0x74>
 80111c0:	6861      	ldr	r1, [r4, #4]
 80111c2:	4638      	mov	r0, r7
 80111c4:	3101      	adds	r1, #1
 80111c6:	f7ff ff79 	bl	80110bc <_Balloc>
 80111ca:	4680      	mov	r8, r0
 80111cc:	b928      	cbnz	r0, 80111da <__multadd+0x5a>
 80111ce:	4602      	mov	r2, r0
 80111d0:	4b0c      	ldr	r3, [pc, #48]	; (8011204 <__multadd+0x84>)
 80111d2:	480d      	ldr	r0, [pc, #52]	; (8011208 <__multadd+0x88>)
 80111d4:	21ba      	movs	r1, #186	; 0xba
 80111d6:	f002 f883 	bl	80132e0 <__assert_func>
 80111da:	6922      	ldr	r2, [r4, #16]
 80111dc:	3202      	adds	r2, #2
 80111de:	f104 010c 	add.w	r1, r4, #12
 80111e2:	0092      	lsls	r2, r2, #2
 80111e4:	300c      	adds	r0, #12
 80111e6:	f7fe ffda 	bl	801019e <memcpy>
 80111ea:	4621      	mov	r1, r4
 80111ec:	4638      	mov	r0, r7
 80111ee:	f7ff ffa5 	bl	801113c <_Bfree>
 80111f2:	4644      	mov	r4, r8
 80111f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80111f8:	3501      	adds	r5, #1
 80111fa:	615e      	str	r6, [r3, #20]
 80111fc:	6125      	str	r5, [r4, #16]
 80111fe:	4620      	mov	r0, r4
 8011200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011204:	080157c7 	.word	0x080157c7
 8011208:	080157d8 	.word	0x080157d8

0801120c <__s2b>:
 801120c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011210:	460c      	mov	r4, r1
 8011212:	4615      	mov	r5, r2
 8011214:	461f      	mov	r7, r3
 8011216:	2209      	movs	r2, #9
 8011218:	3308      	adds	r3, #8
 801121a:	4606      	mov	r6, r0
 801121c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011220:	2100      	movs	r1, #0
 8011222:	2201      	movs	r2, #1
 8011224:	429a      	cmp	r2, r3
 8011226:	db09      	blt.n	801123c <__s2b+0x30>
 8011228:	4630      	mov	r0, r6
 801122a:	f7ff ff47 	bl	80110bc <_Balloc>
 801122e:	b940      	cbnz	r0, 8011242 <__s2b+0x36>
 8011230:	4602      	mov	r2, r0
 8011232:	4b19      	ldr	r3, [pc, #100]	; (8011298 <__s2b+0x8c>)
 8011234:	4819      	ldr	r0, [pc, #100]	; (801129c <__s2b+0x90>)
 8011236:	21d3      	movs	r1, #211	; 0xd3
 8011238:	f002 f852 	bl	80132e0 <__assert_func>
 801123c:	0052      	lsls	r2, r2, #1
 801123e:	3101      	adds	r1, #1
 8011240:	e7f0      	b.n	8011224 <__s2b+0x18>
 8011242:	9b08      	ldr	r3, [sp, #32]
 8011244:	6143      	str	r3, [r0, #20]
 8011246:	2d09      	cmp	r5, #9
 8011248:	f04f 0301 	mov.w	r3, #1
 801124c:	6103      	str	r3, [r0, #16]
 801124e:	dd16      	ble.n	801127e <__s2b+0x72>
 8011250:	f104 0909 	add.w	r9, r4, #9
 8011254:	46c8      	mov	r8, r9
 8011256:	442c      	add	r4, r5
 8011258:	f818 3b01 	ldrb.w	r3, [r8], #1
 801125c:	4601      	mov	r1, r0
 801125e:	3b30      	subs	r3, #48	; 0x30
 8011260:	220a      	movs	r2, #10
 8011262:	4630      	mov	r0, r6
 8011264:	f7ff ff8c 	bl	8011180 <__multadd>
 8011268:	45a0      	cmp	r8, r4
 801126a:	d1f5      	bne.n	8011258 <__s2b+0x4c>
 801126c:	f1a5 0408 	sub.w	r4, r5, #8
 8011270:	444c      	add	r4, r9
 8011272:	1b2d      	subs	r5, r5, r4
 8011274:	1963      	adds	r3, r4, r5
 8011276:	42bb      	cmp	r3, r7
 8011278:	db04      	blt.n	8011284 <__s2b+0x78>
 801127a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801127e:	340a      	adds	r4, #10
 8011280:	2509      	movs	r5, #9
 8011282:	e7f6      	b.n	8011272 <__s2b+0x66>
 8011284:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011288:	4601      	mov	r1, r0
 801128a:	3b30      	subs	r3, #48	; 0x30
 801128c:	220a      	movs	r2, #10
 801128e:	4630      	mov	r0, r6
 8011290:	f7ff ff76 	bl	8011180 <__multadd>
 8011294:	e7ee      	b.n	8011274 <__s2b+0x68>
 8011296:	bf00      	nop
 8011298:	080157c7 	.word	0x080157c7
 801129c:	080157d8 	.word	0x080157d8

080112a0 <__hi0bits>:
 80112a0:	0c03      	lsrs	r3, r0, #16
 80112a2:	041b      	lsls	r3, r3, #16
 80112a4:	b9d3      	cbnz	r3, 80112dc <__hi0bits+0x3c>
 80112a6:	0400      	lsls	r0, r0, #16
 80112a8:	2310      	movs	r3, #16
 80112aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80112ae:	bf04      	itt	eq
 80112b0:	0200      	lsleq	r0, r0, #8
 80112b2:	3308      	addeq	r3, #8
 80112b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80112b8:	bf04      	itt	eq
 80112ba:	0100      	lsleq	r0, r0, #4
 80112bc:	3304      	addeq	r3, #4
 80112be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80112c2:	bf04      	itt	eq
 80112c4:	0080      	lsleq	r0, r0, #2
 80112c6:	3302      	addeq	r3, #2
 80112c8:	2800      	cmp	r0, #0
 80112ca:	db05      	blt.n	80112d8 <__hi0bits+0x38>
 80112cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80112d0:	f103 0301 	add.w	r3, r3, #1
 80112d4:	bf08      	it	eq
 80112d6:	2320      	moveq	r3, #32
 80112d8:	4618      	mov	r0, r3
 80112da:	4770      	bx	lr
 80112dc:	2300      	movs	r3, #0
 80112de:	e7e4      	b.n	80112aa <__hi0bits+0xa>

080112e0 <__lo0bits>:
 80112e0:	6803      	ldr	r3, [r0, #0]
 80112e2:	f013 0207 	ands.w	r2, r3, #7
 80112e6:	d00c      	beq.n	8011302 <__lo0bits+0x22>
 80112e8:	07d9      	lsls	r1, r3, #31
 80112ea:	d422      	bmi.n	8011332 <__lo0bits+0x52>
 80112ec:	079a      	lsls	r2, r3, #30
 80112ee:	bf49      	itett	mi
 80112f0:	085b      	lsrmi	r3, r3, #1
 80112f2:	089b      	lsrpl	r3, r3, #2
 80112f4:	6003      	strmi	r3, [r0, #0]
 80112f6:	2201      	movmi	r2, #1
 80112f8:	bf5c      	itt	pl
 80112fa:	6003      	strpl	r3, [r0, #0]
 80112fc:	2202      	movpl	r2, #2
 80112fe:	4610      	mov	r0, r2
 8011300:	4770      	bx	lr
 8011302:	b299      	uxth	r1, r3
 8011304:	b909      	cbnz	r1, 801130a <__lo0bits+0x2a>
 8011306:	0c1b      	lsrs	r3, r3, #16
 8011308:	2210      	movs	r2, #16
 801130a:	b2d9      	uxtb	r1, r3
 801130c:	b909      	cbnz	r1, 8011312 <__lo0bits+0x32>
 801130e:	3208      	adds	r2, #8
 8011310:	0a1b      	lsrs	r3, r3, #8
 8011312:	0719      	lsls	r1, r3, #28
 8011314:	bf04      	itt	eq
 8011316:	091b      	lsreq	r3, r3, #4
 8011318:	3204      	addeq	r2, #4
 801131a:	0799      	lsls	r1, r3, #30
 801131c:	bf04      	itt	eq
 801131e:	089b      	lsreq	r3, r3, #2
 8011320:	3202      	addeq	r2, #2
 8011322:	07d9      	lsls	r1, r3, #31
 8011324:	d403      	bmi.n	801132e <__lo0bits+0x4e>
 8011326:	085b      	lsrs	r3, r3, #1
 8011328:	f102 0201 	add.w	r2, r2, #1
 801132c:	d003      	beq.n	8011336 <__lo0bits+0x56>
 801132e:	6003      	str	r3, [r0, #0]
 8011330:	e7e5      	b.n	80112fe <__lo0bits+0x1e>
 8011332:	2200      	movs	r2, #0
 8011334:	e7e3      	b.n	80112fe <__lo0bits+0x1e>
 8011336:	2220      	movs	r2, #32
 8011338:	e7e1      	b.n	80112fe <__lo0bits+0x1e>
	...

0801133c <__i2b>:
 801133c:	b510      	push	{r4, lr}
 801133e:	460c      	mov	r4, r1
 8011340:	2101      	movs	r1, #1
 8011342:	f7ff febb 	bl	80110bc <_Balloc>
 8011346:	4602      	mov	r2, r0
 8011348:	b928      	cbnz	r0, 8011356 <__i2b+0x1a>
 801134a:	4b05      	ldr	r3, [pc, #20]	; (8011360 <__i2b+0x24>)
 801134c:	4805      	ldr	r0, [pc, #20]	; (8011364 <__i2b+0x28>)
 801134e:	f240 1145 	movw	r1, #325	; 0x145
 8011352:	f001 ffc5 	bl	80132e0 <__assert_func>
 8011356:	2301      	movs	r3, #1
 8011358:	6144      	str	r4, [r0, #20]
 801135a:	6103      	str	r3, [r0, #16]
 801135c:	bd10      	pop	{r4, pc}
 801135e:	bf00      	nop
 8011360:	080157c7 	.word	0x080157c7
 8011364:	080157d8 	.word	0x080157d8

08011368 <__multiply>:
 8011368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801136c:	4691      	mov	r9, r2
 801136e:	690a      	ldr	r2, [r1, #16]
 8011370:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011374:	429a      	cmp	r2, r3
 8011376:	bfb8      	it	lt
 8011378:	460b      	movlt	r3, r1
 801137a:	460c      	mov	r4, r1
 801137c:	bfbc      	itt	lt
 801137e:	464c      	movlt	r4, r9
 8011380:	4699      	movlt	r9, r3
 8011382:	6927      	ldr	r7, [r4, #16]
 8011384:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011388:	68a3      	ldr	r3, [r4, #8]
 801138a:	6861      	ldr	r1, [r4, #4]
 801138c:	eb07 060a 	add.w	r6, r7, sl
 8011390:	42b3      	cmp	r3, r6
 8011392:	b085      	sub	sp, #20
 8011394:	bfb8      	it	lt
 8011396:	3101      	addlt	r1, #1
 8011398:	f7ff fe90 	bl	80110bc <_Balloc>
 801139c:	b930      	cbnz	r0, 80113ac <__multiply+0x44>
 801139e:	4602      	mov	r2, r0
 80113a0:	4b44      	ldr	r3, [pc, #272]	; (80114b4 <__multiply+0x14c>)
 80113a2:	4845      	ldr	r0, [pc, #276]	; (80114b8 <__multiply+0x150>)
 80113a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80113a8:	f001 ff9a 	bl	80132e0 <__assert_func>
 80113ac:	f100 0514 	add.w	r5, r0, #20
 80113b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113b4:	462b      	mov	r3, r5
 80113b6:	2200      	movs	r2, #0
 80113b8:	4543      	cmp	r3, r8
 80113ba:	d321      	bcc.n	8011400 <__multiply+0x98>
 80113bc:	f104 0314 	add.w	r3, r4, #20
 80113c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80113c4:	f109 0314 	add.w	r3, r9, #20
 80113c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80113cc:	9202      	str	r2, [sp, #8]
 80113ce:	1b3a      	subs	r2, r7, r4
 80113d0:	3a15      	subs	r2, #21
 80113d2:	f022 0203 	bic.w	r2, r2, #3
 80113d6:	3204      	adds	r2, #4
 80113d8:	f104 0115 	add.w	r1, r4, #21
 80113dc:	428f      	cmp	r7, r1
 80113de:	bf38      	it	cc
 80113e0:	2204      	movcc	r2, #4
 80113e2:	9201      	str	r2, [sp, #4]
 80113e4:	9a02      	ldr	r2, [sp, #8]
 80113e6:	9303      	str	r3, [sp, #12]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d80c      	bhi.n	8011406 <__multiply+0x9e>
 80113ec:	2e00      	cmp	r6, #0
 80113ee:	dd03      	ble.n	80113f8 <__multiply+0x90>
 80113f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d05b      	beq.n	80114b0 <__multiply+0x148>
 80113f8:	6106      	str	r6, [r0, #16]
 80113fa:	b005      	add	sp, #20
 80113fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011400:	f843 2b04 	str.w	r2, [r3], #4
 8011404:	e7d8      	b.n	80113b8 <__multiply+0x50>
 8011406:	f8b3 a000 	ldrh.w	sl, [r3]
 801140a:	f1ba 0f00 	cmp.w	sl, #0
 801140e:	d024      	beq.n	801145a <__multiply+0xf2>
 8011410:	f104 0e14 	add.w	lr, r4, #20
 8011414:	46a9      	mov	r9, r5
 8011416:	f04f 0c00 	mov.w	ip, #0
 801141a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801141e:	f8d9 1000 	ldr.w	r1, [r9]
 8011422:	fa1f fb82 	uxth.w	fp, r2
 8011426:	b289      	uxth	r1, r1
 8011428:	fb0a 110b 	mla	r1, sl, fp, r1
 801142c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011430:	f8d9 2000 	ldr.w	r2, [r9]
 8011434:	4461      	add	r1, ip
 8011436:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801143a:	fb0a c20b 	mla	r2, sl, fp, ip
 801143e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011442:	b289      	uxth	r1, r1
 8011444:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011448:	4577      	cmp	r7, lr
 801144a:	f849 1b04 	str.w	r1, [r9], #4
 801144e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011452:	d8e2      	bhi.n	801141a <__multiply+0xb2>
 8011454:	9a01      	ldr	r2, [sp, #4]
 8011456:	f845 c002 	str.w	ip, [r5, r2]
 801145a:	9a03      	ldr	r2, [sp, #12]
 801145c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011460:	3304      	adds	r3, #4
 8011462:	f1b9 0f00 	cmp.w	r9, #0
 8011466:	d021      	beq.n	80114ac <__multiply+0x144>
 8011468:	6829      	ldr	r1, [r5, #0]
 801146a:	f104 0c14 	add.w	ip, r4, #20
 801146e:	46ae      	mov	lr, r5
 8011470:	f04f 0a00 	mov.w	sl, #0
 8011474:	f8bc b000 	ldrh.w	fp, [ip]
 8011478:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801147c:	fb09 220b 	mla	r2, r9, fp, r2
 8011480:	4452      	add	r2, sl
 8011482:	b289      	uxth	r1, r1
 8011484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011488:	f84e 1b04 	str.w	r1, [lr], #4
 801148c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011490:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011494:	f8be 1000 	ldrh.w	r1, [lr]
 8011498:	fb09 110a 	mla	r1, r9, sl, r1
 801149c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80114a0:	4567      	cmp	r7, ip
 80114a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80114a6:	d8e5      	bhi.n	8011474 <__multiply+0x10c>
 80114a8:	9a01      	ldr	r2, [sp, #4]
 80114aa:	50a9      	str	r1, [r5, r2]
 80114ac:	3504      	adds	r5, #4
 80114ae:	e799      	b.n	80113e4 <__multiply+0x7c>
 80114b0:	3e01      	subs	r6, #1
 80114b2:	e79b      	b.n	80113ec <__multiply+0x84>
 80114b4:	080157c7 	.word	0x080157c7
 80114b8:	080157d8 	.word	0x080157d8

080114bc <__pow5mult>:
 80114bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114c0:	4615      	mov	r5, r2
 80114c2:	f012 0203 	ands.w	r2, r2, #3
 80114c6:	4606      	mov	r6, r0
 80114c8:	460f      	mov	r7, r1
 80114ca:	d007      	beq.n	80114dc <__pow5mult+0x20>
 80114cc:	4c25      	ldr	r4, [pc, #148]	; (8011564 <__pow5mult+0xa8>)
 80114ce:	3a01      	subs	r2, #1
 80114d0:	2300      	movs	r3, #0
 80114d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114d6:	f7ff fe53 	bl	8011180 <__multadd>
 80114da:	4607      	mov	r7, r0
 80114dc:	10ad      	asrs	r5, r5, #2
 80114de:	d03d      	beq.n	801155c <__pow5mult+0xa0>
 80114e0:	69f4      	ldr	r4, [r6, #28]
 80114e2:	b97c      	cbnz	r4, 8011504 <__pow5mult+0x48>
 80114e4:	2010      	movs	r0, #16
 80114e6:	f7ff fd35 	bl	8010f54 <malloc>
 80114ea:	4602      	mov	r2, r0
 80114ec:	61f0      	str	r0, [r6, #28]
 80114ee:	b928      	cbnz	r0, 80114fc <__pow5mult+0x40>
 80114f0:	4b1d      	ldr	r3, [pc, #116]	; (8011568 <__pow5mult+0xac>)
 80114f2:	481e      	ldr	r0, [pc, #120]	; (801156c <__pow5mult+0xb0>)
 80114f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80114f8:	f001 fef2 	bl	80132e0 <__assert_func>
 80114fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011500:	6004      	str	r4, [r0, #0]
 8011502:	60c4      	str	r4, [r0, #12]
 8011504:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801150c:	b94c      	cbnz	r4, 8011522 <__pow5mult+0x66>
 801150e:	f240 2171 	movw	r1, #625	; 0x271
 8011512:	4630      	mov	r0, r6
 8011514:	f7ff ff12 	bl	801133c <__i2b>
 8011518:	2300      	movs	r3, #0
 801151a:	f8c8 0008 	str.w	r0, [r8, #8]
 801151e:	4604      	mov	r4, r0
 8011520:	6003      	str	r3, [r0, #0]
 8011522:	f04f 0900 	mov.w	r9, #0
 8011526:	07eb      	lsls	r3, r5, #31
 8011528:	d50a      	bpl.n	8011540 <__pow5mult+0x84>
 801152a:	4639      	mov	r1, r7
 801152c:	4622      	mov	r2, r4
 801152e:	4630      	mov	r0, r6
 8011530:	f7ff ff1a 	bl	8011368 <__multiply>
 8011534:	4639      	mov	r1, r7
 8011536:	4680      	mov	r8, r0
 8011538:	4630      	mov	r0, r6
 801153a:	f7ff fdff 	bl	801113c <_Bfree>
 801153e:	4647      	mov	r7, r8
 8011540:	106d      	asrs	r5, r5, #1
 8011542:	d00b      	beq.n	801155c <__pow5mult+0xa0>
 8011544:	6820      	ldr	r0, [r4, #0]
 8011546:	b938      	cbnz	r0, 8011558 <__pow5mult+0x9c>
 8011548:	4622      	mov	r2, r4
 801154a:	4621      	mov	r1, r4
 801154c:	4630      	mov	r0, r6
 801154e:	f7ff ff0b 	bl	8011368 <__multiply>
 8011552:	6020      	str	r0, [r4, #0]
 8011554:	f8c0 9000 	str.w	r9, [r0]
 8011558:	4604      	mov	r4, r0
 801155a:	e7e4      	b.n	8011526 <__pow5mult+0x6a>
 801155c:	4638      	mov	r0, r7
 801155e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011562:	bf00      	nop
 8011564:	08015928 	.word	0x08015928
 8011568:	08015758 	.word	0x08015758
 801156c:	080157d8 	.word	0x080157d8

08011570 <__lshift>:
 8011570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011574:	460c      	mov	r4, r1
 8011576:	6849      	ldr	r1, [r1, #4]
 8011578:	6923      	ldr	r3, [r4, #16]
 801157a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801157e:	68a3      	ldr	r3, [r4, #8]
 8011580:	4607      	mov	r7, r0
 8011582:	4691      	mov	r9, r2
 8011584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011588:	f108 0601 	add.w	r6, r8, #1
 801158c:	42b3      	cmp	r3, r6
 801158e:	db0b      	blt.n	80115a8 <__lshift+0x38>
 8011590:	4638      	mov	r0, r7
 8011592:	f7ff fd93 	bl	80110bc <_Balloc>
 8011596:	4605      	mov	r5, r0
 8011598:	b948      	cbnz	r0, 80115ae <__lshift+0x3e>
 801159a:	4602      	mov	r2, r0
 801159c:	4b28      	ldr	r3, [pc, #160]	; (8011640 <__lshift+0xd0>)
 801159e:	4829      	ldr	r0, [pc, #164]	; (8011644 <__lshift+0xd4>)
 80115a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80115a4:	f001 fe9c 	bl	80132e0 <__assert_func>
 80115a8:	3101      	adds	r1, #1
 80115aa:	005b      	lsls	r3, r3, #1
 80115ac:	e7ee      	b.n	801158c <__lshift+0x1c>
 80115ae:	2300      	movs	r3, #0
 80115b0:	f100 0114 	add.w	r1, r0, #20
 80115b4:	f100 0210 	add.w	r2, r0, #16
 80115b8:	4618      	mov	r0, r3
 80115ba:	4553      	cmp	r3, sl
 80115bc:	db33      	blt.n	8011626 <__lshift+0xb6>
 80115be:	6920      	ldr	r0, [r4, #16]
 80115c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115c4:	f104 0314 	add.w	r3, r4, #20
 80115c8:	f019 091f 	ands.w	r9, r9, #31
 80115cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115d4:	d02b      	beq.n	801162e <__lshift+0xbe>
 80115d6:	f1c9 0e20 	rsb	lr, r9, #32
 80115da:	468a      	mov	sl, r1
 80115dc:	2200      	movs	r2, #0
 80115de:	6818      	ldr	r0, [r3, #0]
 80115e0:	fa00 f009 	lsl.w	r0, r0, r9
 80115e4:	4310      	orrs	r0, r2
 80115e6:	f84a 0b04 	str.w	r0, [sl], #4
 80115ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ee:	459c      	cmp	ip, r3
 80115f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80115f4:	d8f3      	bhi.n	80115de <__lshift+0x6e>
 80115f6:	ebac 0304 	sub.w	r3, ip, r4
 80115fa:	3b15      	subs	r3, #21
 80115fc:	f023 0303 	bic.w	r3, r3, #3
 8011600:	3304      	adds	r3, #4
 8011602:	f104 0015 	add.w	r0, r4, #21
 8011606:	4584      	cmp	ip, r0
 8011608:	bf38      	it	cc
 801160a:	2304      	movcc	r3, #4
 801160c:	50ca      	str	r2, [r1, r3]
 801160e:	b10a      	cbz	r2, 8011614 <__lshift+0xa4>
 8011610:	f108 0602 	add.w	r6, r8, #2
 8011614:	3e01      	subs	r6, #1
 8011616:	4638      	mov	r0, r7
 8011618:	612e      	str	r6, [r5, #16]
 801161a:	4621      	mov	r1, r4
 801161c:	f7ff fd8e 	bl	801113c <_Bfree>
 8011620:	4628      	mov	r0, r5
 8011622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011626:	f842 0f04 	str.w	r0, [r2, #4]!
 801162a:	3301      	adds	r3, #1
 801162c:	e7c5      	b.n	80115ba <__lshift+0x4a>
 801162e:	3904      	subs	r1, #4
 8011630:	f853 2b04 	ldr.w	r2, [r3], #4
 8011634:	f841 2f04 	str.w	r2, [r1, #4]!
 8011638:	459c      	cmp	ip, r3
 801163a:	d8f9      	bhi.n	8011630 <__lshift+0xc0>
 801163c:	e7ea      	b.n	8011614 <__lshift+0xa4>
 801163e:	bf00      	nop
 8011640:	080157c7 	.word	0x080157c7
 8011644:	080157d8 	.word	0x080157d8

08011648 <__mcmp>:
 8011648:	b530      	push	{r4, r5, lr}
 801164a:	6902      	ldr	r2, [r0, #16]
 801164c:	690c      	ldr	r4, [r1, #16]
 801164e:	1b12      	subs	r2, r2, r4
 8011650:	d10e      	bne.n	8011670 <__mcmp+0x28>
 8011652:	f100 0314 	add.w	r3, r0, #20
 8011656:	3114      	adds	r1, #20
 8011658:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801165c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011660:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011664:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011668:	42a5      	cmp	r5, r4
 801166a:	d003      	beq.n	8011674 <__mcmp+0x2c>
 801166c:	d305      	bcc.n	801167a <__mcmp+0x32>
 801166e:	2201      	movs	r2, #1
 8011670:	4610      	mov	r0, r2
 8011672:	bd30      	pop	{r4, r5, pc}
 8011674:	4283      	cmp	r3, r0
 8011676:	d3f3      	bcc.n	8011660 <__mcmp+0x18>
 8011678:	e7fa      	b.n	8011670 <__mcmp+0x28>
 801167a:	f04f 32ff 	mov.w	r2, #4294967295
 801167e:	e7f7      	b.n	8011670 <__mcmp+0x28>

08011680 <__mdiff>:
 8011680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	460c      	mov	r4, r1
 8011686:	4606      	mov	r6, r0
 8011688:	4611      	mov	r1, r2
 801168a:	4620      	mov	r0, r4
 801168c:	4690      	mov	r8, r2
 801168e:	f7ff ffdb 	bl	8011648 <__mcmp>
 8011692:	1e05      	subs	r5, r0, #0
 8011694:	d110      	bne.n	80116b8 <__mdiff+0x38>
 8011696:	4629      	mov	r1, r5
 8011698:	4630      	mov	r0, r6
 801169a:	f7ff fd0f 	bl	80110bc <_Balloc>
 801169e:	b930      	cbnz	r0, 80116ae <__mdiff+0x2e>
 80116a0:	4b3a      	ldr	r3, [pc, #232]	; (801178c <__mdiff+0x10c>)
 80116a2:	4602      	mov	r2, r0
 80116a4:	f240 2137 	movw	r1, #567	; 0x237
 80116a8:	4839      	ldr	r0, [pc, #228]	; (8011790 <__mdiff+0x110>)
 80116aa:	f001 fe19 	bl	80132e0 <__assert_func>
 80116ae:	2301      	movs	r3, #1
 80116b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b8:	bfa4      	itt	ge
 80116ba:	4643      	movge	r3, r8
 80116bc:	46a0      	movge	r8, r4
 80116be:	4630      	mov	r0, r6
 80116c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80116c4:	bfa6      	itte	ge
 80116c6:	461c      	movge	r4, r3
 80116c8:	2500      	movge	r5, #0
 80116ca:	2501      	movlt	r5, #1
 80116cc:	f7ff fcf6 	bl	80110bc <_Balloc>
 80116d0:	b920      	cbnz	r0, 80116dc <__mdiff+0x5c>
 80116d2:	4b2e      	ldr	r3, [pc, #184]	; (801178c <__mdiff+0x10c>)
 80116d4:	4602      	mov	r2, r0
 80116d6:	f240 2145 	movw	r1, #581	; 0x245
 80116da:	e7e5      	b.n	80116a8 <__mdiff+0x28>
 80116dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80116e0:	6926      	ldr	r6, [r4, #16]
 80116e2:	60c5      	str	r5, [r0, #12]
 80116e4:	f104 0914 	add.w	r9, r4, #20
 80116e8:	f108 0514 	add.w	r5, r8, #20
 80116ec:	f100 0e14 	add.w	lr, r0, #20
 80116f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80116f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80116f8:	f108 0210 	add.w	r2, r8, #16
 80116fc:	46f2      	mov	sl, lr
 80116fe:	2100      	movs	r1, #0
 8011700:	f859 3b04 	ldr.w	r3, [r9], #4
 8011704:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011708:	fa11 f88b 	uxtah	r8, r1, fp
 801170c:	b299      	uxth	r1, r3
 801170e:	0c1b      	lsrs	r3, r3, #16
 8011710:	eba8 0801 	sub.w	r8, r8, r1
 8011714:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011718:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801171c:	fa1f f888 	uxth.w	r8, r8
 8011720:	1419      	asrs	r1, r3, #16
 8011722:	454e      	cmp	r6, r9
 8011724:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011728:	f84a 3b04 	str.w	r3, [sl], #4
 801172c:	d8e8      	bhi.n	8011700 <__mdiff+0x80>
 801172e:	1b33      	subs	r3, r6, r4
 8011730:	3b15      	subs	r3, #21
 8011732:	f023 0303 	bic.w	r3, r3, #3
 8011736:	3304      	adds	r3, #4
 8011738:	3415      	adds	r4, #21
 801173a:	42a6      	cmp	r6, r4
 801173c:	bf38      	it	cc
 801173e:	2304      	movcc	r3, #4
 8011740:	441d      	add	r5, r3
 8011742:	4473      	add	r3, lr
 8011744:	469e      	mov	lr, r3
 8011746:	462e      	mov	r6, r5
 8011748:	4566      	cmp	r6, ip
 801174a:	d30e      	bcc.n	801176a <__mdiff+0xea>
 801174c:	f10c 0203 	add.w	r2, ip, #3
 8011750:	1b52      	subs	r2, r2, r5
 8011752:	f022 0203 	bic.w	r2, r2, #3
 8011756:	3d03      	subs	r5, #3
 8011758:	45ac      	cmp	ip, r5
 801175a:	bf38      	it	cc
 801175c:	2200      	movcc	r2, #0
 801175e:	4413      	add	r3, r2
 8011760:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011764:	b17a      	cbz	r2, 8011786 <__mdiff+0x106>
 8011766:	6107      	str	r7, [r0, #16]
 8011768:	e7a4      	b.n	80116b4 <__mdiff+0x34>
 801176a:	f856 8b04 	ldr.w	r8, [r6], #4
 801176e:	fa11 f288 	uxtah	r2, r1, r8
 8011772:	1414      	asrs	r4, r2, #16
 8011774:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011778:	b292      	uxth	r2, r2
 801177a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801177e:	f84e 2b04 	str.w	r2, [lr], #4
 8011782:	1421      	asrs	r1, r4, #16
 8011784:	e7e0      	b.n	8011748 <__mdiff+0xc8>
 8011786:	3f01      	subs	r7, #1
 8011788:	e7ea      	b.n	8011760 <__mdiff+0xe0>
 801178a:	bf00      	nop
 801178c:	080157c7 	.word	0x080157c7
 8011790:	080157d8 	.word	0x080157d8

08011794 <__ulp>:
 8011794:	b082      	sub	sp, #8
 8011796:	ed8d 0b00 	vstr	d0, [sp]
 801179a:	9a01      	ldr	r2, [sp, #4]
 801179c:	4b0f      	ldr	r3, [pc, #60]	; (80117dc <__ulp+0x48>)
 801179e:	4013      	ands	r3, r2
 80117a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	dc08      	bgt.n	80117ba <__ulp+0x26>
 80117a8:	425b      	negs	r3, r3
 80117aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80117ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80117b2:	da04      	bge.n	80117be <__ulp+0x2a>
 80117b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117b8:	4113      	asrs	r3, r2
 80117ba:	2200      	movs	r2, #0
 80117bc:	e008      	b.n	80117d0 <__ulp+0x3c>
 80117be:	f1a2 0314 	sub.w	r3, r2, #20
 80117c2:	2b1e      	cmp	r3, #30
 80117c4:	bfda      	itte	le
 80117c6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80117ca:	40da      	lsrle	r2, r3
 80117cc:	2201      	movgt	r2, #1
 80117ce:	2300      	movs	r3, #0
 80117d0:	4619      	mov	r1, r3
 80117d2:	4610      	mov	r0, r2
 80117d4:	ec41 0b10 	vmov	d0, r0, r1
 80117d8:	b002      	add	sp, #8
 80117da:	4770      	bx	lr
 80117dc:	7ff00000 	.word	0x7ff00000

080117e0 <__b2d>:
 80117e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e4:	6906      	ldr	r6, [r0, #16]
 80117e6:	f100 0814 	add.w	r8, r0, #20
 80117ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80117ee:	1f37      	subs	r7, r6, #4
 80117f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80117f4:	4610      	mov	r0, r2
 80117f6:	f7ff fd53 	bl	80112a0 <__hi0bits>
 80117fa:	f1c0 0320 	rsb	r3, r0, #32
 80117fe:	280a      	cmp	r0, #10
 8011800:	600b      	str	r3, [r1, #0]
 8011802:	491b      	ldr	r1, [pc, #108]	; (8011870 <__b2d+0x90>)
 8011804:	dc15      	bgt.n	8011832 <__b2d+0x52>
 8011806:	f1c0 0c0b 	rsb	ip, r0, #11
 801180a:	fa22 f30c 	lsr.w	r3, r2, ip
 801180e:	45b8      	cmp	r8, r7
 8011810:	ea43 0501 	orr.w	r5, r3, r1
 8011814:	bf34      	ite	cc
 8011816:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801181a:	2300      	movcs	r3, #0
 801181c:	3015      	adds	r0, #21
 801181e:	fa02 f000 	lsl.w	r0, r2, r0
 8011822:	fa23 f30c 	lsr.w	r3, r3, ip
 8011826:	4303      	orrs	r3, r0
 8011828:	461c      	mov	r4, r3
 801182a:	ec45 4b10 	vmov	d0, r4, r5
 801182e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011832:	45b8      	cmp	r8, r7
 8011834:	bf3a      	itte	cc
 8011836:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801183a:	f1a6 0708 	subcc.w	r7, r6, #8
 801183e:	2300      	movcs	r3, #0
 8011840:	380b      	subs	r0, #11
 8011842:	d012      	beq.n	801186a <__b2d+0x8a>
 8011844:	f1c0 0120 	rsb	r1, r0, #32
 8011848:	fa23 f401 	lsr.w	r4, r3, r1
 801184c:	4082      	lsls	r2, r0
 801184e:	4322      	orrs	r2, r4
 8011850:	4547      	cmp	r7, r8
 8011852:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011856:	bf8c      	ite	hi
 8011858:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801185c:	2200      	movls	r2, #0
 801185e:	4083      	lsls	r3, r0
 8011860:	40ca      	lsrs	r2, r1
 8011862:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011866:	4313      	orrs	r3, r2
 8011868:	e7de      	b.n	8011828 <__b2d+0x48>
 801186a:	ea42 0501 	orr.w	r5, r2, r1
 801186e:	e7db      	b.n	8011828 <__b2d+0x48>
 8011870:	3ff00000 	.word	0x3ff00000

08011874 <__d2b>:
 8011874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011878:	460f      	mov	r7, r1
 801187a:	2101      	movs	r1, #1
 801187c:	ec59 8b10 	vmov	r8, r9, d0
 8011880:	4616      	mov	r6, r2
 8011882:	f7ff fc1b 	bl	80110bc <_Balloc>
 8011886:	4604      	mov	r4, r0
 8011888:	b930      	cbnz	r0, 8011898 <__d2b+0x24>
 801188a:	4602      	mov	r2, r0
 801188c:	4b24      	ldr	r3, [pc, #144]	; (8011920 <__d2b+0xac>)
 801188e:	4825      	ldr	r0, [pc, #148]	; (8011924 <__d2b+0xb0>)
 8011890:	f240 310f 	movw	r1, #783	; 0x30f
 8011894:	f001 fd24 	bl	80132e0 <__assert_func>
 8011898:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801189c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118a0:	bb2d      	cbnz	r5, 80118ee <__d2b+0x7a>
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	f1b8 0300 	subs.w	r3, r8, #0
 80118a8:	d026      	beq.n	80118f8 <__d2b+0x84>
 80118aa:	4668      	mov	r0, sp
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	f7ff fd17 	bl	80112e0 <__lo0bits>
 80118b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80118b6:	b1e8      	cbz	r0, 80118f4 <__d2b+0x80>
 80118b8:	f1c0 0320 	rsb	r3, r0, #32
 80118bc:	fa02 f303 	lsl.w	r3, r2, r3
 80118c0:	430b      	orrs	r3, r1
 80118c2:	40c2      	lsrs	r2, r0
 80118c4:	6163      	str	r3, [r4, #20]
 80118c6:	9201      	str	r2, [sp, #4]
 80118c8:	9b01      	ldr	r3, [sp, #4]
 80118ca:	61a3      	str	r3, [r4, #24]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	bf14      	ite	ne
 80118d0:	2202      	movne	r2, #2
 80118d2:	2201      	moveq	r2, #1
 80118d4:	6122      	str	r2, [r4, #16]
 80118d6:	b1bd      	cbz	r5, 8011908 <__d2b+0x94>
 80118d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80118dc:	4405      	add	r5, r0
 80118de:	603d      	str	r5, [r7, #0]
 80118e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80118e4:	6030      	str	r0, [r6, #0]
 80118e6:	4620      	mov	r0, r4
 80118e8:	b003      	add	sp, #12
 80118ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118f2:	e7d6      	b.n	80118a2 <__d2b+0x2e>
 80118f4:	6161      	str	r1, [r4, #20]
 80118f6:	e7e7      	b.n	80118c8 <__d2b+0x54>
 80118f8:	a801      	add	r0, sp, #4
 80118fa:	f7ff fcf1 	bl	80112e0 <__lo0bits>
 80118fe:	9b01      	ldr	r3, [sp, #4]
 8011900:	6163      	str	r3, [r4, #20]
 8011902:	3020      	adds	r0, #32
 8011904:	2201      	movs	r2, #1
 8011906:	e7e5      	b.n	80118d4 <__d2b+0x60>
 8011908:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801190c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011910:	6038      	str	r0, [r7, #0]
 8011912:	6918      	ldr	r0, [r3, #16]
 8011914:	f7ff fcc4 	bl	80112a0 <__hi0bits>
 8011918:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801191c:	e7e2      	b.n	80118e4 <__d2b+0x70>
 801191e:	bf00      	nop
 8011920:	080157c7 	.word	0x080157c7
 8011924:	080157d8 	.word	0x080157d8

08011928 <__ratio>:
 8011928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192c:	4688      	mov	r8, r1
 801192e:	4669      	mov	r1, sp
 8011930:	4681      	mov	r9, r0
 8011932:	f7ff ff55 	bl	80117e0 <__b2d>
 8011936:	a901      	add	r1, sp, #4
 8011938:	4640      	mov	r0, r8
 801193a:	ec55 4b10 	vmov	r4, r5, d0
 801193e:	f7ff ff4f 	bl	80117e0 <__b2d>
 8011942:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011946:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801194a:	eba3 0c02 	sub.w	ip, r3, r2
 801194e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011952:	1a9b      	subs	r3, r3, r2
 8011954:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011958:	ec51 0b10 	vmov	r0, r1, d0
 801195c:	2b00      	cmp	r3, #0
 801195e:	bfd6      	itet	le
 8011960:	460a      	movle	r2, r1
 8011962:	462a      	movgt	r2, r5
 8011964:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011968:	468b      	mov	fp, r1
 801196a:	462f      	mov	r7, r5
 801196c:	bfd4      	ite	le
 801196e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011972:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011976:	4620      	mov	r0, r4
 8011978:	ee10 2a10 	vmov	r2, s0
 801197c:	465b      	mov	r3, fp
 801197e:	4639      	mov	r1, r7
 8011980:	f7ee ff8c 	bl	800089c <__aeabi_ddiv>
 8011984:	ec41 0b10 	vmov	d0, r0, r1
 8011988:	b003      	add	sp, #12
 801198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801198e <__copybits>:
 801198e:	3901      	subs	r1, #1
 8011990:	b570      	push	{r4, r5, r6, lr}
 8011992:	1149      	asrs	r1, r1, #5
 8011994:	6914      	ldr	r4, [r2, #16]
 8011996:	3101      	adds	r1, #1
 8011998:	f102 0314 	add.w	r3, r2, #20
 801199c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80119a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80119a4:	1f05      	subs	r5, r0, #4
 80119a6:	42a3      	cmp	r3, r4
 80119a8:	d30c      	bcc.n	80119c4 <__copybits+0x36>
 80119aa:	1aa3      	subs	r3, r4, r2
 80119ac:	3b11      	subs	r3, #17
 80119ae:	f023 0303 	bic.w	r3, r3, #3
 80119b2:	3211      	adds	r2, #17
 80119b4:	42a2      	cmp	r2, r4
 80119b6:	bf88      	it	hi
 80119b8:	2300      	movhi	r3, #0
 80119ba:	4418      	add	r0, r3
 80119bc:	2300      	movs	r3, #0
 80119be:	4288      	cmp	r0, r1
 80119c0:	d305      	bcc.n	80119ce <__copybits+0x40>
 80119c2:	bd70      	pop	{r4, r5, r6, pc}
 80119c4:	f853 6b04 	ldr.w	r6, [r3], #4
 80119c8:	f845 6f04 	str.w	r6, [r5, #4]!
 80119cc:	e7eb      	b.n	80119a6 <__copybits+0x18>
 80119ce:	f840 3b04 	str.w	r3, [r0], #4
 80119d2:	e7f4      	b.n	80119be <__copybits+0x30>

080119d4 <__any_on>:
 80119d4:	f100 0214 	add.w	r2, r0, #20
 80119d8:	6900      	ldr	r0, [r0, #16]
 80119da:	114b      	asrs	r3, r1, #5
 80119dc:	4298      	cmp	r0, r3
 80119de:	b510      	push	{r4, lr}
 80119e0:	db11      	blt.n	8011a06 <__any_on+0x32>
 80119e2:	dd0a      	ble.n	80119fa <__any_on+0x26>
 80119e4:	f011 011f 	ands.w	r1, r1, #31
 80119e8:	d007      	beq.n	80119fa <__any_on+0x26>
 80119ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80119ee:	fa24 f001 	lsr.w	r0, r4, r1
 80119f2:	fa00 f101 	lsl.w	r1, r0, r1
 80119f6:	428c      	cmp	r4, r1
 80119f8:	d10b      	bne.n	8011a12 <__any_on+0x3e>
 80119fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d803      	bhi.n	8011a0a <__any_on+0x36>
 8011a02:	2000      	movs	r0, #0
 8011a04:	bd10      	pop	{r4, pc}
 8011a06:	4603      	mov	r3, r0
 8011a08:	e7f7      	b.n	80119fa <__any_on+0x26>
 8011a0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a0e:	2900      	cmp	r1, #0
 8011a10:	d0f5      	beq.n	80119fe <__any_on+0x2a>
 8011a12:	2001      	movs	r0, #1
 8011a14:	e7f6      	b.n	8011a04 <__any_on+0x30>

08011a16 <sulp>:
 8011a16:	b570      	push	{r4, r5, r6, lr}
 8011a18:	4604      	mov	r4, r0
 8011a1a:	460d      	mov	r5, r1
 8011a1c:	ec45 4b10 	vmov	d0, r4, r5
 8011a20:	4616      	mov	r6, r2
 8011a22:	f7ff feb7 	bl	8011794 <__ulp>
 8011a26:	ec51 0b10 	vmov	r0, r1, d0
 8011a2a:	b17e      	cbz	r6, 8011a4c <sulp+0x36>
 8011a2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011a30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	dd09      	ble.n	8011a4c <sulp+0x36>
 8011a38:	051b      	lsls	r3, r3, #20
 8011a3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011a3e:	2400      	movs	r4, #0
 8011a40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011a44:	4622      	mov	r2, r4
 8011a46:	462b      	mov	r3, r5
 8011a48:	f7ee fdfe 	bl	8000648 <__aeabi_dmul>
 8011a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011a50 <_strtod_l>:
 8011a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a54:	ed2d 8b02 	vpush	{d8}
 8011a58:	b09b      	sub	sp, #108	; 0x6c
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	9213      	str	r2, [sp, #76]	; 0x4c
 8011a5e:	2200      	movs	r2, #0
 8011a60:	9216      	str	r2, [sp, #88]	; 0x58
 8011a62:	460d      	mov	r5, r1
 8011a64:	f04f 0800 	mov.w	r8, #0
 8011a68:	f04f 0900 	mov.w	r9, #0
 8011a6c:	460a      	mov	r2, r1
 8011a6e:	9215      	str	r2, [sp, #84]	; 0x54
 8011a70:	7811      	ldrb	r1, [r2, #0]
 8011a72:	292b      	cmp	r1, #43	; 0x2b
 8011a74:	d04c      	beq.n	8011b10 <_strtod_l+0xc0>
 8011a76:	d83a      	bhi.n	8011aee <_strtod_l+0x9e>
 8011a78:	290d      	cmp	r1, #13
 8011a7a:	d834      	bhi.n	8011ae6 <_strtod_l+0x96>
 8011a7c:	2908      	cmp	r1, #8
 8011a7e:	d834      	bhi.n	8011aea <_strtod_l+0x9a>
 8011a80:	2900      	cmp	r1, #0
 8011a82:	d03d      	beq.n	8011b00 <_strtod_l+0xb0>
 8011a84:	2200      	movs	r2, #0
 8011a86:	920a      	str	r2, [sp, #40]	; 0x28
 8011a88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011a8a:	7832      	ldrb	r2, [r6, #0]
 8011a8c:	2a30      	cmp	r2, #48	; 0x30
 8011a8e:	f040 80b4 	bne.w	8011bfa <_strtod_l+0x1aa>
 8011a92:	7872      	ldrb	r2, [r6, #1]
 8011a94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011a98:	2a58      	cmp	r2, #88	; 0x58
 8011a9a:	d170      	bne.n	8011b7e <_strtod_l+0x12e>
 8011a9c:	9302      	str	r3, [sp, #8]
 8011a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aa0:	9301      	str	r3, [sp, #4]
 8011aa2:	ab16      	add	r3, sp, #88	; 0x58
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	4a8e      	ldr	r2, [pc, #568]	; (8011ce0 <_strtod_l+0x290>)
 8011aa8:	ab17      	add	r3, sp, #92	; 0x5c
 8011aaa:	a915      	add	r1, sp, #84	; 0x54
 8011aac:	4620      	mov	r0, r4
 8011aae:	f001 fcb3 	bl	8013418 <__gethex>
 8011ab2:	f010 070f 	ands.w	r7, r0, #15
 8011ab6:	4605      	mov	r5, r0
 8011ab8:	d005      	beq.n	8011ac6 <_strtod_l+0x76>
 8011aba:	2f06      	cmp	r7, #6
 8011abc:	d12a      	bne.n	8011b14 <_strtod_l+0xc4>
 8011abe:	3601      	adds	r6, #1
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	9615      	str	r6, [sp, #84]	; 0x54
 8011ac4:	930a      	str	r3, [sp, #40]	; 0x28
 8011ac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f040 857f 	bne.w	80125cc <_strtod_l+0xb7c>
 8011ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ad0:	b1db      	cbz	r3, 8011b0a <_strtod_l+0xba>
 8011ad2:	4642      	mov	r2, r8
 8011ad4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011ad8:	ec43 2b10 	vmov	d0, r2, r3
 8011adc:	b01b      	add	sp, #108	; 0x6c
 8011ade:	ecbd 8b02 	vpop	{d8}
 8011ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae6:	2920      	cmp	r1, #32
 8011ae8:	d1cc      	bne.n	8011a84 <_strtod_l+0x34>
 8011aea:	3201      	adds	r2, #1
 8011aec:	e7bf      	b.n	8011a6e <_strtod_l+0x1e>
 8011aee:	292d      	cmp	r1, #45	; 0x2d
 8011af0:	d1c8      	bne.n	8011a84 <_strtod_l+0x34>
 8011af2:	2101      	movs	r1, #1
 8011af4:	910a      	str	r1, [sp, #40]	; 0x28
 8011af6:	1c51      	adds	r1, r2, #1
 8011af8:	9115      	str	r1, [sp, #84]	; 0x54
 8011afa:	7852      	ldrb	r2, [r2, #1]
 8011afc:	2a00      	cmp	r2, #0
 8011afe:	d1c3      	bne.n	8011a88 <_strtod_l+0x38>
 8011b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011b02:	9515      	str	r5, [sp, #84]	; 0x54
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f040 855f 	bne.w	80125c8 <_strtod_l+0xb78>
 8011b0a:	4642      	mov	r2, r8
 8011b0c:	464b      	mov	r3, r9
 8011b0e:	e7e3      	b.n	8011ad8 <_strtod_l+0x88>
 8011b10:	2100      	movs	r1, #0
 8011b12:	e7ef      	b.n	8011af4 <_strtod_l+0xa4>
 8011b14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b16:	b13a      	cbz	r2, 8011b28 <_strtod_l+0xd8>
 8011b18:	2135      	movs	r1, #53	; 0x35
 8011b1a:	a818      	add	r0, sp, #96	; 0x60
 8011b1c:	f7ff ff37 	bl	801198e <__copybits>
 8011b20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011b22:	4620      	mov	r0, r4
 8011b24:	f7ff fb0a 	bl	801113c <_Bfree>
 8011b28:	3f01      	subs	r7, #1
 8011b2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b2c:	2f04      	cmp	r7, #4
 8011b2e:	d806      	bhi.n	8011b3e <_strtod_l+0xee>
 8011b30:	e8df f007 	tbb	[pc, r7]
 8011b34:	201d0314 	.word	0x201d0314
 8011b38:	14          	.byte	0x14
 8011b39:	00          	.byte	0x00
 8011b3a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011b3e:	05e9      	lsls	r1, r5, #23
 8011b40:	bf48      	it	mi
 8011b42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011b4a:	0d1b      	lsrs	r3, r3, #20
 8011b4c:	051b      	lsls	r3, r3, #20
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d1b9      	bne.n	8011ac6 <_strtod_l+0x76>
 8011b52:	f7fe faf7 	bl	8010144 <__errno>
 8011b56:	2322      	movs	r3, #34	; 0x22
 8011b58:	6003      	str	r3, [r0, #0]
 8011b5a:	e7b4      	b.n	8011ac6 <_strtod_l+0x76>
 8011b5c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011b60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011b64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011b68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011b6c:	e7e7      	b.n	8011b3e <_strtod_l+0xee>
 8011b6e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011ce8 <_strtod_l+0x298>
 8011b72:	e7e4      	b.n	8011b3e <_strtod_l+0xee>
 8011b74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011b78:	f04f 38ff 	mov.w	r8, #4294967295
 8011b7c:	e7df      	b.n	8011b3e <_strtod_l+0xee>
 8011b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b80:	1c5a      	adds	r2, r3, #1
 8011b82:	9215      	str	r2, [sp, #84]	; 0x54
 8011b84:	785b      	ldrb	r3, [r3, #1]
 8011b86:	2b30      	cmp	r3, #48	; 0x30
 8011b88:	d0f9      	beq.n	8011b7e <_strtod_l+0x12e>
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d09b      	beq.n	8011ac6 <_strtod_l+0x76>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	f04f 0a00 	mov.w	sl, #0
 8011b94:	9304      	str	r3, [sp, #16]
 8011b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011b9e:	46d3      	mov	fp, sl
 8011ba0:	220a      	movs	r2, #10
 8011ba2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011ba4:	7806      	ldrb	r6, [r0, #0]
 8011ba6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011baa:	b2d9      	uxtb	r1, r3
 8011bac:	2909      	cmp	r1, #9
 8011bae:	d926      	bls.n	8011bfe <_strtod_l+0x1ae>
 8011bb0:	494c      	ldr	r1, [pc, #304]	; (8011ce4 <_strtod_l+0x294>)
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	f7fe fa13 	bl	800ffde <strncmp>
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d030      	beq.n	8011c1e <_strtod_l+0x1ce>
 8011bbc:	2000      	movs	r0, #0
 8011bbe:	4632      	mov	r2, r6
 8011bc0:	9005      	str	r0, [sp, #20]
 8011bc2:	465e      	mov	r6, fp
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	2a65      	cmp	r2, #101	; 0x65
 8011bc8:	d001      	beq.n	8011bce <_strtod_l+0x17e>
 8011bca:	2a45      	cmp	r2, #69	; 0x45
 8011bcc:	d113      	bne.n	8011bf6 <_strtod_l+0x1a6>
 8011bce:	b91e      	cbnz	r6, 8011bd8 <_strtod_l+0x188>
 8011bd0:	9a04      	ldr	r2, [sp, #16]
 8011bd2:	4302      	orrs	r2, r0
 8011bd4:	d094      	beq.n	8011b00 <_strtod_l+0xb0>
 8011bd6:	2600      	movs	r6, #0
 8011bd8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011bda:	1c6a      	adds	r2, r5, #1
 8011bdc:	9215      	str	r2, [sp, #84]	; 0x54
 8011bde:	786a      	ldrb	r2, [r5, #1]
 8011be0:	2a2b      	cmp	r2, #43	; 0x2b
 8011be2:	d074      	beq.n	8011cce <_strtod_l+0x27e>
 8011be4:	2a2d      	cmp	r2, #45	; 0x2d
 8011be6:	d078      	beq.n	8011cda <_strtod_l+0x28a>
 8011be8:	f04f 0c00 	mov.w	ip, #0
 8011bec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011bf0:	2909      	cmp	r1, #9
 8011bf2:	d97f      	bls.n	8011cf4 <_strtod_l+0x2a4>
 8011bf4:	9515      	str	r5, [sp, #84]	; 0x54
 8011bf6:	2700      	movs	r7, #0
 8011bf8:	e09e      	b.n	8011d38 <_strtod_l+0x2e8>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	e7c8      	b.n	8011b90 <_strtod_l+0x140>
 8011bfe:	f1bb 0f08 	cmp.w	fp, #8
 8011c02:	bfd8      	it	le
 8011c04:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011c06:	f100 0001 	add.w	r0, r0, #1
 8011c0a:	bfda      	itte	le
 8011c0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011c10:	9309      	strle	r3, [sp, #36]	; 0x24
 8011c12:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011c16:	f10b 0b01 	add.w	fp, fp, #1
 8011c1a:	9015      	str	r0, [sp, #84]	; 0x54
 8011c1c:	e7c1      	b.n	8011ba2 <_strtod_l+0x152>
 8011c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c20:	1c5a      	adds	r2, r3, #1
 8011c22:	9215      	str	r2, [sp, #84]	; 0x54
 8011c24:	785a      	ldrb	r2, [r3, #1]
 8011c26:	f1bb 0f00 	cmp.w	fp, #0
 8011c2a:	d037      	beq.n	8011c9c <_strtod_l+0x24c>
 8011c2c:	9005      	str	r0, [sp, #20]
 8011c2e:	465e      	mov	r6, fp
 8011c30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011c34:	2b09      	cmp	r3, #9
 8011c36:	d912      	bls.n	8011c5e <_strtod_l+0x20e>
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e7c4      	b.n	8011bc6 <_strtod_l+0x176>
 8011c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c3e:	1c5a      	adds	r2, r3, #1
 8011c40:	9215      	str	r2, [sp, #84]	; 0x54
 8011c42:	785a      	ldrb	r2, [r3, #1]
 8011c44:	3001      	adds	r0, #1
 8011c46:	2a30      	cmp	r2, #48	; 0x30
 8011c48:	d0f8      	beq.n	8011c3c <_strtod_l+0x1ec>
 8011c4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011c4e:	2b08      	cmp	r3, #8
 8011c50:	f200 84c1 	bhi.w	80125d6 <_strtod_l+0xb86>
 8011c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c56:	9005      	str	r0, [sp, #20]
 8011c58:	2000      	movs	r0, #0
 8011c5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c5c:	4606      	mov	r6, r0
 8011c5e:	3a30      	subs	r2, #48	; 0x30
 8011c60:	f100 0301 	add.w	r3, r0, #1
 8011c64:	d014      	beq.n	8011c90 <_strtod_l+0x240>
 8011c66:	9905      	ldr	r1, [sp, #20]
 8011c68:	4419      	add	r1, r3
 8011c6a:	9105      	str	r1, [sp, #20]
 8011c6c:	4633      	mov	r3, r6
 8011c6e:	eb00 0c06 	add.w	ip, r0, r6
 8011c72:	210a      	movs	r1, #10
 8011c74:	4563      	cmp	r3, ip
 8011c76:	d113      	bne.n	8011ca0 <_strtod_l+0x250>
 8011c78:	1833      	adds	r3, r6, r0
 8011c7a:	2b08      	cmp	r3, #8
 8011c7c:	f106 0601 	add.w	r6, r6, #1
 8011c80:	4406      	add	r6, r0
 8011c82:	dc1a      	bgt.n	8011cba <_strtod_l+0x26a>
 8011c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c86:	230a      	movs	r3, #10
 8011c88:	fb03 2301 	mla	r3, r3, r1, r2
 8011c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011c8e:	2300      	movs	r3, #0
 8011c90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011c92:	1c51      	adds	r1, r2, #1
 8011c94:	9115      	str	r1, [sp, #84]	; 0x54
 8011c96:	7852      	ldrb	r2, [r2, #1]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	e7c9      	b.n	8011c30 <_strtod_l+0x1e0>
 8011c9c:	4658      	mov	r0, fp
 8011c9e:	e7d2      	b.n	8011c46 <_strtod_l+0x1f6>
 8011ca0:	2b08      	cmp	r3, #8
 8011ca2:	f103 0301 	add.w	r3, r3, #1
 8011ca6:	dc03      	bgt.n	8011cb0 <_strtod_l+0x260>
 8011ca8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011caa:	434f      	muls	r7, r1
 8011cac:	9709      	str	r7, [sp, #36]	; 0x24
 8011cae:	e7e1      	b.n	8011c74 <_strtod_l+0x224>
 8011cb0:	2b10      	cmp	r3, #16
 8011cb2:	bfd8      	it	le
 8011cb4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8011cb8:	e7dc      	b.n	8011c74 <_strtod_l+0x224>
 8011cba:	2e10      	cmp	r6, #16
 8011cbc:	bfdc      	itt	le
 8011cbe:	230a      	movle	r3, #10
 8011cc0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8011cc4:	e7e3      	b.n	8011c8e <_strtod_l+0x23e>
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	9305      	str	r3, [sp, #20]
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e780      	b.n	8011bd0 <_strtod_l+0x180>
 8011cce:	f04f 0c00 	mov.w	ip, #0
 8011cd2:	1caa      	adds	r2, r5, #2
 8011cd4:	9215      	str	r2, [sp, #84]	; 0x54
 8011cd6:	78aa      	ldrb	r2, [r5, #2]
 8011cd8:	e788      	b.n	8011bec <_strtod_l+0x19c>
 8011cda:	f04f 0c01 	mov.w	ip, #1
 8011cde:	e7f8      	b.n	8011cd2 <_strtod_l+0x282>
 8011ce0:	08015938 	.word	0x08015938
 8011ce4:	08015934 	.word	0x08015934
 8011ce8:	7ff00000 	.word	0x7ff00000
 8011cec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011cee:	1c51      	adds	r1, r2, #1
 8011cf0:	9115      	str	r1, [sp, #84]	; 0x54
 8011cf2:	7852      	ldrb	r2, [r2, #1]
 8011cf4:	2a30      	cmp	r2, #48	; 0x30
 8011cf6:	d0f9      	beq.n	8011cec <_strtod_l+0x29c>
 8011cf8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011cfc:	2908      	cmp	r1, #8
 8011cfe:	f63f af7a 	bhi.w	8011bf6 <_strtod_l+0x1a6>
 8011d02:	3a30      	subs	r2, #48	; 0x30
 8011d04:	9208      	str	r2, [sp, #32]
 8011d06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011d08:	920c      	str	r2, [sp, #48]	; 0x30
 8011d0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011d0c:	1c57      	adds	r7, r2, #1
 8011d0e:	9715      	str	r7, [sp, #84]	; 0x54
 8011d10:	7852      	ldrb	r2, [r2, #1]
 8011d12:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011d16:	f1be 0f09 	cmp.w	lr, #9
 8011d1a:	d938      	bls.n	8011d8e <_strtod_l+0x33e>
 8011d1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d1e:	1a7f      	subs	r7, r7, r1
 8011d20:	2f08      	cmp	r7, #8
 8011d22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011d26:	dc03      	bgt.n	8011d30 <_strtod_l+0x2e0>
 8011d28:	9908      	ldr	r1, [sp, #32]
 8011d2a:	428f      	cmp	r7, r1
 8011d2c:	bfa8      	it	ge
 8011d2e:	460f      	movge	r7, r1
 8011d30:	f1bc 0f00 	cmp.w	ip, #0
 8011d34:	d000      	beq.n	8011d38 <_strtod_l+0x2e8>
 8011d36:	427f      	negs	r7, r7
 8011d38:	2e00      	cmp	r6, #0
 8011d3a:	d14f      	bne.n	8011ddc <_strtod_l+0x38c>
 8011d3c:	9904      	ldr	r1, [sp, #16]
 8011d3e:	4301      	orrs	r1, r0
 8011d40:	f47f aec1 	bne.w	8011ac6 <_strtod_l+0x76>
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	f47f aedb 	bne.w	8011b00 <_strtod_l+0xb0>
 8011d4a:	2a69      	cmp	r2, #105	; 0x69
 8011d4c:	d029      	beq.n	8011da2 <_strtod_l+0x352>
 8011d4e:	dc26      	bgt.n	8011d9e <_strtod_l+0x34e>
 8011d50:	2a49      	cmp	r2, #73	; 0x49
 8011d52:	d026      	beq.n	8011da2 <_strtod_l+0x352>
 8011d54:	2a4e      	cmp	r2, #78	; 0x4e
 8011d56:	f47f aed3 	bne.w	8011b00 <_strtod_l+0xb0>
 8011d5a:	499b      	ldr	r1, [pc, #620]	; (8011fc8 <_strtod_l+0x578>)
 8011d5c:	a815      	add	r0, sp, #84	; 0x54
 8011d5e:	f001 fd9b 	bl	8013898 <__match>
 8011d62:	2800      	cmp	r0, #0
 8011d64:	f43f aecc 	beq.w	8011b00 <_strtod_l+0xb0>
 8011d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	2b28      	cmp	r3, #40	; 0x28
 8011d6e:	d12f      	bne.n	8011dd0 <_strtod_l+0x380>
 8011d70:	4996      	ldr	r1, [pc, #600]	; (8011fcc <_strtod_l+0x57c>)
 8011d72:	aa18      	add	r2, sp, #96	; 0x60
 8011d74:	a815      	add	r0, sp, #84	; 0x54
 8011d76:	f001 fda3 	bl	80138c0 <__hexnan>
 8011d7a:	2805      	cmp	r0, #5
 8011d7c:	d128      	bne.n	8011dd0 <_strtod_l+0x380>
 8011d7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011d84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011d88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011d8c:	e69b      	b.n	8011ac6 <_strtod_l+0x76>
 8011d8e:	9f08      	ldr	r7, [sp, #32]
 8011d90:	210a      	movs	r1, #10
 8011d92:	fb01 2107 	mla	r1, r1, r7, r2
 8011d96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011d9a:	9208      	str	r2, [sp, #32]
 8011d9c:	e7b5      	b.n	8011d0a <_strtod_l+0x2ba>
 8011d9e:	2a6e      	cmp	r2, #110	; 0x6e
 8011da0:	e7d9      	b.n	8011d56 <_strtod_l+0x306>
 8011da2:	498b      	ldr	r1, [pc, #556]	; (8011fd0 <_strtod_l+0x580>)
 8011da4:	a815      	add	r0, sp, #84	; 0x54
 8011da6:	f001 fd77 	bl	8013898 <__match>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	f43f aea8 	beq.w	8011b00 <_strtod_l+0xb0>
 8011db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011db2:	4988      	ldr	r1, [pc, #544]	; (8011fd4 <_strtod_l+0x584>)
 8011db4:	3b01      	subs	r3, #1
 8011db6:	a815      	add	r0, sp, #84	; 0x54
 8011db8:	9315      	str	r3, [sp, #84]	; 0x54
 8011dba:	f001 fd6d 	bl	8013898 <__match>
 8011dbe:	b910      	cbnz	r0, 8011dc6 <_strtod_l+0x376>
 8011dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	9315      	str	r3, [sp, #84]	; 0x54
 8011dc6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8011fe4 <_strtod_l+0x594>
 8011dca:	f04f 0800 	mov.w	r8, #0
 8011dce:	e67a      	b.n	8011ac6 <_strtod_l+0x76>
 8011dd0:	4881      	ldr	r0, [pc, #516]	; (8011fd8 <_strtod_l+0x588>)
 8011dd2:	f001 fa7d 	bl	80132d0 <nan>
 8011dd6:	ec59 8b10 	vmov	r8, r9, d0
 8011dda:	e674      	b.n	8011ac6 <_strtod_l+0x76>
 8011ddc:	9b05      	ldr	r3, [sp, #20]
 8011dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011de0:	1afb      	subs	r3, r7, r3
 8011de2:	f1bb 0f00 	cmp.w	fp, #0
 8011de6:	bf08      	it	eq
 8011de8:	46b3      	moveq	fp, r6
 8011dea:	2e10      	cmp	r6, #16
 8011dec:	9308      	str	r3, [sp, #32]
 8011dee:	4635      	mov	r5, r6
 8011df0:	bfa8      	it	ge
 8011df2:	2510      	movge	r5, #16
 8011df4:	f7ee fbae 	bl	8000554 <__aeabi_ui2d>
 8011df8:	2e09      	cmp	r6, #9
 8011dfa:	4680      	mov	r8, r0
 8011dfc:	4689      	mov	r9, r1
 8011dfe:	dd13      	ble.n	8011e28 <_strtod_l+0x3d8>
 8011e00:	4b76      	ldr	r3, [pc, #472]	; (8011fdc <_strtod_l+0x58c>)
 8011e02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011e06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011e0a:	f7ee fc1d 	bl	8000648 <__aeabi_dmul>
 8011e0e:	4680      	mov	r8, r0
 8011e10:	4650      	mov	r0, sl
 8011e12:	4689      	mov	r9, r1
 8011e14:	f7ee fb9e 	bl	8000554 <__aeabi_ui2d>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	4640      	mov	r0, r8
 8011e1e:	4649      	mov	r1, r9
 8011e20:	f7ee fa5c 	bl	80002dc <__adddf3>
 8011e24:	4680      	mov	r8, r0
 8011e26:	4689      	mov	r9, r1
 8011e28:	2e0f      	cmp	r6, #15
 8011e2a:	dc38      	bgt.n	8011e9e <_strtod_l+0x44e>
 8011e2c:	9b08      	ldr	r3, [sp, #32]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f43f ae49 	beq.w	8011ac6 <_strtod_l+0x76>
 8011e34:	dd24      	ble.n	8011e80 <_strtod_l+0x430>
 8011e36:	2b16      	cmp	r3, #22
 8011e38:	dc0b      	bgt.n	8011e52 <_strtod_l+0x402>
 8011e3a:	4968      	ldr	r1, [pc, #416]	; (8011fdc <_strtod_l+0x58c>)
 8011e3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e44:	4642      	mov	r2, r8
 8011e46:	464b      	mov	r3, r9
 8011e48:	f7ee fbfe 	bl	8000648 <__aeabi_dmul>
 8011e4c:	4680      	mov	r8, r0
 8011e4e:	4689      	mov	r9, r1
 8011e50:	e639      	b.n	8011ac6 <_strtod_l+0x76>
 8011e52:	9a08      	ldr	r2, [sp, #32]
 8011e54:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	db20      	blt.n	8011e9e <_strtod_l+0x44e>
 8011e5c:	4c5f      	ldr	r4, [pc, #380]	; (8011fdc <_strtod_l+0x58c>)
 8011e5e:	f1c6 060f 	rsb	r6, r6, #15
 8011e62:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8011e66:	4642      	mov	r2, r8
 8011e68:	464b      	mov	r3, r9
 8011e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e6e:	f7ee fbeb 	bl	8000648 <__aeabi_dmul>
 8011e72:	9b08      	ldr	r3, [sp, #32]
 8011e74:	1b9e      	subs	r6, r3, r6
 8011e76:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011e7a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011e7e:	e7e3      	b.n	8011e48 <_strtod_l+0x3f8>
 8011e80:	9b08      	ldr	r3, [sp, #32]
 8011e82:	3316      	adds	r3, #22
 8011e84:	db0b      	blt.n	8011e9e <_strtod_l+0x44e>
 8011e86:	9b05      	ldr	r3, [sp, #20]
 8011e88:	1bdf      	subs	r7, r3, r7
 8011e8a:	4b54      	ldr	r3, [pc, #336]	; (8011fdc <_strtod_l+0x58c>)
 8011e8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e94:	4640      	mov	r0, r8
 8011e96:	4649      	mov	r1, r9
 8011e98:	f7ee fd00 	bl	800089c <__aeabi_ddiv>
 8011e9c:	e7d6      	b.n	8011e4c <_strtod_l+0x3fc>
 8011e9e:	9b08      	ldr	r3, [sp, #32]
 8011ea0:	1b75      	subs	r5, r6, r5
 8011ea2:	441d      	add	r5, r3
 8011ea4:	2d00      	cmp	r5, #0
 8011ea6:	dd70      	ble.n	8011f8a <_strtod_l+0x53a>
 8011ea8:	f015 030f 	ands.w	r3, r5, #15
 8011eac:	d00a      	beq.n	8011ec4 <_strtod_l+0x474>
 8011eae:	494b      	ldr	r1, [pc, #300]	; (8011fdc <_strtod_l+0x58c>)
 8011eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011eb4:	4642      	mov	r2, r8
 8011eb6:	464b      	mov	r3, r9
 8011eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ebc:	f7ee fbc4 	bl	8000648 <__aeabi_dmul>
 8011ec0:	4680      	mov	r8, r0
 8011ec2:	4689      	mov	r9, r1
 8011ec4:	f035 050f 	bics.w	r5, r5, #15
 8011ec8:	d04d      	beq.n	8011f66 <_strtod_l+0x516>
 8011eca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8011ece:	dd22      	ble.n	8011f16 <_strtod_l+0x4c6>
 8011ed0:	2500      	movs	r5, #0
 8011ed2:	46ab      	mov	fp, r5
 8011ed4:	9509      	str	r5, [sp, #36]	; 0x24
 8011ed6:	9505      	str	r5, [sp, #20]
 8011ed8:	2322      	movs	r3, #34	; 0x22
 8011eda:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011fe4 <_strtod_l+0x594>
 8011ede:	6023      	str	r3, [r4, #0]
 8011ee0:	f04f 0800 	mov.w	r8, #0
 8011ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f43f aded 	beq.w	8011ac6 <_strtod_l+0x76>
 8011eec:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f7ff f924 	bl	801113c <_Bfree>
 8011ef4:	9905      	ldr	r1, [sp, #20]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f7ff f920 	bl	801113c <_Bfree>
 8011efc:	4659      	mov	r1, fp
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7ff f91c 	bl	801113c <_Bfree>
 8011f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f06:	4620      	mov	r0, r4
 8011f08:	f7ff f918 	bl	801113c <_Bfree>
 8011f0c:	4629      	mov	r1, r5
 8011f0e:	4620      	mov	r0, r4
 8011f10:	f7ff f914 	bl	801113c <_Bfree>
 8011f14:	e5d7      	b.n	8011ac6 <_strtod_l+0x76>
 8011f16:	4b32      	ldr	r3, [pc, #200]	; (8011fe0 <_strtod_l+0x590>)
 8011f18:	9304      	str	r3, [sp, #16]
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	112d      	asrs	r5, r5, #4
 8011f1e:	4640      	mov	r0, r8
 8011f20:	4649      	mov	r1, r9
 8011f22:	469a      	mov	sl, r3
 8011f24:	2d01      	cmp	r5, #1
 8011f26:	dc21      	bgt.n	8011f6c <_strtod_l+0x51c>
 8011f28:	b10b      	cbz	r3, 8011f2e <_strtod_l+0x4de>
 8011f2a:	4680      	mov	r8, r0
 8011f2c:	4689      	mov	r9, r1
 8011f2e:	492c      	ldr	r1, [pc, #176]	; (8011fe0 <_strtod_l+0x590>)
 8011f30:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011f34:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011f38:	4642      	mov	r2, r8
 8011f3a:	464b      	mov	r3, r9
 8011f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f40:	f7ee fb82 	bl	8000648 <__aeabi_dmul>
 8011f44:	4b27      	ldr	r3, [pc, #156]	; (8011fe4 <_strtod_l+0x594>)
 8011f46:	460a      	mov	r2, r1
 8011f48:	400b      	ands	r3, r1
 8011f4a:	4927      	ldr	r1, [pc, #156]	; (8011fe8 <_strtod_l+0x598>)
 8011f4c:	428b      	cmp	r3, r1
 8011f4e:	4680      	mov	r8, r0
 8011f50:	d8be      	bhi.n	8011ed0 <_strtod_l+0x480>
 8011f52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011f56:	428b      	cmp	r3, r1
 8011f58:	bf86      	itte	hi
 8011f5a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8011fec <_strtod_l+0x59c>
 8011f5e:	f04f 38ff 	movhi.w	r8, #4294967295
 8011f62:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8011f66:	2300      	movs	r3, #0
 8011f68:	9304      	str	r3, [sp, #16]
 8011f6a:	e07b      	b.n	8012064 <_strtod_l+0x614>
 8011f6c:	07ea      	lsls	r2, r5, #31
 8011f6e:	d505      	bpl.n	8011f7c <_strtod_l+0x52c>
 8011f70:	9b04      	ldr	r3, [sp, #16]
 8011f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f76:	f7ee fb67 	bl	8000648 <__aeabi_dmul>
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	9a04      	ldr	r2, [sp, #16]
 8011f7e:	3208      	adds	r2, #8
 8011f80:	f10a 0a01 	add.w	sl, sl, #1
 8011f84:	106d      	asrs	r5, r5, #1
 8011f86:	9204      	str	r2, [sp, #16]
 8011f88:	e7cc      	b.n	8011f24 <_strtod_l+0x4d4>
 8011f8a:	d0ec      	beq.n	8011f66 <_strtod_l+0x516>
 8011f8c:	426d      	negs	r5, r5
 8011f8e:	f015 020f 	ands.w	r2, r5, #15
 8011f92:	d00a      	beq.n	8011faa <_strtod_l+0x55a>
 8011f94:	4b11      	ldr	r3, [pc, #68]	; (8011fdc <_strtod_l+0x58c>)
 8011f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	4649      	mov	r1, r9
 8011f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa2:	f7ee fc7b 	bl	800089c <__aeabi_ddiv>
 8011fa6:	4680      	mov	r8, r0
 8011fa8:	4689      	mov	r9, r1
 8011faa:	112d      	asrs	r5, r5, #4
 8011fac:	d0db      	beq.n	8011f66 <_strtod_l+0x516>
 8011fae:	2d1f      	cmp	r5, #31
 8011fb0:	dd1e      	ble.n	8011ff0 <_strtod_l+0x5a0>
 8011fb2:	2500      	movs	r5, #0
 8011fb4:	46ab      	mov	fp, r5
 8011fb6:	9509      	str	r5, [sp, #36]	; 0x24
 8011fb8:	9505      	str	r5, [sp, #20]
 8011fba:	2322      	movs	r3, #34	; 0x22
 8011fbc:	f04f 0800 	mov.w	r8, #0
 8011fc0:	f04f 0900 	mov.w	r9, #0
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	e78d      	b.n	8011ee4 <_strtod_l+0x494>
 8011fc8:	08015721 	.word	0x08015721
 8011fcc:	0801594c 	.word	0x0801594c
 8011fd0:	08015719 	.word	0x08015719
 8011fd4:	0801574e 	.word	0x0801574e
 8011fd8:	08015af8 	.word	0x08015af8
 8011fdc:	08015860 	.word	0x08015860
 8011fe0:	08015838 	.word	0x08015838
 8011fe4:	7ff00000 	.word	0x7ff00000
 8011fe8:	7ca00000 	.word	0x7ca00000
 8011fec:	7fefffff 	.word	0x7fefffff
 8011ff0:	f015 0310 	ands.w	r3, r5, #16
 8011ff4:	bf18      	it	ne
 8011ff6:	236a      	movne	r3, #106	; 0x6a
 8011ff8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801239c <_strtod_l+0x94c>
 8011ffc:	9304      	str	r3, [sp, #16]
 8011ffe:	4640      	mov	r0, r8
 8012000:	4649      	mov	r1, r9
 8012002:	2300      	movs	r3, #0
 8012004:	07ea      	lsls	r2, r5, #31
 8012006:	d504      	bpl.n	8012012 <_strtod_l+0x5c2>
 8012008:	e9da 2300 	ldrd	r2, r3, [sl]
 801200c:	f7ee fb1c 	bl	8000648 <__aeabi_dmul>
 8012010:	2301      	movs	r3, #1
 8012012:	106d      	asrs	r5, r5, #1
 8012014:	f10a 0a08 	add.w	sl, sl, #8
 8012018:	d1f4      	bne.n	8012004 <_strtod_l+0x5b4>
 801201a:	b10b      	cbz	r3, 8012020 <_strtod_l+0x5d0>
 801201c:	4680      	mov	r8, r0
 801201e:	4689      	mov	r9, r1
 8012020:	9b04      	ldr	r3, [sp, #16]
 8012022:	b1bb      	cbz	r3, 8012054 <_strtod_l+0x604>
 8012024:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012028:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801202c:	2b00      	cmp	r3, #0
 801202e:	4649      	mov	r1, r9
 8012030:	dd10      	ble.n	8012054 <_strtod_l+0x604>
 8012032:	2b1f      	cmp	r3, #31
 8012034:	f340 811e 	ble.w	8012274 <_strtod_l+0x824>
 8012038:	2b34      	cmp	r3, #52	; 0x34
 801203a:	bfde      	ittt	le
 801203c:	f04f 33ff 	movle.w	r3, #4294967295
 8012040:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012044:	4093      	lslle	r3, r2
 8012046:	f04f 0800 	mov.w	r8, #0
 801204a:	bfcc      	ite	gt
 801204c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012050:	ea03 0901 	andle.w	r9, r3, r1
 8012054:	2200      	movs	r2, #0
 8012056:	2300      	movs	r3, #0
 8012058:	4640      	mov	r0, r8
 801205a:	4649      	mov	r1, r9
 801205c:	f7ee fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 8012060:	2800      	cmp	r0, #0
 8012062:	d1a6      	bne.n	8011fb2 <_strtod_l+0x562>
 8012064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012066:	9300      	str	r3, [sp, #0]
 8012068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801206a:	4633      	mov	r3, r6
 801206c:	465a      	mov	r2, fp
 801206e:	4620      	mov	r0, r4
 8012070:	f7ff f8cc 	bl	801120c <__s2b>
 8012074:	9009      	str	r0, [sp, #36]	; 0x24
 8012076:	2800      	cmp	r0, #0
 8012078:	f43f af2a 	beq.w	8011ed0 <_strtod_l+0x480>
 801207c:	9a08      	ldr	r2, [sp, #32]
 801207e:	9b05      	ldr	r3, [sp, #20]
 8012080:	2a00      	cmp	r2, #0
 8012082:	eba3 0307 	sub.w	r3, r3, r7
 8012086:	bfa8      	it	ge
 8012088:	2300      	movge	r3, #0
 801208a:	930c      	str	r3, [sp, #48]	; 0x30
 801208c:	2500      	movs	r5, #0
 801208e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012092:	9312      	str	r3, [sp, #72]	; 0x48
 8012094:	46ab      	mov	fp, r5
 8012096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012098:	4620      	mov	r0, r4
 801209a:	6859      	ldr	r1, [r3, #4]
 801209c:	f7ff f80e 	bl	80110bc <_Balloc>
 80120a0:	9005      	str	r0, [sp, #20]
 80120a2:	2800      	cmp	r0, #0
 80120a4:	f43f af18 	beq.w	8011ed8 <_strtod_l+0x488>
 80120a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120aa:	691a      	ldr	r2, [r3, #16]
 80120ac:	3202      	adds	r2, #2
 80120ae:	f103 010c 	add.w	r1, r3, #12
 80120b2:	0092      	lsls	r2, r2, #2
 80120b4:	300c      	adds	r0, #12
 80120b6:	f7fe f872 	bl	801019e <memcpy>
 80120ba:	ec49 8b10 	vmov	d0, r8, r9
 80120be:	aa18      	add	r2, sp, #96	; 0x60
 80120c0:	a917      	add	r1, sp, #92	; 0x5c
 80120c2:	4620      	mov	r0, r4
 80120c4:	f7ff fbd6 	bl	8011874 <__d2b>
 80120c8:	ec49 8b18 	vmov	d8, r8, r9
 80120cc:	9016      	str	r0, [sp, #88]	; 0x58
 80120ce:	2800      	cmp	r0, #0
 80120d0:	f43f af02 	beq.w	8011ed8 <_strtod_l+0x488>
 80120d4:	2101      	movs	r1, #1
 80120d6:	4620      	mov	r0, r4
 80120d8:	f7ff f930 	bl	801133c <__i2b>
 80120dc:	4683      	mov	fp, r0
 80120de:	2800      	cmp	r0, #0
 80120e0:	f43f aefa 	beq.w	8011ed8 <_strtod_l+0x488>
 80120e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80120e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80120e8:	2e00      	cmp	r6, #0
 80120ea:	bfab      	itete	ge
 80120ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80120ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80120f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80120f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80120f6:	bfac      	ite	ge
 80120f8:	eb06 0a03 	addge.w	sl, r6, r3
 80120fc:	1b9f      	sublt	r7, r3, r6
 80120fe:	9b04      	ldr	r3, [sp, #16]
 8012100:	1af6      	subs	r6, r6, r3
 8012102:	4416      	add	r6, r2
 8012104:	4ba0      	ldr	r3, [pc, #640]	; (8012388 <_strtod_l+0x938>)
 8012106:	3e01      	subs	r6, #1
 8012108:	429e      	cmp	r6, r3
 801210a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801210e:	f280 80c4 	bge.w	801229a <_strtod_l+0x84a>
 8012112:	1b9b      	subs	r3, r3, r6
 8012114:	2b1f      	cmp	r3, #31
 8012116:	eba2 0203 	sub.w	r2, r2, r3
 801211a:	f04f 0101 	mov.w	r1, #1
 801211e:	f300 80b0 	bgt.w	8012282 <_strtod_l+0x832>
 8012122:	fa01 f303 	lsl.w	r3, r1, r3
 8012126:	930e      	str	r3, [sp, #56]	; 0x38
 8012128:	2300      	movs	r3, #0
 801212a:	930d      	str	r3, [sp, #52]	; 0x34
 801212c:	eb0a 0602 	add.w	r6, sl, r2
 8012130:	9b04      	ldr	r3, [sp, #16]
 8012132:	45b2      	cmp	sl, r6
 8012134:	4417      	add	r7, r2
 8012136:	441f      	add	r7, r3
 8012138:	4653      	mov	r3, sl
 801213a:	bfa8      	it	ge
 801213c:	4633      	movge	r3, r6
 801213e:	42bb      	cmp	r3, r7
 8012140:	bfa8      	it	ge
 8012142:	463b      	movge	r3, r7
 8012144:	2b00      	cmp	r3, #0
 8012146:	bfc2      	ittt	gt
 8012148:	1af6      	subgt	r6, r6, r3
 801214a:	1aff      	subgt	r7, r7, r3
 801214c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012152:	2b00      	cmp	r3, #0
 8012154:	dd17      	ble.n	8012186 <_strtod_l+0x736>
 8012156:	4659      	mov	r1, fp
 8012158:	461a      	mov	r2, r3
 801215a:	4620      	mov	r0, r4
 801215c:	f7ff f9ae 	bl	80114bc <__pow5mult>
 8012160:	4683      	mov	fp, r0
 8012162:	2800      	cmp	r0, #0
 8012164:	f43f aeb8 	beq.w	8011ed8 <_strtod_l+0x488>
 8012168:	4601      	mov	r1, r0
 801216a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801216c:	4620      	mov	r0, r4
 801216e:	f7ff f8fb 	bl	8011368 <__multiply>
 8012172:	900b      	str	r0, [sp, #44]	; 0x2c
 8012174:	2800      	cmp	r0, #0
 8012176:	f43f aeaf 	beq.w	8011ed8 <_strtod_l+0x488>
 801217a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801217c:	4620      	mov	r0, r4
 801217e:	f7fe ffdd 	bl	801113c <_Bfree>
 8012182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012184:	9316      	str	r3, [sp, #88]	; 0x58
 8012186:	2e00      	cmp	r6, #0
 8012188:	f300 808c 	bgt.w	80122a4 <_strtod_l+0x854>
 801218c:	9b08      	ldr	r3, [sp, #32]
 801218e:	2b00      	cmp	r3, #0
 8012190:	dd08      	ble.n	80121a4 <_strtod_l+0x754>
 8012192:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012194:	9905      	ldr	r1, [sp, #20]
 8012196:	4620      	mov	r0, r4
 8012198:	f7ff f990 	bl	80114bc <__pow5mult>
 801219c:	9005      	str	r0, [sp, #20]
 801219e:	2800      	cmp	r0, #0
 80121a0:	f43f ae9a 	beq.w	8011ed8 <_strtod_l+0x488>
 80121a4:	2f00      	cmp	r7, #0
 80121a6:	dd08      	ble.n	80121ba <_strtod_l+0x76a>
 80121a8:	9905      	ldr	r1, [sp, #20]
 80121aa:	463a      	mov	r2, r7
 80121ac:	4620      	mov	r0, r4
 80121ae:	f7ff f9df 	bl	8011570 <__lshift>
 80121b2:	9005      	str	r0, [sp, #20]
 80121b4:	2800      	cmp	r0, #0
 80121b6:	f43f ae8f 	beq.w	8011ed8 <_strtod_l+0x488>
 80121ba:	f1ba 0f00 	cmp.w	sl, #0
 80121be:	dd08      	ble.n	80121d2 <_strtod_l+0x782>
 80121c0:	4659      	mov	r1, fp
 80121c2:	4652      	mov	r2, sl
 80121c4:	4620      	mov	r0, r4
 80121c6:	f7ff f9d3 	bl	8011570 <__lshift>
 80121ca:	4683      	mov	fp, r0
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f43f ae83 	beq.w	8011ed8 <_strtod_l+0x488>
 80121d2:	9a05      	ldr	r2, [sp, #20]
 80121d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80121d6:	4620      	mov	r0, r4
 80121d8:	f7ff fa52 	bl	8011680 <__mdiff>
 80121dc:	4605      	mov	r5, r0
 80121de:	2800      	cmp	r0, #0
 80121e0:	f43f ae7a 	beq.w	8011ed8 <_strtod_l+0x488>
 80121e4:	68c3      	ldr	r3, [r0, #12]
 80121e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80121e8:	2300      	movs	r3, #0
 80121ea:	60c3      	str	r3, [r0, #12]
 80121ec:	4659      	mov	r1, fp
 80121ee:	f7ff fa2b 	bl	8011648 <__mcmp>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	da60      	bge.n	80122b8 <_strtod_l+0x868>
 80121f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121f8:	ea53 0308 	orrs.w	r3, r3, r8
 80121fc:	f040 8084 	bne.w	8012308 <_strtod_l+0x8b8>
 8012200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012204:	2b00      	cmp	r3, #0
 8012206:	d17f      	bne.n	8012308 <_strtod_l+0x8b8>
 8012208:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801220c:	0d1b      	lsrs	r3, r3, #20
 801220e:	051b      	lsls	r3, r3, #20
 8012210:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012214:	d978      	bls.n	8012308 <_strtod_l+0x8b8>
 8012216:	696b      	ldr	r3, [r5, #20]
 8012218:	b913      	cbnz	r3, 8012220 <_strtod_l+0x7d0>
 801221a:	692b      	ldr	r3, [r5, #16]
 801221c:	2b01      	cmp	r3, #1
 801221e:	dd73      	ble.n	8012308 <_strtod_l+0x8b8>
 8012220:	4629      	mov	r1, r5
 8012222:	2201      	movs	r2, #1
 8012224:	4620      	mov	r0, r4
 8012226:	f7ff f9a3 	bl	8011570 <__lshift>
 801222a:	4659      	mov	r1, fp
 801222c:	4605      	mov	r5, r0
 801222e:	f7ff fa0b 	bl	8011648 <__mcmp>
 8012232:	2800      	cmp	r0, #0
 8012234:	dd68      	ble.n	8012308 <_strtod_l+0x8b8>
 8012236:	9904      	ldr	r1, [sp, #16]
 8012238:	4a54      	ldr	r2, [pc, #336]	; (801238c <_strtod_l+0x93c>)
 801223a:	464b      	mov	r3, r9
 801223c:	2900      	cmp	r1, #0
 801223e:	f000 8084 	beq.w	801234a <_strtod_l+0x8fa>
 8012242:	ea02 0109 	and.w	r1, r2, r9
 8012246:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801224a:	dc7e      	bgt.n	801234a <_strtod_l+0x8fa>
 801224c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012250:	f77f aeb3 	ble.w	8011fba <_strtod_l+0x56a>
 8012254:	4b4e      	ldr	r3, [pc, #312]	; (8012390 <_strtod_l+0x940>)
 8012256:	4640      	mov	r0, r8
 8012258:	4649      	mov	r1, r9
 801225a:	2200      	movs	r2, #0
 801225c:	f7ee f9f4 	bl	8000648 <__aeabi_dmul>
 8012260:	4b4a      	ldr	r3, [pc, #296]	; (801238c <_strtod_l+0x93c>)
 8012262:	400b      	ands	r3, r1
 8012264:	4680      	mov	r8, r0
 8012266:	4689      	mov	r9, r1
 8012268:	2b00      	cmp	r3, #0
 801226a:	f47f ae3f 	bne.w	8011eec <_strtod_l+0x49c>
 801226e:	2322      	movs	r3, #34	; 0x22
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	e63b      	b.n	8011eec <_strtod_l+0x49c>
 8012274:	f04f 32ff 	mov.w	r2, #4294967295
 8012278:	fa02 f303 	lsl.w	r3, r2, r3
 801227c:	ea03 0808 	and.w	r8, r3, r8
 8012280:	e6e8      	b.n	8012054 <_strtod_l+0x604>
 8012282:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012286:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801228a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801228e:	36e2      	adds	r6, #226	; 0xe2
 8012290:	fa01 f306 	lsl.w	r3, r1, r6
 8012294:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012298:	e748      	b.n	801212c <_strtod_l+0x6dc>
 801229a:	2100      	movs	r1, #0
 801229c:	2301      	movs	r3, #1
 801229e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80122a2:	e743      	b.n	801212c <_strtod_l+0x6dc>
 80122a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80122a6:	4632      	mov	r2, r6
 80122a8:	4620      	mov	r0, r4
 80122aa:	f7ff f961 	bl	8011570 <__lshift>
 80122ae:	9016      	str	r0, [sp, #88]	; 0x58
 80122b0:	2800      	cmp	r0, #0
 80122b2:	f47f af6b 	bne.w	801218c <_strtod_l+0x73c>
 80122b6:	e60f      	b.n	8011ed8 <_strtod_l+0x488>
 80122b8:	46ca      	mov	sl, r9
 80122ba:	d171      	bne.n	80123a0 <_strtod_l+0x950>
 80122bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80122be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80122c2:	b352      	cbz	r2, 801231a <_strtod_l+0x8ca>
 80122c4:	4a33      	ldr	r2, [pc, #204]	; (8012394 <_strtod_l+0x944>)
 80122c6:	4293      	cmp	r3, r2
 80122c8:	d12a      	bne.n	8012320 <_strtod_l+0x8d0>
 80122ca:	9b04      	ldr	r3, [sp, #16]
 80122cc:	4641      	mov	r1, r8
 80122ce:	b1fb      	cbz	r3, 8012310 <_strtod_l+0x8c0>
 80122d0:	4b2e      	ldr	r3, [pc, #184]	; (801238c <_strtod_l+0x93c>)
 80122d2:	ea09 0303 	and.w	r3, r9, r3
 80122d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80122da:	f04f 32ff 	mov.w	r2, #4294967295
 80122de:	d81a      	bhi.n	8012316 <_strtod_l+0x8c6>
 80122e0:	0d1b      	lsrs	r3, r3, #20
 80122e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80122e6:	fa02 f303 	lsl.w	r3, r2, r3
 80122ea:	4299      	cmp	r1, r3
 80122ec:	d118      	bne.n	8012320 <_strtod_l+0x8d0>
 80122ee:	4b2a      	ldr	r3, [pc, #168]	; (8012398 <_strtod_l+0x948>)
 80122f0:	459a      	cmp	sl, r3
 80122f2:	d102      	bne.n	80122fa <_strtod_l+0x8aa>
 80122f4:	3101      	adds	r1, #1
 80122f6:	f43f adef 	beq.w	8011ed8 <_strtod_l+0x488>
 80122fa:	4b24      	ldr	r3, [pc, #144]	; (801238c <_strtod_l+0x93c>)
 80122fc:	ea0a 0303 	and.w	r3, sl, r3
 8012300:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012304:	f04f 0800 	mov.w	r8, #0
 8012308:	9b04      	ldr	r3, [sp, #16]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d1a2      	bne.n	8012254 <_strtod_l+0x804>
 801230e:	e5ed      	b.n	8011eec <_strtod_l+0x49c>
 8012310:	f04f 33ff 	mov.w	r3, #4294967295
 8012314:	e7e9      	b.n	80122ea <_strtod_l+0x89a>
 8012316:	4613      	mov	r3, r2
 8012318:	e7e7      	b.n	80122ea <_strtod_l+0x89a>
 801231a:	ea53 0308 	orrs.w	r3, r3, r8
 801231e:	d08a      	beq.n	8012236 <_strtod_l+0x7e6>
 8012320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012322:	b1e3      	cbz	r3, 801235e <_strtod_l+0x90e>
 8012324:	ea13 0f0a 	tst.w	r3, sl
 8012328:	d0ee      	beq.n	8012308 <_strtod_l+0x8b8>
 801232a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801232c:	9a04      	ldr	r2, [sp, #16]
 801232e:	4640      	mov	r0, r8
 8012330:	4649      	mov	r1, r9
 8012332:	b1c3      	cbz	r3, 8012366 <_strtod_l+0x916>
 8012334:	f7ff fb6f 	bl	8011a16 <sulp>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	ec51 0b18 	vmov	r0, r1, d8
 8012340:	f7ed ffcc 	bl	80002dc <__adddf3>
 8012344:	4680      	mov	r8, r0
 8012346:	4689      	mov	r9, r1
 8012348:	e7de      	b.n	8012308 <_strtod_l+0x8b8>
 801234a:	4013      	ands	r3, r2
 801234c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012350:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012354:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012358:	f04f 38ff 	mov.w	r8, #4294967295
 801235c:	e7d4      	b.n	8012308 <_strtod_l+0x8b8>
 801235e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012360:	ea13 0f08 	tst.w	r3, r8
 8012364:	e7e0      	b.n	8012328 <_strtod_l+0x8d8>
 8012366:	f7ff fb56 	bl	8011a16 <sulp>
 801236a:	4602      	mov	r2, r0
 801236c:	460b      	mov	r3, r1
 801236e:	ec51 0b18 	vmov	r0, r1, d8
 8012372:	f7ed ffb1 	bl	80002d8 <__aeabi_dsub>
 8012376:	2200      	movs	r2, #0
 8012378:	2300      	movs	r3, #0
 801237a:	4680      	mov	r8, r0
 801237c:	4689      	mov	r9, r1
 801237e:	f7ee fbcb 	bl	8000b18 <__aeabi_dcmpeq>
 8012382:	2800      	cmp	r0, #0
 8012384:	d0c0      	beq.n	8012308 <_strtod_l+0x8b8>
 8012386:	e618      	b.n	8011fba <_strtod_l+0x56a>
 8012388:	fffffc02 	.word	0xfffffc02
 801238c:	7ff00000 	.word	0x7ff00000
 8012390:	39500000 	.word	0x39500000
 8012394:	000fffff 	.word	0x000fffff
 8012398:	7fefffff 	.word	0x7fefffff
 801239c:	08015960 	.word	0x08015960
 80123a0:	4659      	mov	r1, fp
 80123a2:	4628      	mov	r0, r5
 80123a4:	f7ff fac0 	bl	8011928 <__ratio>
 80123a8:	ec57 6b10 	vmov	r6, r7, d0
 80123ac:	ee10 0a10 	vmov	r0, s0
 80123b0:	2200      	movs	r2, #0
 80123b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123b6:	4639      	mov	r1, r7
 80123b8:	f7ee fbc2 	bl	8000b40 <__aeabi_dcmple>
 80123bc:	2800      	cmp	r0, #0
 80123be:	d071      	beq.n	80124a4 <_strtod_l+0xa54>
 80123c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d17c      	bne.n	80124c0 <_strtod_l+0xa70>
 80123c6:	f1b8 0f00 	cmp.w	r8, #0
 80123ca:	d15a      	bne.n	8012482 <_strtod_l+0xa32>
 80123cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d15d      	bne.n	8012490 <_strtod_l+0xa40>
 80123d4:	4b90      	ldr	r3, [pc, #576]	; (8012618 <_strtod_l+0xbc8>)
 80123d6:	2200      	movs	r2, #0
 80123d8:	4630      	mov	r0, r6
 80123da:	4639      	mov	r1, r7
 80123dc:	f7ee fba6 	bl	8000b2c <__aeabi_dcmplt>
 80123e0:	2800      	cmp	r0, #0
 80123e2:	d15c      	bne.n	801249e <_strtod_l+0xa4e>
 80123e4:	4630      	mov	r0, r6
 80123e6:	4639      	mov	r1, r7
 80123e8:	4b8c      	ldr	r3, [pc, #560]	; (801261c <_strtod_l+0xbcc>)
 80123ea:	2200      	movs	r2, #0
 80123ec:	f7ee f92c 	bl	8000648 <__aeabi_dmul>
 80123f0:	4606      	mov	r6, r0
 80123f2:	460f      	mov	r7, r1
 80123f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80123f8:	9606      	str	r6, [sp, #24]
 80123fa:	9307      	str	r3, [sp, #28]
 80123fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012400:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012404:	4b86      	ldr	r3, [pc, #536]	; (8012620 <_strtod_l+0xbd0>)
 8012406:	ea0a 0303 	and.w	r3, sl, r3
 801240a:	930d      	str	r3, [sp, #52]	; 0x34
 801240c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801240e:	4b85      	ldr	r3, [pc, #532]	; (8012624 <_strtod_l+0xbd4>)
 8012410:	429a      	cmp	r2, r3
 8012412:	f040 8090 	bne.w	8012536 <_strtod_l+0xae6>
 8012416:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801241a:	ec49 8b10 	vmov	d0, r8, r9
 801241e:	f7ff f9b9 	bl	8011794 <__ulp>
 8012422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012426:	ec51 0b10 	vmov	r0, r1, d0
 801242a:	f7ee f90d 	bl	8000648 <__aeabi_dmul>
 801242e:	4642      	mov	r2, r8
 8012430:	464b      	mov	r3, r9
 8012432:	f7ed ff53 	bl	80002dc <__adddf3>
 8012436:	460b      	mov	r3, r1
 8012438:	4979      	ldr	r1, [pc, #484]	; (8012620 <_strtod_l+0xbd0>)
 801243a:	4a7b      	ldr	r2, [pc, #492]	; (8012628 <_strtod_l+0xbd8>)
 801243c:	4019      	ands	r1, r3
 801243e:	4291      	cmp	r1, r2
 8012440:	4680      	mov	r8, r0
 8012442:	d944      	bls.n	80124ce <_strtod_l+0xa7e>
 8012444:	ee18 2a90 	vmov	r2, s17
 8012448:	4b78      	ldr	r3, [pc, #480]	; (801262c <_strtod_l+0xbdc>)
 801244a:	429a      	cmp	r2, r3
 801244c:	d104      	bne.n	8012458 <_strtod_l+0xa08>
 801244e:	ee18 3a10 	vmov	r3, s16
 8012452:	3301      	adds	r3, #1
 8012454:	f43f ad40 	beq.w	8011ed8 <_strtod_l+0x488>
 8012458:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801262c <_strtod_l+0xbdc>
 801245c:	f04f 38ff 	mov.w	r8, #4294967295
 8012460:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012462:	4620      	mov	r0, r4
 8012464:	f7fe fe6a 	bl	801113c <_Bfree>
 8012468:	9905      	ldr	r1, [sp, #20]
 801246a:	4620      	mov	r0, r4
 801246c:	f7fe fe66 	bl	801113c <_Bfree>
 8012470:	4659      	mov	r1, fp
 8012472:	4620      	mov	r0, r4
 8012474:	f7fe fe62 	bl	801113c <_Bfree>
 8012478:	4629      	mov	r1, r5
 801247a:	4620      	mov	r0, r4
 801247c:	f7fe fe5e 	bl	801113c <_Bfree>
 8012480:	e609      	b.n	8012096 <_strtod_l+0x646>
 8012482:	f1b8 0f01 	cmp.w	r8, #1
 8012486:	d103      	bne.n	8012490 <_strtod_l+0xa40>
 8012488:	f1b9 0f00 	cmp.w	r9, #0
 801248c:	f43f ad95 	beq.w	8011fba <_strtod_l+0x56a>
 8012490:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80125e8 <_strtod_l+0xb98>
 8012494:	4f60      	ldr	r7, [pc, #384]	; (8012618 <_strtod_l+0xbc8>)
 8012496:	ed8d 7b06 	vstr	d7, [sp, #24]
 801249a:	2600      	movs	r6, #0
 801249c:	e7ae      	b.n	80123fc <_strtod_l+0x9ac>
 801249e:	4f5f      	ldr	r7, [pc, #380]	; (801261c <_strtod_l+0xbcc>)
 80124a0:	2600      	movs	r6, #0
 80124a2:	e7a7      	b.n	80123f4 <_strtod_l+0x9a4>
 80124a4:	4b5d      	ldr	r3, [pc, #372]	; (801261c <_strtod_l+0xbcc>)
 80124a6:	4630      	mov	r0, r6
 80124a8:	4639      	mov	r1, r7
 80124aa:	2200      	movs	r2, #0
 80124ac:	f7ee f8cc 	bl	8000648 <__aeabi_dmul>
 80124b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124b2:	4606      	mov	r6, r0
 80124b4:	460f      	mov	r7, r1
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d09c      	beq.n	80123f4 <_strtod_l+0x9a4>
 80124ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80124be:	e79d      	b.n	80123fc <_strtod_l+0x9ac>
 80124c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80125f0 <_strtod_l+0xba0>
 80124c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80124c8:	ec57 6b17 	vmov	r6, r7, d7
 80124cc:	e796      	b.n	80123fc <_strtod_l+0x9ac>
 80124ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80124d2:	9b04      	ldr	r3, [sp, #16]
 80124d4:	46ca      	mov	sl, r9
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d1c2      	bne.n	8012460 <_strtod_l+0xa10>
 80124da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80124de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124e0:	0d1b      	lsrs	r3, r3, #20
 80124e2:	051b      	lsls	r3, r3, #20
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d1bb      	bne.n	8012460 <_strtod_l+0xa10>
 80124e8:	4630      	mov	r0, r6
 80124ea:	4639      	mov	r1, r7
 80124ec:	f7ee fc5c 	bl	8000da8 <__aeabi_d2lz>
 80124f0:	f7ee f87c 	bl	80005ec <__aeabi_l2d>
 80124f4:	4602      	mov	r2, r0
 80124f6:	460b      	mov	r3, r1
 80124f8:	4630      	mov	r0, r6
 80124fa:	4639      	mov	r1, r7
 80124fc:	f7ed feec 	bl	80002d8 <__aeabi_dsub>
 8012500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012502:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012506:	ea43 0308 	orr.w	r3, r3, r8
 801250a:	4313      	orrs	r3, r2
 801250c:	4606      	mov	r6, r0
 801250e:	460f      	mov	r7, r1
 8012510:	d054      	beq.n	80125bc <_strtod_l+0xb6c>
 8012512:	a339      	add	r3, pc, #228	; (adr r3, 80125f8 <_strtod_l+0xba8>)
 8012514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012518:	f7ee fb08 	bl	8000b2c <__aeabi_dcmplt>
 801251c:	2800      	cmp	r0, #0
 801251e:	f47f ace5 	bne.w	8011eec <_strtod_l+0x49c>
 8012522:	a337      	add	r3, pc, #220	; (adr r3, 8012600 <_strtod_l+0xbb0>)
 8012524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012528:	4630      	mov	r0, r6
 801252a:	4639      	mov	r1, r7
 801252c:	f7ee fb1c 	bl	8000b68 <__aeabi_dcmpgt>
 8012530:	2800      	cmp	r0, #0
 8012532:	d095      	beq.n	8012460 <_strtod_l+0xa10>
 8012534:	e4da      	b.n	8011eec <_strtod_l+0x49c>
 8012536:	9b04      	ldr	r3, [sp, #16]
 8012538:	b333      	cbz	r3, 8012588 <_strtod_l+0xb38>
 801253a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801253c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012540:	d822      	bhi.n	8012588 <_strtod_l+0xb38>
 8012542:	a331      	add	r3, pc, #196	; (adr r3, 8012608 <_strtod_l+0xbb8>)
 8012544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012548:	4630      	mov	r0, r6
 801254a:	4639      	mov	r1, r7
 801254c:	f7ee faf8 	bl	8000b40 <__aeabi_dcmple>
 8012550:	b1a0      	cbz	r0, 801257c <_strtod_l+0xb2c>
 8012552:	4639      	mov	r1, r7
 8012554:	4630      	mov	r0, r6
 8012556:	f7ee fb4f 	bl	8000bf8 <__aeabi_d2uiz>
 801255a:	2801      	cmp	r0, #1
 801255c:	bf38      	it	cc
 801255e:	2001      	movcc	r0, #1
 8012560:	f7ed fff8 	bl	8000554 <__aeabi_ui2d>
 8012564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012566:	4606      	mov	r6, r0
 8012568:	460f      	mov	r7, r1
 801256a:	bb23      	cbnz	r3, 80125b6 <_strtod_l+0xb66>
 801256c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012570:	9010      	str	r0, [sp, #64]	; 0x40
 8012572:	9311      	str	r3, [sp, #68]	; 0x44
 8012574:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012578:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801257c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801257e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012580:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012584:	1a9b      	subs	r3, r3, r2
 8012586:	930f      	str	r3, [sp, #60]	; 0x3c
 8012588:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801258c:	eeb0 0a48 	vmov.f32	s0, s16
 8012590:	eef0 0a68 	vmov.f32	s1, s17
 8012594:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012598:	f7ff f8fc 	bl	8011794 <__ulp>
 801259c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80125a0:	ec53 2b10 	vmov	r2, r3, d0
 80125a4:	f7ee f850 	bl	8000648 <__aeabi_dmul>
 80125a8:	ec53 2b18 	vmov	r2, r3, d8
 80125ac:	f7ed fe96 	bl	80002dc <__adddf3>
 80125b0:	4680      	mov	r8, r0
 80125b2:	4689      	mov	r9, r1
 80125b4:	e78d      	b.n	80124d2 <_strtod_l+0xa82>
 80125b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80125ba:	e7db      	b.n	8012574 <_strtod_l+0xb24>
 80125bc:	a314      	add	r3, pc, #80	; (adr r3, 8012610 <_strtod_l+0xbc0>)
 80125be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c2:	f7ee fab3 	bl	8000b2c <__aeabi_dcmplt>
 80125c6:	e7b3      	b.n	8012530 <_strtod_l+0xae0>
 80125c8:	2300      	movs	r3, #0
 80125ca:	930a      	str	r3, [sp, #40]	; 0x28
 80125cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80125ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125d0:	6013      	str	r3, [r2, #0]
 80125d2:	f7ff ba7c 	b.w	8011ace <_strtod_l+0x7e>
 80125d6:	2a65      	cmp	r2, #101	; 0x65
 80125d8:	f43f ab75 	beq.w	8011cc6 <_strtod_l+0x276>
 80125dc:	2a45      	cmp	r2, #69	; 0x45
 80125de:	f43f ab72 	beq.w	8011cc6 <_strtod_l+0x276>
 80125e2:	2301      	movs	r3, #1
 80125e4:	f7ff bbaa 	b.w	8011d3c <_strtod_l+0x2ec>
 80125e8:	00000000 	.word	0x00000000
 80125ec:	bff00000 	.word	0xbff00000
 80125f0:	00000000 	.word	0x00000000
 80125f4:	3ff00000 	.word	0x3ff00000
 80125f8:	94a03595 	.word	0x94a03595
 80125fc:	3fdfffff 	.word	0x3fdfffff
 8012600:	35afe535 	.word	0x35afe535
 8012604:	3fe00000 	.word	0x3fe00000
 8012608:	ffc00000 	.word	0xffc00000
 801260c:	41dfffff 	.word	0x41dfffff
 8012610:	94a03595 	.word	0x94a03595
 8012614:	3fcfffff 	.word	0x3fcfffff
 8012618:	3ff00000 	.word	0x3ff00000
 801261c:	3fe00000 	.word	0x3fe00000
 8012620:	7ff00000 	.word	0x7ff00000
 8012624:	7fe00000 	.word	0x7fe00000
 8012628:	7c9fffff 	.word	0x7c9fffff
 801262c:	7fefffff 	.word	0x7fefffff

08012630 <_strtod_r>:
 8012630:	4b01      	ldr	r3, [pc, #4]	; (8012638 <_strtod_r+0x8>)
 8012632:	f7ff ba0d 	b.w	8011a50 <_strtod_l>
 8012636:	bf00      	nop
 8012638:	20000078 	.word	0x20000078

0801263c <_strtol_l.constprop.0>:
 801263c:	2b01      	cmp	r3, #1
 801263e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012642:	d001      	beq.n	8012648 <_strtol_l.constprop.0+0xc>
 8012644:	2b24      	cmp	r3, #36	; 0x24
 8012646:	d906      	bls.n	8012656 <_strtol_l.constprop.0+0x1a>
 8012648:	f7fd fd7c 	bl	8010144 <__errno>
 801264c:	2316      	movs	r3, #22
 801264e:	6003      	str	r3, [r0, #0]
 8012650:	2000      	movs	r0, #0
 8012652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012656:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801273c <_strtol_l.constprop.0+0x100>
 801265a:	460d      	mov	r5, r1
 801265c:	462e      	mov	r6, r5
 801265e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012662:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012666:	f017 0708 	ands.w	r7, r7, #8
 801266a:	d1f7      	bne.n	801265c <_strtol_l.constprop.0+0x20>
 801266c:	2c2d      	cmp	r4, #45	; 0x2d
 801266e:	d132      	bne.n	80126d6 <_strtol_l.constprop.0+0x9a>
 8012670:	782c      	ldrb	r4, [r5, #0]
 8012672:	2701      	movs	r7, #1
 8012674:	1cb5      	adds	r5, r6, #2
 8012676:	2b00      	cmp	r3, #0
 8012678:	d05b      	beq.n	8012732 <_strtol_l.constprop.0+0xf6>
 801267a:	2b10      	cmp	r3, #16
 801267c:	d109      	bne.n	8012692 <_strtol_l.constprop.0+0x56>
 801267e:	2c30      	cmp	r4, #48	; 0x30
 8012680:	d107      	bne.n	8012692 <_strtol_l.constprop.0+0x56>
 8012682:	782c      	ldrb	r4, [r5, #0]
 8012684:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012688:	2c58      	cmp	r4, #88	; 0x58
 801268a:	d14d      	bne.n	8012728 <_strtol_l.constprop.0+0xec>
 801268c:	786c      	ldrb	r4, [r5, #1]
 801268e:	2310      	movs	r3, #16
 8012690:	3502      	adds	r5, #2
 8012692:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012696:	f108 38ff 	add.w	r8, r8, #4294967295
 801269a:	f04f 0e00 	mov.w	lr, #0
 801269e:	fbb8 f9f3 	udiv	r9, r8, r3
 80126a2:	4676      	mov	r6, lr
 80126a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80126a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80126ac:	f1bc 0f09 	cmp.w	ip, #9
 80126b0:	d816      	bhi.n	80126e0 <_strtol_l.constprop.0+0xa4>
 80126b2:	4664      	mov	r4, ip
 80126b4:	42a3      	cmp	r3, r4
 80126b6:	dd24      	ble.n	8012702 <_strtol_l.constprop.0+0xc6>
 80126b8:	f1be 3fff 	cmp.w	lr, #4294967295
 80126bc:	d008      	beq.n	80126d0 <_strtol_l.constprop.0+0x94>
 80126be:	45b1      	cmp	r9, r6
 80126c0:	d31c      	bcc.n	80126fc <_strtol_l.constprop.0+0xc0>
 80126c2:	d101      	bne.n	80126c8 <_strtol_l.constprop.0+0x8c>
 80126c4:	45a2      	cmp	sl, r4
 80126c6:	db19      	blt.n	80126fc <_strtol_l.constprop.0+0xc0>
 80126c8:	fb06 4603 	mla	r6, r6, r3, r4
 80126cc:	f04f 0e01 	mov.w	lr, #1
 80126d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126d4:	e7e8      	b.n	80126a8 <_strtol_l.constprop.0+0x6c>
 80126d6:	2c2b      	cmp	r4, #43	; 0x2b
 80126d8:	bf04      	itt	eq
 80126da:	782c      	ldrbeq	r4, [r5, #0]
 80126dc:	1cb5      	addeq	r5, r6, #2
 80126de:	e7ca      	b.n	8012676 <_strtol_l.constprop.0+0x3a>
 80126e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80126e4:	f1bc 0f19 	cmp.w	ip, #25
 80126e8:	d801      	bhi.n	80126ee <_strtol_l.constprop.0+0xb2>
 80126ea:	3c37      	subs	r4, #55	; 0x37
 80126ec:	e7e2      	b.n	80126b4 <_strtol_l.constprop.0+0x78>
 80126ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80126f2:	f1bc 0f19 	cmp.w	ip, #25
 80126f6:	d804      	bhi.n	8012702 <_strtol_l.constprop.0+0xc6>
 80126f8:	3c57      	subs	r4, #87	; 0x57
 80126fa:	e7db      	b.n	80126b4 <_strtol_l.constprop.0+0x78>
 80126fc:	f04f 3eff 	mov.w	lr, #4294967295
 8012700:	e7e6      	b.n	80126d0 <_strtol_l.constprop.0+0x94>
 8012702:	f1be 3fff 	cmp.w	lr, #4294967295
 8012706:	d105      	bne.n	8012714 <_strtol_l.constprop.0+0xd8>
 8012708:	2322      	movs	r3, #34	; 0x22
 801270a:	6003      	str	r3, [r0, #0]
 801270c:	4646      	mov	r6, r8
 801270e:	b942      	cbnz	r2, 8012722 <_strtol_l.constprop.0+0xe6>
 8012710:	4630      	mov	r0, r6
 8012712:	e79e      	b.n	8012652 <_strtol_l.constprop.0+0x16>
 8012714:	b107      	cbz	r7, 8012718 <_strtol_l.constprop.0+0xdc>
 8012716:	4276      	negs	r6, r6
 8012718:	2a00      	cmp	r2, #0
 801271a:	d0f9      	beq.n	8012710 <_strtol_l.constprop.0+0xd4>
 801271c:	f1be 0f00 	cmp.w	lr, #0
 8012720:	d000      	beq.n	8012724 <_strtol_l.constprop.0+0xe8>
 8012722:	1e69      	subs	r1, r5, #1
 8012724:	6011      	str	r1, [r2, #0]
 8012726:	e7f3      	b.n	8012710 <_strtol_l.constprop.0+0xd4>
 8012728:	2430      	movs	r4, #48	; 0x30
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1b1      	bne.n	8012692 <_strtol_l.constprop.0+0x56>
 801272e:	2308      	movs	r3, #8
 8012730:	e7af      	b.n	8012692 <_strtol_l.constprop.0+0x56>
 8012732:	2c30      	cmp	r4, #48	; 0x30
 8012734:	d0a5      	beq.n	8012682 <_strtol_l.constprop.0+0x46>
 8012736:	230a      	movs	r3, #10
 8012738:	e7ab      	b.n	8012692 <_strtol_l.constprop.0+0x56>
 801273a:	bf00      	nop
 801273c:	08015989 	.word	0x08015989

08012740 <_strtol_r>:
 8012740:	f7ff bf7c 	b.w	801263c <_strtol_l.constprop.0>

08012744 <__ssputs_r>:
 8012744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012748:	688e      	ldr	r6, [r1, #8]
 801274a:	461f      	mov	r7, r3
 801274c:	42be      	cmp	r6, r7
 801274e:	680b      	ldr	r3, [r1, #0]
 8012750:	4682      	mov	sl, r0
 8012752:	460c      	mov	r4, r1
 8012754:	4690      	mov	r8, r2
 8012756:	d82c      	bhi.n	80127b2 <__ssputs_r+0x6e>
 8012758:	898a      	ldrh	r2, [r1, #12]
 801275a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801275e:	d026      	beq.n	80127ae <__ssputs_r+0x6a>
 8012760:	6965      	ldr	r5, [r4, #20]
 8012762:	6909      	ldr	r1, [r1, #16]
 8012764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012768:	eba3 0901 	sub.w	r9, r3, r1
 801276c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012770:	1c7b      	adds	r3, r7, #1
 8012772:	444b      	add	r3, r9
 8012774:	106d      	asrs	r5, r5, #1
 8012776:	429d      	cmp	r5, r3
 8012778:	bf38      	it	cc
 801277a:	461d      	movcc	r5, r3
 801277c:	0553      	lsls	r3, r2, #21
 801277e:	d527      	bpl.n	80127d0 <__ssputs_r+0x8c>
 8012780:	4629      	mov	r1, r5
 8012782:	f7fe fc0f 	bl	8010fa4 <_malloc_r>
 8012786:	4606      	mov	r6, r0
 8012788:	b360      	cbz	r0, 80127e4 <__ssputs_r+0xa0>
 801278a:	6921      	ldr	r1, [r4, #16]
 801278c:	464a      	mov	r2, r9
 801278e:	f7fd fd06 	bl	801019e <memcpy>
 8012792:	89a3      	ldrh	r3, [r4, #12]
 8012794:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801279c:	81a3      	strh	r3, [r4, #12]
 801279e:	6126      	str	r6, [r4, #16]
 80127a0:	6165      	str	r5, [r4, #20]
 80127a2:	444e      	add	r6, r9
 80127a4:	eba5 0509 	sub.w	r5, r5, r9
 80127a8:	6026      	str	r6, [r4, #0]
 80127aa:	60a5      	str	r5, [r4, #8]
 80127ac:	463e      	mov	r6, r7
 80127ae:	42be      	cmp	r6, r7
 80127b0:	d900      	bls.n	80127b4 <__ssputs_r+0x70>
 80127b2:	463e      	mov	r6, r7
 80127b4:	6820      	ldr	r0, [r4, #0]
 80127b6:	4632      	mov	r2, r6
 80127b8:	4641      	mov	r1, r8
 80127ba:	f000 fd5c 	bl	8013276 <memmove>
 80127be:	68a3      	ldr	r3, [r4, #8]
 80127c0:	1b9b      	subs	r3, r3, r6
 80127c2:	60a3      	str	r3, [r4, #8]
 80127c4:	6823      	ldr	r3, [r4, #0]
 80127c6:	4433      	add	r3, r6
 80127c8:	6023      	str	r3, [r4, #0]
 80127ca:	2000      	movs	r0, #0
 80127cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127d0:	462a      	mov	r2, r5
 80127d2:	f001 f922 	bl	8013a1a <_realloc_r>
 80127d6:	4606      	mov	r6, r0
 80127d8:	2800      	cmp	r0, #0
 80127da:	d1e0      	bne.n	801279e <__ssputs_r+0x5a>
 80127dc:	6921      	ldr	r1, [r4, #16]
 80127de:	4650      	mov	r0, sl
 80127e0:	f7fe fb6c 	bl	8010ebc <_free_r>
 80127e4:	230c      	movs	r3, #12
 80127e6:	f8ca 3000 	str.w	r3, [sl]
 80127ea:	89a3      	ldrh	r3, [r4, #12]
 80127ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127f0:	81a3      	strh	r3, [r4, #12]
 80127f2:	f04f 30ff 	mov.w	r0, #4294967295
 80127f6:	e7e9      	b.n	80127cc <__ssputs_r+0x88>

080127f8 <_svfiprintf_r>:
 80127f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127fc:	4698      	mov	r8, r3
 80127fe:	898b      	ldrh	r3, [r1, #12]
 8012800:	061b      	lsls	r3, r3, #24
 8012802:	b09d      	sub	sp, #116	; 0x74
 8012804:	4607      	mov	r7, r0
 8012806:	460d      	mov	r5, r1
 8012808:	4614      	mov	r4, r2
 801280a:	d50e      	bpl.n	801282a <_svfiprintf_r+0x32>
 801280c:	690b      	ldr	r3, [r1, #16]
 801280e:	b963      	cbnz	r3, 801282a <_svfiprintf_r+0x32>
 8012810:	2140      	movs	r1, #64	; 0x40
 8012812:	f7fe fbc7 	bl	8010fa4 <_malloc_r>
 8012816:	6028      	str	r0, [r5, #0]
 8012818:	6128      	str	r0, [r5, #16]
 801281a:	b920      	cbnz	r0, 8012826 <_svfiprintf_r+0x2e>
 801281c:	230c      	movs	r3, #12
 801281e:	603b      	str	r3, [r7, #0]
 8012820:	f04f 30ff 	mov.w	r0, #4294967295
 8012824:	e0d0      	b.n	80129c8 <_svfiprintf_r+0x1d0>
 8012826:	2340      	movs	r3, #64	; 0x40
 8012828:	616b      	str	r3, [r5, #20]
 801282a:	2300      	movs	r3, #0
 801282c:	9309      	str	r3, [sp, #36]	; 0x24
 801282e:	2320      	movs	r3, #32
 8012830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012834:	f8cd 800c 	str.w	r8, [sp, #12]
 8012838:	2330      	movs	r3, #48	; 0x30
 801283a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80129e0 <_svfiprintf_r+0x1e8>
 801283e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012842:	f04f 0901 	mov.w	r9, #1
 8012846:	4623      	mov	r3, r4
 8012848:	469a      	mov	sl, r3
 801284a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801284e:	b10a      	cbz	r2, 8012854 <_svfiprintf_r+0x5c>
 8012850:	2a25      	cmp	r2, #37	; 0x25
 8012852:	d1f9      	bne.n	8012848 <_svfiprintf_r+0x50>
 8012854:	ebba 0b04 	subs.w	fp, sl, r4
 8012858:	d00b      	beq.n	8012872 <_svfiprintf_r+0x7a>
 801285a:	465b      	mov	r3, fp
 801285c:	4622      	mov	r2, r4
 801285e:	4629      	mov	r1, r5
 8012860:	4638      	mov	r0, r7
 8012862:	f7ff ff6f 	bl	8012744 <__ssputs_r>
 8012866:	3001      	adds	r0, #1
 8012868:	f000 80a9 	beq.w	80129be <_svfiprintf_r+0x1c6>
 801286c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801286e:	445a      	add	r2, fp
 8012870:	9209      	str	r2, [sp, #36]	; 0x24
 8012872:	f89a 3000 	ldrb.w	r3, [sl]
 8012876:	2b00      	cmp	r3, #0
 8012878:	f000 80a1 	beq.w	80129be <_svfiprintf_r+0x1c6>
 801287c:	2300      	movs	r3, #0
 801287e:	f04f 32ff 	mov.w	r2, #4294967295
 8012882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012886:	f10a 0a01 	add.w	sl, sl, #1
 801288a:	9304      	str	r3, [sp, #16]
 801288c:	9307      	str	r3, [sp, #28]
 801288e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012892:	931a      	str	r3, [sp, #104]	; 0x68
 8012894:	4654      	mov	r4, sl
 8012896:	2205      	movs	r2, #5
 8012898:	f814 1b01 	ldrb.w	r1, [r4], #1
 801289c:	4850      	ldr	r0, [pc, #320]	; (80129e0 <_svfiprintf_r+0x1e8>)
 801289e:	f7ed fcbf 	bl	8000220 <memchr>
 80128a2:	9a04      	ldr	r2, [sp, #16]
 80128a4:	b9d8      	cbnz	r0, 80128de <_svfiprintf_r+0xe6>
 80128a6:	06d0      	lsls	r0, r2, #27
 80128a8:	bf44      	itt	mi
 80128aa:	2320      	movmi	r3, #32
 80128ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128b0:	0711      	lsls	r1, r2, #28
 80128b2:	bf44      	itt	mi
 80128b4:	232b      	movmi	r3, #43	; 0x2b
 80128b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128ba:	f89a 3000 	ldrb.w	r3, [sl]
 80128be:	2b2a      	cmp	r3, #42	; 0x2a
 80128c0:	d015      	beq.n	80128ee <_svfiprintf_r+0xf6>
 80128c2:	9a07      	ldr	r2, [sp, #28]
 80128c4:	4654      	mov	r4, sl
 80128c6:	2000      	movs	r0, #0
 80128c8:	f04f 0c0a 	mov.w	ip, #10
 80128cc:	4621      	mov	r1, r4
 80128ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128d2:	3b30      	subs	r3, #48	; 0x30
 80128d4:	2b09      	cmp	r3, #9
 80128d6:	d94d      	bls.n	8012974 <_svfiprintf_r+0x17c>
 80128d8:	b1b0      	cbz	r0, 8012908 <_svfiprintf_r+0x110>
 80128da:	9207      	str	r2, [sp, #28]
 80128dc:	e014      	b.n	8012908 <_svfiprintf_r+0x110>
 80128de:	eba0 0308 	sub.w	r3, r0, r8
 80128e2:	fa09 f303 	lsl.w	r3, r9, r3
 80128e6:	4313      	orrs	r3, r2
 80128e8:	9304      	str	r3, [sp, #16]
 80128ea:	46a2      	mov	sl, r4
 80128ec:	e7d2      	b.n	8012894 <_svfiprintf_r+0x9c>
 80128ee:	9b03      	ldr	r3, [sp, #12]
 80128f0:	1d19      	adds	r1, r3, #4
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	9103      	str	r1, [sp, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	bfbb      	ittet	lt
 80128fa:	425b      	neglt	r3, r3
 80128fc:	f042 0202 	orrlt.w	r2, r2, #2
 8012900:	9307      	strge	r3, [sp, #28]
 8012902:	9307      	strlt	r3, [sp, #28]
 8012904:	bfb8      	it	lt
 8012906:	9204      	strlt	r2, [sp, #16]
 8012908:	7823      	ldrb	r3, [r4, #0]
 801290a:	2b2e      	cmp	r3, #46	; 0x2e
 801290c:	d10c      	bne.n	8012928 <_svfiprintf_r+0x130>
 801290e:	7863      	ldrb	r3, [r4, #1]
 8012910:	2b2a      	cmp	r3, #42	; 0x2a
 8012912:	d134      	bne.n	801297e <_svfiprintf_r+0x186>
 8012914:	9b03      	ldr	r3, [sp, #12]
 8012916:	1d1a      	adds	r2, r3, #4
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	9203      	str	r2, [sp, #12]
 801291c:	2b00      	cmp	r3, #0
 801291e:	bfb8      	it	lt
 8012920:	f04f 33ff 	movlt.w	r3, #4294967295
 8012924:	3402      	adds	r4, #2
 8012926:	9305      	str	r3, [sp, #20]
 8012928:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80129f0 <_svfiprintf_r+0x1f8>
 801292c:	7821      	ldrb	r1, [r4, #0]
 801292e:	2203      	movs	r2, #3
 8012930:	4650      	mov	r0, sl
 8012932:	f7ed fc75 	bl	8000220 <memchr>
 8012936:	b138      	cbz	r0, 8012948 <_svfiprintf_r+0x150>
 8012938:	9b04      	ldr	r3, [sp, #16]
 801293a:	eba0 000a 	sub.w	r0, r0, sl
 801293e:	2240      	movs	r2, #64	; 0x40
 8012940:	4082      	lsls	r2, r0
 8012942:	4313      	orrs	r3, r2
 8012944:	3401      	adds	r4, #1
 8012946:	9304      	str	r3, [sp, #16]
 8012948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801294c:	4825      	ldr	r0, [pc, #148]	; (80129e4 <_svfiprintf_r+0x1ec>)
 801294e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012952:	2206      	movs	r2, #6
 8012954:	f7ed fc64 	bl	8000220 <memchr>
 8012958:	2800      	cmp	r0, #0
 801295a:	d038      	beq.n	80129ce <_svfiprintf_r+0x1d6>
 801295c:	4b22      	ldr	r3, [pc, #136]	; (80129e8 <_svfiprintf_r+0x1f0>)
 801295e:	bb1b      	cbnz	r3, 80129a8 <_svfiprintf_r+0x1b0>
 8012960:	9b03      	ldr	r3, [sp, #12]
 8012962:	3307      	adds	r3, #7
 8012964:	f023 0307 	bic.w	r3, r3, #7
 8012968:	3308      	adds	r3, #8
 801296a:	9303      	str	r3, [sp, #12]
 801296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801296e:	4433      	add	r3, r6
 8012970:	9309      	str	r3, [sp, #36]	; 0x24
 8012972:	e768      	b.n	8012846 <_svfiprintf_r+0x4e>
 8012974:	fb0c 3202 	mla	r2, ip, r2, r3
 8012978:	460c      	mov	r4, r1
 801297a:	2001      	movs	r0, #1
 801297c:	e7a6      	b.n	80128cc <_svfiprintf_r+0xd4>
 801297e:	2300      	movs	r3, #0
 8012980:	3401      	adds	r4, #1
 8012982:	9305      	str	r3, [sp, #20]
 8012984:	4619      	mov	r1, r3
 8012986:	f04f 0c0a 	mov.w	ip, #10
 801298a:	4620      	mov	r0, r4
 801298c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012990:	3a30      	subs	r2, #48	; 0x30
 8012992:	2a09      	cmp	r2, #9
 8012994:	d903      	bls.n	801299e <_svfiprintf_r+0x1a6>
 8012996:	2b00      	cmp	r3, #0
 8012998:	d0c6      	beq.n	8012928 <_svfiprintf_r+0x130>
 801299a:	9105      	str	r1, [sp, #20]
 801299c:	e7c4      	b.n	8012928 <_svfiprintf_r+0x130>
 801299e:	fb0c 2101 	mla	r1, ip, r1, r2
 80129a2:	4604      	mov	r4, r0
 80129a4:	2301      	movs	r3, #1
 80129a6:	e7f0      	b.n	801298a <_svfiprintf_r+0x192>
 80129a8:	ab03      	add	r3, sp, #12
 80129aa:	9300      	str	r3, [sp, #0]
 80129ac:	462a      	mov	r2, r5
 80129ae:	4b0f      	ldr	r3, [pc, #60]	; (80129ec <_svfiprintf_r+0x1f4>)
 80129b0:	a904      	add	r1, sp, #16
 80129b2:	4638      	mov	r0, r7
 80129b4:	f7fc fbe2 	bl	800f17c <_printf_float>
 80129b8:	1c42      	adds	r2, r0, #1
 80129ba:	4606      	mov	r6, r0
 80129bc:	d1d6      	bne.n	801296c <_svfiprintf_r+0x174>
 80129be:	89ab      	ldrh	r3, [r5, #12]
 80129c0:	065b      	lsls	r3, r3, #25
 80129c2:	f53f af2d 	bmi.w	8012820 <_svfiprintf_r+0x28>
 80129c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129c8:	b01d      	add	sp, #116	; 0x74
 80129ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ce:	ab03      	add	r3, sp, #12
 80129d0:	9300      	str	r3, [sp, #0]
 80129d2:	462a      	mov	r2, r5
 80129d4:	4b05      	ldr	r3, [pc, #20]	; (80129ec <_svfiprintf_r+0x1f4>)
 80129d6:	a904      	add	r1, sp, #16
 80129d8:	4638      	mov	r0, r7
 80129da:	f7fc fe73 	bl	800f6c4 <_printf_i>
 80129de:	e7eb      	b.n	80129b8 <_svfiprintf_r+0x1c0>
 80129e0:	08015a89 	.word	0x08015a89
 80129e4:	08015a93 	.word	0x08015a93
 80129e8:	0800f17d 	.word	0x0800f17d
 80129ec:	08012745 	.word	0x08012745
 80129f0:	08015a8f 	.word	0x08015a8f

080129f4 <_sungetc_r>:
 80129f4:	b538      	push	{r3, r4, r5, lr}
 80129f6:	1c4b      	adds	r3, r1, #1
 80129f8:	4614      	mov	r4, r2
 80129fa:	d103      	bne.n	8012a04 <_sungetc_r+0x10>
 80129fc:	f04f 35ff 	mov.w	r5, #4294967295
 8012a00:	4628      	mov	r0, r5
 8012a02:	bd38      	pop	{r3, r4, r5, pc}
 8012a04:	8993      	ldrh	r3, [r2, #12]
 8012a06:	f023 0320 	bic.w	r3, r3, #32
 8012a0a:	8193      	strh	r3, [r2, #12]
 8012a0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a0e:	6852      	ldr	r2, [r2, #4]
 8012a10:	b2cd      	uxtb	r5, r1
 8012a12:	b18b      	cbz	r3, 8012a38 <_sungetc_r+0x44>
 8012a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012a16:	4293      	cmp	r3, r2
 8012a18:	dd08      	ble.n	8012a2c <_sungetc_r+0x38>
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	1e5a      	subs	r2, r3, #1
 8012a1e:	6022      	str	r2, [r4, #0]
 8012a20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012a24:	6863      	ldr	r3, [r4, #4]
 8012a26:	3301      	adds	r3, #1
 8012a28:	6063      	str	r3, [r4, #4]
 8012a2a:	e7e9      	b.n	8012a00 <_sungetc_r+0xc>
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	f000 fbe8 	bl	8013202 <__submore>
 8012a32:	2800      	cmp	r0, #0
 8012a34:	d0f1      	beq.n	8012a1a <_sungetc_r+0x26>
 8012a36:	e7e1      	b.n	80129fc <_sungetc_r+0x8>
 8012a38:	6921      	ldr	r1, [r4, #16]
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	b151      	cbz	r1, 8012a54 <_sungetc_r+0x60>
 8012a3e:	4299      	cmp	r1, r3
 8012a40:	d208      	bcs.n	8012a54 <_sungetc_r+0x60>
 8012a42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012a46:	42a9      	cmp	r1, r5
 8012a48:	d104      	bne.n	8012a54 <_sungetc_r+0x60>
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	3201      	adds	r2, #1
 8012a4e:	6023      	str	r3, [r4, #0]
 8012a50:	6062      	str	r2, [r4, #4]
 8012a52:	e7d5      	b.n	8012a00 <_sungetc_r+0xc>
 8012a54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8012a5e:	2303      	movs	r3, #3
 8012a60:	63a3      	str	r3, [r4, #56]	; 0x38
 8012a62:	4623      	mov	r3, r4
 8012a64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012a68:	6023      	str	r3, [r4, #0]
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e7dc      	b.n	8012a28 <_sungetc_r+0x34>

08012a6e <__ssrefill_r>:
 8012a6e:	b510      	push	{r4, lr}
 8012a70:	460c      	mov	r4, r1
 8012a72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012a74:	b169      	cbz	r1, 8012a92 <__ssrefill_r+0x24>
 8012a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a7a:	4299      	cmp	r1, r3
 8012a7c:	d001      	beq.n	8012a82 <__ssrefill_r+0x14>
 8012a7e:	f7fe fa1d 	bl	8010ebc <_free_r>
 8012a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a84:	6063      	str	r3, [r4, #4]
 8012a86:	2000      	movs	r0, #0
 8012a88:	6360      	str	r0, [r4, #52]	; 0x34
 8012a8a:	b113      	cbz	r3, 8012a92 <__ssrefill_r+0x24>
 8012a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012a8e:	6023      	str	r3, [r4, #0]
 8012a90:	bd10      	pop	{r4, pc}
 8012a92:	6923      	ldr	r3, [r4, #16]
 8012a94:	6023      	str	r3, [r4, #0]
 8012a96:	2300      	movs	r3, #0
 8012a98:	6063      	str	r3, [r4, #4]
 8012a9a:	89a3      	ldrh	r3, [r4, #12]
 8012a9c:	f043 0320 	orr.w	r3, r3, #32
 8012aa0:	81a3      	strh	r3, [r4, #12]
 8012aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa6:	e7f3      	b.n	8012a90 <__ssrefill_r+0x22>

08012aa8 <__ssvfiscanf_r>:
 8012aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012aac:	460c      	mov	r4, r1
 8012aae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012ab8:	49a6      	ldr	r1, [pc, #664]	; (8012d54 <__ssvfiscanf_r+0x2ac>)
 8012aba:	91a0      	str	r1, [sp, #640]	; 0x280
 8012abc:	f10d 0804 	add.w	r8, sp, #4
 8012ac0:	49a5      	ldr	r1, [pc, #660]	; (8012d58 <__ssvfiscanf_r+0x2b0>)
 8012ac2:	4fa6      	ldr	r7, [pc, #664]	; (8012d5c <__ssvfiscanf_r+0x2b4>)
 8012ac4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8012d60 <__ssvfiscanf_r+0x2b8>
 8012ac8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012acc:	4606      	mov	r6, r0
 8012ace:	91a1      	str	r1, [sp, #644]	; 0x284
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	7813      	ldrb	r3, [r2, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	f000 815a 	beq.w	8012d8e <__ssvfiscanf_r+0x2e6>
 8012ada:	5cf9      	ldrb	r1, [r7, r3]
 8012adc:	f011 0108 	ands.w	r1, r1, #8
 8012ae0:	f102 0501 	add.w	r5, r2, #1
 8012ae4:	d019      	beq.n	8012b1a <__ssvfiscanf_r+0x72>
 8012ae6:	6863      	ldr	r3, [r4, #4]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	dd0f      	ble.n	8012b0c <__ssvfiscanf_r+0x64>
 8012aec:	6823      	ldr	r3, [r4, #0]
 8012aee:	781a      	ldrb	r2, [r3, #0]
 8012af0:	5cba      	ldrb	r2, [r7, r2]
 8012af2:	0712      	lsls	r2, r2, #28
 8012af4:	d401      	bmi.n	8012afa <__ssvfiscanf_r+0x52>
 8012af6:	462a      	mov	r2, r5
 8012af8:	e7eb      	b.n	8012ad2 <__ssvfiscanf_r+0x2a>
 8012afa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012afc:	3201      	adds	r2, #1
 8012afe:	9245      	str	r2, [sp, #276]	; 0x114
 8012b00:	6862      	ldr	r2, [r4, #4]
 8012b02:	3301      	adds	r3, #1
 8012b04:	3a01      	subs	r2, #1
 8012b06:	6062      	str	r2, [r4, #4]
 8012b08:	6023      	str	r3, [r4, #0]
 8012b0a:	e7ec      	b.n	8012ae6 <__ssvfiscanf_r+0x3e>
 8012b0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012b0e:	4621      	mov	r1, r4
 8012b10:	4630      	mov	r0, r6
 8012b12:	4798      	blx	r3
 8012b14:	2800      	cmp	r0, #0
 8012b16:	d0e9      	beq.n	8012aec <__ssvfiscanf_r+0x44>
 8012b18:	e7ed      	b.n	8012af6 <__ssvfiscanf_r+0x4e>
 8012b1a:	2b25      	cmp	r3, #37	; 0x25
 8012b1c:	d012      	beq.n	8012b44 <__ssvfiscanf_r+0x9c>
 8012b1e:	469a      	mov	sl, r3
 8012b20:	6863      	ldr	r3, [r4, #4]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f340 8091 	ble.w	8012c4a <__ssvfiscanf_r+0x1a2>
 8012b28:	6822      	ldr	r2, [r4, #0]
 8012b2a:	7813      	ldrb	r3, [r2, #0]
 8012b2c:	4553      	cmp	r3, sl
 8012b2e:	f040 812e 	bne.w	8012d8e <__ssvfiscanf_r+0x2e6>
 8012b32:	6863      	ldr	r3, [r4, #4]
 8012b34:	3b01      	subs	r3, #1
 8012b36:	6063      	str	r3, [r4, #4]
 8012b38:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012b3a:	3201      	adds	r2, #1
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	6022      	str	r2, [r4, #0]
 8012b40:	9345      	str	r3, [sp, #276]	; 0x114
 8012b42:	e7d8      	b.n	8012af6 <__ssvfiscanf_r+0x4e>
 8012b44:	9141      	str	r1, [sp, #260]	; 0x104
 8012b46:	9143      	str	r1, [sp, #268]	; 0x10c
 8012b48:	7853      	ldrb	r3, [r2, #1]
 8012b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8012b4c:	bf02      	ittt	eq
 8012b4e:	2310      	moveq	r3, #16
 8012b50:	1c95      	addeq	r5, r2, #2
 8012b52:	9341      	streq	r3, [sp, #260]	; 0x104
 8012b54:	220a      	movs	r2, #10
 8012b56:	46aa      	mov	sl, r5
 8012b58:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012b5c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012b60:	2b09      	cmp	r3, #9
 8012b62:	d91c      	bls.n	8012b9e <__ssvfiscanf_r+0xf6>
 8012b64:	487e      	ldr	r0, [pc, #504]	; (8012d60 <__ssvfiscanf_r+0x2b8>)
 8012b66:	2203      	movs	r2, #3
 8012b68:	f7ed fb5a 	bl	8000220 <memchr>
 8012b6c:	b138      	cbz	r0, 8012b7e <__ssvfiscanf_r+0xd6>
 8012b6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012b70:	eba0 0009 	sub.w	r0, r0, r9
 8012b74:	2301      	movs	r3, #1
 8012b76:	4083      	lsls	r3, r0
 8012b78:	4313      	orrs	r3, r2
 8012b7a:	9341      	str	r3, [sp, #260]	; 0x104
 8012b7c:	4655      	mov	r5, sl
 8012b7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012b82:	2b78      	cmp	r3, #120	; 0x78
 8012b84:	d806      	bhi.n	8012b94 <__ssvfiscanf_r+0xec>
 8012b86:	2b57      	cmp	r3, #87	; 0x57
 8012b88:	d810      	bhi.n	8012bac <__ssvfiscanf_r+0x104>
 8012b8a:	2b25      	cmp	r3, #37	; 0x25
 8012b8c:	d0c7      	beq.n	8012b1e <__ssvfiscanf_r+0x76>
 8012b8e:	d857      	bhi.n	8012c40 <__ssvfiscanf_r+0x198>
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d065      	beq.n	8012c60 <__ssvfiscanf_r+0x1b8>
 8012b94:	2303      	movs	r3, #3
 8012b96:	9347      	str	r3, [sp, #284]	; 0x11c
 8012b98:	230a      	movs	r3, #10
 8012b9a:	9342      	str	r3, [sp, #264]	; 0x108
 8012b9c:	e076      	b.n	8012c8c <__ssvfiscanf_r+0x1e4>
 8012b9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012ba0:	fb02 1103 	mla	r1, r2, r3, r1
 8012ba4:	3930      	subs	r1, #48	; 0x30
 8012ba6:	9143      	str	r1, [sp, #268]	; 0x10c
 8012ba8:	4655      	mov	r5, sl
 8012baa:	e7d4      	b.n	8012b56 <__ssvfiscanf_r+0xae>
 8012bac:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012bb0:	2a20      	cmp	r2, #32
 8012bb2:	d8ef      	bhi.n	8012b94 <__ssvfiscanf_r+0xec>
 8012bb4:	a101      	add	r1, pc, #4	; (adr r1, 8012bbc <__ssvfiscanf_r+0x114>)
 8012bb6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012bba:	bf00      	nop
 8012bbc:	08012c6f 	.word	0x08012c6f
 8012bc0:	08012b95 	.word	0x08012b95
 8012bc4:	08012b95 	.word	0x08012b95
 8012bc8:	08012ccd 	.word	0x08012ccd
 8012bcc:	08012b95 	.word	0x08012b95
 8012bd0:	08012b95 	.word	0x08012b95
 8012bd4:	08012b95 	.word	0x08012b95
 8012bd8:	08012b95 	.word	0x08012b95
 8012bdc:	08012b95 	.word	0x08012b95
 8012be0:	08012b95 	.word	0x08012b95
 8012be4:	08012b95 	.word	0x08012b95
 8012be8:	08012ce3 	.word	0x08012ce3
 8012bec:	08012cc9 	.word	0x08012cc9
 8012bf0:	08012c47 	.word	0x08012c47
 8012bf4:	08012c47 	.word	0x08012c47
 8012bf8:	08012c47 	.word	0x08012c47
 8012bfc:	08012b95 	.word	0x08012b95
 8012c00:	08012c85 	.word	0x08012c85
 8012c04:	08012b95 	.word	0x08012b95
 8012c08:	08012b95 	.word	0x08012b95
 8012c0c:	08012b95 	.word	0x08012b95
 8012c10:	08012b95 	.word	0x08012b95
 8012c14:	08012cf3 	.word	0x08012cf3
 8012c18:	08012cc1 	.word	0x08012cc1
 8012c1c:	08012c67 	.word	0x08012c67
 8012c20:	08012b95 	.word	0x08012b95
 8012c24:	08012b95 	.word	0x08012b95
 8012c28:	08012cef 	.word	0x08012cef
 8012c2c:	08012b95 	.word	0x08012b95
 8012c30:	08012cc9 	.word	0x08012cc9
 8012c34:	08012b95 	.word	0x08012b95
 8012c38:	08012b95 	.word	0x08012b95
 8012c3c:	08012c6f 	.word	0x08012c6f
 8012c40:	3b45      	subs	r3, #69	; 0x45
 8012c42:	2b02      	cmp	r3, #2
 8012c44:	d8a6      	bhi.n	8012b94 <__ssvfiscanf_r+0xec>
 8012c46:	2305      	movs	r3, #5
 8012c48:	e01f      	b.n	8012c8a <__ssvfiscanf_r+0x1e2>
 8012c4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012c4c:	4621      	mov	r1, r4
 8012c4e:	4630      	mov	r0, r6
 8012c50:	4798      	blx	r3
 8012c52:	2800      	cmp	r0, #0
 8012c54:	f43f af68 	beq.w	8012b28 <__ssvfiscanf_r+0x80>
 8012c58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	f040 808d 	bne.w	8012d7a <__ssvfiscanf_r+0x2d2>
 8012c60:	f04f 30ff 	mov.w	r0, #4294967295
 8012c64:	e08f      	b.n	8012d86 <__ssvfiscanf_r+0x2de>
 8012c66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012c68:	f042 0220 	orr.w	r2, r2, #32
 8012c6c:	9241      	str	r2, [sp, #260]	; 0x104
 8012c6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c74:	9241      	str	r2, [sp, #260]	; 0x104
 8012c76:	2210      	movs	r2, #16
 8012c78:	2b6f      	cmp	r3, #111	; 0x6f
 8012c7a:	9242      	str	r2, [sp, #264]	; 0x108
 8012c7c:	bf34      	ite	cc
 8012c7e:	2303      	movcc	r3, #3
 8012c80:	2304      	movcs	r3, #4
 8012c82:	e002      	b.n	8012c8a <__ssvfiscanf_r+0x1e2>
 8012c84:	2300      	movs	r3, #0
 8012c86:	9342      	str	r3, [sp, #264]	; 0x108
 8012c88:	2303      	movs	r3, #3
 8012c8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8012c8c:	6863      	ldr	r3, [r4, #4]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	dd3d      	ble.n	8012d0e <__ssvfiscanf_r+0x266>
 8012c92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012c94:	0659      	lsls	r1, r3, #25
 8012c96:	d404      	bmi.n	8012ca2 <__ssvfiscanf_r+0x1fa>
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	781a      	ldrb	r2, [r3, #0]
 8012c9c:	5cba      	ldrb	r2, [r7, r2]
 8012c9e:	0712      	lsls	r2, r2, #28
 8012ca0:	d43c      	bmi.n	8012d1c <__ssvfiscanf_r+0x274>
 8012ca2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012ca4:	2b02      	cmp	r3, #2
 8012ca6:	dc4b      	bgt.n	8012d40 <__ssvfiscanf_r+0x298>
 8012ca8:	466b      	mov	r3, sp
 8012caa:	4622      	mov	r2, r4
 8012cac:	a941      	add	r1, sp, #260	; 0x104
 8012cae:	4630      	mov	r0, r6
 8012cb0:	f000 f872 	bl	8012d98 <_scanf_chars>
 8012cb4:	2801      	cmp	r0, #1
 8012cb6:	d06a      	beq.n	8012d8e <__ssvfiscanf_r+0x2e6>
 8012cb8:	2802      	cmp	r0, #2
 8012cba:	f47f af1c 	bne.w	8012af6 <__ssvfiscanf_r+0x4e>
 8012cbe:	e7cb      	b.n	8012c58 <__ssvfiscanf_r+0x1b0>
 8012cc0:	2308      	movs	r3, #8
 8012cc2:	9342      	str	r3, [sp, #264]	; 0x108
 8012cc4:	2304      	movs	r3, #4
 8012cc6:	e7e0      	b.n	8012c8a <__ssvfiscanf_r+0x1e2>
 8012cc8:	220a      	movs	r2, #10
 8012cca:	e7d5      	b.n	8012c78 <__ssvfiscanf_r+0x1d0>
 8012ccc:	4629      	mov	r1, r5
 8012cce:	4640      	mov	r0, r8
 8012cd0:	f000 fa5e 	bl	8013190 <__sccl>
 8012cd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cda:	9341      	str	r3, [sp, #260]	; 0x104
 8012cdc:	4605      	mov	r5, r0
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e7d3      	b.n	8012c8a <__ssvfiscanf_r+0x1e2>
 8012ce2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ce8:	9341      	str	r3, [sp, #260]	; 0x104
 8012cea:	2300      	movs	r3, #0
 8012cec:	e7cd      	b.n	8012c8a <__ssvfiscanf_r+0x1e2>
 8012cee:	2302      	movs	r3, #2
 8012cf0:	e7cb      	b.n	8012c8a <__ssvfiscanf_r+0x1e2>
 8012cf2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012cf4:	06c3      	lsls	r3, r0, #27
 8012cf6:	f53f aefe 	bmi.w	8012af6 <__ssvfiscanf_r+0x4e>
 8012cfa:	9b00      	ldr	r3, [sp, #0]
 8012cfc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012cfe:	1d19      	adds	r1, r3, #4
 8012d00:	9100      	str	r1, [sp, #0]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	07c0      	lsls	r0, r0, #31
 8012d06:	bf4c      	ite	mi
 8012d08:	801a      	strhmi	r2, [r3, #0]
 8012d0a:	601a      	strpl	r2, [r3, #0]
 8012d0c:	e6f3      	b.n	8012af6 <__ssvfiscanf_r+0x4e>
 8012d0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012d10:	4621      	mov	r1, r4
 8012d12:	4630      	mov	r0, r6
 8012d14:	4798      	blx	r3
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d0bb      	beq.n	8012c92 <__ssvfiscanf_r+0x1ea>
 8012d1a:	e79d      	b.n	8012c58 <__ssvfiscanf_r+0x1b0>
 8012d1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012d1e:	3201      	adds	r2, #1
 8012d20:	9245      	str	r2, [sp, #276]	; 0x114
 8012d22:	6862      	ldr	r2, [r4, #4]
 8012d24:	3a01      	subs	r2, #1
 8012d26:	2a00      	cmp	r2, #0
 8012d28:	6062      	str	r2, [r4, #4]
 8012d2a:	dd02      	ble.n	8012d32 <__ssvfiscanf_r+0x28a>
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	6023      	str	r3, [r4, #0]
 8012d30:	e7b2      	b.n	8012c98 <__ssvfiscanf_r+0x1f0>
 8012d32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012d34:	4621      	mov	r1, r4
 8012d36:	4630      	mov	r0, r6
 8012d38:	4798      	blx	r3
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	d0ac      	beq.n	8012c98 <__ssvfiscanf_r+0x1f0>
 8012d3e:	e78b      	b.n	8012c58 <__ssvfiscanf_r+0x1b0>
 8012d40:	2b04      	cmp	r3, #4
 8012d42:	dc0f      	bgt.n	8012d64 <__ssvfiscanf_r+0x2bc>
 8012d44:	466b      	mov	r3, sp
 8012d46:	4622      	mov	r2, r4
 8012d48:	a941      	add	r1, sp, #260	; 0x104
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	f000 f87e 	bl	8012e4c <_scanf_i>
 8012d50:	e7b0      	b.n	8012cb4 <__ssvfiscanf_r+0x20c>
 8012d52:	bf00      	nop
 8012d54:	080129f5 	.word	0x080129f5
 8012d58:	08012a6f 	.word	0x08012a6f
 8012d5c:	08015989 	.word	0x08015989
 8012d60:	08015a8f 	.word	0x08015a8f
 8012d64:	4b0b      	ldr	r3, [pc, #44]	; (8012d94 <__ssvfiscanf_r+0x2ec>)
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	f43f aec5 	beq.w	8012af6 <__ssvfiscanf_r+0x4e>
 8012d6c:	466b      	mov	r3, sp
 8012d6e:	4622      	mov	r2, r4
 8012d70:	a941      	add	r1, sp, #260	; 0x104
 8012d72:	4630      	mov	r0, r6
 8012d74:	f7fc fdc8 	bl	800f908 <_scanf_float>
 8012d78:	e79c      	b.n	8012cb4 <__ssvfiscanf_r+0x20c>
 8012d7a:	89a3      	ldrh	r3, [r4, #12]
 8012d7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012d80:	bf18      	it	ne
 8012d82:	f04f 30ff 	movne.w	r0, #4294967295
 8012d86:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d8e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012d90:	e7f9      	b.n	8012d86 <__ssvfiscanf_r+0x2de>
 8012d92:	bf00      	nop
 8012d94:	0800f909 	.word	0x0800f909

08012d98 <_scanf_chars>:
 8012d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d9c:	4615      	mov	r5, r2
 8012d9e:	688a      	ldr	r2, [r1, #8]
 8012da0:	4680      	mov	r8, r0
 8012da2:	460c      	mov	r4, r1
 8012da4:	b932      	cbnz	r2, 8012db4 <_scanf_chars+0x1c>
 8012da6:	698a      	ldr	r2, [r1, #24]
 8012da8:	2a00      	cmp	r2, #0
 8012daa:	bf0c      	ite	eq
 8012dac:	2201      	moveq	r2, #1
 8012dae:	f04f 32ff 	movne.w	r2, #4294967295
 8012db2:	608a      	str	r2, [r1, #8]
 8012db4:	6822      	ldr	r2, [r4, #0]
 8012db6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8012e48 <_scanf_chars+0xb0>
 8012dba:	06d1      	lsls	r1, r2, #27
 8012dbc:	bf5f      	itttt	pl
 8012dbe:	681a      	ldrpl	r2, [r3, #0]
 8012dc0:	1d11      	addpl	r1, r2, #4
 8012dc2:	6019      	strpl	r1, [r3, #0]
 8012dc4:	6816      	ldrpl	r6, [r2, #0]
 8012dc6:	2700      	movs	r7, #0
 8012dc8:	69a0      	ldr	r0, [r4, #24]
 8012dca:	b188      	cbz	r0, 8012df0 <_scanf_chars+0x58>
 8012dcc:	2801      	cmp	r0, #1
 8012dce:	d107      	bne.n	8012de0 <_scanf_chars+0x48>
 8012dd0:	682a      	ldr	r2, [r5, #0]
 8012dd2:	7811      	ldrb	r1, [r2, #0]
 8012dd4:	6962      	ldr	r2, [r4, #20]
 8012dd6:	5c52      	ldrb	r2, [r2, r1]
 8012dd8:	b952      	cbnz	r2, 8012df0 <_scanf_chars+0x58>
 8012dda:	2f00      	cmp	r7, #0
 8012ddc:	d031      	beq.n	8012e42 <_scanf_chars+0xaa>
 8012dde:	e022      	b.n	8012e26 <_scanf_chars+0x8e>
 8012de0:	2802      	cmp	r0, #2
 8012de2:	d120      	bne.n	8012e26 <_scanf_chars+0x8e>
 8012de4:	682b      	ldr	r3, [r5, #0]
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012dec:	071b      	lsls	r3, r3, #28
 8012dee:	d41a      	bmi.n	8012e26 <_scanf_chars+0x8e>
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	06da      	lsls	r2, r3, #27
 8012df4:	bf5e      	ittt	pl
 8012df6:	682b      	ldrpl	r3, [r5, #0]
 8012df8:	781b      	ldrbpl	r3, [r3, #0]
 8012dfa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012dfe:	682a      	ldr	r2, [r5, #0]
 8012e00:	686b      	ldr	r3, [r5, #4]
 8012e02:	3201      	adds	r2, #1
 8012e04:	602a      	str	r2, [r5, #0]
 8012e06:	68a2      	ldr	r2, [r4, #8]
 8012e08:	3b01      	subs	r3, #1
 8012e0a:	3a01      	subs	r2, #1
 8012e0c:	606b      	str	r3, [r5, #4]
 8012e0e:	3701      	adds	r7, #1
 8012e10:	60a2      	str	r2, [r4, #8]
 8012e12:	b142      	cbz	r2, 8012e26 <_scanf_chars+0x8e>
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	dcd7      	bgt.n	8012dc8 <_scanf_chars+0x30>
 8012e18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	4640      	mov	r0, r8
 8012e20:	4798      	blx	r3
 8012e22:	2800      	cmp	r0, #0
 8012e24:	d0d0      	beq.n	8012dc8 <_scanf_chars+0x30>
 8012e26:	6823      	ldr	r3, [r4, #0]
 8012e28:	f013 0310 	ands.w	r3, r3, #16
 8012e2c:	d105      	bne.n	8012e3a <_scanf_chars+0xa2>
 8012e2e:	68e2      	ldr	r2, [r4, #12]
 8012e30:	3201      	adds	r2, #1
 8012e32:	60e2      	str	r2, [r4, #12]
 8012e34:	69a2      	ldr	r2, [r4, #24]
 8012e36:	b102      	cbz	r2, 8012e3a <_scanf_chars+0xa2>
 8012e38:	7033      	strb	r3, [r6, #0]
 8012e3a:	6923      	ldr	r3, [r4, #16]
 8012e3c:	443b      	add	r3, r7
 8012e3e:	6123      	str	r3, [r4, #16]
 8012e40:	2000      	movs	r0, #0
 8012e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e46:	bf00      	nop
 8012e48:	08015989 	.word	0x08015989

08012e4c <_scanf_i>:
 8012e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e50:	4698      	mov	r8, r3
 8012e52:	4b74      	ldr	r3, [pc, #464]	; (8013024 <_scanf_i+0x1d8>)
 8012e54:	460c      	mov	r4, r1
 8012e56:	4682      	mov	sl, r0
 8012e58:	4616      	mov	r6, r2
 8012e5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e5e:	b087      	sub	sp, #28
 8012e60:	ab03      	add	r3, sp, #12
 8012e62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012e66:	4b70      	ldr	r3, [pc, #448]	; (8013028 <_scanf_i+0x1dc>)
 8012e68:	69a1      	ldr	r1, [r4, #24]
 8012e6a:	4a70      	ldr	r2, [pc, #448]	; (801302c <_scanf_i+0x1e0>)
 8012e6c:	2903      	cmp	r1, #3
 8012e6e:	bf18      	it	ne
 8012e70:	461a      	movne	r2, r3
 8012e72:	68a3      	ldr	r3, [r4, #8]
 8012e74:	9201      	str	r2, [sp, #4]
 8012e76:	1e5a      	subs	r2, r3, #1
 8012e78:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012e7c:	bf88      	it	hi
 8012e7e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012e82:	4627      	mov	r7, r4
 8012e84:	bf82      	ittt	hi
 8012e86:	eb03 0905 	addhi.w	r9, r3, r5
 8012e8a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012e8e:	60a3      	strhi	r3, [r4, #8]
 8012e90:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012e94:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012e98:	bf98      	it	ls
 8012e9a:	f04f 0900 	movls.w	r9, #0
 8012e9e:	6023      	str	r3, [r4, #0]
 8012ea0:	463d      	mov	r5, r7
 8012ea2:	f04f 0b00 	mov.w	fp, #0
 8012ea6:	6831      	ldr	r1, [r6, #0]
 8012ea8:	ab03      	add	r3, sp, #12
 8012eaa:	7809      	ldrb	r1, [r1, #0]
 8012eac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012eb0:	2202      	movs	r2, #2
 8012eb2:	f7ed f9b5 	bl	8000220 <memchr>
 8012eb6:	b328      	cbz	r0, 8012f04 <_scanf_i+0xb8>
 8012eb8:	f1bb 0f01 	cmp.w	fp, #1
 8012ebc:	d159      	bne.n	8012f72 <_scanf_i+0x126>
 8012ebe:	6862      	ldr	r2, [r4, #4]
 8012ec0:	b92a      	cbnz	r2, 8012ece <_scanf_i+0x82>
 8012ec2:	6822      	ldr	r2, [r4, #0]
 8012ec4:	2308      	movs	r3, #8
 8012ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012eca:	6063      	str	r3, [r4, #4]
 8012ecc:	6022      	str	r2, [r4, #0]
 8012ece:	6822      	ldr	r2, [r4, #0]
 8012ed0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012ed4:	6022      	str	r2, [r4, #0]
 8012ed6:	68a2      	ldr	r2, [r4, #8]
 8012ed8:	1e51      	subs	r1, r2, #1
 8012eda:	60a1      	str	r1, [r4, #8]
 8012edc:	b192      	cbz	r2, 8012f04 <_scanf_i+0xb8>
 8012ede:	6832      	ldr	r2, [r6, #0]
 8012ee0:	1c51      	adds	r1, r2, #1
 8012ee2:	6031      	str	r1, [r6, #0]
 8012ee4:	7812      	ldrb	r2, [r2, #0]
 8012ee6:	f805 2b01 	strb.w	r2, [r5], #1
 8012eea:	6872      	ldr	r2, [r6, #4]
 8012eec:	3a01      	subs	r2, #1
 8012eee:	2a00      	cmp	r2, #0
 8012ef0:	6072      	str	r2, [r6, #4]
 8012ef2:	dc07      	bgt.n	8012f04 <_scanf_i+0xb8>
 8012ef4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012ef8:	4631      	mov	r1, r6
 8012efa:	4650      	mov	r0, sl
 8012efc:	4790      	blx	r2
 8012efe:	2800      	cmp	r0, #0
 8012f00:	f040 8085 	bne.w	801300e <_scanf_i+0x1c2>
 8012f04:	f10b 0b01 	add.w	fp, fp, #1
 8012f08:	f1bb 0f03 	cmp.w	fp, #3
 8012f0c:	d1cb      	bne.n	8012ea6 <_scanf_i+0x5a>
 8012f0e:	6863      	ldr	r3, [r4, #4]
 8012f10:	b90b      	cbnz	r3, 8012f16 <_scanf_i+0xca>
 8012f12:	230a      	movs	r3, #10
 8012f14:	6063      	str	r3, [r4, #4]
 8012f16:	6863      	ldr	r3, [r4, #4]
 8012f18:	4945      	ldr	r1, [pc, #276]	; (8013030 <_scanf_i+0x1e4>)
 8012f1a:	6960      	ldr	r0, [r4, #20]
 8012f1c:	1ac9      	subs	r1, r1, r3
 8012f1e:	f000 f937 	bl	8013190 <__sccl>
 8012f22:	f04f 0b00 	mov.w	fp, #0
 8012f26:	68a3      	ldr	r3, [r4, #8]
 8012f28:	6822      	ldr	r2, [r4, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d03d      	beq.n	8012faa <_scanf_i+0x15e>
 8012f2e:	6831      	ldr	r1, [r6, #0]
 8012f30:	6960      	ldr	r0, [r4, #20]
 8012f32:	f891 c000 	ldrb.w	ip, [r1]
 8012f36:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	d035      	beq.n	8012faa <_scanf_i+0x15e>
 8012f3e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012f42:	d124      	bne.n	8012f8e <_scanf_i+0x142>
 8012f44:	0510      	lsls	r0, r2, #20
 8012f46:	d522      	bpl.n	8012f8e <_scanf_i+0x142>
 8012f48:	f10b 0b01 	add.w	fp, fp, #1
 8012f4c:	f1b9 0f00 	cmp.w	r9, #0
 8012f50:	d003      	beq.n	8012f5a <_scanf_i+0x10e>
 8012f52:	3301      	adds	r3, #1
 8012f54:	f109 39ff 	add.w	r9, r9, #4294967295
 8012f58:	60a3      	str	r3, [r4, #8]
 8012f5a:	6873      	ldr	r3, [r6, #4]
 8012f5c:	3b01      	subs	r3, #1
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	6073      	str	r3, [r6, #4]
 8012f62:	dd1b      	ble.n	8012f9c <_scanf_i+0x150>
 8012f64:	6833      	ldr	r3, [r6, #0]
 8012f66:	3301      	adds	r3, #1
 8012f68:	6033      	str	r3, [r6, #0]
 8012f6a:	68a3      	ldr	r3, [r4, #8]
 8012f6c:	3b01      	subs	r3, #1
 8012f6e:	60a3      	str	r3, [r4, #8]
 8012f70:	e7d9      	b.n	8012f26 <_scanf_i+0xda>
 8012f72:	f1bb 0f02 	cmp.w	fp, #2
 8012f76:	d1ae      	bne.n	8012ed6 <_scanf_i+0x8a>
 8012f78:	6822      	ldr	r2, [r4, #0]
 8012f7a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012f7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012f82:	d1bf      	bne.n	8012f04 <_scanf_i+0xb8>
 8012f84:	2310      	movs	r3, #16
 8012f86:	6063      	str	r3, [r4, #4]
 8012f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f8c:	e7a2      	b.n	8012ed4 <_scanf_i+0x88>
 8012f8e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012f92:	6022      	str	r2, [r4, #0]
 8012f94:	780b      	ldrb	r3, [r1, #0]
 8012f96:	f805 3b01 	strb.w	r3, [r5], #1
 8012f9a:	e7de      	b.n	8012f5a <_scanf_i+0x10e>
 8012f9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012fa0:	4631      	mov	r1, r6
 8012fa2:	4650      	mov	r0, sl
 8012fa4:	4798      	blx	r3
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	d0df      	beq.n	8012f6a <_scanf_i+0x11e>
 8012faa:	6823      	ldr	r3, [r4, #0]
 8012fac:	05d9      	lsls	r1, r3, #23
 8012fae:	d50d      	bpl.n	8012fcc <_scanf_i+0x180>
 8012fb0:	42bd      	cmp	r5, r7
 8012fb2:	d909      	bls.n	8012fc8 <_scanf_i+0x17c>
 8012fb4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fbc:	4632      	mov	r2, r6
 8012fbe:	4650      	mov	r0, sl
 8012fc0:	4798      	blx	r3
 8012fc2:	f105 39ff 	add.w	r9, r5, #4294967295
 8012fc6:	464d      	mov	r5, r9
 8012fc8:	42bd      	cmp	r5, r7
 8012fca:	d028      	beq.n	801301e <_scanf_i+0x1d2>
 8012fcc:	6822      	ldr	r2, [r4, #0]
 8012fce:	f012 0210 	ands.w	r2, r2, #16
 8012fd2:	d113      	bne.n	8012ffc <_scanf_i+0x1b0>
 8012fd4:	702a      	strb	r2, [r5, #0]
 8012fd6:	6863      	ldr	r3, [r4, #4]
 8012fd8:	9e01      	ldr	r6, [sp, #4]
 8012fda:	4639      	mov	r1, r7
 8012fdc:	4650      	mov	r0, sl
 8012fde:	47b0      	blx	r6
 8012fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8012fe4:	6821      	ldr	r1, [r4, #0]
 8012fe6:	1d1a      	adds	r2, r3, #4
 8012fe8:	f8c8 2000 	str.w	r2, [r8]
 8012fec:	f011 0f20 	tst.w	r1, #32
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	d00f      	beq.n	8013014 <_scanf_i+0x1c8>
 8012ff4:	6018      	str	r0, [r3, #0]
 8012ff6:	68e3      	ldr	r3, [r4, #12]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	60e3      	str	r3, [r4, #12]
 8012ffc:	6923      	ldr	r3, [r4, #16]
 8012ffe:	1bed      	subs	r5, r5, r7
 8013000:	445d      	add	r5, fp
 8013002:	442b      	add	r3, r5
 8013004:	6123      	str	r3, [r4, #16]
 8013006:	2000      	movs	r0, #0
 8013008:	b007      	add	sp, #28
 801300a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801300e:	f04f 0b00 	mov.w	fp, #0
 8013012:	e7ca      	b.n	8012faa <_scanf_i+0x15e>
 8013014:	07ca      	lsls	r2, r1, #31
 8013016:	bf4c      	ite	mi
 8013018:	8018      	strhmi	r0, [r3, #0]
 801301a:	6018      	strpl	r0, [r3, #0]
 801301c:	e7eb      	b.n	8012ff6 <_scanf_i+0x1aa>
 801301e:	2001      	movs	r0, #1
 8013020:	e7f2      	b.n	8013008 <_scanf_i+0x1bc>
 8013022:	bf00      	nop
 8013024:	080156e8 	.word	0x080156e8
 8013028:	08013b5d 	.word	0x08013b5d
 801302c:	08012741 	.word	0x08012741
 8013030:	08015aaa 	.word	0x08015aaa

08013034 <__sflush_r>:
 8013034:	898a      	ldrh	r2, [r1, #12]
 8013036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801303a:	4605      	mov	r5, r0
 801303c:	0710      	lsls	r0, r2, #28
 801303e:	460c      	mov	r4, r1
 8013040:	d458      	bmi.n	80130f4 <__sflush_r+0xc0>
 8013042:	684b      	ldr	r3, [r1, #4]
 8013044:	2b00      	cmp	r3, #0
 8013046:	dc05      	bgt.n	8013054 <__sflush_r+0x20>
 8013048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801304a:	2b00      	cmp	r3, #0
 801304c:	dc02      	bgt.n	8013054 <__sflush_r+0x20>
 801304e:	2000      	movs	r0, #0
 8013050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013056:	2e00      	cmp	r6, #0
 8013058:	d0f9      	beq.n	801304e <__sflush_r+0x1a>
 801305a:	2300      	movs	r3, #0
 801305c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013060:	682f      	ldr	r7, [r5, #0]
 8013062:	6a21      	ldr	r1, [r4, #32]
 8013064:	602b      	str	r3, [r5, #0]
 8013066:	d032      	beq.n	80130ce <__sflush_r+0x9a>
 8013068:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801306a:	89a3      	ldrh	r3, [r4, #12]
 801306c:	075a      	lsls	r2, r3, #29
 801306e:	d505      	bpl.n	801307c <__sflush_r+0x48>
 8013070:	6863      	ldr	r3, [r4, #4]
 8013072:	1ac0      	subs	r0, r0, r3
 8013074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013076:	b10b      	cbz	r3, 801307c <__sflush_r+0x48>
 8013078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801307a:	1ac0      	subs	r0, r0, r3
 801307c:	2300      	movs	r3, #0
 801307e:	4602      	mov	r2, r0
 8013080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013082:	6a21      	ldr	r1, [r4, #32]
 8013084:	4628      	mov	r0, r5
 8013086:	47b0      	blx	r6
 8013088:	1c43      	adds	r3, r0, #1
 801308a:	89a3      	ldrh	r3, [r4, #12]
 801308c:	d106      	bne.n	801309c <__sflush_r+0x68>
 801308e:	6829      	ldr	r1, [r5, #0]
 8013090:	291d      	cmp	r1, #29
 8013092:	d82b      	bhi.n	80130ec <__sflush_r+0xb8>
 8013094:	4a29      	ldr	r2, [pc, #164]	; (801313c <__sflush_r+0x108>)
 8013096:	410a      	asrs	r2, r1
 8013098:	07d6      	lsls	r6, r2, #31
 801309a:	d427      	bmi.n	80130ec <__sflush_r+0xb8>
 801309c:	2200      	movs	r2, #0
 801309e:	6062      	str	r2, [r4, #4]
 80130a0:	04d9      	lsls	r1, r3, #19
 80130a2:	6922      	ldr	r2, [r4, #16]
 80130a4:	6022      	str	r2, [r4, #0]
 80130a6:	d504      	bpl.n	80130b2 <__sflush_r+0x7e>
 80130a8:	1c42      	adds	r2, r0, #1
 80130aa:	d101      	bne.n	80130b0 <__sflush_r+0x7c>
 80130ac:	682b      	ldr	r3, [r5, #0]
 80130ae:	b903      	cbnz	r3, 80130b2 <__sflush_r+0x7e>
 80130b0:	6560      	str	r0, [r4, #84]	; 0x54
 80130b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130b4:	602f      	str	r7, [r5, #0]
 80130b6:	2900      	cmp	r1, #0
 80130b8:	d0c9      	beq.n	801304e <__sflush_r+0x1a>
 80130ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130be:	4299      	cmp	r1, r3
 80130c0:	d002      	beq.n	80130c8 <__sflush_r+0x94>
 80130c2:	4628      	mov	r0, r5
 80130c4:	f7fd fefa 	bl	8010ebc <_free_r>
 80130c8:	2000      	movs	r0, #0
 80130ca:	6360      	str	r0, [r4, #52]	; 0x34
 80130cc:	e7c0      	b.n	8013050 <__sflush_r+0x1c>
 80130ce:	2301      	movs	r3, #1
 80130d0:	4628      	mov	r0, r5
 80130d2:	47b0      	blx	r6
 80130d4:	1c41      	adds	r1, r0, #1
 80130d6:	d1c8      	bne.n	801306a <__sflush_r+0x36>
 80130d8:	682b      	ldr	r3, [r5, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d0c5      	beq.n	801306a <__sflush_r+0x36>
 80130de:	2b1d      	cmp	r3, #29
 80130e0:	d001      	beq.n	80130e6 <__sflush_r+0xb2>
 80130e2:	2b16      	cmp	r3, #22
 80130e4:	d101      	bne.n	80130ea <__sflush_r+0xb6>
 80130e6:	602f      	str	r7, [r5, #0]
 80130e8:	e7b1      	b.n	801304e <__sflush_r+0x1a>
 80130ea:	89a3      	ldrh	r3, [r4, #12]
 80130ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130f0:	81a3      	strh	r3, [r4, #12]
 80130f2:	e7ad      	b.n	8013050 <__sflush_r+0x1c>
 80130f4:	690f      	ldr	r7, [r1, #16]
 80130f6:	2f00      	cmp	r7, #0
 80130f8:	d0a9      	beq.n	801304e <__sflush_r+0x1a>
 80130fa:	0793      	lsls	r3, r2, #30
 80130fc:	680e      	ldr	r6, [r1, #0]
 80130fe:	bf08      	it	eq
 8013100:	694b      	ldreq	r3, [r1, #20]
 8013102:	600f      	str	r7, [r1, #0]
 8013104:	bf18      	it	ne
 8013106:	2300      	movne	r3, #0
 8013108:	eba6 0807 	sub.w	r8, r6, r7
 801310c:	608b      	str	r3, [r1, #8]
 801310e:	f1b8 0f00 	cmp.w	r8, #0
 8013112:	dd9c      	ble.n	801304e <__sflush_r+0x1a>
 8013114:	6a21      	ldr	r1, [r4, #32]
 8013116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013118:	4643      	mov	r3, r8
 801311a:	463a      	mov	r2, r7
 801311c:	4628      	mov	r0, r5
 801311e:	47b0      	blx	r6
 8013120:	2800      	cmp	r0, #0
 8013122:	dc06      	bgt.n	8013132 <__sflush_r+0xfe>
 8013124:	89a3      	ldrh	r3, [r4, #12]
 8013126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801312a:	81a3      	strh	r3, [r4, #12]
 801312c:	f04f 30ff 	mov.w	r0, #4294967295
 8013130:	e78e      	b.n	8013050 <__sflush_r+0x1c>
 8013132:	4407      	add	r7, r0
 8013134:	eba8 0800 	sub.w	r8, r8, r0
 8013138:	e7e9      	b.n	801310e <__sflush_r+0xda>
 801313a:	bf00      	nop
 801313c:	dfbffffe 	.word	0xdfbffffe

08013140 <_fflush_r>:
 8013140:	b538      	push	{r3, r4, r5, lr}
 8013142:	690b      	ldr	r3, [r1, #16]
 8013144:	4605      	mov	r5, r0
 8013146:	460c      	mov	r4, r1
 8013148:	b913      	cbnz	r3, 8013150 <_fflush_r+0x10>
 801314a:	2500      	movs	r5, #0
 801314c:	4628      	mov	r0, r5
 801314e:	bd38      	pop	{r3, r4, r5, pc}
 8013150:	b118      	cbz	r0, 801315a <_fflush_r+0x1a>
 8013152:	6a03      	ldr	r3, [r0, #32]
 8013154:	b90b      	cbnz	r3, 801315a <_fflush_r+0x1a>
 8013156:	f7fc fe73 	bl	800fe40 <__sinit>
 801315a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d0f3      	beq.n	801314a <_fflush_r+0xa>
 8013162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013164:	07d0      	lsls	r0, r2, #31
 8013166:	d404      	bmi.n	8013172 <_fflush_r+0x32>
 8013168:	0599      	lsls	r1, r3, #22
 801316a:	d402      	bmi.n	8013172 <_fflush_r+0x32>
 801316c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801316e:	f7fd f814 	bl	801019a <__retarget_lock_acquire_recursive>
 8013172:	4628      	mov	r0, r5
 8013174:	4621      	mov	r1, r4
 8013176:	f7ff ff5d 	bl	8013034 <__sflush_r>
 801317a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801317c:	07da      	lsls	r2, r3, #31
 801317e:	4605      	mov	r5, r0
 8013180:	d4e4      	bmi.n	801314c <_fflush_r+0xc>
 8013182:	89a3      	ldrh	r3, [r4, #12]
 8013184:	059b      	lsls	r3, r3, #22
 8013186:	d4e1      	bmi.n	801314c <_fflush_r+0xc>
 8013188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801318a:	f7fd f807 	bl	801019c <__retarget_lock_release_recursive>
 801318e:	e7dd      	b.n	801314c <_fflush_r+0xc>

08013190 <__sccl>:
 8013190:	b570      	push	{r4, r5, r6, lr}
 8013192:	780b      	ldrb	r3, [r1, #0]
 8013194:	4604      	mov	r4, r0
 8013196:	2b5e      	cmp	r3, #94	; 0x5e
 8013198:	bf0b      	itete	eq
 801319a:	784b      	ldrbeq	r3, [r1, #1]
 801319c:	1c4a      	addne	r2, r1, #1
 801319e:	1c8a      	addeq	r2, r1, #2
 80131a0:	2100      	movne	r1, #0
 80131a2:	bf08      	it	eq
 80131a4:	2101      	moveq	r1, #1
 80131a6:	3801      	subs	r0, #1
 80131a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80131ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 80131b0:	42a8      	cmp	r0, r5
 80131b2:	d1fb      	bne.n	80131ac <__sccl+0x1c>
 80131b4:	b90b      	cbnz	r3, 80131ba <__sccl+0x2a>
 80131b6:	1e50      	subs	r0, r2, #1
 80131b8:	bd70      	pop	{r4, r5, r6, pc}
 80131ba:	f081 0101 	eor.w	r1, r1, #1
 80131be:	54e1      	strb	r1, [r4, r3]
 80131c0:	4610      	mov	r0, r2
 80131c2:	4602      	mov	r2, r0
 80131c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80131c8:	2d2d      	cmp	r5, #45	; 0x2d
 80131ca:	d005      	beq.n	80131d8 <__sccl+0x48>
 80131cc:	2d5d      	cmp	r5, #93	; 0x5d
 80131ce:	d016      	beq.n	80131fe <__sccl+0x6e>
 80131d0:	2d00      	cmp	r5, #0
 80131d2:	d0f1      	beq.n	80131b8 <__sccl+0x28>
 80131d4:	462b      	mov	r3, r5
 80131d6:	e7f2      	b.n	80131be <__sccl+0x2e>
 80131d8:	7846      	ldrb	r6, [r0, #1]
 80131da:	2e5d      	cmp	r6, #93	; 0x5d
 80131dc:	d0fa      	beq.n	80131d4 <__sccl+0x44>
 80131de:	42b3      	cmp	r3, r6
 80131e0:	dcf8      	bgt.n	80131d4 <__sccl+0x44>
 80131e2:	3002      	adds	r0, #2
 80131e4:	461a      	mov	r2, r3
 80131e6:	3201      	adds	r2, #1
 80131e8:	4296      	cmp	r6, r2
 80131ea:	54a1      	strb	r1, [r4, r2]
 80131ec:	dcfb      	bgt.n	80131e6 <__sccl+0x56>
 80131ee:	1af2      	subs	r2, r6, r3
 80131f0:	3a01      	subs	r2, #1
 80131f2:	1c5d      	adds	r5, r3, #1
 80131f4:	42b3      	cmp	r3, r6
 80131f6:	bfa8      	it	ge
 80131f8:	2200      	movge	r2, #0
 80131fa:	18ab      	adds	r3, r5, r2
 80131fc:	e7e1      	b.n	80131c2 <__sccl+0x32>
 80131fe:	4610      	mov	r0, r2
 8013200:	e7da      	b.n	80131b8 <__sccl+0x28>

08013202 <__submore>:
 8013202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013206:	460c      	mov	r4, r1
 8013208:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801320a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801320e:	4299      	cmp	r1, r3
 8013210:	d11d      	bne.n	801324e <__submore+0x4c>
 8013212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013216:	f7fd fec5 	bl	8010fa4 <_malloc_r>
 801321a:	b918      	cbnz	r0, 8013224 <__submore+0x22>
 801321c:	f04f 30ff 	mov.w	r0, #4294967295
 8013220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013228:	63a3      	str	r3, [r4, #56]	; 0x38
 801322a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801322e:	6360      	str	r0, [r4, #52]	; 0x34
 8013230:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013234:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013238:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801323c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013240:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013244:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013248:	6020      	str	r0, [r4, #0]
 801324a:	2000      	movs	r0, #0
 801324c:	e7e8      	b.n	8013220 <__submore+0x1e>
 801324e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013250:	0077      	lsls	r7, r6, #1
 8013252:	463a      	mov	r2, r7
 8013254:	f000 fbe1 	bl	8013a1a <_realloc_r>
 8013258:	4605      	mov	r5, r0
 801325a:	2800      	cmp	r0, #0
 801325c:	d0de      	beq.n	801321c <__submore+0x1a>
 801325e:	eb00 0806 	add.w	r8, r0, r6
 8013262:	4601      	mov	r1, r0
 8013264:	4632      	mov	r2, r6
 8013266:	4640      	mov	r0, r8
 8013268:	f7fc ff99 	bl	801019e <memcpy>
 801326c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013270:	f8c4 8000 	str.w	r8, [r4]
 8013274:	e7e9      	b.n	801324a <__submore+0x48>

08013276 <memmove>:
 8013276:	4288      	cmp	r0, r1
 8013278:	b510      	push	{r4, lr}
 801327a:	eb01 0402 	add.w	r4, r1, r2
 801327e:	d902      	bls.n	8013286 <memmove+0x10>
 8013280:	4284      	cmp	r4, r0
 8013282:	4623      	mov	r3, r4
 8013284:	d807      	bhi.n	8013296 <memmove+0x20>
 8013286:	1e43      	subs	r3, r0, #1
 8013288:	42a1      	cmp	r1, r4
 801328a:	d008      	beq.n	801329e <memmove+0x28>
 801328c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013290:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013294:	e7f8      	b.n	8013288 <memmove+0x12>
 8013296:	4402      	add	r2, r0
 8013298:	4601      	mov	r1, r0
 801329a:	428a      	cmp	r2, r1
 801329c:	d100      	bne.n	80132a0 <memmove+0x2a>
 801329e:	bd10      	pop	{r4, pc}
 80132a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132a8:	e7f7      	b.n	801329a <memmove+0x24>
	...

080132ac <_sbrk_r>:
 80132ac:	b538      	push	{r3, r4, r5, lr}
 80132ae:	4d06      	ldr	r5, [pc, #24]	; (80132c8 <_sbrk_r+0x1c>)
 80132b0:	2300      	movs	r3, #0
 80132b2:	4604      	mov	r4, r0
 80132b4:	4608      	mov	r0, r1
 80132b6:	602b      	str	r3, [r5, #0]
 80132b8:	f7f0 fbba 	bl	8003a30 <_sbrk>
 80132bc:	1c43      	adds	r3, r0, #1
 80132be:	d102      	bne.n	80132c6 <_sbrk_r+0x1a>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	b103      	cbz	r3, 80132c6 <_sbrk_r+0x1a>
 80132c4:	6023      	str	r3, [r4, #0]
 80132c6:	bd38      	pop	{r3, r4, r5, pc}
 80132c8:	20004a60 	.word	0x20004a60
 80132cc:	00000000 	.word	0x00000000

080132d0 <nan>:
 80132d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80132d8 <nan+0x8>
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	00000000 	.word	0x00000000
 80132dc:	7ff80000 	.word	0x7ff80000

080132e0 <__assert_func>:
 80132e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80132e2:	4614      	mov	r4, r2
 80132e4:	461a      	mov	r2, r3
 80132e6:	4b09      	ldr	r3, [pc, #36]	; (801330c <__assert_func+0x2c>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	4605      	mov	r5, r0
 80132ec:	68d8      	ldr	r0, [r3, #12]
 80132ee:	b14c      	cbz	r4, 8013304 <__assert_func+0x24>
 80132f0:	4b07      	ldr	r3, [pc, #28]	; (8013310 <__assert_func+0x30>)
 80132f2:	9100      	str	r1, [sp, #0]
 80132f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80132f8:	4906      	ldr	r1, [pc, #24]	; (8013314 <__assert_func+0x34>)
 80132fa:	462b      	mov	r3, r5
 80132fc:	f000 fc3e 	bl	8013b7c <fiprintf>
 8013300:	f000 fc4e 	bl	8013ba0 <abort>
 8013304:	4b04      	ldr	r3, [pc, #16]	; (8013318 <__assert_func+0x38>)
 8013306:	461c      	mov	r4, r3
 8013308:	e7f3      	b.n	80132f2 <__assert_func+0x12>
 801330a:	bf00      	nop
 801330c:	20000074 	.word	0x20000074
 8013310:	08015abd 	.word	0x08015abd
 8013314:	08015aca 	.word	0x08015aca
 8013318:	08015af8 	.word	0x08015af8

0801331c <_calloc_r>:
 801331c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801331e:	fba1 2402 	umull	r2, r4, r1, r2
 8013322:	b94c      	cbnz	r4, 8013338 <_calloc_r+0x1c>
 8013324:	4611      	mov	r1, r2
 8013326:	9201      	str	r2, [sp, #4]
 8013328:	f7fd fe3c 	bl	8010fa4 <_malloc_r>
 801332c:	9a01      	ldr	r2, [sp, #4]
 801332e:	4605      	mov	r5, r0
 8013330:	b930      	cbnz	r0, 8013340 <_calloc_r+0x24>
 8013332:	4628      	mov	r0, r5
 8013334:	b003      	add	sp, #12
 8013336:	bd30      	pop	{r4, r5, pc}
 8013338:	220c      	movs	r2, #12
 801333a:	6002      	str	r2, [r0, #0]
 801333c:	2500      	movs	r5, #0
 801333e:	e7f8      	b.n	8013332 <_calloc_r+0x16>
 8013340:	4621      	mov	r1, r4
 8013342:	f7fc fe44 	bl	800ffce <memset>
 8013346:	e7f4      	b.n	8013332 <_calloc_r+0x16>

08013348 <rshift>:
 8013348:	6903      	ldr	r3, [r0, #16]
 801334a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801334e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013352:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013356:	f100 0414 	add.w	r4, r0, #20
 801335a:	dd45      	ble.n	80133e8 <rshift+0xa0>
 801335c:	f011 011f 	ands.w	r1, r1, #31
 8013360:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013364:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013368:	d10c      	bne.n	8013384 <rshift+0x3c>
 801336a:	f100 0710 	add.w	r7, r0, #16
 801336e:	4629      	mov	r1, r5
 8013370:	42b1      	cmp	r1, r6
 8013372:	d334      	bcc.n	80133de <rshift+0x96>
 8013374:	1a9b      	subs	r3, r3, r2
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	1eea      	subs	r2, r5, #3
 801337a:	4296      	cmp	r6, r2
 801337c:	bf38      	it	cc
 801337e:	2300      	movcc	r3, #0
 8013380:	4423      	add	r3, r4
 8013382:	e015      	b.n	80133b0 <rshift+0x68>
 8013384:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013388:	f1c1 0820 	rsb	r8, r1, #32
 801338c:	40cf      	lsrs	r7, r1
 801338e:	f105 0e04 	add.w	lr, r5, #4
 8013392:	46a1      	mov	r9, r4
 8013394:	4576      	cmp	r6, lr
 8013396:	46f4      	mov	ip, lr
 8013398:	d815      	bhi.n	80133c6 <rshift+0x7e>
 801339a:	1a9a      	subs	r2, r3, r2
 801339c:	0092      	lsls	r2, r2, #2
 801339e:	3a04      	subs	r2, #4
 80133a0:	3501      	adds	r5, #1
 80133a2:	42ae      	cmp	r6, r5
 80133a4:	bf38      	it	cc
 80133a6:	2200      	movcc	r2, #0
 80133a8:	18a3      	adds	r3, r4, r2
 80133aa:	50a7      	str	r7, [r4, r2]
 80133ac:	b107      	cbz	r7, 80133b0 <rshift+0x68>
 80133ae:	3304      	adds	r3, #4
 80133b0:	1b1a      	subs	r2, r3, r4
 80133b2:	42a3      	cmp	r3, r4
 80133b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80133b8:	bf08      	it	eq
 80133ba:	2300      	moveq	r3, #0
 80133bc:	6102      	str	r2, [r0, #16]
 80133be:	bf08      	it	eq
 80133c0:	6143      	streq	r3, [r0, #20]
 80133c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133c6:	f8dc c000 	ldr.w	ip, [ip]
 80133ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80133ce:	ea4c 0707 	orr.w	r7, ip, r7
 80133d2:	f849 7b04 	str.w	r7, [r9], #4
 80133d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80133da:	40cf      	lsrs	r7, r1
 80133dc:	e7da      	b.n	8013394 <rshift+0x4c>
 80133de:	f851 cb04 	ldr.w	ip, [r1], #4
 80133e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80133e6:	e7c3      	b.n	8013370 <rshift+0x28>
 80133e8:	4623      	mov	r3, r4
 80133ea:	e7e1      	b.n	80133b0 <rshift+0x68>

080133ec <__hexdig_fun>:
 80133ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80133f0:	2b09      	cmp	r3, #9
 80133f2:	d802      	bhi.n	80133fa <__hexdig_fun+0xe>
 80133f4:	3820      	subs	r0, #32
 80133f6:	b2c0      	uxtb	r0, r0
 80133f8:	4770      	bx	lr
 80133fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80133fe:	2b05      	cmp	r3, #5
 8013400:	d801      	bhi.n	8013406 <__hexdig_fun+0x1a>
 8013402:	3847      	subs	r0, #71	; 0x47
 8013404:	e7f7      	b.n	80133f6 <__hexdig_fun+0xa>
 8013406:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801340a:	2b05      	cmp	r3, #5
 801340c:	d801      	bhi.n	8013412 <__hexdig_fun+0x26>
 801340e:	3827      	subs	r0, #39	; 0x27
 8013410:	e7f1      	b.n	80133f6 <__hexdig_fun+0xa>
 8013412:	2000      	movs	r0, #0
 8013414:	4770      	bx	lr
	...

08013418 <__gethex>:
 8013418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801341c:	4617      	mov	r7, r2
 801341e:	680a      	ldr	r2, [r1, #0]
 8013420:	b085      	sub	sp, #20
 8013422:	f102 0b02 	add.w	fp, r2, #2
 8013426:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801342a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801342e:	4681      	mov	r9, r0
 8013430:	468a      	mov	sl, r1
 8013432:	9302      	str	r3, [sp, #8]
 8013434:	32fe      	adds	r2, #254	; 0xfe
 8013436:	eb02 030b 	add.w	r3, r2, fp
 801343a:	46d8      	mov	r8, fp
 801343c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013440:	9301      	str	r3, [sp, #4]
 8013442:	2830      	cmp	r0, #48	; 0x30
 8013444:	d0f7      	beq.n	8013436 <__gethex+0x1e>
 8013446:	f7ff ffd1 	bl	80133ec <__hexdig_fun>
 801344a:	4604      	mov	r4, r0
 801344c:	2800      	cmp	r0, #0
 801344e:	d138      	bne.n	80134c2 <__gethex+0xaa>
 8013450:	49a7      	ldr	r1, [pc, #668]	; (80136f0 <__gethex+0x2d8>)
 8013452:	2201      	movs	r2, #1
 8013454:	4640      	mov	r0, r8
 8013456:	f7fc fdc2 	bl	800ffde <strncmp>
 801345a:	4606      	mov	r6, r0
 801345c:	2800      	cmp	r0, #0
 801345e:	d169      	bne.n	8013534 <__gethex+0x11c>
 8013460:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013464:	465d      	mov	r5, fp
 8013466:	f7ff ffc1 	bl	80133ec <__hexdig_fun>
 801346a:	2800      	cmp	r0, #0
 801346c:	d064      	beq.n	8013538 <__gethex+0x120>
 801346e:	465a      	mov	r2, fp
 8013470:	7810      	ldrb	r0, [r2, #0]
 8013472:	2830      	cmp	r0, #48	; 0x30
 8013474:	4690      	mov	r8, r2
 8013476:	f102 0201 	add.w	r2, r2, #1
 801347a:	d0f9      	beq.n	8013470 <__gethex+0x58>
 801347c:	f7ff ffb6 	bl	80133ec <__hexdig_fun>
 8013480:	2301      	movs	r3, #1
 8013482:	fab0 f480 	clz	r4, r0
 8013486:	0964      	lsrs	r4, r4, #5
 8013488:	465e      	mov	r6, fp
 801348a:	9301      	str	r3, [sp, #4]
 801348c:	4642      	mov	r2, r8
 801348e:	4615      	mov	r5, r2
 8013490:	3201      	adds	r2, #1
 8013492:	7828      	ldrb	r0, [r5, #0]
 8013494:	f7ff ffaa 	bl	80133ec <__hexdig_fun>
 8013498:	2800      	cmp	r0, #0
 801349a:	d1f8      	bne.n	801348e <__gethex+0x76>
 801349c:	4994      	ldr	r1, [pc, #592]	; (80136f0 <__gethex+0x2d8>)
 801349e:	2201      	movs	r2, #1
 80134a0:	4628      	mov	r0, r5
 80134a2:	f7fc fd9c 	bl	800ffde <strncmp>
 80134a6:	b978      	cbnz	r0, 80134c8 <__gethex+0xb0>
 80134a8:	b946      	cbnz	r6, 80134bc <__gethex+0xa4>
 80134aa:	1c6e      	adds	r6, r5, #1
 80134ac:	4632      	mov	r2, r6
 80134ae:	4615      	mov	r5, r2
 80134b0:	3201      	adds	r2, #1
 80134b2:	7828      	ldrb	r0, [r5, #0]
 80134b4:	f7ff ff9a 	bl	80133ec <__hexdig_fun>
 80134b8:	2800      	cmp	r0, #0
 80134ba:	d1f8      	bne.n	80134ae <__gethex+0x96>
 80134bc:	1b73      	subs	r3, r6, r5
 80134be:	009e      	lsls	r6, r3, #2
 80134c0:	e004      	b.n	80134cc <__gethex+0xb4>
 80134c2:	2400      	movs	r4, #0
 80134c4:	4626      	mov	r6, r4
 80134c6:	e7e1      	b.n	801348c <__gethex+0x74>
 80134c8:	2e00      	cmp	r6, #0
 80134ca:	d1f7      	bne.n	80134bc <__gethex+0xa4>
 80134cc:	782b      	ldrb	r3, [r5, #0]
 80134ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80134d2:	2b50      	cmp	r3, #80	; 0x50
 80134d4:	d13d      	bne.n	8013552 <__gethex+0x13a>
 80134d6:	786b      	ldrb	r3, [r5, #1]
 80134d8:	2b2b      	cmp	r3, #43	; 0x2b
 80134da:	d02f      	beq.n	801353c <__gethex+0x124>
 80134dc:	2b2d      	cmp	r3, #45	; 0x2d
 80134de:	d031      	beq.n	8013544 <__gethex+0x12c>
 80134e0:	1c69      	adds	r1, r5, #1
 80134e2:	f04f 0b00 	mov.w	fp, #0
 80134e6:	7808      	ldrb	r0, [r1, #0]
 80134e8:	f7ff ff80 	bl	80133ec <__hexdig_fun>
 80134ec:	1e42      	subs	r2, r0, #1
 80134ee:	b2d2      	uxtb	r2, r2
 80134f0:	2a18      	cmp	r2, #24
 80134f2:	d82e      	bhi.n	8013552 <__gethex+0x13a>
 80134f4:	f1a0 0210 	sub.w	r2, r0, #16
 80134f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80134fc:	f7ff ff76 	bl	80133ec <__hexdig_fun>
 8013500:	f100 3cff 	add.w	ip, r0, #4294967295
 8013504:	fa5f fc8c 	uxtb.w	ip, ip
 8013508:	f1bc 0f18 	cmp.w	ip, #24
 801350c:	d91d      	bls.n	801354a <__gethex+0x132>
 801350e:	f1bb 0f00 	cmp.w	fp, #0
 8013512:	d000      	beq.n	8013516 <__gethex+0xfe>
 8013514:	4252      	negs	r2, r2
 8013516:	4416      	add	r6, r2
 8013518:	f8ca 1000 	str.w	r1, [sl]
 801351c:	b1dc      	cbz	r4, 8013556 <__gethex+0x13e>
 801351e:	9b01      	ldr	r3, [sp, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	bf14      	ite	ne
 8013524:	f04f 0800 	movne.w	r8, #0
 8013528:	f04f 0806 	moveq.w	r8, #6
 801352c:	4640      	mov	r0, r8
 801352e:	b005      	add	sp, #20
 8013530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013534:	4645      	mov	r5, r8
 8013536:	4626      	mov	r6, r4
 8013538:	2401      	movs	r4, #1
 801353a:	e7c7      	b.n	80134cc <__gethex+0xb4>
 801353c:	f04f 0b00 	mov.w	fp, #0
 8013540:	1ca9      	adds	r1, r5, #2
 8013542:	e7d0      	b.n	80134e6 <__gethex+0xce>
 8013544:	f04f 0b01 	mov.w	fp, #1
 8013548:	e7fa      	b.n	8013540 <__gethex+0x128>
 801354a:	230a      	movs	r3, #10
 801354c:	fb03 0002 	mla	r0, r3, r2, r0
 8013550:	e7d0      	b.n	80134f4 <__gethex+0xdc>
 8013552:	4629      	mov	r1, r5
 8013554:	e7e0      	b.n	8013518 <__gethex+0x100>
 8013556:	eba5 0308 	sub.w	r3, r5, r8
 801355a:	3b01      	subs	r3, #1
 801355c:	4621      	mov	r1, r4
 801355e:	2b07      	cmp	r3, #7
 8013560:	dc0a      	bgt.n	8013578 <__gethex+0x160>
 8013562:	4648      	mov	r0, r9
 8013564:	f7fd fdaa 	bl	80110bc <_Balloc>
 8013568:	4604      	mov	r4, r0
 801356a:	b940      	cbnz	r0, 801357e <__gethex+0x166>
 801356c:	4b61      	ldr	r3, [pc, #388]	; (80136f4 <__gethex+0x2dc>)
 801356e:	4602      	mov	r2, r0
 8013570:	21e4      	movs	r1, #228	; 0xe4
 8013572:	4861      	ldr	r0, [pc, #388]	; (80136f8 <__gethex+0x2e0>)
 8013574:	f7ff feb4 	bl	80132e0 <__assert_func>
 8013578:	3101      	adds	r1, #1
 801357a:	105b      	asrs	r3, r3, #1
 801357c:	e7ef      	b.n	801355e <__gethex+0x146>
 801357e:	f100 0a14 	add.w	sl, r0, #20
 8013582:	2300      	movs	r3, #0
 8013584:	495a      	ldr	r1, [pc, #360]	; (80136f0 <__gethex+0x2d8>)
 8013586:	f8cd a004 	str.w	sl, [sp, #4]
 801358a:	469b      	mov	fp, r3
 801358c:	45a8      	cmp	r8, r5
 801358e:	d342      	bcc.n	8013616 <__gethex+0x1fe>
 8013590:	9801      	ldr	r0, [sp, #4]
 8013592:	f840 bb04 	str.w	fp, [r0], #4
 8013596:	eba0 000a 	sub.w	r0, r0, sl
 801359a:	1080      	asrs	r0, r0, #2
 801359c:	6120      	str	r0, [r4, #16]
 801359e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80135a2:	4658      	mov	r0, fp
 80135a4:	f7fd fe7c 	bl	80112a0 <__hi0bits>
 80135a8:	683d      	ldr	r5, [r7, #0]
 80135aa:	eba8 0000 	sub.w	r0, r8, r0
 80135ae:	42a8      	cmp	r0, r5
 80135b0:	dd59      	ble.n	8013666 <__gethex+0x24e>
 80135b2:	eba0 0805 	sub.w	r8, r0, r5
 80135b6:	4641      	mov	r1, r8
 80135b8:	4620      	mov	r0, r4
 80135ba:	f7fe fa0b 	bl	80119d4 <__any_on>
 80135be:	4683      	mov	fp, r0
 80135c0:	b1b8      	cbz	r0, 80135f2 <__gethex+0x1da>
 80135c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80135c6:	1159      	asrs	r1, r3, #5
 80135c8:	f003 021f 	and.w	r2, r3, #31
 80135cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80135d0:	f04f 0b01 	mov.w	fp, #1
 80135d4:	fa0b f202 	lsl.w	r2, fp, r2
 80135d8:	420a      	tst	r2, r1
 80135da:	d00a      	beq.n	80135f2 <__gethex+0x1da>
 80135dc:	455b      	cmp	r3, fp
 80135de:	dd06      	ble.n	80135ee <__gethex+0x1d6>
 80135e0:	f1a8 0102 	sub.w	r1, r8, #2
 80135e4:	4620      	mov	r0, r4
 80135e6:	f7fe f9f5 	bl	80119d4 <__any_on>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d138      	bne.n	8013660 <__gethex+0x248>
 80135ee:	f04f 0b02 	mov.w	fp, #2
 80135f2:	4641      	mov	r1, r8
 80135f4:	4620      	mov	r0, r4
 80135f6:	f7ff fea7 	bl	8013348 <rshift>
 80135fa:	4446      	add	r6, r8
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	42b3      	cmp	r3, r6
 8013600:	da41      	bge.n	8013686 <__gethex+0x26e>
 8013602:	4621      	mov	r1, r4
 8013604:	4648      	mov	r0, r9
 8013606:	f7fd fd99 	bl	801113c <_Bfree>
 801360a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801360c:	2300      	movs	r3, #0
 801360e:	6013      	str	r3, [r2, #0]
 8013610:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013614:	e78a      	b.n	801352c <__gethex+0x114>
 8013616:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801361a:	2a2e      	cmp	r2, #46	; 0x2e
 801361c:	d014      	beq.n	8013648 <__gethex+0x230>
 801361e:	2b20      	cmp	r3, #32
 8013620:	d106      	bne.n	8013630 <__gethex+0x218>
 8013622:	9b01      	ldr	r3, [sp, #4]
 8013624:	f843 bb04 	str.w	fp, [r3], #4
 8013628:	f04f 0b00 	mov.w	fp, #0
 801362c:	9301      	str	r3, [sp, #4]
 801362e:	465b      	mov	r3, fp
 8013630:	7828      	ldrb	r0, [r5, #0]
 8013632:	9303      	str	r3, [sp, #12]
 8013634:	f7ff feda 	bl	80133ec <__hexdig_fun>
 8013638:	9b03      	ldr	r3, [sp, #12]
 801363a:	f000 000f 	and.w	r0, r0, #15
 801363e:	4098      	lsls	r0, r3
 8013640:	ea4b 0b00 	orr.w	fp, fp, r0
 8013644:	3304      	adds	r3, #4
 8013646:	e7a1      	b.n	801358c <__gethex+0x174>
 8013648:	45a8      	cmp	r8, r5
 801364a:	d8e8      	bhi.n	801361e <__gethex+0x206>
 801364c:	2201      	movs	r2, #1
 801364e:	4628      	mov	r0, r5
 8013650:	9303      	str	r3, [sp, #12]
 8013652:	f7fc fcc4 	bl	800ffde <strncmp>
 8013656:	4926      	ldr	r1, [pc, #152]	; (80136f0 <__gethex+0x2d8>)
 8013658:	9b03      	ldr	r3, [sp, #12]
 801365a:	2800      	cmp	r0, #0
 801365c:	d1df      	bne.n	801361e <__gethex+0x206>
 801365e:	e795      	b.n	801358c <__gethex+0x174>
 8013660:	f04f 0b03 	mov.w	fp, #3
 8013664:	e7c5      	b.n	80135f2 <__gethex+0x1da>
 8013666:	da0b      	bge.n	8013680 <__gethex+0x268>
 8013668:	eba5 0800 	sub.w	r8, r5, r0
 801366c:	4621      	mov	r1, r4
 801366e:	4642      	mov	r2, r8
 8013670:	4648      	mov	r0, r9
 8013672:	f7fd ff7d 	bl	8011570 <__lshift>
 8013676:	eba6 0608 	sub.w	r6, r6, r8
 801367a:	4604      	mov	r4, r0
 801367c:	f100 0a14 	add.w	sl, r0, #20
 8013680:	f04f 0b00 	mov.w	fp, #0
 8013684:	e7ba      	b.n	80135fc <__gethex+0x1e4>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	42b3      	cmp	r3, r6
 801368a:	dd73      	ble.n	8013774 <__gethex+0x35c>
 801368c:	1b9e      	subs	r6, r3, r6
 801368e:	42b5      	cmp	r5, r6
 8013690:	dc34      	bgt.n	80136fc <__gethex+0x2e4>
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2b02      	cmp	r3, #2
 8013696:	d023      	beq.n	80136e0 <__gethex+0x2c8>
 8013698:	2b03      	cmp	r3, #3
 801369a:	d025      	beq.n	80136e8 <__gethex+0x2d0>
 801369c:	2b01      	cmp	r3, #1
 801369e:	d115      	bne.n	80136cc <__gethex+0x2b4>
 80136a0:	42b5      	cmp	r5, r6
 80136a2:	d113      	bne.n	80136cc <__gethex+0x2b4>
 80136a4:	2d01      	cmp	r5, #1
 80136a6:	d10b      	bne.n	80136c0 <__gethex+0x2a8>
 80136a8:	9a02      	ldr	r2, [sp, #8]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6013      	str	r3, [r2, #0]
 80136ae:	2301      	movs	r3, #1
 80136b0:	6123      	str	r3, [r4, #16]
 80136b2:	f8ca 3000 	str.w	r3, [sl]
 80136b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80136bc:	601c      	str	r4, [r3, #0]
 80136be:	e735      	b.n	801352c <__gethex+0x114>
 80136c0:	1e69      	subs	r1, r5, #1
 80136c2:	4620      	mov	r0, r4
 80136c4:	f7fe f986 	bl	80119d4 <__any_on>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d1ed      	bne.n	80136a8 <__gethex+0x290>
 80136cc:	4621      	mov	r1, r4
 80136ce:	4648      	mov	r0, r9
 80136d0:	f7fd fd34 	bl	801113c <_Bfree>
 80136d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136d6:	2300      	movs	r3, #0
 80136d8:	6013      	str	r3, [r2, #0]
 80136da:	f04f 0850 	mov.w	r8, #80	; 0x50
 80136de:	e725      	b.n	801352c <__gethex+0x114>
 80136e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d1f2      	bne.n	80136cc <__gethex+0x2b4>
 80136e6:	e7df      	b.n	80136a8 <__gethex+0x290>
 80136e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d1dc      	bne.n	80136a8 <__gethex+0x290>
 80136ee:	e7ed      	b.n	80136cc <__gethex+0x2b4>
 80136f0:	08015934 	.word	0x08015934
 80136f4:	080157c7 	.word	0x080157c7
 80136f8:	08015af9 	.word	0x08015af9
 80136fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8013700:	f1bb 0f00 	cmp.w	fp, #0
 8013704:	d133      	bne.n	801376e <__gethex+0x356>
 8013706:	f1b8 0f00 	cmp.w	r8, #0
 801370a:	d004      	beq.n	8013716 <__gethex+0x2fe>
 801370c:	4641      	mov	r1, r8
 801370e:	4620      	mov	r0, r4
 8013710:	f7fe f960 	bl	80119d4 <__any_on>
 8013714:	4683      	mov	fp, r0
 8013716:	ea4f 1268 	mov.w	r2, r8, asr #5
 801371a:	2301      	movs	r3, #1
 801371c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013720:	f008 081f 	and.w	r8, r8, #31
 8013724:	fa03 f308 	lsl.w	r3, r3, r8
 8013728:	4213      	tst	r3, r2
 801372a:	4631      	mov	r1, r6
 801372c:	4620      	mov	r0, r4
 801372e:	bf18      	it	ne
 8013730:	f04b 0b02 	orrne.w	fp, fp, #2
 8013734:	1bad      	subs	r5, r5, r6
 8013736:	f7ff fe07 	bl	8013348 <rshift>
 801373a:	687e      	ldr	r6, [r7, #4]
 801373c:	f04f 0802 	mov.w	r8, #2
 8013740:	f1bb 0f00 	cmp.w	fp, #0
 8013744:	d04a      	beq.n	80137dc <__gethex+0x3c4>
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2b02      	cmp	r3, #2
 801374a:	d016      	beq.n	801377a <__gethex+0x362>
 801374c:	2b03      	cmp	r3, #3
 801374e:	d018      	beq.n	8013782 <__gethex+0x36a>
 8013750:	2b01      	cmp	r3, #1
 8013752:	d109      	bne.n	8013768 <__gethex+0x350>
 8013754:	f01b 0f02 	tst.w	fp, #2
 8013758:	d006      	beq.n	8013768 <__gethex+0x350>
 801375a:	f8da 3000 	ldr.w	r3, [sl]
 801375e:	ea4b 0b03 	orr.w	fp, fp, r3
 8013762:	f01b 0f01 	tst.w	fp, #1
 8013766:	d10f      	bne.n	8013788 <__gethex+0x370>
 8013768:	f048 0810 	orr.w	r8, r8, #16
 801376c:	e036      	b.n	80137dc <__gethex+0x3c4>
 801376e:	f04f 0b01 	mov.w	fp, #1
 8013772:	e7d0      	b.n	8013716 <__gethex+0x2fe>
 8013774:	f04f 0801 	mov.w	r8, #1
 8013778:	e7e2      	b.n	8013740 <__gethex+0x328>
 801377a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801377c:	f1c3 0301 	rsb	r3, r3, #1
 8013780:	930f      	str	r3, [sp, #60]	; 0x3c
 8013782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013784:	2b00      	cmp	r3, #0
 8013786:	d0ef      	beq.n	8013768 <__gethex+0x350>
 8013788:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801378c:	f104 0214 	add.w	r2, r4, #20
 8013790:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013794:	9301      	str	r3, [sp, #4]
 8013796:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801379a:	2300      	movs	r3, #0
 801379c:	4694      	mov	ip, r2
 801379e:	f852 1b04 	ldr.w	r1, [r2], #4
 80137a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80137a6:	d01e      	beq.n	80137e6 <__gethex+0x3ce>
 80137a8:	3101      	adds	r1, #1
 80137aa:	f8cc 1000 	str.w	r1, [ip]
 80137ae:	f1b8 0f02 	cmp.w	r8, #2
 80137b2:	f104 0214 	add.w	r2, r4, #20
 80137b6:	d13d      	bne.n	8013834 <__gethex+0x41c>
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	3b01      	subs	r3, #1
 80137bc:	42ab      	cmp	r3, r5
 80137be:	d10b      	bne.n	80137d8 <__gethex+0x3c0>
 80137c0:	1169      	asrs	r1, r5, #5
 80137c2:	2301      	movs	r3, #1
 80137c4:	f005 051f 	and.w	r5, r5, #31
 80137c8:	fa03 f505 	lsl.w	r5, r3, r5
 80137cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137d0:	421d      	tst	r5, r3
 80137d2:	bf18      	it	ne
 80137d4:	f04f 0801 	movne.w	r8, #1
 80137d8:	f048 0820 	orr.w	r8, r8, #32
 80137dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137de:	601c      	str	r4, [r3, #0]
 80137e0:	9b02      	ldr	r3, [sp, #8]
 80137e2:	601e      	str	r6, [r3, #0]
 80137e4:	e6a2      	b.n	801352c <__gethex+0x114>
 80137e6:	4290      	cmp	r0, r2
 80137e8:	f842 3c04 	str.w	r3, [r2, #-4]
 80137ec:	d8d6      	bhi.n	801379c <__gethex+0x384>
 80137ee:	68a2      	ldr	r2, [r4, #8]
 80137f0:	4593      	cmp	fp, r2
 80137f2:	db17      	blt.n	8013824 <__gethex+0x40c>
 80137f4:	6861      	ldr	r1, [r4, #4]
 80137f6:	4648      	mov	r0, r9
 80137f8:	3101      	adds	r1, #1
 80137fa:	f7fd fc5f 	bl	80110bc <_Balloc>
 80137fe:	4682      	mov	sl, r0
 8013800:	b918      	cbnz	r0, 801380a <__gethex+0x3f2>
 8013802:	4b1b      	ldr	r3, [pc, #108]	; (8013870 <__gethex+0x458>)
 8013804:	4602      	mov	r2, r0
 8013806:	2184      	movs	r1, #132	; 0x84
 8013808:	e6b3      	b.n	8013572 <__gethex+0x15a>
 801380a:	6922      	ldr	r2, [r4, #16]
 801380c:	3202      	adds	r2, #2
 801380e:	f104 010c 	add.w	r1, r4, #12
 8013812:	0092      	lsls	r2, r2, #2
 8013814:	300c      	adds	r0, #12
 8013816:	f7fc fcc2 	bl	801019e <memcpy>
 801381a:	4621      	mov	r1, r4
 801381c:	4648      	mov	r0, r9
 801381e:	f7fd fc8d 	bl	801113c <_Bfree>
 8013822:	4654      	mov	r4, sl
 8013824:	6922      	ldr	r2, [r4, #16]
 8013826:	1c51      	adds	r1, r2, #1
 8013828:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801382c:	6121      	str	r1, [r4, #16]
 801382e:	2101      	movs	r1, #1
 8013830:	6151      	str	r1, [r2, #20]
 8013832:	e7bc      	b.n	80137ae <__gethex+0x396>
 8013834:	6921      	ldr	r1, [r4, #16]
 8013836:	4559      	cmp	r1, fp
 8013838:	dd0b      	ble.n	8013852 <__gethex+0x43a>
 801383a:	2101      	movs	r1, #1
 801383c:	4620      	mov	r0, r4
 801383e:	f7ff fd83 	bl	8013348 <rshift>
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	3601      	adds	r6, #1
 8013846:	42b3      	cmp	r3, r6
 8013848:	f6ff aedb 	blt.w	8013602 <__gethex+0x1ea>
 801384c:	f04f 0801 	mov.w	r8, #1
 8013850:	e7c2      	b.n	80137d8 <__gethex+0x3c0>
 8013852:	f015 051f 	ands.w	r5, r5, #31
 8013856:	d0f9      	beq.n	801384c <__gethex+0x434>
 8013858:	9b01      	ldr	r3, [sp, #4]
 801385a:	441a      	add	r2, r3
 801385c:	f1c5 0520 	rsb	r5, r5, #32
 8013860:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013864:	f7fd fd1c 	bl	80112a0 <__hi0bits>
 8013868:	42a8      	cmp	r0, r5
 801386a:	dbe6      	blt.n	801383a <__gethex+0x422>
 801386c:	e7ee      	b.n	801384c <__gethex+0x434>
 801386e:	bf00      	nop
 8013870:	080157c7 	.word	0x080157c7

08013874 <L_shift>:
 8013874:	f1c2 0208 	rsb	r2, r2, #8
 8013878:	0092      	lsls	r2, r2, #2
 801387a:	b570      	push	{r4, r5, r6, lr}
 801387c:	f1c2 0620 	rsb	r6, r2, #32
 8013880:	6843      	ldr	r3, [r0, #4]
 8013882:	6804      	ldr	r4, [r0, #0]
 8013884:	fa03 f506 	lsl.w	r5, r3, r6
 8013888:	432c      	orrs	r4, r5
 801388a:	40d3      	lsrs	r3, r2
 801388c:	6004      	str	r4, [r0, #0]
 801388e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013892:	4288      	cmp	r0, r1
 8013894:	d3f4      	bcc.n	8013880 <L_shift+0xc>
 8013896:	bd70      	pop	{r4, r5, r6, pc}

08013898 <__match>:
 8013898:	b530      	push	{r4, r5, lr}
 801389a:	6803      	ldr	r3, [r0, #0]
 801389c:	3301      	adds	r3, #1
 801389e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138a2:	b914      	cbnz	r4, 80138aa <__match+0x12>
 80138a4:	6003      	str	r3, [r0, #0]
 80138a6:	2001      	movs	r0, #1
 80138a8:	bd30      	pop	{r4, r5, pc}
 80138aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80138b2:	2d19      	cmp	r5, #25
 80138b4:	bf98      	it	ls
 80138b6:	3220      	addls	r2, #32
 80138b8:	42a2      	cmp	r2, r4
 80138ba:	d0f0      	beq.n	801389e <__match+0x6>
 80138bc:	2000      	movs	r0, #0
 80138be:	e7f3      	b.n	80138a8 <__match+0x10>

080138c0 <__hexnan>:
 80138c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c4:	680b      	ldr	r3, [r1, #0]
 80138c6:	6801      	ldr	r1, [r0, #0]
 80138c8:	115e      	asrs	r6, r3, #5
 80138ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80138ce:	f013 031f 	ands.w	r3, r3, #31
 80138d2:	b087      	sub	sp, #28
 80138d4:	bf18      	it	ne
 80138d6:	3604      	addne	r6, #4
 80138d8:	2500      	movs	r5, #0
 80138da:	1f37      	subs	r7, r6, #4
 80138dc:	4682      	mov	sl, r0
 80138de:	4690      	mov	r8, r2
 80138e0:	9301      	str	r3, [sp, #4]
 80138e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80138e6:	46b9      	mov	r9, r7
 80138e8:	463c      	mov	r4, r7
 80138ea:	9502      	str	r5, [sp, #8]
 80138ec:	46ab      	mov	fp, r5
 80138ee:	784a      	ldrb	r2, [r1, #1]
 80138f0:	1c4b      	adds	r3, r1, #1
 80138f2:	9303      	str	r3, [sp, #12]
 80138f4:	b342      	cbz	r2, 8013948 <__hexnan+0x88>
 80138f6:	4610      	mov	r0, r2
 80138f8:	9105      	str	r1, [sp, #20]
 80138fa:	9204      	str	r2, [sp, #16]
 80138fc:	f7ff fd76 	bl	80133ec <__hexdig_fun>
 8013900:	2800      	cmp	r0, #0
 8013902:	d14f      	bne.n	80139a4 <__hexnan+0xe4>
 8013904:	9a04      	ldr	r2, [sp, #16]
 8013906:	9905      	ldr	r1, [sp, #20]
 8013908:	2a20      	cmp	r2, #32
 801390a:	d818      	bhi.n	801393e <__hexnan+0x7e>
 801390c:	9b02      	ldr	r3, [sp, #8]
 801390e:	459b      	cmp	fp, r3
 8013910:	dd13      	ble.n	801393a <__hexnan+0x7a>
 8013912:	454c      	cmp	r4, r9
 8013914:	d206      	bcs.n	8013924 <__hexnan+0x64>
 8013916:	2d07      	cmp	r5, #7
 8013918:	dc04      	bgt.n	8013924 <__hexnan+0x64>
 801391a:	462a      	mov	r2, r5
 801391c:	4649      	mov	r1, r9
 801391e:	4620      	mov	r0, r4
 8013920:	f7ff ffa8 	bl	8013874 <L_shift>
 8013924:	4544      	cmp	r4, r8
 8013926:	d950      	bls.n	80139ca <__hexnan+0x10a>
 8013928:	2300      	movs	r3, #0
 801392a:	f1a4 0904 	sub.w	r9, r4, #4
 801392e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013932:	f8cd b008 	str.w	fp, [sp, #8]
 8013936:	464c      	mov	r4, r9
 8013938:	461d      	mov	r5, r3
 801393a:	9903      	ldr	r1, [sp, #12]
 801393c:	e7d7      	b.n	80138ee <__hexnan+0x2e>
 801393e:	2a29      	cmp	r2, #41	; 0x29
 8013940:	d155      	bne.n	80139ee <__hexnan+0x12e>
 8013942:	3102      	adds	r1, #2
 8013944:	f8ca 1000 	str.w	r1, [sl]
 8013948:	f1bb 0f00 	cmp.w	fp, #0
 801394c:	d04f      	beq.n	80139ee <__hexnan+0x12e>
 801394e:	454c      	cmp	r4, r9
 8013950:	d206      	bcs.n	8013960 <__hexnan+0xa0>
 8013952:	2d07      	cmp	r5, #7
 8013954:	dc04      	bgt.n	8013960 <__hexnan+0xa0>
 8013956:	462a      	mov	r2, r5
 8013958:	4649      	mov	r1, r9
 801395a:	4620      	mov	r0, r4
 801395c:	f7ff ff8a 	bl	8013874 <L_shift>
 8013960:	4544      	cmp	r4, r8
 8013962:	d934      	bls.n	80139ce <__hexnan+0x10e>
 8013964:	f1a8 0204 	sub.w	r2, r8, #4
 8013968:	4623      	mov	r3, r4
 801396a:	f853 1b04 	ldr.w	r1, [r3], #4
 801396e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013972:	429f      	cmp	r7, r3
 8013974:	d2f9      	bcs.n	801396a <__hexnan+0xaa>
 8013976:	1b3b      	subs	r3, r7, r4
 8013978:	f023 0303 	bic.w	r3, r3, #3
 801397c:	3304      	adds	r3, #4
 801397e:	3e03      	subs	r6, #3
 8013980:	3401      	adds	r4, #1
 8013982:	42a6      	cmp	r6, r4
 8013984:	bf38      	it	cc
 8013986:	2304      	movcc	r3, #4
 8013988:	4443      	add	r3, r8
 801398a:	2200      	movs	r2, #0
 801398c:	f843 2b04 	str.w	r2, [r3], #4
 8013990:	429f      	cmp	r7, r3
 8013992:	d2fb      	bcs.n	801398c <__hexnan+0xcc>
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	b91b      	cbnz	r3, 80139a0 <__hexnan+0xe0>
 8013998:	4547      	cmp	r7, r8
 801399a:	d126      	bne.n	80139ea <__hexnan+0x12a>
 801399c:	2301      	movs	r3, #1
 801399e:	603b      	str	r3, [r7, #0]
 80139a0:	2005      	movs	r0, #5
 80139a2:	e025      	b.n	80139f0 <__hexnan+0x130>
 80139a4:	3501      	adds	r5, #1
 80139a6:	2d08      	cmp	r5, #8
 80139a8:	f10b 0b01 	add.w	fp, fp, #1
 80139ac:	dd06      	ble.n	80139bc <__hexnan+0xfc>
 80139ae:	4544      	cmp	r4, r8
 80139b0:	d9c3      	bls.n	801393a <__hexnan+0x7a>
 80139b2:	2300      	movs	r3, #0
 80139b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80139b8:	2501      	movs	r5, #1
 80139ba:	3c04      	subs	r4, #4
 80139bc:	6822      	ldr	r2, [r4, #0]
 80139be:	f000 000f 	and.w	r0, r0, #15
 80139c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80139c6:	6020      	str	r0, [r4, #0]
 80139c8:	e7b7      	b.n	801393a <__hexnan+0x7a>
 80139ca:	2508      	movs	r5, #8
 80139cc:	e7b5      	b.n	801393a <__hexnan+0x7a>
 80139ce:	9b01      	ldr	r3, [sp, #4]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d0df      	beq.n	8013994 <__hexnan+0xd4>
 80139d4:	f1c3 0320 	rsb	r3, r3, #32
 80139d8:	f04f 32ff 	mov.w	r2, #4294967295
 80139dc:	40da      	lsrs	r2, r3
 80139de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80139e2:	4013      	ands	r3, r2
 80139e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80139e8:	e7d4      	b.n	8013994 <__hexnan+0xd4>
 80139ea:	3f04      	subs	r7, #4
 80139ec:	e7d2      	b.n	8013994 <__hexnan+0xd4>
 80139ee:	2004      	movs	r0, #4
 80139f0:	b007      	add	sp, #28
 80139f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080139f6 <__ascii_mbtowc>:
 80139f6:	b082      	sub	sp, #8
 80139f8:	b901      	cbnz	r1, 80139fc <__ascii_mbtowc+0x6>
 80139fa:	a901      	add	r1, sp, #4
 80139fc:	b142      	cbz	r2, 8013a10 <__ascii_mbtowc+0x1a>
 80139fe:	b14b      	cbz	r3, 8013a14 <__ascii_mbtowc+0x1e>
 8013a00:	7813      	ldrb	r3, [r2, #0]
 8013a02:	600b      	str	r3, [r1, #0]
 8013a04:	7812      	ldrb	r2, [r2, #0]
 8013a06:	1e10      	subs	r0, r2, #0
 8013a08:	bf18      	it	ne
 8013a0a:	2001      	movne	r0, #1
 8013a0c:	b002      	add	sp, #8
 8013a0e:	4770      	bx	lr
 8013a10:	4610      	mov	r0, r2
 8013a12:	e7fb      	b.n	8013a0c <__ascii_mbtowc+0x16>
 8013a14:	f06f 0001 	mvn.w	r0, #1
 8013a18:	e7f8      	b.n	8013a0c <__ascii_mbtowc+0x16>

08013a1a <_realloc_r>:
 8013a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a1e:	4680      	mov	r8, r0
 8013a20:	4614      	mov	r4, r2
 8013a22:	460e      	mov	r6, r1
 8013a24:	b921      	cbnz	r1, 8013a30 <_realloc_r+0x16>
 8013a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2a:	4611      	mov	r1, r2
 8013a2c:	f7fd baba 	b.w	8010fa4 <_malloc_r>
 8013a30:	b92a      	cbnz	r2, 8013a3e <_realloc_r+0x24>
 8013a32:	f7fd fa43 	bl	8010ebc <_free_r>
 8013a36:	4625      	mov	r5, r4
 8013a38:	4628      	mov	r0, r5
 8013a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a3e:	f000 f8b6 	bl	8013bae <_malloc_usable_size_r>
 8013a42:	4284      	cmp	r4, r0
 8013a44:	4607      	mov	r7, r0
 8013a46:	d802      	bhi.n	8013a4e <_realloc_r+0x34>
 8013a48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a4c:	d812      	bhi.n	8013a74 <_realloc_r+0x5a>
 8013a4e:	4621      	mov	r1, r4
 8013a50:	4640      	mov	r0, r8
 8013a52:	f7fd faa7 	bl	8010fa4 <_malloc_r>
 8013a56:	4605      	mov	r5, r0
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	d0ed      	beq.n	8013a38 <_realloc_r+0x1e>
 8013a5c:	42bc      	cmp	r4, r7
 8013a5e:	4622      	mov	r2, r4
 8013a60:	4631      	mov	r1, r6
 8013a62:	bf28      	it	cs
 8013a64:	463a      	movcs	r2, r7
 8013a66:	f7fc fb9a 	bl	801019e <memcpy>
 8013a6a:	4631      	mov	r1, r6
 8013a6c:	4640      	mov	r0, r8
 8013a6e:	f7fd fa25 	bl	8010ebc <_free_r>
 8013a72:	e7e1      	b.n	8013a38 <_realloc_r+0x1e>
 8013a74:	4635      	mov	r5, r6
 8013a76:	e7df      	b.n	8013a38 <_realloc_r+0x1e>

08013a78 <_strtoul_l.constprop.0>:
 8013a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a7c:	4f36      	ldr	r7, [pc, #216]	; (8013b58 <_strtoul_l.constprop.0+0xe0>)
 8013a7e:	4686      	mov	lr, r0
 8013a80:	460d      	mov	r5, r1
 8013a82:	4628      	mov	r0, r5
 8013a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a88:	5d3e      	ldrb	r6, [r7, r4]
 8013a8a:	f016 0608 	ands.w	r6, r6, #8
 8013a8e:	d1f8      	bne.n	8013a82 <_strtoul_l.constprop.0+0xa>
 8013a90:	2c2d      	cmp	r4, #45	; 0x2d
 8013a92:	d130      	bne.n	8013af6 <_strtoul_l.constprop.0+0x7e>
 8013a94:	782c      	ldrb	r4, [r5, #0]
 8013a96:	2601      	movs	r6, #1
 8013a98:	1c85      	adds	r5, r0, #2
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d057      	beq.n	8013b4e <_strtoul_l.constprop.0+0xd6>
 8013a9e:	2b10      	cmp	r3, #16
 8013aa0:	d109      	bne.n	8013ab6 <_strtoul_l.constprop.0+0x3e>
 8013aa2:	2c30      	cmp	r4, #48	; 0x30
 8013aa4:	d107      	bne.n	8013ab6 <_strtoul_l.constprop.0+0x3e>
 8013aa6:	7828      	ldrb	r0, [r5, #0]
 8013aa8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013aac:	2858      	cmp	r0, #88	; 0x58
 8013aae:	d149      	bne.n	8013b44 <_strtoul_l.constprop.0+0xcc>
 8013ab0:	786c      	ldrb	r4, [r5, #1]
 8013ab2:	2310      	movs	r3, #16
 8013ab4:	3502      	adds	r5, #2
 8013ab6:	f04f 38ff 	mov.w	r8, #4294967295
 8013aba:	2700      	movs	r7, #0
 8013abc:	fbb8 f8f3 	udiv	r8, r8, r3
 8013ac0:	fb03 f908 	mul.w	r9, r3, r8
 8013ac4:	ea6f 0909 	mvn.w	r9, r9
 8013ac8:	4638      	mov	r0, r7
 8013aca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013ace:	f1bc 0f09 	cmp.w	ip, #9
 8013ad2:	d815      	bhi.n	8013b00 <_strtoul_l.constprop.0+0x88>
 8013ad4:	4664      	mov	r4, ip
 8013ad6:	42a3      	cmp	r3, r4
 8013ad8:	dd23      	ble.n	8013b22 <_strtoul_l.constprop.0+0xaa>
 8013ada:	f1b7 3fff 	cmp.w	r7, #4294967295
 8013ade:	d007      	beq.n	8013af0 <_strtoul_l.constprop.0+0x78>
 8013ae0:	4580      	cmp	r8, r0
 8013ae2:	d31b      	bcc.n	8013b1c <_strtoul_l.constprop.0+0xa4>
 8013ae4:	d101      	bne.n	8013aea <_strtoul_l.constprop.0+0x72>
 8013ae6:	45a1      	cmp	r9, r4
 8013ae8:	db18      	blt.n	8013b1c <_strtoul_l.constprop.0+0xa4>
 8013aea:	fb00 4003 	mla	r0, r0, r3, r4
 8013aee:	2701      	movs	r7, #1
 8013af0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013af4:	e7e9      	b.n	8013aca <_strtoul_l.constprop.0+0x52>
 8013af6:	2c2b      	cmp	r4, #43	; 0x2b
 8013af8:	bf04      	itt	eq
 8013afa:	782c      	ldrbeq	r4, [r5, #0]
 8013afc:	1c85      	addeq	r5, r0, #2
 8013afe:	e7cc      	b.n	8013a9a <_strtoul_l.constprop.0+0x22>
 8013b00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013b04:	f1bc 0f19 	cmp.w	ip, #25
 8013b08:	d801      	bhi.n	8013b0e <_strtoul_l.constprop.0+0x96>
 8013b0a:	3c37      	subs	r4, #55	; 0x37
 8013b0c:	e7e3      	b.n	8013ad6 <_strtoul_l.constprop.0+0x5e>
 8013b0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013b12:	f1bc 0f19 	cmp.w	ip, #25
 8013b16:	d804      	bhi.n	8013b22 <_strtoul_l.constprop.0+0xaa>
 8013b18:	3c57      	subs	r4, #87	; 0x57
 8013b1a:	e7dc      	b.n	8013ad6 <_strtoul_l.constprop.0+0x5e>
 8013b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8013b20:	e7e6      	b.n	8013af0 <_strtoul_l.constprop.0+0x78>
 8013b22:	1c7b      	adds	r3, r7, #1
 8013b24:	d106      	bne.n	8013b34 <_strtoul_l.constprop.0+0xbc>
 8013b26:	2322      	movs	r3, #34	; 0x22
 8013b28:	f8ce 3000 	str.w	r3, [lr]
 8013b2c:	4638      	mov	r0, r7
 8013b2e:	b932      	cbnz	r2, 8013b3e <_strtoul_l.constprop.0+0xc6>
 8013b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b34:	b106      	cbz	r6, 8013b38 <_strtoul_l.constprop.0+0xc0>
 8013b36:	4240      	negs	r0, r0
 8013b38:	2a00      	cmp	r2, #0
 8013b3a:	d0f9      	beq.n	8013b30 <_strtoul_l.constprop.0+0xb8>
 8013b3c:	b107      	cbz	r7, 8013b40 <_strtoul_l.constprop.0+0xc8>
 8013b3e:	1e69      	subs	r1, r5, #1
 8013b40:	6011      	str	r1, [r2, #0]
 8013b42:	e7f5      	b.n	8013b30 <_strtoul_l.constprop.0+0xb8>
 8013b44:	2430      	movs	r4, #48	; 0x30
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d1b5      	bne.n	8013ab6 <_strtoul_l.constprop.0+0x3e>
 8013b4a:	2308      	movs	r3, #8
 8013b4c:	e7b3      	b.n	8013ab6 <_strtoul_l.constprop.0+0x3e>
 8013b4e:	2c30      	cmp	r4, #48	; 0x30
 8013b50:	d0a9      	beq.n	8013aa6 <_strtoul_l.constprop.0+0x2e>
 8013b52:	230a      	movs	r3, #10
 8013b54:	e7af      	b.n	8013ab6 <_strtoul_l.constprop.0+0x3e>
 8013b56:	bf00      	nop
 8013b58:	08015989 	.word	0x08015989

08013b5c <_strtoul_r>:
 8013b5c:	f7ff bf8c 	b.w	8013a78 <_strtoul_l.constprop.0>

08013b60 <__ascii_wctomb>:
 8013b60:	b149      	cbz	r1, 8013b76 <__ascii_wctomb+0x16>
 8013b62:	2aff      	cmp	r2, #255	; 0xff
 8013b64:	bf85      	ittet	hi
 8013b66:	238a      	movhi	r3, #138	; 0x8a
 8013b68:	6003      	strhi	r3, [r0, #0]
 8013b6a:	700a      	strbls	r2, [r1, #0]
 8013b6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013b70:	bf98      	it	ls
 8013b72:	2001      	movls	r0, #1
 8013b74:	4770      	bx	lr
 8013b76:	4608      	mov	r0, r1
 8013b78:	4770      	bx	lr
	...

08013b7c <fiprintf>:
 8013b7c:	b40e      	push	{r1, r2, r3}
 8013b7e:	b503      	push	{r0, r1, lr}
 8013b80:	4601      	mov	r1, r0
 8013b82:	ab03      	add	r3, sp, #12
 8013b84:	4805      	ldr	r0, [pc, #20]	; (8013b9c <fiprintf+0x20>)
 8013b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b8a:	6800      	ldr	r0, [r0, #0]
 8013b8c:	9301      	str	r3, [sp, #4]
 8013b8e:	f000 f83f 	bl	8013c10 <_vfiprintf_r>
 8013b92:	b002      	add	sp, #8
 8013b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b98:	b003      	add	sp, #12
 8013b9a:	4770      	bx	lr
 8013b9c:	20000074 	.word	0x20000074

08013ba0 <abort>:
 8013ba0:	b508      	push	{r3, lr}
 8013ba2:	2006      	movs	r0, #6
 8013ba4:	f000 fa0c 	bl	8013fc0 <raise>
 8013ba8:	2001      	movs	r0, #1
 8013baa:	f7ef fec9 	bl	8003940 <_exit>

08013bae <_malloc_usable_size_r>:
 8013bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bb2:	1f18      	subs	r0, r3, #4
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	bfbc      	itt	lt
 8013bb8:	580b      	ldrlt	r3, [r1, r0]
 8013bba:	18c0      	addlt	r0, r0, r3
 8013bbc:	4770      	bx	lr

08013bbe <__sfputc_r>:
 8013bbe:	6893      	ldr	r3, [r2, #8]
 8013bc0:	3b01      	subs	r3, #1
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	b410      	push	{r4}
 8013bc6:	6093      	str	r3, [r2, #8]
 8013bc8:	da08      	bge.n	8013bdc <__sfputc_r+0x1e>
 8013bca:	6994      	ldr	r4, [r2, #24]
 8013bcc:	42a3      	cmp	r3, r4
 8013bce:	db01      	blt.n	8013bd4 <__sfputc_r+0x16>
 8013bd0:	290a      	cmp	r1, #10
 8013bd2:	d103      	bne.n	8013bdc <__sfputc_r+0x1e>
 8013bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bd8:	f000 b934 	b.w	8013e44 <__swbuf_r>
 8013bdc:	6813      	ldr	r3, [r2, #0]
 8013bde:	1c58      	adds	r0, r3, #1
 8013be0:	6010      	str	r0, [r2, #0]
 8013be2:	7019      	strb	r1, [r3, #0]
 8013be4:	4608      	mov	r0, r1
 8013be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bea:	4770      	bx	lr

08013bec <__sfputs_r>:
 8013bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bee:	4606      	mov	r6, r0
 8013bf0:	460f      	mov	r7, r1
 8013bf2:	4614      	mov	r4, r2
 8013bf4:	18d5      	adds	r5, r2, r3
 8013bf6:	42ac      	cmp	r4, r5
 8013bf8:	d101      	bne.n	8013bfe <__sfputs_r+0x12>
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	e007      	b.n	8013c0e <__sfputs_r+0x22>
 8013bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c02:	463a      	mov	r2, r7
 8013c04:	4630      	mov	r0, r6
 8013c06:	f7ff ffda 	bl	8013bbe <__sfputc_r>
 8013c0a:	1c43      	adds	r3, r0, #1
 8013c0c:	d1f3      	bne.n	8013bf6 <__sfputs_r+0xa>
 8013c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c10 <_vfiprintf_r>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	460d      	mov	r5, r1
 8013c16:	b09d      	sub	sp, #116	; 0x74
 8013c18:	4614      	mov	r4, r2
 8013c1a:	4698      	mov	r8, r3
 8013c1c:	4606      	mov	r6, r0
 8013c1e:	b118      	cbz	r0, 8013c28 <_vfiprintf_r+0x18>
 8013c20:	6a03      	ldr	r3, [r0, #32]
 8013c22:	b90b      	cbnz	r3, 8013c28 <_vfiprintf_r+0x18>
 8013c24:	f7fc f90c 	bl	800fe40 <__sinit>
 8013c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c2a:	07d9      	lsls	r1, r3, #31
 8013c2c:	d405      	bmi.n	8013c3a <_vfiprintf_r+0x2a>
 8013c2e:	89ab      	ldrh	r3, [r5, #12]
 8013c30:	059a      	lsls	r2, r3, #22
 8013c32:	d402      	bmi.n	8013c3a <_vfiprintf_r+0x2a>
 8013c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c36:	f7fc fab0 	bl	801019a <__retarget_lock_acquire_recursive>
 8013c3a:	89ab      	ldrh	r3, [r5, #12]
 8013c3c:	071b      	lsls	r3, r3, #28
 8013c3e:	d501      	bpl.n	8013c44 <_vfiprintf_r+0x34>
 8013c40:	692b      	ldr	r3, [r5, #16]
 8013c42:	b99b      	cbnz	r3, 8013c6c <_vfiprintf_r+0x5c>
 8013c44:	4629      	mov	r1, r5
 8013c46:	4630      	mov	r0, r6
 8013c48:	f000 f93a 	bl	8013ec0 <__swsetup_r>
 8013c4c:	b170      	cbz	r0, 8013c6c <_vfiprintf_r+0x5c>
 8013c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c50:	07dc      	lsls	r4, r3, #31
 8013c52:	d504      	bpl.n	8013c5e <_vfiprintf_r+0x4e>
 8013c54:	f04f 30ff 	mov.w	r0, #4294967295
 8013c58:	b01d      	add	sp, #116	; 0x74
 8013c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c5e:	89ab      	ldrh	r3, [r5, #12]
 8013c60:	0598      	lsls	r0, r3, #22
 8013c62:	d4f7      	bmi.n	8013c54 <_vfiprintf_r+0x44>
 8013c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c66:	f7fc fa99 	bl	801019c <__retarget_lock_release_recursive>
 8013c6a:	e7f3      	b.n	8013c54 <_vfiprintf_r+0x44>
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013c70:	2320      	movs	r3, #32
 8013c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c7a:	2330      	movs	r3, #48	; 0x30
 8013c7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013e30 <_vfiprintf_r+0x220>
 8013c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c84:	f04f 0901 	mov.w	r9, #1
 8013c88:	4623      	mov	r3, r4
 8013c8a:	469a      	mov	sl, r3
 8013c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c90:	b10a      	cbz	r2, 8013c96 <_vfiprintf_r+0x86>
 8013c92:	2a25      	cmp	r2, #37	; 0x25
 8013c94:	d1f9      	bne.n	8013c8a <_vfiprintf_r+0x7a>
 8013c96:	ebba 0b04 	subs.w	fp, sl, r4
 8013c9a:	d00b      	beq.n	8013cb4 <_vfiprintf_r+0xa4>
 8013c9c:	465b      	mov	r3, fp
 8013c9e:	4622      	mov	r2, r4
 8013ca0:	4629      	mov	r1, r5
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f7ff ffa2 	bl	8013bec <__sfputs_r>
 8013ca8:	3001      	adds	r0, #1
 8013caa:	f000 80a9 	beq.w	8013e00 <_vfiprintf_r+0x1f0>
 8013cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cb0:	445a      	add	r2, fp
 8013cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8013cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	f000 80a1 	beq.w	8013e00 <_vfiprintf_r+0x1f0>
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8013cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cc8:	f10a 0a01 	add.w	sl, sl, #1
 8013ccc:	9304      	str	r3, [sp, #16]
 8013cce:	9307      	str	r3, [sp, #28]
 8013cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8013cd6:	4654      	mov	r4, sl
 8013cd8:	2205      	movs	r2, #5
 8013cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cde:	4854      	ldr	r0, [pc, #336]	; (8013e30 <_vfiprintf_r+0x220>)
 8013ce0:	f7ec fa9e 	bl	8000220 <memchr>
 8013ce4:	9a04      	ldr	r2, [sp, #16]
 8013ce6:	b9d8      	cbnz	r0, 8013d20 <_vfiprintf_r+0x110>
 8013ce8:	06d1      	lsls	r1, r2, #27
 8013cea:	bf44      	itt	mi
 8013cec:	2320      	movmi	r3, #32
 8013cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cf2:	0713      	lsls	r3, r2, #28
 8013cf4:	bf44      	itt	mi
 8013cf6:	232b      	movmi	r3, #43	; 0x2b
 8013cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8013d00:	2b2a      	cmp	r3, #42	; 0x2a
 8013d02:	d015      	beq.n	8013d30 <_vfiprintf_r+0x120>
 8013d04:	9a07      	ldr	r2, [sp, #28]
 8013d06:	4654      	mov	r4, sl
 8013d08:	2000      	movs	r0, #0
 8013d0a:	f04f 0c0a 	mov.w	ip, #10
 8013d0e:	4621      	mov	r1, r4
 8013d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d14:	3b30      	subs	r3, #48	; 0x30
 8013d16:	2b09      	cmp	r3, #9
 8013d18:	d94d      	bls.n	8013db6 <_vfiprintf_r+0x1a6>
 8013d1a:	b1b0      	cbz	r0, 8013d4a <_vfiprintf_r+0x13a>
 8013d1c:	9207      	str	r2, [sp, #28]
 8013d1e:	e014      	b.n	8013d4a <_vfiprintf_r+0x13a>
 8013d20:	eba0 0308 	sub.w	r3, r0, r8
 8013d24:	fa09 f303 	lsl.w	r3, r9, r3
 8013d28:	4313      	orrs	r3, r2
 8013d2a:	9304      	str	r3, [sp, #16]
 8013d2c:	46a2      	mov	sl, r4
 8013d2e:	e7d2      	b.n	8013cd6 <_vfiprintf_r+0xc6>
 8013d30:	9b03      	ldr	r3, [sp, #12]
 8013d32:	1d19      	adds	r1, r3, #4
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	9103      	str	r1, [sp, #12]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	bfbb      	ittet	lt
 8013d3c:	425b      	neglt	r3, r3
 8013d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8013d42:	9307      	strge	r3, [sp, #28]
 8013d44:	9307      	strlt	r3, [sp, #28]
 8013d46:	bfb8      	it	lt
 8013d48:	9204      	strlt	r2, [sp, #16]
 8013d4a:	7823      	ldrb	r3, [r4, #0]
 8013d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8013d4e:	d10c      	bne.n	8013d6a <_vfiprintf_r+0x15a>
 8013d50:	7863      	ldrb	r3, [r4, #1]
 8013d52:	2b2a      	cmp	r3, #42	; 0x2a
 8013d54:	d134      	bne.n	8013dc0 <_vfiprintf_r+0x1b0>
 8013d56:	9b03      	ldr	r3, [sp, #12]
 8013d58:	1d1a      	adds	r2, r3, #4
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	9203      	str	r2, [sp, #12]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	bfb8      	it	lt
 8013d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d66:	3402      	adds	r4, #2
 8013d68:	9305      	str	r3, [sp, #20]
 8013d6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013e40 <_vfiprintf_r+0x230>
 8013d6e:	7821      	ldrb	r1, [r4, #0]
 8013d70:	2203      	movs	r2, #3
 8013d72:	4650      	mov	r0, sl
 8013d74:	f7ec fa54 	bl	8000220 <memchr>
 8013d78:	b138      	cbz	r0, 8013d8a <_vfiprintf_r+0x17a>
 8013d7a:	9b04      	ldr	r3, [sp, #16]
 8013d7c:	eba0 000a 	sub.w	r0, r0, sl
 8013d80:	2240      	movs	r2, #64	; 0x40
 8013d82:	4082      	lsls	r2, r0
 8013d84:	4313      	orrs	r3, r2
 8013d86:	3401      	adds	r4, #1
 8013d88:	9304      	str	r3, [sp, #16]
 8013d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d8e:	4829      	ldr	r0, [pc, #164]	; (8013e34 <_vfiprintf_r+0x224>)
 8013d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d94:	2206      	movs	r2, #6
 8013d96:	f7ec fa43 	bl	8000220 <memchr>
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	d03f      	beq.n	8013e1e <_vfiprintf_r+0x20e>
 8013d9e:	4b26      	ldr	r3, [pc, #152]	; (8013e38 <_vfiprintf_r+0x228>)
 8013da0:	bb1b      	cbnz	r3, 8013dea <_vfiprintf_r+0x1da>
 8013da2:	9b03      	ldr	r3, [sp, #12]
 8013da4:	3307      	adds	r3, #7
 8013da6:	f023 0307 	bic.w	r3, r3, #7
 8013daa:	3308      	adds	r3, #8
 8013dac:	9303      	str	r3, [sp, #12]
 8013dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db0:	443b      	add	r3, r7
 8013db2:	9309      	str	r3, [sp, #36]	; 0x24
 8013db4:	e768      	b.n	8013c88 <_vfiprintf_r+0x78>
 8013db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013dba:	460c      	mov	r4, r1
 8013dbc:	2001      	movs	r0, #1
 8013dbe:	e7a6      	b.n	8013d0e <_vfiprintf_r+0xfe>
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	3401      	adds	r4, #1
 8013dc4:	9305      	str	r3, [sp, #20]
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	f04f 0c0a 	mov.w	ip, #10
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013dd2:	3a30      	subs	r2, #48	; 0x30
 8013dd4:	2a09      	cmp	r2, #9
 8013dd6:	d903      	bls.n	8013de0 <_vfiprintf_r+0x1d0>
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d0c6      	beq.n	8013d6a <_vfiprintf_r+0x15a>
 8013ddc:	9105      	str	r1, [sp, #20]
 8013dde:	e7c4      	b.n	8013d6a <_vfiprintf_r+0x15a>
 8013de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8013de4:	4604      	mov	r4, r0
 8013de6:	2301      	movs	r3, #1
 8013de8:	e7f0      	b.n	8013dcc <_vfiprintf_r+0x1bc>
 8013dea:	ab03      	add	r3, sp, #12
 8013dec:	9300      	str	r3, [sp, #0]
 8013dee:	462a      	mov	r2, r5
 8013df0:	4b12      	ldr	r3, [pc, #72]	; (8013e3c <_vfiprintf_r+0x22c>)
 8013df2:	a904      	add	r1, sp, #16
 8013df4:	4630      	mov	r0, r6
 8013df6:	f7fb f9c1 	bl	800f17c <_printf_float>
 8013dfa:	4607      	mov	r7, r0
 8013dfc:	1c78      	adds	r0, r7, #1
 8013dfe:	d1d6      	bne.n	8013dae <_vfiprintf_r+0x19e>
 8013e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e02:	07d9      	lsls	r1, r3, #31
 8013e04:	d405      	bmi.n	8013e12 <_vfiprintf_r+0x202>
 8013e06:	89ab      	ldrh	r3, [r5, #12]
 8013e08:	059a      	lsls	r2, r3, #22
 8013e0a:	d402      	bmi.n	8013e12 <_vfiprintf_r+0x202>
 8013e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e0e:	f7fc f9c5 	bl	801019c <__retarget_lock_release_recursive>
 8013e12:	89ab      	ldrh	r3, [r5, #12]
 8013e14:	065b      	lsls	r3, r3, #25
 8013e16:	f53f af1d 	bmi.w	8013c54 <_vfiprintf_r+0x44>
 8013e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e1c:	e71c      	b.n	8013c58 <_vfiprintf_r+0x48>
 8013e1e:	ab03      	add	r3, sp, #12
 8013e20:	9300      	str	r3, [sp, #0]
 8013e22:	462a      	mov	r2, r5
 8013e24:	4b05      	ldr	r3, [pc, #20]	; (8013e3c <_vfiprintf_r+0x22c>)
 8013e26:	a904      	add	r1, sp, #16
 8013e28:	4630      	mov	r0, r6
 8013e2a:	f7fb fc4b 	bl	800f6c4 <_printf_i>
 8013e2e:	e7e4      	b.n	8013dfa <_vfiprintf_r+0x1ea>
 8013e30:	08015a89 	.word	0x08015a89
 8013e34:	08015a93 	.word	0x08015a93
 8013e38:	0800f17d 	.word	0x0800f17d
 8013e3c:	08013bed 	.word	0x08013bed
 8013e40:	08015a8f 	.word	0x08015a8f

08013e44 <__swbuf_r>:
 8013e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e46:	460e      	mov	r6, r1
 8013e48:	4614      	mov	r4, r2
 8013e4a:	4605      	mov	r5, r0
 8013e4c:	b118      	cbz	r0, 8013e56 <__swbuf_r+0x12>
 8013e4e:	6a03      	ldr	r3, [r0, #32]
 8013e50:	b90b      	cbnz	r3, 8013e56 <__swbuf_r+0x12>
 8013e52:	f7fb fff5 	bl	800fe40 <__sinit>
 8013e56:	69a3      	ldr	r3, [r4, #24]
 8013e58:	60a3      	str	r3, [r4, #8]
 8013e5a:	89a3      	ldrh	r3, [r4, #12]
 8013e5c:	071a      	lsls	r2, r3, #28
 8013e5e:	d525      	bpl.n	8013eac <__swbuf_r+0x68>
 8013e60:	6923      	ldr	r3, [r4, #16]
 8013e62:	b31b      	cbz	r3, 8013eac <__swbuf_r+0x68>
 8013e64:	6823      	ldr	r3, [r4, #0]
 8013e66:	6922      	ldr	r2, [r4, #16]
 8013e68:	1a98      	subs	r0, r3, r2
 8013e6a:	6963      	ldr	r3, [r4, #20]
 8013e6c:	b2f6      	uxtb	r6, r6
 8013e6e:	4283      	cmp	r3, r0
 8013e70:	4637      	mov	r7, r6
 8013e72:	dc04      	bgt.n	8013e7e <__swbuf_r+0x3a>
 8013e74:	4621      	mov	r1, r4
 8013e76:	4628      	mov	r0, r5
 8013e78:	f7ff f962 	bl	8013140 <_fflush_r>
 8013e7c:	b9e0      	cbnz	r0, 8013eb8 <__swbuf_r+0x74>
 8013e7e:	68a3      	ldr	r3, [r4, #8]
 8013e80:	3b01      	subs	r3, #1
 8013e82:	60a3      	str	r3, [r4, #8]
 8013e84:	6823      	ldr	r3, [r4, #0]
 8013e86:	1c5a      	adds	r2, r3, #1
 8013e88:	6022      	str	r2, [r4, #0]
 8013e8a:	701e      	strb	r6, [r3, #0]
 8013e8c:	6962      	ldr	r2, [r4, #20]
 8013e8e:	1c43      	adds	r3, r0, #1
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d004      	beq.n	8013e9e <__swbuf_r+0x5a>
 8013e94:	89a3      	ldrh	r3, [r4, #12]
 8013e96:	07db      	lsls	r3, r3, #31
 8013e98:	d506      	bpl.n	8013ea8 <__swbuf_r+0x64>
 8013e9a:	2e0a      	cmp	r6, #10
 8013e9c:	d104      	bne.n	8013ea8 <__swbuf_r+0x64>
 8013e9e:	4621      	mov	r1, r4
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	f7ff f94d 	bl	8013140 <_fflush_r>
 8013ea6:	b938      	cbnz	r0, 8013eb8 <__swbuf_r+0x74>
 8013ea8:	4638      	mov	r0, r7
 8013eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eac:	4621      	mov	r1, r4
 8013eae:	4628      	mov	r0, r5
 8013eb0:	f000 f806 	bl	8013ec0 <__swsetup_r>
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	d0d5      	beq.n	8013e64 <__swbuf_r+0x20>
 8013eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8013ebc:	e7f4      	b.n	8013ea8 <__swbuf_r+0x64>
	...

08013ec0 <__swsetup_r>:
 8013ec0:	b538      	push	{r3, r4, r5, lr}
 8013ec2:	4b2a      	ldr	r3, [pc, #168]	; (8013f6c <__swsetup_r+0xac>)
 8013ec4:	4605      	mov	r5, r0
 8013ec6:	6818      	ldr	r0, [r3, #0]
 8013ec8:	460c      	mov	r4, r1
 8013eca:	b118      	cbz	r0, 8013ed4 <__swsetup_r+0x14>
 8013ecc:	6a03      	ldr	r3, [r0, #32]
 8013ece:	b90b      	cbnz	r3, 8013ed4 <__swsetup_r+0x14>
 8013ed0:	f7fb ffb6 	bl	800fe40 <__sinit>
 8013ed4:	89a3      	ldrh	r3, [r4, #12]
 8013ed6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013eda:	0718      	lsls	r0, r3, #28
 8013edc:	d422      	bmi.n	8013f24 <__swsetup_r+0x64>
 8013ede:	06d9      	lsls	r1, r3, #27
 8013ee0:	d407      	bmi.n	8013ef2 <__swsetup_r+0x32>
 8013ee2:	2309      	movs	r3, #9
 8013ee4:	602b      	str	r3, [r5, #0]
 8013ee6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013eea:	81a3      	strh	r3, [r4, #12]
 8013eec:	f04f 30ff 	mov.w	r0, #4294967295
 8013ef0:	e034      	b.n	8013f5c <__swsetup_r+0x9c>
 8013ef2:	0758      	lsls	r0, r3, #29
 8013ef4:	d512      	bpl.n	8013f1c <__swsetup_r+0x5c>
 8013ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ef8:	b141      	cbz	r1, 8013f0c <__swsetup_r+0x4c>
 8013efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013efe:	4299      	cmp	r1, r3
 8013f00:	d002      	beq.n	8013f08 <__swsetup_r+0x48>
 8013f02:	4628      	mov	r0, r5
 8013f04:	f7fc ffda 	bl	8010ebc <_free_r>
 8013f08:	2300      	movs	r3, #0
 8013f0a:	6363      	str	r3, [r4, #52]	; 0x34
 8013f0c:	89a3      	ldrh	r3, [r4, #12]
 8013f0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f12:	81a3      	strh	r3, [r4, #12]
 8013f14:	2300      	movs	r3, #0
 8013f16:	6063      	str	r3, [r4, #4]
 8013f18:	6923      	ldr	r3, [r4, #16]
 8013f1a:	6023      	str	r3, [r4, #0]
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	f043 0308 	orr.w	r3, r3, #8
 8013f22:	81a3      	strh	r3, [r4, #12]
 8013f24:	6923      	ldr	r3, [r4, #16]
 8013f26:	b94b      	cbnz	r3, 8013f3c <__swsetup_r+0x7c>
 8013f28:	89a3      	ldrh	r3, [r4, #12]
 8013f2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f32:	d003      	beq.n	8013f3c <__swsetup_r+0x7c>
 8013f34:	4621      	mov	r1, r4
 8013f36:	4628      	mov	r0, r5
 8013f38:	f000 f884 	bl	8014044 <__smakebuf_r>
 8013f3c:	89a0      	ldrh	r0, [r4, #12]
 8013f3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f42:	f010 0301 	ands.w	r3, r0, #1
 8013f46:	d00a      	beq.n	8013f5e <__swsetup_r+0x9e>
 8013f48:	2300      	movs	r3, #0
 8013f4a:	60a3      	str	r3, [r4, #8]
 8013f4c:	6963      	ldr	r3, [r4, #20]
 8013f4e:	425b      	negs	r3, r3
 8013f50:	61a3      	str	r3, [r4, #24]
 8013f52:	6923      	ldr	r3, [r4, #16]
 8013f54:	b943      	cbnz	r3, 8013f68 <__swsetup_r+0xa8>
 8013f56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f5a:	d1c4      	bne.n	8013ee6 <__swsetup_r+0x26>
 8013f5c:	bd38      	pop	{r3, r4, r5, pc}
 8013f5e:	0781      	lsls	r1, r0, #30
 8013f60:	bf58      	it	pl
 8013f62:	6963      	ldrpl	r3, [r4, #20]
 8013f64:	60a3      	str	r3, [r4, #8]
 8013f66:	e7f4      	b.n	8013f52 <__swsetup_r+0x92>
 8013f68:	2000      	movs	r0, #0
 8013f6a:	e7f7      	b.n	8013f5c <__swsetup_r+0x9c>
 8013f6c:	20000074 	.word	0x20000074

08013f70 <_raise_r>:
 8013f70:	291f      	cmp	r1, #31
 8013f72:	b538      	push	{r3, r4, r5, lr}
 8013f74:	4604      	mov	r4, r0
 8013f76:	460d      	mov	r5, r1
 8013f78:	d904      	bls.n	8013f84 <_raise_r+0x14>
 8013f7a:	2316      	movs	r3, #22
 8013f7c:	6003      	str	r3, [r0, #0]
 8013f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f82:	bd38      	pop	{r3, r4, r5, pc}
 8013f84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013f86:	b112      	cbz	r2, 8013f8e <_raise_r+0x1e>
 8013f88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f8c:	b94b      	cbnz	r3, 8013fa2 <_raise_r+0x32>
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f000 f830 	bl	8013ff4 <_getpid_r>
 8013f94:	462a      	mov	r2, r5
 8013f96:	4601      	mov	r1, r0
 8013f98:	4620      	mov	r0, r4
 8013f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f9e:	f000 b817 	b.w	8013fd0 <_kill_r>
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d00a      	beq.n	8013fbc <_raise_r+0x4c>
 8013fa6:	1c59      	adds	r1, r3, #1
 8013fa8:	d103      	bne.n	8013fb2 <_raise_r+0x42>
 8013faa:	2316      	movs	r3, #22
 8013fac:	6003      	str	r3, [r0, #0]
 8013fae:	2001      	movs	r0, #1
 8013fb0:	e7e7      	b.n	8013f82 <_raise_r+0x12>
 8013fb2:	2400      	movs	r4, #0
 8013fb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013fb8:	4628      	mov	r0, r5
 8013fba:	4798      	blx	r3
 8013fbc:	2000      	movs	r0, #0
 8013fbe:	e7e0      	b.n	8013f82 <_raise_r+0x12>

08013fc0 <raise>:
 8013fc0:	4b02      	ldr	r3, [pc, #8]	; (8013fcc <raise+0xc>)
 8013fc2:	4601      	mov	r1, r0
 8013fc4:	6818      	ldr	r0, [r3, #0]
 8013fc6:	f7ff bfd3 	b.w	8013f70 <_raise_r>
 8013fca:	bf00      	nop
 8013fcc:	20000074 	.word	0x20000074

08013fd0 <_kill_r>:
 8013fd0:	b538      	push	{r3, r4, r5, lr}
 8013fd2:	4d07      	ldr	r5, [pc, #28]	; (8013ff0 <_kill_r+0x20>)
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	4604      	mov	r4, r0
 8013fd8:	4608      	mov	r0, r1
 8013fda:	4611      	mov	r1, r2
 8013fdc:	602b      	str	r3, [r5, #0]
 8013fde:	f7ef fc9f 	bl	8003920 <_kill>
 8013fe2:	1c43      	adds	r3, r0, #1
 8013fe4:	d102      	bne.n	8013fec <_kill_r+0x1c>
 8013fe6:	682b      	ldr	r3, [r5, #0]
 8013fe8:	b103      	cbz	r3, 8013fec <_kill_r+0x1c>
 8013fea:	6023      	str	r3, [r4, #0]
 8013fec:	bd38      	pop	{r3, r4, r5, pc}
 8013fee:	bf00      	nop
 8013ff0:	20004a60 	.word	0x20004a60

08013ff4 <_getpid_r>:
 8013ff4:	f7ef bc8c 	b.w	8003910 <_getpid>

08013ff8 <__swhatbuf_r>:
 8013ff8:	b570      	push	{r4, r5, r6, lr}
 8013ffa:	460c      	mov	r4, r1
 8013ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014000:	2900      	cmp	r1, #0
 8014002:	b096      	sub	sp, #88	; 0x58
 8014004:	4615      	mov	r5, r2
 8014006:	461e      	mov	r6, r3
 8014008:	da0d      	bge.n	8014026 <__swhatbuf_r+0x2e>
 801400a:	89a3      	ldrh	r3, [r4, #12]
 801400c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014010:	f04f 0100 	mov.w	r1, #0
 8014014:	bf0c      	ite	eq
 8014016:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801401a:	2340      	movne	r3, #64	; 0x40
 801401c:	2000      	movs	r0, #0
 801401e:	6031      	str	r1, [r6, #0]
 8014020:	602b      	str	r3, [r5, #0]
 8014022:	b016      	add	sp, #88	; 0x58
 8014024:	bd70      	pop	{r4, r5, r6, pc}
 8014026:	466a      	mov	r2, sp
 8014028:	f000 f848 	bl	80140bc <_fstat_r>
 801402c:	2800      	cmp	r0, #0
 801402e:	dbec      	blt.n	801400a <__swhatbuf_r+0x12>
 8014030:	9901      	ldr	r1, [sp, #4]
 8014032:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014036:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801403a:	4259      	negs	r1, r3
 801403c:	4159      	adcs	r1, r3
 801403e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014042:	e7eb      	b.n	801401c <__swhatbuf_r+0x24>

08014044 <__smakebuf_r>:
 8014044:	898b      	ldrh	r3, [r1, #12]
 8014046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014048:	079d      	lsls	r5, r3, #30
 801404a:	4606      	mov	r6, r0
 801404c:	460c      	mov	r4, r1
 801404e:	d507      	bpl.n	8014060 <__smakebuf_r+0x1c>
 8014050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	6123      	str	r3, [r4, #16]
 8014058:	2301      	movs	r3, #1
 801405a:	6163      	str	r3, [r4, #20]
 801405c:	b002      	add	sp, #8
 801405e:	bd70      	pop	{r4, r5, r6, pc}
 8014060:	ab01      	add	r3, sp, #4
 8014062:	466a      	mov	r2, sp
 8014064:	f7ff ffc8 	bl	8013ff8 <__swhatbuf_r>
 8014068:	9900      	ldr	r1, [sp, #0]
 801406a:	4605      	mov	r5, r0
 801406c:	4630      	mov	r0, r6
 801406e:	f7fc ff99 	bl	8010fa4 <_malloc_r>
 8014072:	b948      	cbnz	r0, 8014088 <__smakebuf_r+0x44>
 8014074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014078:	059a      	lsls	r2, r3, #22
 801407a:	d4ef      	bmi.n	801405c <__smakebuf_r+0x18>
 801407c:	f023 0303 	bic.w	r3, r3, #3
 8014080:	f043 0302 	orr.w	r3, r3, #2
 8014084:	81a3      	strh	r3, [r4, #12]
 8014086:	e7e3      	b.n	8014050 <__smakebuf_r+0xc>
 8014088:	89a3      	ldrh	r3, [r4, #12]
 801408a:	6020      	str	r0, [r4, #0]
 801408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014090:	81a3      	strh	r3, [r4, #12]
 8014092:	9b00      	ldr	r3, [sp, #0]
 8014094:	6163      	str	r3, [r4, #20]
 8014096:	9b01      	ldr	r3, [sp, #4]
 8014098:	6120      	str	r0, [r4, #16]
 801409a:	b15b      	cbz	r3, 80140b4 <__smakebuf_r+0x70>
 801409c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140a0:	4630      	mov	r0, r6
 80140a2:	f000 f81d 	bl	80140e0 <_isatty_r>
 80140a6:	b128      	cbz	r0, 80140b4 <__smakebuf_r+0x70>
 80140a8:	89a3      	ldrh	r3, [r4, #12]
 80140aa:	f023 0303 	bic.w	r3, r3, #3
 80140ae:	f043 0301 	orr.w	r3, r3, #1
 80140b2:	81a3      	strh	r3, [r4, #12]
 80140b4:	89a3      	ldrh	r3, [r4, #12]
 80140b6:	431d      	orrs	r5, r3
 80140b8:	81a5      	strh	r5, [r4, #12]
 80140ba:	e7cf      	b.n	801405c <__smakebuf_r+0x18>

080140bc <_fstat_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	4d07      	ldr	r5, [pc, #28]	; (80140dc <_fstat_r+0x20>)
 80140c0:	2300      	movs	r3, #0
 80140c2:	4604      	mov	r4, r0
 80140c4:	4608      	mov	r0, r1
 80140c6:	4611      	mov	r1, r2
 80140c8:	602b      	str	r3, [r5, #0]
 80140ca:	f7ef fc88 	bl	80039de <_fstat>
 80140ce:	1c43      	adds	r3, r0, #1
 80140d0:	d102      	bne.n	80140d8 <_fstat_r+0x1c>
 80140d2:	682b      	ldr	r3, [r5, #0]
 80140d4:	b103      	cbz	r3, 80140d8 <_fstat_r+0x1c>
 80140d6:	6023      	str	r3, [r4, #0]
 80140d8:	bd38      	pop	{r3, r4, r5, pc}
 80140da:	bf00      	nop
 80140dc:	20004a60 	.word	0x20004a60

080140e0 <_isatty_r>:
 80140e0:	b538      	push	{r3, r4, r5, lr}
 80140e2:	4d06      	ldr	r5, [pc, #24]	; (80140fc <_isatty_r+0x1c>)
 80140e4:	2300      	movs	r3, #0
 80140e6:	4604      	mov	r4, r0
 80140e8:	4608      	mov	r0, r1
 80140ea:	602b      	str	r3, [r5, #0]
 80140ec:	f7ef fc87 	bl	80039fe <_isatty>
 80140f0:	1c43      	adds	r3, r0, #1
 80140f2:	d102      	bne.n	80140fa <_isatty_r+0x1a>
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	b103      	cbz	r3, 80140fa <_isatty_r+0x1a>
 80140f8:	6023      	str	r3, [r4, #0]
 80140fa:	bd38      	pop	{r3, r4, r5, pc}
 80140fc:	20004a60 	.word	0x20004a60

08014100 <pow>:
 8014100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014102:	ed2d 8b02 	vpush	{d8}
 8014106:	eeb0 8a40 	vmov.f32	s16, s0
 801410a:	eef0 8a60 	vmov.f32	s17, s1
 801410e:	ec55 4b11 	vmov	r4, r5, d1
 8014112:	f000 f875 	bl	8014200 <__ieee754_pow>
 8014116:	4622      	mov	r2, r4
 8014118:	462b      	mov	r3, r5
 801411a:	4620      	mov	r0, r4
 801411c:	4629      	mov	r1, r5
 801411e:	ec57 6b10 	vmov	r6, r7, d0
 8014122:	f7ec fd2b 	bl	8000b7c <__aeabi_dcmpun>
 8014126:	2800      	cmp	r0, #0
 8014128:	d13b      	bne.n	80141a2 <pow+0xa2>
 801412a:	ec51 0b18 	vmov	r0, r1, d8
 801412e:	2200      	movs	r2, #0
 8014130:	2300      	movs	r3, #0
 8014132:	f7ec fcf1 	bl	8000b18 <__aeabi_dcmpeq>
 8014136:	b1b8      	cbz	r0, 8014168 <pow+0x68>
 8014138:	2200      	movs	r2, #0
 801413a:	2300      	movs	r3, #0
 801413c:	4620      	mov	r0, r4
 801413e:	4629      	mov	r1, r5
 8014140:	f7ec fcea 	bl	8000b18 <__aeabi_dcmpeq>
 8014144:	2800      	cmp	r0, #0
 8014146:	d146      	bne.n	80141d6 <pow+0xd6>
 8014148:	ec45 4b10 	vmov	d0, r4, r5
 801414c:	f000 f84a 	bl	80141e4 <finite>
 8014150:	b338      	cbz	r0, 80141a2 <pow+0xa2>
 8014152:	2200      	movs	r2, #0
 8014154:	2300      	movs	r3, #0
 8014156:	4620      	mov	r0, r4
 8014158:	4629      	mov	r1, r5
 801415a:	f7ec fce7 	bl	8000b2c <__aeabi_dcmplt>
 801415e:	b300      	cbz	r0, 80141a2 <pow+0xa2>
 8014160:	f7fb fff0 	bl	8010144 <__errno>
 8014164:	2322      	movs	r3, #34	; 0x22
 8014166:	e01b      	b.n	80141a0 <pow+0xa0>
 8014168:	ec47 6b10 	vmov	d0, r6, r7
 801416c:	f000 f83a 	bl	80141e4 <finite>
 8014170:	b9e0      	cbnz	r0, 80141ac <pow+0xac>
 8014172:	eeb0 0a48 	vmov.f32	s0, s16
 8014176:	eef0 0a68 	vmov.f32	s1, s17
 801417a:	f000 f833 	bl	80141e4 <finite>
 801417e:	b1a8      	cbz	r0, 80141ac <pow+0xac>
 8014180:	ec45 4b10 	vmov	d0, r4, r5
 8014184:	f000 f82e 	bl	80141e4 <finite>
 8014188:	b180      	cbz	r0, 80141ac <pow+0xac>
 801418a:	4632      	mov	r2, r6
 801418c:	463b      	mov	r3, r7
 801418e:	4630      	mov	r0, r6
 8014190:	4639      	mov	r1, r7
 8014192:	f7ec fcf3 	bl	8000b7c <__aeabi_dcmpun>
 8014196:	2800      	cmp	r0, #0
 8014198:	d0e2      	beq.n	8014160 <pow+0x60>
 801419a:	f7fb ffd3 	bl	8010144 <__errno>
 801419e:	2321      	movs	r3, #33	; 0x21
 80141a0:	6003      	str	r3, [r0, #0]
 80141a2:	ecbd 8b02 	vpop	{d8}
 80141a6:	ec47 6b10 	vmov	d0, r6, r7
 80141aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141ac:	2200      	movs	r2, #0
 80141ae:	2300      	movs	r3, #0
 80141b0:	4630      	mov	r0, r6
 80141b2:	4639      	mov	r1, r7
 80141b4:	f7ec fcb0 	bl	8000b18 <__aeabi_dcmpeq>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d0f2      	beq.n	80141a2 <pow+0xa2>
 80141bc:	eeb0 0a48 	vmov.f32	s0, s16
 80141c0:	eef0 0a68 	vmov.f32	s1, s17
 80141c4:	f000 f80e 	bl	80141e4 <finite>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d0ea      	beq.n	80141a2 <pow+0xa2>
 80141cc:	ec45 4b10 	vmov	d0, r4, r5
 80141d0:	f000 f808 	bl	80141e4 <finite>
 80141d4:	e7c3      	b.n	801415e <pow+0x5e>
 80141d6:	4f01      	ldr	r7, [pc, #4]	; (80141dc <pow+0xdc>)
 80141d8:	2600      	movs	r6, #0
 80141da:	e7e2      	b.n	80141a2 <pow+0xa2>
 80141dc:	3ff00000 	.word	0x3ff00000

080141e0 <atan2f>:
 80141e0:	f000 bd42 	b.w	8014c68 <__ieee754_atan2f>

080141e4 <finite>:
 80141e4:	b082      	sub	sp, #8
 80141e6:	ed8d 0b00 	vstr	d0, [sp]
 80141ea:	9801      	ldr	r0, [sp, #4]
 80141ec:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80141f0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80141f4:	0fc0      	lsrs	r0, r0, #31
 80141f6:	b002      	add	sp, #8
 80141f8:	4770      	bx	lr
 80141fa:	0000      	movs	r0, r0
 80141fc:	0000      	movs	r0, r0
	...

08014200 <__ieee754_pow>:
 8014200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014204:	ed2d 8b06 	vpush	{d8-d10}
 8014208:	b089      	sub	sp, #36	; 0x24
 801420a:	ed8d 1b00 	vstr	d1, [sp]
 801420e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014212:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014216:	ea58 0102 	orrs.w	r1, r8, r2
 801421a:	ec57 6b10 	vmov	r6, r7, d0
 801421e:	d115      	bne.n	801424c <__ieee754_pow+0x4c>
 8014220:	19b3      	adds	r3, r6, r6
 8014222:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8014226:	4152      	adcs	r2, r2
 8014228:	4299      	cmp	r1, r3
 801422a:	4b89      	ldr	r3, [pc, #548]	; (8014450 <__ieee754_pow+0x250>)
 801422c:	4193      	sbcs	r3, r2
 801422e:	f080 84d1 	bcs.w	8014bd4 <__ieee754_pow+0x9d4>
 8014232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014236:	4630      	mov	r0, r6
 8014238:	4639      	mov	r1, r7
 801423a:	f7ec f84f 	bl	80002dc <__adddf3>
 801423e:	ec41 0b10 	vmov	d0, r0, r1
 8014242:	b009      	add	sp, #36	; 0x24
 8014244:	ecbd 8b06 	vpop	{d8-d10}
 8014248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424c:	4b81      	ldr	r3, [pc, #516]	; (8014454 <__ieee754_pow+0x254>)
 801424e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014252:	429c      	cmp	r4, r3
 8014254:	ee10 aa10 	vmov	sl, s0
 8014258:	463d      	mov	r5, r7
 801425a:	dc06      	bgt.n	801426a <__ieee754_pow+0x6a>
 801425c:	d101      	bne.n	8014262 <__ieee754_pow+0x62>
 801425e:	2e00      	cmp	r6, #0
 8014260:	d1e7      	bne.n	8014232 <__ieee754_pow+0x32>
 8014262:	4598      	cmp	r8, r3
 8014264:	dc01      	bgt.n	801426a <__ieee754_pow+0x6a>
 8014266:	d10f      	bne.n	8014288 <__ieee754_pow+0x88>
 8014268:	b172      	cbz	r2, 8014288 <__ieee754_pow+0x88>
 801426a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801426e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8014272:	ea55 050a 	orrs.w	r5, r5, sl
 8014276:	d1dc      	bne.n	8014232 <__ieee754_pow+0x32>
 8014278:	e9dd 3200 	ldrd	r3, r2, [sp]
 801427c:	18db      	adds	r3, r3, r3
 801427e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8014282:	4152      	adcs	r2, r2
 8014284:	429d      	cmp	r5, r3
 8014286:	e7d0      	b.n	801422a <__ieee754_pow+0x2a>
 8014288:	2d00      	cmp	r5, #0
 801428a:	da3b      	bge.n	8014304 <__ieee754_pow+0x104>
 801428c:	4b72      	ldr	r3, [pc, #456]	; (8014458 <__ieee754_pow+0x258>)
 801428e:	4598      	cmp	r8, r3
 8014290:	dc51      	bgt.n	8014336 <__ieee754_pow+0x136>
 8014292:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014296:	4598      	cmp	r8, r3
 8014298:	f340 84ab 	ble.w	8014bf2 <__ieee754_pow+0x9f2>
 801429c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80142a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80142a4:	2b14      	cmp	r3, #20
 80142a6:	dd0f      	ble.n	80142c8 <__ieee754_pow+0xc8>
 80142a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80142ac:	fa22 f103 	lsr.w	r1, r2, r3
 80142b0:	fa01 f303 	lsl.w	r3, r1, r3
 80142b4:	4293      	cmp	r3, r2
 80142b6:	f040 849c 	bne.w	8014bf2 <__ieee754_pow+0x9f2>
 80142ba:	f001 0101 	and.w	r1, r1, #1
 80142be:	f1c1 0302 	rsb	r3, r1, #2
 80142c2:	9304      	str	r3, [sp, #16]
 80142c4:	b182      	cbz	r2, 80142e8 <__ieee754_pow+0xe8>
 80142c6:	e05f      	b.n	8014388 <__ieee754_pow+0x188>
 80142c8:	2a00      	cmp	r2, #0
 80142ca:	d15b      	bne.n	8014384 <__ieee754_pow+0x184>
 80142cc:	f1c3 0314 	rsb	r3, r3, #20
 80142d0:	fa48 f103 	asr.w	r1, r8, r3
 80142d4:	fa01 f303 	lsl.w	r3, r1, r3
 80142d8:	4543      	cmp	r3, r8
 80142da:	f040 8487 	bne.w	8014bec <__ieee754_pow+0x9ec>
 80142de:	f001 0101 	and.w	r1, r1, #1
 80142e2:	f1c1 0302 	rsb	r3, r1, #2
 80142e6:	9304      	str	r3, [sp, #16]
 80142e8:	4b5c      	ldr	r3, [pc, #368]	; (801445c <__ieee754_pow+0x25c>)
 80142ea:	4598      	cmp	r8, r3
 80142ec:	d132      	bne.n	8014354 <__ieee754_pow+0x154>
 80142ee:	f1b9 0f00 	cmp.w	r9, #0
 80142f2:	f280 8477 	bge.w	8014be4 <__ieee754_pow+0x9e4>
 80142f6:	4959      	ldr	r1, [pc, #356]	; (801445c <__ieee754_pow+0x25c>)
 80142f8:	4632      	mov	r2, r6
 80142fa:	463b      	mov	r3, r7
 80142fc:	2000      	movs	r0, #0
 80142fe:	f7ec facd 	bl	800089c <__aeabi_ddiv>
 8014302:	e79c      	b.n	801423e <__ieee754_pow+0x3e>
 8014304:	2300      	movs	r3, #0
 8014306:	9304      	str	r3, [sp, #16]
 8014308:	2a00      	cmp	r2, #0
 801430a:	d13d      	bne.n	8014388 <__ieee754_pow+0x188>
 801430c:	4b51      	ldr	r3, [pc, #324]	; (8014454 <__ieee754_pow+0x254>)
 801430e:	4598      	cmp	r8, r3
 8014310:	d1ea      	bne.n	80142e8 <__ieee754_pow+0xe8>
 8014312:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014316:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801431a:	ea53 030a 	orrs.w	r3, r3, sl
 801431e:	f000 8459 	beq.w	8014bd4 <__ieee754_pow+0x9d4>
 8014322:	4b4f      	ldr	r3, [pc, #316]	; (8014460 <__ieee754_pow+0x260>)
 8014324:	429c      	cmp	r4, r3
 8014326:	dd08      	ble.n	801433a <__ieee754_pow+0x13a>
 8014328:	f1b9 0f00 	cmp.w	r9, #0
 801432c:	f2c0 8456 	blt.w	8014bdc <__ieee754_pow+0x9dc>
 8014330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014334:	e783      	b.n	801423e <__ieee754_pow+0x3e>
 8014336:	2302      	movs	r3, #2
 8014338:	e7e5      	b.n	8014306 <__ieee754_pow+0x106>
 801433a:	f1b9 0f00 	cmp.w	r9, #0
 801433e:	f04f 0000 	mov.w	r0, #0
 8014342:	f04f 0100 	mov.w	r1, #0
 8014346:	f6bf af7a 	bge.w	801423e <__ieee754_pow+0x3e>
 801434a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801434e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014352:	e774      	b.n	801423e <__ieee754_pow+0x3e>
 8014354:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014358:	d106      	bne.n	8014368 <__ieee754_pow+0x168>
 801435a:	4632      	mov	r2, r6
 801435c:	463b      	mov	r3, r7
 801435e:	4630      	mov	r0, r6
 8014360:	4639      	mov	r1, r7
 8014362:	f7ec f971 	bl	8000648 <__aeabi_dmul>
 8014366:	e76a      	b.n	801423e <__ieee754_pow+0x3e>
 8014368:	4b3e      	ldr	r3, [pc, #248]	; (8014464 <__ieee754_pow+0x264>)
 801436a:	4599      	cmp	r9, r3
 801436c:	d10c      	bne.n	8014388 <__ieee754_pow+0x188>
 801436e:	2d00      	cmp	r5, #0
 8014370:	db0a      	blt.n	8014388 <__ieee754_pow+0x188>
 8014372:	ec47 6b10 	vmov	d0, r6, r7
 8014376:	b009      	add	sp, #36	; 0x24
 8014378:	ecbd 8b06 	vpop	{d8-d10}
 801437c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014380:	f000 be9c 	b.w	80150bc <__ieee754_sqrt>
 8014384:	2300      	movs	r3, #0
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	ec47 6b10 	vmov	d0, r6, r7
 801438c:	f000 fc62 	bl	8014c54 <fabs>
 8014390:	ec51 0b10 	vmov	r0, r1, d0
 8014394:	f1ba 0f00 	cmp.w	sl, #0
 8014398:	d129      	bne.n	80143ee <__ieee754_pow+0x1ee>
 801439a:	b124      	cbz	r4, 80143a6 <__ieee754_pow+0x1a6>
 801439c:	4b2f      	ldr	r3, [pc, #188]	; (801445c <__ieee754_pow+0x25c>)
 801439e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d123      	bne.n	80143ee <__ieee754_pow+0x1ee>
 80143a6:	f1b9 0f00 	cmp.w	r9, #0
 80143aa:	da05      	bge.n	80143b8 <__ieee754_pow+0x1b8>
 80143ac:	4602      	mov	r2, r0
 80143ae:	460b      	mov	r3, r1
 80143b0:	2000      	movs	r0, #0
 80143b2:	492a      	ldr	r1, [pc, #168]	; (801445c <__ieee754_pow+0x25c>)
 80143b4:	f7ec fa72 	bl	800089c <__aeabi_ddiv>
 80143b8:	2d00      	cmp	r5, #0
 80143ba:	f6bf af40 	bge.w	801423e <__ieee754_pow+0x3e>
 80143be:	9b04      	ldr	r3, [sp, #16]
 80143c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80143c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80143c8:	431c      	orrs	r4, r3
 80143ca:	d108      	bne.n	80143de <__ieee754_pow+0x1de>
 80143cc:	4602      	mov	r2, r0
 80143ce:	460b      	mov	r3, r1
 80143d0:	4610      	mov	r0, r2
 80143d2:	4619      	mov	r1, r3
 80143d4:	f7eb ff80 	bl	80002d8 <__aeabi_dsub>
 80143d8:	4602      	mov	r2, r0
 80143da:	460b      	mov	r3, r1
 80143dc:	e78f      	b.n	80142fe <__ieee754_pow+0xfe>
 80143de:	9b04      	ldr	r3, [sp, #16]
 80143e0:	2b01      	cmp	r3, #1
 80143e2:	f47f af2c 	bne.w	801423e <__ieee754_pow+0x3e>
 80143e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143ea:	4619      	mov	r1, r3
 80143ec:	e727      	b.n	801423e <__ieee754_pow+0x3e>
 80143ee:	0feb      	lsrs	r3, r5, #31
 80143f0:	3b01      	subs	r3, #1
 80143f2:	9306      	str	r3, [sp, #24]
 80143f4:	9a06      	ldr	r2, [sp, #24]
 80143f6:	9b04      	ldr	r3, [sp, #16]
 80143f8:	4313      	orrs	r3, r2
 80143fa:	d102      	bne.n	8014402 <__ieee754_pow+0x202>
 80143fc:	4632      	mov	r2, r6
 80143fe:	463b      	mov	r3, r7
 8014400:	e7e6      	b.n	80143d0 <__ieee754_pow+0x1d0>
 8014402:	4b19      	ldr	r3, [pc, #100]	; (8014468 <__ieee754_pow+0x268>)
 8014404:	4598      	cmp	r8, r3
 8014406:	f340 80fb 	ble.w	8014600 <__ieee754_pow+0x400>
 801440a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801440e:	4598      	cmp	r8, r3
 8014410:	4b13      	ldr	r3, [pc, #76]	; (8014460 <__ieee754_pow+0x260>)
 8014412:	dd0c      	ble.n	801442e <__ieee754_pow+0x22e>
 8014414:	429c      	cmp	r4, r3
 8014416:	dc0f      	bgt.n	8014438 <__ieee754_pow+0x238>
 8014418:	f1b9 0f00 	cmp.w	r9, #0
 801441c:	da0f      	bge.n	801443e <__ieee754_pow+0x23e>
 801441e:	2000      	movs	r0, #0
 8014420:	b009      	add	sp, #36	; 0x24
 8014422:	ecbd 8b06 	vpop	{d8-d10}
 8014426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801442a:	f000 be3e 	b.w	80150aa <__math_oflow>
 801442e:	429c      	cmp	r4, r3
 8014430:	dbf2      	blt.n	8014418 <__ieee754_pow+0x218>
 8014432:	4b0a      	ldr	r3, [pc, #40]	; (801445c <__ieee754_pow+0x25c>)
 8014434:	429c      	cmp	r4, r3
 8014436:	dd19      	ble.n	801446c <__ieee754_pow+0x26c>
 8014438:	f1b9 0f00 	cmp.w	r9, #0
 801443c:	dcef      	bgt.n	801441e <__ieee754_pow+0x21e>
 801443e:	2000      	movs	r0, #0
 8014440:	b009      	add	sp, #36	; 0x24
 8014442:	ecbd 8b06 	vpop	{d8-d10}
 8014446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801444a:	f000 be25 	b.w	8015098 <__math_uflow>
 801444e:	bf00      	nop
 8014450:	fff00000 	.word	0xfff00000
 8014454:	7ff00000 	.word	0x7ff00000
 8014458:	433fffff 	.word	0x433fffff
 801445c:	3ff00000 	.word	0x3ff00000
 8014460:	3fefffff 	.word	0x3fefffff
 8014464:	3fe00000 	.word	0x3fe00000
 8014468:	41e00000 	.word	0x41e00000
 801446c:	4b60      	ldr	r3, [pc, #384]	; (80145f0 <__ieee754_pow+0x3f0>)
 801446e:	2200      	movs	r2, #0
 8014470:	f7eb ff32 	bl	80002d8 <__aeabi_dsub>
 8014474:	a354      	add	r3, pc, #336	; (adr r3, 80145c8 <__ieee754_pow+0x3c8>)
 8014476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447a:	4604      	mov	r4, r0
 801447c:	460d      	mov	r5, r1
 801447e:	f7ec f8e3 	bl	8000648 <__aeabi_dmul>
 8014482:	a353      	add	r3, pc, #332	; (adr r3, 80145d0 <__ieee754_pow+0x3d0>)
 8014484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014488:	4606      	mov	r6, r0
 801448a:	460f      	mov	r7, r1
 801448c:	4620      	mov	r0, r4
 801448e:	4629      	mov	r1, r5
 8014490:	f7ec f8da 	bl	8000648 <__aeabi_dmul>
 8014494:	4b57      	ldr	r3, [pc, #348]	; (80145f4 <__ieee754_pow+0x3f4>)
 8014496:	4682      	mov	sl, r0
 8014498:	468b      	mov	fp, r1
 801449a:	2200      	movs	r2, #0
 801449c:	4620      	mov	r0, r4
 801449e:	4629      	mov	r1, r5
 80144a0:	f7ec f8d2 	bl	8000648 <__aeabi_dmul>
 80144a4:	4602      	mov	r2, r0
 80144a6:	460b      	mov	r3, r1
 80144a8:	a14b      	add	r1, pc, #300	; (adr r1, 80145d8 <__ieee754_pow+0x3d8>)
 80144aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144ae:	f7eb ff13 	bl	80002d8 <__aeabi_dsub>
 80144b2:	4622      	mov	r2, r4
 80144b4:	462b      	mov	r3, r5
 80144b6:	f7ec f8c7 	bl	8000648 <__aeabi_dmul>
 80144ba:	4602      	mov	r2, r0
 80144bc:	460b      	mov	r3, r1
 80144be:	2000      	movs	r0, #0
 80144c0:	494d      	ldr	r1, [pc, #308]	; (80145f8 <__ieee754_pow+0x3f8>)
 80144c2:	f7eb ff09 	bl	80002d8 <__aeabi_dsub>
 80144c6:	4622      	mov	r2, r4
 80144c8:	4680      	mov	r8, r0
 80144ca:	4689      	mov	r9, r1
 80144cc:	462b      	mov	r3, r5
 80144ce:	4620      	mov	r0, r4
 80144d0:	4629      	mov	r1, r5
 80144d2:	f7ec f8b9 	bl	8000648 <__aeabi_dmul>
 80144d6:	4602      	mov	r2, r0
 80144d8:	460b      	mov	r3, r1
 80144da:	4640      	mov	r0, r8
 80144dc:	4649      	mov	r1, r9
 80144de:	f7ec f8b3 	bl	8000648 <__aeabi_dmul>
 80144e2:	a33f      	add	r3, pc, #252	; (adr r3, 80145e0 <__ieee754_pow+0x3e0>)
 80144e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e8:	f7ec f8ae 	bl	8000648 <__aeabi_dmul>
 80144ec:	4602      	mov	r2, r0
 80144ee:	460b      	mov	r3, r1
 80144f0:	4650      	mov	r0, sl
 80144f2:	4659      	mov	r1, fp
 80144f4:	f7eb fef0 	bl	80002d8 <__aeabi_dsub>
 80144f8:	4602      	mov	r2, r0
 80144fa:	460b      	mov	r3, r1
 80144fc:	4680      	mov	r8, r0
 80144fe:	4689      	mov	r9, r1
 8014500:	4630      	mov	r0, r6
 8014502:	4639      	mov	r1, r7
 8014504:	f7eb feea 	bl	80002dc <__adddf3>
 8014508:	2000      	movs	r0, #0
 801450a:	4632      	mov	r2, r6
 801450c:	463b      	mov	r3, r7
 801450e:	4604      	mov	r4, r0
 8014510:	460d      	mov	r5, r1
 8014512:	f7eb fee1 	bl	80002d8 <__aeabi_dsub>
 8014516:	4602      	mov	r2, r0
 8014518:	460b      	mov	r3, r1
 801451a:	4640      	mov	r0, r8
 801451c:	4649      	mov	r1, r9
 801451e:	f7eb fedb 	bl	80002d8 <__aeabi_dsub>
 8014522:	9b04      	ldr	r3, [sp, #16]
 8014524:	9a06      	ldr	r2, [sp, #24]
 8014526:	3b01      	subs	r3, #1
 8014528:	4313      	orrs	r3, r2
 801452a:	4682      	mov	sl, r0
 801452c:	468b      	mov	fp, r1
 801452e:	f040 81e7 	bne.w	8014900 <__ieee754_pow+0x700>
 8014532:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80145e8 <__ieee754_pow+0x3e8>
 8014536:	eeb0 8a47 	vmov.f32	s16, s14
 801453a:	eef0 8a67 	vmov.f32	s17, s15
 801453e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014542:	2600      	movs	r6, #0
 8014544:	4632      	mov	r2, r6
 8014546:	463b      	mov	r3, r7
 8014548:	e9dd 0100 	ldrd	r0, r1, [sp]
 801454c:	f7eb fec4 	bl	80002d8 <__aeabi_dsub>
 8014550:	4622      	mov	r2, r4
 8014552:	462b      	mov	r3, r5
 8014554:	f7ec f878 	bl	8000648 <__aeabi_dmul>
 8014558:	e9dd 2300 	ldrd	r2, r3, [sp]
 801455c:	4680      	mov	r8, r0
 801455e:	4689      	mov	r9, r1
 8014560:	4650      	mov	r0, sl
 8014562:	4659      	mov	r1, fp
 8014564:	f7ec f870 	bl	8000648 <__aeabi_dmul>
 8014568:	4602      	mov	r2, r0
 801456a:	460b      	mov	r3, r1
 801456c:	4640      	mov	r0, r8
 801456e:	4649      	mov	r1, r9
 8014570:	f7eb feb4 	bl	80002dc <__adddf3>
 8014574:	4632      	mov	r2, r6
 8014576:	463b      	mov	r3, r7
 8014578:	4680      	mov	r8, r0
 801457a:	4689      	mov	r9, r1
 801457c:	4620      	mov	r0, r4
 801457e:	4629      	mov	r1, r5
 8014580:	f7ec f862 	bl	8000648 <__aeabi_dmul>
 8014584:	460b      	mov	r3, r1
 8014586:	4604      	mov	r4, r0
 8014588:	460d      	mov	r5, r1
 801458a:	4602      	mov	r2, r0
 801458c:	4649      	mov	r1, r9
 801458e:	4640      	mov	r0, r8
 8014590:	f7eb fea4 	bl	80002dc <__adddf3>
 8014594:	4b19      	ldr	r3, [pc, #100]	; (80145fc <__ieee754_pow+0x3fc>)
 8014596:	4299      	cmp	r1, r3
 8014598:	ec45 4b19 	vmov	d9, r4, r5
 801459c:	4606      	mov	r6, r0
 801459e:	460f      	mov	r7, r1
 80145a0:	468b      	mov	fp, r1
 80145a2:	f340 82f0 	ble.w	8014b86 <__ieee754_pow+0x986>
 80145a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80145aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80145ae:	4303      	orrs	r3, r0
 80145b0:	f000 81e4 	beq.w	801497c <__ieee754_pow+0x77c>
 80145b4:	ec51 0b18 	vmov	r0, r1, d8
 80145b8:	2200      	movs	r2, #0
 80145ba:	2300      	movs	r3, #0
 80145bc:	f7ec fab6 	bl	8000b2c <__aeabi_dcmplt>
 80145c0:	3800      	subs	r0, #0
 80145c2:	bf18      	it	ne
 80145c4:	2001      	movne	r0, #1
 80145c6:	e72b      	b.n	8014420 <__ieee754_pow+0x220>
 80145c8:	60000000 	.word	0x60000000
 80145cc:	3ff71547 	.word	0x3ff71547
 80145d0:	f85ddf44 	.word	0xf85ddf44
 80145d4:	3e54ae0b 	.word	0x3e54ae0b
 80145d8:	55555555 	.word	0x55555555
 80145dc:	3fd55555 	.word	0x3fd55555
 80145e0:	652b82fe 	.word	0x652b82fe
 80145e4:	3ff71547 	.word	0x3ff71547
 80145e8:	00000000 	.word	0x00000000
 80145ec:	bff00000 	.word	0xbff00000
 80145f0:	3ff00000 	.word	0x3ff00000
 80145f4:	3fd00000 	.word	0x3fd00000
 80145f8:	3fe00000 	.word	0x3fe00000
 80145fc:	408fffff 	.word	0x408fffff
 8014600:	4bd5      	ldr	r3, [pc, #852]	; (8014958 <__ieee754_pow+0x758>)
 8014602:	402b      	ands	r3, r5
 8014604:	2200      	movs	r2, #0
 8014606:	b92b      	cbnz	r3, 8014614 <__ieee754_pow+0x414>
 8014608:	4bd4      	ldr	r3, [pc, #848]	; (801495c <__ieee754_pow+0x75c>)
 801460a:	f7ec f81d 	bl	8000648 <__aeabi_dmul>
 801460e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014612:	460c      	mov	r4, r1
 8014614:	1523      	asrs	r3, r4, #20
 8014616:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801461a:	4413      	add	r3, r2
 801461c:	9305      	str	r3, [sp, #20]
 801461e:	4bd0      	ldr	r3, [pc, #832]	; (8014960 <__ieee754_pow+0x760>)
 8014620:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014624:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014628:	429c      	cmp	r4, r3
 801462a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801462e:	dd08      	ble.n	8014642 <__ieee754_pow+0x442>
 8014630:	4bcc      	ldr	r3, [pc, #816]	; (8014964 <__ieee754_pow+0x764>)
 8014632:	429c      	cmp	r4, r3
 8014634:	f340 8162 	ble.w	80148fc <__ieee754_pow+0x6fc>
 8014638:	9b05      	ldr	r3, [sp, #20]
 801463a:	3301      	adds	r3, #1
 801463c:	9305      	str	r3, [sp, #20]
 801463e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014642:	2400      	movs	r4, #0
 8014644:	00e3      	lsls	r3, r4, #3
 8014646:	9307      	str	r3, [sp, #28]
 8014648:	4bc7      	ldr	r3, [pc, #796]	; (8014968 <__ieee754_pow+0x768>)
 801464a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801464e:	ed93 7b00 	vldr	d7, [r3]
 8014652:	4629      	mov	r1, r5
 8014654:	ec53 2b17 	vmov	r2, r3, d7
 8014658:	eeb0 9a47 	vmov.f32	s18, s14
 801465c:	eef0 9a67 	vmov.f32	s19, s15
 8014660:	4682      	mov	sl, r0
 8014662:	f7eb fe39 	bl	80002d8 <__aeabi_dsub>
 8014666:	4652      	mov	r2, sl
 8014668:	4606      	mov	r6, r0
 801466a:	460f      	mov	r7, r1
 801466c:	462b      	mov	r3, r5
 801466e:	ec51 0b19 	vmov	r0, r1, d9
 8014672:	f7eb fe33 	bl	80002dc <__adddf3>
 8014676:	4602      	mov	r2, r0
 8014678:	460b      	mov	r3, r1
 801467a:	2000      	movs	r0, #0
 801467c:	49bb      	ldr	r1, [pc, #748]	; (801496c <__ieee754_pow+0x76c>)
 801467e:	f7ec f90d 	bl	800089c <__aeabi_ddiv>
 8014682:	ec41 0b1a 	vmov	d10, r0, r1
 8014686:	4602      	mov	r2, r0
 8014688:	460b      	mov	r3, r1
 801468a:	4630      	mov	r0, r6
 801468c:	4639      	mov	r1, r7
 801468e:	f7eb ffdb 	bl	8000648 <__aeabi_dmul>
 8014692:	2300      	movs	r3, #0
 8014694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014698:	9302      	str	r3, [sp, #8]
 801469a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801469e:	46ab      	mov	fp, r5
 80146a0:	106d      	asrs	r5, r5, #1
 80146a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80146a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80146aa:	ec41 0b18 	vmov	d8, r0, r1
 80146ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80146b2:	2200      	movs	r2, #0
 80146b4:	4640      	mov	r0, r8
 80146b6:	4649      	mov	r1, r9
 80146b8:	4614      	mov	r4, r2
 80146ba:	461d      	mov	r5, r3
 80146bc:	f7eb ffc4 	bl	8000648 <__aeabi_dmul>
 80146c0:	4602      	mov	r2, r0
 80146c2:	460b      	mov	r3, r1
 80146c4:	4630      	mov	r0, r6
 80146c6:	4639      	mov	r1, r7
 80146c8:	f7eb fe06 	bl	80002d8 <__aeabi_dsub>
 80146cc:	ec53 2b19 	vmov	r2, r3, d9
 80146d0:	4606      	mov	r6, r0
 80146d2:	460f      	mov	r7, r1
 80146d4:	4620      	mov	r0, r4
 80146d6:	4629      	mov	r1, r5
 80146d8:	f7eb fdfe 	bl	80002d8 <__aeabi_dsub>
 80146dc:	4602      	mov	r2, r0
 80146de:	460b      	mov	r3, r1
 80146e0:	4650      	mov	r0, sl
 80146e2:	4659      	mov	r1, fp
 80146e4:	f7eb fdf8 	bl	80002d8 <__aeabi_dsub>
 80146e8:	4642      	mov	r2, r8
 80146ea:	464b      	mov	r3, r9
 80146ec:	f7eb ffac 	bl	8000648 <__aeabi_dmul>
 80146f0:	4602      	mov	r2, r0
 80146f2:	460b      	mov	r3, r1
 80146f4:	4630      	mov	r0, r6
 80146f6:	4639      	mov	r1, r7
 80146f8:	f7eb fdee 	bl	80002d8 <__aeabi_dsub>
 80146fc:	ec53 2b1a 	vmov	r2, r3, d10
 8014700:	f7eb ffa2 	bl	8000648 <__aeabi_dmul>
 8014704:	ec53 2b18 	vmov	r2, r3, d8
 8014708:	ec41 0b19 	vmov	d9, r0, r1
 801470c:	ec51 0b18 	vmov	r0, r1, d8
 8014710:	f7eb ff9a 	bl	8000648 <__aeabi_dmul>
 8014714:	a37c      	add	r3, pc, #496	; (adr r3, 8014908 <__ieee754_pow+0x708>)
 8014716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471a:	4604      	mov	r4, r0
 801471c:	460d      	mov	r5, r1
 801471e:	f7eb ff93 	bl	8000648 <__aeabi_dmul>
 8014722:	a37b      	add	r3, pc, #492	; (adr r3, 8014910 <__ieee754_pow+0x710>)
 8014724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014728:	f7eb fdd8 	bl	80002dc <__adddf3>
 801472c:	4622      	mov	r2, r4
 801472e:	462b      	mov	r3, r5
 8014730:	f7eb ff8a 	bl	8000648 <__aeabi_dmul>
 8014734:	a378      	add	r3, pc, #480	; (adr r3, 8014918 <__ieee754_pow+0x718>)
 8014736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473a:	f7eb fdcf 	bl	80002dc <__adddf3>
 801473e:	4622      	mov	r2, r4
 8014740:	462b      	mov	r3, r5
 8014742:	f7eb ff81 	bl	8000648 <__aeabi_dmul>
 8014746:	a376      	add	r3, pc, #472	; (adr r3, 8014920 <__ieee754_pow+0x720>)
 8014748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474c:	f7eb fdc6 	bl	80002dc <__adddf3>
 8014750:	4622      	mov	r2, r4
 8014752:	462b      	mov	r3, r5
 8014754:	f7eb ff78 	bl	8000648 <__aeabi_dmul>
 8014758:	a373      	add	r3, pc, #460	; (adr r3, 8014928 <__ieee754_pow+0x728>)
 801475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475e:	f7eb fdbd 	bl	80002dc <__adddf3>
 8014762:	4622      	mov	r2, r4
 8014764:	462b      	mov	r3, r5
 8014766:	f7eb ff6f 	bl	8000648 <__aeabi_dmul>
 801476a:	a371      	add	r3, pc, #452	; (adr r3, 8014930 <__ieee754_pow+0x730>)
 801476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014770:	f7eb fdb4 	bl	80002dc <__adddf3>
 8014774:	4622      	mov	r2, r4
 8014776:	4606      	mov	r6, r0
 8014778:	460f      	mov	r7, r1
 801477a:	462b      	mov	r3, r5
 801477c:	4620      	mov	r0, r4
 801477e:	4629      	mov	r1, r5
 8014780:	f7eb ff62 	bl	8000648 <__aeabi_dmul>
 8014784:	4602      	mov	r2, r0
 8014786:	460b      	mov	r3, r1
 8014788:	4630      	mov	r0, r6
 801478a:	4639      	mov	r1, r7
 801478c:	f7eb ff5c 	bl	8000648 <__aeabi_dmul>
 8014790:	4642      	mov	r2, r8
 8014792:	4604      	mov	r4, r0
 8014794:	460d      	mov	r5, r1
 8014796:	464b      	mov	r3, r9
 8014798:	ec51 0b18 	vmov	r0, r1, d8
 801479c:	f7eb fd9e 	bl	80002dc <__adddf3>
 80147a0:	ec53 2b19 	vmov	r2, r3, d9
 80147a4:	f7eb ff50 	bl	8000648 <__aeabi_dmul>
 80147a8:	4622      	mov	r2, r4
 80147aa:	462b      	mov	r3, r5
 80147ac:	f7eb fd96 	bl	80002dc <__adddf3>
 80147b0:	4642      	mov	r2, r8
 80147b2:	4682      	mov	sl, r0
 80147b4:	468b      	mov	fp, r1
 80147b6:	464b      	mov	r3, r9
 80147b8:	4640      	mov	r0, r8
 80147ba:	4649      	mov	r1, r9
 80147bc:	f7eb ff44 	bl	8000648 <__aeabi_dmul>
 80147c0:	4b6b      	ldr	r3, [pc, #428]	; (8014970 <__ieee754_pow+0x770>)
 80147c2:	2200      	movs	r2, #0
 80147c4:	4606      	mov	r6, r0
 80147c6:	460f      	mov	r7, r1
 80147c8:	f7eb fd88 	bl	80002dc <__adddf3>
 80147cc:	4652      	mov	r2, sl
 80147ce:	465b      	mov	r3, fp
 80147d0:	f7eb fd84 	bl	80002dc <__adddf3>
 80147d4:	2000      	movs	r0, #0
 80147d6:	4604      	mov	r4, r0
 80147d8:	460d      	mov	r5, r1
 80147da:	4602      	mov	r2, r0
 80147dc:	460b      	mov	r3, r1
 80147de:	4640      	mov	r0, r8
 80147e0:	4649      	mov	r1, r9
 80147e2:	f7eb ff31 	bl	8000648 <__aeabi_dmul>
 80147e6:	4b62      	ldr	r3, [pc, #392]	; (8014970 <__ieee754_pow+0x770>)
 80147e8:	4680      	mov	r8, r0
 80147ea:	4689      	mov	r9, r1
 80147ec:	2200      	movs	r2, #0
 80147ee:	4620      	mov	r0, r4
 80147f0:	4629      	mov	r1, r5
 80147f2:	f7eb fd71 	bl	80002d8 <__aeabi_dsub>
 80147f6:	4632      	mov	r2, r6
 80147f8:	463b      	mov	r3, r7
 80147fa:	f7eb fd6d 	bl	80002d8 <__aeabi_dsub>
 80147fe:	4602      	mov	r2, r0
 8014800:	460b      	mov	r3, r1
 8014802:	4650      	mov	r0, sl
 8014804:	4659      	mov	r1, fp
 8014806:	f7eb fd67 	bl	80002d8 <__aeabi_dsub>
 801480a:	ec53 2b18 	vmov	r2, r3, d8
 801480e:	f7eb ff1b 	bl	8000648 <__aeabi_dmul>
 8014812:	4622      	mov	r2, r4
 8014814:	4606      	mov	r6, r0
 8014816:	460f      	mov	r7, r1
 8014818:	462b      	mov	r3, r5
 801481a:	ec51 0b19 	vmov	r0, r1, d9
 801481e:	f7eb ff13 	bl	8000648 <__aeabi_dmul>
 8014822:	4602      	mov	r2, r0
 8014824:	460b      	mov	r3, r1
 8014826:	4630      	mov	r0, r6
 8014828:	4639      	mov	r1, r7
 801482a:	f7eb fd57 	bl	80002dc <__adddf3>
 801482e:	4606      	mov	r6, r0
 8014830:	460f      	mov	r7, r1
 8014832:	4602      	mov	r2, r0
 8014834:	460b      	mov	r3, r1
 8014836:	4640      	mov	r0, r8
 8014838:	4649      	mov	r1, r9
 801483a:	f7eb fd4f 	bl	80002dc <__adddf3>
 801483e:	a33e      	add	r3, pc, #248	; (adr r3, 8014938 <__ieee754_pow+0x738>)
 8014840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014844:	2000      	movs	r0, #0
 8014846:	4604      	mov	r4, r0
 8014848:	460d      	mov	r5, r1
 801484a:	f7eb fefd 	bl	8000648 <__aeabi_dmul>
 801484e:	4642      	mov	r2, r8
 8014850:	ec41 0b18 	vmov	d8, r0, r1
 8014854:	464b      	mov	r3, r9
 8014856:	4620      	mov	r0, r4
 8014858:	4629      	mov	r1, r5
 801485a:	f7eb fd3d 	bl	80002d8 <__aeabi_dsub>
 801485e:	4602      	mov	r2, r0
 8014860:	460b      	mov	r3, r1
 8014862:	4630      	mov	r0, r6
 8014864:	4639      	mov	r1, r7
 8014866:	f7eb fd37 	bl	80002d8 <__aeabi_dsub>
 801486a:	a335      	add	r3, pc, #212	; (adr r3, 8014940 <__ieee754_pow+0x740>)
 801486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014870:	f7eb feea 	bl	8000648 <__aeabi_dmul>
 8014874:	a334      	add	r3, pc, #208	; (adr r3, 8014948 <__ieee754_pow+0x748>)
 8014876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487a:	4606      	mov	r6, r0
 801487c:	460f      	mov	r7, r1
 801487e:	4620      	mov	r0, r4
 8014880:	4629      	mov	r1, r5
 8014882:	f7eb fee1 	bl	8000648 <__aeabi_dmul>
 8014886:	4602      	mov	r2, r0
 8014888:	460b      	mov	r3, r1
 801488a:	4630      	mov	r0, r6
 801488c:	4639      	mov	r1, r7
 801488e:	f7eb fd25 	bl	80002dc <__adddf3>
 8014892:	9a07      	ldr	r2, [sp, #28]
 8014894:	4b37      	ldr	r3, [pc, #220]	; (8014974 <__ieee754_pow+0x774>)
 8014896:	4413      	add	r3, r2
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	f7eb fd1e 	bl	80002dc <__adddf3>
 80148a0:	4682      	mov	sl, r0
 80148a2:	9805      	ldr	r0, [sp, #20]
 80148a4:	468b      	mov	fp, r1
 80148a6:	f7eb fe65 	bl	8000574 <__aeabi_i2d>
 80148aa:	9a07      	ldr	r2, [sp, #28]
 80148ac:	4b32      	ldr	r3, [pc, #200]	; (8014978 <__ieee754_pow+0x778>)
 80148ae:	4413      	add	r3, r2
 80148b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80148b4:	4606      	mov	r6, r0
 80148b6:	460f      	mov	r7, r1
 80148b8:	4652      	mov	r2, sl
 80148ba:	465b      	mov	r3, fp
 80148bc:	ec51 0b18 	vmov	r0, r1, d8
 80148c0:	f7eb fd0c 	bl	80002dc <__adddf3>
 80148c4:	4642      	mov	r2, r8
 80148c6:	464b      	mov	r3, r9
 80148c8:	f7eb fd08 	bl	80002dc <__adddf3>
 80148cc:	4632      	mov	r2, r6
 80148ce:	463b      	mov	r3, r7
 80148d0:	f7eb fd04 	bl	80002dc <__adddf3>
 80148d4:	2000      	movs	r0, #0
 80148d6:	4632      	mov	r2, r6
 80148d8:	463b      	mov	r3, r7
 80148da:	4604      	mov	r4, r0
 80148dc:	460d      	mov	r5, r1
 80148de:	f7eb fcfb 	bl	80002d8 <__aeabi_dsub>
 80148e2:	4642      	mov	r2, r8
 80148e4:	464b      	mov	r3, r9
 80148e6:	f7eb fcf7 	bl	80002d8 <__aeabi_dsub>
 80148ea:	ec53 2b18 	vmov	r2, r3, d8
 80148ee:	f7eb fcf3 	bl	80002d8 <__aeabi_dsub>
 80148f2:	4602      	mov	r2, r0
 80148f4:	460b      	mov	r3, r1
 80148f6:	4650      	mov	r0, sl
 80148f8:	4659      	mov	r1, fp
 80148fa:	e610      	b.n	801451e <__ieee754_pow+0x31e>
 80148fc:	2401      	movs	r4, #1
 80148fe:	e6a1      	b.n	8014644 <__ieee754_pow+0x444>
 8014900:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014950 <__ieee754_pow+0x750>
 8014904:	e617      	b.n	8014536 <__ieee754_pow+0x336>
 8014906:	bf00      	nop
 8014908:	4a454eef 	.word	0x4a454eef
 801490c:	3fca7e28 	.word	0x3fca7e28
 8014910:	93c9db65 	.word	0x93c9db65
 8014914:	3fcd864a 	.word	0x3fcd864a
 8014918:	a91d4101 	.word	0xa91d4101
 801491c:	3fd17460 	.word	0x3fd17460
 8014920:	518f264d 	.word	0x518f264d
 8014924:	3fd55555 	.word	0x3fd55555
 8014928:	db6fabff 	.word	0xdb6fabff
 801492c:	3fdb6db6 	.word	0x3fdb6db6
 8014930:	33333303 	.word	0x33333303
 8014934:	3fe33333 	.word	0x3fe33333
 8014938:	e0000000 	.word	0xe0000000
 801493c:	3feec709 	.word	0x3feec709
 8014940:	dc3a03fd 	.word	0xdc3a03fd
 8014944:	3feec709 	.word	0x3feec709
 8014948:	145b01f5 	.word	0x145b01f5
 801494c:	be3e2fe0 	.word	0xbe3e2fe0
 8014950:	00000000 	.word	0x00000000
 8014954:	3ff00000 	.word	0x3ff00000
 8014958:	7ff00000 	.word	0x7ff00000
 801495c:	43400000 	.word	0x43400000
 8014960:	0003988e 	.word	0x0003988e
 8014964:	000bb679 	.word	0x000bb679
 8014968:	08015b60 	.word	0x08015b60
 801496c:	3ff00000 	.word	0x3ff00000
 8014970:	40080000 	.word	0x40080000
 8014974:	08015b80 	.word	0x08015b80
 8014978:	08015b70 	.word	0x08015b70
 801497c:	a3b3      	add	r3, pc, #716	; (adr r3, 8014c4c <__ieee754_pow+0xa4c>)
 801497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014982:	4640      	mov	r0, r8
 8014984:	4649      	mov	r1, r9
 8014986:	f7eb fca9 	bl	80002dc <__adddf3>
 801498a:	4622      	mov	r2, r4
 801498c:	ec41 0b1a 	vmov	d10, r0, r1
 8014990:	462b      	mov	r3, r5
 8014992:	4630      	mov	r0, r6
 8014994:	4639      	mov	r1, r7
 8014996:	f7eb fc9f 	bl	80002d8 <__aeabi_dsub>
 801499a:	4602      	mov	r2, r0
 801499c:	460b      	mov	r3, r1
 801499e:	ec51 0b1a 	vmov	r0, r1, d10
 80149a2:	f7ec f8e1 	bl	8000b68 <__aeabi_dcmpgt>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	f47f ae04 	bne.w	80145b4 <__ieee754_pow+0x3b4>
 80149ac:	4aa2      	ldr	r2, [pc, #648]	; (8014c38 <__ieee754_pow+0xa38>)
 80149ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80149b2:	4293      	cmp	r3, r2
 80149b4:	f340 8107 	ble.w	8014bc6 <__ieee754_pow+0x9c6>
 80149b8:	151b      	asrs	r3, r3, #20
 80149ba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80149be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80149c2:	fa4a fa03 	asr.w	sl, sl, r3
 80149c6:	44da      	add	sl, fp
 80149c8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80149cc:	489b      	ldr	r0, [pc, #620]	; (8014c3c <__ieee754_pow+0xa3c>)
 80149ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80149d2:	4108      	asrs	r0, r1
 80149d4:	ea00 030a 	and.w	r3, r0, sl
 80149d8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80149dc:	f1c1 0114 	rsb	r1, r1, #20
 80149e0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80149e4:	fa4a fa01 	asr.w	sl, sl, r1
 80149e8:	f1bb 0f00 	cmp.w	fp, #0
 80149ec:	f04f 0200 	mov.w	r2, #0
 80149f0:	4620      	mov	r0, r4
 80149f2:	4629      	mov	r1, r5
 80149f4:	bfb8      	it	lt
 80149f6:	f1ca 0a00 	rsblt	sl, sl, #0
 80149fa:	f7eb fc6d 	bl	80002d8 <__aeabi_dsub>
 80149fe:	ec41 0b19 	vmov	d9, r0, r1
 8014a02:	4642      	mov	r2, r8
 8014a04:	464b      	mov	r3, r9
 8014a06:	ec51 0b19 	vmov	r0, r1, d9
 8014a0a:	f7eb fc67 	bl	80002dc <__adddf3>
 8014a0e:	a37a      	add	r3, pc, #488	; (adr r3, 8014bf8 <__ieee754_pow+0x9f8>)
 8014a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a14:	2000      	movs	r0, #0
 8014a16:	4604      	mov	r4, r0
 8014a18:	460d      	mov	r5, r1
 8014a1a:	f7eb fe15 	bl	8000648 <__aeabi_dmul>
 8014a1e:	ec53 2b19 	vmov	r2, r3, d9
 8014a22:	4606      	mov	r6, r0
 8014a24:	460f      	mov	r7, r1
 8014a26:	4620      	mov	r0, r4
 8014a28:	4629      	mov	r1, r5
 8014a2a:	f7eb fc55 	bl	80002d8 <__aeabi_dsub>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	460b      	mov	r3, r1
 8014a32:	4640      	mov	r0, r8
 8014a34:	4649      	mov	r1, r9
 8014a36:	f7eb fc4f 	bl	80002d8 <__aeabi_dsub>
 8014a3a:	a371      	add	r3, pc, #452	; (adr r3, 8014c00 <__ieee754_pow+0xa00>)
 8014a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a40:	f7eb fe02 	bl	8000648 <__aeabi_dmul>
 8014a44:	a370      	add	r3, pc, #448	; (adr r3, 8014c08 <__ieee754_pow+0xa08>)
 8014a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4a:	4680      	mov	r8, r0
 8014a4c:	4689      	mov	r9, r1
 8014a4e:	4620      	mov	r0, r4
 8014a50:	4629      	mov	r1, r5
 8014a52:	f7eb fdf9 	bl	8000648 <__aeabi_dmul>
 8014a56:	4602      	mov	r2, r0
 8014a58:	460b      	mov	r3, r1
 8014a5a:	4640      	mov	r0, r8
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	f7eb fc3d 	bl	80002dc <__adddf3>
 8014a62:	4604      	mov	r4, r0
 8014a64:	460d      	mov	r5, r1
 8014a66:	4602      	mov	r2, r0
 8014a68:	460b      	mov	r3, r1
 8014a6a:	4630      	mov	r0, r6
 8014a6c:	4639      	mov	r1, r7
 8014a6e:	f7eb fc35 	bl	80002dc <__adddf3>
 8014a72:	4632      	mov	r2, r6
 8014a74:	463b      	mov	r3, r7
 8014a76:	4680      	mov	r8, r0
 8014a78:	4689      	mov	r9, r1
 8014a7a:	f7eb fc2d 	bl	80002d8 <__aeabi_dsub>
 8014a7e:	4602      	mov	r2, r0
 8014a80:	460b      	mov	r3, r1
 8014a82:	4620      	mov	r0, r4
 8014a84:	4629      	mov	r1, r5
 8014a86:	f7eb fc27 	bl	80002d8 <__aeabi_dsub>
 8014a8a:	4642      	mov	r2, r8
 8014a8c:	4606      	mov	r6, r0
 8014a8e:	460f      	mov	r7, r1
 8014a90:	464b      	mov	r3, r9
 8014a92:	4640      	mov	r0, r8
 8014a94:	4649      	mov	r1, r9
 8014a96:	f7eb fdd7 	bl	8000648 <__aeabi_dmul>
 8014a9a:	a35d      	add	r3, pc, #372	; (adr r3, 8014c10 <__ieee754_pow+0xa10>)
 8014a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa0:	4604      	mov	r4, r0
 8014aa2:	460d      	mov	r5, r1
 8014aa4:	f7eb fdd0 	bl	8000648 <__aeabi_dmul>
 8014aa8:	a35b      	add	r3, pc, #364	; (adr r3, 8014c18 <__ieee754_pow+0xa18>)
 8014aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aae:	f7eb fc13 	bl	80002d8 <__aeabi_dsub>
 8014ab2:	4622      	mov	r2, r4
 8014ab4:	462b      	mov	r3, r5
 8014ab6:	f7eb fdc7 	bl	8000648 <__aeabi_dmul>
 8014aba:	a359      	add	r3, pc, #356	; (adr r3, 8014c20 <__ieee754_pow+0xa20>)
 8014abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac0:	f7eb fc0c 	bl	80002dc <__adddf3>
 8014ac4:	4622      	mov	r2, r4
 8014ac6:	462b      	mov	r3, r5
 8014ac8:	f7eb fdbe 	bl	8000648 <__aeabi_dmul>
 8014acc:	a356      	add	r3, pc, #344	; (adr r3, 8014c28 <__ieee754_pow+0xa28>)
 8014ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad2:	f7eb fc01 	bl	80002d8 <__aeabi_dsub>
 8014ad6:	4622      	mov	r2, r4
 8014ad8:	462b      	mov	r3, r5
 8014ada:	f7eb fdb5 	bl	8000648 <__aeabi_dmul>
 8014ade:	a354      	add	r3, pc, #336	; (adr r3, 8014c30 <__ieee754_pow+0xa30>)
 8014ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae4:	f7eb fbfa 	bl	80002dc <__adddf3>
 8014ae8:	4622      	mov	r2, r4
 8014aea:	462b      	mov	r3, r5
 8014aec:	f7eb fdac 	bl	8000648 <__aeabi_dmul>
 8014af0:	4602      	mov	r2, r0
 8014af2:	460b      	mov	r3, r1
 8014af4:	4640      	mov	r0, r8
 8014af6:	4649      	mov	r1, r9
 8014af8:	f7eb fbee 	bl	80002d8 <__aeabi_dsub>
 8014afc:	4604      	mov	r4, r0
 8014afe:	460d      	mov	r5, r1
 8014b00:	4602      	mov	r2, r0
 8014b02:	460b      	mov	r3, r1
 8014b04:	4640      	mov	r0, r8
 8014b06:	4649      	mov	r1, r9
 8014b08:	f7eb fd9e 	bl	8000648 <__aeabi_dmul>
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	ec41 0b19 	vmov	d9, r0, r1
 8014b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b16:	4620      	mov	r0, r4
 8014b18:	4629      	mov	r1, r5
 8014b1a:	f7eb fbdd 	bl	80002d8 <__aeabi_dsub>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	460b      	mov	r3, r1
 8014b22:	ec51 0b19 	vmov	r0, r1, d9
 8014b26:	f7eb feb9 	bl	800089c <__aeabi_ddiv>
 8014b2a:	4632      	mov	r2, r6
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	460d      	mov	r5, r1
 8014b30:	463b      	mov	r3, r7
 8014b32:	4640      	mov	r0, r8
 8014b34:	4649      	mov	r1, r9
 8014b36:	f7eb fd87 	bl	8000648 <__aeabi_dmul>
 8014b3a:	4632      	mov	r2, r6
 8014b3c:	463b      	mov	r3, r7
 8014b3e:	f7eb fbcd 	bl	80002dc <__adddf3>
 8014b42:	4602      	mov	r2, r0
 8014b44:	460b      	mov	r3, r1
 8014b46:	4620      	mov	r0, r4
 8014b48:	4629      	mov	r1, r5
 8014b4a:	f7eb fbc5 	bl	80002d8 <__aeabi_dsub>
 8014b4e:	4642      	mov	r2, r8
 8014b50:	464b      	mov	r3, r9
 8014b52:	f7eb fbc1 	bl	80002d8 <__aeabi_dsub>
 8014b56:	460b      	mov	r3, r1
 8014b58:	4602      	mov	r2, r0
 8014b5a:	4939      	ldr	r1, [pc, #228]	; (8014c40 <__ieee754_pow+0xa40>)
 8014b5c:	2000      	movs	r0, #0
 8014b5e:	f7eb fbbb 	bl	80002d8 <__aeabi_dsub>
 8014b62:	ec41 0b10 	vmov	d0, r0, r1
 8014b66:	ee10 3a90 	vmov	r3, s1
 8014b6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014b72:	da2b      	bge.n	8014bcc <__ieee754_pow+0x9cc>
 8014b74:	4650      	mov	r0, sl
 8014b76:	f000 f9f3 	bl	8014f60 <scalbn>
 8014b7a:	ec51 0b10 	vmov	r0, r1, d0
 8014b7e:	ec53 2b18 	vmov	r2, r3, d8
 8014b82:	f7ff bbee 	b.w	8014362 <__ieee754_pow+0x162>
 8014b86:	4b2f      	ldr	r3, [pc, #188]	; (8014c44 <__ieee754_pow+0xa44>)
 8014b88:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014b8c:	429e      	cmp	r6, r3
 8014b8e:	f77f af0d 	ble.w	80149ac <__ieee754_pow+0x7ac>
 8014b92:	4b2d      	ldr	r3, [pc, #180]	; (8014c48 <__ieee754_pow+0xa48>)
 8014b94:	440b      	add	r3, r1
 8014b96:	4303      	orrs	r3, r0
 8014b98:	d009      	beq.n	8014bae <__ieee754_pow+0x9ae>
 8014b9a:	ec51 0b18 	vmov	r0, r1, d8
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	f7eb ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8014ba6:	3800      	subs	r0, #0
 8014ba8:	bf18      	it	ne
 8014baa:	2001      	movne	r0, #1
 8014bac:	e448      	b.n	8014440 <__ieee754_pow+0x240>
 8014bae:	4622      	mov	r2, r4
 8014bb0:	462b      	mov	r3, r5
 8014bb2:	f7eb fb91 	bl	80002d8 <__aeabi_dsub>
 8014bb6:	4642      	mov	r2, r8
 8014bb8:	464b      	mov	r3, r9
 8014bba:	f7eb ffcb 	bl	8000b54 <__aeabi_dcmpge>
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	f43f aef4 	beq.w	80149ac <__ieee754_pow+0x7ac>
 8014bc4:	e7e9      	b.n	8014b9a <__ieee754_pow+0x99a>
 8014bc6:	f04f 0a00 	mov.w	sl, #0
 8014bca:	e71a      	b.n	8014a02 <__ieee754_pow+0x802>
 8014bcc:	ec51 0b10 	vmov	r0, r1, d0
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	e7d4      	b.n	8014b7e <__ieee754_pow+0x97e>
 8014bd4:	491a      	ldr	r1, [pc, #104]	; (8014c40 <__ieee754_pow+0xa40>)
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	f7ff bb31 	b.w	801423e <__ieee754_pow+0x3e>
 8014bdc:	2000      	movs	r0, #0
 8014bde:	2100      	movs	r1, #0
 8014be0:	f7ff bb2d 	b.w	801423e <__ieee754_pow+0x3e>
 8014be4:	4630      	mov	r0, r6
 8014be6:	4639      	mov	r1, r7
 8014be8:	f7ff bb29 	b.w	801423e <__ieee754_pow+0x3e>
 8014bec:	9204      	str	r2, [sp, #16]
 8014bee:	f7ff bb7b 	b.w	80142e8 <__ieee754_pow+0xe8>
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	f7ff bb65 	b.w	80142c2 <__ieee754_pow+0xc2>
 8014bf8:	00000000 	.word	0x00000000
 8014bfc:	3fe62e43 	.word	0x3fe62e43
 8014c00:	fefa39ef 	.word	0xfefa39ef
 8014c04:	3fe62e42 	.word	0x3fe62e42
 8014c08:	0ca86c39 	.word	0x0ca86c39
 8014c0c:	be205c61 	.word	0xbe205c61
 8014c10:	72bea4d0 	.word	0x72bea4d0
 8014c14:	3e663769 	.word	0x3e663769
 8014c18:	c5d26bf1 	.word	0xc5d26bf1
 8014c1c:	3ebbbd41 	.word	0x3ebbbd41
 8014c20:	af25de2c 	.word	0xaf25de2c
 8014c24:	3f11566a 	.word	0x3f11566a
 8014c28:	16bebd93 	.word	0x16bebd93
 8014c2c:	3f66c16c 	.word	0x3f66c16c
 8014c30:	5555553e 	.word	0x5555553e
 8014c34:	3fc55555 	.word	0x3fc55555
 8014c38:	3fe00000 	.word	0x3fe00000
 8014c3c:	fff00000 	.word	0xfff00000
 8014c40:	3ff00000 	.word	0x3ff00000
 8014c44:	4090cbff 	.word	0x4090cbff
 8014c48:	3f6f3400 	.word	0x3f6f3400
 8014c4c:	652b82fe 	.word	0x652b82fe
 8014c50:	3c971547 	.word	0x3c971547

08014c54 <fabs>:
 8014c54:	ec51 0b10 	vmov	r0, r1, d0
 8014c58:	ee10 2a10 	vmov	r2, s0
 8014c5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c60:	ec43 2b10 	vmov	d0, r2, r3
 8014c64:	4770      	bx	lr
	...

08014c68 <__ieee754_atan2f>:
 8014c68:	ee10 2a90 	vmov	r2, s1
 8014c6c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014c70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014c74:	b510      	push	{r4, lr}
 8014c76:	eef0 7a40 	vmov.f32	s15, s0
 8014c7a:	dc06      	bgt.n	8014c8a <__ieee754_atan2f+0x22>
 8014c7c:	ee10 0a10 	vmov	r0, s0
 8014c80:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014c84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014c88:	dd04      	ble.n	8014c94 <__ieee754_atan2f+0x2c>
 8014c8a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8014c92:	bd10      	pop	{r4, pc}
 8014c94:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014c98:	d103      	bne.n	8014ca2 <__ieee754_atan2f+0x3a>
 8014c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c9e:	f000 b883 	b.w	8014da8 <atanf>
 8014ca2:	1794      	asrs	r4, r2, #30
 8014ca4:	f004 0402 	and.w	r4, r4, #2
 8014ca8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014cac:	b943      	cbnz	r3, 8014cc0 <__ieee754_atan2f+0x58>
 8014cae:	2c02      	cmp	r4, #2
 8014cb0:	d05e      	beq.n	8014d70 <__ieee754_atan2f+0x108>
 8014cb2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014d84 <__ieee754_atan2f+0x11c>
 8014cb6:	2c03      	cmp	r4, #3
 8014cb8:	bf08      	it	eq
 8014cba:	eef0 7a47 	vmoveq.f32	s15, s14
 8014cbe:	e7e6      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014cc0:	b941      	cbnz	r1, 8014cd4 <__ieee754_atan2f+0x6c>
 8014cc2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014d88 <__ieee754_atan2f+0x120>
 8014cc6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014d8c <__ieee754_atan2f+0x124>
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	bfb8      	it	lt
 8014cce:	eef0 7a47 	vmovlt.f32	s15, s14
 8014cd2:	e7dc      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014cd4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014cd8:	d110      	bne.n	8014cfc <__ieee754_atan2f+0x94>
 8014cda:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014cde:	f104 34ff 	add.w	r4, r4, #4294967295
 8014ce2:	d107      	bne.n	8014cf4 <__ieee754_atan2f+0x8c>
 8014ce4:	2c02      	cmp	r4, #2
 8014ce6:	d846      	bhi.n	8014d76 <__ieee754_atan2f+0x10e>
 8014ce8:	4b29      	ldr	r3, [pc, #164]	; (8014d90 <__ieee754_atan2f+0x128>)
 8014cea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014cee:	edd3 7a00 	vldr	s15, [r3]
 8014cf2:	e7cc      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014cf4:	2c02      	cmp	r4, #2
 8014cf6:	d841      	bhi.n	8014d7c <__ieee754_atan2f+0x114>
 8014cf8:	4b26      	ldr	r3, [pc, #152]	; (8014d94 <__ieee754_atan2f+0x12c>)
 8014cfa:	e7f6      	b.n	8014cea <__ieee754_atan2f+0x82>
 8014cfc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014d00:	d0df      	beq.n	8014cc2 <__ieee754_atan2f+0x5a>
 8014d02:	1a5b      	subs	r3, r3, r1
 8014d04:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014d08:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014d0c:	da1a      	bge.n	8014d44 <__ieee754_atan2f+0xdc>
 8014d0e:	2a00      	cmp	r2, #0
 8014d10:	da01      	bge.n	8014d16 <__ieee754_atan2f+0xae>
 8014d12:	313c      	adds	r1, #60	; 0x3c
 8014d14:	db19      	blt.n	8014d4a <__ieee754_atan2f+0xe2>
 8014d16:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014d1a:	f000 f919 	bl	8014f50 <fabsf>
 8014d1e:	f000 f843 	bl	8014da8 <atanf>
 8014d22:	eef0 7a40 	vmov.f32	s15, s0
 8014d26:	2c01      	cmp	r4, #1
 8014d28:	d012      	beq.n	8014d50 <__ieee754_atan2f+0xe8>
 8014d2a:	2c02      	cmp	r4, #2
 8014d2c:	d017      	beq.n	8014d5e <__ieee754_atan2f+0xf6>
 8014d2e:	2c00      	cmp	r4, #0
 8014d30:	d0ad      	beq.n	8014c8e <__ieee754_atan2f+0x26>
 8014d32:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8014d98 <__ieee754_atan2f+0x130>
 8014d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d3a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8014d9c <__ieee754_atan2f+0x134>
 8014d3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d42:	e7a4      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014d44:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014d88 <__ieee754_atan2f+0x120>
 8014d48:	e7ed      	b.n	8014d26 <__ieee754_atan2f+0xbe>
 8014d4a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014da0 <__ieee754_atan2f+0x138>
 8014d4e:	e7ea      	b.n	8014d26 <__ieee754_atan2f+0xbe>
 8014d50:	ee17 3a90 	vmov	r3, s15
 8014d54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014d58:	ee07 3a90 	vmov	s15, r3
 8014d5c:	e797      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014d5e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014d98 <__ieee754_atan2f+0x130>
 8014d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d66:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8014d9c <__ieee754_atan2f+0x134>
 8014d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d6e:	e78e      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014d70:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014d9c <__ieee754_atan2f+0x134>
 8014d74:	e78b      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014d76:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014da4 <__ieee754_atan2f+0x13c>
 8014d7a:	e788      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014d7c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014da0 <__ieee754_atan2f+0x138>
 8014d80:	e785      	b.n	8014c8e <__ieee754_atan2f+0x26>
 8014d82:	bf00      	nop
 8014d84:	c0490fdb 	.word	0xc0490fdb
 8014d88:	3fc90fdb 	.word	0x3fc90fdb
 8014d8c:	bfc90fdb 	.word	0xbfc90fdb
 8014d90:	08015b90 	.word	0x08015b90
 8014d94:	08015b9c 	.word	0x08015b9c
 8014d98:	33bbbd2e 	.word	0x33bbbd2e
 8014d9c:	40490fdb 	.word	0x40490fdb
 8014da0:	00000000 	.word	0x00000000
 8014da4:	3f490fdb 	.word	0x3f490fdb

08014da8 <atanf>:
 8014da8:	b538      	push	{r3, r4, r5, lr}
 8014daa:	ee10 5a10 	vmov	r5, s0
 8014dae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014db2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014db6:	eef0 7a40 	vmov.f32	s15, s0
 8014dba:	db10      	blt.n	8014dde <atanf+0x36>
 8014dbc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014dc0:	dd04      	ble.n	8014dcc <atanf+0x24>
 8014dc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8014dca:	bd38      	pop	{r3, r4, r5, pc}
 8014dcc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014f04 <atanf+0x15c>
 8014dd0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014f08 <atanf+0x160>
 8014dd4:	2d00      	cmp	r5, #0
 8014dd6:	bfd8      	it	le
 8014dd8:	eef0 7a47 	vmovle.f32	s15, s14
 8014ddc:	e7f3      	b.n	8014dc6 <atanf+0x1e>
 8014dde:	4b4b      	ldr	r3, [pc, #300]	; (8014f0c <atanf+0x164>)
 8014de0:	429c      	cmp	r4, r3
 8014de2:	dc10      	bgt.n	8014e06 <atanf+0x5e>
 8014de4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014de8:	da0a      	bge.n	8014e00 <atanf+0x58>
 8014dea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014f10 <atanf+0x168>
 8014dee:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014df6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dfe:	dce2      	bgt.n	8014dc6 <atanf+0x1e>
 8014e00:	f04f 33ff 	mov.w	r3, #4294967295
 8014e04:	e013      	b.n	8014e2e <atanf+0x86>
 8014e06:	f000 f8a3 	bl	8014f50 <fabsf>
 8014e0a:	4b42      	ldr	r3, [pc, #264]	; (8014f14 <atanf+0x16c>)
 8014e0c:	429c      	cmp	r4, r3
 8014e0e:	dc4f      	bgt.n	8014eb0 <atanf+0x108>
 8014e10:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014e14:	429c      	cmp	r4, r3
 8014e16:	dc41      	bgt.n	8014e9c <atanf+0xf4>
 8014e18:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014e1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014e20:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014e24:	2300      	movs	r3, #0
 8014e26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014e2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014e2e:	1c5a      	adds	r2, r3, #1
 8014e30:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014e34:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014f18 <atanf+0x170>
 8014e38:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014f1c <atanf+0x174>
 8014e3c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014f20 <atanf+0x178>
 8014e40:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014e44:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014e48:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014f24 <atanf+0x17c>
 8014e4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014e50:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014f28 <atanf+0x180>
 8014e54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014e58:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014f2c <atanf+0x184>
 8014e5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014e60:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014f30 <atanf+0x188>
 8014e64:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014e68:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014f34 <atanf+0x18c>
 8014e6c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014e70:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014f38 <atanf+0x190>
 8014e74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014e78:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014f3c <atanf+0x194>
 8014e7c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014e80:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014f40 <atanf+0x198>
 8014e84:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014e88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014e8c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014e90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014e94:	d121      	bne.n	8014eda <atanf+0x132>
 8014e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e9a:	e794      	b.n	8014dc6 <atanf+0x1e>
 8014e9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014ea0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014ea4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014eae:	e7be      	b.n	8014e2e <atanf+0x86>
 8014eb0:	4b24      	ldr	r3, [pc, #144]	; (8014f44 <atanf+0x19c>)
 8014eb2:	429c      	cmp	r4, r3
 8014eb4:	dc0b      	bgt.n	8014ece <atanf+0x126>
 8014eb6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014ebe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014ec2:	2302      	movs	r3, #2
 8014ec4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014ecc:	e7af      	b.n	8014e2e <atanf+0x86>
 8014ece:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014ed2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014ed6:	2303      	movs	r3, #3
 8014ed8:	e7a9      	b.n	8014e2e <atanf+0x86>
 8014eda:	4a1b      	ldr	r2, [pc, #108]	; (8014f48 <atanf+0x1a0>)
 8014edc:	491b      	ldr	r1, [pc, #108]	; (8014f4c <atanf+0x1a4>)
 8014ede:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014ee2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014ee6:	edd3 6a00 	vldr	s13, [r3]
 8014eea:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014eee:	2d00      	cmp	r5, #0
 8014ef0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ef4:	edd2 7a00 	vldr	s15, [r2]
 8014ef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014efc:	bfb8      	it	lt
 8014efe:	eef1 7a67 	vneglt.f32	s15, s15
 8014f02:	e760      	b.n	8014dc6 <atanf+0x1e>
 8014f04:	3fc90fdb 	.word	0x3fc90fdb
 8014f08:	bfc90fdb 	.word	0xbfc90fdb
 8014f0c:	3edfffff 	.word	0x3edfffff
 8014f10:	7149f2ca 	.word	0x7149f2ca
 8014f14:	3f97ffff 	.word	0x3f97ffff
 8014f18:	3c8569d7 	.word	0x3c8569d7
 8014f1c:	3d4bda59 	.word	0x3d4bda59
 8014f20:	bd6ef16b 	.word	0xbd6ef16b
 8014f24:	3d886b35 	.word	0x3d886b35
 8014f28:	3dba2e6e 	.word	0x3dba2e6e
 8014f2c:	3e124925 	.word	0x3e124925
 8014f30:	3eaaaaab 	.word	0x3eaaaaab
 8014f34:	bd15a221 	.word	0xbd15a221
 8014f38:	bd9d8795 	.word	0xbd9d8795
 8014f3c:	bde38e38 	.word	0xbde38e38
 8014f40:	be4ccccd 	.word	0xbe4ccccd
 8014f44:	401bffff 	.word	0x401bffff
 8014f48:	08015ba8 	.word	0x08015ba8
 8014f4c:	08015bb8 	.word	0x08015bb8

08014f50 <fabsf>:
 8014f50:	ee10 3a10 	vmov	r3, s0
 8014f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f58:	ee00 3a10 	vmov	s0, r3
 8014f5c:	4770      	bx	lr
	...

08014f60 <scalbn>:
 8014f60:	b570      	push	{r4, r5, r6, lr}
 8014f62:	ec55 4b10 	vmov	r4, r5, d0
 8014f66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	462b      	mov	r3, r5
 8014f6e:	b999      	cbnz	r1, 8014f98 <scalbn+0x38>
 8014f70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f74:	4323      	orrs	r3, r4
 8014f76:	d03f      	beq.n	8014ff8 <scalbn+0x98>
 8014f78:	4b35      	ldr	r3, [pc, #212]	; (8015050 <scalbn+0xf0>)
 8014f7a:	4629      	mov	r1, r5
 8014f7c:	ee10 0a10 	vmov	r0, s0
 8014f80:	2200      	movs	r2, #0
 8014f82:	f7eb fb61 	bl	8000648 <__aeabi_dmul>
 8014f86:	4b33      	ldr	r3, [pc, #204]	; (8015054 <scalbn+0xf4>)
 8014f88:	429e      	cmp	r6, r3
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	460d      	mov	r5, r1
 8014f8e:	da10      	bge.n	8014fb2 <scalbn+0x52>
 8014f90:	a327      	add	r3, pc, #156	; (adr r3, 8015030 <scalbn+0xd0>)
 8014f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f96:	e01f      	b.n	8014fd8 <scalbn+0x78>
 8014f98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014f9c:	4291      	cmp	r1, r2
 8014f9e:	d10c      	bne.n	8014fba <scalbn+0x5a>
 8014fa0:	ee10 2a10 	vmov	r2, s0
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	4629      	mov	r1, r5
 8014fa8:	f7eb f998 	bl	80002dc <__adddf3>
 8014fac:	4604      	mov	r4, r0
 8014fae:	460d      	mov	r5, r1
 8014fb0:	e022      	b.n	8014ff8 <scalbn+0x98>
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014fb8:	3936      	subs	r1, #54	; 0x36
 8014fba:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014fbe:	4296      	cmp	r6, r2
 8014fc0:	dd0d      	ble.n	8014fde <scalbn+0x7e>
 8014fc2:	2d00      	cmp	r5, #0
 8014fc4:	a11c      	add	r1, pc, #112	; (adr r1, 8015038 <scalbn+0xd8>)
 8014fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fca:	da02      	bge.n	8014fd2 <scalbn+0x72>
 8014fcc:	a11c      	add	r1, pc, #112	; (adr r1, 8015040 <scalbn+0xe0>)
 8014fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fd2:	a319      	add	r3, pc, #100	; (adr r3, 8015038 <scalbn+0xd8>)
 8014fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd8:	f7eb fb36 	bl	8000648 <__aeabi_dmul>
 8014fdc:	e7e6      	b.n	8014fac <scalbn+0x4c>
 8014fde:	1872      	adds	r2, r6, r1
 8014fe0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014fe4:	428a      	cmp	r2, r1
 8014fe6:	dcec      	bgt.n	8014fc2 <scalbn+0x62>
 8014fe8:	2a00      	cmp	r2, #0
 8014fea:	dd08      	ble.n	8014ffe <scalbn+0x9e>
 8014fec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014ff0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ff4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ff8:	ec45 4b10 	vmov	d0, r4, r5
 8014ffc:	bd70      	pop	{r4, r5, r6, pc}
 8014ffe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015002:	da08      	bge.n	8015016 <scalbn+0xb6>
 8015004:	2d00      	cmp	r5, #0
 8015006:	a10a      	add	r1, pc, #40	; (adr r1, 8015030 <scalbn+0xd0>)
 8015008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801500c:	dac0      	bge.n	8014f90 <scalbn+0x30>
 801500e:	a10e      	add	r1, pc, #56	; (adr r1, 8015048 <scalbn+0xe8>)
 8015010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015014:	e7bc      	b.n	8014f90 <scalbn+0x30>
 8015016:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801501a:	3236      	adds	r2, #54	; 0x36
 801501c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015020:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015024:	4620      	mov	r0, r4
 8015026:	4b0c      	ldr	r3, [pc, #48]	; (8015058 <scalbn+0xf8>)
 8015028:	2200      	movs	r2, #0
 801502a:	e7d5      	b.n	8014fd8 <scalbn+0x78>
 801502c:	f3af 8000 	nop.w
 8015030:	c2f8f359 	.word	0xc2f8f359
 8015034:	01a56e1f 	.word	0x01a56e1f
 8015038:	8800759c 	.word	0x8800759c
 801503c:	7e37e43c 	.word	0x7e37e43c
 8015040:	8800759c 	.word	0x8800759c
 8015044:	fe37e43c 	.word	0xfe37e43c
 8015048:	c2f8f359 	.word	0xc2f8f359
 801504c:	81a56e1f 	.word	0x81a56e1f
 8015050:	43500000 	.word	0x43500000
 8015054:	ffff3cb0 	.word	0xffff3cb0
 8015058:	3c900000 	.word	0x3c900000

0801505c <with_errno>:
 801505c:	b570      	push	{r4, r5, r6, lr}
 801505e:	4604      	mov	r4, r0
 8015060:	460d      	mov	r5, r1
 8015062:	4616      	mov	r6, r2
 8015064:	f7fb f86e 	bl	8010144 <__errno>
 8015068:	4629      	mov	r1, r5
 801506a:	6006      	str	r6, [r0, #0]
 801506c:	4620      	mov	r0, r4
 801506e:	bd70      	pop	{r4, r5, r6, pc}

08015070 <xflow>:
 8015070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015072:	4614      	mov	r4, r2
 8015074:	461d      	mov	r5, r3
 8015076:	b108      	cbz	r0, 801507c <xflow+0xc>
 8015078:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801507c:	e9cd 2300 	strd	r2, r3, [sp]
 8015080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015084:	4620      	mov	r0, r4
 8015086:	4629      	mov	r1, r5
 8015088:	f7eb fade 	bl	8000648 <__aeabi_dmul>
 801508c:	2222      	movs	r2, #34	; 0x22
 801508e:	b003      	add	sp, #12
 8015090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015094:	f7ff bfe2 	b.w	801505c <with_errno>

08015098 <__math_uflow>:
 8015098:	b508      	push	{r3, lr}
 801509a:	2200      	movs	r2, #0
 801509c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80150a0:	f7ff ffe6 	bl	8015070 <xflow>
 80150a4:	ec41 0b10 	vmov	d0, r0, r1
 80150a8:	bd08      	pop	{r3, pc}

080150aa <__math_oflow>:
 80150aa:	b508      	push	{r3, lr}
 80150ac:	2200      	movs	r2, #0
 80150ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80150b2:	f7ff ffdd 	bl	8015070 <xflow>
 80150b6:	ec41 0b10 	vmov	d0, r0, r1
 80150ba:	bd08      	pop	{r3, pc}

080150bc <__ieee754_sqrt>:
 80150bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c0:	ec55 4b10 	vmov	r4, r5, d0
 80150c4:	4e67      	ldr	r6, [pc, #412]	; (8015264 <__ieee754_sqrt+0x1a8>)
 80150c6:	43ae      	bics	r6, r5
 80150c8:	ee10 0a10 	vmov	r0, s0
 80150cc:	ee10 2a10 	vmov	r2, s0
 80150d0:	4629      	mov	r1, r5
 80150d2:	462b      	mov	r3, r5
 80150d4:	d10d      	bne.n	80150f2 <__ieee754_sqrt+0x36>
 80150d6:	f7eb fab7 	bl	8000648 <__aeabi_dmul>
 80150da:	4602      	mov	r2, r0
 80150dc:	460b      	mov	r3, r1
 80150de:	4620      	mov	r0, r4
 80150e0:	4629      	mov	r1, r5
 80150e2:	f7eb f8fb 	bl	80002dc <__adddf3>
 80150e6:	4604      	mov	r4, r0
 80150e8:	460d      	mov	r5, r1
 80150ea:	ec45 4b10 	vmov	d0, r4, r5
 80150ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150f2:	2d00      	cmp	r5, #0
 80150f4:	dc0b      	bgt.n	801510e <__ieee754_sqrt+0x52>
 80150f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80150fa:	4326      	orrs	r6, r4
 80150fc:	d0f5      	beq.n	80150ea <__ieee754_sqrt+0x2e>
 80150fe:	b135      	cbz	r5, 801510e <__ieee754_sqrt+0x52>
 8015100:	f7eb f8ea 	bl	80002d8 <__aeabi_dsub>
 8015104:	4602      	mov	r2, r0
 8015106:	460b      	mov	r3, r1
 8015108:	f7eb fbc8 	bl	800089c <__aeabi_ddiv>
 801510c:	e7eb      	b.n	80150e6 <__ieee754_sqrt+0x2a>
 801510e:	1509      	asrs	r1, r1, #20
 8015110:	f000 808d 	beq.w	801522e <__ieee754_sqrt+0x172>
 8015114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015118:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801511c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015120:	07c9      	lsls	r1, r1, #31
 8015122:	bf5c      	itt	pl
 8015124:	005b      	lslpl	r3, r3, #1
 8015126:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801512a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801512e:	bf58      	it	pl
 8015130:	0052      	lslpl	r2, r2, #1
 8015132:	2500      	movs	r5, #0
 8015134:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015138:	1076      	asrs	r6, r6, #1
 801513a:	0052      	lsls	r2, r2, #1
 801513c:	f04f 0e16 	mov.w	lr, #22
 8015140:	46ac      	mov	ip, r5
 8015142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015146:	eb0c 0001 	add.w	r0, ip, r1
 801514a:	4298      	cmp	r0, r3
 801514c:	bfde      	ittt	le
 801514e:	1a1b      	suble	r3, r3, r0
 8015150:	eb00 0c01 	addle.w	ip, r0, r1
 8015154:	186d      	addle	r5, r5, r1
 8015156:	005b      	lsls	r3, r3, #1
 8015158:	f1be 0e01 	subs.w	lr, lr, #1
 801515c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015160:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015164:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015168:	d1ed      	bne.n	8015146 <__ieee754_sqrt+0x8a>
 801516a:	4674      	mov	r4, lr
 801516c:	2720      	movs	r7, #32
 801516e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015172:	4563      	cmp	r3, ip
 8015174:	eb01 000e 	add.w	r0, r1, lr
 8015178:	dc02      	bgt.n	8015180 <__ieee754_sqrt+0xc4>
 801517a:	d113      	bne.n	80151a4 <__ieee754_sqrt+0xe8>
 801517c:	4290      	cmp	r0, r2
 801517e:	d811      	bhi.n	80151a4 <__ieee754_sqrt+0xe8>
 8015180:	2800      	cmp	r0, #0
 8015182:	eb00 0e01 	add.w	lr, r0, r1
 8015186:	da57      	bge.n	8015238 <__ieee754_sqrt+0x17c>
 8015188:	f1be 0f00 	cmp.w	lr, #0
 801518c:	db54      	blt.n	8015238 <__ieee754_sqrt+0x17c>
 801518e:	f10c 0801 	add.w	r8, ip, #1
 8015192:	eba3 030c 	sub.w	r3, r3, ip
 8015196:	4290      	cmp	r0, r2
 8015198:	bf88      	it	hi
 801519a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801519e:	1a12      	subs	r2, r2, r0
 80151a0:	440c      	add	r4, r1
 80151a2:	46c4      	mov	ip, r8
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	3f01      	subs	r7, #1
 80151a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80151ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80151b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80151b4:	d1dd      	bne.n	8015172 <__ieee754_sqrt+0xb6>
 80151b6:	4313      	orrs	r3, r2
 80151b8:	d01b      	beq.n	80151f2 <__ieee754_sqrt+0x136>
 80151ba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015268 <__ieee754_sqrt+0x1ac>
 80151be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801526c <__ieee754_sqrt+0x1b0>
 80151c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80151c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80151ca:	f7eb f885 	bl	80002d8 <__aeabi_dsub>
 80151ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80151d2:	4602      	mov	r2, r0
 80151d4:	460b      	mov	r3, r1
 80151d6:	4640      	mov	r0, r8
 80151d8:	4649      	mov	r1, r9
 80151da:	f7eb fcb1 	bl	8000b40 <__aeabi_dcmple>
 80151de:	b140      	cbz	r0, 80151f2 <__ieee754_sqrt+0x136>
 80151e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80151e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80151e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80151ec:	d126      	bne.n	801523c <__ieee754_sqrt+0x180>
 80151ee:	3501      	adds	r5, #1
 80151f0:	463c      	mov	r4, r7
 80151f2:	106a      	asrs	r2, r5, #1
 80151f4:	0863      	lsrs	r3, r4, #1
 80151f6:	07e9      	lsls	r1, r5, #31
 80151f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80151fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015200:	bf48      	it	mi
 8015202:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015206:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801520a:	461c      	mov	r4, r3
 801520c:	e76d      	b.n	80150ea <__ieee754_sqrt+0x2e>
 801520e:	0ad3      	lsrs	r3, r2, #11
 8015210:	3815      	subs	r0, #21
 8015212:	0552      	lsls	r2, r2, #21
 8015214:	2b00      	cmp	r3, #0
 8015216:	d0fa      	beq.n	801520e <__ieee754_sqrt+0x152>
 8015218:	02dc      	lsls	r4, r3, #11
 801521a:	d50a      	bpl.n	8015232 <__ieee754_sqrt+0x176>
 801521c:	f1c1 0420 	rsb	r4, r1, #32
 8015220:	fa22 f404 	lsr.w	r4, r2, r4
 8015224:	1e4d      	subs	r5, r1, #1
 8015226:	408a      	lsls	r2, r1
 8015228:	4323      	orrs	r3, r4
 801522a:	1b41      	subs	r1, r0, r5
 801522c:	e772      	b.n	8015114 <__ieee754_sqrt+0x58>
 801522e:	4608      	mov	r0, r1
 8015230:	e7f0      	b.n	8015214 <__ieee754_sqrt+0x158>
 8015232:	005b      	lsls	r3, r3, #1
 8015234:	3101      	adds	r1, #1
 8015236:	e7ef      	b.n	8015218 <__ieee754_sqrt+0x15c>
 8015238:	46e0      	mov	r8, ip
 801523a:	e7aa      	b.n	8015192 <__ieee754_sqrt+0xd6>
 801523c:	f7eb f84e 	bl	80002dc <__adddf3>
 8015240:	e9da 8900 	ldrd	r8, r9, [sl]
 8015244:	4602      	mov	r2, r0
 8015246:	460b      	mov	r3, r1
 8015248:	4640      	mov	r0, r8
 801524a:	4649      	mov	r1, r9
 801524c:	f7eb fc6e 	bl	8000b2c <__aeabi_dcmplt>
 8015250:	b120      	cbz	r0, 801525c <__ieee754_sqrt+0x1a0>
 8015252:	1ca0      	adds	r0, r4, #2
 8015254:	bf08      	it	eq
 8015256:	3501      	addeq	r5, #1
 8015258:	3402      	adds	r4, #2
 801525a:	e7ca      	b.n	80151f2 <__ieee754_sqrt+0x136>
 801525c:	3401      	adds	r4, #1
 801525e:	f024 0401 	bic.w	r4, r4, #1
 8015262:	e7c6      	b.n	80151f2 <__ieee754_sqrt+0x136>
 8015264:	7ff00000 	.word	0x7ff00000
 8015268:	200001e8 	.word	0x200001e8
 801526c:	200001f0 	.word	0x200001f0

08015270 <_init>:
 8015270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015272:	bf00      	nop
 8015274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015276:	bc08      	pop	{r3}
 8015278:	469e      	mov	lr, r3
 801527a:	4770      	bx	lr

0801527c <_fini>:
 801527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801527e:	bf00      	nop
 8015280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015282:	bc08      	pop	{r3}
 8015284:	469e      	mov	lr, r3
 8015286:	4770      	bx	lr
